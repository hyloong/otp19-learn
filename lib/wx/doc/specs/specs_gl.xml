<module name="gl">
<type>
  <name>clamp</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-clamp">clamp()</marker> = float()</typehead></typedecl>
</type>
<type>
  <name>enum</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-enum">enum()</marker> = integer() &gt;= 0</typehead></typedecl>
</type>
<type>
  <name>matrix</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-matrix">matrix()</marker> = <seealso marker="#type-matrix12">matrix12()</seealso> | <seealso marker="#type-matrix16">matrix16()</seealso></typehead></typedecl>
</type>
<type>
  <name>matrix12</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-matrix12">matrix12()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float()}</typehead></typedecl>
</type>
<type>
  <name>matrix16</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-matrix16">matrix16()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float()}</typehead></typedecl>
</type>
<type>
  <name>mem</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-mem">mem()</marker> = binary() | tuple()</typehead></typedecl>
</type>
<type>
  <name>offset</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-offset">offset()</marker> = integer() &gt;= 0</typehead></typedecl>
</type>
<spec>
  <name>'begin'</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>'begin'(Mode) -&gt; ok</head>
      <guard>
        <subtype><typename>Mode</typename><string>Mode = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Mode</anno>
</spec>
<spec>
  <name>'end'</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>'end'() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>accum</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>accum(Op, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Op</typename><string>Op = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Value</typename><string>Value = float()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Op</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>activeShaderProgram</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>activeShaderProgram(Pipeline, Program) -&gt; ok</head>
      <guard>
        <subtype><typename>Pipeline</typename><string>Pipeline = Program = integer()</string></subtype>
        <subtype><typename>Program</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pipeline</anno>
  <anno>Program</anno>
</spec>
<spec>
  <name>activeTexture</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>activeTexture(Texture) -&gt; ok</head>
      <guard>
        <subtype><typename>Texture</typename><string>Texture = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Texture</anno>
</spec>
<spec>
  <name>alphaFunc</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>alphaFunc(Func, Ref) -&gt; ok</head>
      <guard>
        <subtype><typename>Func</typename><string>Func = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Ref</typename><string>Ref = <seealso marker="#type-clamp">clamp()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Func</anno>
  <anno>Ref</anno>
</spec>
<spec>
  <name>areTexturesResident</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>areTexturesResident(Textures) -&gt; {0 | 1, Residences :: [0 | 1]}</head>
      <guard>
        <subtype><typename>Textures</typename><string>Textures = [integer()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Residences</anno>
  <anno>Textures</anno>
</spec>
<spec>
  <name>arrayElement</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>arrayElement(I) -&gt; ok</head>
      <guard>
        <subtype><typename>I</typename><string>I = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>I</anno>
</spec>
<spec>
  <name>attachObjectARB</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>attachObjectARB(ContainerObj, Obj) -&gt; ok</head>
      <guard>
        <subtype><typename>ContainerObj</typename><string>ContainerObj = Obj = integer()</string></subtype>
        <subtype><typename>Obj</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>ContainerObj</anno>
  <anno>Obj</anno>
</spec>
<spec>
  <name>attachShader</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>attachShader(Program, Shader) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Shader = integer()</string></subtype>
        <subtype><typename>Shader</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Program</anno>
  <anno>Shader</anno>
</spec>
<spec>
  <name>beginConditionalRender</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>beginConditionalRender(Id, Mode) -&gt; ok</head>
      <guard>
        <subtype><typename>Id</typename><string>Id = integer()</string></subtype>
        <subtype><typename>Mode</typename><string>Mode = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Id</anno>
  <anno>Mode</anno>
</spec>
<spec>
  <name>beginQuery</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>beginQuery(Target, Id) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Id</typename><string>Id = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Id</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>beginQueryIndexed</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>beginQueryIndexed(Target, Index, Id) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Index</typename><string>Index = Id = integer()</string></subtype>
        <subtype><typename>Id</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Id</anno>
  <anno>Index</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>beginTransformFeedback</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>beginTransformFeedback(PrimitiveMode) -&gt; ok</head>
      <guard>
        <subtype><typename>PrimitiveMode</typename><string>PrimitiveMode = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>PrimitiveMode</anno>
</spec>
<spec>
  <name>bindAttribLocation</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>bindAttribLocation(Program, Index, Name) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Index = integer()</string></subtype>
        <subtype><typename>Index</typename><string/></subtype>
        <subtype><typename>Name</typename><string>Name = string()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>Name</anno>
  <anno>Program</anno>
</spec>
<spec>
  <name>bindAttribLocationARB</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>bindAttribLocationARB(ProgramObj, Index, Name) -&gt; ok</head>
      <guard>
        <subtype><typename>ProgramObj</typename><string>ProgramObj = Index = integer()</string></subtype>
        <subtype><typename>Index</typename><string/></subtype>
        <subtype><typename>Name</typename><string>Name = string()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>Name</anno>
  <anno>ProgramObj</anno>
</spec>
<spec>
  <name>bindBuffer</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>bindBuffer(Target, Buffer) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Buffer</typename><string>Buffer = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Buffer</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>bindBufferBase</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>bindBufferBase(Target, Index, Buffer) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Index</typename><string>Index = Buffer = integer()</string></subtype>
        <subtype><typename>Buffer</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Buffer</anno>
  <anno>Index</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>bindBufferRange</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>bindBufferRange(Target, Index, Buffer, Offset, Size) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Index</typename><string>Index = Buffer = Offset = Size = integer()</string></subtype>
        <subtype><typename>Buffer</typename><string></string></subtype>
        <subtype><typename>Offset</typename><string></string></subtype>
        <subtype><typename>Size</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Buffer</anno>
  <anno>Index</anno>
  <anno>Offset</anno>
  <anno>Size</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>bindFragDataLocation</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>bindFragDataLocation(Program, Color, Name) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Color = integer()</string></subtype>
        <subtype><typename>Color</typename><string/></subtype>
        <subtype><typename>Name</typename><string>Name = string()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Color</anno>
  <anno>Name</anno>
  <anno>Program</anno>
</spec>
<spec>
  <name>bindFragDataLocationIndexed</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>bindFragDataLocationIndexed(Program, ColorNumber, Index, Name) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = ColorNumber = Index = integer()</string></subtype>
        <subtype><typename>ColorNumber</typename><string/></subtype>
        <subtype><typename>Index</typename><string/></subtype>
        <subtype><typename>Name</typename><string>Name = string()</string></subtype>
      </guard></clause>
  </contract>
  <anno>ColorNumber</anno>
  <anno>Index</anno>
  <anno>Name</anno>
  <anno>Program</anno>
</spec>
<spec>
  <name>bindFramebuffer</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>bindFramebuffer(Target, Framebuffer) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Framebuffer</typename><string>Framebuffer = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Framebuffer</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>bindImageTexture</name>
  <arity>7</arity>
  <contract>
    <clause>
      <head>bindImageTexture(Unit,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Texture,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Level,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Layered,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Layer,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Access,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Format) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Unit</typename><string>Unit = Texture = Level = integer()</string></subtype>
        <subtype><typename>Texture</typename><string/></subtype>
        <subtype><typename>Level</typename><string/></subtype>
        <subtype><typename>Layered</typename><string>Layered = 0 | 1</string></subtype>
        <subtype><typename>Layer</typename><string>Layer = integer()</string></subtype>
        <subtype><typename>Access</typename><string>Access = Format = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Format</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Access</anno>
  <anno>Format</anno>
  <anno>Layer</anno>
  <anno>Layered</anno>
  <anno>Level</anno>
  <anno>Texture</anno>
  <anno>Unit</anno>
</spec>
<spec>
  <name>bindProgramARB</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>bindProgramARB(Target, Program) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Program</typename><string>Program = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Program</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>bindProgramPipeline</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>bindProgramPipeline(Pipeline) -&gt; ok</head>
      <guard>
        <subtype><typename>Pipeline</typename><string>Pipeline = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Pipeline</anno>
</spec>
<spec>
  <name>bindRenderbuffer</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>bindRenderbuffer(Target, Renderbuffer) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Renderbuffer</typename><string>Renderbuffer = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Renderbuffer</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>bindSampler</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>bindSampler(Unit, Sampler) -&gt; ok</head>
      <guard>
        <subtype><typename>Unit</typename><string>Unit = Sampler = integer()</string></subtype>
        <subtype><typename>Sampler</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Sampler</anno>
  <anno>Unit</anno>
</spec>
<spec>
  <name>bindTexture</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>bindTexture(Target, Texture) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Texture</typename><string>Texture = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Target</anno>
  <anno>Texture</anno>
</spec>
<spec>
  <name>bindTransformFeedback</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>bindTransformFeedback(Target, Id) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Id</typename><string>Id = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Id</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>bindVertexArray</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>bindVertexArray(Array) -&gt; ok</head>
      <guard>
        <subtype><typename>Array</typename><string>Array = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Array</anno>
</spec>
<spec>
  <name>bitmap</name>
  <arity>7</arity>
  <contract>
    <clause>
      <head>bitmap(Width, Height, Xorig, Yorig, Xmove, Ymove, Bitmap) -&gt; ok</head>
      <guard>
        <subtype><typename>Width</typename><string>Width = Height = integer()</string></subtype>
        <subtype><typename>Height</typename><string/></subtype>
        <subtype><typename>Xorig</typename><string>Xorig = Yorig = Xmove = Ymove = float()</string></subtype>
        <subtype><typename>Yorig</typename><string/></subtype>
        <subtype><typename>Xmove</typename><string/></subtype>
        <subtype><typename>Ymove</typename><string/></subtype>
        <subtype><typename>Bitmap</typename><string>Bitmap = <seealso marker="#type-offset">offset()</seealso> | <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Bitmap</anno>
  <anno>Height</anno>
  <anno>Width</anno>
  <anno>Xmove</anno>
  <anno>Xorig</anno>
  <anno>Ymove</anno>
  <anno>Yorig</anno>
</spec>
<spec>
  <name>blendColor</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>blendColor(Red, Green, Blue, Alpha) -&gt; ok</head>
      <guard>
        <subtype><typename>Red</typename><string>Red = Green = Blue = Alpha = <seealso marker="#type-clamp">clamp()</seealso></string></subtype>
        <subtype><typename>Green</typename><string></string></subtype>
        <subtype><typename>Blue</typename><string></string></subtype>
        <subtype><typename>Alpha</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Alpha</anno>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
</spec>
<spec>
  <name>blendEquation</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>blendEquation(Mode) -&gt; ok</head>
      <guard>
        <subtype><typename>Mode</typename><string>Mode = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Mode</anno>
</spec>
<spec>
  <name>blendEquationSeparate</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>blendEquationSeparate(ModeRGB, ModeAlpha) -&gt; ok</head>
      <guard>
        <subtype><typename>ModeRGB</typename><string>ModeRGB = ModeAlpha = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>ModeAlpha</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>ModeAlpha</anno>
  <anno>ModeRGB</anno>
</spec>
<spec>
  <name>blendEquationSeparatei</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>blendEquationSeparatei(Buf, ModeRGB, ModeAlpha) -&gt; ok</head>
      <guard>
        <subtype><typename>Buf</typename><string>Buf = integer()</string></subtype>
        <subtype><typename>ModeRGB</typename><string>ModeRGB = ModeAlpha = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>ModeAlpha</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Buf</anno>
  <anno>ModeAlpha</anno>
  <anno>ModeRGB</anno>
</spec>
<spec>
  <name>blendEquationi</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>blendEquationi(Buf, Mode) -&gt; ok</head>
      <guard>
        <subtype><typename>Buf</typename><string>Buf = integer()</string></subtype>
        <subtype><typename>Mode</typename><string>Mode = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Buf</anno>
  <anno>Mode</anno>
</spec>
<spec>
  <name>blendFunc</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>blendFunc(Sfactor, Dfactor) -&gt; ok</head>
      <guard>
        <subtype><typename>Sfactor</typename><string>Sfactor = Dfactor = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Dfactor</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Dfactor</anno>
  <anno>Sfactor</anno>
</spec>
<spec>
  <name>blendFuncSeparate</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>blendFuncSeparate(SfactorRGB,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>DfactorRGB,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>SfactorAlpha,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>DfactorAlpha) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>SfactorRGB</typename><string>SfactorRGB = DfactorRGB = SfactorAlpha = DfactorAlpha = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>DfactorRGB</typename><string></string></subtype>
        <subtype><typename>SfactorAlpha</typename><string></string></subtype>
        <subtype><typename>DfactorAlpha</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>DfactorAlpha</anno>
  <anno>DfactorRGB</anno>
  <anno>SfactorAlpha</anno>
  <anno>SfactorRGB</anno>
</spec>
<spec>
  <name>blendFuncSeparatei</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>blendFuncSeparatei(Buf, SrcRGB, DstRGB, SrcAlpha, DstAlpha) -&gt; ok</head>
      <guard>
        <subtype><typename>Buf</typename><string>Buf = integer()</string></subtype>
        <subtype><typename>SrcRGB</typename><string>SrcRGB = DstRGB = SrcAlpha = DstAlpha = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>DstRGB</typename><string></string></subtype>
        <subtype><typename>SrcAlpha</typename><string></string></subtype>
        <subtype><typename>DstAlpha</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Buf</anno>
  <anno>DstAlpha</anno>
  <anno>DstRGB</anno>
  <anno>SrcAlpha</anno>
  <anno>SrcRGB</anno>
</spec>
<spec>
  <name>blendFunci</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>blendFunci(Buf, Src, Dst) -&gt; ok</head>
      <guard>
        <subtype><typename>Buf</typename><string>Buf = integer()</string></subtype>
        <subtype><typename>Src</typename><string>Src = Dst = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Dst</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Buf</anno>
  <anno>Dst</anno>
  <anno>Src</anno>
</spec>
<spec>
  <name>blitFramebuffer</name>
  <arity>10</arity>
  <contract>
    <clause>
      <head>blitFramebuffer(SrcX0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>SrcY0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>SrcX1,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>SrcY1,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>DstX0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>DstY0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>DstX1,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>DstY1,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Mask,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Filter) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>SrcX0</typename><string>SrcX0 = SrcY0 = SrcX1 = SrcY1 = DstX0 = DstY0 = DstX1 = DstY1 = Mask = integer()</string></subtype>
        <subtype><typename>SrcY0</typename><string/></subtype>
        <subtype><typename>SrcX1</typename><string/></subtype>
        <subtype><typename>SrcY1</typename><string/></subtype>
        <subtype><typename>DstX0</typename><string/></subtype>
        <subtype><typename>DstY0</typename><string/></subtype>
        <subtype><typename>DstX1</typename><string/></subtype>
        <subtype><typename>DstY1</typename><string/></subtype>
        <subtype><typename>Mask</typename><string/></subtype>
        <subtype><typename>Filter</typename><string>Filter = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>DstX0</anno>
  <anno>DstX1</anno>
  <anno>DstY0</anno>
  <anno>DstY1</anno>
  <anno>Filter</anno>
  <anno>Mask</anno>
  <anno>SrcX0</anno>
  <anno>SrcX1</anno>
  <anno>SrcY0</anno>
  <anno>SrcY1</anno>
</spec>
<spec>
  <name>bufferData</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>bufferData(Target, Size, Data, Usage) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Size</typename><string>Size = integer()</string></subtype>
        <subtype><typename>Data</typename><string>Data = <seealso marker="#type-offset">offset()</seealso> | <seealso marker="#type-mem">mem()</seealso></string></subtype>
        <subtype><typename>Usage</typename><string>Usage = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Size</anno>
  <anno>Target</anno>
  <anno>Usage</anno>
</spec>
<spec>
  <name>bufferSubData</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>bufferSubData(Target, Offset, Size, Data) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Offset</typename><string>Offset = Size = integer()</string></subtype>
        <subtype><typename>Size</typename><string/></subtype>
        <subtype><typename>Data</typename><string>Data = <seealso marker="#type-offset">offset()</seealso> | <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Offset</anno>
  <anno>Size</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>call</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>callList</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>callList(List) -&gt; ok</head>
      <guard>
        <subtype><typename>List</typename><string>List = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>List</anno>
</spec>
<spec>
  <name>callLists</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>callLists(Lists) -&gt; ok</head>
      <guard>
        <subtype><typename>Lists</typename><string>Lists = [integer()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Lists</anno>
</spec>
<spec>
  <name>cast</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>checkFramebufferStatus</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>checkFramebufferStatus(Target) -&gt; <seealso marker="#type-enum">enum()</seealso></head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Target</anno>
</spec>
<spec>
  <name>clampColor</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>clampColor(Target, Clamp) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Clamp = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Clamp</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Clamp</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>clear</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>clear(Mask) -&gt; ok</head>
      <guard>
        <subtype><typename>Mask</typename><string>Mask = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Mask</anno>
</spec>
<spec>
  <name>clearAccum</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>clearAccum(Red, Green, Blue, Alpha) -&gt; ok</head>
      <guard>
        <subtype><typename>Red</typename><string>Red = Green = Blue = Alpha = float()</string></subtype>
        <subtype><typename>Green</typename><string></string></subtype>
        <subtype><typename>Blue</typename><string></string></subtype>
        <subtype><typename>Alpha</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Alpha</anno>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
</spec>
<spec>
  <name>clearBufferfi</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>clearBufferfi(Buffer, Drawbuffer, Depth, Stencil) -&gt; ok</head>
      <guard>
        <subtype><typename>Buffer</typename><string>Buffer = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Drawbuffer</typename><string>Drawbuffer = integer()</string></subtype>
        <subtype><typename>Depth</typename><string>Depth = float()</string></subtype>
        <subtype><typename>Stencil</typename><string>Stencil = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Buffer</anno>
  <anno>Depth</anno>
  <anno>Drawbuffer</anno>
  <anno>Stencil</anno>
</spec>
<spec>
  <name>clearBufferfv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>clearBufferfv(Buffer, Drawbuffer, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Buffer</typename><string>Buffer = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Drawbuffer</typename><string>Drawbuffer = integer()</string></subtype>
        <subtype><typename>Value</typename><string>Value = tuple()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Buffer</anno>
  <anno>Drawbuffer</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>clearBufferiv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>clearBufferiv(Buffer, Drawbuffer, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Buffer</typename><string>Buffer = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Drawbuffer</typename><string>Drawbuffer = integer()</string></subtype>
        <subtype><typename>Value</typename><string>Value = tuple()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Buffer</anno>
  <anno>Drawbuffer</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>clearBufferuiv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>clearBufferuiv(Buffer, Drawbuffer, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Buffer</typename><string>Buffer = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Drawbuffer</typename><string>Drawbuffer = integer()</string></subtype>
        <subtype><typename>Value</typename><string>Value = tuple()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Buffer</anno>
  <anno>Drawbuffer</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>clearColor</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>clearColor(Red, Green, Blue, Alpha) -&gt; ok</head>
      <guard>
        <subtype><typename>Red</typename><string>Red = Green = Blue = Alpha = <seealso marker="#type-clamp">clamp()</seealso></string></subtype>
        <subtype><typename>Green</typename><string></string></subtype>
        <subtype><typename>Blue</typename><string></string></subtype>
        <subtype><typename>Alpha</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Alpha</anno>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
</spec>
<spec>
  <name>clearDepth</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>clearDepth(Depth) -&gt; ok</head>
      <guard>
        <subtype><typename>Depth</typename><string>Depth = <seealso marker="#type-clamp">clamp()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Depth</anno>
</spec>
<spec>
  <name>clearDepthf</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>clearDepthf(D) -&gt; ok</head>
      <guard>
        <subtype><typename>D</typename><string>D = <seealso marker="#type-clamp">clamp()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>D</anno>
</spec>
<spec>
  <name>clearIndex</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>clearIndex(C) -&gt; ok</head>
      <guard>
        <subtype><typename>C</typename><string>C = float()</string></subtype>
      </guard></clause>
  </contract>
  <anno>C</anno>
</spec>
<spec>
  <name>clearStencil</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>clearStencil(S) -&gt; ok</head>
      <guard>
        <subtype><typename>S</typename><string>S = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>S</anno>
</spec>
<spec>
  <name>clientActiveTexture</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>clientActiveTexture(Texture) -&gt; ok</head>
      <guard>
        <subtype><typename>Texture</typename><string>Texture = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Texture</anno>
</spec>
<spec>
  <name>clientWaitSync</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>clientWaitSync(Sync, Flags, Timeout) -&gt; <seealso marker="#type-enum">enum()</seealso></head>
      <guard>
        <subtype><typename>Sync</typename><string>Sync = Flags = Timeout = integer()</string></subtype>
        <subtype><typename>Flags</typename><string></string></subtype>
        <subtype><typename>Timeout</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flags</anno>
  <anno>Sync</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>clipPlane</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>clipPlane(Plane, Equation) -&gt; ok</head>
      <guard>
        <subtype><typename>Plane</typename><string>Plane = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Equation</typename><string>Equation = {float(), float(), float(), float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Equation</anno>
  <anno>Plane</anno>
</spec>
<spec>
  <name>color3b</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>color3b(Red, Green, Blue) -&gt; ok</head>
      <guard>
        <subtype><typename>Red</typename><string>Red = Green = Blue = integer()</string></subtype>
        <subtype><typename>Green</typename><string></string></subtype>
        <subtype><typename>Blue</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
</spec>
<spec>
  <name>color3bv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>color3bv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {Red :: integer(), Green :: integer(), Blue :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>color3d</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>color3d(Red, Green, Blue) -&gt; ok</head>
      <guard>
        <subtype><typename>Red</typename><string>Red = Green = Blue = float()</string></subtype>
        <subtype><typename>Green</typename><string></string></subtype>
        <subtype><typename>Blue</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
</spec>
<spec>
  <name>color3dv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>color3dv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {Red :: float(), Green :: float(), Blue :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>color3f</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>color3f(Red, Green, Blue) -&gt; ok</head>
      <guard>
        <subtype><typename>Red</typename><string>Red = Green = Blue = float()</string></subtype>
        <subtype><typename>Green</typename><string></string></subtype>
        <subtype><typename>Blue</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
</spec>
<spec>
  <name>color3fv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>color3fv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {Red :: float(), Green :: float(), Blue :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>color3i</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>color3i(Red, Green, Blue) -&gt; ok</head>
      <guard>
        <subtype><typename>Red</typename><string>Red = Green = Blue = integer()</string></subtype>
        <subtype><typename>Green</typename><string></string></subtype>
        <subtype><typename>Blue</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
</spec>
<spec>
  <name>color3iv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>color3iv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {Red :: integer(), Green :: integer(), Blue :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>color3s</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>color3s(Red, Green, Blue) -&gt; ok</head>
      <guard>
        <subtype><typename>Red</typename><string>Red = Green = Blue = integer()</string></subtype>
        <subtype><typename>Green</typename><string></string></subtype>
        <subtype><typename>Blue</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
</spec>
<spec>
  <name>color3sv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>color3sv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {Red :: integer(), Green :: integer(), Blue :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>color3ub</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>color3ub(Red, Green, Blue) -&gt; ok</head>
      <guard>
        <subtype><typename>Red</typename><string>Red = Green = Blue = integer()</string></subtype>
        <subtype><typename>Green</typename><string></string></subtype>
        <subtype><typename>Blue</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
</spec>
<spec>
  <name>color3ubv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>color3ubv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {Red :: integer(), Green :: integer(), Blue :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>color3ui</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>color3ui(Red, Green, Blue) -&gt; ok</head>
      <guard>
        <subtype><typename>Red</typename><string>Red = Green = Blue = integer()</string></subtype>
        <subtype><typename>Green</typename><string></string></subtype>
        <subtype><typename>Blue</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
</spec>
<spec>
  <name>color3uiv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>color3uiv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {Red :: integer(), Green :: integer(), Blue :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>color3us</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>color3us(Red, Green, Blue) -&gt; ok</head>
      <guard>
        <subtype><typename>Red</typename><string>Red = Green = Blue = integer()</string></subtype>
        <subtype><typename>Green</typename><string></string></subtype>
        <subtype><typename>Blue</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
</spec>
<spec>
  <name>color3usv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>color3usv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {Red :: integer(), Green :: integer(), Blue :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>color4b</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>color4b(Red, Green, Blue, Alpha) -&gt; ok</head>
      <guard>
        <subtype><typename>Red</typename><string>Red = Green = Blue = Alpha = integer()</string></subtype>
        <subtype><typename>Green</typename><string></string></subtype>
        <subtype><typename>Blue</typename><string></string></subtype>
        <subtype><typename>Alpha</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Alpha</anno>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
</spec>
<spec>
  <name>color4bv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>color4bv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{Red :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Green :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Blue :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Alpha :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Alpha</anno>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>color4d</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>color4d(Red, Green, Blue, Alpha) -&gt; ok</head>
      <guard>
        <subtype><typename>Red</typename><string>Red = Green = Blue = Alpha = float()</string></subtype>
        <subtype><typename>Green</typename><string></string></subtype>
        <subtype><typename>Blue</typename><string></string></subtype>
        <subtype><typename>Alpha</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Alpha</anno>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
</spec>
<spec>
  <name>color4dv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>color4dv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{Red :: float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Green :: float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Blue :: float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Alpha :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Alpha</anno>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>color4f</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>color4f(Red, Green, Blue, Alpha) -&gt; ok</head>
      <guard>
        <subtype><typename>Red</typename><string>Red = Green = Blue = Alpha = float()</string></subtype>
        <subtype><typename>Green</typename><string></string></subtype>
        <subtype><typename>Blue</typename><string></string></subtype>
        <subtype><typename>Alpha</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Alpha</anno>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
</spec>
<spec>
  <name>color4fv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>color4fv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{Red :: float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Green :: float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Blue :: float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Alpha :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Alpha</anno>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>color4i</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>color4i(Red, Green, Blue, Alpha) -&gt; ok</head>
      <guard>
        <subtype><typename>Red</typename><string>Red = Green = Blue = Alpha = integer()</string></subtype>
        <subtype><typename>Green</typename><string></string></subtype>
        <subtype><typename>Blue</typename><string></string></subtype>
        <subtype><typename>Alpha</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Alpha</anno>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
</spec>
<spec>
  <name>color4iv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>color4iv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{Red :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Green :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Blue :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Alpha :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Alpha</anno>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>color4s</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>color4s(Red, Green, Blue, Alpha) -&gt; ok</head>
      <guard>
        <subtype><typename>Red</typename><string>Red = Green = Blue = Alpha = integer()</string></subtype>
        <subtype><typename>Green</typename><string></string></subtype>
        <subtype><typename>Blue</typename><string></string></subtype>
        <subtype><typename>Alpha</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Alpha</anno>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
</spec>
<spec>
  <name>color4sv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>color4sv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{Red :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Green :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Blue :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Alpha :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Alpha</anno>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>color4ub</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>color4ub(Red, Green, Blue, Alpha) -&gt; ok</head>
      <guard>
        <subtype><typename>Red</typename><string>Red = Green = Blue = Alpha = integer()</string></subtype>
        <subtype><typename>Green</typename><string></string></subtype>
        <subtype><typename>Blue</typename><string></string></subtype>
        <subtype><typename>Alpha</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Alpha</anno>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
</spec>
<spec>
  <name>color4ubv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>color4ubv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{Red :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Green :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Blue :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Alpha :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Alpha</anno>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>color4ui</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>color4ui(Red, Green, Blue, Alpha) -&gt; ok</head>
      <guard>
        <subtype><typename>Red</typename><string>Red = Green = Blue = Alpha = integer()</string></subtype>
        <subtype><typename>Green</typename><string></string></subtype>
        <subtype><typename>Blue</typename><string></string></subtype>
        <subtype><typename>Alpha</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Alpha</anno>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
</spec>
<spec>
  <name>color4uiv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>color4uiv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{Red :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Green :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Blue :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Alpha :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Alpha</anno>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>color4us</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>color4us(Red, Green, Blue, Alpha) -&gt; ok</head>
      <guard>
        <subtype><typename>Red</typename><string>Red = Green = Blue = Alpha = integer()</string></subtype>
        <subtype><typename>Green</typename><string></string></subtype>
        <subtype><typename>Blue</typename><string></string></subtype>
        <subtype><typename>Alpha</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Alpha</anno>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
</spec>
<spec>
  <name>color4usv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>color4usv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{Red :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Green :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Blue :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Alpha :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Alpha</anno>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>colorMask</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>colorMask(Red, Green, Blue, Alpha) -&gt; ok</head>
      <guard>
        <subtype><typename>Red</typename><string>Red = Green = Blue = Alpha = 0 | 1</string></subtype>
        <subtype><typename>Green</typename><string></string></subtype>
        <subtype><typename>Blue</typename><string></string></subtype>
        <subtype><typename>Alpha</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Alpha</anno>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
</spec>
<spec>
  <name>colorMaski</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>colorMaski(Index, R, G, B, A) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>R</typename><string>R = G = B = A = 0 | 1</string></subtype>
        <subtype><typename>G</typename><string></string></subtype>
        <subtype><typename>B</typename><string></string></subtype>
        <subtype><typename>A</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>A</anno>
  <anno>B</anno>
  <anno>G</anno>
  <anno>Index</anno>
  <anno>R</anno>
</spec>
<spec>
  <name>colorMaterial</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>colorMaterial(Face, Mode) -&gt; ok</head>
      <guard>
        <subtype><typename>Face</typename><string>Face = Mode = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Mode</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Face</anno>
  <anno>Mode</anno>
</spec>
<spec>
  <name>colorPointer</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>colorPointer(Size, Type, Stride, Ptr) -&gt; ok</head>
      <guard>
        <subtype><typename>Size</typename><string>Size = integer()</string></subtype>
        <subtype><typename>Type</typename><string>Type = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Stride</typename><string>Stride = integer()</string></subtype>
        <subtype><typename>Ptr</typename><string>Ptr = <seealso marker="#type-offset">offset()</seealso> | <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Ptr</anno>
  <anno>Size</anno>
  <anno>Stride</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>colorSubTable</name>
  <arity>6</arity>
  <contract>
    <clause>
      <head>colorSubTable(Target, Start, Count, Format, Type, Data) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Start</typename><string>Start = Count = integer()</string></subtype>
        <subtype><typename>Count</typename><string/></subtype>
        <subtype><typename>Format</typename><string>Format = Type = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Type</typename><string/></subtype>
        <subtype><typename>Data</typename><string>Data = <seealso marker="#type-offset">offset()</seealso> | <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Count</anno>
  <anno>Data</anno>
  <anno>Format</anno>
  <anno>Start</anno>
  <anno>Target</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>colorTable</name>
  <arity>6</arity>
  <contract>
    <clause>
      <head>colorTable(Target, Internalformat, Width, Format, Type, Table) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Internalformat = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Internalformat</typename><string/></subtype>
        <subtype><typename>Width</typename><string>Width = integer()</string></subtype>
        <subtype><typename>Format</typename><string>Format = Type = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Type</typename><string/></subtype>
        <subtype><typename>Table</typename><string>Table = <seealso marker="#type-offset">offset()</seealso> | <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Format</anno>
  <anno>Internalformat</anno>
  <anno>Table</anno>
  <anno>Target</anno>
  <anno>Type</anno>
  <anno>Width</anno>
</spec>
<spec>
  <name>colorTableParameterfv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>colorTableParameterfv(Target, Pname, Params) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string/></subtype>
        <subtype><typename>Params</typename><string>Params = {float(), float(), float(), float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Params</anno>
  <anno>Pname</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>colorTableParameteriv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>colorTableParameteriv(Target, Pname, Params) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string/></subtype>
        <subtype><typename>Params</typename><string>Params = {integer(), integer(), integer(), integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Params</anno>
  <anno>Pname</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>compileShader</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>compileShader(Shader) -&gt; ok</head>
      <guard>
        <subtype><typename>Shader</typename><string>Shader = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Shader</anno>
</spec>
<spec>
  <name>compileShaderARB</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>compileShaderARB(ShaderObj) -&gt; ok</head>
      <guard>
        <subtype><typename>ShaderObj</typename><string>ShaderObj = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>ShaderObj</anno>
</spec>
<spec>
  <name>compileShaderIncludeARB</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>compileShaderIncludeARB(Shader, Path) -&gt; ok</head>
      <guard>
        <subtype><typename>Shader</typename><string>Shader = integer()</string></subtype>
        <subtype><typename>Path</typename><string>Path = iolist()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Path</anno>
  <anno>Shader</anno>
</spec>
<spec>
  <name>compressedTexImage1D</name>
  <arity>7</arity>
  <contract>
    <clause>
      <head>compressedTexImage1D(Target,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Level,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Internalformat,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Width,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Border,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ImageSize,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Data) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Level</typename><string>Level = integer()</string></subtype>
        <subtype><typename>Internalformat</typename><string>Internalformat = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Width</typename><string>Width = Border = ImageSize = integer()</string></subtype>
        <subtype><typename>Border</typename><string/></subtype>
        <subtype><typename>ImageSize</typename><string/></subtype>
        <subtype><typename>Data</typename><string>Data = <seealso marker="#type-offset">offset()</seealso> | <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Border</anno>
  <anno>Data</anno>
  <anno>ImageSize</anno>
  <anno>Internalformat</anno>
  <anno>Level</anno>
  <anno>Target</anno>
  <anno>Width</anno>
</spec>
<spec>
  <name>compressedTexImage2D</name>
  <arity>8</arity>
  <contract>
    <clause>
      <head>compressedTexImage2D(Target,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Level,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Internalformat,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Width,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Height,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Border,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ImageSize,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Data) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Level</typename><string>Level = integer()</string></subtype>
        <subtype><typename>Internalformat</typename><string>Internalformat = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Width</typename><string>Width = Height = Border = ImageSize = integer()</string></subtype>
        <subtype><typename>Height</typename><string/></subtype>
        <subtype><typename>Border</typename><string/></subtype>
        <subtype><typename>ImageSize</typename><string/></subtype>
        <subtype><typename>Data</typename><string>Data = <seealso marker="#type-offset">offset()</seealso> | <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Border</anno>
  <anno>Data</anno>
  <anno>Height</anno>
  <anno>ImageSize</anno>
  <anno>Internalformat</anno>
  <anno>Level</anno>
  <anno>Target</anno>
  <anno>Width</anno>
</spec>
<spec>
  <name>compressedTexImage3D</name>
  <arity>9</arity>
  <contract>
    <clause>
      <head>compressedTexImage3D(Target,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Level,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Internalformat,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Width,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Height,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Depth,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Border,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ImageSize,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Data) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Level</typename><string>Level = integer()</string></subtype>
        <subtype><typename>Internalformat</typename><string>Internalformat = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Width</typename><string>Width = Height = Depth = Border = ImageSize = integer()</string></subtype>
        <subtype><typename>Height</typename><string/></subtype>
        <subtype><typename>Depth</typename><string/></subtype>
        <subtype><typename>Border</typename><string/></subtype>
        <subtype><typename>ImageSize</typename><string/></subtype>
        <subtype><typename>Data</typename><string>Data = <seealso marker="#type-offset">offset()</seealso> | <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Border</anno>
  <anno>Data</anno>
  <anno>Depth</anno>
  <anno>Height</anno>
  <anno>ImageSize</anno>
  <anno>Internalformat</anno>
  <anno>Level</anno>
  <anno>Target</anno>
  <anno>Width</anno>
</spec>
<spec>
  <name>compressedTexSubImage1D</name>
  <arity>7</arity>
  <contract>
    <clause>
      <head>compressedTexSubImage1D(Target,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Level,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Xoffset,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Width,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Format,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ImageSize,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Data) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Level</typename><string>Level = Xoffset = Width = integer()</string></subtype>
        <subtype><typename>Xoffset</typename><string/></subtype>
        <subtype><typename>Width</typename><string/></subtype>
        <subtype><typename>Format</typename><string>Format = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>ImageSize</typename><string>ImageSize = integer()</string></subtype>
        <subtype><typename>Data</typename><string>Data = <seealso marker="#type-offset">offset()</seealso> | <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Format</anno>
  <anno>ImageSize</anno>
  <anno>Level</anno>
  <anno>Target</anno>
  <anno>Width</anno>
  <anno>Xoffset</anno>
</spec>
<spec>
  <name>compressedTexSubImage2D</name>
  <arity>9</arity>
  <contract>
    <clause>
      <head>compressedTexSubImage2D(Target,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Level,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Xoffset,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Yoffset,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Width,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Height,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Format,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ImageSize,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Data) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Level</typename><string>Level = Xoffset = Yoffset = Width = Height = integer()</string></subtype>
        <subtype><typename>Xoffset</typename><string/></subtype>
        <subtype><typename>Yoffset</typename><string/></subtype>
        <subtype><typename>Width</typename><string/></subtype>
        <subtype><typename>Height</typename><string/></subtype>
        <subtype><typename>Format</typename><string>Format = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>ImageSize</typename><string>ImageSize = integer()</string></subtype>
        <subtype><typename>Data</typename><string>Data = <seealso marker="#type-offset">offset()</seealso> | <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Format</anno>
  <anno>Height</anno>
  <anno>ImageSize</anno>
  <anno>Level</anno>
  <anno>Target</anno>
  <anno>Width</anno>
  <anno>Xoffset</anno>
  <anno>Yoffset</anno>
</spec>
<spec>
  <name>compressedTexSubImage3D</name>
  <arity>11</arity>
  <contract>
    <clause>
      <head>compressedTexSubImage3D(Target,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Level,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Xoffset,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Yoffset,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Zoffset,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Width,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Height,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Depth,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Format,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ImageSize,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Data) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Level</typename><string>Level = Xoffset = Yoffset = Zoffset = Width = Height = Depth = integer()</string></subtype>
        <subtype><typename>Xoffset</typename><string/></subtype>
        <subtype><typename>Yoffset</typename><string/></subtype>
        <subtype><typename>Zoffset</typename><string/></subtype>
        <subtype><typename>Width</typename><string/></subtype>
        <subtype><typename>Height</typename><string/></subtype>
        <subtype><typename>Depth</typename><string/></subtype>
        <subtype><typename>Format</typename><string>Format = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>ImageSize</typename><string>ImageSize = integer()</string></subtype>
        <subtype><typename>Data</typename><string>Data = <seealso marker="#type-offset">offset()</seealso> | <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Depth</anno>
  <anno>Format</anno>
  <anno>Height</anno>
  <anno>ImageSize</anno>
  <anno>Level</anno>
  <anno>Target</anno>
  <anno>Width</anno>
  <anno>Xoffset</anno>
  <anno>Yoffset</anno>
  <anno>Zoffset</anno>
</spec>
<spec>
  <name>convolutionFilter1D</name>
  <arity>6</arity>
  <contract>
    <clause>
      <head>convolutionFilter1D(Target,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Internalformat,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Width,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Format,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Type,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Image) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Internalformat = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Internalformat</typename><string/></subtype>
        <subtype><typename>Width</typename><string>Width = integer()</string></subtype>
        <subtype><typename>Format</typename><string>Format = Type = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Type</typename><string/></subtype>
        <subtype><typename>Image</typename><string>Image = <seealso marker="#type-offset">offset()</seealso> | <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Format</anno>
  <anno>Image</anno>
  <anno>Internalformat</anno>
  <anno>Target</anno>
  <anno>Type</anno>
  <anno>Width</anno>
</spec>
<spec>
  <name>convolutionFilter2D</name>
  <arity>7</arity>
  <contract>
    <clause>
      <head>convolutionFilter2D(Target,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Internalformat,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Width,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Height,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Format,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Type,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Image) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Internalformat = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Internalformat</typename><string/></subtype>
        <subtype><typename>Width</typename><string>Width = Height = integer()</string></subtype>
        <subtype><typename>Height</typename><string/></subtype>
        <subtype><typename>Format</typename><string>Format = Type = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Type</typename><string/></subtype>
        <subtype><typename>Image</typename><string>Image = <seealso marker="#type-offset">offset()</seealso> | <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Format</anno>
  <anno>Height</anno>
  <anno>Image</anno>
  <anno>Internalformat</anno>
  <anno>Target</anno>
  <anno>Type</anno>
  <anno>Width</anno>
</spec>
<spec>
  <name>convolutionParameterf</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>convolutionParameterf(Target, Pname, Params) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string/></subtype>
        <subtype><typename>Params</typename><string>Params = tuple()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Params</anno>
  <anno>Pname</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>convolutionParameterfv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>convolutionParameterfv(Target :: <seealso marker="#type-enum">enum()</seealso>, Pname :: <seealso marker="#type-enum">enum()</seealso>, Params) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Params</typename><string>Params = {Params :: tuple()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Params</anno>
  <anno>Pname</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>convolutionParameteri</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>convolutionParameteri(Target, Pname, Params) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string/></subtype>
        <subtype><typename>Params</typename><string>Params = tuple()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Params</anno>
  <anno>Pname</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>convolutionParameteriv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>convolutionParameteriv(Target :: <seealso marker="#type-enum">enum()</seealso>, Pname :: <seealso marker="#type-enum">enum()</seealso>, Params) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Params</typename><string>Params = {Params :: tuple()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Params</anno>
  <anno>Pname</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>copyBufferSubData</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>copyBufferSubData(ReadTarget,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>WriteTarget,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ReadOffset,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>WriteOffset,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Size) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>ReadTarget</typename><string>ReadTarget = WriteTarget = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>WriteTarget</typename><string/></subtype>
        <subtype><typename>ReadOffset</typename><string>ReadOffset = WriteOffset = Size = integer()</string></subtype>
        <subtype><typename>WriteOffset</typename><string></string></subtype>
        <subtype><typename>Size</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>ReadOffset</anno>
  <anno>ReadTarget</anno>
  <anno>Size</anno>
  <anno>WriteOffset</anno>
  <anno>WriteTarget</anno>
</spec>
<spec>
  <name>copyColorSubTable</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>copyColorSubTable(Target, Start, X, Y, Width) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Start</typename><string>Start = X = Y = Width = integer()</string></subtype>
        <subtype><typename>X</typename><string></string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Width</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Start</anno>
  <anno>Target</anno>
  <anno>Width</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>copyColorTable</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>copyColorTable(Target, Internalformat, X, Y, Width) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Internalformat = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Internalformat</typename><string/></subtype>
        <subtype><typename>X</typename><string>X = Y = Width = integer()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Width</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Internalformat</anno>
  <anno>Target</anno>
  <anno>Width</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>copyConvolutionFilter1D</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>copyConvolutionFilter1D(Target, Internalformat, X, Y, Width) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Internalformat = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Internalformat</typename><string/></subtype>
        <subtype><typename>X</typename><string>X = Y = Width = integer()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Width</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Internalformat</anno>
  <anno>Target</anno>
  <anno>Width</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>copyConvolutionFilter2D</name>
  <arity>6</arity>
  <contract>
    <clause>
      <head>copyConvolutionFilter2D(Target,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Internalformat,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>X,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Y,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Width,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Height) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Internalformat = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Internalformat</typename><string/></subtype>
        <subtype><typename>X</typename><string>X = Y = Width = Height = integer()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Width</typename><string></string></subtype>
        <subtype><typename>Height</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Height</anno>
  <anno>Internalformat</anno>
  <anno>Target</anno>
  <anno>Width</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>copyPixels</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>copyPixels(X, Y, Width, Height, Type) -&gt; ok</head>
      <guard>
        <subtype><typename>X</typename><string>X = Y = Width = Height = integer()</string></subtype>
        <subtype><typename>Y</typename><string/></subtype>
        <subtype><typename>Width</typename><string/></subtype>
        <subtype><typename>Height</typename><string/></subtype>
        <subtype><typename>Type</typename><string>Type = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Height</anno>
  <anno>Type</anno>
  <anno>Width</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>copyTexImage1D</name>
  <arity>7</arity>
  <contract>
    <clause>
      <head>copyTexImage1D(Target, Level, Internalformat, X, Y, Width, Border) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Level</typename><string>Level = integer()</string></subtype>
        <subtype><typename>Internalformat</typename><string>Internalformat = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>X</typename><string>X = Y = Width = Border = integer()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Width</typename><string></string></subtype>
        <subtype><typename>Border</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Border</anno>
  <anno>Internalformat</anno>
  <anno>Level</anno>
  <anno>Target</anno>
  <anno>Width</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>copyTexImage2D</name>
  <arity>8</arity>
  <contract>
    <clause>
      <head>copyTexImage2D(Target,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Level,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Internalformat,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>X,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Y,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Width,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Height,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Border) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Level</typename><string>Level = integer()</string></subtype>
        <subtype><typename>Internalformat</typename><string>Internalformat = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>X</typename><string>X = Y = Width = Height = Border = integer()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Width</typename><string></string></subtype>
        <subtype><typename>Height</typename><string></string></subtype>
        <subtype><typename>Border</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Border</anno>
  <anno>Height</anno>
  <anno>Internalformat</anno>
  <anno>Level</anno>
  <anno>Target</anno>
  <anno>Width</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>copyTexSubImage1D</name>
  <arity>6</arity>
  <contract>
    <clause>
      <head>copyTexSubImage1D(Target, Level, Xoffset, X, Y, Width) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Level</typename><string>Level = Xoffset = X = Y = Width = integer()</string></subtype>
        <subtype><typename>Xoffset</typename><string></string></subtype>
        <subtype><typename>X</typename><string></string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Width</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Level</anno>
  <anno>Target</anno>
  <anno>Width</anno>
  <anno>X</anno>
  <anno>Xoffset</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>copyTexSubImage2D</name>
  <arity>8</arity>
  <contract>
    <clause>
      <head>copyTexSubImage2D(Target,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Level,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Xoffset,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Yoffset,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>X,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Y,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Width,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Height) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Level</typename><string>Level = Xoffset = Yoffset = X = Y = Width = Height = integer()</string></subtype>
        <subtype><typename>Xoffset</typename><string></string></subtype>
        <subtype><typename>Yoffset</typename><string></string></subtype>
        <subtype><typename>X</typename><string></string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Width</typename><string></string></subtype>
        <subtype><typename>Height</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Height</anno>
  <anno>Level</anno>
  <anno>Target</anno>
  <anno>Width</anno>
  <anno>X</anno>
  <anno>Xoffset</anno>
  <anno>Y</anno>
  <anno>Yoffset</anno>
</spec>
<spec>
  <name>copyTexSubImage3D</name>
  <arity>9</arity>
  <contract>
    <clause>
      <head>copyTexSubImage3D(Target,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Level,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Xoffset,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Yoffset,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Zoffset,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>X,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Y,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Width,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Height) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Level</typename><string>Level = Xoffset = Yoffset = Zoffset = X = Y = Width = Height = integer()</string></subtype>
        <subtype><typename>Xoffset</typename><string></string></subtype>
        <subtype><typename>Yoffset</typename><string></string></subtype>
        <subtype><typename>Zoffset</typename><string></string></subtype>
        <subtype><typename>X</typename><string></string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Width</typename><string></string></subtype>
        <subtype><typename>Height</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Height</anno>
  <anno>Level</anno>
  <anno>Target</anno>
  <anno>Width</anno>
  <anno>X</anno>
  <anno>Xoffset</anno>
  <anno>Y</anno>
  <anno>Yoffset</anno>
  <anno>Zoffset</anno>
</spec>
<spec>
  <name>createProgram</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>createProgram() -&gt; integer()</head></clause>
  </contract>
</spec>
<spec>
  <name>createProgramObjectARB</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>createProgramObjectARB() -&gt; integer()</head></clause>
  </contract>
</spec>
<spec>
  <name>createShader</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>createShader(Type) -&gt; integer()</head>
      <guard>
        <subtype><typename>Type</typename><string>Type = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Type</anno>
</spec>
<spec>
  <name>createShaderObjectARB</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>createShaderObjectARB(ShaderType) -&gt; integer()</head>
      <guard>
        <subtype><typename>ShaderType</typename><string>ShaderType = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>ShaderType</anno>
</spec>
<spec>
  <name>createShaderProgramv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>createShaderProgramv(Type, Strings) -&gt; integer()</head>
      <guard>
        <subtype><typename>Type</typename><string>Type = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Strings</typename><string>Strings = iolist()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Strings</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>cullFace</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>cullFace(Mode) -&gt; ok</head>
      <guard>
        <subtype><typename>Mode</typename><string>Mode = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Mode</anno>
</spec>
<spec>
  <name>currentPaletteMatrixARB</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>currentPaletteMatrixARB(Index) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
</spec>
<spec>
  <name>debugMessageControlARB</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>debugMessageControlARB(Source, Type, Severity, Ids, Enabled) -&gt; ok</head>
      <guard>
        <subtype><typename>Source</typename><string>Source = Type = Severity = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Type</typename><string/></subtype>
        <subtype><typename>Severity</typename><string/></subtype>
        <subtype><typename>Ids</typename><string>Ids = [integer()]</string></subtype>
        <subtype><typename>Enabled</typename><string>Enabled = 0 | 1</string></subtype>
      </guard></clause>
  </contract>
  <anno>Enabled</anno>
  <anno>Ids</anno>
  <anno>Severity</anno>
  <anno>Source</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>debugMessageInsertARB</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>debugMessageInsertARB(Source, Type, Id, Severity, Buf) -&gt; ok</head>
      <guard>
        <subtype><typename>Source</typename><string>Source = Type = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Type</typename><string/></subtype>
        <subtype><typename>Id</typename><string>Id = integer()</string></subtype>
        <subtype><typename>Severity</typename><string>Severity = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Buf</typename><string>Buf = string()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Buf</anno>
  <anno>Id</anno>
  <anno>Severity</anno>
  <anno>Source</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>deleteBuffers</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>deleteBuffers(Buffers) -&gt; ok</head>
      <guard>
        <subtype><typename>Buffers</typename><string>Buffers = [integer()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Buffers</anno>
</spec>
<spec>
  <name>deleteFramebuffers</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>deleteFramebuffers(Framebuffers) -&gt; ok</head>
      <guard>
        <subtype><typename>Framebuffers</typename><string>Framebuffers = [integer()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Framebuffers</anno>
</spec>
<spec>
  <name>deleteLists</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>deleteLists(List, Range) -&gt; ok</head>
      <guard>
        <subtype><typename>List</typename><string>List = Range = integer()</string></subtype>
        <subtype><typename>Range</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>List</anno>
  <anno>Range</anno>
</spec>
<spec>
  <name>deleteNamedStringARB</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>deleteNamedStringARB(Name) -&gt; ok</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = string()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
</spec>
<spec>
  <name>deleteObjectARB</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>deleteObjectARB(Obj) -&gt; ok</head>
      <guard>
        <subtype><typename>Obj</typename><string>Obj = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Obj</anno>
</spec>
<spec>
  <name>deleteProgram</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>deleteProgram(Program) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Program</anno>
</spec>
<spec>
  <name>deleteProgramPipelines</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>deleteProgramPipelines(Pipelines) -&gt; ok</head>
      <guard>
        <subtype><typename>Pipelines</typename><string>Pipelines = [integer()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Pipelines</anno>
</spec>
<spec>
  <name>deleteProgramsARB</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>deleteProgramsARB(Programs) -&gt; ok</head>
      <guard>
        <subtype><typename>Programs</typename><string>Programs = [integer()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Programs</anno>
</spec>
<spec>
  <name>deleteQueries</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>deleteQueries(Ids) -&gt; ok</head>
      <guard>
        <subtype><typename>Ids</typename><string>Ids = [integer()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Ids</anno>
</spec>
<spec>
  <name>deleteRenderbuffers</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>deleteRenderbuffers(Renderbuffers) -&gt; ok</head>
      <guard>
        <subtype><typename>Renderbuffers</typename><string>Renderbuffers = [integer()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Renderbuffers</anno>
</spec>
<spec>
  <name>deleteSamplers</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>deleteSamplers(Samplers) -&gt; ok</head>
      <guard>
        <subtype><typename>Samplers</typename><string>Samplers = [integer()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Samplers</anno>
</spec>
<spec>
  <name>deleteShader</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>deleteShader(Shader) -&gt; ok</head>
      <guard>
        <subtype><typename>Shader</typename><string>Shader = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Shader</anno>
</spec>
<spec>
  <name>deleteSync</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>deleteSync(Sync) -&gt; ok</head>
      <guard>
        <subtype><typename>Sync</typename><string>Sync = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Sync</anno>
</spec>
<spec>
  <name>deleteTextures</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>deleteTextures(Textures) -&gt; ok</head>
      <guard>
        <subtype><typename>Textures</typename><string>Textures = [integer()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Textures</anno>
</spec>
<spec>
  <name>deleteTransformFeedbacks</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>deleteTransformFeedbacks(Ids) -&gt; ok</head>
      <guard>
        <subtype><typename>Ids</typename><string>Ids = [integer()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Ids</anno>
</spec>
<spec>
  <name>deleteVertexArrays</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>deleteVertexArrays(Arrays) -&gt; ok</head>
      <guard>
        <subtype><typename>Arrays</typename><string>Arrays = [integer()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Arrays</anno>
</spec>
<spec>
  <name>depthBoundsEXT</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>depthBoundsEXT(Zmin, Zmax) -&gt; ok</head>
      <guard>
        <subtype><typename>Zmin</typename><string>Zmin = Zmax = <seealso marker="#type-clamp">clamp()</seealso></string></subtype>
        <subtype><typename>Zmax</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Zmax</anno>
  <anno>Zmin</anno>
</spec>
<spec>
  <name>depthFunc</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>depthFunc(Func) -&gt; ok</head>
      <guard>
        <subtype><typename>Func</typename><string>Func = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Func</anno>
</spec>
<spec>
  <name>depthMask</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>depthMask(Flag) -&gt; ok</head>
      <guard>
        <subtype><typename>Flag</typename><string>Flag = 0 | 1</string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
</spec>
<spec>
  <name>depthRange</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>depthRange(Near_val, Far_val) -&gt; ok</head>
      <guard>
        <subtype><typename>Near_val</typename><string>Near_val = Far_val = <seealso marker="#type-clamp">clamp()</seealso></string></subtype>
        <subtype><typename>Far_val</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Far_val</anno>
  <anno>Near_val</anno>
</spec>
<spec>
  <name>depthRangeArrayv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>depthRangeArrayv(First, V) -&gt; ok</head>
      <guard>
        <subtype><typename>First</typename><string>First = integer()</string></subtype>
        <subtype><typename>V</typename><string>V = [{<seealso marker="#type-clamp">clamp()</seealso>, <seealso marker="#type-clamp">clamp()</seealso>}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>First</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>depthRangeIndexed</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>depthRangeIndexed(Index, N, F) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>N</typename><string>N = F = <seealso marker="#type-clamp">clamp()</seealso></string></subtype>
        <subtype><typename>F</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>F</anno>
  <anno>Index</anno>
  <anno>N</anno>
</spec>
<spec>
  <name>depthRangef</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>depthRangef(N, F) -&gt; ok</head>
      <guard>
        <subtype><typename>N</typename><string>N = F = <seealso marker="#type-clamp">clamp()</seealso></string></subtype>
        <subtype><typename>F</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>F</anno>
  <anno>N</anno>
</spec>
<spec>
  <name>detachObjectARB</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>detachObjectARB(ContainerObj, AttachedObj) -&gt; ok</head>
      <guard>
        <subtype><typename>ContainerObj</typename><string>ContainerObj = AttachedObj = integer()</string></subtype>
        <subtype><typename>AttachedObj</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>AttachedObj</anno>
  <anno>ContainerObj</anno>
</spec>
<spec>
  <name>detachShader</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>detachShader(Program, Shader) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Shader = integer()</string></subtype>
        <subtype><typename>Shader</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Program</anno>
  <anno>Shader</anno>
</spec>
<spec>
  <name>disable</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>disable(Cap) -&gt; ok</head>
      <guard>
        <subtype><typename>Cap</typename><string>Cap = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Cap</anno>
</spec>
<spec>
  <name>disableClientState</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>disableClientState(Cap) -&gt; ok</head>
      <guard>
        <subtype><typename>Cap</typename><string>Cap = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Cap</anno>
</spec>
<spec>
  <name>disableVertexAttribArray</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>disableVertexAttribArray(Index) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
</spec>
<spec>
  <name>disablei</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>disablei(Target, Index) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>drawArrays</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>drawArrays(Mode, First, Count) -&gt; ok</head>
      <guard>
        <subtype><typename>Mode</typename><string>Mode = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>First</typename><string>First = Count = integer()</string></subtype>
        <subtype><typename>Count</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Count</anno>
  <anno>First</anno>
  <anno>Mode</anno>
</spec>
<spec>
  <name>drawArraysIndirect</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>drawArraysIndirect(Mode, Indirect) -&gt; ok</head>
      <guard>
        <subtype><typename>Mode</typename><string>Mode = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Indirect</typename><string>Indirect = <seealso marker="#type-offset">offset()</seealso> | <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Indirect</anno>
  <anno>Mode</anno>
</spec>
<spec>
  <name>drawArraysInstanced</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>drawArraysInstanced(Mode, First, Count, Primcount) -&gt; ok</head>
      <guard>
        <subtype><typename>Mode</typename><string>Mode = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>First</typename><string>First = Count = Primcount = integer()</string></subtype>
        <subtype><typename>Count</typename><string></string></subtype>
        <subtype><typename>Primcount</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Count</anno>
  <anno>First</anno>
  <anno>Mode</anno>
  <anno>Primcount</anno>
</spec>
<spec>
  <name>drawArraysInstancedBaseInstance</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>drawArraysInstancedBaseInstance(Mode,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>First,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Count,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Primcount,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Baseinstance) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Mode</typename><string>Mode = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>First</typename><string>First = Count = Primcount = Baseinstance = integer()</string></subtype>
        <subtype><typename>Count</typename><string></string></subtype>
        <subtype><typename>Primcount</typename><string></string></subtype>
        <subtype><typename>Baseinstance</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Baseinstance</anno>
  <anno>Count</anno>
  <anno>First</anno>
  <anno>Mode</anno>
  <anno>Primcount</anno>
</spec>
<spec>
  <name>drawBuffer</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>drawBuffer(Mode) -&gt; ok</head>
      <guard>
        <subtype><typename>Mode</typename><string>Mode = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Mode</anno>
</spec>
<spec>
  <name>drawBuffers</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>drawBuffers(Bufs) -&gt; ok</head>
      <guard>
        <subtype><typename>Bufs</typename><string>Bufs = [<seealso marker="#type-enum">enum()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Bufs</anno>
</spec>
<spec>
  <name>drawElements</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>drawElements(Mode, Count, Type, Indices) -&gt; ok</head>
      <guard>
        <subtype><typename>Mode</typename><string>Mode = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Count</typename><string>Count = integer()</string></subtype>
        <subtype><typename>Type</typename><string>Type = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Indices</typename><string>Indices = <seealso marker="#type-offset">offset()</seealso> | <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Count</anno>
  <anno>Indices</anno>
  <anno>Mode</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>drawElementsBaseVertex</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>drawElementsBaseVertex(Mode, Count, Type, Indices, Basevertex) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Mode</typename><string>Mode = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Count</typename><string>Count = integer()</string></subtype>
        <subtype><typename>Type</typename><string>Type = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Indices</typename><string>Indices = <seealso marker="#type-offset">offset()</seealso> | <seealso marker="#type-mem">mem()</seealso></string></subtype>
        <subtype><typename>Basevertex</typename><string>Basevertex = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Basevertex</anno>
  <anno>Count</anno>
  <anno>Indices</anno>
  <anno>Mode</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>drawElementsIndirect</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>drawElementsIndirect(Mode, Type, Indirect) -&gt; ok</head>
      <guard>
        <subtype><typename>Mode</typename><string>Mode = Type = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Type</typename><string/></subtype>
        <subtype><typename>Indirect</typename><string>Indirect = <seealso marker="#type-offset">offset()</seealso> | <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Indirect</anno>
  <anno>Mode</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>drawElementsInstanced</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>drawElementsInstanced(Mode, Count, Type, Indices, Primcount) -&gt; ok</head>
      <guard>
        <subtype><typename>Mode</typename><string>Mode = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Count</typename><string>Count = integer()</string></subtype>
        <subtype><typename>Type</typename><string>Type = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Indices</typename><string>Indices = <seealso marker="#type-offset">offset()</seealso> | <seealso marker="#type-mem">mem()</seealso></string></subtype>
        <subtype><typename>Primcount</typename><string>Primcount = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Count</anno>
  <anno>Indices</anno>
  <anno>Mode</anno>
  <anno>Primcount</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>drawElementsInstancedBaseInstance</name>
  <arity>6</arity>
  <contract>
    <clause>
      <head>drawElementsInstancedBaseInstance(Mode,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Count,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Type,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Indices,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Primcount,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Baseinstance) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Mode</typename><string>Mode = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Count</typename><string>Count = integer()</string></subtype>
        <subtype><typename>Type</typename><string>Type = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Indices</typename><string>Indices = <seealso marker="#type-offset">offset()</seealso> | <seealso marker="#type-mem">mem()</seealso></string></subtype>
        <subtype><typename>Primcount</typename><string>Primcount = Baseinstance = integer()</string></subtype>
        <subtype><typename>Baseinstance</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Baseinstance</anno>
  <anno>Count</anno>
  <anno>Indices</anno>
  <anno>Mode</anno>
  <anno>Primcount</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>drawElementsInstancedBaseVertex</name>
  <arity>6</arity>
  <contract>
    <clause>
      <head>drawElementsInstancedBaseVertex(Mode,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Count,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Type,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Indices,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Primcount,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Basevertex) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Mode</typename><string>Mode = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Count</typename><string>Count = integer()</string></subtype>
        <subtype><typename>Type</typename><string>Type = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Indices</typename><string>Indices = <seealso marker="#type-offset">offset()</seealso> | <seealso marker="#type-mem">mem()</seealso></string></subtype>
        <subtype><typename>Primcount</typename><string>Primcount = Basevertex = integer()</string></subtype>
        <subtype><typename>Basevertex</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Basevertex</anno>
  <anno>Count</anno>
  <anno>Indices</anno>
  <anno>Mode</anno>
  <anno>Primcount</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>drawElementsInstancedBaseVertexBaseInstance</name>
  <arity>7</arity>
  <contract>
    <clause>
      <head>drawElementsInstancedBaseVertexBaseInstance(Mode,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Count,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Type,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Indices,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Primcount,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Basevertex,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Baseinstance) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Mode</typename><string>Mode = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Count</typename><string>Count = integer()</string></subtype>
        <subtype><typename>Type</typename><string>Type = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Indices</typename><string>Indices = <seealso marker="#type-offset">offset()</seealso> | <seealso marker="#type-mem">mem()</seealso></string></subtype>
        <subtype><typename>Primcount</typename><string>Primcount = Basevertex = Baseinstance = integer()</string></subtype>
        <subtype><typename>Basevertex</typename><string></string></subtype>
        <subtype><typename>Baseinstance</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Baseinstance</anno>
  <anno>Basevertex</anno>
  <anno>Count</anno>
  <anno>Indices</anno>
  <anno>Mode</anno>
  <anno>Primcount</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>drawPixels</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>drawPixels(Width, Height, Format, Type, Pixels) -&gt; ok</head>
      <guard>
        <subtype><typename>Width</typename><string>Width = Height = integer()</string></subtype>
        <subtype><typename>Height</typename><string/></subtype>
        <subtype><typename>Format</typename><string>Format = Type = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Type</typename><string/></subtype>
        <subtype><typename>Pixels</typename><string>Pixels = <seealso marker="#type-offset">offset()</seealso> | <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Format</anno>
  <anno>Height</anno>
  <anno>Pixels</anno>
  <anno>Type</anno>
  <anno>Width</anno>
</spec>
<spec>
  <name>drawRangeElements</name>
  <arity>6</arity>
  <contract>
    <clause>
      <head>drawRangeElements(Mode, Start, End, Count, Type, Indices) -&gt; ok</head>
      <guard>
        <subtype><typename>Mode</typename><string>Mode = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Start</typename><string>Start = End = Count = integer()</string></subtype>
        <subtype><typename>End</typename><string/></subtype>
        <subtype><typename>Count</typename><string/></subtype>
        <subtype><typename>Type</typename><string>Type = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Indices</typename><string>Indices = <seealso marker="#type-offset">offset()</seealso> | <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Count</anno>
  <anno>End</anno>
  <anno>Indices</anno>
  <anno>Mode</anno>
  <anno>Start</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>drawRangeElementsBaseVertex</name>
  <arity>7</arity>
  <contract>
    <clause>
      <head>drawRangeElementsBaseVertex(Mode,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Start,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>End,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Count,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Type,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Indices,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Basevertex) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Mode</typename><string>Mode = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Start</typename><string>Start = End = Count = integer()</string></subtype>
        <subtype><typename>End</typename><string/></subtype>
        <subtype><typename>Count</typename><string/></subtype>
        <subtype><typename>Type</typename><string>Type = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Indices</typename><string>Indices = <seealso marker="#type-offset">offset()</seealso> | <seealso marker="#type-mem">mem()</seealso></string></subtype>
        <subtype><typename>Basevertex</typename><string>Basevertex = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Basevertex</anno>
  <anno>Count</anno>
  <anno>End</anno>
  <anno>Indices</anno>
  <anno>Mode</anno>
  <anno>Start</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>drawTransformFeedback</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>drawTransformFeedback(Mode, Id) -&gt; ok</head>
      <guard>
        <subtype><typename>Mode</typename><string>Mode = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Id</typename><string>Id = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Id</anno>
  <anno>Mode</anno>
</spec>
<spec>
  <name>drawTransformFeedbackInstanced</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>drawTransformFeedbackInstanced(Mode, Id, Primcount) -&gt; ok</head>
      <guard>
        <subtype><typename>Mode</typename><string>Mode = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Id</typename><string>Id = Primcount = integer()</string></subtype>
        <subtype><typename>Primcount</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Id</anno>
  <anno>Mode</anno>
  <anno>Primcount</anno>
</spec>
<spec>
  <name>drawTransformFeedbackStream</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>drawTransformFeedbackStream(Mode, Id, Stream) -&gt; ok</head>
      <guard>
        <subtype><typename>Mode</typename><string>Mode = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Id</typename><string>Id = Stream = integer()</string></subtype>
        <subtype><typename>Stream</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Id</anno>
  <anno>Mode</anno>
  <anno>Stream</anno>
</spec>
<spec>
  <name>drawTransformFeedbackStreamInstanced</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>drawTransformFeedbackStreamInstanced(Mode, Id, Stream, Primcount) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Mode</typename><string>Mode = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Id</typename><string>Id = Stream = Primcount = integer()</string></subtype>
        <subtype><typename>Stream</typename><string></string></subtype>
        <subtype><typename>Primcount</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Id</anno>
  <anno>Mode</anno>
  <anno>Primcount</anno>
  <anno>Stream</anno>
</spec>
<spec>
  <name>edgeFlag</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>edgeFlag(Flag) -&gt; ok</head>
      <guard>
        <subtype><typename>Flag</typename><string>Flag = 0 | 1</string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
</spec>
<spec>
  <name>edgeFlagPointer</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>edgeFlagPointer(Stride, Ptr) -&gt; ok</head>
      <guard>
        <subtype><typename>Stride</typename><string>Stride = integer()</string></subtype>
        <subtype><typename>Ptr</typename><string>Ptr = <seealso marker="#type-offset">offset()</seealso> | <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Ptr</anno>
  <anno>Stride</anno>
</spec>
<spec>
  <name>edgeFlagv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>edgeFlagv(Flag) -&gt; ok</head>
      <guard>
        <subtype><typename>Flag</typename><string>Flag = {Flag :: 0 | 1}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
</spec>
<spec>
  <name>enable</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>enable(Cap) -&gt; ok</head>
      <guard>
        <subtype><typename>Cap</typename><string>Cap = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Cap</anno>
</spec>
<spec>
  <name>enableClientState</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>enableClientState(Cap) -&gt; ok</head>
      <guard>
        <subtype><typename>Cap</typename><string>Cap = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Cap</anno>
</spec>
<spec>
  <name>enableVertexAttribArray</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>enableVertexAttribArray(Index) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
</spec>
<spec>
  <name>enablei</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>enablei(Target, Index) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>endConditionalRender</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>endConditionalRender() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>endList</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>endList() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>endQuery</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>endQuery(Target) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Target</anno>
</spec>
<spec>
  <name>endQueryIndexed</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>endQueryIndexed(Target, Index) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>endTransformFeedback</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>endTransformFeedback() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>evalCoord1d</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>evalCoord1d(U) -&gt; ok</head>
      <guard>
        <subtype><typename>U</typename><string>U = float()</string></subtype>
      </guard></clause>
  </contract>
  <anno>U</anno>
</spec>
<spec>
  <name>evalCoord1dv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>evalCoord1dv(U) -&gt; ok</head>
      <guard>
        <subtype><typename>U</typename><string>U = {U :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>U</anno>
</spec>
<spec>
  <name>evalCoord1f</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>evalCoord1f(U) -&gt; ok</head>
      <guard>
        <subtype><typename>U</typename><string>U = float()</string></subtype>
      </guard></clause>
  </contract>
  <anno>U</anno>
</spec>
<spec>
  <name>evalCoord1fv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>evalCoord1fv(U) -&gt; ok</head>
      <guard>
        <subtype><typename>U</typename><string>U = {U :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>U</anno>
</spec>
<spec>
  <name>evalCoord2d</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>evalCoord2d(U, V) -&gt; ok</head>
      <guard>
        <subtype><typename>U</typename><string>U = V = float()</string></subtype>
        <subtype><typename>V</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>U</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>evalCoord2dv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>evalCoord2dv(U) -&gt; ok</head>
      <guard>
        <subtype><typename>U</typename><string>U = {U :: float(), V :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>U</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>evalCoord2f</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>evalCoord2f(U, V) -&gt; ok</head>
      <guard>
        <subtype><typename>U</typename><string>U = V = float()</string></subtype>
        <subtype><typename>V</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>U</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>evalCoord2fv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>evalCoord2fv(U) -&gt; ok</head>
      <guard>
        <subtype><typename>U</typename><string>U = {U :: float(), V :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>U</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>evalMesh1</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>evalMesh1(Mode, I1, I2) -&gt; ok</head>
      <guard>
        <subtype><typename>Mode</typename><string>Mode = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>I1</typename><string>I1 = I2 = integer()</string></subtype>
        <subtype><typename>I2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>I1</anno>
  <anno>I2</anno>
  <anno>Mode</anno>
</spec>
<spec>
  <name>evalMesh2</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>evalMesh2(Mode, I1, I2, J1, J2) -&gt; ok</head>
      <guard>
        <subtype><typename>Mode</typename><string>Mode = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>I1</typename><string>I1 = I2 = J1 = J2 = integer()</string></subtype>
        <subtype><typename>I2</typename><string></string></subtype>
        <subtype><typename>J1</typename><string></string></subtype>
        <subtype><typename>J2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>I1</anno>
  <anno>I2</anno>
  <anno>J1</anno>
  <anno>J2</anno>
  <anno>Mode</anno>
</spec>
<spec>
  <name>evalPoint1</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>evalPoint1(I) -&gt; ok</head>
      <guard>
        <subtype><typename>I</typename><string>I = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>I</anno>
</spec>
<spec>
  <name>evalPoint2</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>evalPoint2(I, J) -&gt; ok</head>
      <guard>
        <subtype><typename>I</typename><string>I = J = integer()</string></subtype>
        <subtype><typename>J</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>I</anno>
  <anno>J</anno>
</spec>
<spec>
  <name>feedbackBuffer</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>feedbackBuffer(Size, Type, Buffer) -&gt; ok</head>
      <guard>
        <subtype><typename>Size</typename><string>Size = integer()</string></subtype>
        <subtype><typename>Type</typename><string>Type = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Buffer</typename><string>Buffer = <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Buffer</anno>
  <anno>Size</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>fenceSync</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>fenceSync(Condition, Flags) -&gt; integer()</head>
      <guard>
        <subtype><typename>Condition</typename><string>Condition = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Flags</typename><string>Flags = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Condition</anno>
  <anno>Flags</anno>
</spec>
<spec>
  <name>finish</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>finish() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>flush</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>flush() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>flushMappedBufferRange</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>flushMappedBufferRange(Target, Offset, Length) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Offset</typename><string>Offset = Length = integer()</string></subtype>
        <subtype><typename>Length</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Length</anno>
  <anno>Offset</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>fogCoordPointer</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>fogCoordPointer(Type, Stride, Pointer) -&gt; ok</head>
      <guard>
        <subtype><typename>Type</typename><string>Type = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Stride</typename><string>Stride = integer()</string></subtype>
        <subtype><typename>Pointer</typename><string>Pointer = <seealso marker="#type-offset">offset()</seealso> | <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pointer</anno>
  <anno>Stride</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>fogCoordd</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>fogCoordd(Coord) -&gt; ok</head>
      <guard>
        <subtype><typename>Coord</typename><string>Coord = float()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Coord</anno>
</spec>
<spec>
  <name>fogCoorddv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>fogCoorddv(Coord) -&gt; ok</head>
      <guard>
        <subtype><typename>Coord</typename><string>Coord = {Coord :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Coord</anno>
</spec>
<spec>
  <name>fogCoordf</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>fogCoordf(Coord) -&gt; ok</head>
      <guard>
        <subtype><typename>Coord</typename><string>Coord = float()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Coord</anno>
</spec>
<spec>
  <name>fogCoordfv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>fogCoordfv(Coord) -&gt; ok</head>
      <guard>
        <subtype><typename>Coord</typename><string>Coord = {Coord :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Coord</anno>
</spec>
<spec>
  <name>fogf</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>fogf(Pname, Param) -&gt; ok</head>
      <guard>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Param</typename><string>Param = float()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Param</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>fogfv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>fogfv(Pname, Params) -&gt; ok</head>
      <guard>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Params</typename><string>Params = tuple()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Params</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>fogi</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>fogi(Pname, Param) -&gt; ok</head>
      <guard>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Param</typename><string>Param = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Param</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>fogiv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>fogiv(Pname, Params) -&gt; ok</head>
      <guard>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Params</typename><string>Params = tuple()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Params</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>framebufferRenderbuffer</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>framebufferRenderbuffer(Target,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Attachment,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Renderbuffertarget,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Renderbuffer) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Attachment = Renderbuffertarget = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Attachment</typename><string/></subtype>
        <subtype><typename>Renderbuffertarget</typename><string/></subtype>
        <subtype><typename>Renderbuffer</typename><string>Renderbuffer = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Attachment</anno>
  <anno>Renderbuffer</anno>
  <anno>Renderbuffertarget</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>framebufferTexture</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>framebufferTexture(Target, Attachment, Texture, Level) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Attachment = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Attachment</typename><string/></subtype>
        <subtype><typename>Texture</typename><string>Texture = Level = integer()</string></subtype>
        <subtype><typename>Level</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Attachment</anno>
  <anno>Level</anno>
  <anno>Target</anno>
  <anno>Texture</anno>
</spec>
<spec>
  <name>framebufferTexture1D</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>framebufferTexture1D(Target,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Attachment,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Textarget,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Texture,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Level) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Attachment = Textarget = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Attachment</typename><string/></subtype>
        <subtype><typename>Textarget</typename><string/></subtype>
        <subtype><typename>Texture</typename><string>Texture = Level = integer()</string></subtype>
        <subtype><typename>Level</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Attachment</anno>
  <anno>Level</anno>
  <anno>Target</anno>
  <anno>Textarget</anno>
  <anno>Texture</anno>
</spec>
<spec>
  <name>framebufferTexture2D</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>framebufferTexture2D(Target,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Attachment,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Textarget,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Texture,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Level) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Attachment = Textarget = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Attachment</typename><string/></subtype>
        <subtype><typename>Textarget</typename><string/></subtype>
        <subtype><typename>Texture</typename><string>Texture = Level = integer()</string></subtype>
        <subtype><typename>Level</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Attachment</anno>
  <anno>Level</anno>
  <anno>Target</anno>
  <anno>Textarget</anno>
  <anno>Texture</anno>
</spec>
<spec>
  <name>framebufferTexture3D</name>
  <arity>6</arity>
  <contract>
    <clause>
      <head>framebufferTexture3D(Target,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Attachment,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Textarget,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Texture,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Level,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Zoffset) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Attachment = Textarget = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Attachment</typename><string/></subtype>
        <subtype><typename>Textarget</typename><string/></subtype>
        <subtype><typename>Texture</typename><string>Texture = Level = Zoffset = integer()</string></subtype>
        <subtype><typename>Level</typename><string></string></subtype>
        <subtype><typename>Zoffset</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Attachment</anno>
  <anno>Level</anno>
  <anno>Target</anno>
  <anno>Textarget</anno>
  <anno>Texture</anno>
  <anno>Zoffset</anno>
</spec>
<spec>
  <name>framebufferTextureFaceARB</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>framebufferTextureFaceARB(Target,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Attachment,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Texture,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Level,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Face) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Attachment = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Attachment</typename><string/></subtype>
        <subtype><typename>Texture</typename><string>Texture = Level = integer()</string></subtype>
        <subtype><typename>Level</typename><string/></subtype>
        <subtype><typename>Face</typename><string>Face = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Attachment</anno>
  <anno>Face</anno>
  <anno>Level</anno>
  <anno>Target</anno>
  <anno>Texture</anno>
</spec>
<spec>
  <name>framebufferTextureLayer</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>framebufferTextureLayer(Target, Attachment, Texture, Level, Layer) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Attachment = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Attachment</typename><string/></subtype>
        <subtype><typename>Texture</typename><string>Texture = Level = Layer = integer()</string></subtype>
        <subtype><typename>Level</typename><string></string></subtype>
        <subtype><typename>Layer</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Attachment</anno>
  <anno>Layer</anno>
  <anno>Level</anno>
  <anno>Target</anno>
  <anno>Texture</anno>
</spec>
<spec>
  <name>frontFace</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>frontFace(Mode) -&gt; ok</head>
      <guard>
        <subtype><typename>Mode</typename><string>Mode = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Mode</anno>
</spec>
<spec>
  <name>frustum</name>
  <arity>6</arity>
  <contract>
    <clause>
      <head>frustum(Left, Right, Bottom, Top, Near_val, Far_val) -&gt; ok</head>
      <guard>
        <subtype><typename>Left</typename><string>Left = Right = Bottom = Top = Near_val = Far_val = float()</string></subtype>
        <subtype><typename>Right</typename><string></string></subtype>
        <subtype><typename>Bottom</typename><string></string></subtype>
        <subtype><typename>Top</typename><string></string></subtype>
        <subtype><typename>Near_val</typename><string></string></subtype>
        <subtype><typename>Far_val</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Bottom</anno>
  <anno>Far_val</anno>
  <anno>Left</anno>
  <anno>Near_val</anno>
  <anno>Right</anno>
  <anno>Top</anno>
</spec>
<spec>
  <name>genBuffers</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>genBuffers(N) -&gt; [integer()]</head>
      <guard>
        <subtype><typename>N</typename><string>N = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>N</anno>
</spec>
<spec>
  <name>genFramebuffers</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>genFramebuffers(N) -&gt; [integer()]</head>
      <guard>
        <subtype><typename>N</typename><string>N = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>N</anno>
</spec>
<spec>
  <name>genLists</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>genLists(Range) -&gt; integer()</head>
      <guard>
        <subtype><typename>Range</typename><string>Range = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Range</anno>
</spec>
<spec>
  <name>genProgramPipelines</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>genProgramPipelines(N) -&gt; [integer()]</head>
      <guard>
        <subtype><typename>N</typename><string>N = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>N</anno>
</spec>
<spec>
  <name>genProgramsARB</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>genProgramsARB(N) -&gt; [integer()]</head>
      <guard>
        <subtype><typename>N</typename><string>N = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>N</anno>
</spec>
<spec>
  <name>genQueries</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>genQueries(N) -&gt; [integer()]</head>
      <guard>
        <subtype><typename>N</typename><string>N = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>N</anno>
</spec>
<spec>
  <name>genRenderbuffers</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>genRenderbuffers(N) -&gt; [integer()]</head>
      <guard>
        <subtype><typename>N</typename><string>N = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>N</anno>
</spec>
<spec>
  <name>genSamplers</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>genSamplers(Count) -&gt; [integer()]</head>
      <guard>
        <subtype><typename>Count</typename><string>Count = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Count</anno>
</spec>
<spec>
  <name>genTextures</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>genTextures(N) -&gt; [integer()]</head>
      <guard>
        <subtype><typename>N</typename><string>N = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>N</anno>
</spec>
<spec>
  <name>genTransformFeedbacks</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>genTransformFeedbacks(N) -&gt; [integer()]</head>
      <guard>
        <subtype><typename>N</typename><string>N = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>N</anno>
</spec>
<spec>
  <name>genVertexArrays</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>genVertexArrays(N) -&gt; [integer()]</head>
      <guard>
        <subtype><typename>N</typename><string>N = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>N</anno>
</spec>
<spec>
  <name>generateMipmap</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>generateMipmap(Target) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Target</anno>
</spec>
<spec>
  <name>getActiveAttrib</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>getActiveAttrib(Program, Index, BufSize) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{Size :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Type :: <seealso marker="#type-enum">enum()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Name :: string()}</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Index = BufSize = integer()</string></subtype>
        <subtype><typename>Index</typename><string></string></subtype>
        <subtype><typename>BufSize</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>BufSize</anno>
  <anno>Index</anno>
  <anno>Name</anno>
  <anno>Program</anno>
  <anno>Size</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>getActiveAttribARB</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>getActiveAttribARB(ProgramObj, Index, MaxLength) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{Size :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Type :: <seealso marker="#type-enum">enum()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Name :: string()}</head>
      <guard>
        <subtype><typename>ProgramObj</typename><string>ProgramObj = Index = MaxLength = integer()</string></subtype>
        <subtype><typename>Index</typename><string></string></subtype>
        <subtype><typename>MaxLength</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>MaxLength</anno>
  <anno>Name</anno>
  <anno>ProgramObj</anno>
  <anno>Size</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>getActiveSubroutineName</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>getActiveSubroutineName(Program, Shadertype, Index, Bufsize) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>string()</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = integer()</string></subtype>
        <subtype><typename>Shadertype</typename><string>Shadertype = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Index</typename><string>Index = Bufsize = integer()</string></subtype>
        <subtype><typename>Bufsize</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Bufsize</anno>
  <anno>Index</anno>
  <anno>Program</anno>
  <anno>Shadertype</anno>
</spec>
<spec>
  <name>getActiveSubroutineUniformName</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>getActiveSubroutineUniformName(Program,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Shadertype,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Index,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Bufsize) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>string()</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = integer()</string></subtype>
        <subtype><typename>Shadertype</typename><string>Shadertype = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Index</typename><string>Index = Bufsize = integer()</string></subtype>
        <subtype><typename>Bufsize</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Bufsize</anno>
  <anno>Index</anno>
  <anno>Program</anno>
  <anno>Shadertype</anno>
</spec>
<spec>
  <name>getActiveUniform</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>getActiveUniform(Program, Index, BufSize) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{Size :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Type :: <seealso marker="#type-enum">enum()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Name :: string()}</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Index = BufSize = integer()</string></subtype>
        <subtype><typename>Index</typename><string></string></subtype>
        <subtype><typename>BufSize</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>BufSize</anno>
  <anno>Index</anno>
  <anno>Name</anno>
  <anno>Program</anno>
  <anno>Size</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>getActiveUniformARB</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>getActiveUniformARB(ProgramObj, Index, MaxLength) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{Size :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Type :: <seealso marker="#type-enum">enum()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Name :: string()}</head>
      <guard>
        <subtype><typename>ProgramObj</typename><string>ProgramObj = Index = MaxLength = integer()</string></subtype>
        <subtype><typename>Index</typename><string></string></subtype>
        <subtype><typename>MaxLength</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>MaxLength</anno>
  <anno>Name</anno>
  <anno>ProgramObj</anno>
  <anno>Size</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>getActiveUniformBlockName</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>getActiveUniformBlockName(Program, UniformBlockIndex, BufSize) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>string()</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = UniformBlockIndex = BufSize = integer()</string></subtype>
        <subtype><typename>UniformBlockIndex</typename><string></string></subtype>
        <subtype><typename>BufSize</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>BufSize</anno>
  <anno>Program</anno>
  <anno>UniformBlockIndex</anno>
</spec>
<spec>
  <name>getActiveUniformBlockiv</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>getActiveUniformBlockiv(Program, UniformBlockIndex, Pname, Params) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = UniformBlockIndex = integer()</string></subtype>
        <subtype><typename>UniformBlockIndex</typename><string/></subtype>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Params</typename><string>Params = <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Params</anno>
  <anno>Pname</anno>
  <anno>Program</anno>
  <anno>UniformBlockIndex</anno>
</spec>
<spec>
  <name>getActiveUniformName</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>getActiveUniformName(Program, UniformIndex, BufSize) -&gt; string()</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = UniformIndex = BufSize = integer()</string></subtype>
        <subtype><typename>UniformIndex</typename><string></string></subtype>
        <subtype><typename>BufSize</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>BufSize</anno>
  <anno>Program</anno>
  <anno>UniformIndex</anno>
</spec>
<spec>
  <name>getActiveUniformsiv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>getActiveUniformsiv(Program, UniformIndices, Pname) -&gt; [integer()]</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = integer()</string></subtype>
        <subtype><typename>UniformIndices</typename><string>UniformIndices = [integer()]</string></subtype>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pname</anno>
  <anno>Program</anno>
  <anno>UniformIndices</anno>
</spec>
<spec>
  <name>getAttachedObjectsARB</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getAttachedObjectsARB(ContainerObj, MaxCount) -&gt; [integer()]</head>
      <guard>
        <subtype><typename>ContainerObj</typename><string>ContainerObj = MaxCount = integer()</string></subtype>
        <subtype><typename>MaxCount</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>ContainerObj</anno>
  <anno>MaxCount</anno>
</spec>
<spec>
  <name>getAttachedShaders</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getAttachedShaders(Program, MaxCount) -&gt; [integer()]</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = MaxCount = integer()</string></subtype>
        <subtype><typename>MaxCount</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>MaxCount</anno>
  <anno>Program</anno>
</spec>
<spec>
  <name>getAttribLocation</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getAttribLocation(Program, Name) -&gt; integer()</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = integer()</string></subtype>
        <subtype><typename>Name</typename><string>Name = string()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
  <anno>Program</anno>
</spec>
<spec>
  <name>getAttribLocationARB</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getAttribLocationARB(ProgramObj, Name) -&gt; integer()</head>
      <guard>
        <subtype><typename>ProgramObj</typename><string>ProgramObj = integer()</string></subtype>
        <subtype><typename>Name</typename><string>Name = string()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
  <anno>ProgramObj</anno>
</spec>
<spec>
  <name>getBooleani_v</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getBooleani_v(Target, Index) -&gt; [0 | 1]</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>getBooleanv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>getBooleanv(Pname) -&gt; [0 | 1]</head>
      <guard>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pname</anno>
</spec>
<spec>
  <name>getBufferParameteri64v</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getBufferParameteri64v(Target, Pname) -&gt; [integer()]</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pname</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>getBufferParameteriv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getBufferParameteriv(Target, Pname) -&gt; integer()</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pname</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>getBufferParameterivARB</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getBufferParameterivARB(Target, Pname) -&gt; [integer()]</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pname</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>getBufferSubData</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>getBufferSubData(Target, Offset, Size, Data) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Offset</typename><string>Offset = Size = integer()</string></subtype>
        <subtype><typename>Size</typename><string/></subtype>
        <subtype><typename>Data</typename><string>Data = <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Offset</anno>
  <anno>Size</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>getClipPlane</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>getClipPlane(Plane) -&gt; {float(), float(), float(), float()}</head>
      <guard>
        <subtype><typename>Plane</typename><string>Plane = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Plane</anno>
</spec>
<spec>
  <name>getColorTable</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>getColorTable(Target, Format, Type, Table) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Format = Type = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Format</typename><string/></subtype>
        <subtype><typename>Type</typename><string/></subtype>
        <subtype><typename>Table</typename><string>Table = <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Format</anno>
  <anno>Table</anno>
  <anno>Target</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>getColorTableParameterfv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getColorTableParameterfv(Target, Pname) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{float(), float(), float(), float()}</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pname</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>getColorTableParameteriv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getColorTableParameteriv(Target, Pname) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer()}</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pname</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>getCompressedTexImage</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>getCompressedTexImage(Target, Lod, Img) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Lod</typename><string>Lod = integer()</string></subtype>
        <subtype><typename>Img</typename><string>Img = <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Img</anno>
  <anno>Lod</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>getConvolutionFilter</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>getConvolutionFilter(Target, Format, Type, Image) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Format = Type = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Format</typename><string/></subtype>
        <subtype><typename>Type</typename><string/></subtype>
        <subtype><typename>Image</typename><string>Image = <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Format</anno>
  <anno>Image</anno>
  <anno>Target</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>getConvolutionParameterfv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getConvolutionParameterfv(Target, Pname) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{float(), float(), float(), float()}</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pname</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>getConvolutionParameteriv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getConvolutionParameteriv(Target, Pname) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer()}</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pname</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>getDebugMessageLogARB</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getDebugMessageLogARB(Count, Bufsize) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Sources :: [<seealso marker="#type-enum">enum()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Types :: [<seealso marker="#type-enum">enum()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Ids :: [integer()],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Severities :: [<seealso marker="#type-enum">enum()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>MessageLog :: [string()]}</head>
      <guard>
        <subtype><typename>Count</typename><string>Count = Bufsize = integer()</string></subtype>
        <subtype><typename>Bufsize</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Bufsize</anno>
  <anno>Count</anno>
  <anno>Ids</anno>
  <anno>MessageLog</anno>
  <anno>Severities</anno>
  <anno>Sources</anno>
  <anno>Types</anno>
</spec>
<spec>
  <name>getDoublei_v</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getDoublei_v(Target, Index) -&gt; [float()]</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>getDoublev</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>getDoublev(Pname) -&gt; [float()]</head>
      <guard>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pname</anno>
</spec>
<spec>
  <name>getError</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>getError() -&gt; <seealso marker="#type-enum">enum()</seealso></head></clause>
  </contract>
</spec>
<spec>
  <name>getFloati_v</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getFloati_v(Target, Index) -&gt; [float()]</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>getFloatv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>getFloatv(Pname) -&gt; [float()]</head>
      <guard>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pname</anno>
</spec>
<spec>
  <name>getFragDataIndex</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getFragDataIndex(Program, Name) -&gt; integer()</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = integer()</string></subtype>
        <subtype><typename>Name</typename><string>Name = string()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
  <anno>Program</anno>
</spec>
<spec>
  <name>getFragDataLocation</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getFragDataLocation(Program, Name) -&gt; integer()</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = integer()</string></subtype>
        <subtype><typename>Name</typename><string>Name = string()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
  <anno>Program</anno>
</spec>
<spec>
  <name>getFramebufferAttachmentParameteriv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>getFramebufferAttachmentParameteriv(Target, Attachment, Pname) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer()</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Attachment = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Attachment</typename><string></string></subtype>
        <subtype><typename>Pname</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Attachment</anno>
  <anno>Pname</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>getGraphicsResetStatusARB</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>getGraphicsResetStatusARB() -&gt; <seealso marker="#type-enum">enum()</seealso></head></clause>
  </contract>
</spec>
<spec>
  <name>getHandleARB</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>getHandleARB(Pname) -&gt; integer()</head>
      <guard>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pname</anno>
</spec>
<spec>
  <name>getHistogram</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>getHistogram(Target, Reset, Format, Type, Values) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Reset</typename><string>Reset = 0 | 1</string></subtype>
        <subtype><typename>Format</typename><string>Format = Type = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Type</typename><string/></subtype>
        <subtype><typename>Values</typename><string>Values = <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Format</anno>
  <anno>Reset</anno>
  <anno>Target</anno>
  <anno>Type</anno>
  <anno>Values</anno>
</spec>
<spec>
  <name>getHistogramParameterfv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getHistogramParameterfv(Target, Pname) -&gt; {float()}</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pname</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>getHistogramParameteriv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getHistogramParameteriv(Target, Pname) -&gt; {integer()}</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pname</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>getInfoLogARB</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getInfoLogARB(Obj, MaxLength) -&gt; string()</head>
      <guard>
        <subtype><typename>Obj</typename><string>Obj = MaxLength = integer()</string></subtype>
        <subtype><typename>MaxLength</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>MaxLength</anno>
  <anno>Obj</anno>
</spec>
<spec>
  <name>getInteger64i_v</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getInteger64i_v(Target, Index) -&gt; [integer()]</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>getInteger64v</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>getInteger64v(Pname) -&gt; [integer()]</head>
      <guard>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pname</anno>
</spec>
<spec>
  <name>getIntegeri_v</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getIntegeri_v(Target, Index) -&gt; [integer()]</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>getIntegerv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>getIntegerv(Pname) -&gt; [integer()]</head>
      <guard>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pname</anno>
</spec>
<spec>
  <name>getInternalformativ</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>getInternalformativ(Target, Internalformat, Pname, BufSize) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[integer()]</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Internalformat = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Internalformat</typename><string/></subtype>
        <subtype><typename>Pname</typename><string/></subtype>
        <subtype><typename>BufSize</typename><string>BufSize = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>BufSize</anno>
  <anno>Internalformat</anno>
  <anno>Pname</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>getLightfv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getLightfv(Light, Pname) -&gt; {float(), float(), float(), float()}</head>
      <guard>
        <subtype><typename>Light</typename><string>Light = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Light</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>getLightiv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getLightiv(Light, Pname) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{integer(), integer(), integer(), integer()}</head>
      <guard>
        <subtype><typename>Light</typename><string>Light = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Light</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>getMapdv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>getMapdv(Target, Query, V) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Query = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Query</typename><string/></subtype>
        <subtype><typename>V</typename><string>V = <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Query</anno>
  <anno>Target</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>getMapfv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>getMapfv(Target, Query, V) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Query = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Query</typename><string/></subtype>
        <subtype><typename>V</typename><string>V = <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Query</anno>
  <anno>Target</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>getMapiv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>getMapiv(Target, Query, V) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Query = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Query</typename><string/></subtype>
        <subtype><typename>V</typename><string>V = <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Query</anno>
  <anno>Target</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>getMaterialfv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getMaterialfv(Face, Pname) -&gt; {float(), float(), float(), float()}</head>
      <guard>
        <subtype><typename>Face</typename><string>Face = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Face</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>getMaterialiv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getMaterialiv(Face, Pname) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{integer(), integer(), integer(), integer()}</head>
      <guard>
        <subtype><typename>Face</typename><string>Face = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Face</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>getMinmax</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>getMinmax(Target, Reset, Format, Types, Values) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Reset</typename><string>Reset = 0 | 1</string></subtype>
        <subtype><typename>Format</typename><string>Format = Types = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Types</typename><string/></subtype>
        <subtype><typename>Values</typename><string>Values = <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Format</anno>
  <anno>Reset</anno>
  <anno>Target</anno>
  <anno>Types</anno>
  <anno>Values</anno>
</spec>
<spec>
  <name>getMinmaxParameterfv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getMinmaxParameterfv(Target, Pname) -&gt; {float()}</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pname</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>getMinmaxParameteriv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getMinmaxParameteriv(Target, Pname) -&gt; {integer()}</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pname</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>getMultisamplefv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getMultisamplefv(Pname, Index) -&gt; {float(), float()}</head>
      <guard>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>getNamedStringARB</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getNamedStringARB(Name, BufSize) -&gt; string()</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = string()</string></subtype>
        <subtype><typename>BufSize</typename><string>BufSize = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>BufSize</anno>
  <anno>Name</anno>
</spec>
<spec>
  <name>getNamedStringivARB</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getNamedStringivARB(Name, Pname) -&gt; integer()</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = string()</string></subtype>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>getObjectParameterfvARB</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getObjectParameterfvARB(Obj, Pname) -&gt; float()</head>
      <guard>
        <subtype><typename>Obj</typename><string>Obj = integer()</string></subtype>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Obj</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>getObjectParameterivARB</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getObjectParameterivARB(Obj, Pname) -&gt; integer()</head>
      <guard>
        <subtype><typename>Obj</typename><string>Obj = integer()</string></subtype>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Obj</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>getPixelMapfv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getPixelMapfv(Map, Values) -&gt; ok</head>
      <guard>
        <subtype><typename>Map</typename><string>Map = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Values</typename><string>Values = <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Map</anno>
  <anno>Values</anno>
</spec>
<spec>
  <name>getPixelMapuiv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getPixelMapuiv(Map, Values) -&gt; ok</head>
      <guard>
        <subtype><typename>Map</typename><string>Map = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Values</typename><string>Values = <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Map</anno>
  <anno>Values</anno>
</spec>
<spec>
  <name>getPixelMapusv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getPixelMapusv(Map, Values) -&gt; ok</head>
      <guard>
        <subtype><typename>Map</typename><string>Map = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Values</typename><string>Values = <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Map</anno>
  <anno>Values</anno>
</spec>
<spec>
  <name>getPolygonStipple</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>getPolygonStipple() -&gt; binary()</head></clause>
  </contract>
</spec>
<spec>
  <name>getProgramBinary</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getProgramBinary(Program, BufSize) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{BinaryFormat :: <seealso marker="#type-enum">enum()</seealso>, Binary :: binary()}</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = BufSize = integer()</string></subtype>
        <subtype><typename>BufSize</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Binary</anno>
  <anno>BinaryFormat</anno>
  <anno>BufSize</anno>
  <anno>Program</anno>
</spec>
<spec>
  <name>getProgramEnvParameterdvARB</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getProgramEnvParameterdvARB(Target, Index) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float()}</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>getProgramEnvParameterfvARB</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getProgramEnvParameterfvARB(Target, Index) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float()}</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>getProgramInfoLog</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getProgramInfoLog(Program, BufSize) -&gt; string()</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = BufSize = integer()</string></subtype>
        <subtype><typename>BufSize</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>BufSize</anno>
  <anno>Program</anno>
</spec>
<spec>
  <name>getProgramLocalParameterdvARB</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getProgramLocalParameterdvARB(Target, Index) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float()}</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>getProgramLocalParameterfvARB</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getProgramLocalParameterfvARB(Target, Index) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float()}</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>getProgramPipelineInfoLog</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getProgramPipelineInfoLog(Pipeline, BufSize) -&gt; string()</head>
      <guard>
        <subtype><typename>Pipeline</typename><string>Pipeline = BufSize = integer()</string></subtype>
        <subtype><typename>BufSize</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>BufSize</anno>
  <anno>Pipeline</anno>
</spec>
<spec>
  <name>getProgramPipelineiv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getProgramPipelineiv(Pipeline, Pname) -&gt; integer()</head>
      <guard>
        <subtype><typename>Pipeline</typename><string>Pipeline = integer()</string></subtype>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pipeline</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>getProgramStageiv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>getProgramStageiv(Program, Shadertype, Pname) -&gt; integer()</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = integer()</string></subtype>
        <subtype><typename>Shadertype</typename><string>Shadertype = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pname</anno>
  <anno>Program</anno>
  <anno>Shadertype</anno>
</spec>
<spec>
  <name>getProgramStringARB</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>getProgramStringARB(Target, Pname, String) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string/></subtype>
        <subtype><typename>String</typename><string>String = <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pname</anno>
  <anno>String</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>getProgramiv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getProgramiv(Program, Pname) -&gt; integer()</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = integer()</string></subtype>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pname</anno>
  <anno>Program</anno>
</spec>
<spec>
  <name>getQueryIndexediv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>getQueryIndexediv(Target, Index, Pname) -&gt; integer()</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>Pname</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>getQueryObjecti64v</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getQueryObjecti64v(Id, Pname) -&gt; integer()</head>
      <guard>
        <subtype><typename>Id</typename><string>Id = integer()</string></subtype>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Id</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>getQueryObjectiv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getQueryObjectiv(Id, Pname) -&gt; integer()</head>
      <guard>
        <subtype><typename>Id</typename><string>Id = integer()</string></subtype>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Id</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>getQueryObjectui64v</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getQueryObjectui64v(Id, Pname) -&gt; integer()</head>
      <guard>
        <subtype><typename>Id</typename><string>Id = integer()</string></subtype>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Id</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>getQueryObjectuiv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getQueryObjectuiv(Id, Pname) -&gt; integer()</head>
      <guard>
        <subtype><typename>Id</typename><string>Id = integer()</string></subtype>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Id</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>getQueryiv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getQueryiv(Target, Pname) -&gt; integer()</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pname</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>getRenderbufferParameteriv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getRenderbufferParameteriv(Target, Pname) -&gt; integer()</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pname</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>getSamplerParameterIiv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getSamplerParameterIiv(Sampler, Pname) -&gt; [integer()]</head>
      <guard>
        <subtype><typename>Sampler</typename><string>Sampler = integer()</string></subtype>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pname</anno>
  <anno>Sampler</anno>
</spec>
<spec>
  <name>getSamplerParameterIuiv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getSamplerParameterIuiv(Sampler, Pname) -&gt; [integer()]</head>
      <guard>
        <subtype><typename>Sampler</typename><string>Sampler = integer()</string></subtype>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pname</anno>
  <anno>Sampler</anno>
</spec>
<spec>
  <name>getSamplerParameterfv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getSamplerParameterfv(Sampler, Pname) -&gt; [float()]</head>
      <guard>
        <subtype><typename>Sampler</typename><string>Sampler = integer()</string></subtype>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pname</anno>
  <anno>Sampler</anno>
</spec>
<spec>
  <name>getSamplerParameteriv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getSamplerParameteriv(Sampler, Pname) -&gt; [integer()]</head>
      <guard>
        <subtype><typename>Sampler</typename><string>Sampler = integer()</string></subtype>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pname</anno>
  <anno>Sampler</anno>
</spec>
<spec>
  <name>getShaderInfoLog</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getShaderInfoLog(Shader, BufSize) -&gt; string()</head>
      <guard>
        <subtype><typename>Shader</typename><string>Shader = BufSize = integer()</string></subtype>
        <subtype><typename>BufSize</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>BufSize</anno>
  <anno>Shader</anno>
</spec>
<spec>
  <name>getShaderPrecisionFormat</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getShaderPrecisionFormat(Shadertype, Precisiontype) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{Range :: {integer(), integer()},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Precision :: integer()}</head>
      <guard>
        <subtype><typename>Shadertype</typename><string>Shadertype = Precisiontype = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Precisiontype</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Precision</anno>
  <anno>Precisiontype</anno>
  <anno>Range</anno>
  <anno>Shadertype</anno>
</spec>
<spec>
  <name>getShaderSource</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getShaderSource(Shader, BufSize) -&gt; string()</head>
      <guard>
        <subtype><typename>Shader</typename><string>Shader = BufSize = integer()</string></subtype>
        <subtype><typename>BufSize</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>BufSize</anno>
  <anno>Shader</anno>
</spec>
<spec>
  <name>getShaderSourceARB</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getShaderSourceARB(Obj, MaxLength) -&gt; string()</head>
      <guard>
        <subtype><typename>Obj</typename><string>Obj = MaxLength = integer()</string></subtype>
        <subtype><typename>MaxLength</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>MaxLength</anno>
  <anno>Obj</anno>
</spec>
<spec>
  <name>getShaderiv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getShaderiv(Shader, Pname) -&gt; integer()</head>
      <guard>
        <subtype><typename>Shader</typename><string>Shader = integer()</string></subtype>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pname</anno>
  <anno>Shader</anno>
</spec>
<spec>
  <name>getString</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>getString(Name) -&gt; string()</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
</spec>
<spec>
  <name>getStringi</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getStringi(Name, Index) -&gt; string()</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>Name</anno>
</spec>
<spec>
  <name>getSubroutineIndex</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>getSubroutineIndex(Program, Shadertype, Name) -&gt; integer()</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = integer()</string></subtype>
        <subtype><typename>Shadertype</typename><string>Shadertype = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Name</typename><string>Name = string()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
  <anno>Program</anno>
  <anno>Shadertype</anno>
</spec>
<spec>
  <name>getSubroutineUniformLocation</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>getSubroutineUniformLocation(Program, Shadertype, Name) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer()</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = integer()</string></subtype>
        <subtype><typename>Shadertype</typename><string>Shadertype = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Name</typename><string>Name = string()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
  <anno>Program</anno>
  <anno>Shadertype</anno>
</spec>
<spec>
  <name>getSynciv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>getSynciv(Sync, Pname, BufSize) -&gt; [integer()]</head>
      <guard>
        <subtype><typename>Sync</typename><string>Sync = integer()</string></subtype>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>BufSize</typename><string>BufSize = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>BufSize</anno>
  <anno>Pname</anno>
  <anno>Sync</anno>
</spec>
<spec>
  <name>getTexEnvfv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getTexEnvfv(Target, Pname) -&gt; {float(), float(), float(), float()}</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pname</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>getTexEnviv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getTexEnviv(Target, Pname) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{integer(), integer(), integer(), integer()}</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pname</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>getTexGendv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getTexGendv(Coord, Pname) -&gt; {float(), float(), float(), float()}</head>
      <guard>
        <subtype><typename>Coord</typename><string>Coord = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Coord</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>getTexGenfv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getTexGenfv(Coord, Pname) -&gt; {float(), float(), float(), float()}</head>
      <guard>
        <subtype><typename>Coord</typename><string>Coord = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Coord</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>getTexGeniv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getTexGeniv(Coord, Pname) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{integer(), integer(), integer(), integer()}</head>
      <guard>
        <subtype><typename>Coord</typename><string>Coord = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Coord</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>getTexImage</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>getTexImage(Target, Level, Format, Type, Pixels) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Level</typename><string>Level = integer()</string></subtype>
        <subtype><typename>Format</typename><string>Format = Type = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Type</typename><string/></subtype>
        <subtype><typename>Pixels</typename><string>Pixels = <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Format</anno>
  <anno>Level</anno>
  <anno>Pixels</anno>
  <anno>Target</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>getTexLevelParameterfv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>getTexLevelParameterfv(Target, Level, Pname) -&gt; {float()}</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Level</typename><string>Level = integer()</string></subtype>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Level</anno>
  <anno>Pname</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>getTexLevelParameteriv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>getTexLevelParameteriv(Target, Level, Pname) -&gt; {integer()}</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Level</typename><string>Level = integer()</string></subtype>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Level</anno>
  <anno>Pname</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>getTexParameterIiv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getTexParameterIiv(Target, Pname) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{integer(), integer(), integer(), integer()}</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pname</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>getTexParameterIuiv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getTexParameterIuiv(Target, Pname) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer()}</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pname</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>getTexParameterfv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getTexParameterfv(Target, Pname) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{float(), float(), float(), float()}</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pname</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>getTexParameteriv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getTexParameteriv(Target, Pname) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{integer(), integer(), integer(), integer()}</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pname</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>getTransformFeedbackVarying</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>getTransformFeedbackVarying(Program, Index, BufSize) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{Size :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Type :: <seealso marker="#type-enum">enum()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Name :: string()}</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Index = BufSize = integer()</string></subtype>
        <subtype><typename>Index</typename><string></string></subtype>
        <subtype><typename>BufSize</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>BufSize</anno>
  <anno>Index</anno>
  <anno>Name</anno>
  <anno>Program</anno>
  <anno>Size</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>getUniformBlockIndex</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getUniformBlockIndex(Program, UniformBlockName) -&gt; integer()</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = integer()</string></subtype>
        <subtype><typename>UniformBlockName</typename><string>UniformBlockName = string()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Program</anno>
  <anno>UniformBlockName</anno>
</spec>
<spec>
  <name>getUniformIndices</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getUniformIndices(Program, UniformNames) -&gt; [integer()]</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = integer()</string></subtype>
        <subtype><typename>UniformNames</typename><string>UniformNames = iolist()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Program</anno>
  <anno>UniformNames</anno>
</spec>
<spec>
  <name>getUniformLocation</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getUniformLocation(Program, Name) -&gt; integer()</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = integer()</string></subtype>
        <subtype><typename>Name</typename><string>Name = string()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
  <anno>Program</anno>
</spec>
<spec>
  <name>getUniformLocationARB</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getUniformLocationARB(ProgramObj, Name) -&gt; integer()</head>
      <guard>
        <subtype><typename>ProgramObj</typename><string>ProgramObj = integer()</string></subtype>
        <subtype><typename>Name</typename><string>Name = string()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
  <anno>ProgramObj</anno>
</spec>
<spec>
  <name>getUniformSubroutineuiv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getUniformSubroutineuiv(Shadertype, Location) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer()}</head>
      <guard>
        <subtype><typename>Shadertype</typename><string>Shadertype = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Location</typename><string>Location = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Shadertype</anno>
</spec>
<spec>
  <name>getUniformdv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getUniformdv(Program, Location) -&gt; <seealso marker="#type-matrix">matrix()</seealso></head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
</spec>
<spec>
  <name>getUniformfv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getUniformfv(Program, Location) -&gt; <seealso marker="#type-matrix">matrix()</seealso></head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
</spec>
<spec>
  <name>getUniformfvARB</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getUniformfvARB(ProgramObj, Location) -&gt; <seealso marker="#type-matrix">matrix()</seealso></head>
      <guard>
        <subtype><typename>ProgramObj</typename><string>ProgramObj = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>ProgramObj</anno>
</spec>
<spec>
  <name>getUniformiv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getUniformiv(Program, Location) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer()}</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
</spec>
<spec>
  <name>getUniformivARB</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getUniformivARB(ProgramObj, Location) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer()}</head>
      <guard>
        <subtype><typename>ProgramObj</typename><string>ProgramObj = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>ProgramObj</anno>
</spec>
<spec>
  <name>getUniformuiv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getUniformuiv(Program, Location) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer()}</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
</spec>
<spec>
  <name>getVertexAttribIiv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getVertexAttribIiv(Index, Pname) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{integer(), integer(), integer(), integer()}</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>getVertexAttribIuiv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getVertexAttribIuiv(Index, Pname) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer()}</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>getVertexAttribLdv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getVertexAttribLdv(Index, Pname) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{float(), float(), float(), float()}</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>getVertexAttribdv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getVertexAttribdv(Index, Pname) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{float(), float(), float(), float()}</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>getVertexAttribfv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getVertexAttribfv(Index, Pname) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{float(), float(), float(), float()}</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>getVertexAttribiv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getVertexAttribiv(Index, Pname) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{integer(), integer(), integer(), integer()}</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>hint</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>hint(Target, Mode) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Mode = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Mode</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Mode</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>histogram</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>histogram(Target, Width, Internalformat, Sink) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Width</typename><string>Width = integer()</string></subtype>
        <subtype><typename>Internalformat</typename><string>Internalformat = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Sink</typename><string>Sink = 0 | 1</string></subtype>
      </guard></clause>
  </contract>
  <anno>Internalformat</anno>
  <anno>Sink</anno>
  <anno>Target</anno>
  <anno>Width</anno>
</spec>
<spec>
  <name>indexMask</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>indexMask(Mask) -&gt; ok</head>
      <guard>
        <subtype><typename>Mask</typename><string>Mask = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Mask</anno>
</spec>
<spec>
  <name>indexPointer</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>indexPointer(Type, Stride, Ptr) -&gt; ok</head>
      <guard>
        <subtype><typename>Type</typename><string>Type = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Stride</typename><string>Stride = integer()</string></subtype>
        <subtype><typename>Ptr</typename><string>Ptr = <seealso marker="#type-offset">offset()</seealso> | <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Ptr</anno>
  <anno>Stride</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>indexd</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>indexd(C) -&gt; ok</head>
      <guard>
        <subtype><typename>C</typename><string>C = float()</string></subtype>
      </guard></clause>
  </contract>
  <anno>C</anno>
</spec>
<spec>
  <name>indexdv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>indexdv(C) -&gt; ok</head>
      <guard>
        <subtype><typename>C</typename><string>C = {C :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>C</anno>
</spec>
<spec>
  <name>indexf</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>indexf(C) -&gt; ok</head>
      <guard>
        <subtype><typename>C</typename><string>C = float()</string></subtype>
      </guard></clause>
  </contract>
  <anno>C</anno>
</spec>
<spec>
  <name>indexfv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>indexfv(C) -&gt; ok</head>
      <guard>
        <subtype><typename>C</typename><string>C = {C :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>C</anno>
</spec>
<spec>
  <name>indexi</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>indexi(C) -&gt; ok</head>
      <guard>
        <subtype><typename>C</typename><string>C = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>C</anno>
</spec>
<spec>
  <name>indexiv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>indexiv(C) -&gt; ok</head>
      <guard>
        <subtype><typename>C</typename><string>C = {C :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>C</anno>
</spec>
<spec>
  <name>indexs</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>indexs(C) -&gt; ok</head>
      <guard>
        <subtype><typename>C</typename><string>C = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>C</anno>
</spec>
<spec>
  <name>indexsv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>indexsv(C) -&gt; ok</head>
      <guard>
        <subtype><typename>C</typename><string>C = {C :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>C</anno>
</spec>
<spec>
  <name>indexub</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>indexub(C) -&gt; ok</head>
      <guard>
        <subtype><typename>C</typename><string>C = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>C</anno>
</spec>
<spec>
  <name>indexubv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>indexubv(C) -&gt; ok</head>
      <guard>
        <subtype><typename>C</typename><string>C = {C :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>C</anno>
</spec>
<spec>
  <name>initNames</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>initNames() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>interleavedArrays</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>interleavedArrays(Format, Stride, Pointer) -&gt; ok</head>
      <guard>
        <subtype><typename>Format</typename><string>Format = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Stride</typename><string>Stride = integer()</string></subtype>
        <subtype><typename>Pointer</typename><string>Pointer = <seealso marker="#type-offset">offset()</seealso> | <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Format</anno>
  <anno>Pointer</anno>
  <anno>Stride</anno>
</spec>
<spec>
  <name>isBuffer</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>isBuffer(Buffer) -&gt; 0 | 1</head>
      <guard>
        <subtype><typename>Buffer</typename><string>Buffer = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Buffer</anno>
</spec>
<spec>
  <name>isEnabled</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>isEnabled(Cap) -&gt; 0 | 1</head>
      <guard>
        <subtype><typename>Cap</typename><string>Cap = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Cap</anno>
</spec>
<spec>
  <name>isEnabledi</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>isEnabledi(Target, Index) -&gt; 0 | 1</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>isFramebuffer</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>isFramebuffer(Framebuffer) -&gt; 0 | 1</head>
      <guard>
        <subtype><typename>Framebuffer</typename><string>Framebuffer = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Framebuffer</anno>
</spec>
<spec>
  <name>isList</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>isList(List) -&gt; 0 | 1</head>
      <guard>
        <subtype><typename>List</typename><string>List = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>List</anno>
</spec>
<spec>
  <name>isNamedStringARB</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>isNamedStringARB(Name) -&gt; 0 | 1</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = string()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
</spec>
<spec>
  <name>isProgram</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>isProgram(Program) -&gt; 0 | 1</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Program</anno>
</spec>
<spec>
  <name>isProgramPipeline</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>isProgramPipeline(Pipeline) -&gt; 0 | 1</head>
      <guard>
        <subtype><typename>Pipeline</typename><string>Pipeline = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Pipeline</anno>
</spec>
<spec>
  <name>isQuery</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>isQuery(Id) -&gt; 0 | 1</head>
      <guard>
        <subtype><typename>Id</typename><string>Id = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Id</anno>
</spec>
<spec>
  <name>isRenderbuffer</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>isRenderbuffer(Renderbuffer) -&gt; 0 | 1</head>
      <guard>
        <subtype><typename>Renderbuffer</typename><string>Renderbuffer = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Renderbuffer</anno>
</spec>
<spec>
  <name>isSampler</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>isSampler(Sampler) -&gt; 0 | 1</head>
      <guard>
        <subtype><typename>Sampler</typename><string>Sampler = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Sampler</anno>
</spec>
<spec>
  <name>isShader</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>isShader(Shader) -&gt; 0 | 1</head>
      <guard>
        <subtype><typename>Shader</typename><string>Shader = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Shader</anno>
</spec>
<spec>
  <name>isSync</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>isSync(Sync) -&gt; 0 | 1</head>
      <guard>
        <subtype><typename>Sync</typename><string>Sync = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Sync</anno>
</spec>
<spec>
  <name>isTexture</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>isTexture(Texture) -&gt; 0 | 1</head>
      <guard>
        <subtype><typename>Texture</typename><string>Texture = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Texture</anno>
</spec>
<spec>
  <name>isTransformFeedback</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>isTransformFeedback(Id) -&gt; 0 | 1</head>
      <guard>
        <subtype><typename>Id</typename><string>Id = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Id</anno>
</spec>
<spec>
  <name>isVertexArray</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>isVertexArray(Array) -&gt; 0 | 1</head>
      <guard>
        <subtype><typename>Array</typename><string>Array = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Array</anno>
</spec>
<spec>
  <name>lightModelf</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>lightModelf(Pname, Param) -&gt; ok</head>
      <guard>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Param</typename><string>Param = float()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Param</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>lightModelfv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>lightModelfv(Pname, Params) -&gt; ok</head>
      <guard>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Params</typename><string>Params = tuple()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Params</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>lightModeli</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>lightModeli(Pname, Param) -&gt; ok</head>
      <guard>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Param</typename><string>Param = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Param</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>lightModeliv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>lightModeliv(Pname, Params) -&gt; ok</head>
      <guard>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Params</typename><string>Params = tuple()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Params</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>lightf</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>lightf(Light, Pname, Param) -&gt; ok</head>
      <guard>
        <subtype><typename>Light</typename><string>Light = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string/></subtype>
        <subtype><typename>Param</typename><string>Param = float()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Light</anno>
  <anno>Param</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>lightfv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>lightfv(Light, Pname, Params) -&gt; ok</head>
      <guard>
        <subtype><typename>Light</typename><string>Light = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string/></subtype>
        <subtype><typename>Params</typename><string>Params = tuple()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Light</anno>
  <anno>Params</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>lighti</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>lighti(Light, Pname, Param) -&gt; ok</head>
      <guard>
        <subtype><typename>Light</typename><string>Light = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string/></subtype>
        <subtype><typename>Param</typename><string>Param = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Light</anno>
  <anno>Param</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>lightiv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>lightiv(Light, Pname, Params) -&gt; ok</head>
      <guard>
        <subtype><typename>Light</typename><string>Light = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string/></subtype>
        <subtype><typename>Params</typename><string>Params = tuple()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Light</anno>
  <anno>Params</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>lineStipple</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>lineStipple(Factor, Pattern) -&gt; ok</head>
      <guard>
        <subtype><typename>Factor</typename><string>Factor = Pattern = integer()</string></subtype>
        <subtype><typename>Pattern</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Factor</anno>
  <anno>Pattern</anno>
</spec>
<spec>
  <name>lineWidth</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>lineWidth(Width) -&gt; ok</head>
      <guard>
        <subtype><typename>Width</typename><string>Width = float()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Width</anno>
</spec>
<spec>
  <name>linkProgram</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>linkProgram(Program) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Program</anno>
</spec>
<spec>
  <name>linkProgramARB</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>linkProgramARB(ProgramObj) -&gt; ok</head>
      <guard>
        <subtype><typename>ProgramObj</typename><string>ProgramObj = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>ProgramObj</anno>
</spec>
<spec>
  <name>listBase</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>listBase(Base) -&gt; ok</head>
      <guard>
        <subtype><typename>Base</typename><string>Base = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Base</anno>
</spec>
<spec>
  <name>loadIdentity</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>loadIdentity() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>loadMatrixd</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>loadMatrixd(M) -&gt; ok</head>
      <guard>
        <subtype><typename>M</typename><string>M = <seealso marker="#type-matrix">matrix()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>M</anno>
</spec>
<spec>
  <name>loadMatrixf</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>loadMatrixf(M) -&gt; ok</head>
      <guard>
        <subtype><typename>M</typename><string>M = <seealso marker="#type-matrix">matrix()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>M</anno>
</spec>
<spec>
  <name>loadName</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>loadName(Name) -&gt; ok</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
</spec>
<spec>
  <name>loadTransposeMatrixd</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>loadTransposeMatrixd(M) -&gt; ok</head>
      <guard>
        <subtype><typename>M</typename><string>M = <seealso marker="#type-matrix">matrix()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>M</anno>
</spec>
<spec>
  <name>loadTransposeMatrixdARB</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>loadTransposeMatrixdARB(M) -&gt; ok</head>
      <guard>
        <subtype><typename>M</typename><string>M = <seealso marker="#type-matrix">matrix()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>M</anno>
</spec>
<spec>
  <name>loadTransposeMatrixf</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>loadTransposeMatrixf(M) -&gt; ok</head>
      <guard>
        <subtype><typename>M</typename><string>M = <seealso marker="#type-matrix">matrix()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>M</anno>
</spec>
<spec>
  <name>loadTransposeMatrixfARB</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>loadTransposeMatrixfARB(M) -&gt; ok</head>
      <guard>
        <subtype><typename>M</typename><string>M = <seealso marker="#type-matrix">matrix()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>M</anno>
</spec>
<spec>
  <name>logicOp</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>logicOp(Opcode) -&gt; ok</head>
      <guard>
        <subtype><typename>Opcode</typename><string>Opcode = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Opcode</anno>
</spec>
<spec>
  <name>map1d</name>
  <arity>6</arity>
  <contract>
    <clause>
      <head>map1d(Target, U1, U2, Stride, Order, Points) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>U1</typename><string>U1 = U2 = float()</string></subtype>
        <subtype><typename>U2</typename><string/></subtype>
        <subtype><typename>Stride</typename><string>Stride = Order = integer()</string></subtype>
        <subtype><typename>Order</typename><string/></subtype>
        <subtype><typename>Points</typename><string>Points = binary()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Order</anno>
  <anno>Points</anno>
  <anno>Stride</anno>
  <anno>Target</anno>
  <anno>U1</anno>
  <anno>U2</anno>
</spec>
<spec>
  <name>map1f</name>
  <arity>6</arity>
  <contract>
    <clause>
      <head>map1f(Target, U1, U2, Stride, Order, Points) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>U1</typename><string>U1 = U2 = float()</string></subtype>
        <subtype><typename>U2</typename><string/></subtype>
        <subtype><typename>Stride</typename><string>Stride = Order = integer()</string></subtype>
        <subtype><typename>Order</typename><string/></subtype>
        <subtype><typename>Points</typename><string>Points = binary()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Order</anno>
  <anno>Points</anno>
  <anno>Stride</anno>
  <anno>Target</anno>
  <anno>U1</anno>
  <anno>U2</anno>
</spec>
<spec>
  <name>map2d</name>
  <arity>10</arity>
  <contract>
    <clause>
      <head>map2d(Target,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>U1,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>U2,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Ustride,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Uorder,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>V1,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>V2,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Vstride,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Vorder,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Points) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>U1</typename><string>U1 = U2 = float()</string></subtype>
        <subtype><typename>U2</typename><string/></subtype>
        <subtype><typename>Ustride</typename><string>Ustride = Uorder = integer()</string></subtype>
        <subtype><typename>Uorder</typename><string/></subtype>
        <subtype><typename>V1</typename><string>V1 = V2 = float()</string></subtype>
        <subtype><typename>V2</typename><string/></subtype>
        <subtype><typename>Vstride</typename><string>Vstride = Vorder = integer()</string></subtype>
        <subtype><typename>Vorder</typename><string/></subtype>
        <subtype><typename>Points</typename><string>Points = binary()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Points</anno>
  <anno>Target</anno>
  <anno>U1</anno>
  <anno>U2</anno>
  <anno>Uorder</anno>
  <anno>Ustride</anno>
  <anno>V1</anno>
  <anno>V2</anno>
  <anno>Vorder</anno>
  <anno>Vstride</anno>
</spec>
<spec>
  <name>map2f</name>
  <arity>10</arity>
  <contract>
    <clause>
      <head>map2f(Target,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>U1,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>U2,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Ustride,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Uorder,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>V1,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>V2,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Vstride,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Vorder,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Points) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>U1</typename><string>U1 = U2 = float()</string></subtype>
        <subtype><typename>U2</typename><string/></subtype>
        <subtype><typename>Ustride</typename><string>Ustride = Uorder = integer()</string></subtype>
        <subtype><typename>Uorder</typename><string/></subtype>
        <subtype><typename>V1</typename><string>V1 = V2 = float()</string></subtype>
        <subtype><typename>V2</typename><string/></subtype>
        <subtype><typename>Vstride</typename><string>Vstride = Vorder = integer()</string></subtype>
        <subtype><typename>Vorder</typename><string/></subtype>
        <subtype><typename>Points</typename><string>Points = binary()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Points</anno>
  <anno>Target</anno>
  <anno>U1</anno>
  <anno>U2</anno>
  <anno>Uorder</anno>
  <anno>Ustride</anno>
  <anno>V1</anno>
  <anno>V2</anno>
  <anno>Vorder</anno>
  <anno>Vstride</anno>
</spec>
<spec>
  <name>mapGrid1d</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>mapGrid1d(Un, U1, U2) -&gt; ok</head>
      <guard>
        <subtype><typename>Un</typename><string>Un = integer()</string></subtype>
        <subtype><typename>U1</typename><string>U1 = U2 = float()</string></subtype>
        <subtype><typename>U2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>U1</anno>
  <anno>U2</anno>
  <anno>Un</anno>
</spec>
<spec>
  <name>mapGrid1f</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>mapGrid1f(Un, U1, U2) -&gt; ok</head>
      <guard>
        <subtype><typename>Un</typename><string>Un = integer()</string></subtype>
        <subtype><typename>U1</typename><string>U1 = U2 = float()</string></subtype>
        <subtype><typename>U2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>U1</anno>
  <anno>U2</anno>
  <anno>Un</anno>
</spec>
<spec>
  <name>mapGrid2d</name>
  <arity>6</arity>
  <contract>
    <clause>
      <head>mapGrid2d(Un, U1, U2, Vn, V1, V2) -&gt; ok</head>
      <guard>
        <subtype><typename>Un</typename><string>Un = integer()</string></subtype>
        <subtype><typename>U1</typename><string>U1 = U2 = float()</string></subtype>
        <subtype><typename>U2</typename><string/></subtype>
        <subtype><typename>Vn</typename><string>Vn = integer()</string></subtype>
        <subtype><typename>V1</typename><string>V1 = V2 = float()</string></subtype>
        <subtype><typename>V2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>U1</anno>
  <anno>U2</anno>
  <anno>Un</anno>
  <anno>V1</anno>
  <anno>V2</anno>
  <anno>Vn</anno>
</spec>
<spec>
  <name>mapGrid2f</name>
  <arity>6</arity>
  <contract>
    <clause>
      <head>mapGrid2f(Un, U1, U2, Vn, V1, V2) -&gt; ok</head>
      <guard>
        <subtype><typename>Un</typename><string>Un = integer()</string></subtype>
        <subtype><typename>U1</typename><string>U1 = U2 = float()</string></subtype>
        <subtype><typename>U2</typename><string/></subtype>
        <subtype><typename>Vn</typename><string>Vn = integer()</string></subtype>
        <subtype><typename>V1</typename><string>V1 = V2 = float()</string></subtype>
        <subtype><typename>V2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>U1</anno>
  <anno>U2</anno>
  <anno>Un</anno>
  <anno>V1</anno>
  <anno>V2</anno>
  <anno>Vn</anno>
</spec>
<spec>
  <name>materialf</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>materialf(Face, Pname, Param) -&gt; ok</head>
      <guard>
        <subtype><typename>Face</typename><string>Face = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string/></subtype>
        <subtype><typename>Param</typename><string>Param = float()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Face</anno>
  <anno>Param</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>materialfv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>materialfv(Face, Pname, Params) -&gt; ok</head>
      <guard>
        <subtype><typename>Face</typename><string>Face = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string/></subtype>
        <subtype><typename>Params</typename><string>Params = tuple()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Face</anno>
  <anno>Params</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>materiali</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>materiali(Face, Pname, Param) -&gt; ok</head>
      <guard>
        <subtype><typename>Face</typename><string>Face = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string/></subtype>
        <subtype><typename>Param</typename><string>Param = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Face</anno>
  <anno>Param</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>materialiv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>materialiv(Face, Pname, Params) -&gt; ok</head>
      <guard>
        <subtype><typename>Face</typename><string>Face = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string/></subtype>
        <subtype><typename>Params</typename><string>Params = tuple()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Face</anno>
  <anno>Params</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>matrixIndexubvARB</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>matrixIndexubvARB(Indices) -&gt; ok</head>
      <guard>
        <subtype><typename>Indices</typename><string>Indices = [integer()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Indices</anno>
</spec>
<spec>
  <name>matrixIndexuivARB</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>matrixIndexuivARB(Indices) -&gt; ok</head>
      <guard>
        <subtype><typename>Indices</typename><string>Indices = [integer()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Indices</anno>
</spec>
<spec>
  <name>matrixIndexusvARB</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>matrixIndexusvARB(Indices) -&gt; ok</head>
      <guard>
        <subtype><typename>Indices</typename><string>Indices = [integer()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Indices</anno>
</spec>
<spec>
  <name>matrixMode</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>matrixMode(Mode) -&gt; ok</head>
      <guard>
        <subtype><typename>Mode</typename><string>Mode = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Mode</anno>
</spec>
<spec>
  <name>memoryBarrier</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>memoryBarrier(Barriers) -&gt; ok</head>
      <guard>
        <subtype><typename>Barriers</typename><string>Barriers = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Barriers</anno>
</spec>
<spec>
  <name>minSampleShading</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>minSampleShading(Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Value</typename><string>Value = <seealso marker="#type-clamp">clamp()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Value</anno>
</spec>
<spec>
  <name>minmax</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>minmax(Target, Internalformat, Sink) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Internalformat = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Internalformat</typename><string/></subtype>
        <subtype><typename>Sink</typename><string>Sink = 0 | 1</string></subtype>
      </guard></clause>
  </contract>
  <anno>Internalformat</anno>
  <anno>Sink</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>multMatrixd</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>multMatrixd(M) -&gt; ok</head>
      <guard>
        <subtype><typename>M</typename><string>M = <seealso marker="#type-matrix">matrix()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>M</anno>
</spec>
<spec>
  <name>multMatrixf</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>multMatrixf(M) -&gt; ok</head>
      <guard>
        <subtype><typename>M</typename><string>M = <seealso marker="#type-matrix">matrix()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>M</anno>
</spec>
<spec>
  <name>multTransposeMatrixd</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>multTransposeMatrixd(M) -&gt; ok</head>
      <guard>
        <subtype><typename>M</typename><string>M = <seealso marker="#type-matrix">matrix()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>M</anno>
</spec>
<spec>
  <name>multTransposeMatrixdARB</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>multTransposeMatrixdARB(M) -&gt; ok</head>
      <guard>
        <subtype><typename>M</typename><string>M = <seealso marker="#type-matrix">matrix()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>M</anno>
</spec>
<spec>
  <name>multTransposeMatrixf</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>multTransposeMatrixf(M) -&gt; ok</head>
      <guard>
        <subtype><typename>M</typename><string>M = <seealso marker="#type-matrix">matrix()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>M</anno>
</spec>
<spec>
  <name>multTransposeMatrixfARB</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>multTransposeMatrixfARB(M) -&gt; ok</head>
      <guard>
        <subtype><typename>M</typename><string>M = <seealso marker="#type-matrix">matrix()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>M</anno>
</spec>
<spec>
  <name>multiDrawArrays</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>multiDrawArrays(Mode, First, Count) -&gt; ok</head>
      <guard>
        <subtype><typename>Mode</typename><string>Mode = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>First</typename><string>First = Count = [integer()] | <seealso marker="#type-mem">mem()</seealso></string></subtype>
        <subtype><typename>Count</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Count</anno>
  <anno>First</anno>
  <anno>Mode</anno>
</spec>
<spec>
  <name>multiTexCoord1d</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>multiTexCoord1d(Target, S) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>S</typename><string>S = float()</string></subtype>
      </guard></clause>
  </contract>
  <anno>S</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>multiTexCoord1dv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>multiTexCoord1dv(Target :: <seealso marker="#type-enum">enum()</seealso>, V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {S :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>S</anno>
  <anno>Target</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>multiTexCoord1f</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>multiTexCoord1f(Target, S) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>S</typename><string>S = float()</string></subtype>
      </guard></clause>
  </contract>
  <anno>S</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>multiTexCoord1fv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>multiTexCoord1fv(Target :: <seealso marker="#type-enum">enum()</seealso>, V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {S :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>S</anno>
  <anno>Target</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>multiTexCoord1i</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>multiTexCoord1i(Target, S) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>S</typename><string>S = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>S</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>multiTexCoord1iv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>multiTexCoord1iv(Target :: <seealso marker="#type-enum">enum()</seealso>, V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {S :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>S</anno>
  <anno>Target</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>multiTexCoord1s</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>multiTexCoord1s(Target, S) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>S</typename><string>S = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>S</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>multiTexCoord1sv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>multiTexCoord1sv(Target :: <seealso marker="#type-enum">enum()</seealso>, V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {S :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>S</anno>
  <anno>Target</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>multiTexCoord2d</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>multiTexCoord2d(Target, S, T) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>S</typename><string>S = T = float()</string></subtype>
        <subtype><typename>T</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>S</anno>
  <anno>T</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>multiTexCoord2dv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>multiTexCoord2dv(Target :: <seealso marker="#type-enum">enum()</seealso>, V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {S :: float(), T :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>S</anno>
  <anno>T</anno>
  <anno>Target</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>multiTexCoord2f</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>multiTexCoord2f(Target, S, T) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>S</typename><string>S = T = float()</string></subtype>
        <subtype><typename>T</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>S</anno>
  <anno>T</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>multiTexCoord2fv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>multiTexCoord2fv(Target :: <seealso marker="#type-enum">enum()</seealso>, V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {S :: float(), T :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>S</anno>
  <anno>T</anno>
  <anno>Target</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>multiTexCoord2i</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>multiTexCoord2i(Target, S, T) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>S</typename><string>S = T = integer()</string></subtype>
        <subtype><typename>T</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>S</anno>
  <anno>T</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>multiTexCoord2iv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>multiTexCoord2iv(Target :: <seealso marker="#type-enum">enum()</seealso>, V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {S :: integer(), T :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>S</anno>
  <anno>T</anno>
  <anno>Target</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>multiTexCoord2s</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>multiTexCoord2s(Target, S, T) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>S</typename><string>S = T = integer()</string></subtype>
        <subtype><typename>T</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>S</anno>
  <anno>T</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>multiTexCoord2sv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>multiTexCoord2sv(Target :: <seealso marker="#type-enum">enum()</seealso>, V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {S :: integer(), T :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>S</anno>
  <anno>T</anno>
  <anno>Target</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>multiTexCoord3d</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>multiTexCoord3d(Target, S, T, R) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>S</typename><string>S = T = R = float()</string></subtype>
        <subtype><typename>T</typename><string></string></subtype>
        <subtype><typename>R</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>R</anno>
  <anno>S</anno>
  <anno>T</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>multiTexCoord3dv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>multiTexCoord3dv(Target :: <seealso marker="#type-enum">enum()</seealso>, V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {S :: float(), T :: float(), R :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>R</anno>
  <anno>S</anno>
  <anno>T</anno>
  <anno>Target</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>multiTexCoord3f</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>multiTexCoord3f(Target, S, T, R) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>S</typename><string>S = T = R = float()</string></subtype>
        <subtype><typename>T</typename><string></string></subtype>
        <subtype><typename>R</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>R</anno>
  <anno>S</anno>
  <anno>T</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>multiTexCoord3fv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>multiTexCoord3fv(Target :: <seealso marker="#type-enum">enum()</seealso>, V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {S :: float(), T :: float(), R :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>R</anno>
  <anno>S</anno>
  <anno>T</anno>
  <anno>Target</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>multiTexCoord3i</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>multiTexCoord3i(Target, S, T, R) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>S</typename><string>S = T = R = integer()</string></subtype>
        <subtype><typename>T</typename><string></string></subtype>
        <subtype><typename>R</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>R</anno>
  <anno>S</anno>
  <anno>T</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>multiTexCoord3iv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>multiTexCoord3iv(Target :: <seealso marker="#type-enum">enum()</seealso>, V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {S :: integer(), T :: integer(), R :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>R</anno>
  <anno>S</anno>
  <anno>T</anno>
  <anno>Target</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>multiTexCoord3s</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>multiTexCoord3s(Target, S, T, R) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>S</typename><string>S = T = R = integer()</string></subtype>
        <subtype><typename>T</typename><string></string></subtype>
        <subtype><typename>R</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>R</anno>
  <anno>S</anno>
  <anno>T</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>multiTexCoord3sv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>multiTexCoord3sv(Target :: <seealso marker="#type-enum">enum()</seealso>, V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {S :: integer(), T :: integer(), R :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>R</anno>
  <anno>S</anno>
  <anno>T</anno>
  <anno>Target</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>multiTexCoord4d</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>multiTexCoord4d(Target, S, T, R, Q) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>S</typename><string>S = T = R = Q = float()</string></subtype>
        <subtype><typename>T</typename><string></string></subtype>
        <subtype><typename>R</typename><string></string></subtype>
        <subtype><typename>Q</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Q</anno>
  <anno>R</anno>
  <anno>S</anno>
  <anno>T</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>multiTexCoord4dv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>multiTexCoord4dv(Target :: <seealso marker="#type-enum">enum()</seealso>, V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {S :: float(), T :: float(), R :: float(), Q :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Q</anno>
  <anno>R</anno>
  <anno>S</anno>
  <anno>T</anno>
  <anno>Target</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>multiTexCoord4f</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>multiTexCoord4f(Target, S, T, R, Q) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>S</typename><string>S = T = R = Q = float()</string></subtype>
        <subtype><typename>T</typename><string></string></subtype>
        <subtype><typename>R</typename><string></string></subtype>
        <subtype><typename>Q</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Q</anno>
  <anno>R</anno>
  <anno>S</anno>
  <anno>T</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>multiTexCoord4fv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>multiTexCoord4fv(Target :: <seealso marker="#type-enum">enum()</seealso>, V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {S :: float(), T :: float(), R :: float(), Q :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Q</anno>
  <anno>R</anno>
  <anno>S</anno>
  <anno>T</anno>
  <anno>Target</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>multiTexCoord4i</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>multiTexCoord4i(Target, S, T, R, Q) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>S</typename><string>S = T = R = Q = integer()</string></subtype>
        <subtype><typename>T</typename><string></string></subtype>
        <subtype><typename>R</typename><string></string></subtype>
        <subtype><typename>Q</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Q</anno>
  <anno>R</anno>
  <anno>S</anno>
  <anno>T</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>multiTexCoord4iv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>multiTexCoord4iv(Target :: <seealso marker="#type-enum">enum()</seealso>, V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{S :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>T :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>R :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Q :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Q</anno>
  <anno>R</anno>
  <anno>S</anno>
  <anno>T</anno>
  <anno>Target</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>multiTexCoord4s</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>multiTexCoord4s(Target, S, T, R, Q) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>S</typename><string>S = T = R = Q = integer()</string></subtype>
        <subtype><typename>T</typename><string></string></subtype>
        <subtype><typename>R</typename><string></string></subtype>
        <subtype><typename>Q</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Q</anno>
  <anno>R</anno>
  <anno>S</anno>
  <anno>T</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>multiTexCoord4sv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>multiTexCoord4sv(Target :: <seealso marker="#type-enum">enum()</seealso>, V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{S :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>T :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>R :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Q :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Q</anno>
  <anno>R</anno>
  <anno>S</anno>
  <anno>T</anno>
  <anno>Target</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>namedStringARB</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>namedStringARB(Type, Name, String) -&gt; ok</head>
      <guard>
        <subtype><typename>Type</typename><string>Type = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Name</typename><string>Name = String = string()</string></subtype>
        <subtype><typename>String</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
  <anno>String</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>newList</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>newList(List, Mode) -&gt; ok</head>
      <guard>
        <subtype><typename>List</typename><string>List = integer()</string></subtype>
        <subtype><typename>Mode</typename><string>Mode = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>List</anno>
  <anno>Mode</anno>
</spec>
<spec>
  <name>normal3b</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>normal3b(Nx, Ny, Nz) -&gt; ok</head>
      <guard>
        <subtype><typename>Nx</typename><string>Nx = Ny = Nz = integer()</string></subtype>
        <subtype><typename>Ny</typename><string></string></subtype>
        <subtype><typename>Nz</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Nx</anno>
  <anno>Ny</anno>
  <anno>Nz</anno>
</spec>
<spec>
  <name>normal3bv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>normal3bv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {Nx :: integer(), Ny :: integer(), Nz :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Nx</anno>
  <anno>Ny</anno>
  <anno>Nz</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>normal3d</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>normal3d(Nx, Ny, Nz) -&gt; ok</head>
      <guard>
        <subtype><typename>Nx</typename><string>Nx = Ny = Nz = float()</string></subtype>
        <subtype><typename>Ny</typename><string></string></subtype>
        <subtype><typename>Nz</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Nx</anno>
  <anno>Ny</anno>
  <anno>Nz</anno>
</spec>
<spec>
  <name>normal3dv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>normal3dv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {Nx :: float(), Ny :: float(), Nz :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Nx</anno>
  <anno>Ny</anno>
  <anno>Nz</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>normal3f</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>normal3f(Nx, Ny, Nz) -&gt; ok</head>
      <guard>
        <subtype><typename>Nx</typename><string>Nx = Ny = Nz = float()</string></subtype>
        <subtype><typename>Ny</typename><string></string></subtype>
        <subtype><typename>Nz</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Nx</anno>
  <anno>Ny</anno>
  <anno>Nz</anno>
</spec>
<spec>
  <name>normal3fv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>normal3fv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {Nx :: float(), Ny :: float(), Nz :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Nx</anno>
  <anno>Ny</anno>
  <anno>Nz</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>normal3i</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>normal3i(Nx, Ny, Nz) -&gt; ok</head>
      <guard>
        <subtype><typename>Nx</typename><string>Nx = Ny = Nz = integer()</string></subtype>
        <subtype><typename>Ny</typename><string></string></subtype>
        <subtype><typename>Nz</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Nx</anno>
  <anno>Ny</anno>
  <anno>Nz</anno>
</spec>
<spec>
  <name>normal3iv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>normal3iv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {Nx :: integer(), Ny :: integer(), Nz :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Nx</anno>
  <anno>Ny</anno>
  <anno>Nz</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>normal3s</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>normal3s(Nx, Ny, Nz) -&gt; ok</head>
      <guard>
        <subtype><typename>Nx</typename><string>Nx = Ny = Nz = integer()</string></subtype>
        <subtype><typename>Ny</typename><string></string></subtype>
        <subtype><typename>Nz</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Nx</anno>
  <anno>Ny</anno>
  <anno>Nz</anno>
</spec>
<spec>
  <name>normal3sv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>normal3sv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {Nx :: integer(), Ny :: integer(), Nz :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Nx</anno>
  <anno>Ny</anno>
  <anno>Nz</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>normalPointer</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>normalPointer(Type, Stride, Ptr) -&gt; ok</head>
      <guard>
        <subtype><typename>Type</typename><string>Type = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Stride</typename><string>Stride = integer()</string></subtype>
        <subtype><typename>Ptr</typename><string>Ptr = <seealso marker="#type-offset">offset()</seealso> | <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Ptr</anno>
  <anno>Stride</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>ortho</name>
  <arity>6</arity>
  <contract>
    <clause>
      <head>ortho(Left, Right, Bottom, Top, Near_val, Far_val) -&gt; ok</head>
      <guard>
        <subtype><typename>Left</typename><string>Left = Right = Bottom = Top = Near_val = Far_val = float()</string></subtype>
        <subtype><typename>Right</typename><string></string></subtype>
        <subtype><typename>Bottom</typename><string></string></subtype>
        <subtype><typename>Top</typename><string></string></subtype>
        <subtype><typename>Near_val</typename><string></string></subtype>
        <subtype><typename>Far_val</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Bottom</anno>
  <anno>Far_val</anno>
  <anno>Left</anno>
  <anno>Near_val</anno>
  <anno>Right</anno>
  <anno>Top</anno>
</spec>
<spec>
  <name>passThrough</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>passThrough(Token) -&gt; ok</head>
      <guard>
        <subtype><typename>Token</typename><string>Token = float()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Token</anno>
</spec>
<spec>
  <name>patchParameterfv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>patchParameterfv(Pname, Values) -&gt; ok</head>
      <guard>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Values</typename><string>Values = [float()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Pname</anno>
  <anno>Values</anno>
</spec>
<spec>
  <name>patchParameteri</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>patchParameteri(Pname, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Value</typename><string>Value = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Pname</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>pauseTransformFeedback</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>pauseTransformFeedback() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>pixelMapfv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>pixelMapfv(Map, Mapsize, Values) -&gt; ok</head>
      <guard>
        <subtype><typename>Map</typename><string>Map = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Mapsize</typename><string>Mapsize = integer()</string></subtype>
        <subtype><typename>Values</typename><string>Values = binary()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Map</anno>
  <anno>Mapsize</anno>
  <anno>Values</anno>
</spec>
<spec>
  <name>pixelMapuiv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>pixelMapuiv(Map, Mapsize, Values) -&gt; ok</head>
      <guard>
        <subtype><typename>Map</typename><string>Map = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Mapsize</typename><string>Mapsize = integer()</string></subtype>
        <subtype><typename>Values</typename><string>Values = binary()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Map</anno>
  <anno>Mapsize</anno>
  <anno>Values</anno>
</spec>
<spec>
  <name>pixelMapusv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>pixelMapusv(Map, Mapsize, Values) -&gt; ok</head>
      <guard>
        <subtype><typename>Map</typename><string>Map = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Mapsize</typename><string>Mapsize = integer()</string></subtype>
        <subtype><typename>Values</typename><string>Values = binary()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Map</anno>
  <anno>Mapsize</anno>
  <anno>Values</anno>
</spec>
<spec>
  <name>pixelStoref</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>pixelStoref(Pname, Param) -&gt; ok</head>
      <guard>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Param</typename><string>Param = float()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Param</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>pixelStorei</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>pixelStorei(Pname, Param) -&gt; ok</head>
      <guard>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Param</typename><string>Param = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Param</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>pixelTransferf</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>pixelTransferf(Pname, Param) -&gt; ok</head>
      <guard>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Param</typename><string>Param = float()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Param</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>pixelTransferi</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>pixelTransferi(Pname, Param) -&gt; ok</head>
      <guard>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Param</typename><string>Param = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Param</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>pixelZoom</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>pixelZoom(Xfactor, Yfactor) -&gt; ok</head>
      <guard>
        <subtype><typename>Xfactor</typename><string>Xfactor = Yfactor = float()</string></subtype>
        <subtype><typename>Yfactor</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Xfactor</anno>
  <anno>Yfactor</anno>
</spec>
<spec>
  <name>pointParameterf</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>pointParameterf(Pname, Param) -&gt; ok</head>
      <guard>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Param</typename><string>Param = float()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Param</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>pointParameterfv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>pointParameterfv(Pname, Params) -&gt; ok</head>
      <guard>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Params</typename><string>Params = tuple()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Params</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>pointParameteri</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>pointParameteri(Pname, Param) -&gt; ok</head>
      <guard>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Param</typename><string>Param = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Param</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>pointParameteriv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>pointParameteriv(Pname, Params) -&gt; ok</head>
      <guard>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Params</typename><string>Params = tuple()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Params</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>pointSize</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>pointSize(Size) -&gt; ok</head>
      <guard>
        <subtype><typename>Size</typename><string>Size = float()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Size</anno>
</spec>
<spec>
  <name>polygonMode</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>polygonMode(Face, Mode) -&gt; ok</head>
      <guard>
        <subtype><typename>Face</typename><string>Face = Mode = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Mode</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Face</anno>
  <anno>Mode</anno>
</spec>
<spec>
  <name>polygonOffset</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>polygonOffset(Factor, Units) -&gt; ok</head>
      <guard>
        <subtype><typename>Factor</typename><string>Factor = Units = float()</string></subtype>
        <subtype><typename>Units</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Factor</anno>
  <anno>Units</anno>
</spec>
<spec>
  <name>polygonStipple</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>polygonStipple(Mask) -&gt; ok</head>
      <guard>
        <subtype><typename>Mask</typename><string>Mask = binary()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Mask</anno>
</spec>
<spec>
  <name>popAttrib</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>popAttrib() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>popClientAttrib</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>popClientAttrib() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>popMatrix</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>popMatrix() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>popName</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>popName() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>primitiveRestartIndex</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>primitiveRestartIndex(Index) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
</spec>
<spec>
  <name>prioritizeTextures</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>prioritizeTextures(Textures, Priorities) -&gt; ok</head>
      <guard>
        <subtype><typename>Textures</typename><string>Textures = [integer()]</string></subtype>
        <subtype><typename>Priorities</typename><string>Priorities = [<seealso marker="#type-clamp">clamp()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Priorities</anno>
  <anno>Textures</anno>
</spec>
<spec>
  <name>programBinary</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>programBinary(Program, BinaryFormat, Binary) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = integer()</string></subtype>
        <subtype><typename>BinaryFormat</typename><string>BinaryFormat = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Binary</typename><string>Binary = binary()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Binary</anno>
  <anno>BinaryFormat</anno>
  <anno>Program</anno>
</spec>
<spec>
  <name>programEnvParameter4dARB</name>
  <arity>6</arity>
  <contract>
    <clause>
      <head>programEnvParameter4dARB(Target, Index, X, Y, Z, W) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>X</typename><string>X = Y = Z = W = float()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
        <subtype><typename>W</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>Target</anno>
  <anno>W</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>programEnvParameter4dvARB</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>programEnvParameter4dvARB(Target, Index, Params) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>Params</typename><string>Params = {float(), float(), float(), float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>Params</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>programEnvParameter4fARB</name>
  <arity>6</arity>
  <contract>
    <clause>
      <head>programEnvParameter4fARB(Target, Index, X, Y, Z, W) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>X</typename><string>X = Y = Z = W = float()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
        <subtype><typename>W</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>Target</anno>
  <anno>W</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>programEnvParameter4fvARB</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>programEnvParameter4fvARB(Target, Index, Params) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>Params</typename><string>Params = {float(), float(), float(), float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>Params</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>programLocalParameter4dARB</name>
  <arity>6</arity>
  <contract>
    <clause>
      <head>programLocalParameter4dARB(Target, Index, X, Y, Z, W) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>X</typename><string>X = Y = Z = W = float()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
        <subtype><typename>W</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>Target</anno>
  <anno>W</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>programLocalParameter4dvARB</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>programLocalParameter4dvARB(Target, Index, Params) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>Params</typename><string>Params = {float(), float(), float(), float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>Params</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>programLocalParameter4fARB</name>
  <arity>6</arity>
  <contract>
    <clause>
      <head>programLocalParameter4fARB(Target, Index, X, Y, Z, W) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>X</typename><string>X = Y = Z = W = float()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
        <subtype><typename>W</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>Target</anno>
  <anno>W</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>programLocalParameter4fvARB</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>programLocalParameter4fvARB(Target, Index, Params) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>Params</typename><string>Params = {float(), float(), float(), float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>Params</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>programParameteri</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>programParameteri(Program, Pname, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = integer()</string></subtype>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Value</typename><string>Value = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Pname</anno>
  <anno>Program</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>programStringARB</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>programStringARB(Target, Format, String) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Format = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Format</typename><string/></subtype>
        <subtype><typename>String</typename><string>String = string()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Format</anno>
  <anno>String</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>programUniform1d</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>programUniform1d(Program, Location, V0) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string/></subtype>
        <subtype><typename>V0</typename><string>V0 = float()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>V0</anno>
</spec>
<spec>
  <name>programUniform1dv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>programUniform1dv(Program, Location, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string/></subtype>
        <subtype><typename>Value</typename><string>Value = [float()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>programUniform1f</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>programUniform1f(Program, Location, V0) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string/></subtype>
        <subtype><typename>V0</typename><string>V0 = float()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>V0</anno>
</spec>
<spec>
  <name>programUniform1fv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>programUniform1fv(Program, Location, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string/></subtype>
        <subtype><typename>Value</typename><string>Value = [float()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>programUniform1i</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>programUniform1i(Program, Location, V0) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = V0 = integer()</string></subtype>
        <subtype><typename>Location</typename><string></string></subtype>
        <subtype><typename>V0</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>V0</anno>
</spec>
<spec>
  <name>programUniform1iv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>programUniform1iv(Program, Location, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string/></subtype>
        <subtype><typename>Value</typename><string>Value = [integer()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>programUniform1ui</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>programUniform1ui(Program, Location, V0) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = V0 = integer()</string></subtype>
        <subtype><typename>Location</typename><string></string></subtype>
        <subtype><typename>V0</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>V0</anno>
</spec>
<spec>
  <name>programUniform1uiv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>programUniform1uiv(Program, Location, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string/></subtype>
        <subtype><typename>Value</typename><string>Value = [integer()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>programUniform2d</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>programUniform2d(Program, Location, V0, V1) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string/></subtype>
        <subtype><typename>V0</typename><string>V0 = V1 = float()</string></subtype>
        <subtype><typename>V1</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>V0</anno>
  <anno>V1</anno>
</spec>
<spec>
  <name>programUniform2dv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>programUniform2dv(Program, Location, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string/></subtype>
        <subtype><typename>Value</typename><string>Value = [{float(), float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>programUniform2f</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>programUniform2f(Program, Location, V0, V1) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string/></subtype>
        <subtype><typename>V0</typename><string>V0 = V1 = float()</string></subtype>
        <subtype><typename>V1</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>V0</anno>
  <anno>V1</anno>
</spec>
<spec>
  <name>programUniform2fv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>programUniform2fv(Program, Location, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string/></subtype>
        <subtype><typename>Value</typename><string>Value = [{float(), float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>programUniform2i</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>programUniform2i(Program, Location, V0, V1) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = V0 = V1 = integer()</string></subtype>
        <subtype><typename>Location</typename><string></string></subtype>
        <subtype><typename>V0</typename><string></string></subtype>
        <subtype><typename>V1</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>V0</anno>
  <anno>V1</anno>
</spec>
<spec>
  <name>programUniform2iv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>programUniform2iv(Program, Location, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string/></subtype>
        <subtype><typename>Value</typename><string>Value = [{integer(), integer()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>programUniform2ui</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>programUniform2ui(Program, Location, V0, V1) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = V0 = V1 = integer()</string></subtype>
        <subtype><typename>Location</typename><string></string></subtype>
        <subtype><typename>V0</typename><string></string></subtype>
        <subtype><typename>V1</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>V0</anno>
  <anno>V1</anno>
</spec>
<spec>
  <name>programUniform2uiv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>programUniform2uiv(Program, Location, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string/></subtype>
        <subtype><typename>Value</typename><string>Value = [{integer(), integer()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>programUniform3d</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>programUniform3d(Program, Location, V0, V1, V2) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string/></subtype>
        <subtype><typename>V0</typename><string>V0 = V1 = V2 = float()</string></subtype>
        <subtype><typename>V1</typename><string></string></subtype>
        <subtype><typename>V2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>V0</anno>
  <anno>V1</anno>
  <anno>V2</anno>
</spec>
<spec>
  <name>programUniform3dv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>programUniform3dv(Program, Location, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string/></subtype>
        <subtype><typename>Value</typename><string>Value = [{float(), float(), float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>programUniform3f</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>programUniform3f(Program, Location, V0, V1, V2) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string/></subtype>
        <subtype><typename>V0</typename><string>V0 = V1 = V2 = float()</string></subtype>
        <subtype><typename>V1</typename><string></string></subtype>
        <subtype><typename>V2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>V0</anno>
  <anno>V1</anno>
  <anno>V2</anno>
</spec>
<spec>
  <name>programUniform3fv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>programUniform3fv(Program, Location, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string/></subtype>
        <subtype><typename>Value</typename><string>Value = [{float(), float(), float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>programUniform3i</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>programUniform3i(Program, Location, V0, V1, V2) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = V0 = V1 = V2 = integer()</string></subtype>
        <subtype><typename>Location</typename><string></string></subtype>
        <subtype><typename>V0</typename><string></string></subtype>
        <subtype><typename>V1</typename><string></string></subtype>
        <subtype><typename>V2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>V0</anno>
  <anno>V1</anno>
  <anno>V2</anno>
</spec>
<spec>
  <name>programUniform3iv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>programUniform3iv(Program, Location, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string/></subtype>
        <subtype><typename>Value</typename><string>Value = [{integer(), integer(), integer()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>programUniform3ui</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>programUniform3ui(Program, Location, V0, V1, V2) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = V0 = V1 = V2 = integer()</string></subtype>
        <subtype><typename>Location</typename><string></string></subtype>
        <subtype><typename>V0</typename><string></string></subtype>
        <subtype><typename>V1</typename><string></string></subtype>
        <subtype><typename>V2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>V0</anno>
  <anno>V1</anno>
  <anno>V2</anno>
</spec>
<spec>
  <name>programUniform3uiv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>programUniform3uiv(Program, Location, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string/></subtype>
        <subtype><typename>Value</typename><string>Value = [{integer(), integer(), integer()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>programUniform4d</name>
  <arity>6</arity>
  <contract>
    <clause>
      <head>programUniform4d(Program, Location, V0, V1, V2, V3) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string/></subtype>
        <subtype><typename>V0</typename><string>V0 = V1 = V2 = V3 = float()</string></subtype>
        <subtype><typename>V1</typename><string></string></subtype>
        <subtype><typename>V2</typename><string></string></subtype>
        <subtype><typename>V3</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>V0</anno>
  <anno>V1</anno>
  <anno>V2</anno>
  <anno>V3</anno>
</spec>
<spec>
  <name>programUniform4dv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>programUniform4dv(Program, Location, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string/></subtype>
        <subtype><typename>Value</typename><string>Value = [{float(), float(), float(), float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>programUniform4f</name>
  <arity>6</arity>
  <contract>
    <clause>
      <head>programUniform4f(Program, Location, V0, V1, V2, V3) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string/></subtype>
        <subtype><typename>V0</typename><string>V0 = V1 = V2 = V3 = float()</string></subtype>
        <subtype><typename>V1</typename><string></string></subtype>
        <subtype><typename>V2</typename><string></string></subtype>
        <subtype><typename>V3</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>V0</anno>
  <anno>V1</anno>
  <anno>V2</anno>
  <anno>V3</anno>
</spec>
<spec>
  <name>programUniform4fv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>programUniform4fv(Program, Location, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string/></subtype>
        <subtype><typename>Value</typename><string>Value = [{float(), float(), float(), float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>programUniform4i</name>
  <arity>6</arity>
  <contract>
    <clause>
      <head>programUniform4i(Program, Location, V0, V1, V2, V3) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = V0 = V1 = V2 = V3 = integer()</string></subtype>
        <subtype><typename>Location</typename><string></string></subtype>
        <subtype><typename>V0</typename><string></string></subtype>
        <subtype><typename>V1</typename><string></string></subtype>
        <subtype><typename>V2</typename><string></string></subtype>
        <subtype><typename>V3</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>V0</anno>
  <anno>V1</anno>
  <anno>V2</anno>
  <anno>V3</anno>
</spec>
<spec>
  <name>programUniform4iv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>programUniform4iv(Program, Location, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string/></subtype>
        <subtype><typename>Value</typename><string>Value = [{integer(), integer(), integer(), integer()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>programUniform4ui</name>
  <arity>6</arity>
  <contract>
    <clause>
      <head>programUniform4ui(Program, Location, V0, V1, V2, V3) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = V0 = V1 = V2 = V3 = integer()</string></subtype>
        <subtype><typename>Location</typename><string></string></subtype>
        <subtype><typename>V0</typename><string></string></subtype>
        <subtype><typename>V1</typename><string></string></subtype>
        <subtype><typename>V2</typename><string></string></subtype>
        <subtype><typename>V3</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>V0</anno>
  <anno>V1</anno>
  <anno>V2</anno>
  <anno>V3</anno>
</spec>
<spec>
  <name>programUniform4uiv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>programUniform4uiv(Program, Location, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string/></subtype>
        <subtype><typename>Value</typename><string>Value = [{integer(), integer(), integer(), integer()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>programUniformMatrix2dv</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>programUniformMatrix2dv(Program, Location, Transpose, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string/></subtype>
        <subtype><typename>Transpose</typename><string>Transpose = 0 | 1</string></subtype>
        <subtype><typename>Value</typename><string>Value = [{float(), float(), float(), float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>Transpose</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>programUniformMatrix2fv</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>programUniformMatrix2fv(Program, Location, Transpose, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string/></subtype>
        <subtype><typename>Transpose</typename><string>Transpose = 0 | 1</string></subtype>
        <subtype><typename>Value</typename><string>Value = [{float(), float(), float(), float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>Transpose</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>programUniformMatrix2x3dv</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>programUniformMatrix2x3dv(Program, Location, Transpose, Value) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string/></subtype>
        <subtype><typename>Transpose</typename><string>Transpose = 0 | 1</string></subtype>
        <subtype><typename>Value</typename><string>Value = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[{float(), float(), float(), float(), float(), float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>Transpose</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>programUniformMatrix2x3fv</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>programUniformMatrix2x3fv(Program, Location, Transpose, Value) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string/></subtype>
        <subtype><typename>Transpose</typename><string>Transpose = 0 | 1</string></subtype>
        <subtype><typename>Value</typename><string>Value = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[{float(), float(), float(), float(), float(), float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>Transpose</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>programUniformMatrix2x4dv</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>programUniformMatrix2x4dv(Program, Location, Transpose, Value) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string/></subtype>
        <subtype><typename>Transpose</typename><string>Transpose = 0 | 1</string></subtype>
        <subtype><typename>Value</typename><string>Value = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[{float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>Transpose</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>programUniformMatrix2x4fv</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>programUniformMatrix2x4fv(Program, Location, Transpose, Value) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string/></subtype>
        <subtype><typename>Transpose</typename><string>Transpose = 0 | 1</string></subtype>
        <subtype><typename>Value</typename><string>Value = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[{float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>Transpose</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>programUniformMatrix3dv</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>programUniformMatrix3dv(Program, Location, Transpose, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string/></subtype>
        <subtype><typename>Transpose</typename><string>Transpose = 0 | 1</string></subtype>
        <subtype><typename>Value</typename><string>Value = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[{float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>Transpose</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>programUniformMatrix3fv</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>programUniformMatrix3fv(Program, Location, Transpose, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string/></subtype>
        <subtype><typename>Transpose</typename><string>Transpose = 0 | 1</string></subtype>
        <subtype><typename>Value</typename><string>Value = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[{float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>Transpose</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>programUniformMatrix3x2dv</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>programUniformMatrix3x2dv(Program, Location, Transpose, Value) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string/></subtype>
        <subtype><typename>Transpose</typename><string>Transpose = 0 | 1</string></subtype>
        <subtype><typename>Value</typename><string>Value = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[{float(), float(), float(), float(), float(), float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>Transpose</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>programUniformMatrix3x2fv</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>programUniformMatrix3x2fv(Program, Location, Transpose, Value) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string/></subtype>
        <subtype><typename>Transpose</typename><string>Transpose = 0 | 1</string></subtype>
        <subtype><typename>Value</typename><string>Value = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[{float(), float(), float(), float(), float(), float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>Transpose</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>programUniformMatrix3x4dv</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>programUniformMatrix3x4dv(Program, Location, Transpose, Value) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string/></subtype>
        <subtype><typename>Transpose</typename><string>Transpose = 0 | 1</string></subtype>
        <subtype><typename>Value</typename><string>Value = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[{float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>Transpose</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>programUniformMatrix3x4fv</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>programUniformMatrix3x4fv(Program, Location, Transpose, Value) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string/></subtype>
        <subtype><typename>Transpose</typename><string>Transpose = 0 | 1</string></subtype>
        <subtype><typename>Value</typename><string>Value = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[{float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>Transpose</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>programUniformMatrix4dv</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>programUniformMatrix4dv(Program, Location, Transpose, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string/></subtype>
        <subtype><typename>Transpose</typename><string>Transpose = 0 | 1</string></subtype>
        <subtype><typename>Value</typename><string>Value = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[{float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>Transpose</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>programUniformMatrix4fv</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>programUniformMatrix4fv(Program, Location, Transpose, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string/></subtype>
        <subtype><typename>Transpose</typename><string>Transpose = 0 | 1</string></subtype>
        <subtype><typename>Value</typename><string>Value = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[{float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>Transpose</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>programUniformMatrix4x2dv</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>programUniformMatrix4x2dv(Program, Location, Transpose, Value) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string/></subtype>
        <subtype><typename>Transpose</typename><string>Transpose = 0 | 1</string></subtype>
        <subtype><typename>Value</typename><string>Value = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[{float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>Transpose</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>programUniformMatrix4x2fv</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>programUniformMatrix4x2fv(Program, Location, Transpose, Value) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string/></subtype>
        <subtype><typename>Transpose</typename><string>Transpose = 0 | 1</string></subtype>
        <subtype><typename>Value</typename><string>Value = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[{float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>Transpose</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>programUniformMatrix4x3dv</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>programUniformMatrix4x3dv(Program, Location, Transpose, Value) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string/></subtype>
        <subtype><typename>Transpose</typename><string>Transpose = 0 | 1</string></subtype>
        <subtype><typename>Value</typename><string>Value = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[{float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>Transpose</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>programUniformMatrix4x3fv</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>programUniformMatrix4x3fv(Program, Location, Transpose, Value) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = Location = integer()</string></subtype>
        <subtype><typename>Location</typename><string/></subtype>
        <subtype><typename>Transpose</typename><string>Transpose = 0 | 1</string></subtype>
        <subtype><typename>Value</typename><string>Value = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[{float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Program</anno>
  <anno>Transpose</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>provokingVertex</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>provokingVertex(Mode) -&gt; ok</head>
      <guard>
        <subtype><typename>Mode</typename><string>Mode = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Mode</anno>
</spec>
<spec>
  <name>pushAttrib</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>pushAttrib(Mask) -&gt; ok</head>
      <guard>
        <subtype><typename>Mask</typename><string>Mask = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Mask</anno>
</spec>
<spec>
  <name>pushClientAttrib</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>pushClientAttrib(Mask) -&gt; ok</head>
      <guard>
        <subtype><typename>Mask</typename><string>Mask = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Mask</anno>
</spec>
<spec>
  <name>pushMatrix</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>pushMatrix() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>pushName</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>pushName(Name) -&gt; ok</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
</spec>
<spec>
  <name>queryCounter</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>queryCounter(Id, Target) -&gt; ok</head>
      <guard>
        <subtype><typename>Id</typename><string>Id = integer()</string></subtype>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Id</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>rasterPos2d</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>rasterPos2d(X, Y) -&gt; ok</head>
      <guard>
        <subtype><typename>X</typename><string>X = Y = float()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>rasterPos2dv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>rasterPos2dv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: float(), Y :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>V</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>rasterPos2f</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>rasterPos2f(X, Y) -&gt; ok</head>
      <guard>
        <subtype><typename>X</typename><string>X = Y = float()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>rasterPos2fv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>rasterPos2fv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: float(), Y :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>V</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>rasterPos2i</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>rasterPos2i(X, Y) -&gt; ok</head>
      <guard>
        <subtype><typename>X</typename><string>X = Y = integer()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>rasterPos2iv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>rasterPos2iv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: integer(), Y :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>V</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>rasterPos2s</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>rasterPos2s(X, Y) -&gt; ok</head>
      <guard>
        <subtype><typename>X</typename><string>X = Y = integer()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>rasterPos2sv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>rasterPos2sv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: integer(), Y :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>V</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>rasterPos3d</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>rasterPos3d(X, Y, Z) -&gt; ok</head>
      <guard>
        <subtype><typename>X</typename><string>X = Y = Z = float()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>rasterPos3dv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>rasterPos3dv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: float(), Y :: float(), Z :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>V</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>rasterPos3f</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>rasterPos3f(X, Y, Z) -&gt; ok</head>
      <guard>
        <subtype><typename>X</typename><string>X = Y = Z = float()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>rasterPos3fv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>rasterPos3fv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: float(), Y :: float(), Z :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>V</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>rasterPos3i</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>rasterPos3i(X, Y, Z) -&gt; ok</head>
      <guard>
        <subtype><typename>X</typename><string>X = Y = Z = integer()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>rasterPos3iv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>rasterPos3iv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: integer(), Y :: integer(), Z :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>V</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>rasterPos3s</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>rasterPos3s(X, Y, Z) -&gt; ok</head>
      <guard>
        <subtype><typename>X</typename><string>X = Y = Z = integer()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>rasterPos3sv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>rasterPos3sv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: integer(), Y :: integer(), Z :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>V</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>rasterPos4d</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>rasterPos4d(X, Y, Z, W) -&gt; ok</head>
      <guard>
        <subtype><typename>X</typename><string>X = Y = Z = W = float()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
        <subtype><typename>W</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>W</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>rasterPos4dv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>rasterPos4dv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: float(), Y :: float(), Z :: float(), W :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>V</anno>
  <anno>W</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>rasterPos4f</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>rasterPos4f(X, Y, Z, W) -&gt; ok</head>
      <guard>
        <subtype><typename>X</typename><string>X = Y = Z = W = float()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
        <subtype><typename>W</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>W</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>rasterPos4fv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>rasterPos4fv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: float(), Y :: float(), Z :: float(), W :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>V</anno>
  <anno>W</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>rasterPos4i</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>rasterPos4i(X, Y, Z, W) -&gt; ok</head>
      <guard>
        <subtype><typename>X</typename><string>X = Y = Z = W = integer()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
        <subtype><typename>W</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>W</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>rasterPos4iv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>rasterPos4iv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{X :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Y :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Z :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>W :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>V</anno>
  <anno>W</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>rasterPos4s</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>rasterPos4s(X, Y, Z, W) -&gt; ok</head>
      <guard>
        <subtype><typename>X</typename><string>X = Y = Z = W = integer()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
        <subtype><typename>W</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>W</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>rasterPos4sv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>rasterPos4sv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{X :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Y :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Z :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>W :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>V</anno>
  <anno>W</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>readBuffer</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>readBuffer(Mode) -&gt; ok</head>
      <guard>
        <subtype><typename>Mode</typename><string>Mode = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Mode</anno>
</spec>
<spec>
  <name>readPixels</name>
  <arity>7</arity>
  <contract>
    <clause>
      <head>readPixels(X, Y, Width, Height, Format, Type, Pixels) -&gt; ok</head>
      <guard>
        <subtype><typename>X</typename><string>X = Y = Width = Height = integer()</string></subtype>
        <subtype><typename>Y</typename><string/></subtype>
        <subtype><typename>Width</typename><string/></subtype>
        <subtype><typename>Height</typename><string/></subtype>
        <subtype><typename>Format</typename><string>Format = Type = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Type</typename><string/></subtype>
        <subtype><typename>Pixels</typename><string>Pixels = <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Format</anno>
  <anno>Height</anno>
  <anno>Pixels</anno>
  <anno>Type</anno>
  <anno>Width</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>rectd</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>rectd(X1, Y1, X2, Y2) -&gt; ok</head>
      <guard>
        <subtype><typename>X1</typename><string>X1 = Y1 = X2 = Y2 = float()</string></subtype>
        <subtype><typename>Y1</typename><string></string></subtype>
        <subtype><typename>X2</typename><string></string></subtype>
        <subtype><typename>Y2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>X1</anno>
  <anno>X2</anno>
  <anno>Y1</anno>
  <anno>Y2</anno>
</spec>
<spec>
  <name>rectdv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>rectdv(V1, V2) -&gt; ok</head>
      <guard>
        <subtype><typename>V1</typename><string>V1 = V2 = {float(), float()}</string></subtype>
        <subtype><typename>V2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>V1</anno>
  <anno>V2</anno>
</spec>
<spec>
  <name>rectf</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>rectf(X1, Y1, X2, Y2) -&gt; ok</head>
      <guard>
        <subtype><typename>X1</typename><string>X1 = Y1 = X2 = Y2 = float()</string></subtype>
        <subtype><typename>Y1</typename><string></string></subtype>
        <subtype><typename>X2</typename><string></string></subtype>
        <subtype><typename>Y2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>X1</anno>
  <anno>X2</anno>
  <anno>Y1</anno>
  <anno>Y2</anno>
</spec>
<spec>
  <name>rectfv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>rectfv(V1, V2) -&gt; ok</head>
      <guard>
        <subtype><typename>V1</typename><string>V1 = V2 = {float(), float()}</string></subtype>
        <subtype><typename>V2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>V1</anno>
  <anno>V2</anno>
</spec>
<spec>
  <name>recti</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>recti(X1, Y1, X2, Y2) -&gt; ok</head>
      <guard>
        <subtype><typename>X1</typename><string>X1 = Y1 = X2 = Y2 = integer()</string></subtype>
        <subtype><typename>Y1</typename><string></string></subtype>
        <subtype><typename>X2</typename><string></string></subtype>
        <subtype><typename>Y2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>X1</anno>
  <anno>X2</anno>
  <anno>Y1</anno>
  <anno>Y2</anno>
</spec>
<spec>
  <name>rectiv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>rectiv(V1, V2) -&gt; ok</head>
      <guard>
        <subtype><typename>V1</typename><string>V1 = V2 = {integer(), integer()}</string></subtype>
        <subtype><typename>V2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>V1</anno>
  <anno>V2</anno>
</spec>
<spec>
  <name>rects</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>rects(X1, Y1, X2, Y2) -&gt; ok</head>
      <guard>
        <subtype><typename>X1</typename><string>X1 = Y1 = X2 = Y2 = integer()</string></subtype>
        <subtype><typename>Y1</typename><string></string></subtype>
        <subtype><typename>X2</typename><string></string></subtype>
        <subtype><typename>Y2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>X1</anno>
  <anno>X2</anno>
  <anno>Y1</anno>
  <anno>Y2</anno>
</spec>
<spec>
  <name>rectsv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>rectsv(V1, V2) -&gt; ok</head>
      <guard>
        <subtype><typename>V1</typename><string>V1 = V2 = {integer(), integer()}</string></subtype>
        <subtype><typename>V2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>V1</anno>
  <anno>V2</anno>
</spec>
<spec>
  <name>releaseShaderCompiler</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>releaseShaderCompiler() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>renderMode</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>renderMode(Mode) -&gt; integer()</head>
      <guard>
        <subtype><typename>Mode</typename><string>Mode = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Mode</anno>
</spec>
<spec>
  <name>renderbufferStorage</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>renderbufferStorage(Target, Internalformat, Width, Height) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Internalformat = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Internalformat</typename><string/></subtype>
        <subtype><typename>Width</typename><string>Width = Height = integer()</string></subtype>
        <subtype><typename>Height</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Height</anno>
  <anno>Internalformat</anno>
  <anno>Target</anno>
  <anno>Width</anno>
</spec>
<spec>
  <name>renderbufferStorageMultisample</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>renderbufferStorageMultisample(Target,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Samples,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Internalformat,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Width,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Height) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Samples</typename><string>Samples = integer()</string></subtype>
        <subtype><typename>Internalformat</typename><string>Internalformat = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Width</typename><string>Width = Height = integer()</string></subtype>
        <subtype><typename>Height</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Height</anno>
  <anno>Internalformat</anno>
  <anno>Samples</anno>
  <anno>Target</anno>
  <anno>Width</anno>
</spec>
<spec>
  <name>resetHistogram</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>resetHistogram(Target) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Target</anno>
</spec>
<spec>
  <name>resetMinmax</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>resetMinmax(Target) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Target</anno>
</spec>
<spec>
  <name>resumeTransformFeedback</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>resumeTransformFeedback() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>rotated</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>rotated(Angle, X, Y, Z) -&gt; ok</head>
      <guard>
        <subtype><typename>Angle</typename><string>Angle = X = Y = Z = float()</string></subtype>
        <subtype><typename>X</typename><string></string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Angle</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>rotatef</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>rotatef(Angle, X, Y, Z) -&gt; ok</head>
      <guard>
        <subtype><typename>Angle</typename><string>Angle = X = Y = Z = float()</string></subtype>
        <subtype><typename>X</typename><string></string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Angle</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>sampleCoverage</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>sampleCoverage(Value, Invert) -&gt; ok</head>
      <guard>
        <subtype><typename>Value</typename><string>Value = <seealso marker="#type-clamp">clamp()</seealso></string></subtype>
        <subtype><typename>Invert</typename><string>Invert = 0 | 1</string></subtype>
      </guard></clause>
  </contract>
  <anno>Invert</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>sampleMaski</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>sampleMaski(Index, Mask) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = Mask = integer()</string></subtype>
        <subtype><typename>Mask</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>Mask</anno>
</spec>
<spec>
  <name>samplerParameterIiv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>samplerParameterIiv(Sampler, Pname, Param) -&gt; ok</head>
      <guard>
        <subtype><typename>Sampler</typename><string>Sampler = integer()</string></subtype>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Param</typename><string>Param = [integer()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Param</anno>
  <anno>Pname</anno>
  <anno>Sampler</anno>
</spec>
<spec>
  <name>samplerParameterIuiv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>samplerParameterIuiv(Sampler, Pname, Param) -&gt; ok</head>
      <guard>
        <subtype><typename>Sampler</typename><string>Sampler = integer()</string></subtype>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Param</typename><string>Param = [integer()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Param</anno>
  <anno>Pname</anno>
  <anno>Sampler</anno>
</spec>
<spec>
  <name>samplerParameterf</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>samplerParameterf(Sampler, Pname, Param) -&gt; ok</head>
      <guard>
        <subtype><typename>Sampler</typename><string>Sampler = integer()</string></subtype>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Param</typename><string>Param = float()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Param</anno>
  <anno>Pname</anno>
  <anno>Sampler</anno>
</spec>
<spec>
  <name>samplerParameterfv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>samplerParameterfv(Sampler, Pname, Param) -&gt; ok</head>
      <guard>
        <subtype><typename>Sampler</typename><string>Sampler = integer()</string></subtype>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Param</typename><string>Param = [float()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Param</anno>
  <anno>Pname</anno>
  <anno>Sampler</anno>
</spec>
<spec>
  <name>samplerParameteri</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>samplerParameteri(Sampler, Pname, Param) -&gt; ok</head>
      <guard>
        <subtype><typename>Sampler</typename><string>Sampler = integer()</string></subtype>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Param</typename><string>Param = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Param</anno>
  <anno>Pname</anno>
  <anno>Sampler</anno>
</spec>
<spec>
  <name>samplerParameteriv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>samplerParameteriv(Sampler, Pname, Param) -&gt; ok</head>
      <guard>
        <subtype><typename>Sampler</typename><string>Sampler = integer()</string></subtype>
        <subtype><typename>Pname</typename><string>Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Param</typename><string>Param = [integer()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Param</anno>
  <anno>Pname</anno>
  <anno>Sampler</anno>
</spec>
<spec>
  <name>scaled</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>scaled(X, Y, Z) -&gt; ok</head>
      <guard>
        <subtype><typename>X</typename><string>X = Y = Z = float()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>scalef</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>scalef(X, Y, Z) -&gt; ok</head>
      <guard>
        <subtype><typename>X</typename><string>X = Y = Z = float()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>scissor</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>scissor(X, Y, Width, Height) -&gt; ok</head>
      <guard>
        <subtype><typename>X</typename><string>X = Y = Width = Height = integer()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Width</typename><string></string></subtype>
        <subtype><typename>Height</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Height</anno>
  <anno>Width</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>scissorArrayv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>scissorArrayv(First, V) -&gt; ok</head>
      <guard>
        <subtype><typename>First</typename><string>First = integer()</string></subtype>
        <subtype><typename>V</typename><string>V = [{integer(), integer(), integer(), integer()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>First</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>scissorIndexed</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>scissorIndexed(Index, Left, Bottom, Width, Height) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = Left = Bottom = Width = Height = integer()</string></subtype>
        <subtype><typename>Left</typename><string></string></subtype>
        <subtype><typename>Bottom</typename><string></string></subtype>
        <subtype><typename>Width</typename><string></string></subtype>
        <subtype><typename>Height</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Bottom</anno>
  <anno>Height</anno>
  <anno>Index</anno>
  <anno>Left</anno>
  <anno>Width</anno>
</spec>
<spec>
  <name>scissorIndexedv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>scissorIndexedv(Index, V) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>V</typename><string>V = {integer(), integer(), integer(), integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>secondaryColor3b</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>secondaryColor3b(Red, Green, Blue) -&gt; ok</head>
      <guard>
        <subtype><typename>Red</typename><string>Red = Green = Blue = integer()</string></subtype>
        <subtype><typename>Green</typename><string></string></subtype>
        <subtype><typename>Blue</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
</spec>
<spec>
  <name>secondaryColor3bv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>secondaryColor3bv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {Red :: integer(), Green :: integer(), Blue :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>secondaryColor3d</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>secondaryColor3d(Red, Green, Blue) -&gt; ok</head>
      <guard>
        <subtype><typename>Red</typename><string>Red = Green = Blue = float()</string></subtype>
        <subtype><typename>Green</typename><string></string></subtype>
        <subtype><typename>Blue</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
</spec>
<spec>
  <name>secondaryColor3dv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>secondaryColor3dv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {Red :: float(), Green :: float(), Blue :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>secondaryColor3f</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>secondaryColor3f(Red, Green, Blue) -&gt; ok</head>
      <guard>
        <subtype><typename>Red</typename><string>Red = Green = Blue = float()</string></subtype>
        <subtype><typename>Green</typename><string></string></subtype>
        <subtype><typename>Blue</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
</spec>
<spec>
  <name>secondaryColor3fv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>secondaryColor3fv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {Red :: float(), Green :: float(), Blue :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>secondaryColor3i</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>secondaryColor3i(Red, Green, Blue) -&gt; ok</head>
      <guard>
        <subtype><typename>Red</typename><string>Red = Green = Blue = integer()</string></subtype>
        <subtype><typename>Green</typename><string></string></subtype>
        <subtype><typename>Blue</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
</spec>
<spec>
  <name>secondaryColor3iv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>secondaryColor3iv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {Red :: integer(), Green :: integer(), Blue :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>secondaryColor3s</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>secondaryColor3s(Red, Green, Blue) -&gt; ok</head>
      <guard>
        <subtype><typename>Red</typename><string>Red = Green = Blue = integer()</string></subtype>
        <subtype><typename>Green</typename><string></string></subtype>
        <subtype><typename>Blue</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
</spec>
<spec>
  <name>secondaryColor3sv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>secondaryColor3sv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {Red :: integer(), Green :: integer(), Blue :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>secondaryColor3ub</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>secondaryColor3ub(Red, Green, Blue) -&gt; ok</head>
      <guard>
        <subtype><typename>Red</typename><string>Red = Green = Blue = integer()</string></subtype>
        <subtype><typename>Green</typename><string></string></subtype>
        <subtype><typename>Blue</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
</spec>
<spec>
  <name>secondaryColor3ubv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>secondaryColor3ubv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {Red :: integer(), Green :: integer(), Blue :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>secondaryColor3ui</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>secondaryColor3ui(Red, Green, Blue) -&gt; ok</head>
      <guard>
        <subtype><typename>Red</typename><string>Red = Green = Blue = integer()</string></subtype>
        <subtype><typename>Green</typename><string></string></subtype>
        <subtype><typename>Blue</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
</spec>
<spec>
  <name>secondaryColor3uiv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>secondaryColor3uiv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {Red :: integer(), Green :: integer(), Blue :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>secondaryColor3us</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>secondaryColor3us(Red, Green, Blue) -&gt; ok</head>
      <guard>
        <subtype><typename>Red</typename><string>Red = Green = Blue = integer()</string></subtype>
        <subtype><typename>Green</typename><string></string></subtype>
        <subtype><typename>Blue</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
</spec>
<spec>
  <name>secondaryColor3usv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>secondaryColor3usv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {Red :: integer(), Green :: integer(), Blue :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Blue</anno>
  <anno>Green</anno>
  <anno>Red</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>secondaryColorPointer</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>secondaryColorPointer(Size, Type, Stride, Pointer) -&gt; ok</head>
      <guard>
        <subtype><typename>Size</typename><string>Size = integer()</string></subtype>
        <subtype><typename>Type</typename><string>Type = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Stride</typename><string>Stride = integer()</string></subtype>
        <subtype><typename>Pointer</typename><string>Pointer = <seealso marker="#type-offset">offset()</seealso> | <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pointer</anno>
  <anno>Size</anno>
  <anno>Stride</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>selectBuffer</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>selectBuffer(Size, Buffer) -&gt; ok</head>
      <guard>
        <subtype><typename>Size</typename><string>Size = integer()</string></subtype>
        <subtype><typename>Buffer</typename><string>Buffer = <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Buffer</anno>
  <anno>Size</anno>
</spec>
<spec>
  <name>send_bin</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>separableFilter2D</name>
  <arity>8</arity>
  <contract>
    <clause>
      <head>separableFilter2D(Target,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Internalformat,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Width,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Height,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Format,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Type,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Row,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Column) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Internalformat = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Internalformat</typename><string/></subtype>
        <subtype><typename>Width</typename><string>Width = Height = integer()</string></subtype>
        <subtype><typename>Height</typename><string/></subtype>
        <subtype><typename>Format</typename><string>Format = Type = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Type</typename><string/></subtype>
        <subtype><typename>Row</typename><string>Row = Column = <seealso marker="#type-offset">offset()</seealso> | <seealso marker="#type-mem">mem()</seealso></string></subtype>
        <subtype><typename>Column</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Column</anno>
  <anno>Format</anno>
  <anno>Height</anno>
  <anno>Internalformat</anno>
  <anno>Row</anno>
  <anno>Target</anno>
  <anno>Type</anno>
  <anno>Width</anno>
</spec>
<spec>
  <name>shadeModel</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>shadeModel(Mode) -&gt; ok</head>
      <guard>
        <subtype><typename>Mode</typename><string>Mode = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Mode</anno>
</spec>
<spec>
  <name>shaderBinary</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>shaderBinary(Shaders, Binaryformat, Binary) -&gt; ok</head>
      <guard>
        <subtype><typename>Shaders</typename><string>Shaders = [integer()]</string></subtype>
        <subtype><typename>Binaryformat</typename><string>Binaryformat = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Binary</typename><string>Binary = binary()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Binary</anno>
  <anno>Binaryformat</anno>
  <anno>Shaders</anno>
</spec>
<spec>
  <name>shaderSource</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>shaderSource(Shader, String) -&gt; ok</head>
      <guard>
        <subtype><typename>Shader</typename><string>Shader = integer()</string></subtype>
        <subtype><typename>String</typename><string>String = iolist()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Shader</anno>
  <anno>String</anno>
</spec>
<spec>
  <name>shaderSourceARB</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>shaderSourceARB(ShaderObj, String) -&gt; ok</head>
      <guard>
        <subtype><typename>ShaderObj</typename><string>ShaderObj = integer()</string></subtype>
        <subtype><typename>String</typename><string>String = iolist()</string></subtype>
      </guard></clause>
  </contract>
  <anno>ShaderObj</anno>
  <anno>String</anno>
</spec>
<spec>
  <name>stencilClearTagEXT</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>stencilClearTagEXT(StencilTagBits, StencilClearTag) -&gt; ok</head>
      <guard>
        <subtype><typename>StencilTagBits</typename><string>StencilTagBits = StencilClearTag = integer()</string></subtype>
        <subtype><typename>StencilClearTag</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>StencilClearTag</anno>
  <anno>StencilTagBits</anno>
</spec>
<spec>
  <name>stencilFunc</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>stencilFunc(Func, Ref, Mask) -&gt; ok</head>
      <guard>
        <subtype><typename>Func</typename><string>Func = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Ref</typename><string>Ref = Mask = integer()</string></subtype>
        <subtype><typename>Mask</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Func</anno>
  <anno>Mask</anno>
  <anno>Ref</anno>
</spec>
<spec>
  <name>stencilFuncSeparate</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>stencilFuncSeparate(Face, Func, Ref, Mask) -&gt; ok</head>
      <guard>
        <subtype><typename>Face</typename><string>Face = Func = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Func</typename><string/></subtype>
        <subtype><typename>Ref</typename><string>Ref = Mask = integer()</string></subtype>
        <subtype><typename>Mask</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Face</anno>
  <anno>Func</anno>
  <anno>Mask</anno>
  <anno>Ref</anno>
</spec>
<spec>
  <name>stencilMask</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>stencilMask(Mask) -&gt; ok</head>
      <guard>
        <subtype><typename>Mask</typename><string>Mask = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Mask</anno>
</spec>
<spec>
  <name>stencilMaskSeparate</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>stencilMaskSeparate(Face, Mask) -&gt; ok</head>
      <guard>
        <subtype><typename>Face</typename><string>Face = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Mask</typename><string>Mask = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Face</anno>
  <anno>Mask</anno>
</spec>
<spec>
  <name>stencilOp</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>stencilOp(Fail, Zfail, Zpass) -&gt; ok</head>
      <guard>
        <subtype><typename>Fail</typename><string>Fail = Zfail = Zpass = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Zfail</typename><string></string></subtype>
        <subtype><typename>Zpass</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Fail</anno>
  <anno>Zfail</anno>
  <anno>Zpass</anno>
</spec>
<spec>
  <name>stencilOpSeparate</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>stencilOpSeparate(Face, Sfail, Dpfail, Dppass) -&gt; ok</head>
      <guard>
        <subtype><typename>Face</typename><string>Face = Sfail = Dpfail = Dppass = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Sfail</typename><string></string></subtype>
        <subtype><typename>Dpfail</typename><string></string></subtype>
        <subtype><typename>Dppass</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Dpfail</anno>
  <anno>Dppass</anno>
  <anno>Face</anno>
  <anno>Sfail</anno>
</spec>
<spec>
  <name>texBuffer</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>texBuffer(Target, Internalformat, Buffer) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Internalformat = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Internalformat</typename><string/></subtype>
        <subtype><typename>Buffer</typename><string>Buffer = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Buffer</anno>
  <anno>Internalformat</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>texCoord1d</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>texCoord1d(S) -&gt; ok</head>
      <guard>
        <subtype><typename>S</typename><string>S = float()</string></subtype>
      </guard></clause>
  </contract>
  <anno>S</anno>
</spec>
<spec>
  <name>texCoord1dv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>texCoord1dv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {S :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>S</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>texCoord1f</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>texCoord1f(S) -&gt; ok</head>
      <guard>
        <subtype><typename>S</typename><string>S = float()</string></subtype>
      </guard></clause>
  </contract>
  <anno>S</anno>
</spec>
<spec>
  <name>texCoord1fv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>texCoord1fv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {S :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>S</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>texCoord1i</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>texCoord1i(S) -&gt; ok</head>
      <guard>
        <subtype><typename>S</typename><string>S = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>S</anno>
</spec>
<spec>
  <name>texCoord1iv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>texCoord1iv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {S :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>S</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>texCoord1s</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>texCoord1s(S) -&gt; ok</head>
      <guard>
        <subtype><typename>S</typename><string>S = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>S</anno>
</spec>
<spec>
  <name>texCoord1sv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>texCoord1sv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {S :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>S</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>texCoord2d</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>texCoord2d(S, T) -&gt; ok</head>
      <guard>
        <subtype><typename>S</typename><string>S = T = float()</string></subtype>
        <subtype><typename>T</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>S</anno>
  <anno>T</anno>
</spec>
<spec>
  <name>texCoord2dv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>texCoord2dv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {S :: float(), T :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>S</anno>
  <anno>T</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>texCoord2f</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>texCoord2f(S, T) -&gt; ok</head>
      <guard>
        <subtype><typename>S</typename><string>S = T = float()</string></subtype>
        <subtype><typename>T</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>S</anno>
  <anno>T</anno>
</spec>
<spec>
  <name>texCoord2fv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>texCoord2fv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {S :: float(), T :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>S</anno>
  <anno>T</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>texCoord2i</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>texCoord2i(S, T) -&gt; ok</head>
      <guard>
        <subtype><typename>S</typename><string>S = T = integer()</string></subtype>
        <subtype><typename>T</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>S</anno>
  <anno>T</anno>
</spec>
<spec>
  <name>texCoord2iv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>texCoord2iv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {S :: integer(), T :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>S</anno>
  <anno>T</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>texCoord2s</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>texCoord2s(S, T) -&gt; ok</head>
      <guard>
        <subtype><typename>S</typename><string>S = T = integer()</string></subtype>
        <subtype><typename>T</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>S</anno>
  <anno>T</anno>
</spec>
<spec>
  <name>texCoord2sv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>texCoord2sv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {S :: integer(), T :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>S</anno>
  <anno>T</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>texCoord3d</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>texCoord3d(S, T, R) -&gt; ok</head>
      <guard>
        <subtype><typename>S</typename><string>S = T = R = float()</string></subtype>
        <subtype><typename>T</typename><string></string></subtype>
        <subtype><typename>R</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>R</anno>
  <anno>S</anno>
  <anno>T</anno>
</spec>
<spec>
  <name>texCoord3dv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>texCoord3dv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {S :: float(), T :: float(), R :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>R</anno>
  <anno>S</anno>
  <anno>T</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>texCoord3f</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>texCoord3f(S, T, R) -&gt; ok</head>
      <guard>
        <subtype><typename>S</typename><string>S = T = R = float()</string></subtype>
        <subtype><typename>T</typename><string></string></subtype>
        <subtype><typename>R</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>R</anno>
  <anno>S</anno>
  <anno>T</anno>
</spec>
<spec>
  <name>texCoord3fv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>texCoord3fv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {S :: float(), T :: float(), R :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>R</anno>
  <anno>S</anno>
  <anno>T</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>texCoord3i</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>texCoord3i(S, T, R) -&gt; ok</head>
      <guard>
        <subtype><typename>S</typename><string>S = T = R = integer()</string></subtype>
        <subtype><typename>T</typename><string></string></subtype>
        <subtype><typename>R</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>R</anno>
  <anno>S</anno>
  <anno>T</anno>
</spec>
<spec>
  <name>texCoord3iv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>texCoord3iv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {S :: integer(), T :: integer(), R :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>R</anno>
  <anno>S</anno>
  <anno>T</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>texCoord3s</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>texCoord3s(S, T, R) -&gt; ok</head>
      <guard>
        <subtype><typename>S</typename><string>S = T = R = integer()</string></subtype>
        <subtype><typename>T</typename><string></string></subtype>
        <subtype><typename>R</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>R</anno>
  <anno>S</anno>
  <anno>T</anno>
</spec>
<spec>
  <name>texCoord3sv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>texCoord3sv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {S :: integer(), T :: integer(), R :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>R</anno>
  <anno>S</anno>
  <anno>T</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>texCoord4d</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>texCoord4d(S, T, R, Q) -&gt; ok</head>
      <guard>
        <subtype><typename>S</typename><string>S = T = R = Q = float()</string></subtype>
        <subtype><typename>T</typename><string></string></subtype>
        <subtype><typename>R</typename><string></string></subtype>
        <subtype><typename>Q</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Q</anno>
  <anno>R</anno>
  <anno>S</anno>
  <anno>T</anno>
</spec>
<spec>
  <name>texCoord4dv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>texCoord4dv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {S :: float(), T :: float(), R :: float(), Q :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Q</anno>
  <anno>R</anno>
  <anno>S</anno>
  <anno>T</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>texCoord4f</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>texCoord4f(S, T, R, Q) -&gt; ok</head>
      <guard>
        <subtype><typename>S</typename><string>S = T = R = Q = float()</string></subtype>
        <subtype><typename>T</typename><string></string></subtype>
        <subtype><typename>R</typename><string></string></subtype>
        <subtype><typename>Q</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Q</anno>
  <anno>R</anno>
  <anno>S</anno>
  <anno>T</anno>
</spec>
<spec>
  <name>texCoord4fv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>texCoord4fv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {S :: float(), T :: float(), R :: float(), Q :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Q</anno>
  <anno>R</anno>
  <anno>S</anno>
  <anno>T</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>texCoord4i</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>texCoord4i(S, T, R, Q) -&gt; ok</head>
      <guard>
        <subtype><typename>S</typename><string>S = T = R = Q = integer()</string></subtype>
        <subtype><typename>T</typename><string></string></subtype>
        <subtype><typename>R</typename><string></string></subtype>
        <subtype><typename>Q</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Q</anno>
  <anno>R</anno>
  <anno>S</anno>
  <anno>T</anno>
</spec>
<spec>
  <name>texCoord4iv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>texCoord4iv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{S :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>T :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>R :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Q :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Q</anno>
  <anno>R</anno>
  <anno>S</anno>
  <anno>T</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>texCoord4s</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>texCoord4s(S, T, R, Q) -&gt; ok</head>
      <guard>
        <subtype><typename>S</typename><string>S = T = R = Q = integer()</string></subtype>
        <subtype><typename>T</typename><string></string></subtype>
        <subtype><typename>R</typename><string></string></subtype>
        <subtype><typename>Q</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Q</anno>
  <anno>R</anno>
  <anno>S</anno>
  <anno>T</anno>
</spec>
<spec>
  <name>texCoord4sv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>texCoord4sv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{S :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>T :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>R :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Q :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Q</anno>
  <anno>R</anno>
  <anno>S</anno>
  <anno>T</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>texCoordPointer</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>texCoordPointer(Size, Type, Stride, Ptr) -&gt; ok</head>
      <guard>
        <subtype><typename>Size</typename><string>Size = integer()</string></subtype>
        <subtype><typename>Type</typename><string>Type = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Stride</typename><string>Stride = integer()</string></subtype>
        <subtype><typename>Ptr</typename><string>Ptr = <seealso marker="#type-offset">offset()</seealso> | <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Ptr</anno>
  <anno>Size</anno>
  <anno>Stride</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>texEnvf</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>texEnvf(Target, Pname, Param) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string/></subtype>
        <subtype><typename>Param</typename><string>Param = float()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Param</anno>
  <anno>Pname</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>texEnvfv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>texEnvfv(Target, Pname, Params) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string/></subtype>
        <subtype><typename>Params</typename><string>Params = tuple()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Params</anno>
  <anno>Pname</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>texEnvi</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>texEnvi(Target, Pname, Param) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string/></subtype>
        <subtype><typename>Param</typename><string>Param = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Param</anno>
  <anno>Pname</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>texEnviv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>texEnviv(Target, Pname, Params) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string/></subtype>
        <subtype><typename>Params</typename><string>Params = tuple()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Params</anno>
  <anno>Pname</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>texGend</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>texGend(Coord, Pname, Param) -&gt; ok</head>
      <guard>
        <subtype><typename>Coord</typename><string>Coord = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string/></subtype>
        <subtype><typename>Param</typename><string>Param = float()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Coord</anno>
  <anno>Param</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>texGendv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>texGendv(Coord, Pname, Params) -&gt; ok</head>
      <guard>
        <subtype><typename>Coord</typename><string>Coord = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string/></subtype>
        <subtype><typename>Params</typename><string>Params = tuple()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Coord</anno>
  <anno>Params</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>texGenf</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>texGenf(Coord, Pname, Param) -&gt; ok</head>
      <guard>
        <subtype><typename>Coord</typename><string>Coord = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string/></subtype>
        <subtype><typename>Param</typename><string>Param = float()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Coord</anno>
  <anno>Param</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>texGenfv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>texGenfv(Coord, Pname, Params) -&gt; ok</head>
      <guard>
        <subtype><typename>Coord</typename><string>Coord = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string/></subtype>
        <subtype><typename>Params</typename><string>Params = tuple()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Coord</anno>
  <anno>Params</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>texGeni</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>texGeni(Coord, Pname, Param) -&gt; ok</head>
      <guard>
        <subtype><typename>Coord</typename><string>Coord = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string/></subtype>
        <subtype><typename>Param</typename><string>Param = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Coord</anno>
  <anno>Param</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>texGeniv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>texGeniv(Coord, Pname, Params) -&gt; ok</head>
      <guard>
        <subtype><typename>Coord</typename><string>Coord = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string/></subtype>
        <subtype><typename>Params</typename><string>Params = tuple()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Coord</anno>
  <anno>Params</anno>
  <anno>Pname</anno>
</spec>
<spec>
  <name>texImage1D</name>
  <arity>8</arity>
  <contract>
    <clause>
      <head>texImage1D(Target,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Level,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>InternalFormat,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Width,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Border,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Format,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Type,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Pixels) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Level</typename><string>Level = InternalFormat = Width = Border = integer()</string></subtype>
        <subtype><typename>InternalFormat</typename><string/></subtype>
        <subtype><typename>Width</typename><string/></subtype>
        <subtype><typename>Border</typename><string/></subtype>
        <subtype><typename>Format</typename><string>Format = Type = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Type</typename><string/></subtype>
        <subtype><typename>Pixels</typename><string>Pixels = <seealso marker="#type-offset">offset()</seealso> | <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Border</anno>
  <anno>Format</anno>
  <anno>InternalFormat</anno>
  <anno>Level</anno>
  <anno>Pixels</anno>
  <anno>Target</anno>
  <anno>Type</anno>
  <anno>Width</anno>
</spec>
<spec>
  <name>texImage2D</name>
  <arity>9</arity>
  <contract>
    <clause>
      <head>texImage2D(Target,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Level,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>InternalFormat,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Width,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Height,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Border,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Format,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Type,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Pixels) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Level</typename><string>Level = InternalFormat = Width = Height = Border = integer()</string></subtype>
        <subtype><typename>InternalFormat</typename><string/></subtype>
        <subtype><typename>Width</typename><string/></subtype>
        <subtype><typename>Height</typename><string/></subtype>
        <subtype><typename>Border</typename><string/></subtype>
        <subtype><typename>Format</typename><string>Format = Type = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Type</typename><string/></subtype>
        <subtype><typename>Pixels</typename><string>Pixels = <seealso marker="#type-offset">offset()</seealso> | <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Border</anno>
  <anno>Format</anno>
  <anno>Height</anno>
  <anno>InternalFormat</anno>
  <anno>Level</anno>
  <anno>Pixels</anno>
  <anno>Target</anno>
  <anno>Type</anno>
  <anno>Width</anno>
</spec>
<spec>
  <name>texImage2DMultisample</name>
  <arity>6</arity>
  <contract>
    <clause>
      <head>texImage2DMultisample(Target,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Samples,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Internalformat,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Width,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Height,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Fixedsamplelocations) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Samples</typename><string>Samples = Internalformat = Width = Height = integer()</string></subtype>
        <subtype><typename>Internalformat</typename><string/></subtype>
        <subtype><typename>Width</typename><string/></subtype>
        <subtype><typename>Height</typename><string/></subtype>
        <subtype><typename>Fixedsamplelocations</typename><string>Fixedsamplelocations = 0 | 1</string></subtype>
      </guard></clause>
  </contract>
  <anno>Fixedsamplelocations</anno>
  <anno>Height</anno>
  <anno>Internalformat</anno>
  <anno>Samples</anno>
  <anno>Target</anno>
  <anno>Width</anno>
</spec>
<spec>
  <name>texImage3D</name>
  <arity>10</arity>
  <contract>
    <clause>
      <head>texImage3D(Target,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Level,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>InternalFormat,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Width,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Height,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Depth,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Border,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Format,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Type,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Pixels) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Level</typename><string>Level = InternalFormat = Width = Height = Depth = Border = integer()</string></subtype>
        <subtype><typename>InternalFormat</typename><string/></subtype>
        <subtype><typename>Width</typename><string/></subtype>
        <subtype><typename>Height</typename><string/></subtype>
        <subtype><typename>Depth</typename><string/></subtype>
        <subtype><typename>Border</typename><string/></subtype>
        <subtype><typename>Format</typename><string>Format = Type = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Type</typename><string/></subtype>
        <subtype><typename>Pixels</typename><string>Pixels = <seealso marker="#type-offset">offset()</seealso> | <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Border</anno>
  <anno>Depth</anno>
  <anno>Format</anno>
  <anno>Height</anno>
  <anno>InternalFormat</anno>
  <anno>Level</anno>
  <anno>Pixels</anno>
  <anno>Target</anno>
  <anno>Type</anno>
  <anno>Width</anno>
</spec>
<spec>
  <name>texImage3DMultisample</name>
  <arity>7</arity>
  <contract>
    <clause>
      <head>texImage3DMultisample(Target,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Samples,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Internalformat,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Width,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Height,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Depth,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Fixedsamplelocations) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Samples</typename><string>Samples = Internalformat = Width = Height = Depth = integer()</string></subtype>
        <subtype><typename>Internalformat</typename><string/></subtype>
        <subtype><typename>Width</typename><string/></subtype>
        <subtype><typename>Height</typename><string/></subtype>
        <subtype><typename>Depth</typename><string/></subtype>
        <subtype><typename>Fixedsamplelocations</typename><string>Fixedsamplelocations = 0 | 1</string></subtype>
      </guard></clause>
  </contract>
  <anno>Depth</anno>
  <anno>Fixedsamplelocations</anno>
  <anno>Height</anno>
  <anno>Internalformat</anno>
  <anno>Samples</anno>
  <anno>Target</anno>
  <anno>Width</anno>
</spec>
<spec>
  <name>texParameterIiv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>texParameterIiv(Target, Pname, Params) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string/></subtype>
        <subtype><typename>Params</typename><string>Params = tuple()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Params</anno>
  <anno>Pname</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>texParameterIuiv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>texParameterIuiv(Target, Pname, Params) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string/></subtype>
        <subtype><typename>Params</typename><string>Params = tuple()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Params</anno>
  <anno>Pname</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>texParameterf</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>texParameterf(Target, Pname, Param) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string/></subtype>
        <subtype><typename>Param</typename><string>Param = float()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Param</anno>
  <anno>Pname</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>texParameterfv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>texParameterfv(Target, Pname, Params) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string/></subtype>
        <subtype><typename>Params</typename><string>Params = tuple()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Params</anno>
  <anno>Pname</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>texParameteri</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>texParameteri(Target, Pname, Param) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string/></subtype>
        <subtype><typename>Param</typename><string>Param = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Param</anno>
  <anno>Pname</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>texParameteriv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>texParameteriv(Target, Pname, Params) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = Pname = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Pname</typename><string/></subtype>
        <subtype><typename>Params</typename><string>Params = tuple()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Params</anno>
  <anno>Pname</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>texStorage1D</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>texStorage1D(Target, Levels, Internalformat, Width) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Levels</typename><string>Levels = integer()</string></subtype>
        <subtype><typename>Internalformat</typename><string>Internalformat = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Width</typename><string>Width = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Internalformat</anno>
  <anno>Levels</anno>
  <anno>Target</anno>
  <anno>Width</anno>
</spec>
<spec>
  <name>texStorage2D</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>texStorage2D(Target, Levels, Internalformat, Width, Height) -&gt; ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Levels</typename><string>Levels = integer()</string></subtype>
        <subtype><typename>Internalformat</typename><string>Internalformat = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Width</typename><string>Width = Height = integer()</string></subtype>
        <subtype><typename>Height</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Height</anno>
  <anno>Internalformat</anno>
  <anno>Levels</anno>
  <anno>Target</anno>
  <anno>Width</anno>
</spec>
<spec>
  <name>texStorage3D</name>
  <arity>6</arity>
  <contract>
    <clause>
      <head>texStorage3D(Target, Levels, Internalformat, Width, Height, Depth) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Levels</typename><string>Levels = integer()</string></subtype>
        <subtype><typename>Internalformat</typename><string>Internalformat = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Width</typename><string>Width = Height = Depth = integer()</string></subtype>
        <subtype><typename>Height</typename><string></string></subtype>
        <subtype><typename>Depth</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Depth</anno>
  <anno>Height</anno>
  <anno>Internalformat</anno>
  <anno>Levels</anno>
  <anno>Target</anno>
  <anno>Width</anno>
</spec>
<spec>
  <name>texSubImage1D</name>
  <arity>7</arity>
  <contract>
    <clause>
      <head>texSubImage1D(Target, Level, Xoffset, Width, Format, Type, Pixels) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Level</typename><string>Level = Xoffset = Width = integer()</string></subtype>
        <subtype><typename>Xoffset</typename><string/></subtype>
        <subtype><typename>Width</typename><string/></subtype>
        <subtype><typename>Format</typename><string>Format = Type = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Type</typename><string/></subtype>
        <subtype><typename>Pixels</typename><string>Pixels = <seealso marker="#type-offset">offset()</seealso> | <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Format</anno>
  <anno>Level</anno>
  <anno>Pixels</anno>
  <anno>Target</anno>
  <anno>Type</anno>
  <anno>Width</anno>
  <anno>Xoffset</anno>
</spec>
<spec>
  <name>texSubImage2D</name>
  <arity>9</arity>
  <contract>
    <clause>
      <head>texSubImage2D(Target,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Level,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Xoffset,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Yoffset,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Width,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Height,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Format,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Type,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Pixels) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Level</typename><string>Level = Xoffset = Yoffset = Width = Height = integer()</string></subtype>
        <subtype><typename>Xoffset</typename><string/></subtype>
        <subtype><typename>Yoffset</typename><string/></subtype>
        <subtype><typename>Width</typename><string/></subtype>
        <subtype><typename>Height</typename><string/></subtype>
        <subtype><typename>Format</typename><string>Format = Type = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Type</typename><string/></subtype>
        <subtype><typename>Pixels</typename><string>Pixels = <seealso marker="#type-offset">offset()</seealso> | <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Format</anno>
  <anno>Height</anno>
  <anno>Level</anno>
  <anno>Pixels</anno>
  <anno>Target</anno>
  <anno>Type</anno>
  <anno>Width</anno>
  <anno>Xoffset</anno>
  <anno>Yoffset</anno>
</spec>
<spec>
  <name>texSubImage3D</name>
  <arity>11</arity>
  <contract>
    <clause>
      <head>texSubImage3D(Target,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Level,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Xoffset,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Yoffset,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Zoffset,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Width,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Height,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Depth,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Format,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Type,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Pixels) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Target</typename><string>Target = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Level</typename><string>Level = Xoffset = Yoffset = Zoffset = Width = Height = Depth = integer()</string></subtype>
        <subtype><typename>Xoffset</typename><string/></subtype>
        <subtype><typename>Yoffset</typename><string/></subtype>
        <subtype><typename>Zoffset</typename><string/></subtype>
        <subtype><typename>Width</typename><string/></subtype>
        <subtype><typename>Height</typename><string/></subtype>
        <subtype><typename>Depth</typename><string/></subtype>
        <subtype><typename>Format</typename><string>Format = Type = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Type</typename><string/></subtype>
        <subtype><typename>Pixels</typename><string>Pixels = <seealso marker="#type-offset">offset()</seealso> | <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Depth</anno>
  <anno>Format</anno>
  <anno>Height</anno>
  <anno>Level</anno>
  <anno>Pixels</anno>
  <anno>Target</anno>
  <anno>Type</anno>
  <anno>Width</anno>
  <anno>Xoffset</anno>
  <anno>Yoffset</anno>
  <anno>Zoffset</anno>
</spec>
<spec>
  <name>transformFeedbackVaryings</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>transformFeedbackVaryings(Program, Varyings, BufferMode) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = integer()</string></subtype>
        <subtype><typename>Varyings</typename><string>Varyings = iolist()</string></subtype>
        <subtype><typename>BufferMode</typename><string>BufferMode = <seealso marker="#type-enum">enum()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>BufferMode</anno>
  <anno>Program</anno>
  <anno>Varyings</anno>
</spec>
<spec>
  <name>translated</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>translated(X, Y, Z) -&gt; ok</head>
      <guard>
        <subtype><typename>X</typename><string>X = Y = Z = float()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>translatef</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>translatef(X, Y, Z) -&gt; ok</head>
      <guard>
        <subtype><typename>X</typename><string>X = Y = Z = float()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>uniform1d</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>uniform1d(Location, X) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = integer()</string></subtype>
        <subtype><typename>X</typename><string>X = float()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>X</anno>
</spec>
<spec>
  <name>uniform1dv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>uniform1dv(Location, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = integer()</string></subtype>
        <subtype><typename>Value</typename><string>Value = [float()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>uniform1f</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>uniform1f(Location, V0) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = integer()</string></subtype>
        <subtype><typename>V0</typename><string>V0 = float()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>V0</anno>
</spec>
<spec>
  <name>uniform1fv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>uniform1fv(Location, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = integer()</string></subtype>
        <subtype><typename>Value</typename><string>Value = [float()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>uniform1i</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>uniform1i(Location, V0) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = V0 = integer()</string></subtype>
        <subtype><typename>V0</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>V0</anno>
</spec>
<spec>
  <name>uniform1iv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>uniform1iv(Location, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = integer()</string></subtype>
        <subtype><typename>Value</typename><string>Value = [integer()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>uniform1ui</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>uniform1ui(Location, V0) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = V0 = integer()</string></subtype>
        <subtype><typename>V0</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>V0</anno>
</spec>
<spec>
  <name>uniform1uiv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>uniform1uiv(Location, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = integer()</string></subtype>
        <subtype><typename>Value</typename><string>Value = [integer()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>uniform2d</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>uniform2d(Location, X, Y) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = integer()</string></subtype>
        <subtype><typename>X</typename><string>X = Y = float()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>uniform2dv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>uniform2dv(Location, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = integer()</string></subtype>
        <subtype><typename>Value</typename><string>Value = [{float(), float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>uniform2f</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>uniform2f(Location, V0, V1) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = integer()</string></subtype>
        <subtype><typename>V0</typename><string>V0 = V1 = float()</string></subtype>
        <subtype><typename>V1</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>V0</anno>
  <anno>V1</anno>
</spec>
<spec>
  <name>uniform2fv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>uniform2fv(Location, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = integer()</string></subtype>
        <subtype><typename>Value</typename><string>Value = [{float(), float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>uniform2i</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>uniform2i(Location, V0, V1) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = V0 = V1 = integer()</string></subtype>
        <subtype><typename>V0</typename><string></string></subtype>
        <subtype><typename>V1</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>V0</anno>
  <anno>V1</anno>
</spec>
<spec>
  <name>uniform2iv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>uniform2iv(Location, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = integer()</string></subtype>
        <subtype><typename>Value</typename><string>Value = [{integer(), integer()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>uniform2ui</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>uniform2ui(Location, V0, V1) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = V0 = V1 = integer()</string></subtype>
        <subtype><typename>V0</typename><string></string></subtype>
        <subtype><typename>V1</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>V0</anno>
  <anno>V1</anno>
</spec>
<spec>
  <name>uniform2uiv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>uniform2uiv(Location, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = integer()</string></subtype>
        <subtype><typename>Value</typename><string>Value = [{integer(), integer()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>uniform3d</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>uniform3d(Location, X, Y, Z) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = integer()</string></subtype>
        <subtype><typename>X</typename><string>X = Y = Z = float()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>uniform3dv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>uniform3dv(Location, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = integer()</string></subtype>
        <subtype><typename>Value</typename><string>Value = [{float(), float(), float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>uniform3f</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>uniform3f(Location, V0, V1, V2) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = integer()</string></subtype>
        <subtype><typename>V0</typename><string>V0 = V1 = V2 = float()</string></subtype>
        <subtype><typename>V1</typename><string></string></subtype>
        <subtype><typename>V2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>V0</anno>
  <anno>V1</anno>
  <anno>V2</anno>
</spec>
<spec>
  <name>uniform3fv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>uniform3fv(Location, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = integer()</string></subtype>
        <subtype><typename>Value</typename><string>Value = [{float(), float(), float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>uniform3i</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>uniform3i(Location, V0, V1, V2) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = V0 = V1 = V2 = integer()</string></subtype>
        <subtype><typename>V0</typename><string></string></subtype>
        <subtype><typename>V1</typename><string></string></subtype>
        <subtype><typename>V2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>V0</anno>
  <anno>V1</anno>
  <anno>V2</anno>
</spec>
<spec>
  <name>uniform3iv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>uniform3iv(Location, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = integer()</string></subtype>
        <subtype><typename>Value</typename><string>Value = [{integer(), integer(), integer()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>uniform3ui</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>uniform3ui(Location, V0, V1, V2) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = V0 = V1 = V2 = integer()</string></subtype>
        <subtype><typename>V0</typename><string></string></subtype>
        <subtype><typename>V1</typename><string></string></subtype>
        <subtype><typename>V2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>V0</anno>
  <anno>V1</anno>
  <anno>V2</anno>
</spec>
<spec>
  <name>uniform3uiv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>uniform3uiv(Location, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = integer()</string></subtype>
        <subtype><typename>Value</typename><string>Value = [{integer(), integer(), integer()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>uniform4d</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>uniform4d(Location, X, Y, Z, W) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = integer()</string></subtype>
        <subtype><typename>X</typename><string>X = Y = Z = W = float()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
        <subtype><typename>W</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>W</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>uniform4dv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>uniform4dv(Location, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = integer()</string></subtype>
        <subtype><typename>Value</typename><string>Value = [{float(), float(), float(), float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>uniform4f</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>uniform4f(Location, V0, V1, V2, V3) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = integer()</string></subtype>
        <subtype><typename>V0</typename><string>V0 = V1 = V2 = V3 = float()</string></subtype>
        <subtype><typename>V1</typename><string></string></subtype>
        <subtype><typename>V2</typename><string></string></subtype>
        <subtype><typename>V3</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>V0</anno>
  <anno>V1</anno>
  <anno>V2</anno>
  <anno>V3</anno>
</spec>
<spec>
  <name>uniform4fv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>uniform4fv(Location, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = integer()</string></subtype>
        <subtype><typename>Value</typename><string>Value = [{float(), float(), float(), float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>uniform4i</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>uniform4i(Location, V0, V1, V2, V3) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = V0 = V1 = V2 = V3 = integer()</string></subtype>
        <subtype><typename>V0</typename><string></string></subtype>
        <subtype><typename>V1</typename><string></string></subtype>
        <subtype><typename>V2</typename><string></string></subtype>
        <subtype><typename>V3</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>V0</anno>
  <anno>V1</anno>
  <anno>V2</anno>
  <anno>V3</anno>
</spec>
<spec>
  <name>uniform4iv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>uniform4iv(Location, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = integer()</string></subtype>
        <subtype><typename>Value</typename><string>Value = [{integer(), integer(), integer(), integer()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>uniform4ui</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>uniform4ui(Location, V0, V1, V2, V3) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = V0 = V1 = V2 = V3 = integer()</string></subtype>
        <subtype><typename>V0</typename><string></string></subtype>
        <subtype><typename>V1</typename><string></string></subtype>
        <subtype><typename>V2</typename><string></string></subtype>
        <subtype><typename>V3</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>V0</anno>
  <anno>V1</anno>
  <anno>V2</anno>
  <anno>V3</anno>
</spec>
<spec>
  <name>uniform4uiv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>uniform4uiv(Location, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = integer()</string></subtype>
        <subtype><typename>Value</typename><string>Value = [{integer(), integer(), integer(), integer()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>uniformBlockBinding</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>uniformBlockBinding(Program,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>UniformBlockIndex,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>UniformBlockBinding) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = UniformBlockIndex = UniformBlockBinding = integer()</string></subtype>
        <subtype><typename>UniformBlockIndex</typename><string></string></subtype>
        <subtype><typename>UniformBlockBinding</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Program</anno>
  <anno>UniformBlockBinding</anno>
  <anno>UniformBlockIndex</anno>
</spec>
<spec>
  <name>uniformMatrix2dv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>uniformMatrix2dv(Location, Transpose, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = integer()</string></subtype>
        <subtype><typename>Transpose</typename><string>Transpose = 0 | 1</string></subtype>
        <subtype><typename>Value</typename><string>Value = [{float(), float(), float(), float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Transpose</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>uniformMatrix2fv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>uniformMatrix2fv(Location, Transpose, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = integer()</string></subtype>
        <subtype><typename>Transpose</typename><string>Transpose = 0 | 1</string></subtype>
        <subtype><typename>Value</typename><string>Value = [{float(), float(), float(), float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Transpose</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>uniformMatrix2x3dv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>uniformMatrix2x3dv(Location, Transpose, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = integer()</string></subtype>
        <subtype><typename>Transpose</typename><string>Transpose = 0 | 1</string></subtype>
        <subtype><typename>Value</typename><string>Value = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[{float(), float(), float(), float(), float(), float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Transpose</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>uniformMatrix2x3fv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>uniformMatrix2x3fv(Location, Transpose, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = integer()</string></subtype>
        <subtype><typename>Transpose</typename><string>Transpose = 0 | 1</string></subtype>
        <subtype><typename>Value</typename><string>Value = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[{float(), float(), float(), float(), float(), float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Transpose</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>uniformMatrix2x4dv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>uniformMatrix2x4dv(Location, Transpose, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = integer()</string></subtype>
        <subtype><typename>Transpose</typename><string>Transpose = 0 | 1</string></subtype>
        <subtype><typename>Value</typename><string>Value = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[{float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Transpose</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>uniformMatrix2x4fv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>uniformMatrix2x4fv(Location, Transpose, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = integer()</string></subtype>
        <subtype><typename>Transpose</typename><string>Transpose = 0 | 1</string></subtype>
        <subtype><typename>Value</typename><string>Value = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[{float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Transpose</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>uniformMatrix3dv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>uniformMatrix3dv(Location, Transpose, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = integer()</string></subtype>
        <subtype><typename>Transpose</typename><string>Transpose = 0 | 1</string></subtype>
        <subtype><typename>Value</typename><string>Value = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[{float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Transpose</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>uniformMatrix3fv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>uniformMatrix3fv(Location, Transpose, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = integer()</string></subtype>
        <subtype><typename>Transpose</typename><string>Transpose = 0 | 1</string></subtype>
        <subtype><typename>Value</typename><string>Value = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[{float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Transpose</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>uniformMatrix3x2dv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>uniformMatrix3x2dv(Location, Transpose, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = integer()</string></subtype>
        <subtype><typename>Transpose</typename><string>Transpose = 0 | 1</string></subtype>
        <subtype><typename>Value</typename><string>Value = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[{float(), float(), float(), float(), float(), float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Transpose</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>uniformMatrix3x2fv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>uniformMatrix3x2fv(Location, Transpose, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = integer()</string></subtype>
        <subtype><typename>Transpose</typename><string>Transpose = 0 | 1</string></subtype>
        <subtype><typename>Value</typename><string>Value = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[{float(), float(), float(), float(), float(), float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Transpose</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>uniformMatrix3x4dv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>uniformMatrix3x4dv(Location, Transpose, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = integer()</string></subtype>
        <subtype><typename>Transpose</typename><string>Transpose = 0 | 1</string></subtype>
        <subtype><typename>Value</typename><string>Value = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[{float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Transpose</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>uniformMatrix3x4fv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>uniformMatrix3x4fv(Location, Transpose, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = integer()</string></subtype>
        <subtype><typename>Transpose</typename><string>Transpose = 0 | 1</string></subtype>
        <subtype><typename>Value</typename><string>Value = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[{float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Transpose</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>uniformMatrix4dv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>uniformMatrix4dv(Location, Transpose, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = integer()</string></subtype>
        <subtype><typename>Transpose</typename><string>Transpose = 0 | 1</string></subtype>
        <subtype><typename>Value</typename><string>Value = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[{float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Transpose</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>uniformMatrix4fv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>uniformMatrix4fv(Location, Transpose, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = integer()</string></subtype>
        <subtype><typename>Transpose</typename><string>Transpose = 0 | 1</string></subtype>
        <subtype><typename>Value</typename><string>Value = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[{float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Transpose</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>uniformMatrix4x2dv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>uniformMatrix4x2dv(Location, Transpose, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = integer()</string></subtype>
        <subtype><typename>Transpose</typename><string>Transpose = 0 | 1</string></subtype>
        <subtype><typename>Value</typename><string>Value = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[{float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Transpose</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>uniformMatrix4x2fv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>uniformMatrix4x2fv(Location, Transpose, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = integer()</string></subtype>
        <subtype><typename>Transpose</typename><string>Transpose = 0 | 1</string></subtype>
        <subtype><typename>Value</typename><string>Value = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[{float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Transpose</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>uniformMatrix4x3dv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>uniformMatrix4x3dv(Location, Transpose, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = integer()</string></subtype>
        <subtype><typename>Transpose</typename><string>Transpose = 0 | 1</string></subtype>
        <subtype><typename>Value</typename><string>Value = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[{float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Transpose</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>uniformMatrix4x3fv</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>uniformMatrix4x3fv(Location, Transpose, Value) -&gt; ok</head>
      <guard>
        <subtype><typename>Location</typename><string>Location = integer()</string></subtype>
        <subtype><typename>Transpose</typename><string>Transpose = 0 | 1</string></subtype>
        <subtype><typename>Value</typename><string>Value = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[{float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Location</anno>
  <anno>Transpose</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>uniformSubroutinesuiv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>uniformSubroutinesuiv(Shadertype, Indices) -&gt; ok</head>
      <guard>
        <subtype><typename>Shadertype</typename><string>Shadertype = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Indices</typename><string>Indices = [integer()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Indices</anno>
  <anno>Shadertype</anno>
</spec>
<spec>
  <name>useProgram</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>useProgram(Program) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Program</anno>
</spec>
<spec>
  <name>useProgramObjectARB</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>useProgramObjectARB(ProgramObj) -&gt; ok</head>
      <guard>
        <subtype><typename>ProgramObj</typename><string>ProgramObj = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>ProgramObj</anno>
</spec>
<spec>
  <name>useProgramStages</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>useProgramStages(Pipeline, Stages, Program) -&gt; ok</head>
      <guard>
        <subtype><typename>Pipeline</typename><string>Pipeline = Stages = Program = integer()</string></subtype>
        <subtype><typename>Stages</typename><string></string></subtype>
        <subtype><typename>Program</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Pipeline</anno>
  <anno>Program</anno>
  <anno>Stages</anno>
</spec>
<spec>
  <name>validateProgram</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>validateProgram(Program) -&gt; ok</head>
      <guard>
        <subtype><typename>Program</typename><string>Program = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Program</anno>
</spec>
<spec>
  <name>validateProgramARB</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>validateProgramARB(ProgramObj) -&gt; ok</head>
      <guard>
        <subtype><typename>ProgramObj</typename><string>ProgramObj = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>ProgramObj</anno>
</spec>
<spec>
  <name>validateProgramPipeline</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>validateProgramPipeline(Pipeline) -&gt; ok</head>
      <guard>
        <subtype><typename>Pipeline</typename><string>Pipeline = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Pipeline</anno>
</spec>
<spec>
  <name>vertex2d</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertex2d(X, Y) -&gt; ok</head>
      <guard>
        <subtype><typename>X</typename><string>X = Y = float()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>vertex2dv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>vertex2dv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: float(), Y :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>V</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>vertex2f</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertex2f(X, Y) -&gt; ok</head>
      <guard>
        <subtype><typename>X</typename><string>X = Y = float()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>vertex2fv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>vertex2fv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: float(), Y :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>V</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>vertex2i</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertex2i(X, Y) -&gt; ok</head>
      <guard>
        <subtype><typename>X</typename><string>X = Y = integer()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>vertex2iv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>vertex2iv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: integer(), Y :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>V</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>vertex2s</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertex2s(X, Y) -&gt; ok</head>
      <guard>
        <subtype><typename>X</typename><string>X = Y = integer()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>vertex2sv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>vertex2sv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: integer(), Y :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>V</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>vertex3d</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>vertex3d(X, Y, Z) -&gt; ok</head>
      <guard>
        <subtype><typename>X</typename><string>X = Y = Z = float()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>vertex3dv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>vertex3dv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: float(), Y :: float(), Z :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>V</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>vertex3f</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>vertex3f(X, Y, Z) -&gt; ok</head>
      <guard>
        <subtype><typename>X</typename><string>X = Y = Z = float()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>vertex3fv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>vertex3fv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: float(), Y :: float(), Z :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>V</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>vertex3i</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>vertex3i(X, Y, Z) -&gt; ok</head>
      <guard>
        <subtype><typename>X</typename><string>X = Y = Z = integer()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>vertex3iv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>vertex3iv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: integer(), Y :: integer(), Z :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>V</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>vertex3s</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>vertex3s(X, Y, Z) -&gt; ok</head>
      <guard>
        <subtype><typename>X</typename><string>X = Y = Z = integer()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>vertex3sv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>vertex3sv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: integer(), Y :: integer(), Z :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>V</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>vertex4d</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>vertex4d(X, Y, Z, W) -&gt; ok</head>
      <guard>
        <subtype><typename>X</typename><string>X = Y = Z = W = float()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
        <subtype><typename>W</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>W</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>vertex4dv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>vertex4dv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: float(), Y :: float(), Z :: float(), W :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>V</anno>
  <anno>W</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>vertex4f</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>vertex4f(X, Y, Z, W) -&gt; ok</head>
      <guard>
        <subtype><typename>X</typename><string>X = Y = Z = W = float()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
        <subtype><typename>W</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>W</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>vertex4fv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>vertex4fv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: float(), Y :: float(), Z :: float(), W :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>V</anno>
  <anno>W</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>vertex4i</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>vertex4i(X, Y, Z, W) -&gt; ok</head>
      <guard>
        <subtype><typename>X</typename><string>X = Y = Z = W = integer()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
        <subtype><typename>W</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>W</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>vertex4iv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>vertex4iv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{X :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Y :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Z :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>W :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>V</anno>
  <anno>W</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>vertex4s</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>vertex4s(X, Y, Z, W) -&gt; ok</head>
      <guard>
        <subtype><typename>X</typename><string>X = Y = Z = W = integer()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
        <subtype><typename>W</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>W</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>vertex4sv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>vertex4sv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{X :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Y :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Z :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>W :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>V</anno>
  <anno>W</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>vertexAttrib1d</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttrib1d(Index, X) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>X</typename><string>X = float()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>X</anno>
</spec>
<spec>
  <name>vertexAttrib1dv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttrib1dv(Index :: integer(), V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>V</anno>
  <anno>X</anno>
</spec>
<spec>
  <name>vertexAttrib1f</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttrib1f(Index, X) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>X</typename><string>X = float()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>X</anno>
</spec>
<spec>
  <name>vertexAttrib1fv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttrib1fv(Index :: integer(), V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>V</anno>
  <anno>X</anno>
</spec>
<spec>
  <name>vertexAttrib1s</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttrib1s(Index, X) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = X = integer()</string></subtype>
        <subtype><typename>X</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>X</anno>
</spec>
<spec>
  <name>vertexAttrib1sv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttrib1sv(Index :: integer(), V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>V</anno>
  <anno>X</anno>
</spec>
<spec>
  <name>vertexAttrib2d</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>vertexAttrib2d(Index, X, Y) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>X</typename><string>X = Y = float()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>vertexAttrib2dv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttrib2dv(Index :: integer(), V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: float(), Y :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>V</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>vertexAttrib2f</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>vertexAttrib2f(Index, X, Y) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>X</typename><string>X = Y = float()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>vertexAttrib2fv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttrib2fv(Index :: integer(), V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: float(), Y :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>V</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>vertexAttrib2s</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>vertexAttrib2s(Index, X, Y) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = X = Y = integer()</string></subtype>
        <subtype><typename>X</typename><string></string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>vertexAttrib2sv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttrib2sv(Index :: integer(), V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: integer(), Y :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>V</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>vertexAttrib3d</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>vertexAttrib3d(Index, X, Y, Z) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>X</typename><string>X = Y = Z = float()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>vertexAttrib3dv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttrib3dv(Index :: integer(), V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: float(), Y :: float(), Z :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>V</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>vertexAttrib3f</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>vertexAttrib3f(Index, X, Y, Z) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>X</typename><string>X = Y = Z = float()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>vertexAttrib3fv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttrib3fv(Index :: integer(), V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: float(), Y :: float(), Z :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>V</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>vertexAttrib3s</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>vertexAttrib3s(Index, X, Y, Z) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = X = Y = Z = integer()</string></subtype>
        <subtype><typename>X</typename><string></string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>vertexAttrib3sv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttrib3sv(Index :: integer(), V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: integer(), Y :: integer(), Z :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>V</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>vertexAttrib4Nbv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttrib4Nbv(Index, V) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>V</typename><string>V = {integer(), integer(), integer(), integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>vertexAttrib4Niv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttrib4Niv(Index, V) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>V</typename><string>V = {integer(), integer(), integer(), integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>vertexAttrib4Nsv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttrib4Nsv(Index, V) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>V</typename><string>V = {integer(), integer(), integer(), integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>vertexAttrib4Nub</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>vertexAttrib4Nub(Index, X, Y, Z, W) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = X = Y = Z = W = integer()</string></subtype>
        <subtype><typename>X</typename><string></string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
        <subtype><typename>W</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>W</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>vertexAttrib4Nubv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttrib4Nubv(Index :: integer(), V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{X :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Y :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Z :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>W :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>V</anno>
  <anno>W</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>vertexAttrib4Nuiv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttrib4Nuiv(Index, V) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>V</typename><string>V = {integer(), integer(), integer(), integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>vertexAttrib4Nusv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttrib4Nusv(Index, V) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>V</typename><string>V = {integer(), integer(), integer(), integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>vertexAttrib4bv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttrib4bv(Index, V) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>V</typename><string>V = {integer(), integer(), integer(), integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>vertexAttrib4d</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>vertexAttrib4d(Index, X, Y, Z, W) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>X</typename><string>X = Y = Z = W = float()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
        <subtype><typename>W</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>W</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>vertexAttrib4dv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttrib4dv(Index :: integer(), V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: float(), Y :: float(), Z :: float(), W :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>V</anno>
  <anno>W</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>vertexAttrib4f</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>vertexAttrib4f(Index, X, Y, Z, W) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>X</typename><string>X = Y = Z = W = float()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
        <subtype><typename>W</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>W</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>vertexAttrib4fv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttrib4fv(Index :: integer(), V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: float(), Y :: float(), Z :: float(), W :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>V</anno>
  <anno>W</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>vertexAttrib4iv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttrib4iv(Index, V) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>V</typename><string>V = {integer(), integer(), integer(), integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>vertexAttrib4s</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>vertexAttrib4s(Index, X, Y, Z, W) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = X = Y = Z = W = integer()</string></subtype>
        <subtype><typename>X</typename><string></string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
        <subtype><typename>W</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>W</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>vertexAttrib4sv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttrib4sv(Index :: integer(), V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{X :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Y :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Z :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>W :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>V</anno>
  <anno>W</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>vertexAttrib4ubv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttrib4ubv(Index, V) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>V</typename><string>V = {integer(), integer(), integer(), integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>vertexAttrib4uiv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttrib4uiv(Index, V) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>V</typename><string>V = {integer(), integer(), integer(), integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>vertexAttrib4usv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttrib4usv(Index, V) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>V</typename><string>V = {integer(), integer(), integer(), integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>vertexAttribDivisor</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttribDivisor(Index, Divisor) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = Divisor = integer()</string></subtype>
        <subtype><typename>Divisor</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Divisor</anno>
  <anno>Index</anno>
</spec>
<spec>
  <name>vertexAttribI1i</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttribI1i(Index, X) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = X = integer()</string></subtype>
        <subtype><typename>X</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>X</anno>
</spec>
<spec>
  <name>vertexAttribI1iv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttribI1iv(Index :: integer(), V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>V</anno>
  <anno>X</anno>
</spec>
<spec>
  <name>vertexAttribI1ui</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttribI1ui(Index, X) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = X = integer()</string></subtype>
        <subtype><typename>X</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>X</anno>
</spec>
<spec>
  <name>vertexAttribI1uiv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttribI1uiv(Index :: integer(), V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>V</anno>
  <anno>X</anno>
</spec>
<spec>
  <name>vertexAttribI2i</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>vertexAttribI2i(Index, X, Y) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = X = Y = integer()</string></subtype>
        <subtype><typename>X</typename><string></string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>vertexAttribI2iv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttribI2iv(Index :: integer(), V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: integer(), Y :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>V</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>vertexAttribI2ui</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>vertexAttribI2ui(Index, X, Y) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = X = Y = integer()</string></subtype>
        <subtype><typename>X</typename><string></string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>vertexAttribI2uiv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttribI2uiv(Index :: integer(), V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: integer(), Y :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>V</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>vertexAttribI3i</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>vertexAttribI3i(Index, X, Y, Z) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = X = Y = Z = integer()</string></subtype>
        <subtype><typename>X</typename><string></string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>vertexAttribI3iv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttribI3iv(Index :: integer(), V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: integer(), Y :: integer(), Z :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>V</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>vertexAttribI3ui</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>vertexAttribI3ui(Index, X, Y, Z) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = X = Y = Z = integer()</string></subtype>
        <subtype><typename>X</typename><string></string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>vertexAttribI3uiv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttribI3uiv(Index :: integer(), V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: integer(), Y :: integer(), Z :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>V</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>vertexAttribI4bv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttribI4bv(Index, V) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>V</typename><string>V = {integer(), integer(), integer(), integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>vertexAttribI4i</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>vertexAttribI4i(Index, X, Y, Z, W) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = X = Y = Z = W = integer()</string></subtype>
        <subtype><typename>X</typename><string></string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
        <subtype><typename>W</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>W</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>vertexAttribI4iv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttribI4iv(Index :: integer(), V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{X :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Y :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Z :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>W :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>V</anno>
  <anno>W</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>vertexAttribI4sv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttribI4sv(Index, V) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>V</typename><string>V = {integer(), integer(), integer(), integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>vertexAttribI4ubv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttribI4ubv(Index, V) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>V</typename><string>V = {integer(), integer(), integer(), integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>vertexAttribI4ui</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>vertexAttribI4ui(Index, X, Y, Z, W) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = X = Y = Z = W = integer()</string></subtype>
        <subtype><typename>X</typename><string></string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
        <subtype><typename>W</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>W</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>vertexAttribI4uiv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttribI4uiv(Index :: integer(), V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{X :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Y :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Z :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>W :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>V</anno>
  <anno>W</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>vertexAttribI4usv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttribI4usv(Index, V) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>V</typename><string>V = {integer(), integer(), integer(), integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>vertexAttribIPointer</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>vertexAttribIPointer(Index, Size, Type, Stride, Pointer) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = Size = integer()</string></subtype>
        <subtype><typename>Size</typename><string/></subtype>
        <subtype><typename>Type</typename><string>Type = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Stride</typename><string>Stride = integer()</string></subtype>
        <subtype><typename>Pointer</typename><string>Pointer = <seealso marker="#type-offset">offset()</seealso> | <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>Pointer</anno>
  <anno>Size</anno>
  <anno>Stride</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>vertexAttribL1d</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttribL1d(Index, X) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>X</typename><string>X = float()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>X</anno>
</spec>
<spec>
  <name>vertexAttribL1dv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttribL1dv(Index :: integer(), V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>V</anno>
  <anno>X</anno>
</spec>
<spec>
  <name>vertexAttribL2d</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>vertexAttribL2d(Index, X, Y) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>X</typename><string>X = Y = float()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>vertexAttribL2dv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttribL2dv(Index :: integer(), V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: float(), Y :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>V</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>vertexAttribL3d</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>vertexAttribL3d(Index, X, Y, Z) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>X</typename><string>X = Y = Z = float()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>vertexAttribL3dv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttribL3dv(Index :: integer(), V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: float(), Y :: float(), Z :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>V</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>vertexAttribL4d</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>vertexAttribL4d(Index, X, Y, Z, W) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>X</typename><string>X = Y = Z = W = float()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
        <subtype><typename>W</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>W</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>vertexAttribL4dv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>vertexAttribL4dv(Index :: integer(), V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: float(), Y :: float(), Z :: float(), W :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>V</anno>
  <anno>W</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>vertexAttribLPointer</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>vertexAttribLPointer(Index, Size, Type, Stride, Pointer) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = Size = integer()</string></subtype>
        <subtype><typename>Size</typename><string/></subtype>
        <subtype><typename>Type</typename><string>Type = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Stride</typename><string>Stride = integer()</string></subtype>
        <subtype><typename>Pointer</typename><string>Pointer = <seealso marker="#type-offset">offset()</seealso> | <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>Pointer</anno>
  <anno>Size</anno>
  <anno>Stride</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>vertexAttribPointer</name>
  <arity>6</arity>
  <contract>
    <clause>
      <head>vertexAttribPointer(Index,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Size,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Type,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Normalized,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Stride,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Pointer) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = Size = integer()</string></subtype>
        <subtype><typename>Size</typename><string/></subtype>
        <subtype><typename>Type</typename><string>Type = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Normalized</typename><string>Normalized = 0 | 1</string></subtype>
        <subtype><typename>Stride</typename><string>Stride = integer()</string></subtype>
        <subtype><typename>Pointer</typename><string>Pointer = <seealso marker="#type-offset">offset()</seealso> | <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>Normalized</anno>
  <anno>Pointer</anno>
  <anno>Size</anno>
  <anno>Stride</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>vertexBlendARB</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>vertexBlendARB(Count) -&gt; ok</head>
      <guard>
        <subtype><typename>Count</typename><string>Count = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Count</anno>
</spec>
<spec>
  <name>vertexPointer</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>vertexPointer(Size, Type, Stride, Ptr) -&gt; ok</head>
      <guard>
        <subtype><typename>Size</typename><string>Size = integer()</string></subtype>
        <subtype><typename>Type</typename><string>Type = <seealso marker="#type-enum">enum()</seealso></string></subtype>
        <subtype><typename>Stride</typename><string>Stride = integer()</string></subtype>
        <subtype><typename>Ptr</typename><string>Ptr = <seealso marker="#type-offset">offset()</seealso> | <seealso marker="#type-mem">mem()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Ptr</anno>
  <anno>Size</anno>
  <anno>Stride</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>viewport</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>viewport(X, Y, Width, Height) -&gt; ok</head>
      <guard>
        <subtype><typename>X</typename><string>X = Y = Width = Height = integer()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Width</typename><string></string></subtype>
        <subtype><typename>Height</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Height</anno>
  <anno>Width</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>viewportArrayv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>viewportArrayv(First, V) -&gt; ok</head>
      <guard>
        <subtype><typename>First</typename><string>First = integer()</string></subtype>
        <subtype><typename>V</typename><string>V = [{float(), float(), float(), float()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>First</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>viewportIndexedf</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>viewportIndexedf(Index, X, Y, W, H) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>X</typename><string>X = Y = W = H = float()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>W</typename><string></string></subtype>
        <subtype><typename>H</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>H</anno>
  <anno>Index</anno>
  <anno>W</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>viewportIndexedfv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>viewportIndexedfv(Index, V) -&gt; ok</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = integer()</string></subtype>
        <subtype><typename>V</typename><string>V = {float(), float(), float(), float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>waitSync</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>waitSync(Sync, Flags, Timeout) -&gt; ok</head>
      <guard>
        <subtype><typename>Sync</typename><string>Sync = Flags = Timeout = integer()</string></subtype>
        <subtype><typename>Flags</typename><string></string></subtype>
        <subtype><typename>Timeout</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flags</anno>
  <anno>Sync</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>weightbvARB</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>weightbvARB(Weights) -&gt; ok</head>
      <guard>
        <subtype><typename>Weights</typename><string>Weights = [integer()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Weights</anno>
</spec>
<spec>
  <name>weightdvARB</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>weightdvARB(Weights) -&gt; ok</head>
      <guard>
        <subtype><typename>Weights</typename><string>Weights = [float()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Weights</anno>
</spec>
<spec>
  <name>weightfvARB</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>weightfvARB(Weights) -&gt; ok</head>
      <guard>
        <subtype><typename>Weights</typename><string>Weights = [float()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Weights</anno>
</spec>
<spec>
  <name>weightivARB</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>weightivARB(Weights) -&gt; ok</head>
      <guard>
        <subtype><typename>Weights</typename><string>Weights = [integer()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Weights</anno>
</spec>
<spec>
  <name>weightsvARB</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>weightsvARB(Weights) -&gt; ok</head>
      <guard>
        <subtype><typename>Weights</typename><string>Weights = [integer()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Weights</anno>
</spec>
<spec>
  <name>weightubvARB</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>weightubvARB(Weights) -&gt; ok</head>
      <guard>
        <subtype><typename>Weights</typename><string>Weights = [integer()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Weights</anno>
</spec>
<spec>
  <name>weightuivARB</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>weightuivARB(Weights) -&gt; ok</head>
      <guard>
        <subtype><typename>Weights</typename><string>Weights = [integer()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Weights</anno>
</spec>
<spec>
  <name>weightusvARB</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>weightusvARB(Weights) -&gt; ok</head>
      <guard>
        <subtype><typename>Weights</typename><string>Weights = [integer()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Weights</anno>
</spec>
<spec>
  <name>windowPos2d</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>windowPos2d(X, Y) -&gt; ok</head>
      <guard>
        <subtype><typename>X</typename><string>X = Y = float()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>windowPos2dv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>windowPos2dv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: float(), Y :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>V</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>windowPos2f</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>windowPos2f(X, Y) -&gt; ok</head>
      <guard>
        <subtype><typename>X</typename><string>X = Y = float()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>windowPos2fv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>windowPos2fv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: float(), Y :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>V</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>windowPos2i</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>windowPos2i(X, Y) -&gt; ok</head>
      <guard>
        <subtype><typename>X</typename><string>X = Y = integer()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>windowPos2iv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>windowPos2iv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: integer(), Y :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>V</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>windowPos2s</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>windowPos2s(X, Y) -&gt; ok</head>
      <guard>
        <subtype><typename>X</typename><string>X = Y = integer()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>windowPos2sv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>windowPos2sv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: integer(), Y :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>V</anno>
  <anno>X</anno>
  <anno>Y</anno>
</spec>
<spec>
  <name>windowPos3d</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>windowPos3d(X, Y, Z) -&gt; ok</head>
      <guard>
        <subtype><typename>X</typename><string>X = Y = Z = float()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>windowPos3dv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>windowPos3dv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: float(), Y :: float(), Z :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>V</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>windowPos3f</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>windowPos3f(X, Y, Z) -&gt; ok</head>
      <guard>
        <subtype><typename>X</typename><string>X = Y = Z = float()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>windowPos3fv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>windowPos3fv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: float(), Y :: float(), Z :: float()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>V</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>windowPos3i</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>windowPos3i(X, Y, Z) -&gt; ok</head>
      <guard>
        <subtype><typename>X</typename><string>X = Y = Z = integer()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>windowPos3iv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>windowPos3iv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: integer(), Y :: integer(), Z :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>V</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>windowPos3s</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>windowPos3s(X, Y, Z) -&gt; ok</head>
      <guard>
        <subtype><typename>X</typename><string>X = Y = Z = integer()</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>windowPos3sv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>windowPos3sv(V) -&gt; ok</head>
      <guard>
        <subtype><typename>V</typename><string>V = {X :: integer(), Y :: integer(), Z :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>V</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<timestamp>Generated by EDoc, Jul 12 2017, 20:31:02.</timestamp>
</module>