<module name="auth">
<type>
  <name>calls</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-calls">calls()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>echo |<br/><nbsp/><nbsp/><nbsp/><nbsp/>sync_cookie |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{get_cookie, node()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{set_cookie, node(), term()}</typehead></typedecl>
</type>
<type>
  <name>cookie</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-cookie">cookie()</marker> = atom()</typehead></typedecl>
</type>
<type>
  <name>state</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-state">state()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#state{our_cookie = <seealso marker="#type-cookie">cookie()</seealso>, other_cookies = <seealso marker="ets#type-tab">ets:tab()</seealso>}</typehead></typedecl>
</type>
<spec>
  <name>code_change</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>code_change(OldVsn :: term(), State :: <seealso marker="#type-state">state()</seealso>, Extra :: term()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, <seealso marker="#type-state">state()</seealso>}</head></clause>
  </contract>
  <anno>Extra</anno>
  <anno>OldVsn</anno>
  <anno>State</anno>
</spec>
<spec>
  <name>cookie</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>cookie() -&gt; Cookie</head>
      <guard>
        <subtype><typename>Cookie</typename><string>Cookie = <seealso marker="#type-cookie">cookie()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Cookie</anno>
</spec>
<spec>
  <name>cookie</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>cookie(TheCookie) -&gt; true</head>
      <guard>
        <subtype><typename>TheCookie</typename><string>TheCookie = Cookie | [Cookie]</string></subtype>
        <subtype><typename>Cookie</typename><string>Cookie = <seealso marker="#type-cookie">cookie()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Cookie</anno>
  <anno>TheCookie</anno>
</spec>
<spec>
  <name>get_cookie</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>get_cookie() -&gt; nocookie | <seealso marker="#type-cookie">cookie()</seealso></head></clause>
  </contract>
</spec>
<spec>
  <name>get_cookie</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_cookie(Node :: node()) -&gt; nocookie | <seealso marker="#type-cookie">cookie()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>handle_call</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>handle_call(X1 :: <seealso marker="#type-calls">calls()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>From :: {pid(), term()},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>State :: <seealso marker="#type-state">state()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{reply,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>hello | true | nocookie | <seealso marker="#type-cookie">cookie()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-state">state()</seealso>}</head></clause>
  </contract>
  <anno>From</anno>
  <anno>State</anno>
  <anno>X1</anno>
</spec>
<spec>
  <name>handle_cast</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>handle_cast(X1 :: {print, string(), [term()]}, O :: <seealso marker="#type-state">state()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{noreply, <seealso marker="#type-state">state()</seealso>}</head></clause>
  </contract>
  <anno>O</anno>
  <anno>X1</anno>
</spec>
<spec>
  <name>handle_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>handle_info(X1 :: term(), O :: <seealso marker="#type-state">state()</seealso>) -&gt; {noreply, <seealso marker="#type-state">state()</seealso>}</head></clause>
  </contract>
  <anno>O</anno>
  <anno>X1</anno>
</spec>
<spec>
  <name>init</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>init(X1 :: []) -&gt; {ok, <seealso marker="#type-state">state()</seealso>}</head></clause>
  </contract>
  <anno>X1</anno>
</spec>
<spec>
  <name>is_auth</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_auth(Node) -&gt; yes | no</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = node()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>node_cookie</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>node_cookie(Cookies :: [node() | <seealso marker="#type-cookie">cookie()</seealso>, ...]) -&gt; yes | no</head></clause>
  </contract>
  <anno>Cookies</anno>
</spec>
<spec>
  <name>node_cookie</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>node_cookie(Node, Cookie) -&gt; yes | no</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = node()</string></subtype>
        <subtype><typename>Cookie</typename><string>Cookie = <seealso marker="#type-cookie">cookie()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Cookie</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>print</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>print(Node :: node(), Format :: string(), Args :: [term()]) -&gt; ok</head></clause>
  </contract>
  <anno>Args</anno>
  <anno>Format</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>set_cookie</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>set_cookie(Cookie :: <seealso marker="#type-cookie">cookie()</seealso>) -&gt; true</head></clause>
  </contract>
  <anno>Cookie</anno>
</spec>
<spec>
  <name>set_cookie</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>set_cookie(Node :: node(), Cookie :: <seealso marker="#type-cookie">cookie()</seealso>) -&gt; true</head></clause>
  </contract>
  <anno>Cookie</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>start_link</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>start_link() -&gt; {ok, pid()} | {error, term()} | ignore</head></clause>
  </contract>
</spec>
<spec>
  <name>sync_cookie</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>sync_cookie() -&gt; any()</head></clause>
  </contract>
</spec>
<spec>
  <name>terminate</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>terminate(Reason :: term(), State :: <seealso marker="#type-state">state()</seealso>) -&gt; ok</head></clause>
  </contract>
  <anno>Reason</anno>
  <anno>State</anno>
</spec>
<timestamp>Generated by EDoc, Jul 12 2017, 20:27:38.</timestamp>
</module>