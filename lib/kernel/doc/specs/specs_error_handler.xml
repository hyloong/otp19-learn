<module name="error_handler">
<spec>
  <name>breakpoint</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>breakpoint(Module :: atom(), Function :: atom(), Args :: [term()]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>any()</head></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
</spec>
<spec>
  <name>raise_undef_exception</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>raise_undef_exception(Module, Function, Args) -&gt; no_return()</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = Function = atom()</string></subtype>
        <subtype><typename>Function</typename><string/></subtype>
        <subtype><typename>Args</typename><string>Args = list()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
</spec>
<spec>
  <name>stub_function</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>stub_function(Mod :: atom(), Func :: atom(), Args :: [term()]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>no_return()</head></clause>
  </contract>
  <anno>Args</anno>
  <anno>Func</anno>
  <anno>Mod</anno>
</spec>
<spec>
  <name>undefined_function</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>undefined_function(Module, Function, Args) -&gt; any()</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = Function = atom()</string></subtype>
        <subtype><typename>Function</typename><string/></subtype>
        <subtype><typename>Args</typename><string>Args = list()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
</spec>
<spec>
  <name>undefined_lambda</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>undefined_lambda(Module, Fun, Args) -&gt; term()</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = atom()</string></subtype>
        <subtype><typename>Fun</typename><string>Fun = function()</string></subtype>
        <subtype><typename>Args</typename><string>Args = list()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Fun</anno>
  <anno>Module</anno>
</spec>
<timestamp>Generated by EDoc, Jul 12 2017, 20:27:40.</timestamp>
</module>