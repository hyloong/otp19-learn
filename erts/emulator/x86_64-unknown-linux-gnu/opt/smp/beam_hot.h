/*
 *  Warning: Do not edit this file.
 *  Auto-generated by 'beam_makeops'.
 */

OpCase(allocate_heap_tIt):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(2, next);
    tmp_packed1 = Arg(0);
    AllocateHeap(tb(tmp_packed1&BEAM_WIDE_MASK), Ib((tmp_packed1>>BEAM_WIDE_SHIFT)), Arg(1));
    NextPF(2, next);
    }

OpCase(allocate_heap_zero_tIt):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(2, next);
    tmp_packed1 = Arg(0);
    AllocateHeapZero(tb(tmp_packed1&BEAM_WIDE_MASK), Ib((tmp_packed1>>BEAM_WIDE_SHIFT)), Arg(1));
    NextPF(2, next);
    }

OpCase(allocate_init_tIy):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(2, next);
    tmp_packed1 = Arg(0);
    AllocateInit(tb(tmp_packed1&BEAM_WIDE_MASK), Ib((tmp_packed1>>BEAM_WIDE_SHIFT)), yb(Arg(1)));
    NextPF(2, next);
    }

OpCase(allocate_tt):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    Allocate(tb(tmp_packed1&BEAM_LOOSE_MASK), tb((tmp_packed1>>BEAM_LOOSE_SHIFT)));
    NextPF(1, next);
    }

OpCase(allocate_zero_tt):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    AllocateZero(tb(tmp_packed1&BEAM_LOOSE_MASK), tb((tmp_packed1>>BEAM_LOOSE_SHIFT)));
    NextPF(1, next);
    }

OpCase(deallocate_return_Q):
    { 
    DeallocateReturn(Arg(0));
    }

OpCase(get_list_rry):
    { 
    BeamInstr* next;
    PreFetch(1, next);
    GetList(r(0), r(0), yb(Arg(0)));
    NextPF(1, next);
    }

OpCase(get_list_rxr):
    { 
    BeamInstr* next;
    PreFetch(1, next);
    GetList(r(0), xb(Arg(0)), r(0));
    NextPF(1, next);
    }

OpCase(get_list_rxx):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    GetList(r(0), xb(tmp_packed1&BEAM_LOOSE_MASK), xb((tmp_packed1>>BEAM_LOOSE_SHIFT)));
    NextPF(1, next);
    }

OpCase(get_list_rxy):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    GetList(r(0), xb(tmp_packed1&BEAM_LOOSE_MASK), yb((tmp_packed1>>BEAM_LOOSE_SHIFT)));
    NextPF(1, next);
    }

OpCase(get_list_ryr):
    { 
    BeamInstr* next;
    PreFetch(1, next);
    GetList(r(0), yb(Arg(0)), r(0));
    NextPF(1, next);
    }

OpCase(get_list_xrx):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    GetList(xb(tmp_packed1&BEAM_LOOSE_MASK), r(0), xb((tmp_packed1>>BEAM_LOOSE_SHIFT)));
    NextPF(1, next);
    }

OpCase(get_list_xxx):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    GetList(xb(tmp_packed1&BEAM_TIGHT_MASK), xb((tmp_packed1>>BEAM_TIGHT_SHIFT)&BEAM_TIGHT_MASK), xb((tmp_packed1>>(2*BEAM_TIGHT_SHIFT))));
    NextPF(1, next);
    }

OpCase(get_list_xxy):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    GetList(xb(tmp_packed1&BEAM_TIGHT_MASK), xb((tmp_packed1>>BEAM_TIGHT_SHIFT)&BEAM_TIGHT_MASK), yb((tmp_packed1>>(2*BEAM_TIGHT_SHIFT))));
    NextPF(1, next);
    }

OpCase(get_list_xyx):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    GetList(xb(tmp_packed1&BEAM_TIGHT_MASK), yb((tmp_packed1>>BEAM_TIGHT_SHIFT)&BEAM_TIGHT_MASK), xb((tmp_packed1>>(2*BEAM_TIGHT_SHIFT))));
    NextPF(1, next);
    }

OpCase(get_list_xyy):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    GetList(xb(tmp_packed1&BEAM_TIGHT_MASK), yb((tmp_packed1>>BEAM_TIGHT_SHIFT)&BEAM_TIGHT_MASK), yb((tmp_packed1>>(2*BEAM_TIGHT_SHIFT))));
    NextPF(1, next);
    }

OpCase(get_list_yxx):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    GetList(yb(tmp_packed1&BEAM_TIGHT_MASK), xb((tmp_packed1>>BEAM_TIGHT_SHIFT)&BEAM_TIGHT_MASK), xb((tmp_packed1>>(2*BEAM_TIGHT_SHIFT))));
    NextPF(1, next);
    }

OpCase(get_list_yxy):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    GetList(yb(tmp_packed1&BEAM_TIGHT_MASK), xb((tmp_packed1>>BEAM_TIGHT_SHIFT)&BEAM_TIGHT_MASK), yb((tmp_packed1>>(2*BEAM_TIGHT_SHIFT))));
    NextPF(1, next);
    }

OpCase(get_list_yyx):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    GetList(yb(tmp_packed1&BEAM_TIGHT_MASK), yb((tmp_packed1>>BEAM_TIGHT_SHIFT)&BEAM_TIGHT_MASK), xb((tmp_packed1>>(2*BEAM_TIGHT_SHIFT))));
    NextPF(1, next);
    }

OpCase(get_list_yyy):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    GetList(yb(tmp_packed1&BEAM_TIGHT_MASK), yb((tmp_packed1>>BEAM_TIGHT_SHIFT)&BEAM_TIGHT_MASK), yb((tmp_packed1>>(2*BEAM_TIGHT_SHIFT))));
    NextPF(1, next);
    }

OpCase(i_get_map_element_fxxx):
    { 
    GetMapElement(xb(Arg(1)), xb(Arg(2)), xb(Arg(3)), ClauseFail());
    Next(4);
    }

OpCase(i_get_map_element_fxxy):
    { 
    GetMapElement(xb(Arg(1)), xb(Arg(2)), yb(Arg(3)), ClauseFail());
    Next(4);
    }

OpCase(i_get_map_element_fyxx):
    { 
    GetMapElement(yb(Arg(1)), xb(Arg(2)), xb(Arg(3)), ClauseFail());
    Next(4);
    }

OpCase(i_get_map_element_fyxy):
    { 
    GetMapElement(yb(Arg(1)), xb(Arg(2)), yb(Arg(3)), ClauseFail());
    Next(4);
    }

OpCase(i_get_map_element_hash_fxcIx):
    { 
    GetMapElementHash(xb(Arg(1)), Arg(2), Arg(3), xb(Arg(4)), ClauseFail());
    Next(5);
    }

OpCase(i_get_map_element_hash_fxcIy):
    { 
    GetMapElementHash(xb(Arg(1)), Arg(2), Arg(3), yb(Arg(4)), ClauseFail());
    Next(5);
    }

OpCase(i_get_map_element_hash_fycIx):
    { 
    GetMapElementHash(yb(Arg(1)), Arg(2), Arg(3), xb(Arg(4)), ClauseFail());
    Next(5);
    }

OpCase(i_get_map_element_hash_fycIy):
    { 
    GetMapElementHash(yb(Arg(1)), Arg(2), Arg(3), yb(Arg(4)), ClauseFail());
    Next(5);
    }

OpCase(i_get_tuple_element2_xPx):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(2, next);
    tmp_packed1 = Arg(0);
    GetTupleElement2(xb(tmp_packed1&BEAM_LOOSE_MASK), Arg(1), xb((tmp_packed1>>BEAM_LOOSE_SHIFT)));
    NextPF(2, next);
    }

OpCase(i_get_tuple_element2y_xPyy):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(2, next);
    tmp_packed1 = Arg(0);
    GetTupleElement2Y(xb(tmp_packed1&BEAM_TIGHT_MASK), Arg(1), yb((tmp_packed1>>BEAM_TIGHT_SHIFT)&BEAM_TIGHT_MASK), yb((tmp_packed1>>(2*BEAM_TIGHT_SHIFT))));
    NextPF(2, next);
    }

OpCase(i_get_tuple_element3_xPx):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(2, next);
    tmp_packed1 = Arg(0);
    GetTupleElement3(xb(tmp_packed1&BEAM_LOOSE_MASK), Arg(1), xb((tmp_packed1>>BEAM_LOOSE_SHIFT)));
    NextPF(2, next);
    }

OpCase(i_get_tuple_element_xPx):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(2, next);
    tmp_packed1 = Arg(0);
    GetTupleElement(xb(tmp_packed1&BEAM_LOOSE_MASK), Arg(1), xb((tmp_packed1>>BEAM_LOOSE_SHIFT)));
    NextPF(2, next);
    }

OpCase(i_get_tuple_element_yPx):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(2, next);
    tmp_packed1 = Arg(0);
    GetTupleElement(yb(tmp_packed1&BEAM_LOOSE_MASK), Arg(1), xb((tmp_packed1>>BEAM_LOOSE_SHIFT)));
    NextPF(2, next);
    }

OpCase(i_is_eq_exact_immed_frc):
    { 
    EqualImmed(r(0), Arg(1), ClauseFail());
    Next(2);
    }

OpCase(i_is_eq_exact_immed_fxc):
    { 
    EqualImmed(xb(Arg(1)), Arg(2), ClauseFail());
    Next(3);
    }

OpCase(i_is_eq_exact_immed_fyc):
    { 
    EqualImmed(yb(Arg(1)), Arg(2), ClauseFail());
    Next(3);
    }

OpCase(i_is_ne_exact_immed_fxc):
    { 
    NotEqualImmed(xb(Arg(1)), Arg(2), ClauseFail());
    Next(3);
    }

OpCase(i_is_ne_exact_immed_fyc):
    { 
    NotEqualImmed(yb(Arg(1)), Arg(2), ClauseFail());
    Next(3);
    }

OpCase(i_put_tuple_xI):
    { BeamInstr tmp_packed1;
    tmp_packed1 = Arg(0);
    PutTuple(xb(tmp_packed1&BEAM_WIDE_MASK), Ib((tmp_packed1>>BEAM_WIDE_SHIFT)));
    I += 1 + 1;
    goto do_put_tuple;
    }

OpCase(i_put_tuple_yI):
    { BeamInstr tmp_packed1;
    tmp_packed1 = Arg(0);
    PutTuple(yb(tmp_packed1&BEAM_WIDE_MASK), Ib((tmp_packed1>>BEAM_WIDE_SHIFT)));
    I += 1 + 1;
    goto do_put_tuple;
    }

OpCase(init2_yy):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    Init2(yb(tmp_packed1&BEAM_LOOSE_MASK), yb((tmp_packed1>>BEAM_LOOSE_SHIFT)));
    NextPF(1, next);
    }

OpCase(init3_yyy):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    Init3(yb(tmp_packed1&BEAM_TIGHT_MASK), yb((tmp_packed1>>BEAM_TIGHT_SHIFT)&BEAM_TIGHT_MASK), yb((tmp_packed1>>(2*BEAM_TIGHT_SHIFT))));
    NextPF(1, next);
    }

OpCase(is_atom_fx):
    { 
    IsAtom(xb(Arg(1)), ClauseFail());
    Next(2);
    }

OpCase(is_binary_fx):
    { 
    IsBinary(xb(Arg(1)), ClauseFail());
    Next(2);
    }

OpCase(is_bitstring_fx):
    { 
    IsBitstring(xb(Arg(1)), ClauseFail());
    Next(2);
    }

OpCase(is_eq_exact_fss):
    { Eterm targ1; Eterm targ2; 
    GetR(1, targ1);
    GetR(2, targ2);
    EqualExact(targ1, targ2, ClauseFail());
    Next(3);
    }

OpCase(is_eq_exact_fxx):
    { BeamInstr tmp_packed1;
    tmp_packed1 = Arg(1);
    EqualExact(xb(tmp_packed1&BEAM_LOOSE_MASK), xb((tmp_packed1>>BEAM_LOOSE_SHIFT)), ClauseFail());
    Next(2);
    }

OpCase(is_eq_exact_fxy):
    { BeamInstr tmp_packed1;
    tmp_packed1 = Arg(1);
    EqualExact(xb(tmp_packed1&BEAM_LOOSE_MASK), yb((tmp_packed1>>BEAM_LOOSE_SHIFT)), ClauseFail());
    Next(2);
    }

OpCase(is_eq_fss):
    { Eterm targ1; Eterm targ2; 
    GetR(1, targ1);
    GetR(2, targ2);
    Equal(targ1, targ2, ClauseFail());
    Next(3);
    }

OpCase(is_float_fx):
    { 
    IsFloat(xb(Arg(1)), ClauseFail());
    Next(2);
    }

OpCase(is_function2_fss):
    { Eterm targ1; Eterm targ2; 
    GetR(1, targ1);
    GetR(2, targ2);
    IsFunction2(targ1, targ2, ClauseFail());
    Next(3);
    }

OpCase(is_function_fx):
    { 
    IsFunction(xb(Arg(1)), ClauseFail());
    Next(2);
    }

OpCase(is_function_fy):
    { 
    IsFunction(yb(Arg(1)), ClauseFail());
    Next(2);
    }

OpCase(is_ge_fcx):
    { 
    IsGreaterEqual(Arg(1), xb(Arg(2)), ClauseFail());
    Next(3);
    }

OpCase(is_ge_fxc):
    { 
    IsGreaterEqual(xb(Arg(1)), Arg(2), ClauseFail());
    Next(3);
    }

OpCase(is_ge_fxx):
    { 
    IsGreaterEqual(xb(Arg(1)), xb(Arg(2)), ClauseFail());
    Next(3);
    }

OpCase(is_integer_allocate_fxII):
    { 
    IsIntegerAllocate(xb(Arg(1)), Arg(2), Arg(3), ClauseFail());
    Next(4);
    }

OpCase(is_integer_fx):
    { 
    IsInteger(xb(Arg(1)), ClauseFail());
    Next(2);
    }

OpCase(is_integer_fy):
    { 
    IsInteger(yb(Arg(1)), ClauseFail());
    Next(2);
    }

OpCase(is_list_fx):
    { 
    IsList(xb(Arg(1)), ClauseFail());
    Next(2);
    }

OpCase(is_lt_fcx):
    { 
    IsLessThan(Arg(1), xb(Arg(2)), ClauseFail());
    Next(3);
    }

OpCase(is_lt_fxc):
    { 
    IsLessThan(xb(Arg(1)), Arg(2), ClauseFail());
    Next(3);
    }

OpCase(is_lt_fxx):
    { 
    IsLessThan(xb(Arg(1)), xb(Arg(2)), ClauseFail());
    Next(3);
    }

OpCase(is_map_fx):
    { 
    IsMap(xb(Arg(1)), ClauseFail());
    Next(2);
    }

OpCase(is_map_fy):
    { 
    IsMap(yb(Arg(1)), ClauseFail());
    Next(2);
    }

OpCase(is_ne_exact_fss):
    { Eterm targ1; Eterm targ2; 
    GetR(1, targ1);
    GetR(2, targ2);
    NotEqualExact(targ1, targ2, ClauseFail());
    Next(3);
    }

OpCase(is_ne_fss):
    { Eterm targ1; Eterm targ2; 
    GetR(1, targ1);
    GetR(2, targ2);
    NotEqual(targ1, targ2, ClauseFail());
    Next(3);
    }

OpCase(is_nil_fx):
    { 
    IsNil(xb(Arg(1)), ClauseFail());
    Next(2);
    }

OpCase(is_nil_fy):
    { 
    IsNil(yb(Arg(1)), ClauseFail());
    Next(2);
    }

OpCase(is_non_empty_list_test_heap_fIt):
    { BeamInstr tmp_packed1;
    tmp_packed1 = Arg(1);
    IsNonemptyListTestHeap(Ib(tmp_packed1&BEAM_WIDE_MASK), tb((tmp_packed1>>BEAM_WIDE_SHIFT)), ClauseFail());
    Next(2);
    }

OpCase(is_nonempty_list_allocate_frIt):
    { BeamInstr tmp_packed1;
    tmp_packed1 = Arg(1);
    IsNonemptyListAllocate(r(0), Ib(tmp_packed1&BEAM_WIDE_MASK), tb((tmp_packed1>>BEAM_WIDE_SHIFT)), ClauseFail());
    Next(2);
    }

OpCase(is_nonempty_list_allocate_fxIt):
    { BeamInstr tmp_packed1;
    tmp_packed1 = Arg(1);
    IsNonemptyListAllocate(xb(tmp_packed1&BEAM_WIDE_MASK), Ib((tmp_packed1>>BEAM_WIDE_SHIFT)), Arg(2), ClauseFail());
    Next(3);
    }

OpCase(is_nonempty_list_fx):
    { 
    IsNonemptyList(xb(Arg(1)), ClauseFail());
    Next(2);
    }

OpCase(is_nonempty_list_fy):
    { 
    IsNonemptyList(yb(Arg(1)), ClauseFail());
    Next(2);
    }

OpCase(is_nonempty_list_get_list_frxx):
    { BeamInstr tmp_packed1;
    tmp_packed1 = Arg(1);
    IsNonemptyListGetList(r(0), xb(tmp_packed1&BEAM_LOOSE_MASK), xb((tmp_packed1>>BEAM_LOOSE_SHIFT)), ClauseFail());
    Next(2);
    }

OpCase(is_nonempty_list_get_list_fxxx):
    { BeamInstr tmp_packed1;
    tmp_packed1 = Arg(1);
    IsNonemptyListGetList(xb(tmp_packed1&BEAM_TIGHT_MASK), xb((tmp_packed1>>BEAM_TIGHT_SHIFT)&BEAM_TIGHT_MASK), xb((tmp_packed1>>(2*BEAM_TIGHT_SHIFT))), ClauseFail());
    Next(2);
    }

OpCase(is_pid_fx):
    { 
    IsPid(xb(Arg(1)), ClauseFail());
    Next(2);
    }

OpCase(is_port_fx):
    { 
    IsPort(xb(Arg(1)), ClauseFail());
    Next(2);
    }

OpCase(is_reference_fx):
    { 
    IsRef(xb(Arg(1)), ClauseFail());
    Next(2);
    }

OpCase(is_tagged_tuple_frAa):
    { 
    IsTaggedTuple(r(0), Arg(1), Arg(2), ClauseFail());
    Next(3);
    }

OpCase(is_tagged_tuple_fxAa):
    { 
    IsTaggedTuple(xb(Arg(1)), Arg(2), Arg(3), ClauseFail());
    Next(4);
    }

OpCase(is_tagged_tuple_fyAa):
    { 
    IsTaggedTuple(yb(Arg(1)), Arg(2), Arg(3), ClauseFail());
    Next(4);
    }

OpCase(is_tuple_fr):
    { 
    IsTuple(r(0), ClauseFail());
    Next(1);
    }

OpCase(is_tuple_fx):
    { 
    IsTuple(xb(Arg(1)), ClauseFail());
    Next(2);
    }

OpCase(is_tuple_fy):
    { 
    IsTuple(yb(Arg(1)), ClauseFail());
    Next(2);
    }

OpCase(is_tuple_of_arity_frA):
    { 
    IsTupleOfArity(r(0), Arg(1), ClauseFail());
    Next(2);
    }

OpCase(is_tuple_of_arity_fxA):
    { 
    IsTupleOfArity(xb(Arg(1)), Arg(2), ClauseFail());
    Next(3);
    }

OpCase(is_tuple_of_arity_fyA):
    { 
    IsTupleOfArity(yb(Arg(1)), Arg(2), ClauseFail());
    Next(3);
    }

OpCase(move2_par_xxxx):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    Move2Par(xb(tmp_packed1&BEAM_LOOSE_MASK), xb((tmp_packed1>>BEAM_LOOSE_SHIFT)&BEAM_LOOSE_MASK), xb((tmp_packed1>>(2*BEAM_LOOSE_SHIFT))&BEAM_LOOSE_MASK), xb((tmp_packed1>>(3*BEAM_LOOSE_SHIFT))));
    NextPF(1, next);
    }

OpCase(move2_par_xxxy):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    Move2Par(xb(tmp_packed1&BEAM_LOOSE_MASK), xb((tmp_packed1>>BEAM_LOOSE_SHIFT)&BEAM_LOOSE_MASK), xb((tmp_packed1>>(2*BEAM_LOOSE_SHIFT))&BEAM_LOOSE_MASK), yb((tmp_packed1>>(3*BEAM_LOOSE_SHIFT))));
    NextPF(1, next);
    }

OpCase(move2_par_xxyx):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    Move2Par(xb(tmp_packed1&BEAM_LOOSE_MASK), xb((tmp_packed1>>BEAM_LOOSE_SHIFT)&BEAM_LOOSE_MASK), yb((tmp_packed1>>(2*BEAM_LOOSE_SHIFT))&BEAM_LOOSE_MASK), xb((tmp_packed1>>(3*BEAM_LOOSE_SHIFT))));
    NextPF(1, next);
    }

OpCase(move2_par_xyxy):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    Move2Par(xb(tmp_packed1&BEAM_LOOSE_MASK), yb((tmp_packed1>>BEAM_LOOSE_SHIFT)&BEAM_LOOSE_MASK), xb((tmp_packed1>>(2*BEAM_LOOSE_SHIFT))&BEAM_LOOSE_MASK), yb((tmp_packed1>>(3*BEAM_LOOSE_SHIFT))));
    NextPF(1, next);
    }

OpCase(move2_par_yxxx):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    Move2Par(yb(tmp_packed1&BEAM_LOOSE_MASK), xb((tmp_packed1>>BEAM_LOOSE_SHIFT)&BEAM_LOOSE_MASK), xb((tmp_packed1>>(2*BEAM_LOOSE_SHIFT))&BEAM_LOOSE_MASK), xb((tmp_packed1>>(3*BEAM_LOOSE_SHIFT))));
    NextPF(1, next);
    }

OpCase(move2_par_yxxy):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    Move2Par(yb(tmp_packed1&BEAM_LOOSE_MASK), xb((tmp_packed1>>BEAM_LOOSE_SHIFT)&BEAM_LOOSE_MASK), xb((tmp_packed1>>(2*BEAM_LOOSE_SHIFT))&BEAM_LOOSE_MASK), yb((tmp_packed1>>(3*BEAM_LOOSE_SHIFT))));
    NextPF(1, next);
    }

OpCase(move2_par_yxyx):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    Move2Par(yb(tmp_packed1&BEAM_LOOSE_MASK), xb((tmp_packed1>>BEAM_LOOSE_SHIFT)&BEAM_LOOSE_MASK), yb((tmp_packed1>>(2*BEAM_LOOSE_SHIFT))&BEAM_LOOSE_MASK), xb((tmp_packed1>>(3*BEAM_LOOSE_SHIFT))));
    NextPF(1, next);
    }

OpCase(move3_xxxxxx):
    { BeamInstr tmp_packed1;BeamInstr tmp_packed2;
    BeamInstr* next;
    PreFetch(2, next);
    tmp_packed1 = Arg(0);
    tmp_packed2 = Arg(1);
    Move3(xb(tmp_packed1&BEAM_TIGHT_MASK), xb((tmp_packed1>>BEAM_TIGHT_SHIFT)&BEAM_TIGHT_MASK), xb((tmp_packed1>>(2*BEAM_TIGHT_SHIFT))), xb(tmp_packed2&BEAM_TIGHT_MASK), xb((tmp_packed2>>BEAM_TIGHT_SHIFT)&BEAM_TIGHT_MASK), xb((tmp_packed2>>(2*BEAM_TIGHT_SHIFT))));
    NextPF(2, next);
    }

OpCase(move3_xyxyxy):
    { BeamInstr tmp_packed1;BeamInstr tmp_packed2;
    BeamInstr* next;
    PreFetch(2, next);
    tmp_packed1 = Arg(0);
    tmp_packed2 = Arg(1);
    Move3(xb(tmp_packed1&BEAM_TIGHT_MASK), yb((tmp_packed1>>BEAM_TIGHT_SHIFT)&BEAM_TIGHT_MASK), xb((tmp_packed1>>(2*BEAM_TIGHT_SHIFT))), yb(tmp_packed2&BEAM_TIGHT_MASK), xb((tmp_packed2>>BEAM_TIGHT_SHIFT)&BEAM_TIGHT_MASK), yb((tmp_packed2>>(2*BEAM_TIGHT_SHIFT))));
    NextPF(2, next);
    }

OpCase(move3_yxyxyx):
    { BeamInstr tmp_packed1;BeamInstr tmp_packed2;
    BeamInstr* next;
    PreFetch(2, next);
    tmp_packed1 = Arg(0);
    tmp_packed2 = Arg(1);
    Move3(yb(tmp_packed1&BEAM_TIGHT_MASK), xb((tmp_packed1>>BEAM_TIGHT_SHIFT)&BEAM_TIGHT_MASK), yb((tmp_packed1>>(2*BEAM_TIGHT_SHIFT))), xb(tmp_packed2&BEAM_TIGHT_MASK), yb((tmp_packed2>>BEAM_TIGHT_SHIFT)&BEAM_TIGHT_MASK), xb((tmp_packed2>>(2*BEAM_TIGHT_SHIFT))));
    NextPF(2, next);
    }

OpCase(move_call_last_xfQ):
    { BeamInstr tmp_packed1;
    tmp_packed1 = Arg(0);
    MoveCallLast(xb(tmp_packed1&BEAM_LOOSE_MASK), Arg(1), Qb((tmp_packed1>>BEAM_LOOSE_SHIFT)));
    }

OpCase(move_call_last_yfQ):
    { BeamInstr tmp_packed1;
    tmp_packed1 = Arg(0);
    MoveCallLast(yb(tmp_packed1&BEAM_LOOSE_MASK), Arg(1), Qb((tmp_packed1>>BEAM_LOOSE_SHIFT)));
    }

OpCase(move_call_only_xf):
    { 
    MoveCallOnly(xb(Arg(0)), Arg(1));
    }

OpCase(move_call_xf):
    { 
    MoveCall(xb(Arg(0)), Arg(1), 2);
    }

OpCase(move_call_yf):
    { 
    MoveCall(yb(Arg(0)), Arg(1), 2);
    }

OpCase(move_cr):
    { 
    BeamInstr* next;
    PreFetch(1, next);
    Move(Arg(0), r(0));
    NextPF(1, next);
    }

OpCase(move_cx):
    { 
    BeamInstr* next;
    PreFetch(2, next);
    Move(Arg(0), xb(Arg(1)));
    NextPF(2, next);
    }

OpCase(move_deallocate_return_cQ):
    { 
    MoveDeallocateReturn(Arg(0), Arg(1));
    }

OpCase(move_deallocate_return_nQ):
    { 
    MoveDeallocateReturn(NIL, Arg(0));
    }

OpCase(move_deallocate_return_xQ):
    { BeamInstr tmp_packed1;
    tmp_packed1 = Arg(0);
    MoveDeallocateReturn(xb(tmp_packed1&BEAM_LOOSE_MASK), Qb((tmp_packed1>>BEAM_LOOSE_SHIFT)));
    }

OpCase(move_deallocate_return_yQ):
    { BeamInstr tmp_packed1;
    tmp_packed1 = Arg(0);
    MoveDeallocateReturn(yb(tmp_packed1&BEAM_LOOSE_MASK), Qb((tmp_packed1>>BEAM_LOOSE_SHIFT)));
    }

OpCase(move_dup_xxx):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    MoveDup(xb(tmp_packed1&BEAM_TIGHT_MASK), xb((tmp_packed1>>BEAM_TIGHT_SHIFT)&BEAM_TIGHT_MASK), xb((tmp_packed1>>(2*BEAM_TIGHT_SHIFT))));
    NextPF(1, next);
    }

OpCase(move_dup_xxy):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    MoveDup(xb(tmp_packed1&BEAM_TIGHT_MASK), xb((tmp_packed1>>BEAM_TIGHT_SHIFT)&BEAM_TIGHT_MASK), yb((tmp_packed1>>(2*BEAM_TIGHT_SHIFT))));
    NextPF(1, next);
    }

OpCase(move_dup_yxx):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    MoveDup(yb(tmp_packed1&BEAM_TIGHT_MASK), xb((tmp_packed1>>BEAM_TIGHT_SHIFT)&BEAM_TIGHT_MASK), xb((tmp_packed1>>(2*BEAM_TIGHT_SHIFT))));
    NextPF(1, next);
    }

OpCase(move_dup_yxy):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    MoveDup(yb(tmp_packed1&BEAM_TIGHT_MASK), xb((tmp_packed1>>BEAM_TIGHT_SHIFT)&BEAM_TIGHT_MASK), yb((tmp_packed1>>(2*BEAM_TIGHT_SHIFT))));
    NextPF(1, next);
    }

OpCase(move_jump_fc):
    { 
    MoveJump(Arg(1));
    }

OpCase(move_jump_fn):
    { 
    MoveJump(NIL);
    }

OpCase(move_jump_fx):
    { 
    MoveJump(xb(Arg(1)));
    }

OpCase(move_jump_fy):
    { 
    MoveJump(yb(Arg(1)));
    }

OpCase(move_nx):
    { 
    BeamInstr* next;
    PreFetch(1, next);
    Move(NIL, xb(Arg(0)));
    NextPF(1, next);
    }

OpCase(move_return_c):
    { 
    MoveReturn(Arg(0));
    }

OpCase(move_return_n):
    { 
    MoveReturn(NIL);
    }

OpCase(move_return_x):
    { 
    MoveReturn(xb(Arg(0)));
    }

OpCase(move_rx):
    { 
    BeamInstr* next;
    PreFetch(1, next);
    Move(r(0), xb(Arg(0)));
    NextPF(1, next);
    }

OpCase(move_ry):
    { 
    BeamInstr* next;
    PreFetch(1, next);
    Move(r(0), yb(Arg(0)));
    NextPF(1, next);
    }

OpCase(move_shift_xxx):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    MoveShift(xb(tmp_packed1&BEAM_TIGHT_MASK), xb((tmp_packed1>>BEAM_TIGHT_SHIFT)&BEAM_TIGHT_MASK), xb((tmp_packed1>>(2*BEAM_TIGHT_SHIFT))));
    NextPF(1, next);
    }

OpCase(move_shift_xxy):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    MoveShift(xb(tmp_packed1&BEAM_TIGHT_MASK), xb((tmp_packed1>>BEAM_TIGHT_SHIFT)&BEAM_TIGHT_MASK), yb((tmp_packed1>>(2*BEAM_TIGHT_SHIFT))));
    NextPF(1, next);
    }

OpCase(move_shift_xyx):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    MoveShift(xb(tmp_packed1&BEAM_TIGHT_MASK), yb((tmp_packed1>>BEAM_TIGHT_SHIFT)&BEAM_TIGHT_MASK), xb((tmp_packed1>>(2*BEAM_TIGHT_SHIFT))));
    NextPF(1, next);
    }

OpCase(move_shift_yxx):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    MoveShift(yb(tmp_packed1&BEAM_TIGHT_MASK), xb((tmp_packed1>>BEAM_TIGHT_SHIFT)&BEAM_TIGHT_MASK), xb((tmp_packed1>>(2*BEAM_TIGHT_SHIFT))));
    NextPF(1, next);
    }

OpCase(move_window3_xxxy):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    MoveWindow3(xb(tmp_packed1&BEAM_LOOSE_MASK), xb((tmp_packed1>>BEAM_LOOSE_SHIFT)&BEAM_LOOSE_MASK), xb((tmp_packed1>>(2*BEAM_LOOSE_SHIFT))&BEAM_LOOSE_MASK), yb((tmp_packed1>>(3*BEAM_LOOSE_SHIFT))));
    NextPF(1, next);
    }

OpCase(move_window4_xxxxy):
    { BeamInstr tmp_packed1;BeamInstr tmp_packed2;
    BeamInstr* next;
    PreFetch(2, next);
    tmp_packed1 = Arg(0);
    tmp_packed2 = Arg(1);
    MoveWindow4(xb(tmp_packed1&BEAM_TIGHT_MASK), xb((tmp_packed1>>BEAM_TIGHT_SHIFT)&BEAM_TIGHT_MASK), xb((tmp_packed1>>(2*BEAM_TIGHT_SHIFT))), xb(tmp_packed2&BEAM_TIGHT_MASK), yb((tmp_packed2>>BEAM_TIGHT_SHIFT)&BEAM_TIGHT_MASK));
    NextPF(2, next);
    }

OpCase(move_window5_xxxxxy):
    { BeamInstr tmp_packed1;BeamInstr tmp_packed2;
    BeamInstr* next;
    PreFetch(2, next);
    tmp_packed1 = Arg(0);
    tmp_packed2 = Arg(1);
    MoveWindow5(xb(tmp_packed1&BEAM_TIGHT_MASK), xb((tmp_packed1>>BEAM_TIGHT_SHIFT)&BEAM_TIGHT_MASK), xb((tmp_packed1>>(2*BEAM_TIGHT_SHIFT))), xb(tmp_packed2&BEAM_TIGHT_MASK), xb((tmp_packed2>>BEAM_TIGHT_SHIFT)&BEAM_TIGHT_MASK), yb((tmp_packed2>>(2*BEAM_TIGHT_SHIFT))));
    NextPF(2, next);
    }

OpCase(move_xr):
    { 
    BeamInstr* next;
    PreFetch(1, next);
    Move(xb(Arg(0)), r(0));
    NextPF(1, next);
    }

OpCase(move_xx):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    Move(xb(tmp_packed1&BEAM_LOOSE_MASK), xb((tmp_packed1>>BEAM_LOOSE_SHIFT)));
    NextPF(1, next);
    }

OpCase(move_xy):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    Move(xb(tmp_packed1&BEAM_LOOSE_MASK), yb((tmp_packed1>>BEAM_LOOSE_SHIFT)));
    NextPF(1, next);
    }

OpCase(move_yr):
    { 
    BeamInstr* next;
    PreFetch(1, next);
    Move(yb(Arg(0)), r(0));
    NextPF(1, next);
    }

OpCase(move_yx):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    Move(yb(tmp_packed1&BEAM_LOOSE_MASK), xb((tmp_packed1>>BEAM_LOOSE_SHIFT)));
    NextPF(1, next);
    }

OpCase(move_yy):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    Move(yb(tmp_packed1&BEAM_LOOSE_MASK), yb((tmp_packed1>>BEAM_LOOSE_SHIFT)));
    NextPF(1, next);
    }

OpCase(node_x):
    { 
    BeamInstr* next;
    PreFetch(1, next);
    Node(xb(Arg(0)));
    NextPF(1, next);
    }

OpCase(put_list_cxx):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(2, next);
    tmp_packed1 = Arg(1);
    PutList(Arg(0), xb(tmp_packed1&BEAM_LOOSE_MASK), xb((tmp_packed1>>BEAM_LOOSE_SHIFT)));
    NextPF(2, next);
    }

OpCase(put_list_cyx):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(2, next);
    tmp_packed1 = Arg(1);
    PutList(Arg(0), yb(tmp_packed1&BEAM_LOOSE_MASK), xb((tmp_packed1>>BEAM_LOOSE_SHIFT)));
    NextPF(2, next);
    }

OpCase(put_list_rnr):
    { 
    BeamInstr* next;
    PreFetch(0, next);
    PutList(r(0), NIL, r(0));
    NextPF(0, next);
    }

OpCase(put_list_rnx):
    { 
    BeamInstr* next;
    PreFetch(1, next);
    PutList(r(0), NIL, xb(Arg(0)));
    NextPF(1, next);
    }

OpCase(put_list_rxr):
    { 
    BeamInstr* next;
    PreFetch(1, next);
    PutList(r(0), xb(Arg(0)), r(0));
    NextPF(1, next);
    }

OpCase(put_list_rxx):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    PutList(r(0), xb(tmp_packed1&BEAM_LOOSE_MASK), xb((tmp_packed1>>BEAM_LOOSE_SHIFT)));
    NextPF(1, next);
    }

OpCase(put_list_xcx):
    { 
    BeamInstr* next;
    PreFetch(3, next);
    PutList(xb(Arg(0)), Arg(1), xb(Arg(2)));
    NextPF(3, next);
    }

OpCase(put_list_xcy):
    { 
    BeamInstr* next;
    PreFetch(3, next);
    PutList(xb(Arg(0)), Arg(1), yb(Arg(2)));
    NextPF(3, next);
    }

OpCase(put_list_xnx):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    PutList(xb(tmp_packed1&BEAM_LOOSE_MASK), NIL, xb((tmp_packed1>>BEAM_LOOSE_SHIFT)));
    NextPF(1, next);
    }

OpCase(put_list_xrr):
    { 
    BeamInstr* next;
    PreFetch(1, next);
    PutList(xb(Arg(0)), r(0), r(0));
    NextPF(1, next);
    }

OpCase(put_list_xxr):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    PutList(xb(tmp_packed1&BEAM_LOOSE_MASK), xb((tmp_packed1>>BEAM_LOOSE_SHIFT)), r(0));
    NextPF(1, next);
    }

OpCase(put_list_xxx):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    PutList(xb(tmp_packed1&BEAM_TIGHT_MASK), xb((tmp_packed1>>BEAM_TIGHT_SHIFT)&BEAM_TIGHT_MASK), xb((tmp_packed1>>(2*BEAM_TIGHT_SHIFT))));
    NextPF(1, next);
    }

OpCase(put_list_xyx):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    PutList(xb(tmp_packed1&BEAM_TIGHT_MASK), yb((tmp_packed1>>BEAM_TIGHT_SHIFT)&BEAM_TIGHT_MASK), xb((tmp_packed1>>(2*BEAM_TIGHT_SHIFT))));
    NextPF(1, next);
    }

OpCase(put_list_ycx):
    { 
    BeamInstr* next;
    PreFetch(3, next);
    PutList(yb(Arg(0)), Arg(1), xb(Arg(2)));
    NextPF(3, next);
    }

OpCase(put_list_ynx):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    PutList(yb(tmp_packed1&BEAM_LOOSE_MASK), NIL, xb((tmp_packed1>>BEAM_LOOSE_SHIFT)));
    NextPF(1, next);
    }

OpCase(put_list_yrr):
    { 
    BeamInstr* next;
    PreFetch(1, next);
    PutList(yb(Arg(0)), r(0), r(0));
    NextPF(1, next);
    }

OpCase(put_list_yxx):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    PutList(yb(tmp_packed1&BEAM_TIGHT_MASK), xb((tmp_packed1>>BEAM_TIGHT_SHIFT)&BEAM_TIGHT_MASK), xb((tmp_packed1>>(2*BEAM_TIGHT_SHIFT))));
    NextPF(1, next);
    }

OpCase(put_list_yyx):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    PutList(yb(tmp_packed1&BEAM_TIGHT_MASK), yb((tmp_packed1>>BEAM_TIGHT_SHIFT)&BEAM_TIGHT_MASK), xb((tmp_packed1>>(2*BEAM_TIGHT_SHIFT))));
    NextPF(1, next);
    }

OpCase(self_x):
    { 
    BeamInstr* next;
    PreFetch(1, next);
    Self(xb(Arg(0)));
    NextPF(1, next);
    }

OpCase(self_y):
    { 
    BeamInstr* next;
    PreFetch(1, next);
    Self(yb(Arg(0)));
    NextPF(1, next);
    }

OpCase(swap_temp_xxx):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    SwapTemp(xb(tmp_packed1&BEAM_TIGHT_MASK), xb((tmp_packed1>>BEAM_TIGHT_SHIFT)&BEAM_TIGHT_MASK), xb((tmp_packed1>>(2*BEAM_TIGHT_SHIFT))));
    NextPF(1, next);
    }

OpCase(swap_temp_xyx):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    SwapTemp(xb(tmp_packed1&BEAM_TIGHT_MASK), yb((tmp_packed1>>BEAM_TIGHT_SHIFT)&BEAM_TIGHT_MASK), xb((tmp_packed1>>(2*BEAM_TIGHT_SHIFT))));
    NextPF(1, next);
    }

OpCase(swap_xx):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    Swap(xb(tmp_packed1&BEAM_LOOSE_MASK), xb((tmp_packed1>>BEAM_LOOSE_SHIFT)));
    NextPF(1, next);
    }

OpCase(swap_xy):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    Swap(xb(tmp_packed1&BEAM_LOOSE_MASK), yb((tmp_packed1>>BEAM_LOOSE_SHIFT)));
    NextPF(1, next);
    }

OpCase(test_arity_fxA):
    { 
    IsArity(xb(Arg(1)), Arg(2), ClauseFail());
    Next(3);
    }

OpCase(test_arity_fyA):
    { 
    IsArity(yb(Arg(1)), Arg(2), ClauseFail());
    Next(3);
    }

OpCase(test_heap_1_put_list_Iy):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    TestHeapPutList(Ib(tmp_packed1&BEAM_WIDE_MASK), yb((tmp_packed1>>BEAM_WIDE_SHIFT)));
    NextPF(1, next);
    }

OpCase(test_heap_It):
    { BeamInstr tmp_packed1;
    BeamInstr* next;
    PreFetch(1, next);
    tmp_packed1 = Arg(0);
    TestHeap(Ib(tmp_packed1&BEAM_WIDE_MASK), tb((tmp_packed1>>BEAM_WIDE_SHIFT)));
    NextPF(1, next);
    }

