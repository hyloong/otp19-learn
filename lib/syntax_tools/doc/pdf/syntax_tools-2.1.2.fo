<?xml version="1.0"?>
<fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format">
  <fo:layout-master-set>
    <fo:simple-page-master master-name="cover" margin="25mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin="0mm"/>
    </fo:simple-page-master>
    <fo:simple-page-master master-name="left-page" margin-top="25mm" margin-bottom="15mm" margin-left="20mm" margin-right="25mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin-top="15mm" margin-bottom="20mm"/>
      <fo:region-before region-name="left-header" extent="10mm"/>
      <fo:region-after region-name="left-footer" extent="10mm"/>
    </fo:simple-page-master>
    <fo:simple-page-master master-name="right-page" margin-top="25mm" margin-bottom="15mm" margin-left="25mm" margin-right="20mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin-top="15mm" margin-bottom="20mm"/>
      <fo:region-before region-name="right-header" extent="10mm"/>
      <fo:region-after region-name="right-footer" extent="10mm"/>
    </fo:simple-page-master>
    <fo:page-sequence-master master-name="document">
      <fo:repeatable-page-master-alternatives>
        <fo:conditional-page-master-reference master-reference="left-page" odd-or-even="even"/>
        <fo:conditional-page-master-reference master-reference="right-page" odd-or-even="odd"/>
      </fo:repeatable-page-master-alternatives>
    </fo:page-sequence-master>
  </fo:layout-master-set>
  <fo:bookmark-tree>
    <fo:bookmark internal-destination="cover-page" starting-state="show">
      <fo:bookmark-title>Syntax_Tools</fo:bookmark-title>
      <fo:bookmark internal-destination="idp20928" starting-state="hide">
        <fo:bookmark-title>Syntax_Tools User's Guide</fo:bookmark-title>
        <fo:bookmark internal-destination="idp429296" starting-state="hide">
          <fo:bookmark-title>Erlang Syntax and Metaprogramming tools
</fo:bookmark-title>
          <fo:bookmark internal-destination="idp426272" starting-state="hide">
            <fo:bookmark-title>Overview</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
      </fo:bookmark>
      <fo:bookmark internal-destination="idp34880" starting-state="hide">
        <fo:bookmark-title>Reference Manual</fo:bookmark-title>
        <fo:bookmark internal-destination="idp1147520" starting-state="hide">
          <fo:bookmark-title>epp_dodger</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1139344" starting-state="hide">
            <fo:bookmark-title>parse/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1135104" starting-state="hide">
            <fo:bookmark-title>parse/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1127696" starting-state="hide">
            <fo:bookmark-title>parse/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1774960" starting-state="hide">
            <fo:bookmark-title>parse_file/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1768848" starting-state="hide">
            <fo:bookmark-title>parse_file/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp780320" starting-state="hide">
            <fo:bookmark-title>parse_form/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp771664" starting-state="hide">
            <fo:bookmark-title>parse_form/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp762608" starting-state="hide">
            <fo:bookmark-title>quick_parse/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1273328" starting-state="hide">
            <fo:bookmark-title>quick_parse/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1266256" starting-state="hide">
            <fo:bookmark-title>quick_parse/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1243536" starting-state="hide">
            <fo:bookmark-title>quick_parse_file/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1237744" starting-state="hide">
            <fo:bookmark-title>quick_parse_file/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp944528" starting-state="hide">
            <fo:bookmark-title>quick_parse_form/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1224544" starting-state="hide">
            <fo:bookmark-title>quick_parse_form/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idm7040" starting-state="hide">
            <fo:bookmark-title>tokens_to_string/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp1354096" starting-state="hide">
          <fo:bookmark-title>erl_comment_scan</fo:bookmark-title>
          <fo:bookmark internal-destination="idp253952" starting-state="hide">
            <fo:bookmark-title>file/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1275504" starting-state="hide">
            <fo:bookmark-title>join_lines/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp282928" starting-state="hide">
            <fo:bookmark-title>scan_lines/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1208032" starting-state="hide">
            <fo:bookmark-title>string/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp1883808" starting-state="hide">
          <fo:bookmark-title>erl_prettypr</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1744416" starting-state="hide">
            <fo:bookmark-title>best/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1748416" starting-state="hide">
            <fo:bookmark-title>best/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1373520" starting-state="hide">
            <fo:bookmark-title>format/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1377072" starting-state="hide">
            <fo:bookmark-title>format/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1299616" starting-state="hide">
            <fo:bookmark-title>get_ctxt_hook/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1304320" starting-state="hide">
            <fo:bookmark-title>get_ctxt_linewidth/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1308544" starting-state="hide">
            <fo:bookmark-title>get_ctxt_paperwidth/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1478256" starting-state="hide">
            <fo:bookmark-title>get_ctxt_precedence/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1482480" starting-state="hide">
            <fo:bookmark-title>get_ctxt_user/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1486736" starting-state="hide">
            <fo:bookmark-title>layout/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1490736" starting-state="hide">
            <fo:bookmark-title>layout/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1500208" starting-state="hide">
            <fo:bookmark-title>set_ctxt_hook/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1505520" starting-state="hide">
            <fo:bookmark-title>set_ctxt_linewidth/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1510816" starting-state="hide">
            <fo:bookmark-title>set_ctxt_paperwidth/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1516160" starting-state="hide">
            <fo:bookmark-title>set_ctxt_precedence/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1522112" starting-state="hide">
            <fo:bookmark-title>set_ctxt_user/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp1532112" starting-state="hide">
          <fo:bookmark-title>erl_recomment</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1539024" starting-state="hide">
            <fo:bookmark-title>quick_recomment_forms/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1545856" starting-state="hide">
            <fo:bookmark-title>recomment_forms/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1567168" starting-state="hide">
            <fo:bookmark-title>recomment_tree/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp2070240" starting-state="hide">
          <fo:bookmark-title>erl_syntax</fo:bookmark-title>
          <fo:bookmark internal-destination="idp2112320" starting-state="hide">
            <fo:bookmark-title>abstract/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2119136" starting-state="hide">
            <fo:bookmark-title>add_ann/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2126864" starting-state="hide">
            <fo:bookmark-title>add_postcomments/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2137456" starting-state="hide">
            <fo:bookmark-title>add_precomments/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2148048" starting-state="hide">
            <fo:bookmark-title>annotated_type/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2155088" starting-state="hide">
            <fo:bookmark-title>annotated_type_body/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2160752" starting-state="hide">
            <fo:bookmark-title>annotated_type_name/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2166416" starting-state="hide">
            <fo:bookmark-title>application/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2175104" starting-state="hide">
            <fo:bookmark-title>application/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2184704" starting-state="hide">
            <fo:bookmark-title>application_arguments/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2190480" starting-state="hide">
            <fo:bookmark-title>application_operator/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2198624" starting-state="hide">
            <fo:bookmark-title>arity_qualifier/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2205744" starting-state="hide">
            <fo:bookmark-title>arity_qualifier_argument/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2211376" starting-state="hide">
            <fo:bookmark-title>arity_qualifier_body/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2217040" starting-state="hide">
            <fo:bookmark-title>atom/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2224992" starting-state="hide">
            <fo:bookmark-title>atom_literal/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2232448" starting-state="hide">
            <fo:bookmark-title>atom_literal/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2239248" starting-state="hide">
            <fo:bookmark-title>atom_name/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2244384" starting-state="hide">
            <fo:bookmark-title>atom_value/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2249472" starting-state="hide">
            <fo:bookmark-title>attribute/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2253968" starting-state="hide">
            <fo:bookmark-title>attribute/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2268048" starting-state="hide">
            <fo:bookmark-title>attribute_arguments/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2276512" starting-state="hide">
            <fo:bookmark-title>attribute_name/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2282160" starting-state="hide">
            <fo:bookmark-title>binary/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2289392" starting-state="hide">
            <fo:bookmark-title>binary_comp/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2298080" starting-state="hide">
            <fo:bookmark-title>binary_comp_body/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2303888" starting-state="hide">
            <fo:bookmark-title>binary_comp_template/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2309552" starting-state="hide">
            <fo:bookmark-title>binary_field/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2314048" starting-state="hide">
            <fo:bookmark-title>binary_field/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2325744" starting-state="hide">
            <fo:bookmark-title>binary_field/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2336048" starting-state="hide">
            <fo:bookmark-title>binary_field_body/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2341712" starting-state="hide">
            <fo:bookmark-title>binary_field_size/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2350752" starting-state="hide">
            <fo:bookmark-title>binary_field_types/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2357840" starting-state="hide">
            <fo:bookmark-title>binary_fields/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2364320" starting-state="hide">
            <fo:bookmark-title>binary_generator/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2372912" starting-state="hide">
            <fo:bookmark-title>binary_generator_body/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2378576" starting-state="hide">
            <fo:bookmark-title>binary_generator_pattern/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2384256" starting-state="hide">
            <fo:bookmark-title>bitstring_type/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2391344" starting-state="hide">
            <fo:bookmark-title>bitstring_type_m/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2397440" starting-state="hide">
            <fo:bookmark-title>bitstring_type_n/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2403536" starting-state="hide">
            <fo:bookmark-title>block_expr/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2410096" starting-state="hide">
            <fo:bookmark-title>block_expr_body/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2415904" starting-state="hide">
            <fo:bookmark-title>case_expr/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2427424" starting-state="hide">
            <fo:bookmark-title>case_expr_argument/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2433088" starting-state="hide">
            <fo:bookmark-title>case_expr_clauses/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2438864" starting-state="hide">
            <fo:bookmark-title>catch_expr/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2444512" starting-state="hide">
            <fo:bookmark-title>catch_expr_body/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2450160" starting-state="hide">
            <fo:bookmark-title>char/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2461360" starting-state="hide">
            <fo:bookmark-title>char_literal/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2466832" starting-state="hide">
            <fo:bookmark-title>char_literal/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2473920" starting-state="hide">
            <fo:bookmark-title>char_value/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2479008" starting-state="hide">
            <fo:bookmark-title>class_qualifier/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2486848" starting-state="hide">
            <fo:bookmark-title>class_qualifier_argument/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2492480" starting-state="hide">
            <fo:bookmark-title>class_qualifier_body/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2498144" starting-state="hide">
            <fo:bookmark-title>clause/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2503360" starting-state="hide">
            <fo:bookmark-title>clause/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2522320" starting-state="hide">
            <fo:bookmark-title>clause_body/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2528128" starting-state="hide">
            <fo:bookmark-title>clause_guard/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2535504" starting-state="hide">
            <fo:bookmark-title>clause_patterns/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2541264" starting-state="hide">
            <fo:bookmark-title>comment/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2545056" starting-state="hide">
            <fo:bookmark-title>comment/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2554432" starting-state="hide">
            <fo:bookmark-title>comment_padding/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2560000" starting-state="hide">
            <fo:bookmark-title>comment_text/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2564592" starting-state="hide">
            <fo:bookmark-title>compact_list/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2573344" starting-state="hide">
            <fo:bookmark-title>concrete/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2584176" starting-state="hide">
            <fo:bookmark-title>cond_expr/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2593568" starting-state="hide">
            <fo:bookmark-title>cond_expr_clauses/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2599344" starting-state="hide">
            <fo:bookmark-title>conjunction/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2606672" starting-state="hide">
            <fo:bookmark-title>conjunction_body/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2612432" starting-state="hide">
            <fo:bookmark-title>cons/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2626128" starting-state="hide">
            <fo:bookmark-title>constrained_function_type/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2634144" starting-state="hide">
            <fo:bookmark-title>constrained_function_type_argument/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2639776" starting-state="hide">
            <fo:bookmark-title>constrained_function_type_body/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2645456" starting-state="hide">
            <fo:bookmark-title>constraint/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2652496" starting-state="hide">
            <fo:bookmark-title>constraint_argument/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2658160" starting-state="hide">
            <fo:bookmark-title>constraint_body/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2663968" starting-state="hide">
            <fo:bookmark-title>copy_ann/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2672400" starting-state="hide">
            <fo:bookmark-title>copy_attrs/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2680880" starting-state="hide">
            <fo:bookmark-title>copy_comments/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2691584" starting-state="hide">
            <fo:bookmark-title>copy_pos/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2700048" starting-state="hide">
            <fo:bookmark-title>data/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5224496" starting-state="hide">
            <fo:bookmark-title>disjunction/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5231424" starting-state="hide">
            <fo:bookmark-title>disjunction_body/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5237184" starting-state="hide">
            <fo:bookmark-title>eof_marker/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5243920" starting-state="hide">
            <fo:bookmark-title>error_marker/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5252528" starting-state="hide">
            <fo:bookmark-title>error_marker_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5257632" starting-state="hide">
            <fo:bookmark-title>flatten_form_list/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5264208" starting-state="hide">
            <fo:bookmark-title>float/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5269952" starting-state="hide">
            <fo:bookmark-title>float_literal/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5274992" starting-state="hide">
            <fo:bookmark-title>float_value/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5280160" starting-state="hide">
            <fo:bookmark-title>form_list/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5291712" starting-state="hide">
            <fo:bookmark-title>form_list_elements/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5297536" starting-state="hide">
            <fo:bookmark-title>fun_expr/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp609680" starting-state="hide">
            <fo:bookmark-title>fun_expr_arity/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5300448" starting-state="hide">
            <fo:bookmark-title>fun_expr_clauses/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5305504" starting-state="hide">
            <fo:bookmark-title>fun_type/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5308544" starting-state="hide">
            <fo:bookmark-title>function/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5317888" starting-state="hide">
            <fo:bookmark-title>function_arity/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5326736" starting-state="hide">
            <fo:bookmark-title>function_clauses/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5332624" starting-state="hide">
            <fo:bookmark-title>function_name/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5338336" starting-state="hide">
            <fo:bookmark-title>function_type/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5341600" starting-state="hide">
            <fo:bookmark-title>function_type/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5353376" starting-state="hide">
            <fo:bookmark-title>function_type_arguments/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5363200" starting-state="hide">
            <fo:bookmark-title>function_type_return/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5369664" starting-state="hide">
            <fo:bookmark-title>generator/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5378272" starting-state="hide">
            <fo:bookmark-title>generator_body/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5383984" starting-state="hide">
            <fo:bookmark-title>generator_pattern/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5389712" starting-state="hide">
            <fo:bookmark-title>get_ann/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5395296" starting-state="hide">
            <fo:bookmark-title>get_attrs/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5407888" starting-state="hide">
            <fo:bookmark-title>get_pos/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5413984" starting-state="hide">
            <fo:bookmark-title>get_postcomments/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5424144" starting-state="hide">
            <fo:bookmark-title>get_precomments/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5433776" starting-state="hide">
            <fo:bookmark-title>has_comments/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5441840" starting-state="hide">
            <fo:bookmark-title>if_expr/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5451280" starting-state="hide">
            <fo:bookmark-title>if_expr_clauses/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5457168" starting-state="hide">
            <fo:bookmark-title>implicit_fun/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5467168" starting-state="hide">
            <fo:bookmark-title>implicit_fun/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5476208" starting-state="hide">
            <fo:bookmark-title>implicit_fun/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5486048" starting-state="hide">
            <fo:bookmark-title>implicit_fun_name/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5495936" starting-state="hide">
            <fo:bookmark-title>infix_expr/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5505296" starting-state="hide">
            <fo:bookmark-title>infix_expr_left/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5511040" starting-state="hide">
            <fo:bookmark-title>infix_expr_operator/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5516768" starting-state="hide">
            <fo:bookmark-title>infix_expr_right/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5522512" starting-state="hide">
            <fo:bookmark-title>integer/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5529008" starting-state="hide">
            <fo:bookmark-title>integer_literal/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5534192" starting-state="hide">
            <fo:bookmark-title>integer_range_type/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5541440" starting-state="hide">
            <fo:bookmark-title>integer_range_type_high/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5547184" starting-state="hide">
            <fo:bookmark-title>integer_range_type_low/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5552928" starting-state="hide">
            <fo:bookmark-title>integer_value/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5558080" starting-state="hide">
            <fo:bookmark-title>is_atom/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5565056" starting-state="hide">
            <fo:bookmark-title>is_char/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5572032" starting-state="hide">
            <fo:bookmark-title>is_form/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5587936" starting-state="hide">
            <fo:bookmark-title>is_integer/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5594912" starting-state="hide">
            <fo:bookmark-title>is_leaf/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5613712" starting-state="hide">
            <fo:bookmark-title>is_list_skeleton/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5621376" starting-state="hide">
            <fo:bookmark-title>is_literal/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5629104" starting-state="hide">
            <fo:bookmark-title>is_proper_list/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5642176" starting-state="hide">
            <fo:bookmark-title>is_string/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5649152" starting-state="hide">
            <fo:bookmark-title>is_tree/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5657136" starting-state="hide">
            <fo:bookmark-title>join_comments/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5667936" starting-state="hide">
            <fo:bookmark-title>list/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5672432" starting-state="hide">
            <fo:bookmark-title>list/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5699696" starting-state="hide">
            <fo:bookmark-title>list_comp/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5708496" starting-state="hide">
            <fo:bookmark-title>list_comp_body/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5714368" starting-state="hide">
            <fo:bookmark-title>list_comp_template/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5720096" starting-state="hide">
            <fo:bookmark-title>list_elements/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5728576" starting-state="hide">
            <fo:bookmark-title>list_head/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5737088" starting-state="hide">
            <fo:bookmark-title>list_length/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5746080" starting-state="hide">
            <fo:bookmark-title>list_prefix/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5753776" starting-state="hide">
            <fo:bookmark-title>list_suffix/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5766736" starting-state="hide">
            <fo:bookmark-title>list_tail/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5778400" starting-state="hide">
            <fo:bookmark-title>macro/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5782896" starting-state="hide">
            <fo:bookmark-title>macro/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5797232" starting-state="hide">
            <fo:bookmark-title>macro_arguments/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5805840" starting-state="hide">
            <fo:bookmark-title>macro_name/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5811552" starting-state="hide">
            <fo:bookmark-title>make_tree/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5826608" starting-state="hide">
            <fo:bookmark-title>map_expr/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5831104" starting-state="hide">
            <fo:bookmark-title>map_expr/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5842688" starting-state="hide">
            <fo:bookmark-title>map_expr_argument/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5851136" starting-state="hide">
            <fo:bookmark-title>map_expr_fields/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5857024" starting-state="hide">
            <fo:bookmark-title>map_field_assoc/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5864928" starting-state="hide">
            <fo:bookmark-title>map_field_assoc_name/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5870656" starting-state="hide">
            <fo:bookmark-title>map_field_assoc_value/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5876384" starting-state="hide">
            <fo:bookmark-title>map_field_exact/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5884288" starting-state="hide">
            <fo:bookmark-title>map_field_exact_name/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5890016" starting-state="hide">
            <fo:bookmark-title>map_field_exact_value/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5895744" starting-state="hide">
            <fo:bookmark-title>map_type/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5898960" starting-state="hide">
            <fo:bookmark-title>map_type/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5906928" starting-state="hide">
            <fo:bookmark-title>map_type_assoc/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5914832" starting-state="hide">
            <fo:bookmark-title>map_type_assoc_name/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5920560" starting-state="hide">
            <fo:bookmark-title>map_type_assoc_value/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5926288" starting-state="hide">
            <fo:bookmark-title>map_type_exact/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5934192" starting-state="hide">
            <fo:bookmark-title>map_type_exact_name/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5939920" starting-state="hide">
            <fo:bookmark-title>map_type_exact_value/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5945648" starting-state="hide">
            <fo:bookmark-title>map_type_fields/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5954960" starting-state="hide">
            <fo:bookmark-title>match_expr/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5962128" starting-state="hide">
            <fo:bookmark-title>match_expr_body/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5967840" starting-state="hide">
            <fo:bookmark-title>match_expr_pattern/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5973568" starting-state="hide">
            <fo:bookmark-title>meta/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5993008" starting-state="hide">
            <fo:bookmark-title>module_qualifier/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6000240" starting-state="hide">
            <fo:bookmark-title>module_qualifier_argument/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6006016" starting-state="hide">
            <fo:bookmark-title>module_qualifier_body/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6011744" starting-state="hide">
            <fo:bookmark-title>named_fun_expr/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6022048" starting-state="hide">
            <fo:bookmark-title>named_fun_expr_arity/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6031856" starting-state="hide">
            <fo:bookmark-title>named_fun_expr_clauses/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6037792" starting-state="hide">
            <fo:bookmark-title>named_fun_expr_name/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6043520" starting-state="hide">
            <fo:bookmark-title>nil/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6049280" starting-state="hide">
            <fo:bookmark-title>normalize_list/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6059872" starting-state="hide">
            <fo:bookmark-title>operator/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6067392" starting-state="hide">
            <fo:bookmark-title>operator_literal/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6072608" starting-state="hide">
            <fo:bookmark-title>operator_name/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6077760" starting-state="hide">
            <fo:bookmark-title>parentheses/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6083520" starting-state="hide">
            <fo:bookmark-title>parentheses_body/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6089232" starting-state="hide">
            <fo:bookmark-title>prefix_expr/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6097152" starting-state="hide">
            <fo:bookmark-title>prefix_expr_argument/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6102880" starting-state="hide">
            <fo:bookmark-title>prefix_expr_operator/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6108608" starting-state="hide">
            <fo:bookmark-title>receive_expr/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6113136" starting-state="hide">
            <fo:bookmark-title>receive_expr/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6129536" starting-state="hide">
            <fo:bookmark-title>receive_expr_action/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6136368" starting-state="hide">
            <fo:bookmark-title>receive_expr_clauses/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6142288" starting-state="hide">
            <fo:bookmark-title>receive_expr_timeout/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6150784" starting-state="hide">
            <fo:bookmark-title>record_access/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6160192" starting-state="hide">
            <fo:bookmark-title>record_access_argument/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6165936" starting-state="hide">
            <fo:bookmark-title>record_access_field/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6171664" starting-state="hide">
            <fo:bookmark-title>record_access_type/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6177392" starting-state="hide">
            <fo:bookmark-title>record_expr/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6182640" starting-state="hide">
            <fo:bookmark-title>record_expr/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6196416" starting-state="hide">
            <fo:bookmark-title>record_expr_argument/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6204864" starting-state="hide">
            <fo:bookmark-title>record_expr_fields/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6210784" starting-state="hide">
            <fo:bookmark-title>record_expr_type/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6216496" starting-state="hide">
            <fo:bookmark-title>record_field/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6221024" starting-state="hide">
            <fo:bookmark-title>record_field/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6230288" starting-state="hide">
            <fo:bookmark-title>record_field_name/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6236016" starting-state="hide">
            <fo:bookmark-title>record_field_value/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6244464" starting-state="hide">
            <fo:bookmark-title>record_index_expr/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6253472" starting-state="hide">
            <fo:bookmark-title>record_index_expr_field/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6259216" starting-state="hide">
            <fo:bookmark-title>record_index_expr_type/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6264960" starting-state="hide">
            <fo:bookmark-title>record_type/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6273008" starting-state="hide">
            <fo:bookmark-title>record_type_field/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6280256" starting-state="hide">
            <fo:bookmark-title>record_type_field_name/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6286000" starting-state="hide">
            <fo:bookmark-title>record_type_field_type/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6291744" starting-state="hide">
            <fo:bookmark-title>record_type_fields/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6297632" starting-state="hide">
            <fo:bookmark-title>record_type_name/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6303344" starting-state="hide">
            <fo:bookmark-title>remove_comments/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6310720" starting-state="hide">
            <fo:bookmark-title>revert/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6321744" starting-state="hide">
            <fo:bookmark-title>revert_forms/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6330960" starting-state="hide">
            <fo:bookmark-title>set_ann/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6338576" starting-state="hide">
            <fo:bookmark-title>set_attrs/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6346176" starting-state="hide">
            <fo:bookmark-title>set_pos/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6353056" starting-state="hide">
            <fo:bookmark-title>set_postcomments/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6364768" starting-state="hide">
            <fo:bookmark-title>set_precomments/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6376480" starting-state="hide">
            <fo:bookmark-title>size_qualifier/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6383680" starting-state="hide">
            <fo:bookmark-title>size_qualifier_argument/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6389456" starting-state="hide">
            <fo:bookmark-title>size_qualifier_body/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6395184" starting-state="hide">
            <fo:bookmark-title>string/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6407952" starting-state="hide">
            <fo:bookmark-title>string_literal/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6413216" starting-state="hide">
            <fo:bookmark-title>string_literal/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6420128" starting-state="hide">
            <fo:bookmark-title>string_value/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6425280" starting-state="hide">
            <fo:bookmark-title>subtrees/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6443920" starting-state="hide">
            <fo:bookmark-title>text/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6449152" starting-state="hide">
            <fo:bookmark-title>text_string/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6454336" starting-state="hide">
            <fo:bookmark-title>tree/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6459072" starting-state="hide">
            <fo:bookmark-title>tree/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6477056" starting-state="hide">
            <fo:bookmark-title>try_after_expr/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6482304" starting-state="hide">
            <fo:bookmark-title>try_expr/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6487552" starting-state="hide">
            <fo:bookmark-title>try_expr/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6493520" starting-state="hide">
            <fo:bookmark-title>try_expr/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6517840" starting-state="hide">
            <fo:bookmark-title>try_expr_after/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6523744" starting-state="hide">
            <fo:bookmark-title>try_expr_body/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6529616" starting-state="hide">
            <fo:bookmark-title>try_expr_clauses/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6536448" starting-state="hide">
            <fo:bookmark-title>try_expr_handlers/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6542368" starting-state="hide">
            <fo:bookmark-title>tuple/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6551104" starting-state="hide">
            <fo:bookmark-title>tuple_elements/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6556992" starting-state="hide">
            <fo:bookmark-title>tuple_size/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6563808" starting-state="hide">
            <fo:bookmark-title>tuple_type/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6567024" starting-state="hide">
            <fo:bookmark-title>tuple_type/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6574992" starting-state="hide">
            <fo:bookmark-title>tuple_type_elements/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6584336" starting-state="hide">
            <fo:bookmark-title>type/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6651120" starting-state="hide">
            <fo:bookmark-title>type_application/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6660720" starting-state="hide">
            <fo:bookmark-title>type_application/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6670528" starting-state="hide">
            <fo:bookmark-title>type_application_arguments/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6676448" starting-state="hide">
            <fo:bookmark-title>type_application_name/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6682192" starting-state="hide">
            <fo:bookmark-title>type_union/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6688800" starting-state="hide">
            <fo:bookmark-title>type_union_types/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6694672" starting-state="hide">
            <fo:bookmark-title>typed_record_field/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6701952" starting-state="hide">
            <fo:bookmark-title>typed_record_field_body/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6707696" starting-state="hide">
            <fo:bookmark-title>typed_record_field_type/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6713440" starting-state="hide">
            <fo:bookmark-title>underscore/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6718976" starting-state="hide">
            <fo:bookmark-title>update_tree/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6726976" starting-state="hide">
            <fo:bookmark-title>user_type_application/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6735824" starting-state="hide">
            <fo:bookmark-title>user_type_application_arguments/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6741760" starting-state="hide">
            <fo:bookmark-title>user_type_application_name/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6747536" starting-state="hide">
            <fo:bookmark-title>variable/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6755920" starting-state="hide">
            <fo:bookmark-title>variable_literal/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6761056" starting-state="hide">
            <fo:bookmark-title>variable_name/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6766192" starting-state="hide">
            <fo:bookmark-title>warning_marker/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6774816" starting-state="hide">
            <fo:bookmark-title>warning_marker_info/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp6785520" starting-state="hide">
          <fo:bookmark-title>erl_syntax_lib</fo:bookmark-title>
          <fo:bookmark internal-destination="idp6801280" starting-state="hide">
            <fo:bookmark-title>analyze_application/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6811200" starting-state="hide">
            <fo:bookmark-title>analyze_attribute/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6834224" starting-state="hide">
            <fo:bookmark-title>analyze_export_attribute/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6841584" starting-state="hide">
            <fo:bookmark-title>analyze_file_attribute/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6849984" starting-state="hide">
            <fo:bookmark-title>analyze_form/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6868832" starting-state="hide">
            <fo:bookmark-title>analyze_forms/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6925456" starting-state="hide">
            <fo:bookmark-title>analyze_function/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6931552" starting-state="hide">
            <fo:bookmark-title>analyze_function_name/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6938832" starting-state="hide">
            <fo:bookmark-title>analyze_implicit_fun/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6947456" starting-state="hide">
            <fo:bookmark-title>analyze_import_attribute/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6957200" starting-state="hide">
            <fo:bookmark-title>analyze_module_attribute/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6964112" starting-state="hide">
            <fo:bookmark-title>analyze_record_attribute/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6979616" starting-state="hide">
            <fo:bookmark-title>analyze_record_expr/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7002128" starting-state="hide">
            <fo:bookmark-title>analyze_record_field/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7015872" starting-state="hide">
            <fo:bookmark-title>analyze_type_application/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7026016" starting-state="hide">
            <fo:bookmark-title>analyze_type_name/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7033168" starting-state="hide">
            <fo:bookmark-title>analyze_wild_attribute/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7042544" starting-state="hide">
            <fo:bookmark-title>annotate_bindings/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7049744" starting-state="hide">
            <fo:bookmark-title>annotate_bindings/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7062016" starting-state="hide">
            <fo:bookmark-title>fold/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7070368" starting-state="hide">
            <fo:bookmark-title>fold_subtrees/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7078048" starting-state="hide">
            <fo:bookmark-title>foldl_listlist/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7084000" starting-state="hide">
            <fo:bookmark-title>function_name_expansions/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7093568" starting-state="hide">
            <fo:bookmark-title>is_fail_expr/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7103264" starting-state="hide">
            <fo:bookmark-title>limit/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7109472" starting-state="hide">
            <fo:bookmark-title>limit/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7122288" starting-state="hide">
            <fo:bookmark-title>map/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7129696" starting-state="hide">
            <fo:bookmark-title>map_subtrees/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7135856" starting-state="hide">
            <fo:bookmark-title>mapfold/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7146224" starting-state="hide">
            <fo:bookmark-title>mapfold_subtrees/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7155376" starting-state="hide">
            <fo:bookmark-title>mapfoldl_listlist/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7159264" starting-state="hide">
            <fo:bookmark-title>new_variable_name/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7166768" starting-state="hide">
            <fo:bookmark-title>new_variable_name/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7176752" starting-state="hide">
            <fo:bookmark-title>new_variable_names/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7182384" starting-state="hide">
            <fo:bookmark-title>new_variable_names/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7188784" starting-state="hide">
            <fo:bookmark-title>strip_comments/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7192832" starting-state="hide">
            <fo:bookmark-title>to_comment/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7196608" starting-state="hide">
            <fo:bookmark-title>to_comment/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7204432" starting-state="hide">
            <fo:bookmark-title>to_comment/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7216400" starting-state="hide">
            <fo:bookmark-title>variables/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp7227392" starting-state="hide">
          <fo:bookmark-title>erl_tidy</fo:bookmark-title>
          <fo:bookmark internal-destination="idp7238464" starting-state="hide">
            <fo:bookmark-title>dir/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7241664" starting-state="hide">
            <fo:bookmark-title>dir/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7244880" starting-state="hide">
            <fo:bookmark-title>dir/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7264000" starting-state="hide">
            <fo:bookmark-title>file/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7267216" starting-state="hide">
            <fo:bookmark-title>file/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7289344" starting-state="hide">
            <fo:bookmark-title>module/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7293120" starting-state="hide">
            <fo:bookmark-title>module/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp7338288" starting-state="hide">
          <fo:bookmark-title>igor</fo:bookmark-title>
          <fo:bookmark internal-destination="idp7359904" starting-state="hide">
            <fo:bookmark-title>create_stubs/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7371856" starting-state="hide">
            <fo:bookmark-title>merge/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7376528" starting-state="hide">
            <fo:bookmark-title>merge/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7418912" starting-state="hide">
            <fo:bookmark-title>merge_files/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7424352" starting-state="hide">
            <fo:bookmark-title>merge_files/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7461488" starting-state="hide">
            <fo:bookmark-title>merge_sources/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7517200" starting-state="hide">
            <fo:bookmark-title>parse_transform/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7529024" starting-state="hide">
            <fo:bookmark-title>rename/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7533008" starting-state="hide">
            <fo:bookmark-title>rename/3</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp7570384" starting-state="hide">
          <fo:bookmark-title>merl</fo:bookmark-title>
          <fo:bookmark internal-destination="idp7706096" starting-state="hide">
            <fo:bookmark-title>alpha/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7712912" starting-state="hide">
            <fo:bookmark-title>compile/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7716144" starting-state="hide">
            <fo:bookmark-title>compile/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7720976" starting-state="hide">
            <fo:bookmark-title>compile_and_load/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7724240" starting-state="hide">
            <fo:bookmark-title>compile_and_load/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7729120" starting-state="hide">
            <fo:bookmark-title>match/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7736384" starting-state="hide">
            <fo:bookmark-title>meta_template/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7742400" starting-state="hide">
            <fo:bookmark-title>print/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7745040" starting-state="hide">
            <fo:bookmark-title>qquote/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7749584" starting-state="hide">
            <fo:bookmark-title>qquote/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7757728" starting-state="hide">
            <fo:bookmark-title>quote/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7761488" starting-state="hide">
            <fo:bookmark-title>quote/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7768848" starting-state="hide">
            <fo:bookmark-title>show/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7771504" starting-state="hide">
            <fo:bookmark-title>subst/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7778608" starting-state="hide">
            <fo:bookmark-title>switch/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7784576" starting-state="hide">
            <fo:bookmark-title>template/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7792224" starting-state="hide">
            <fo:bookmark-title>template_vars/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7796272" starting-state="hide">
            <fo:bookmark-title>term/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7799376" starting-state="hide">
            <fo:bookmark-title>tree/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7805616" starting-state="hide">
            <fo:bookmark-title>tsubst/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7812496" starting-state="hide">
            <fo:bookmark-title>var/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp7821056" starting-state="hide">
          <fo:bookmark-title>merl_transform</fo:bookmark-title>
          <fo:bookmark internal-destination="idp7825344" starting-state="hide">
            <fo:bookmark-title>parse_transform/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp7832928" starting-state="hide">
          <fo:bookmark-title>prettypr</fo:bookmark-title>
          <fo:bookmark internal-destination="idp7851184" starting-state="hide">
            <fo:bookmark-title>above/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7859456" starting-state="hide">
            <fo:bookmark-title>beside/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7867168" starting-state="hide">
            <fo:bookmark-title>best/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7877280" starting-state="hide">
            <fo:bookmark-title>break/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7881872" starting-state="hide">
            <fo:bookmark-title>empty/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7889936" starting-state="hide">
            <fo:bookmark-title>floating/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7894432" starting-state="hide">
            <fo:bookmark-title>floating/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7900768" starting-state="hide">
            <fo:bookmark-title>follow/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7905984" starting-state="hide">
            <fo:bookmark-title>follow/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7914576" starting-state="hide">
            <fo:bookmark-title>format/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7918512" starting-state="hide">
            <fo:bookmark-title>format/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7922496" starting-state="hide">
            <fo:bookmark-title>format/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7930928" starting-state="hide">
            <fo:bookmark-title>nest/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7935760" starting-state="hide">
            <fo:bookmark-title>null_text/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7944032" starting-state="hide">
            <fo:bookmark-title>par/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7948528" starting-state="hide">
            <fo:bookmark-title>par/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7967744" starting-state="hide">
            <fo:bookmark-title>sep/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7976368" starting-state="hide">
            <fo:bookmark-title>text/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7984432" starting-state="hide">
            <fo:bookmark-title>text_par/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7988224" starting-state="hide">
            <fo:bookmark-title>text_par/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
      </fo:bookmark>
    </fo:bookmark>
  </fo:bookmark-tree>
  <fo:page-sequence font-family="sans-serif" force-page-count="even" master-reference="cover" font-size="10pt">
    <fo:flow flow-name="xsl-region-body">
      <fo:block space-before="130mm" space-before.conditionality="retain" text-align="end">
        <fo:external-graphic src="/root/download/otp_src_20.0/bootstrap/lib/erl_docgen/priv/images/erlang-logo.gif"/>
      </fo:block>
      <fo:block id="cover-page" border-before-style="solid" border-before-width="10pt" border-color="#960003" font-size="2.3em" padding-before="0.5em" text-align="end">Syntax_Tools</fo:block>
      <fo:block font-size="0.9em" text-align="end">Copyright © 2006-2017 Ericsson AB. All Rights Reserved.</fo:block>
      <fo:block font-size="0.9em" text-align="end">Syntax_Tools 2.1.2</fo:block>
      <fo:block font-size="0.9em" text-align="end">July 12, 2017</fo:block>
      <fo:block padding-before="2.5em" font-size="1.33em" font-weight="bold" color="#C00" text-align="end"/>
      <fo:block break-before="page" border-before-style="solid" border-before-width="1pt" border-color="#960003" font-weight="bold" padding-before="0.5em" space-before="200mm" space-before.conditionality="retain">Copyright © 2006-2017 Ericsson AB. All Rights Reserved.</fo:block>
      <fo:block font-size="0.9em">
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
 
          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
    
    Ericsson AB. All Rights Reserved..
        </fo:block>
      <fo:block font-size="0.9em" font-weight="bold" space-before="2em">July 12, 2017</fo:block>
    </fo:flow>
  </fo:page-sequence>
  <fo:page-sequence font-family="serif" master-reference="document" initial-page-number="1" font-size="10pt">
    <fo:static-content flow-name="left-header">
      <fo:block text-align="start" border-after-style="solid" border-after-width="2pt" border-color="#960003" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">
        <fo:retrieve-marker retrieve-boundary="page-sequence" retrieve-class-name="chapter-title" retrieve-position="first-including-carryover"/>
      </fo:block>
    </fo:static-content>
    <fo:static-content flow-name="right-header">
      <fo:block text-align="end" border-after-style="solid" border-after-width="2pt" border-color="#960003" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">
        <fo:retrieve-marker retrieve-boundary="page-sequence" retrieve-class-name="chapter-title" retrieve-position="first-including-carryover"/>
      </fo:block>
    </fo:static-content>
    <fo:static-content flow-name="left-footer">
      <fo:block text-align="start" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold"><fo:page-number/> | Ericsson AB. All Rights Reserved.:
            Syntax_Tools</fo:block>
    </fo:static-content>
    <fo:static-content flow-name="right-footer">
      <fo:block text-align="end" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">Ericsson AB. All Rights Reserved.:
            Syntax_Tools | <fo:page-number/></fo:block>
    </fo:static-content>
    <fo:flow flow-name="xsl-region-body"><fo:block/><fo:block id="idp20928" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">1   
      Syntax_Tools User's Guide</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Syntax_Tools</fo:inline> contains modules for handling abstract
      Erlang syntax trees, in a way that is compatible with the "parse
      trees" of the STDLIB module <fo:inline font-family="monospace">erl_parse</fo:inline>, together with
      utilities for reading source files in unusual ways and
      pretty-printing syntax trees. Also included is an amazing module
      merger and renamer called Igor, as well as an automatic
      code-cleaner.</fo:block>
  <fo:block id="idp429296" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.1  Erlang Syntax and Metaprogramming tools
</fo:marker>1.1  Erlang Syntax and Metaprogramming tools
</fo:block><fo:block id="idp426272" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.1 
      Overview</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This package contains modules for handling abstract syntax trees (ASTs)
in Erlang, in a way that is compatible with the "abstract format" parse
trees of the stdlib module <fo:inline font-family="monospace">erl_parse</fo:inline>, together with utilities for reading
source files, <fo:inline font-style="italic">pretty-printing syntax trees</fo:inline>, <fo:inline font-style="italic">merging and renaming modules</fo:inline>, <fo:inline font-style="italic">cleaning up obsolete
constructs</fo:inline>, and doing <fo:inline font-style="italic">metaprogramming</fo:inline> in Erlang.</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The abstract layer (defined in <fo:inline font-style="italic">erl_syntax</fo:inline>) is nicely
structured and the node types are context-independent. The layer makes
it possible to transparently attach source-code comments and user
annotations to nodes of the tree. Using the abstract layer makes
applications less sensitive to changes in the <fo:inline font-style="italic">erl_parse(3)</fo:inline>
data structures, only requiring the <fo:inline font-family="monospace">erl_syntax</fo:inline> module to be up-to-date.</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The pretty printer <fo:inline font-style="italic">erl_prettypr</fo:inline> is implemented on top of the
library module <fo:inline font-style="italic">prettypr</fo:inline>: this is a powerful and flexible generic
pretty printing library, which is also distributed separately.</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For a short demonstration of parsing and pretty-printing, simply
compile the included module <fo:inline font-weight="bold"><fo:basic-link external-destination="href">demo.erl</fo:basic-link></fo:inline>,
and execute <fo:inline font-family="monospace">demo:run()</fo:inline> from the Erlang shell. It will compile the
remaining modules and give you further instructions.</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Also try the <fo:inline font-style="italic">erl_tidy</fo:inline> module, as follows:
</fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">   erl_tidy:dir("any-erlang-source-dir", [test, old_guard_tests]).</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
(the <fo:inline font-family="monospace">test</fo:inline> option assures that no files are modified).
</fo:block><fo:block id="idp34880" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">2   
      Reference Manual</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Syntax_Tools</fo:inline> contains modules for handling abstract
      Erlang syntax trees, in a way that is compatible with the "external
      format" parse trees of the STDLIB module <fo:inline font-family="monospace">erl_parse</fo:inline>, together
      with utilities for reading source files, pretty-printing syntax trees,
      merging and renaming modules, cleaning up obsolete constructs, and
      doing metaprogramming in Erlang.</fo:block>
  <fo:block page-break-before="always" id="idp1147520" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">epp_dodger</fo:marker>epp_dodger</fo:block>Erlang module</fo:block>
<fo:block/>
epp_dodger
<fo:block/>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">epp_dodger</fo:inline> - bypasses the Erlang preprocessor.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module tokenises and parses most Erlang source code without
  expanding preprocessor directives and macro applications, as long as
  these are syntactically "well-behaved". Because the normal parse
  trees of the <fo:inline font-family="monospace">erl_parse</fo:inline> module cannot represent these things
  (normally, they are expanded by the Erlang preprocessor <fo:inline font-style="italic">epp(3)</fo:inline> before the parser sees them), an extended syntax tree
  is created, using the <fo:inline font-style="italic">erl_syntax</fo:inline> module.</fo:block>
<fo:block id="idp1143440" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">DATA TYPES</fo:block>

<fo:block space-after="0.25em" space-before="0.25em">
<fo:block keep-with-next.within-page="always">errorinfo() = {ErrorLine::integer(), Module::atom(), Descriptor::term()}</fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is a so-called Erlang I/O ErrorInfo structure; see the <fo:inline font-style="italic">io(3)</fo:inline> module for details.</fo:block>
</fo:block></fo:block-container>
</fo:block>
<fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1139344">parse(Dev::IODevice) -&gt; {ok, Forms} | {error, errorinfo()}</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">parse(IODevice, 1)</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1135104">parse(Dev::IODevice, L::StartLine) -&gt; {ok, Forms} | {error, errorinfo()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">IODevice = pid()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">StartLine = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Forms = [<fo:inline font-style="italic">erl_syntax:syntaxTree()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">parse(IODevice, StartLine, [])</fo:inline>.</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">parse/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1127696">parse(Dev::IODevice, L0::StartLine, Options) -&gt; {ok, Forms} | {error, errorinfo()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">IODevice = pid()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">StartLine = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = [term()]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Forms = [<fo:inline font-style="italic">erl_syntax:syntaxTree()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Reads and parses program text from an I/O stream. Characters are
  read from <fo:inline font-family="monospace">IODevice</fo:inline> until end-of-file; apart from this, the
  behaviour is the same as for <fo:inline font-style="italic">parse_file/2</fo:inline>. <fo:inline font-family="monospace">StartLine</fo:inline> is the
  initial line number, which should be a positive integer.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">parse/2</fo:inline>, <fo:inline font-style="italic">parse_file/2</fo:inline>, <fo:inline font-style="italic">parse_form/2</fo:inline>, <fo:inline font-style="italic">quick_parse/3</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1774960">parse_file(File) -&gt; {ok, Forms} | {error, errorinfo()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">File = <fo:inline font-style="italic">file:filename()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Forms = [<fo:inline font-style="italic">erl_syntax:syntaxTree()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">parse_file(File, [])</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1768848">parse_file(File, Options) -&gt; {ok, Forms} | {error, errorinfo()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">File = <fo:inline font-style="italic">file:filename()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = [term()]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Forms = [<fo:inline font-style="italic">erl_syntax:syntaxTree()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Reads and parses a file. If successful, <fo:inline font-family="monospace">{ok, Forms}</fo:inline>
  is returned, where <fo:inline font-family="monospace">Forms</fo:inline> is a list of abstract syntax
  trees representing the "program forms" of the file (cf.
  <fo:inline font-family="monospace">erl_syntax:is_form/1</fo:inline>). Otherwise, <fo:inline font-family="monospace">{error, errorinfo()}</fo:inline> is
  returned, typically if the file could not be opened. Note that
  parse errors show up as error markers in the returned list of
  forms; they do not cause this function to fail or return
  <fo:inline font-family="monospace">{error, errorinfo()}</fo:inline>.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Options:
  </fo:block><fo:block space-after="0.25em" space-before="0.25em">
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{no_fail, boolean()}</fo:inline></fo:block>
    <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">true</fo:inline>, this makes <fo:inline font-family="monospace">epp_dodger</fo:inline> replace any program forms
    that could not be parsed with nodes of type <fo:inline font-family="monospace">text</fo:inline> (see <fo:inline font-style="italic">erl_syntax:text/1</fo:inline>), representing the raw token sequence of the
    form, instead of reporting a parse error. The default value is
    <fo:inline font-family="monospace">false</fo:inline>.</fo:block></fo:block></fo:block-container>
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{clever, boolean()}</fo:inline></fo:block>
    <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If set to <fo:inline font-family="monospace">true</fo:inline>, this makes <fo:inline font-family="monospace">epp_dodger</fo:inline> try to repair the
    source code as it seems fit, in certain cases where parsing would
    otherwise fail. Currently, it inserts <fo:inline font-family="monospace">++</fo:inline>-operators between string
    literals and macros where it looks like concatenation was intended.
    The default value is <fo:inline font-family="monospace">false</fo:inline>.</fo:block></fo:block></fo:block-container>
  </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">parse/2</fo:inline>, <fo:inline font-style="italic">quick_parse_file/1</fo:inline>, <fo:inline font-style="italic">erl_syntax:is_form/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp780320">parse_form(Dev::IODevice, L0::StartLine) -&gt; {ok, Form, LineNo} | {eof, LineNo} | {error, errorinfo(), LineNo}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">IODevice = pid()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">StartLine = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Form = <fo:inline font-style="italic">erl_syntax:syntaxTree()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LineNo = integer()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">parse_form(IODevice, StartLine, [])</fo:inline>.</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">quick_parse_form/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp771664">parse_form(Dev::IODevice, L0::StartLine, Options) -&gt; {ok, Form, LineNo} | {eof, LineNo} | {error, errorinfo(), LineNo}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">IODevice = pid()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">StartLine = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = [term()]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Form = <fo:inline font-style="italic">erl_syntax:syntaxTree()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LineNo = integer()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Reads and parses a single program form from an I/O stream.
  Characters are read from <fo:inline font-family="monospace">IODevice</fo:inline> until an end-of-form
  marker is found (a period character followed by whitespace), or until
  end-of-file; apart from this, the behaviour is similar to that of
  <fo:inline font-family="monospace">parse/3</fo:inline>, except that the return values also contain the
  final line number given that <fo:inline font-family="monospace">StartLine</fo:inline> is the initial
  line number, and that <fo:inline font-family="monospace">{eof, LineNo}</fo:inline> may be returned.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">parse/3</fo:inline>, <fo:inline font-style="italic">parse_form/2</fo:inline>, <fo:inline font-style="italic">quick_parse_form/3</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp762608">quick_parse(Dev::IODevice) -&gt; {ok, Forms} | {error, errorinfo()}</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">quick_parse(IODevice, 1)</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1273328">quick_parse(Dev::IODevice, L::StartLine) -&gt; {ok, Forms} | {error, errorinfo()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">IODevice = pid()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">StartLine = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Forms = [<fo:inline font-style="italic">erl_syntax:syntaxTree()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">quick_parse(IODevice, StartLine, [])</fo:inline>.</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">quick_parse/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1266256">quick_parse(Dev::IODevice, L0::StartLine, Options) -&gt; {ok, Forms} | {error, errorinfo()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">IODevice = pid()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">StartLine = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = [term()]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Forms = [<fo:inline font-style="italic">erl_syntax:syntaxTree()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Similar to <fo:inline font-style="italic">parse/3</fo:inline>, but does a more quick-and-dirty
  processing of the code. See <fo:inline font-style="italic">quick_parse_file/2</fo:inline> for details.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">parse/3</fo:inline>, <fo:inline font-style="italic">quick_parse/2</fo:inline>, <fo:inline font-style="italic">quick_parse_file/2</fo:inline>, <fo:inline font-style="italic">quick_parse_form/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1243536">quick_parse_file(File) -&gt; {ok, Forms} | {error, errorinfo()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">File = <fo:inline font-style="italic">file:filename()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Forms = [<fo:inline font-style="italic">erl_syntax:syntaxTree()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">quick_parse_file(File, [])</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1237744">quick_parse_file(File, Options) -&gt; {ok, Forms} | {error, errorinfo()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">File = <fo:inline font-style="italic">file:filename()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = [term()]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Forms = [<fo:inline font-style="italic">erl_syntax:syntaxTree()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Similar to <fo:inline font-style="italic">parse_file/2</fo:inline>, but does a more quick-and-dirty  
processing of the code. Macro definitions and other preprocessor  
directives are discarded, and all macro calls are replaced with  
atoms. This is useful when only the main structure of the code is of  
interest, and not the details. Furthermore, the quick-parse method  
can usually handle more strange cases than the normal, more exact  
parsing.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Options: see <fo:inline font-style="italic">parse_file/2</fo:inline>. Note however that for
  <fo:inline font-family="monospace">quick_parse_file/2</fo:inline>, the option <fo:inline font-family="monospace">no_fail</fo:inline> is <fo:inline font-family="monospace">true</fo:inline> by default.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">parse_file/2</fo:inline>, <fo:inline font-style="italic">quick_parse/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp944528">quick_parse_form(Dev::IODevice, L0::StartLine) -&gt; {ok, Form, LineNo} | {eof, LineNo} | {error, errorinfo(), LineNo}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">IODevice = pid()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">StartLine = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Form = <fo:inline font-style="italic">erl_syntax:syntaxTree()</fo:inline> | none</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LineNo = integer()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">quick_parse_form(IODevice, StartLine, [])</fo:inline>.</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">parse_form/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1224544">quick_parse_form(Dev::IODevice, L0::StartLine, Options) -&gt; {ok, Form, LineNo} | {eof, LineNo} | {error, errorinfo(), LineNo}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">IODevice = pid()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">StartLine = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = [term()]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Form = <fo:inline font-style="italic">erl_syntax:syntaxTree()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LineNo = integer()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Similar to <fo:inline font-style="italic">parse_form/3</fo:inline>, but does a more quick-and-dirty
  processing of the code. See <fo:inline font-style="italic">quick_parse_file/2</fo:inline> for details.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">parse/3</fo:inline>, <fo:inline font-style="italic">parse_form/3</fo:inline>, <fo:inline font-style="italic">quick_parse_form/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idm7040">tokens_to_string(Tokens::[term()]) -&gt; string()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Generates a string corresponding to the given token sequence.
  The string can be re-tokenized to yield the same token list again.</fo:block>
</fo:block>



Richard Carlsson
carlsson.richard@gmail.com<fo:block page-break-before="always" id="idp1354096" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">erl_comment_scan</fo:marker>erl_comment_scan</fo:block>Erlang module</fo:block>
<fo:block/>
erl_comment_scan
<fo:block/>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Functions for reading comment lines from Erlang source code.</fo:block>
<fo:block id="idp257408" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">DATA TYPES</fo:block>

<fo:block space-after="0.25em" space-before="0.25em">
<fo:block keep-with-next.within-page="always">comment() = {Line::integer(), Column::integer(), Indentation::integer(), Text::[string()]}</fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/> </fo:block></fo:block-container>
</fo:block>
<fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp253952">file(FileName::file:filename()) -&gt; [Comment]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Comment = {Line, Column, Indentation, Text}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Line = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Column = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Indentation = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Text = [string()]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Extracts comments from an Erlang source code file. Returns a
  list of entries representing <fo:inline font-weight="bold">multi-line</fo:inline> comments, listed in
  order of increasing line-numbers. For each entry, <fo:inline font-family="monospace">Text</fo:inline>
  is a list of strings representing the consecutive comment lines in
  top-down order; the strings contain <fo:inline font-weight="bold">all</fo:inline> characters following
  (but not including) the first comment-introducing <fo:inline font-family="monospace">%</fo:inline>  
character on the line, up to (but not including) the line-terminating  
newline.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Furthermore, <fo:inline font-family="monospace">Line</fo:inline> is the line number and
  <fo:inline font-family="monospace">Column</fo:inline> the left column of the comment (i.e., the column
  of the comment-introducing <fo:inline font-family="monospace">%</fo:inline> character).
  <fo:inline font-family="monospace">Indent</fo:inline> is the indentation (or padding), measured in
  character positions between the last non-whitespace character before
  the comment (or the left margin), and the left column of the comment.
  <fo:inline font-family="monospace">Line</fo:inline> and <fo:inline font-family="monospace">Column</fo:inline> are always positive
  integers, and <fo:inline font-family="monospace">Indentation</fo:inline> is a nonnegative integer.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Evaluation exits with reason <fo:inline font-family="monospace">{read, Reason}</fo:inline> if a read
  error occurred, where <fo:inline font-family="monospace">Reason</fo:inline> is an atom corresponding to
  a Posix error code; see the module <fo:inline font-style="italic">file(3)</fo:inline> for details.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1275504">join_lines(Lines::[CommentLine]) -&gt; [Comment]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CommentLine = {Line, Column, Indent, string()}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Line = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Column = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Indent = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Comment = {Line, Column, Indent, Text}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Text = [string()]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Joins individual comment lines into multi-line comments. The
  input is a list of entries representing individual comment lines,
  <fo:inline font-weight="bold">in order of decreasing line-numbers</fo:inline>; see
  <fo:inline font-style="italic">scan_lines/1</fo:inline> for details. The result is a list of
  entries representing <fo:inline font-weight="bold">multi-line</fo:inline> comments, <fo:inline font-weight="bold">still listed
  in order of decreasing line-numbers</fo:inline>, but where for each entry,
  <fo:inline font-family="monospace">Text</fo:inline> is a list of consecutive comment lines in order of
  <fo:inline font-weight="bold">increasing</fo:inline> line-numbers (i.e., top-down).
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">scan_lines/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp282928">scan_lines(Text::string()) -&gt; [CommentLine]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CommentLine = {Line, Column, Indent, Text}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Line = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Column = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Indent = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Text = string()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Extracts individual comment lines from a source code string.
  Returns a list of comment lines found in the text, listed in order of
  <fo:inline font-weight="bold">decreasing</fo:inline> line-numbers, i.e., the last comment line in the
  input is first in the resulting list. <fo:inline font-family="monospace">Text</fo:inline> is a single
  string, containing all characters following (but not including) the
  first comment-introducing <fo:inline font-family="monospace">%</fo:inline> character on the line, up
  to (but not including) the line-terminating newline. For details on
  <fo:inline font-family="monospace">Line</fo:inline>, <fo:inline font-family="monospace">Column</fo:inline> and <fo:inline font-family="monospace">Indent</fo:inline>, see <fo:inline font-style="italic">file/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1208032">string(Text::string()) -&gt; [Comment]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Comment = {Line, Column, Indentation, Text}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Line = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Column = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Indentation = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Text = [string()]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Extracts comments from a string containing Erlang source code.
  Except for reading directly from a string, the behaviour is the same
  as for <fo:inline font-style="italic">file/1</fo:inline>.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">file/1</fo:inline>.</fo:block>
</fo:block>



Richard Carlsson
carlsson.richard@gmail.com<fo:block page-break-before="always" id="idp1883808" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">erl_prettypr</fo:marker>erl_prettypr</fo:block>Erlang module</fo:block>
<fo:block/>
erl_prettypr
<fo:block/>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Pretty printing of abstract Erlang syntax trees.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module is a front end to the pretty-printing library module
  <fo:inline font-family="monospace">prettypr</fo:inline>, for text formatting of abstract syntax trees defined by
  the module <fo:inline font-family="monospace">erl_syntax</fo:inline>.</fo:block>
<fo:block id="idp759824" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">DATA TYPES</fo:block>

<fo:block space-after="0.25em" space-before="0.25em">
<fo:block keep-with-next.within-page="always">context()</fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A representation of the current context of the
  pretty-printer. Can be accessed in hook functions.
 </fo:block>
</fo:block></fo:block-container>
<fo:block keep-with-next.within-page="always">hook() = (<fo:inline font-style="italic">syntaxTree()</fo:inline>, <fo:inline font-style="italic">context()</fo:inline>, Continuation) -&gt; <fo:inline font-style="italic">prettypr:document()</fo:inline></fo:block>
<fo:block-container><fo:block start-indent="2em">
<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Continuation = (<fo:inline font-style="italic">syntaxTree()</fo:inline>, <fo:inline font-style="italic">context()</fo:inline>) -&gt; <fo:inline font-style="italic">prettypr:document()</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A call-back function for user-controlled formatting. See <fo:inline font-style="italic">format/2</fo:inline>.
 </fo:block>
</fo:block></fo:block-container>
<fo:block keep-with-next.within-page="always">syntaxTree() = <fo:inline font-style="italic">erl_syntax:syntaxTree()</fo:inline></fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An abstract syntax tree. See the <fo:inline font-style="italic">erl_syntax</fo:inline> module for
  details.
 </fo:block>
</fo:block></fo:block-container>
</fo:block>
<fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1744416">best(Tree::syntaxTree()) -&gt; empty | prettypr:document()</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">best(Tree, [])</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1748416">best(Tree::syntaxTree(), Options::[term()]) -&gt; empty | prettypr:document()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a fixed "best" abstract layout for a syntax tree. This
  is similar to the <fo:inline font-family="monospace">layout/2</fo:inline> function, except that here, the final
  layout has been selected with respect to the given options. The atom
  <fo:inline font-family="monospace">empty</fo:inline> is returned if no such layout could be produced. For
  information on the options, see the <fo:inline font-family="monospace">format/2</fo:inline> function.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">best/1</fo:inline>, <fo:inline font-style="italic">format/2</fo:inline>, <fo:inline font-style="italic">layout/2</fo:inline>, <fo:inline font-style="italic">prettypr:best/3</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1373520">format(Tree::syntaxTree()) -&gt; string()</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">format(Tree, [])</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1377072">format(Tree::syntaxTree(), Options::[term()]) -&gt; string()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Prettyprint-formats an abstract Erlang syntax tree as text. For
  example, if you have a <fo:inline font-family="monospace">.beam</fo:inline> file that has been compiled with
  <fo:inline font-family="monospace">debug_info</fo:inline>, the following should print the source code for the
  module (as it looks in the debug info representation):
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">     {ok,{_,[{abstract_code,{_,AC}}]}} =
             beam_lib:chunks("myfile.beam",[abstract_code]),
     io:put_chars(erl_prettypr:format(erl_syntax:form_list(AC)))</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
 
  Available options:
  </fo:block><fo:block space-after="0.25em" space-before="0.25em">
    <fo:block keep-with-next.within-page="always">{hook, none | <fo:inline font-style="italic">hook()</fo:inline>}</fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Unless the value is <fo:inline font-family="monospace">none</fo:inline>, the given function is called
        for each node whose list of annotations is not empty; see below
        for details. The default value is <fo:inline font-family="monospace">none</fo:inline>.</fo:block></fo:block></fo:block-container>
 
    <fo:block keep-with-next.within-page="always">{paper, integer()}</fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the preferred maximum number of characters on any
        line, including indentation. The default value is 80.</fo:block></fo:block></fo:block-container>
 
    <fo:block keep-with-next.within-page="always">{ribbon, integer()}</fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the preferred maximum number of characters on any
        line, not counting indentation. The default value is 65.</fo:block></fo:block></fo:block-container>
 
    <fo:block keep-with-next.within-page="always">{user, term()}</fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">User-specific data for use in hook functions. The default
        value is <fo:inline font-family="monospace">undefined</fo:inline>.</fo:block></fo:block></fo:block-container>
    <fo:block keep-with-next.within-page="always">{encoding, epp:source_encoding()}</fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the encoding of the generated file.</fo:block></fo:block></fo:block-container>
  </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
 
  A hook function (cf. the <fo:inline font-style="italic">hook()</fo:inline> type) is passed the current
  syntax tree node, the context, and a continuation. The context can be
  examined and manipulated by functions such as <fo:inline font-family="monospace">get_ctxt_user/1</fo:inline> and
  <fo:inline font-family="monospace">set_ctxt_user/2</fo:inline>. The hook must return a "document" data structure
  (see <fo:inline font-style="italic">layout/2</fo:inline> and <fo:inline font-style="italic">best/2</fo:inline>); this may be constructed in
  part or in whole by applying the continuation function. For example,
  the following is a trivial hook:
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">      fun (Node, Ctxt, Cont) -&gt; Cont(Node, Ctxt) end</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  which yields the same result as if no hook was given.
  The following, however:
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">      fun (Node, Ctxt, Cont) -&gt;
          Doc = Cont(Node, Ctxt),
          prettypr:beside(prettypr:text("&lt;b&gt;"),
                          prettypr:beside(Doc,
                                          prettypr:text("&lt;/b&gt;")))
      end</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  will place the text of any annotated node (regardless of the
  annotation data) between HTML "boldface begin" and "boldface end"
  tags.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">erl_syntax</fo:inline>, <fo:inline font-style="italic">best/2</fo:inline>, <fo:inline font-style="italic">format/1</fo:inline>, <fo:inline font-style="italic">get_ctxt_user/1</fo:inline>, <fo:inline font-style="italic">layout/2</fo:inline>, <fo:inline font-style="italic">set_ctxt_user/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1299616">get_ctxt_hook(Ctxt::context()) -&gt; hook()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the hook function field of the prettyprinter context.</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">set_ctxt_hook/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1304320">get_ctxt_linewidth(Ctxt::context()) -&gt; integer()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the line widh field of the prettyprinter context.</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">set_ctxt_linewidth/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1308544">get_ctxt_paperwidth(Ctxt::context()) -&gt; integer()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the paper widh field of the prettyprinter context.</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">set_ctxt_paperwidth/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1478256">get_ctxt_precedence(Ctxt::context()) -&gt; integer()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the operator precedence field of the prettyprinter
  context.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">set_ctxt_precedence/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1482480">get_ctxt_user(Ctxt::context()) -&gt; term()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the user data field of the prettyprinter context.</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">set_ctxt_user/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1486736">layout(Tree::syntaxTree()) -&gt; prettypr:document()</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">layout(Tree, [])</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1490736">layout(Tree::syntaxTree(), Options::[term()]) -&gt; prettypr:document()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract document layout for a syntax tree. The
  result represents a set of possible layouts (cf. module <fo:inline font-family="monospace">prettypr</fo:inline>).
  For information on the options, see <fo:inline font-style="italic">format/2</fo:inline>; note, however,
  that the <fo:inline font-family="monospace">paper</fo:inline> and <fo:inline font-family="monospace">ribbon</fo:inline> options are ignored by this function.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function provides a low-level interface to the pretty printer,
  returning a flexible representation of possible layouts, independent
  of the paper width eventually to be used for formatting. This can be
  included as part of another document and/or further processed
  directly by the functions in the <fo:inline font-family="monospace">prettypr</fo:inline> module, or used in a hook
  function (see <fo:inline font-family="monospace">format/2</fo:inline> for details).
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">prettypr</fo:inline>, <fo:inline font-style="italic">format/2</fo:inline>, <fo:inline font-style="italic">layout/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1500208">set_ctxt_hook(Ctxt::context(), Hook::hook()) -&gt; context()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Updates the hook function field of the prettyprinter context.</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">get_ctxt_hook/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1505520">set_ctxt_linewidth(Ctxt::context(), W::integer()) -&gt; context()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Updates the line widh field of the prettyprinter context.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note: changing this value (and passing the resulting context to a
  continuation function) does not affect the normal formatting, but may
  affect user-defined behaviour in hook functions.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">get_ctxt_linewidth/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1510816">set_ctxt_paperwidth(Ctxt::context(), W::integer()) -&gt; context()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Updates the paper widh field of the prettyprinter context.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note: changing this value (and passing the resulting context to a
  continuation function) does not affect the normal formatting, but may
  affect user-defined behaviour in hook functions.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">get_ctxt_paperwidth/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1516160">set_ctxt_precedence(Ctxt::context(), Prec::integer()) -&gt; context()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Updates the operator precedence field of the prettyprinter
  context. See the <fo:inline font-style="italic">erl_parse(3)</fo:inline> module for operator precedences.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">erl_parse(3)</fo:inline>, <fo:inline font-style="italic">get_ctxt_precedence/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1522112">set_ctxt_user(Ctxt::context(), X::term()) -&gt; context()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Updates the user data field of the prettyprinter context.</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">get_ctxt_user/1</fo:inline>.</fo:block>
</fo:block>



Richard Carlsson
carlsson.richard@gmail.com<fo:block page-break-before="always" id="idp1532112" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">erl_recomment</fo:marker>erl_recomment</fo:block>Erlang module</fo:block>
<fo:block/>
erl_recomment
<fo:block/>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Inserting comments into abstract Erlang syntax trees</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module contains functions for inserting comments, described
  by position, indentation and text, as attachments on an abstract
  syntax tree, at the correct places.</fo:block>
<fo:block id="idp1534416" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">DATA TYPES</fo:block>

<fo:block space-after="0.25em" space-before="0.25em">
<fo:block keep-with-next.within-page="always">syntaxTree() = <fo:inline font-style="italic">erl_syntax:syntaxTree()</fo:inline></fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An abstract syntax
  tree. See the <fo:inline font-style="italic">erl_syntax</fo:inline> module for details.</fo:block>
</fo:block></fo:block-container>
</fo:block>
<fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1539024">quick_recomment_forms(Tree::Forms, Comments::[Comment]) -&gt; syntaxTree()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Forms = <fo:inline font-style="italic">syntaxTree()</fo:inline> | [<fo:inline font-style="italic">syntaxTree()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Comment = {Line, Column, Indentation, Text}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Line = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Column = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Indentation = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Text = [string()]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Like <fo:inline font-style="italic">recomment_forms/2</fo:inline>, but only inserts top-level
  comments. Comments within function definitions or declarations
  ("forms") are simply ignored.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1545856">recomment_forms(Tree::Forms, Comments::[Comment]) -&gt; syntaxTree()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Forms = <fo:inline font-style="italic">syntaxTree()</fo:inline> | [<fo:inline font-style="italic">syntaxTree()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Comment = {Line, Column, Indentation, Text}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Line = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Column = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Indentation = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Text = [string()]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Attaches comments to the syntax tree/trees representing a
  program. The given <fo:inline font-family="monospace">Forms</fo:inline> should be a single syntax tree
  of type <fo:inline font-family="monospace">form_list</fo:inline>, or a list of syntax trees
  representing "program forms". The syntax trees must contain valid
  position information (for details, see
  <fo:inline font-family="monospace">recomment_tree/2</fo:inline>). The result is a corresponding syntax
  tree of type <fo:inline font-family="monospace">form_list</fo:inline> in which all comments in the list
  <fo:inline font-family="monospace">Comments</fo:inline> have been attached at the proper places.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Assuming <fo:inline font-family="monospace">Forms</fo:inline> represents a program (or any sequence
  of "program forms"), any comments whose first lines are not directly
  associated with a specific program form will become standalone
  comments inserted between the neighbouring program forms.
  Furthermore, comments whose column position is less than or equal to
  one will not be attached to a program form that begins at a
  conflicting line number (this can happen with preprocessor-generated
  <fo:inline font-family="monospace">line</fo:inline>-attributes).</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Forms</fo:inline> is a syntax tree of some other type than
  <fo:inline font-family="monospace">form_list</fo:inline>, the comments will be inserted directly using
  <fo:inline font-family="monospace">recomment_tree/2</fo:inline>, and any comments left over from that
  process are added as postcomments on the result.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Entries in <fo:inline font-family="monospace">Comments</fo:inline> represent multi-line comments.
  For each entry, <fo:inline font-family="monospace">Line</fo:inline> is the line number and
  <fo:inline font-family="monospace">Column</fo:inline> the left column of the comment (the column of the
  first comment-introducing "<fo:inline font-family="monospace">%</fo:inline>" character).
  <fo:inline font-family="monospace">Indentation</fo:inline> is the number of character positions between
  the last non-whitespace character before the comment (or the left
  margin) and the left column of the comment. <fo:inline font-family="monospace">Text</fo:inline> is a
  list of strings representing the consecutive comment lines in
  top-down order, where each string contains all characters following
  (but not including) the comment-introducing "<fo:inline font-family="monospace">%</fo:inline>" and up
  to (but not including) the terminating newline. (Cf. module
  <fo:inline font-family="monospace">erl_comment_scan</fo:inline>.)</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Evaluation exits with reason <fo:inline font-family="monospace">{bad_position, Pos}</fo:inline> if
  the associated position information <fo:inline font-family="monospace">Pos</fo:inline> of some subtree
  in the input does not have a recognizable format, or with reason
  <fo:inline font-family="monospace">{bad_tree, L, C}</fo:inline> if insertion of a comment at line
  <fo:inline font-family="monospace">L</fo:inline>, column <fo:inline font-family="monospace">C</fo:inline>, fails because the tree
  structure is ill-formed.</fo:block>
 
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">erl_comment_scan</fo:inline>, <fo:inline font-style="italic">quick_recomment_forms/2</fo:inline>, <fo:inline font-style="italic">recomment_tree/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1567168">recomment_tree(Tree::syntaxTree(), Comments::[Comment]) -&gt; {syntaxTree(), [Comment]}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Comment = {Line, Column, Indentation, Text}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Line = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Column = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Indentation = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Text = [string()]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Attaches comments to a syntax tree. The result is a pair
  <fo:inline font-family="monospace">{NewTree, Remainder}</fo:inline> where <fo:inline font-family="monospace">NewTree</fo:inline> is the
  given <fo:inline font-family="monospace">Tree</fo:inline> where comments from the list
  <fo:inline font-family="monospace">Comments</fo:inline> have been attached at the proper places.
  <fo:inline font-family="monospace">Remainder</fo:inline> is the list of entries in
  <fo:inline font-family="monospace">Comments</fo:inline> which have not been inserted, because their
  line numbers are greater than those of any node in the tree. The
  entries in <fo:inline font-family="monospace">Comments</fo:inline> are inserted in order; if two  
comments become attached to the same node, they will appear in the  
same order in the program text.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The nodes of the syntax tree must contain valid position
  information. This can be single integers, assumed to represent a line
  number, or 2- or 3-tuples where the first or second element is an
  integer, in which case the leftmost integer element is assumed to
  represent the line number. Line numbers less than one are ignored
  (usually, the default line number for newly created nodes is
  zero).</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details on the <fo:inline font-family="monospace">Line</fo:inline>, <fo:inline font-family="monospace">Column</fo:inline> and
  <fo:inline font-family="monospace">Indentation</fo:inline> fields, and the behaviour in case of errors,
  see <fo:inline font-family="monospace">recomment_forms/2</fo:inline>.</fo:block>
 
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">recomment_forms/2</fo:inline>.</fo:block>
</fo:block>



Richard Carlsson
carlsson.richard@gmail.com<fo:block page-break-before="always" id="idp2070240" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">erl_syntax</fo:marker>erl_syntax</fo:block>Erlang module</fo:block>
<fo:block/>
erl_syntax
<fo:block/>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Abstract Erlang syntax trees.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module defines an abstract data type for representing Erlang
  source code as syntax trees, in a way that is backwards compatible
  with the data structures created by the Erlang standard library
  parser module <fo:inline font-family="monospace">erl_parse</fo:inline> (often referred to as "parse
  trees", which is a bit of a misnomer). This means that all
  <fo:inline font-family="monospace">erl_parse</fo:inline> trees are valid abstract syntax trees, but the
  reverse is not true: abstract syntax trees can in general not be used
  as input to functions expecting an <fo:inline font-family="monospace">erl_parse</fo:inline> tree.
  However, as long as an abstract syntax tree represents a correct
  Erlang program, the function <fo:inline font-style="italic">revert/1</fo:inline> should be able to
  transform it to the corresponding <fo:inline font-family="monospace">erl_parse</fo:inline>  
representation.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A recommended starting point for the first-time user is the documentation
  of the <fo:inline font-style="italic">syntaxTree()</fo:inline> data type, and the function <fo:inline font-style="italic">type/1</fo:inline>.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">NOTES:</fo:inline></fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module deals with the composition and decomposition of
  <fo:inline font-weight="bold">syntactic</fo:inline> entities (as opposed to semantic ones); its  
purpose is to hide all direct references to the data structures used  
to represent these entities. With few exceptions, the functions in  
this module perform no semantic interpretation of their inputs, and  
in general, the user is assumed to pass type-correct arguments - if  
this is not done, the effects are not defined.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">With the exception of the <fo:inline font-style="italic">erl_parse()</fo:inline> data structures,
  the internal representations of abstract syntax trees are subject to
  change without notice, and should not be documented outside this
  module. Furthermore, we do not give any guarantees on how an abstract
  syntax tree may or may not be represented, <fo:inline font-weight="bold">with the following
  exceptions</fo:inline>: no syntax tree is represented by a single atom, such
  as <fo:inline font-family="monospace">none</fo:inline>, by a list constructor <fo:inline font-family="monospace">[X | Y]</fo:inline>, or
  by the empty list <fo:inline font-family="monospace">[]</fo:inline>. This can be relied on when writing
  functions that operate on syntax trees.</fo:block>
<fo:block id="idp2082096" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">DATA TYPES</fo:block>

<fo:block space-after="0.25em" space-before="0.25em">
<fo:block keep-with-next.within-page="always">encoding() = utf8 | unicode | latin1</fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/> </fo:block></fo:block-container>
<fo:block keep-with-next.within-page="always">erl_parse() = <fo:inline font-style="italic">erl_parse:abstract_clause()</fo:inline> | <fo:inline font-style="italic">erl_parse:abstract_expr()</fo:inline> | <fo:inline font-style="italic">erl_parse:abstract_form()</fo:inline> | <fo:inline font-style="italic">erl_parse:abstract_type()</fo:inline> | <fo:inline font-style="italic">erl_parse:form_info()</fo:inline> | {bin_element, term(), term(), term(), term()}</fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/> </fo:block></fo:block-container>
<fo:block keep-with-next.within-page="always">forms() = <fo:inline font-style="italic">syntaxTree()</fo:inline> | [<fo:inline font-style="italic">syntaxTree()</fo:inline>]</fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/> </fo:block></fo:block-container>
<fo:block keep-with-next.within-page="always">guard() = none | <fo:inline font-style="italic">syntaxTree()</fo:inline> | [<fo:inline font-style="italic">syntaxTree()</fo:inline>] | [[<fo:inline font-style="italic">syntaxTree()</fo:inline>]]</fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/> </fo:block></fo:block-container>
<fo:block keep-with-next.within-page="always">padding() = none | integer()</fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/> </fo:block></fo:block-container>
<fo:block keep-with-next.within-page="always">syntaxTree()</fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An abstract syntax tree. The <fo:inline font-style="italic">erl_parse()</fo:inline>
  "parse tree" representation is a proper subset of the <fo:inline font-family="monospace">syntaxTree()</fo:inline>  
representation.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Every abstract syntax tree node has a <fo:inline font-weight="bold">type</fo:inline>, given by the
  function <fo:inline font-style="italic">type/1</fo:inline>. Each node also has associated
  <fo:inline font-weight="bold">attributes</fo:inline>; see <fo:inline font-style="italic">get_attrs/1</fo:inline> for details. The functions
  <fo:inline font-style="italic">make_tree/2</fo:inline> and <fo:inline font-style="italic">subtrees/1</fo:inline> are generic
  constructor/decomposition functions for abstract syntax trees. The
  functions <fo:inline font-style="italic">abstract/1</fo:inline> and <fo:inline font-style="italic">concrete/1</fo:inline> convert between
  constant Erlang terms and their syntactic representations. The set of
  syntax tree nodes is extensible through the <fo:inline font-style="italic">tree/2</fo:inline> function.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A syntax tree can be transformed to the <fo:inline font-style="italic">erl_parse()</fo:inline>
  representation with the <fo:inline font-style="italic">revert/1</fo:inline> function.</fo:block>
</fo:block></fo:block-container>
<fo:block keep-with-next.within-page="always">syntaxTreeAttributes()</fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is an abstract representation of
  syntax tree node attributes; see the function <fo:inline font-style="italic">get_attrs/1</fo:inline>.
 </fo:block>
</fo:block></fo:block-container>
</fo:block>
<fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2112320">abstract(T::term()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the syntax tree corresponding to an Erlang term.
  <fo:inline font-family="monospace">Term</fo:inline> must be a literal term, i.e., one that can be
  represented as a source code literal. Thus, it may not contain a
  process identifier, port, reference, binary or function value as a
  subterm. The function recognises printable strings, in order to get a
  compact and readable representation. Evaluation fails with reason
  <fo:inline font-family="monospace">badarg</fo:inline> if <fo:inline font-family="monospace">Term</fo:inline> is not a literal term.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">concrete/1</fo:inline>, <fo:inline font-style="italic">is_literal/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2119136">add_ann(A::term(), Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Appends the term <fo:inline font-family="monospace">Annotation</fo:inline> to the list of user
  annotations of <fo:inline font-family="monospace">Node</fo:inline>.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note: this is equivalent to <fo:inline font-family="monospace">set_ann(Node, [Annotation |
  get_ann(Node)])</fo:inline>, but potentially more efficient.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">get_ann/1</fo:inline>, <fo:inline font-style="italic">set_ann/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2126864">add_postcomments(Cs::[syntaxTree()], Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Appends <fo:inline font-family="monospace">Comments</fo:inline> to the post-comments of <fo:inline font-family="monospace">Node</fo:inline>.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note: This is equivalent to <fo:inline font-family="monospace">set_postcomments(Node,
  get_postcomments(Node) ++ Comments)</fo:inline>, but potentially more
  efficient.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">add_precomments/2</fo:inline>, <fo:inline font-style="italic">comment/2</fo:inline>, <fo:inline font-style="italic">get_postcomments/1</fo:inline>, <fo:inline font-style="italic">join_comments/2</fo:inline>, <fo:inline font-style="italic">set_postcomments/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2137456">add_precomments(Cs::[syntaxTree()], Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Appends <fo:inline font-family="monospace">Comments</fo:inline> to the pre-comments of <fo:inline font-family="monospace">Node</fo:inline>.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note: This is equivalent to <fo:inline font-family="monospace">set_precomments(Node,
  get_precomments(Node) ++ Comments)</fo:inline>, but potentially more
  efficient.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">add_postcomments/2</fo:inline>, <fo:inline font-style="italic">comment/2</fo:inline>, <fo:inline font-style="italic">get_precomments/1</fo:inline>, <fo:inline font-style="italic">join_comments/2</fo:inline>, <fo:inline font-style="italic">set_precomments/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2148048">annotated_type(Name::syntaxTree(), Type::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract annotated type expression. The result
  represents "<fo:inline font-family="monospace">Name :: Type</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">annotated_type_body/1</fo:inline>, <fo:inline font-style="italic">annotated_type_name/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2155088">annotated_type_body(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the type subtrees of an <fo:inline font-family="monospace">annotated_type</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">annotated_type/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2160752">annotated_type_name(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the name subtree of an <fo:inline font-family="monospace">annotated_type</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">annotated_type/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2166416">application(Operator::syntaxTree(), Arguments::[syntaxTree()]) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract function application expression. If
  <fo:inline font-family="monospace">Arguments</fo:inline> is <fo:inline font-family="monospace">[A1, ..., An]</fo:inline>, the result
  represents "<fo:inline font-family="monospace">Operator(A1, ...,
  An)</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">application/3</fo:inline>, <fo:inline font-style="italic">application_arguments/1</fo:inline>, <fo:inline font-style="italic">application_operator/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2175104">application(Module::none | syntaxTree(), Name::syntaxTree(), Arguments::[syntaxTree()]) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract function application expression. If
  <fo:inline font-family="monospace">Module</fo:inline> is <fo:inline font-family="monospace">none</fo:inline>, this is call is equivalent
  to <fo:inline font-family="monospace">application(Function, Arguments)</fo:inline>, otherwise it is
  equivalent to <fo:inline font-family="monospace">application(module_qualifier(Module, Function),
  Arguments)</fo:inline>.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">(This is a utility function.)
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">application/2</fo:inline>, <fo:inline font-style="italic">module_qualifier/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2184704">application_arguments(Node::syntaxTree()) -&gt; [syntaxTree()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the list of argument subtrees of an
  <fo:inline font-family="monospace">application</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">application/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2190480">application_operator(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the operator subtree of an <fo:inline font-family="monospace">application</fo:inline> node.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note: if <fo:inline font-family="monospace">Node</fo:inline> represents
  "<fo:inline font-family="monospace">M:F(...)</fo:inline>", then the result is the
  subtree representing "<fo:inline font-family="monospace">M:F</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">application/2</fo:inline>, <fo:inline font-style="italic">module_qualifier/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2198624">arity_qualifier(Body::syntaxTree(), Arity::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract arity qualifier. The result represents
  "<fo:inline font-family="monospace">Body/Arity</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">arity_qualifier_argument/1</fo:inline>, <fo:inline font-style="italic">arity_qualifier_body/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2205744">arity_qualifier_argument(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the argument (the arity) subtree of an
  <fo:inline font-family="monospace">arity_qualifier</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">arity_qualifier/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2211376">arity_qualifier_body(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the body subtree of an <fo:inline font-family="monospace">arity_qualifier</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">arity_qualifier/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2217040">atom(Name::atom() | string()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract atom literal. The print name of the atom is
  the character sequence represented by <fo:inline font-family="monospace">Name</fo:inline>.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">atom_literal/1</fo:inline>, <fo:inline font-style="italic">atom_literal/2</fo:inline>, <fo:inline font-style="italic">atom_name/1</fo:inline>, <fo:inline font-style="italic">atom_value/1</fo:inline>, <fo:inline font-style="italic">is_atom/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2224992">atom_literal(Node::syntaxTree()) -&gt; string()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the literal string represented by an <fo:inline font-family="monospace">atom</fo:inline>  
node. This includes surrounding single-quote characters if necessary.  
Characters beyond 255 will be escaped.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that e.g. the result of <fo:inline font-family="monospace">atom("x\ny")</fo:inline> represents
  any and all of `x\ny'', `x\12y'',
  `x\012y'' and `x\^Jy\''; see <fo:inline font-style="italic">string/1</fo:inline>.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">atom/1</fo:inline>, <fo:inline font-style="italic">string/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2232448">atom_literal(Node, X2) -&gt; term()
</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the literal string represented by an <fo:inline font-family="monospace">atom</fo:inline>
  node. This includes surrounding single-quote characters if necessary.
  Depending on the encoding a character beyond 255 will be escaped
  (<fo:inline font-family="monospace">latin1</fo:inline>) or copied as is (<fo:inline font-family="monospace">utf8</fo:inline>).
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">atom/1</fo:inline>, <fo:inline font-style="italic">atom_literal/1</fo:inline>, <fo:inline font-style="italic">string/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2239248">atom_name(Node::syntaxTree()) -&gt; string()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the printname of an <fo:inline font-family="monospace">atom</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">atom/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2244384">atom_value(Node::syntaxTree()) -&gt; atom()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the value represented by an <fo:inline font-family="monospace">atom</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">atom/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2249472">attribute(Name::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">attribute(Name, none)</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2253968">attribute(Name::syntaxTree(), Args::none | [syntaxTree()]) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract program attribute. If
  <fo:inline font-family="monospace">Arguments</fo:inline> is <fo:inline font-family="monospace">[A1, ..., An]</fo:inline>, the result
  represents "<fo:inline font-family="monospace">-Name(A1, ...,
  An).</fo:inline>". Otherwise, if <fo:inline font-family="monospace">Arguments</fo:inline> is
  <fo:inline font-family="monospace">none</fo:inline>, the result represents
  "<fo:inline font-family="monospace">-Name.</fo:inline>". The latter form makes it possible
  to represent preprocessor directives such as
  "<fo:inline font-family="monospace">-endif.</fo:inline>". Attributes are source code forms.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note: The preprocessor macro definition directive
  "<fo:inline font-family="monospace">-define(Name, Body).</fo:inline>" has relatively
  few requirements on the syntactical form of <fo:inline font-family="monospace">Body</fo:inline> (viewed
  as a sequence of tokens). The <fo:inline font-family="monospace">text</fo:inline> node type can be used
  for a <fo:inline font-family="monospace">Body</fo:inline> that is not a normal Erlang construct.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">attribute/1</fo:inline>, <fo:inline font-style="italic">attribute_arguments/1</fo:inline>, <fo:inline font-style="italic">attribute_name/1</fo:inline>, <fo:inline font-style="italic">is_form/1</fo:inline>, <fo:inline font-style="italic">text/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2268048">attribute_arguments(Node::syntaxTree()) -&gt; none | [syntaxTree()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the list of argument subtrees of an
  <fo:inline font-family="monospace">attribute</fo:inline> node, if any. If <fo:inline font-family="monospace">Node</fo:inline>
  represents "<fo:inline font-family="monospace">-Name.</fo:inline>", the result is
  <fo:inline font-family="monospace">none</fo:inline>. Otherwise, if <fo:inline font-family="monospace">Node</fo:inline> represents
  "<fo:inline font-family="monospace">-Name(E1, ..., En).</fo:inline>",
  <fo:inline font-family="monospace">[E1, ..., E1]</fo:inline> is returned.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">attribute/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2276512">attribute_name(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the name subtree of an <fo:inline font-family="monospace">attribute</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">attribute/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2282160">binary(List::[syntaxTree()]) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract binary-object template. If
  <fo:inline font-family="monospace">Fields</fo:inline> is <fo:inline font-family="monospace">[F1, ..., Fn]</fo:inline>, the result
  represents "<fo:inline font-family="monospace">&lt;&lt;F1, ...,
  Fn&gt;&gt;</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">binary_field/2</fo:inline>, <fo:inline font-style="italic">binary_fields/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2289392">binary_comp(Template::syntaxTree(), Body::[syntaxTree()]) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract binary comprehension. If <fo:inline font-family="monospace">Body</fo:inline> is
  <fo:inline font-family="monospace">[E1, ..., En]</fo:inline>, the result represents
  "<fo:inline font-family="monospace">&lt;&lt;Template || E1, ..., En&gt;&gt;</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">binary_comp_body/1</fo:inline>, <fo:inline font-style="italic">binary_comp_template/1</fo:inline>, <fo:inline font-style="italic">generator/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2298080">binary_comp_body(Node::syntaxTree()) -&gt; [syntaxTree()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the list of body subtrees of a <fo:inline font-family="monospace">binary_comp</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">binary_comp/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2303888">binary_comp_template(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the template subtree of a <fo:inline font-family="monospace">binary_comp</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">binary_comp/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2309552">binary_field(Body::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">binary_field(Body, [])</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2314048">binary_field(Body::syntaxTree(), Types::[syntaxTree()]) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract binary template field. If
  <fo:inline font-family="monospace">Types</fo:inline> is the empty list, the result simply represents
  "<fo:inline font-family="monospace">Body</fo:inline>", otherwise, if <fo:inline font-family="monospace">Types</fo:inline> is
  <fo:inline font-family="monospace">[T1, ..., Tn]</fo:inline>, the result represents
  "<fo:inline font-family="monospace">Body/T1-...-Tn</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">binary/1</fo:inline>, <fo:inline font-style="italic">binary_field/1</fo:inline>, <fo:inline font-style="italic">binary_field/3</fo:inline>, <fo:inline font-style="italic">binary_field_body/1</fo:inline>, <fo:inline font-style="italic">binary_field_size/1</fo:inline>, <fo:inline font-style="italic">binary_field_types/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2325744">binary_field(Body::syntaxTree(), Size::none | syntaxTree(), Types::[syntaxTree()]) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract binary template field.
  If <fo:inline font-family="monospace">Size</fo:inline> is <fo:inline font-family="monospace">none</fo:inline>, this is equivalent to
  "<fo:inline font-family="monospace">binary_field(Body, Types)</fo:inline>", otherwise it is
  equivalent to "<fo:inline font-family="monospace">binary_field(size_qualifier(Body, Size),
  Types)</fo:inline>".</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">(This is a utility function.)
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">binary/1</fo:inline>, <fo:inline font-style="italic">binary_field/2</fo:inline>, <fo:inline font-style="italic">size_qualifier/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2336048">binary_field_body(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the body subtree of a <fo:inline font-family="monospace">binary_field</fo:inline>.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">binary_field/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2341712">binary_field_size(Node::syntaxTree()) -&gt; none | syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the size specifier subtree of a
  <fo:inline font-family="monospace">binary_field</fo:inline> node, if any. If <fo:inline font-family="monospace">Node</fo:inline>
  represents "<fo:inline font-family="monospace">Body:Size</fo:inline>" or
  "<fo:inline font-family="monospace">Body:Size/T1, ...,
  Tn</fo:inline>", the result is <fo:inline font-family="monospace">Size</fo:inline>, otherwise
  <fo:inline font-family="monospace">none</fo:inline> is returned.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">(This is a utility function.)
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">binary_field/2</fo:inline>, <fo:inline font-style="italic">binary_field/3</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2350752">binary_field_types(Node::syntaxTree()) -&gt; [syntaxTree()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the list of type-specifier subtrees of a
  <fo:inline font-family="monospace">binary_field</fo:inline> node. If <fo:inline font-family="monospace">Node</fo:inline> represents
  "<fo:inline font-family="monospace">.../T1, ..., Tn</fo:inline>", the result is
  <fo:inline font-family="monospace">[T1, ..., Tn]</fo:inline>, otherwise the result is the empty list.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">binary_field/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2357840">binary_fields(Node::syntaxTree()) -&gt; [syntaxTree()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the list of field subtrees of a <fo:inline font-family="monospace">binary</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">binary/1</fo:inline>, <fo:inline font-style="italic">binary_field/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2364320">binary_generator(Pattern::syntaxTree(), Body::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract binary_generator. The result represents
  "<fo:inline font-family="monospace">Pattern &lt;- Body</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">binary_comp/2</fo:inline>, <fo:inline font-style="italic">binary_generator_body/1</fo:inline>, <fo:inline font-style="italic">binary_generator_pattern/1</fo:inline>, <fo:inline font-style="italic">list_comp/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2372912">binary_generator_body(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the body subtree of a <fo:inline font-family="monospace">generator</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">binary_generator/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2378576">binary_generator_pattern(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the pattern subtree of a <fo:inline font-family="monospace">generator</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">binary_generator/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2384256">bitstring_type(M::syntaxTree(), N::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract bitstring type. The result represents
  "<fo:inline font-family="monospace">&lt;&lt;_:M, _:_*N&gt;&gt;</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">bitstring_type_m/1</fo:inline>, <fo:inline font-style="italic">bitstring_type_n/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2391344">bitstring_type_m(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the number of start bits, <fo:inline font-family="monospace">M</fo:inline>,  of a <fo:inline font-family="monospace">bitstring_type</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">bitstring_type/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2397440">bitstring_type_n(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the segment size, <fo:inline font-family="monospace">N</fo:inline>, of a <fo:inline font-family="monospace">bitstring_type</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">bitstring_type/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2403536">block_expr(Body::[syntaxTree()]) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract block expression. If <fo:inline font-family="monospace">Body</fo:inline> is
  <fo:inline font-family="monospace">[B1, ..., Bn]</fo:inline>, the result represents "<fo:inline font-family="monospace">begin
  B1, ..., Bn end</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">block_expr_body/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2410096">block_expr_body(Node::syntaxTree()) -&gt; [syntaxTree()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the list of body subtrees of a <fo:inline font-family="monospace">block_expr</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">block_expr/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2415904">case_expr(Argument::syntaxTree(), Clauses::[syntaxTree()]) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract case-expression. If <fo:inline font-family="monospace">Clauses</fo:inline> is
  <fo:inline font-family="monospace">[C1, ..., Cn]</fo:inline>, the result represents "<fo:inline font-family="monospace">case
  Argument of C1; ...; Cn end</fo:inline>". More
  exactly, if each <fo:inline font-family="monospace">Ci</fo:inline> represents "<fo:inline font-family="monospace">(Pi)
  Gi -&gt; Bi</fo:inline>", then the result represents
  "<fo:inline font-family="monospace">case Argument of P1 G1 -&gt;
  B1; ...; Pn Gn -&gt; Bn end</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">case_expr_argument/1</fo:inline>, <fo:inline font-style="italic">case_expr_clauses/1</fo:inline>, <fo:inline font-style="italic">clause/3</fo:inline>, <fo:inline font-style="italic">cond_expr/1</fo:inline>, <fo:inline font-style="italic">if_expr/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2427424">case_expr_argument(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the argument subtree of a <fo:inline font-family="monospace">case_expr</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">case_expr/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2433088">case_expr_clauses(Node::syntaxTree()) -&gt; [syntaxTree()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the list of clause subtrees of a <fo:inline font-family="monospace">case_expr</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">case_expr/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2438864">catch_expr(Expr::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract catch-expression. The result represents
  "<fo:inline font-family="monospace">catch Expr</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">catch_expr_body/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2444512">catch_expr_body(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the body subtree of a <fo:inline font-family="monospace">catch_expr</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">catch_expr/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2450160">char(Char::char()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract character literal. The result represents
  "<fo:inline font-family="monospace">$Name</fo:inline>", where <fo:inline font-family="monospace">Name</fo:inline> corresponds to
  <fo:inline font-family="monospace">Value</fo:inline>.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note: the literal corresponding to a particular character value is
  not uniquely defined. E.g., the character "<fo:inline font-family="monospace">a</fo:inline>" can be
  written both as "<fo:inline font-family="monospace">$a</fo:inline>" and "<fo:inline font-family="monospace">$\141</fo:inline>", and a Tab
  character can be written as "<fo:inline font-family="monospace">$\11</fo:inline>", "<fo:inline font-family="monospace">$\011</fo:inline>"
  or "<fo:inline font-family="monospace">$\t</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">char_literal/1</fo:inline>, <fo:inline font-style="italic">char_literal/2</fo:inline>, <fo:inline font-style="italic">char_value/1</fo:inline>, <fo:inline font-style="italic">is_char/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2461360">char_literal(Node::syntaxTree()) -&gt; nonempty_string()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the literal string represented by a <fo:inline font-family="monospace">char</fo:inline>
  node. This includes the leading "<fo:inline font-family="monospace">$</fo:inline>" character.
  Characters beyond 255 will be escaped.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">char/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2466832">char_literal(Node::syntaxTree(), X2::encoding()) -&gt; nonempty_string()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the literal string represented by a <fo:inline font-family="monospace">char</fo:inline>
  node. This includes the leading "<fo:inline font-family="monospace">$</fo:inline>" character.
  Depending on the encoding a character beyond 255 will be escaped
  (<fo:inline font-family="monospace">latin1</fo:inline>) or copied as is (<fo:inline font-family="monospace">utf8</fo:inline>).
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">char/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2473920">char_value(Node::syntaxTree()) -&gt; char()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the value represented by a <fo:inline font-family="monospace">char</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">char/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2479008">class_qualifier(Class::syntaxTree(), Body::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract class qualifier. The result represents
  "<fo:inline font-family="monospace">Class:Body</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">class_qualifier_argument/1</fo:inline>, <fo:inline font-style="italic">class_qualifier_body/1</fo:inline>, <fo:inline font-style="italic">try_expr/4</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2486848">class_qualifier_argument(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the argument (the class) subtree of a
  <fo:inline font-family="monospace">class_qualifier</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">class_qualifier/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2492480">class_qualifier_body(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the body subtree of a <fo:inline font-family="monospace">class_qualifier</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">class_qualifier/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2498144">clause(Guard::guard(), Body::[syntaxTree()]) -&gt; syntaxTree()</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">clause([], Guard, Body)</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2503360">clause(Patterns::[syntaxTree()], Guard::guard(), Body::[syntaxTree()]) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract clause. If <fo:inline font-family="monospace">Patterns</fo:inline> is
  <fo:inline font-family="monospace">[P1, ..., Pn]</fo:inline> and <fo:inline font-family="monospace">Body</fo:inline> is <fo:inline font-family="monospace">[B1, ...,
  Bm]</fo:inline>, then if <fo:inline font-family="monospace">Guard</fo:inline> is <fo:inline font-family="monospace">none</fo:inline>, the
  result represents "<fo:inline font-family="monospace">(P1, ..., Pn) -&gt;
  B1, ..., Bm</fo:inline>", otherwise, unless
  <fo:inline font-family="monospace">Guard</fo:inline> is a list, the result represents
  "<fo:inline font-family="monospace">(P1, ..., Pn) when Guard -&gt;
  B1, ..., Bm</fo:inline>".</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For simplicity, the <fo:inline font-family="monospace">Guard</fo:inline> argument may also be any
  of the following:
  </fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An empty list <fo:inline font-family="monospace">[]</fo:inline>. This is equivalent to passing
        <fo:inline font-family="monospace">none</fo:inline>.</fo:block></fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A nonempty list <fo:inline font-family="monospace">[E1, ..., Ej]</fo:inline> of syntax trees.
        This is equivalent to passing <fo:inline font-family="monospace">conjunction([E1, ...,
        Ej])</fo:inline>.</fo:block></fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A nonempty list of lists of syntax trees <fo:inline font-family="monospace">[[E1_1, ...,
        E1_k1], ..., [Ej_1, ..., Ej_kj]]</fo:inline>, which is equivalent
        to passing <fo:inline font-family="monospace">disjunction([conjunction([E1_1, ...,
        E1_k1]), ..., conjunction([Ej_1, ..., Ej_kj])])</fo:inline>.</fo:block></fo:block></fo:list-item-body></fo:list-item>
  </fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">clause/2</fo:inline>, <fo:inline font-style="italic">clause_body/1</fo:inline>, <fo:inline font-style="italic">clause_guard/1</fo:inline>, <fo:inline font-style="italic">clause_patterns/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2522320">clause_body(Node::syntaxTree()) -&gt; [syntaxTree()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Return the list of body subtrees of a <fo:inline font-family="monospace">clause</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">clause/3</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2528128">clause_guard(Node::syntaxTree()) -&gt; none | syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the guard subtree of a <fo:inline font-family="monospace">clause</fo:inline> node, if
  any. If <fo:inline font-family="monospace">Node</fo:inline> represents "<fo:inline font-family="monospace">(P1, ...,
  Pn) when Guard -&gt; B1, ...,
  Bm</fo:inline>", <fo:inline font-family="monospace">Guard</fo:inline> is returned. Otherwise, the
  result is <fo:inline font-family="monospace">none</fo:inline>.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">clause/3</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2535504">clause_patterns(Node::syntaxTree()) -&gt; [syntaxTree()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the list of pattern subtrees of a <fo:inline font-family="monospace">clause</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">clause/3</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2541264">comment(Strings::[string()]) -&gt; syntaxTree()</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">comment(none, Strings)</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2545056">comment(Pad::padding(), Strings::[string()]) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract comment with the given padding and text. If
  <fo:inline font-family="monospace">Strings</fo:inline> is a (possibly empty) list
  <fo:inline font-family="monospace">["Txt1", ..., "TxtN"]</fo:inline>, the result
  represents the source code text
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
     %Txt1
     ...
     %TxtN</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  <fo:inline font-family="monospace">Padding</fo:inline> states the number of empty character positions
  to the left of the comment separating it horizontally from
  source code on the same line (if any). If <fo:inline font-family="monospace">Padding</fo:inline> is
  <fo:inline font-family="monospace">none</fo:inline>, a default positive number is used. If
  <fo:inline font-family="monospace">Padding</fo:inline> is an integer less than 1, there should be no
  separating space. Comments are in themselves regarded as source
  program forms.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">comment/1</fo:inline>, <fo:inline font-style="italic">is_form/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2554432">comment_padding(Node::syntaxTree()) -&gt; padding()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the amount of padding before the comment, or
  <fo:inline font-family="monospace">none</fo:inline>. The latter means that a default padding may be used.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">comment/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2560000">comment_text(Node::syntaxTree()) -&gt; [string()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the lines of text of the abstract comment.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">comment/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2564592">compact_list(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Yields the most compact form for an abstract list skeleton. The
  result either represents "<fo:inline font-family="monospace">[E1, ..., En |
  Tail]</fo:inline>", where <fo:inline font-family="monospace">Tail</fo:inline> is not a list
  skeleton, or otherwise simply "<fo:inline font-family="monospace">[E1, ...,
  En]</fo:inline>". Annotations on subtrees of <fo:inline font-family="monospace">Node</fo:inline>
  that represent list skeletons may be lost, but comments will be
  propagated to the result. Returns <fo:inline font-family="monospace">Node</fo:inline> itself if
  <fo:inline font-family="monospace">Node</fo:inline> does not represent a list skeleton.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">list/2</fo:inline>, <fo:inline font-style="italic">normalize_list/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2573344">concrete(Node::syntaxTree()) -&gt; term()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the Erlang term represented by a syntax tree. Evaluation
  fails with reason <fo:inline font-family="monospace">badarg</fo:inline> if <fo:inline font-family="monospace">Node</fo:inline> does not  
represent a literal term.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note: Currently, the set of syntax trees which have a concrete
  representation is larger than the set of trees which can be built
  using the function <fo:inline font-style="italic">abstract/1</fo:inline>. An abstract character
  will be concretised as an integer, while <fo:inline font-style="italic">abstract/1</fo:inline> does
  not at present yield an abstract character for any input. (Use the
  <fo:inline font-style="italic">char/1</fo:inline> function to explicitly create an abstract  
character.)</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note: <fo:inline font-family="monospace">arity_qualifier</fo:inline> nodes are recognized. This is to follow The
  Erlang Parser when it comes to wild attributes: both {F, A} and F/A
  are recognized, which makes it possible to turn wild attributes
  into recognized attributes without at the same time making it
  impossible to compile files using the new syntax with the old
  version of the Erlang Compiler.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">abstract/1</fo:inline>, <fo:inline font-style="italic">char/1</fo:inline>, <fo:inline font-style="italic">is_literal/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2584176">cond_expr(Clauses::[syntaxTree()]) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract cond-expression. If <fo:inline font-family="monospace">Clauses</fo:inline> is
  <fo:inline font-family="monospace">[C1, ..., Cn]</fo:inline>, the result represents "<fo:inline font-family="monospace">cond
  C1; ...; Cn end</fo:inline>". More exactly, if each
  <fo:inline font-family="monospace">Ci</fo:inline> represents "<fo:inline font-family="monospace">() Ei -&gt;
  Bi</fo:inline>", then the result represents "<fo:inline font-family="monospace">cond
  E1 -&gt; B1; ...; En -&gt; Bn
  end</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">case_expr/2</fo:inline>, <fo:inline font-style="italic">clause/3</fo:inline>, <fo:inline font-style="italic">cond_expr_clauses/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2593568">cond_expr_clauses(Node::syntaxTree()) -&gt; [syntaxTree()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the list of clause subtrees of a <fo:inline font-family="monospace">cond_expr</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">cond_expr/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2599344">conjunction(Tests::[syntaxTree()]) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract conjunction. If <fo:inline font-family="monospace">List</fo:inline> is
  <fo:inline font-family="monospace">[E1, ..., En]</fo:inline>, the result represents
  "<fo:inline font-family="monospace">E1, ..., En</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">conjunction_body/1</fo:inline>, <fo:inline font-style="italic">disjunction/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2606672">conjunction_body(Node::syntaxTree()) -&gt; [syntaxTree()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the list of body subtrees of a
  <fo:inline font-family="monospace">conjunction</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">conjunction/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2612432">cons(Head::syntaxTree(), Tail::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">"Optimising" list skeleton cons operation. Creates an abstract
  list skeleton whose first element is <fo:inline font-family="monospace">Head</fo:inline> and whose tail
  corresponds to <fo:inline font-family="monospace">Tail</fo:inline>. This is similar to
  <fo:inline font-family="monospace">list([Head], Tail)</fo:inline>, except that <fo:inline font-family="monospace">Tail</fo:inline> may
  not be <fo:inline font-family="monospace">none</fo:inline>, and that the result does not necessarily
  represent exactly "<fo:inline font-family="monospace">[Head | Tail]</fo:inline>", but
  may depend on the <fo:inline font-family="monospace">Tail</fo:inline> subtree. E.g., if
  <fo:inline font-family="monospace">Tail</fo:inline> represents <fo:inline font-family="monospace">[X, Y]</fo:inline>, the result may
  represent "<fo:inline font-family="monospace">[Head, X, Y]</fo:inline>", rather than
  "<fo:inline font-family="monospace">[Head | [X, Y]]</fo:inline>". Annotations on
  <fo:inline font-family="monospace">Tail</fo:inline> itself may be lost if <fo:inline font-family="monospace">Tail</fo:inline> represents
  a list skeleton, but comments on <fo:inline font-family="monospace">Tail</fo:inline> are propagated to
  the result.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">list/2</fo:inline>, <fo:inline font-style="italic">list_head/1</fo:inline>, <fo:inline font-style="italic">list_tail/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2626128">constrained_function_type(FunctionType::syntaxTree(), FunctionConstraint::[syntaxTree()]) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract constrained function type.
  If <fo:inline font-family="monospace">FunctionConstraint</fo:inline> is <fo:inline font-family="monospace">[C1, ..., Cn]</fo:inline>, the result represents
  "<fo:inline font-family="monospace">FunctionType when C1, ...Cn</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">constrained_function_type_argument/1</fo:inline>, <fo:inline font-style="italic">constrained_function_type_body/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2634144">constrained_function_type_argument(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the function constraint subtree of a
  <fo:inline font-family="monospace">constrained_function_type</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">constrained_function_type/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2639776">constrained_function_type_body(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the function type subtree of a
  <fo:inline font-family="monospace">constrained_function_type</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">constrained_function_type/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2645456">constraint(Name::syntaxTree(), Types::[syntaxTree()]) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract (subtype) constraint. The result represents
  "<fo:inline font-family="monospace">Name :: Type</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">constraint_argument/1</fo:inline>, <fo:inline font-style="italic">constraint_body/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2652496">constraint_argument(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the name subtree of a <fo:inline font-family="monospace">constraint</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">constraint/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2658160">constraint_body(Node::syntaxTree()) -&gt; [syntaxTree()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the type subtree of a <fo:inline font-family="monospace">constraint</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">constraint/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2663968">copy_ann(Source::syntaxTree(), Target::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Copies the list of user annotations from <fo:inline font-family="monospace">Source</fo:inline> to <fo:inline font-family="monospace">Target</fo:inline>.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note: this is equivalent to <fo:inline font-family="monospace">set_ann(Target,
  get_ann(Source))</fo:inline>, but potentially more efficient.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">get_ann/1</fo:inline>, <fo:inline font-style="italic">set_ann/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2672400">copy_attrs(S::syntaxTree(), T::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Copies the attributes from <fo:inline font-family="monospace">Source</fo:inline> to <fo:inline font-family="monospace">Target</fo:inline>.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note: this is equivalent to <fo:inline font-family="monospace">set_attrs(Target,
  get_attrs(Source))</fo:inline>, but potentially more efficient.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">get_attrs/1</fo:inline>, <fo:inline font-style="italic">set_attrs/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2680880">copy_comments(Source::syntaxTree(), Target::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Copies the pre- and postcomments from <fo:inline font-family="monospace">Source</fo:inline> to <fo:inline font-family="monospace">Target</fo:inline>.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note: This is equivalent to
  <fo:inline font-family="monospace">set_postcomments(set_precomments(Target,
  get_precomments(Source)), get_postcomments(Source))</fo:inline>, but
  potentially more efficient.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">comment/2</fo:inline>, <fo:inline font-style="italic">get_postcomments/1</fo:inline>, <fo:inline font-style="italic">get_precomments/1</fo:inline>, <fo:inline font-style="italic">set_postcomments/2</fo:inline>, <fo:inline font-style="italic">set_precomments/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2691584">copy_pos(Source::syntaxTree(), Target::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Copies the position information from <fo:inline font-family="monospace">Source</fo:inline> to <fo:inline font-family="monospace">Target</fo:inline>.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is equivalent to <fo:inline font-family="monospace">set_pos(Target,
  get_pos(Source))</fo:inline>, but potentially more efficient.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">get_pos/1</fo:inline>, <fo:inline font-style="italic">set_pos/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2700048">data(Tree::syntaxTree()) -&gt; term()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">For special purposes only</fo:inline>. Returns the associated data
  of a syntax tree node. Evaluation fails with reason
  <fo:inline font-family="monospace">badarg</fo:inline> if <fo:inline font-family="monospace">is_tree(Node)</fo:inline> does not yield
  <fo:inline font-family="monospace">true</fo:inline>.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">tree/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5224496">disjunction(Tests::[syntaxTree()]) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract disjunction. If <fo:inline font-family="monospace">List</fo:inline> is
  <fo:inline font-family="monospace">[E1, ..., En]</fo:inline>, the result represents
  "<fo:inline font-family="monospace">E1; ...; En</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">conjunction/1</fo:inline>, <fo:inline font-style="italic">disjunction_body/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5231424">disjunction_body(Node::syntaxTree()) -&gt; [syntaxTree()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the list of body subtrees of a
  <fo:inline font-family="monospace">disjunction</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">disjunction/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5237184">eof_marker() -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract end-of-file marker. This represents the  
end of input when reading a sequence of source code forms. An  
end-of-file marker is itself regarded as a source code form  
(namely, the last in any sequence in which it occurs). It has no  
defined lexical form.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note: this is retained only for backwards compatibility with
  existing parsers and tools.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">error_marker/1</fo:inline>, <fo:inline font-style="italic">is_form/1</fo:inline>, <fo:inline font-style="italic">warning_marker/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5243920">error_marker(Error::term()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract error marker. The result represents an
  occurrence of an error in the source code, with an associated Erlang
  I/O ErrorInfo structure given by <fo:inline font-family="monospace">Error</fo:inline> (see module
  <fo:inline font-style="italic">io(3)</fo:inline> for details). Error markers are regarded as source  
code forms, but have no defined lexical form.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note: this is supported only for backwards compatibility with
  existing parsers and tools.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">eof_marker/0</fo:inline>, <fo:inline font-style="italic">error_marker_info/1</fo:inline>, <fo:inline font-style="italic">is_form/1</fo:inline>, <fo:inline font-style="italic">warning_marker/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5252528">error_marker_info(Node::syntaxTree()) -&gt; term()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the ErrorInfo structure of an <fo:inline font-family="monospace">error_marker</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">error_marker/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5257632">flatten_form_list(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Flattens sublists of a <fo:inline font-family="monospace">form_list</fo:inline> node. Returns
  <fo:inline font-family="monospace">Node</fo:inline> with all subtrees of type <fo:inline font-family="monospace">form_list</fo:inline>
  recursively expanded, yielding a single "flat" abstract form
  sequence.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">form_list/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5264208">float(Value::float()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract floating-point literal. The lexical
  representation is the decimal floating-point numeral of <fo:inline font-family="monospace">Value</fo:inline>.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">float_literal/1</fo:inline>, <fo:inline font-style="italic">float_value/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5269952">float_literal(Node::syntaxTree()) -&gt; string()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the numeral string represented by a <fo:inline font-family="monospace">float</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">float/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5274992">float_value(Node::syntaxTree()) -&gt; float()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the value represented by a <fo:inline font-family="monospace">float</fo:inline> node. Note
  that floating-point values should usually not be compared for
  equality.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">float/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5280160">form_list(Forms::[syntaxTree()]) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract sequence of "source code forms". If
  <fo:inline font-family="monospace">Forms</fo:inline> is <fo:inline font-family="monospace">[F1, ..., Fn]</fo:inline>, where each
  <fo:inline font-family="monospace">Fi</fo:inline> is a form (see <fo:inline font-style="italic">is_form/1</fo:inline>, the result
  represents
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
     F1
     ...
     Fn</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  where the <fo:inline font-family="monospace">Fi</fo:inline> are separated by one or more line breaks. A
  node of type <fo:inline font-family="monospace">form_list</fo:inline> is itself regarded as a source
  code form; see <fo:inline font-style="italic">flatten_form_list/1</fo:inline>.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note: this is simply a way of grouping source code forms as a
  single syntax tree, usually in order to form an Erlang module
  definition.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">flatten_form_list/1</fo:inline>, <fo:inline font-style="italic">form_list_elements/1</fo:inline>, <fo:inline font-style="italic">is_form/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5291712">form_list_elements(Node::syntaxTree()) -&gt; [syntaxTree()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the list of subnodes of a <fo:inline font-family="monospace">form_list</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">form_list/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5297536">fun_expr(Clauses::[syntaxTree()]) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract fun-expression. If <fo:inline font-family="monospace">Clauses</fo:inline> is
  <fo:inline font-family="monospace">[C1, ..., Cn]</fo:inline>, the result represents "<fo:inline font-family="monospace">fun
  C1; ...; Cn end</fo:inline>". More exactly, if each
  <fo:inline font-family="monospace">Ci</fo:inline> represents "<fo:inline font-family="monospace">(Pi1, ..., Pim)
  Gi -&gt; Bi</fo:inline>", then the result represents
  "<fo:inline font-family="monospace">fun (P11, ..., P1m) G1 -&gt;
  B1; ...; (Pn1, ..., Pnm) Gn -&gt;
  Bn end</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">fun_expr_arity/1</fo:inline>, <fo:inline font-style="italic">fun_expr_clauses/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp609680">fun_expr_arity(Node::syntaxTree()) -&gt; arity()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the arity of a <fo:inline font-family="monospace">fun_expr</fo:inline> node. The result is  
the number of parameter patterns in the first clause of the  
fun-expression; subsequent clauses are ignored.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An exception is thrown if <fo:inline font-family="monospace">fun_expr_clauses(Node)</fo:inline>
  returns an empty list, or if the first element of that list is not a
  syntax tree <fo:inline font-family="monospace">C</fo:inline> of type <fo:inline font-family="monospace">clause</fo:inline> such that
  <fo:inline font-family="monospace">clause_patterns(C)</fo:inline> is a nonempty list.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">clause/3</fo:inline>, <fo:inline font-style="italic">clause_patterns/1</fo:inline>, <fo:inline font-style="italic">fun_expr/1</fo:inline>, <fo:inline font-style="italic">fun_expr_clauses/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5300448">fun_expr_clauses(Node::syntaxTree()) -&gt; [syntaxTree()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the list of clause subtrees of a <fo:inline font-family="monospace">fun_expr</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">fun_expr/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5305504">fun_type() -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract fun of any type. The result represents
  "<fo:inline font-family="monospace">fun()</fo:inline>".</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5308544">function(Name::syntaxTree(), Clauses::[syntaxTree()]) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract function definition. If <fo:inline font-family="monospace">Clauses</fo:inline>
  is <fo:inline font-family="monospace">[C1, ..., Cn]</fo:inline>, the result represents
  "<fo:inline font-family="monospace">Name C1; ...; Name
  Cn.</fo:inline>". More exactly, if each <fo:inline font-family="monospace">Ci</fo:inline>
  represents "<fo:inline font-family="monospace">(Pi1, ..., Pim) Gi -&gt;
  Bi</fo:inline>", then the result represents
  "<fo:inline font-family="monospace">Name(P11, ..., P1m) G1 -&gt;
  B1; ...; Name(Pn1, ..., Pnm)
  Gn -&gt; Bn.</fo:inline>". Function definitions are source
  code forms.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">function_arity/1</fo:inline>, <fo:inline font-style="italic">function_clauses/1</fo:inline>, <fo:inline font-style="italic">function_name/1</fo:inline>, <fo:inline font-style="italic">is_form/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5317888">function_arity(Node::syntaxTree()) -&gt; arity()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the arity of a <fo:inline font-family="monospace">function</fo:inline> node. The result  
is the number of parameter patterns in the first clause of the  
function; subsequent clauses are ignored.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An exception is thrown if <fo:inline font-family="monospace">function_clauses(Node)</fo:inline>
  returns an empty list, or if the first element of that list is not
  a syntax tree <fo:inline font-family="monospace">C</fo:inline> of type <fo:inline font-family="monospace">clause</fo:inline> such that
  <fo:inline font-family="monospace">clause_patterns(C)</fo:inline> is a nonempty list.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">clause/3</fo:inline>, <fo:inline font-style="italic">clause_patterns/1</fo:inline>, <fo:inline font-style="italic">function/2</fo:inline>, <fo:inline font-style="italic">function_clauses/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5326736">function_clauses(Node::syntaxTree()) -&gt; [syntaxTree()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the list of clause subtrees of a <fo:inline font-family="monospace">function</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">function/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5332624">function_name(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the name subtree of a <fo:inline font-family="monospace">function</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">function/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5338336">function_type(Type) -&gt; term()
</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">function_type(any_arity, Type)</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5341600">function_type(Arguments::any_arity | syntaxTree(), Return::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract function type. If <fo:inline font-family="monospace">Arguments</fo:inline> is
  <fo:inline font-family="monospace">[T1, ..., Tn]</fo:inline>, then if it occurs within a function
  specification, the result represents
  "<fo:inline font-family="monospace">(T1, ...Tn) -&gt; Return</fo:inline>"; otherwise
  it represents
  "<fo:inline font-family="monospace">fun((T1, ...Tn) -&gt; Return)</fo:inline>".
  If <fo:inline font-family="monospace">Arguments</fo:inline> is <fo:inline font-family="monospace">any_arity</fo:inline>, it represents
  "<fo:inline font-family="monospace">fun((...) -&gt; Return)</fo:inline>".</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that the <fo:inline font-family="monospace">erl_parse</fo:inline> representation is identical for
  "<fo:inline font-family="monospace">FunctionType</fo:inline>" and
  "<fo:inline font-family="monospace">fun(FunctionType)</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">function_type_arguments/1</fo:inline>, <fo:inline font-style="italic">function_type_return/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5353376">function_type_arguments(Node::syntaxTree()) -&gt; any_arity | [syntaxTree()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the argument types subtrees of a <fo:inline font-family="monospace">function_type</fo:inline> node.
  If <fo:inline font-family="monospace">Node</fo:inline> represents "<fo:inline font-family="monospace">fun((...) -&gt; Return)</fo:inline>",
  <fo:inline font-family="monospace">any_arity</fo:inline> is returned; otherwise, if <fo:inline font-family="monospace">Node</fo:inline> represents
  "<fo:inline font-family="monospace">(T1, ...Tn) -&gt; Return</fo:inline>" or
  "<fo:inline font-family="monospace">fun((T1, ...Tn) -&gt; Return)</fo:inline>",
  <fo:inline font-family="monospace">[T1, ..., Tn]</fo:inline> is returned.</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">function_type/1</fo:inline>, <fo:inline font-style="italic">function_type/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5363200">function_type_return(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the return type subtrees of a <fo:inline font-family="monospace">function_type</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">function_type/1</fo:inline>, <fo:inline font-style="italic">function_type/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5369664">generator(Pattern::syntaxTree(), Body::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract generator. The result represents
  "<fo:inline font-family="monospace">Pattern &lt;- Body</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">binary_comp/2</fo:inline>, <fo:inline font-style="italic">generator_body/1</fo:inline>, <fo:inline font-style="italic">generator_pattern/1</fo:inline>, <fo:inline font-style="italic">list_comp/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5378272">generator_body(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the body subtree of a <fo:inline font-family="monospace">generator</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">generator/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5383984">generator_pattern(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the pattern subtree of a <fo:inline font-family="monospace">generator</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">generator/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5389712">get_ann(Tree::syntaxTree()) -&gt; [term()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the list of user annotations associated with a syntax
  tree node. For a newly created node, this is the empty list. The
  annotations may be any terms.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">get_attrs/1</fo:inline>, <fo:inline font-style="italic">set_ann/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5395296">get_attrs(Tree::syntaxTree()) -&gt; syntaxTreeAttributes()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a representation of the attributes associated with a
  syntax tree node. The attributes are all the extra information that
  can be attached to a node. Currently, this includes position
  information, source code comments, and user annotations. The result
  of this function cannot be inspected directly; only attached to
  another node (see <fo:inline font-style="italic">set_attrs/2</fo:inline>).</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For accessing individual attributes, see <fo:inline font-style="italic">get_pos/1</fo:inline>,
  <fo:inline font-style="italic">get_ann/1</fo:inline>, <fo:inline font-style="italic">get_precomments/1</fo:inline> and
  <fo:inline font-style="italic">get_postcomments/1</fo:inline>.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">get_ann/1</fo:inline>, <fo:inline font-style="italic">get_pos/1</fo:inline>, <fo:inline font-style="italic">get_postcomments/1</fo:inline>, <fo:inline font-style="italic">get_precomments/1</fo:inline>, <fo:inline font-style="italic">set_attrs/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5407888">get_pos(Tree::syntaxTree()) -&gt; term()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the position information associated with
  <fo:inline font-family="monospace">Node</fo:inline>. This is usually a nonnegative integer (indicating
  the source code line number), but may be any term. By default, all
  new tree nodes have their associated position information set to the
  integer zero.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">get_attrs/1</fo:inline>, <fo:inline font-style="italic">set_pos/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5413984">get_postcomments(Tree::syntaxTree()) -&gt; [syntaxTree()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the associated post-comments of a node. This is a
  possibly empty list of abstract comments, in top-down textual order.
  When the code is formatted, post-comments are typically displayed to
  the right of and/or below the node. For example:
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">     {foo, X, Y}     % Post-comment of tuple</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
 
  If possible, the comment should be moved past any following
  separator characters on the same line, rather than placing the
  separators on the following line. E.g.:
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">     foo([X | Xs], Y) -&gt;
         foo(Xs, bar(X));     % Post-comment of 'bar(X)' node
      ...</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  (where the comment is moved past the rightmost "<fo:inline font-family="monospace">)</fo:inline>" and
  the "<fo:inline font-family="monospace">;</fo:inline>").
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">comment/2</fo:inline>, <fo:inline font-style="italic">get_attrs/1</fo:inline>, <fo:inline font-style="italic">get_precomments/1</fo:inline>, <fo:inline font-style="italic">set_postcomments/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5424144">get_precomments(Tree::syntaxTree()) -&gt; [syntaxTree()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the associated pre-comments of a node. This is a
  possibly empty list of abstract comments, in top-down textual order.
  When the code is formatted, pre-comments are typically displayed
  directly above the node. For example:
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">     % Pre-comment of function
     foo(X) -&gt; {bar, X}.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
 
  If possible, the comment should be moved before any preceding
  separator characters on the same line. E.g.:
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">     foo([X | Xs]) -&gt;
         % Pre-comment of 'bar(X)' node
         [bar(X) | foo(Xs)];
     ...</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  (where the comment is moved before the "<fo:inline font-family="monospace">[</fo:inline>").
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">comment/2</fo:inline>, <fo:inline font-style="italic">get_attrs/1</fo:inline>, <fo:inline font-style="italic">get_postcomments/1</fo:inline>, <fo:inline font-style="italic">set_precomments/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5433776">has_comments(Tree::syntaxTree()) -&gt; boolean()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Yields <fo:inline font-family="monospace">false</fo:inline> if the node has no associated
  comments, and <fo:inline font-family="monospace">true</fo:inline> otherwise.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note: This is equivalent to <fo:inline font-family="monospace">(get_precomments(Node) == [])
  and (get_postcomments(Node) == [])</fo:inline>, but potentially more
  efficient.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">get_postcomments/1</fo:inline>, <fo:inline font-style="italic">get_precomments/1</fo:inline>, <fo:inline font-style="italic">remove_comments/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5441840">if_expr(Clauses::[syntaxTree()]) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract if-expression. If <fo:inline font-family="monospace">Clauses</fo:inline> is
  <fo:inline font-family="monospace">[C1, ..., Cn]</fo:inline>, the result represents "<fo:inline font-family="monospace">if
  C1; ...; Cn end</fo:inline>". More exactly, if each
  <fo:inline font-family="monospace">Ci</fo:inline> represents "<fo:inline font-family="monospace">() Gi -&gt;
  Bi</fo:inline>", then the result represents "<fo:inline font-family="monospace">if
  G1 -&gt; B1; ...; Gn -&gt; Bn
  end</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">case_expr/2</fo:inline>, <fo:inline font-style="italic">clause/3</fo:inline>, <fo:inline font-style="italic">if_expr_clauses/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5451280">if_expr_clauses(Node::syntaxTree()) -&gt; [syntaxTree()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the list of clause subtrees of an <fo:inline font-family="monospace">if_expr</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">if_expr/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5457168">implicit_fun(Name::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract "implicit fun" expression. The result
  represents "<fo:inline font-family="monospace">fun Name</fo:inline>". <fo:inline font-family="monospace">Name</fo:inline> should
  represent either <fo:inline font-family="monospace">F/A</fo:inline> or
  <fo:inline font-family="monospace">M:F/A</fo:inline>
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">arity_qualifier/2</fo:inline>, <fo:inline font-style="italic">implicit_fun/2</fo:inline>, <fo:inline font-style="italic">implicit_fun/3</fo:inline>, <fo:inline font-style="italic">implicit_fun_name/1</fo:inline>, <fo:inline font-style="italic">module_qualifier/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5467168">implicit_fun(Name::syntaxTree(), Arity::none | syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract "implicit fun" expression. If
  <fo:inline font-family="monospace">Arity</fo:inline> is <fo:inline font-family="monospace">none</fo:inline>, this is equivalent to
  <fo:inline font-family="monospace">implicit_fun(Name)</fo:inline>, otherwise it is equivalent to
  <fo:inline font-family="monospace">implicit_fun(arity_qualifier(Name, Arity))</fo:inline>.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">(This is a utility function.)
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">implicit_fun/1</fo:inline>, <fo:inline font-style="italic">implicit_fun/3</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5476208">implicit_fun(Module::none | syntaxTree(), Name::syntaxTree(), Arity::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract module-qualified "implicit fun" expression.
  If <fo:inline font-family="monospace">Module</fo:inline> is <fo:inline font-family="monospace">none</fo:inline>, this is equivalent to
  <fo:inline font-family="monospace">implicit_fun(Name, Arity)</fo:inline>, otherwise it is equivalent to
  <fo:inline font-family="monospace">implicit_fun(module_qualifier(Module, arity_qualifier(Name,
  Arity))</fo:inline>.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">(This is a utility function.)
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">implicit_fun/1</fo:inline>, <fo:inline font-style="italic">implicit_fun/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5486048">implicit_fun_name(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the name subtree of an <fo:inline font-family="monospace">implicit_fun</fo:inline> node.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note: if <fo:inline font-family="monospace">Node</fo:inline> represents "<fo:inline font-family="monospace">fun
  N/A</fo:inline>" or "<fo:inline font-family="monospace">fun
  M:N/A</fo:inline>", then the result is the
  subtree representing "<fo:inline font-family="monospace">N/A</fo:inline>" or
  "<fo:inline font-family="monospace">M:N/A</fo:inline>", respectively.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">arity_qualifier/2</fo:inline>, <fo:inline font-style="italic">implicit_fun/1</fo:inline>, <fo:inline font-style="italic">module_qualifier/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5495936">infix_expr(Left::syntaxTree(), Operator::syntaxTree(), Right::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract infix operator expression. The result
  represents "<fo:inline font-family="monospace">Left Operator
  Right</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">infix_expr_left/1</fo:inline>, <fo:inline font-style="italic">infix_expr_operator/1</fo:inline>, <fo:inline font-style="italic">infix_expr_right/1</fo:inline>, <fo:inline font-style="italic">prefix_expr/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5505296">infix_expr_left(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the left argument subtree of an
  <fo:inline font-family="monospace">infix_expr</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">infix_expr/3</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5511040">infix_expr_operator(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the operator subtree of an <fo:inline font-family="monospace">infix_expr</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">infix_expr/3</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5516768">infix_expr_right(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the right argument subtree of an
  <fo:inline font-family="monospace">infix_expr</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">infix_expr/3</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5522512">integer(Value::integer()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract integer literal. The lexical representation
  is the canonical decimal numeral of <fo:inline font-family="monospace">Value</fo:inline>.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">integer_literal/1</fo:inline>, <fo:inline font-style="italic">integer_value/1</fo:inline>, <fo:inline font-style="italic">is_integer/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5529008">integer_literal(Node::syntaxTree()) -&gt; string()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the numeral string represented by an <fo:inline font-family="monospace">integer</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">integer/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5534192">integer_range_type(Low::syntaxTree(), High::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract range type. The result represents
  "<fo:inline font-family="monospace">Low .. High</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">integer_range_type_high/1</fo:inline>, <fo:inline font-style="italic">integer_range_type_low/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5541440">integer_range_type_high(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the high limit of an <fo:inline font-family="monospace">integer_range_type</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">integer_range_type/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5547184">integer_range_type_low(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the low limit of an <fo:inline font-family="monospace">integer_range_type</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">integer_range_type/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5552928">integer_value(Node::syntaxTree()) -&gt; integer()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the value represented by an <fo:inline font-family="monospace">integer</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">integer/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5558080">is_atom(Node::syntaxTree(), Value::atom()) -&gt; boolean()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if <fo:inline font-family="monospace">Node</fo:inline> has type
  <fo:inline font-family="monospace">atom</fo:inline> and represents <fo:inline font-family="monospace">Value</fo:inline>, otherwise <fo:inline font-family="monospace">false</fo:inline>.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">atom/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5565056">is_char(Node::syntaxTree(), Value::char()) -&gt; boolean()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if <fo:inline font-family="monospace">Node</fo:inline> has type
  <fo:inline font-family="monospace">char</fo:inline> and represents <fo:inline font-family="monospace">Value</fo:inline>, otherwise <fo:inline font-family="monospace">false</fo:inline>.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">char/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5572032">is_form(Node::syntaxTree()) -&gt; boolean()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if <fo:inline font-family="monospace">Node</fo:inline> is a syntax tree
  representing a so-called "source code form", otherwise
  <fo:inline font-family="monospace">false</fo:inline>. Forms are the Erlang source code units which,  
placed in sequence, constitute an Erlang program. Current form types  
are:</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
   
    <fo:inline font-family="monospace">attribute</fo:inline>
    <fo:inline font-family="monospace">comment</fo:inline>
    <fo:inline font-family="monospace">error_marker</fo:inline>
    <fo:inline font-family="monospace">eof_marker</fo:inline>
   <fo:block/>
    <fo:inline font-family="monospace">form_list</fo:inline>
    <fo:inline font-family="monospace">function</fo:inline>
    <fo:inline font-family="monospace">warning_marker</fo:inline>
    <fo:inline font-family="monospace">text</fo:inline>
   <fo:block/>
  
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">attribute/2</fo:inline>, <fo:inline font-style="italic">comment/2</fo:inline>, <fo:inline font-style="italic">eof_marker/0</fo:inline>, <fo:inline font-style="italic">error_marker/1</fo:inline>, <fo:inline font-style="italic">form_list/1</fo:inline>, <fo:inline font-style="italic">function/2</fo:inline>, <fo:inline font-style="italic">type/1</fo:inline>, <fo:inline font-style="italic">warning_marker/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5587936">is_integer(Node::syntaxTree(), Value::integer()) -&gt; boolean()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if <fo:inline font-family="monospace">Node</fo:inline> has type
  <fo:inline font-family="monospace">integer</fo:inline> and represents <fo:inline font-family="monospace">Value</fo:inline>, otherwise <fo:inline font-family="monospace">false</fo:inline>.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">integer/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5594912">is_leaf(Node::syntaxTree()) -&gt; boolean()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if <fo:inline font-family="monospace">Node</fo:inline> is a leaf node,
  otherwise <fo:inline font-family="monospace">false</fo:inline>. The currently recognised leaf node  
types are:</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
   
    <fo:inline font-family="monospace">atom</fo:inline>
    <fo:inline font-family="monospace">char</fo:inline>
    <fo:inline font-family="monospace">comment</fo:inline>
    <fo:inline font-family="monospace">eof_marker</fo:inline>
    <fo:inline font-family="monospace">error_marker</fo:inline>
   <fo:block/>
    <fo:inline font-family="monospace">float</fo:inline>
    <fo:inline font-family="monospace">fun_type</fo:inline>
    <fo:inline font-family="monospace">integer</fo:inline>
    <fo:inline font-family="monospace">nil</fo:inline>
    <fo:inline font-family="monospace">operator</fo:inline>
    <fo:inline font-family="monospace">string</fo:inline>
   <fo:block/>
    <fo:inline font-family="monospace">text</fo:inline>
    <fo:inline font-family="monospace">underscore</fo:inline>
    <fo:inline font-family="monospace">variable</fo:inline>
    <fo:inline font-family="monospace">warning_marker</fo:inline>
   <fo:block/>
  </fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A node of type <fo:inline font-family="monospace">map_expr</fo:inline> is a leaf node if and only if it has no
  argument and no fields.
  A node of type <fo:inline font-family="monospace">map_type</fo:inline> is a leaf node if and only if it has no
  fields (<fo:inline font-family="monospace">any_size</fo:inline>).
  A node of type <fo:inline font-family="monospace">tuple</fo:inline> is a leaf node if and only if its arity is zero.
  A node of type <fo:inline font-family="monospace">tuple_type</fo:inline> is a leaf node if and only if it has no
  elements (<fo:inline font-family="monospace">any_size</fo:inline>).</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note: not all literals are leaf nodes, and vice versa. E.g.,
  tuples with nonzero arity and nonempty lists may be literals, but are
  not leaf nodes. Variables, on the other hand, are leaf nodes but not
  literals.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">is_literal/1</fo:inline>, <fo:inline font-style="italic">type/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5613712">is_list_skeleton(Node::syntaxTree()) -&gt; boolean()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if <fo:inline font-family="monospace">Node</fo:inline> has type
  <fo:inline font-family="monospace">list</fo:inline> or <fo:inline font-family="monospace">nil</fo:inline>, otherwise <fo:inline font-family="monospace">false</fo:inline>.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">list/2</fo:inline>, <fo:inline font-style="italic">nil/0</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5621376">is_literal(T::syntaxTree()) -&gt; boolean()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if <fo:inline font-family="monospace">Node</fo:inline> represents a
  literal term, otherwise <fo:inline font-family="monospace">false</fo:inline>. This function returns
  <fo:inline font-family="monospace">true</fo:inline> if and only if the value of
  <fo:inline font-family="monospace">concrete(Node)</fo:inline> is defined.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">abstract/1</fo:inline>, <fo:inline font-style="italic">concrete/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5629104">is_proper_list(Node::syntaxTree()) -&gt; boolean()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if <fo:inline font-family="monospace">Node</fo:inline> represents a
  proper list, and <fo:inline font-family="monospace">false</fo:inline> otherwise. A proper list is a
  list skeleton either on the form "<fo:inline font-family="monospace">[]</fo:inline>" or
  "<fo:inline font-family="monospace">[E1, ..., En]</fo:inline>", or "<fo:inline font-family="monospace">[... |
  Tail]</fo:inline>" where recursively <fo:inline font-family="monospace">Tail</fo:inline> also  
represents a proper list.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note: Since <fo:inline font-family="monospace">Node</fo:inline> is a syntax tree, the actual
  run-time values corresponding to its subtrees may often be partially
  or completely unknown. Thus, if <fo:inline font-family="monospace">Node</fo:inline> represents e.g.
  "<fo:inline font-family="monospace">[... | Ns]</fo:inline>" (where <fo:inline font-family="monospace">Ns</fo:inline> is a variable), then
  the function will return <fo:inline font-family="monospace">false</fo:inline>, because it is not known
  whether <fo:inline font-family="monospace">Ns</fo:inline> will be bound to a list at run-time. If
  <fo:inline font-family="monospace">Node</fo:inline> instead represents e.g. "<fo:inline font-family="monospace">[1, 2, 3]</fo:inline>" or
  "<fo:inline font-family="monospace">[A | []]</fo:inline>", then the function will return
  <fo:inline font-family="monospace">true</fo:inline>.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">list/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5642176">is_string(Node::syntaxTree(), Value::string()) -&gt; boolean()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if <fo:inline font-family="monospace">Node</fo:inline> has type
  <fo:inline font-family="monospace">string</fo:inline> and represents <fo:inline font-family="monospace">Value</fo:inline>, otherwise <fo:inline font-family="monospace">false</fo:inline>.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">string/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5649152">is_tree(Tree::syntaxTree()) -&gt; boolean()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">For special purposes only</fo:inline>. Returns <fo:inline font-family="monospace">true</fo:inline> if
  <fo:inline font-family="monospace">Tree</fo:inline> is an abstract syntax tree and <fo:inline font-family="monospace">false</fo:inline>  
otherwise.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Note</fo:inline>: this function yields <fo:inline font-family="monospace">false</fo:inline> for all
  "old-style" <fo:inline font-family="monospace">erl_parse</fo:inline>-compatible "parse trees".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">tree/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5657136">join_comments(Source::syntaxTree(), Target::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Appends the comments of <fo:inline font-family="monospace">Source</fo:inline> to the current
  comments of <fo:inline font-family="monospace">Target</fo:inline>.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note: This is equivalent to
  <fo:inline font-family="monospace">add_postcomments(get_postcomments(Source),
  add_precomments(get_precomments(Source), Target))</fo:inline>, but
  potentially more efficient.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">add_postcomments/2</fo:inline>, <fo:inline font-style="italic">add_precomments/2</fo:inline>, <fo:inline font-style="italic">comment/2</fo:inline>, <fo:inline font-style="italic">get_postcomments/1</fo:inline>, <fo:inline font-style="italic">get_precomments/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5667936">list(List::[syntaxTree()]) -&gt; syntaxTree()</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">list(List, none)</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5672432">list(Elements::[syntaxTree()], Tail::none | syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Constructs an abstract list skeleton. The result has type
  <fo:inline font-family="monospace">list</fo:inline> or <fo:inline font-family="monospace">nil</fo:inline>. If <fo:inline font-family="monospace">List</fo:inline> is a
  nonempty list <fo:inline font-family="monospace">[E1, ..., En]</fo:inline>, the result has type
  <fo:inline font-family="monospace">list</fo:inline> and represents either "<fo:inline font-family="monospace">[E1, ...,
  En]</fo:inline>", if <fo:inline font-family="monospace">Tail</fo:inline> is <fo:inline font-family="monospace">none</fo:inline>, or
  otherwise "<fo:inline font-family="monospace">[E1, ..., En |
  Tail]</fo:inline>". If <fo:inline font-family="monospace">List</fo:inline> is the empty list,
  <fo:inline font-family="monospace">Tail</fo:inline> <fo:inline font-weight="bold">must</fo:inline> be <fo:inline font-family="monospace">none</fo:inline>, and in that
  case the result has type <fo:inline font-family="monospace">nil</fo:inline> and represents
  "<fo:inline font-family="monospace">[]</fo:inline>" (see <fo:inline font-style="italic">nil/0</fo:inline>).</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The difference between lists as semantic objects (built up of  
individual "cons" and "nil" terms) and the various syntactic forms  
for denoting lists may be bewildering at first. This module provides  
functions both for exact control of the syntactic representation as  
well as for the simple composition and deconstruction in terms of  
cons and head/tail operations.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note: in <fo:inline font-family="monospace">list(Elements, none)</fo:inline>, the "nil" list
  terminator is implicit and has no associated information (see
  <fo:inline font-style="italic">get_attrs/1</fo:inline>), while in the seemingly equivalent
  <fo:inline font-family="monospace">list(Elements, Tail)</fo:inline> when <fo:inline font-family="monospace">Tail</fo:inline> has type
  <fo:inline font-family="monospace">nil</fo:inline>, the list terminator subtree <fo:inline font-family="monospace">Tail</fo:inline> may
  have attached attributes such as position, comments, and annotations,
  which will be preserved in the result.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">compact_list/1</fo:inline>, <fo:inline font-style="italic">cons/2</fo:inline>, <fo:inline font-style="italic">get_attrs/1</fo:inline>, <fo:inline font-style="italic">is_list_skeleton/1</fo:inline>, <fo:inline font-style="italic">is_proper_list/1</fo:inline>, <fo:inline font-style="italic">list/1</fo:inline>, <fo:inline font-style="italic">list_elements/1</fo:inline>, <fo:inline font-style="italic">list_head/1</fo:inline>, <fo:inline font-style="italic">list_length/1</fo:inline>, <fo:inline font-style="italic">list_prefix/1</fo:inline>, <fo:inline font-style="italic">list_suffix/1</fo:inline>, <fo:inline font-style="italic">list_tail/1</fo:inline>, <fo:inline font-style="italic">nil/0</fo:inline>, <fo:inline font-style="italic">normalize_list/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5699696">list_comp(Template::syntaxTree(), Body::[syntaxTree()]) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract list comprehension. If <fo:inline font-family="monospace">Body</fo:inline> is
  <fo:inline font-family="monospace">[E1, ..., En]</fo:inline>, the result represents
  "<fo:inline font-family="monospace">[Template || E1, ..., En]</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">generator/2</fo:inline>, <fo:inline font-style="italic">list_comp_body/1</fo:inline>, <fo:inline font-style="italic">list_comp_template/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5708496">list_comp_body(Node::syntaxTree()) -&gt; [syntaxTree()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the list of body subtrees of a <fo:inline font-family="monospace">list_comp</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">list_comp/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5714368">list_comp_template(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the template subtree of a <fo:inline font-family="monospace">list_comp</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">list_comp/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5720096">list_elements(Node::syntaxTree()) -&gt; [syntaxTree()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the list of element subtrees of a list skeleton.
  <fo:inline font-family="monospace">Node</fo:inline> must represent a proper list. E.g., if
  <fo:inline font-family="monospace">Node</fo:inline> represents "<fo:inline font-family="monospace">[X1, X2 |
  [X3, X4 | []]</fo:inline>", then
  <fo:inline font-family="monospace">list_elements(Node)</fo:inline> yields the list <fo:inline font-family="monospace">[X1, X2, X3, X4]</fo:inline>.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">is_proper_list/1</fo:inline>, <fo:inline font-style="italic">list/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5728576">list_head(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the head element subtree of a <fo:inline font-family="monospace">list</fo:inline> node. If
  <fo:inline font-family="monospace">Node</fo:inline> represents "<fo:inline font-family="monospace">[Head ...]</fo:inline>", the
  result will represent "<fo:inline font-family="monospace">Head</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">cons/2</fo:inline>, <fo:inline font-style="italic">list/2</fo:inline>, <fo:inline font-style="italic">list_tail/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5737088">list_length(Node::syntaxTree()) -&gt; non_neg_integer()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the number of element subtrees of a list skeleton.
  <fo:inline font-family="monospace">Node</fo:inline> must represent a proper list. E.g., if
  <fo:inline font-family="monospace">Node</fo:inline> represents "<fo:inline font-family="monospace">[X1 | [X2, X3 | [X4, X5,
  X6]]]</fo:inline>", then <fo:inline font-family="monospace">list_length(Node)</fo:inline> returns the  
integer 6.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note: this is equivalent to
  <fo:inline font-family="monospace">length(list_elements(Node))</fo:inline>, but potentially more
  efficient.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">is_proper_list/1</fo:inline>, <fo:inline font-style="italic">list/2</fo:inline>, <fo:inline font-style="italic">list_elements/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5746080">list_prefix(Node::syntaxTree()) -&gt; [syntaxTree()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the prefix element subtrees of a <fo:inline font-family="monospace">list</fo:inline> node.
  If <fo:inline font-family="monospace">Node</fo:inline> represents "<fo:inline font-family="monospace">[E1, ...,
  En]</fo:inline>" or "<fo:inline font-family="monospace">[E1, ..., En |
  Tail]</fo:inline>", the returned value is <fo:inline font-family="monospace">[E1, ...,
  En]</fo:inline>.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">list/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5753776">list_suffix(Node::syntaxTree()) -&gt; none | syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the suffix subtree of a <fo:inline font-family="monospace">list</fo:inline> node, if one
  exists. If <fo:inline font-family="monospace">Node</fo:inline> represents "<fo:inline font-family="monospace">[E1, ...,
  En | Tail]</fo:inline>", the returned value is
  <fo:inline font-family="monospace">Tail</fo:inline>, otherwise, i.e., if <fo:inline font-family="monospace">Node</fo:inline> represents
  "<fo:inline font-family="monospace">[E1, ..., En]</fo:inline>", <fo:inline font-family="monospace">none</fo:inline> is  
returned.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that even if this function returns some <fo:inline font-family="monospace">Tail</fo:inline>
  that is not <fo:inline font-family="monospace">none</fo:inline>, the type of <fo:inline font-family="monospace">Tail</fo:inline> can be
  <fo:inline font-family="monospace">nil</fo:inline>, if the tail has been given explicitly, and the list
  skeleton has not been compacted (see <fo:inline font-style="italic">compact_list/1</fo:inline>).
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">compact_list/1</fo:inline>, <fo:inline font-style="italic">list/2</fo:inline>, <fo:inline font-style="italic">nil/0</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5766736">list_tail(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the tail of a <fo:inline font-family="monospace">list</fo:inline> node. If
  <fo:inline font-family="monospace">Node</fo:inline> represents a single-element list
  "<fo:inline font-family="monospace">[E]</fo:inline>", then the result has type
  <fo:inline font-family="monospace">nil</fo:inline>, representing "<fo:inline font-family="monospace">[]</fo:inline>". If
  <fo:inline font-family="monospace">Node</fo:inline> represents "<fo:inline font-family="monospace">[E1, E2
  ...]</fo:inline>", the result will represent "<fo:inline font-family="monospace">[E2
  ...]</fo:inline>", and if <fo:inline font-family="monospace">Node</fo:inline> represents
  "<fo:inline font-family="monospace">[Head | Tail]</fo:inline>", the result will
  represent "<fo:inline font-family="monospace">Tail</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">cons/2</fo:inline>, <fo:inline font-style="italic">list/2</fo:inline>, <fo:inline font-style="italic">list_head/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5778400">macro(Name::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">macro(Name, none)</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5782896">macro(Name::syntaxTree(), Arguments::none | [syntaxTree()]) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract macro application. If <fo:inline font-family="monospace">Arguments</fo:inline>
  is <fo:inline font-family="monospace">none</fo:inline>, the result represents
  "<fo:inline font-family="monospace">?Name</fo:inline>", otherwise, if <fo:inline font-family="monospace">Arguments</fo:inline>
  is <fo:inline font-family="monospace">[A1, ..., An]</fo:inline>, the result represents
  "<fo:inline font-family="monospace">?Name(A1, ..., An)</fo:inline>".</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notes: if <fo:inline font-family="monospace">Arguments</fo:inline> is the empty list, the result
  will thus represent "<fo:inline font-family="monospace">?Name()</fo:inline>", including a pair  
of matching parentheses.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The only syntactical limitation imposed by the preprocessor on the
  arguments to a macro application (viewed as sequences of tokens) is
  that they must be balanced with respect to parentheses, brackets,
  <fo:inline font-family="monospace">begin ... end</fo:inline>, <fo:inline font-family="monospace">case ... end</fo:inline>, etc. The
  <fo:inline font-family="monospace">text</fo:inline> node type can be used to represent arguments which
  are not regular Erlang constructs.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">macro/1</fo:inline>, <fo:inline font-style="italic">macro_arguments/1</fo:inline>, <fo:inline font-style="italic">macro_name/1</fo:inline>, <fo:inline font-style="italic">text/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5797232">macro_arguments(Node::syntaxTree()) -&gt; none | [syntaxTree()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the list of argument subtrees of a <fo:inline font-family="monospace">macro</fo:inline>
  node, if any. If <fo:inline font-family="monospace">Node</fo:inline> represents
  "<fo:inline font-family="monospace">?Name</fo:inline>", <fo:inline font-family="monospace">none</fo:inline> is returned.
  Otherwise, if <fo:inline font-family="monospace">Node</fo:inline> represents
  "<fo:inline font-family="monospace">?Name(A1, ..., An)</fo:inline>",
  <fo:inline font-family="monospace">[A1, ..., An]</fo:inline> is returned.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">macro/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5805840">macro_name(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the name subtree of a <fo:inline font-family="monospace">macro</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">macro/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5811552">make_tree(X1::atom(), X2::[[syntaxTree()]]) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a syntax tree with the given type and subtrees.
  <fo:inline font-family="monospace">Type</fo:inline> must be a node type name (see <fo:inline font-style="italic">type/1</fo:inline>)
  that does not denote a leaf node type (see <fo:inline font-style="italic">is_leaf/1</fo:inline>).
  <fo:inline font-family="monospace">Groups</fo:inline> must be a <fo:inline font-weight="bold">nonempty</fo:inline> list of groups of
  syntax trees, representing the subtrees of a node of the given type,
  in left-to-right order as they would occur in the printed program
  text, grouped by category as done by <fo:inline font-style="italic">subtrees/1</fo:inline>.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The result of <fo:inline font-family="monospace">copy_attrs(Node, make_tree(type(Node),
  subtrees(Node)))</fo:inline> (see <fo:inline font-style="italic">update_tree/2</fo:inline>) represents
  the same source code text as the original <fo:inline font-family="monospace">Node</fo:inline>, assuming
  that <fo:inline font-family="monospace">subtrees(Node)</fo:inline> yields a nonempty list. However, it
  does not necessarily have the same data representation as
  <fo:inline font-family="monospace">Node</fo:inline>.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">copy_attrs/2</fo:inline>, <fo:inline font-style="italic">is_leaf/1</fo:inline>, <fo:inline font-style="italic">subtrees/1</fo:inline>, <fo:inline font-style="italic">type/1</fo:inline>, <fo:inline font-style="italic">update_tree/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5826608">map_expr(Fields::[syntaxTree()]) -&gt; syntaxTree()</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">map_expr(none, Fields)</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5831104">map_expr(Argument::none | syntaxTree(), Fields::[syntaxTree()]) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract map expression. If <fo:inline font-family="monospace">Fields</fo:inline> is
  <fo:inline font-family="monospace">[F1, ..., Fn]</fo:inline>, then if <fo:inline font-family="monospace">Argument</fo:inline> is <fo:inline font-family="monospace">none</fo:inline>, the result represents
  "<fo:inline font-family="monospace">#{F1, ..., Fn}</fo:inline>",
  otherwise it represents
  "<fo:inline font-family="monospace">Argument#{F1, ..., Fn}</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">map_expr/1</fo:inline>, <fo:inline font-style="italic">map_expr_argument/1</fo:inline>, <fo:inline font-style="italic">map_expr_fields/1</fo:inline>, <fo:inline font-style="italic">map_field_assoc/2</fo:inline>, <fo:inline font-style="italic">map_field_exact/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5842688">map_expr_argument(Node::syntaxTree()) -&gt; none | syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the argument subtree of a <fo:inline font-family="monospace">map_expr</fo:inline> node, if any. If <fo:inline font-family="monospace">Node</fo:inline>
  represents "<fo:inline font-family="monospace">#{...}</fo:inline>", <fo:inline font-family="monospace">none</fo:inline> is returned.
  Otherwise, if <fo:inline font-family="monospace">Node</fo:inline> represents "<fo:inline font-family="monospace">Argument#{...}</fo:inline>",
  <fo:inline font-family="monospace">Argument</fo:inline> is returned.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">map_expr/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5851136">map_expr_fields(Node::syntaxTree()) -&gt; [syntaxTree()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the list of field subtrees of a <fo:inline font-family="monospace">map_expr</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">map_expr/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5857024">map_field_assoc(Name::syntaxTree(), Value::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract map assoc field. The result represents
  "<fo:inline font-family="monospace">Name =&gt; Value</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">map_expr/2</fo:inline>, <fo:inline font-style="italic">map_field_assoc_name/1</fo:inline>, <fo:inline font-style="italic">map_field_assoc_value/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5864928">map_field_assoc_name(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the name subtree of a <fo:inline font-family="monospace">map_field_assoc</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">map_field_assoc/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5870656">map_field_assoc_value(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the value subtree of a <fo:inline font-family="monospace">map_field_assoc</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">map_field_assoc/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5876384">map_field_exact(Name::syntaxTree(), Value::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract map exact field. The result represents
  "<fo:inline font-family="monospace">Name := Value</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">map_expr/2</fo:inline>, <fo:inline font-style="italic">map_field_exact_name/1</fo:inline>, <fo:inline font-style="italic">map_field_exact_value/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5884288">map_field_exact_name(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the name subtree of a <fo:inline font-family="monospace">map_field_exact</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">map_field_exact/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5890016">map_field_exact_value(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the value subtree of a <fo:inline font-family="monospace">map_field_exact</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">map_field_exact/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5895744">map_type() -&gt; term()
</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">map_type(any_size)</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5898960">map_type(Fields::any_size | [syntaxTree()]) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract type map. If <fo:inline font-family="monospace">Fields</fo:inline> is
  <fo:inline font-family="monospace">[F1, ..., Fn]</fo:inline>, the result represents
  "<fo:inline font-family="monospace">#{F1, ..., Fn}</fo:inline>";
  otherwise, if <fo:inline font-family="monospace">Fields</fo:inline> is <fo:inline font-family="monospace">any_size</fo:inline>, it represents
  "<fo:inline font-family="monospace">map()</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">map_type_fields/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5906928">map_type_assoc(Name::syntaxTree(), Value::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract map type assoc field. The result represents
  "<fo:inline font-family="monospace">Name =&gt; Value</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">map_type/1</fo:inline>, <fo:inline font-style="italic">map_type_assoc_name/1</fo:inline>, <fo:inline font-style="italic">map_type_assoc_value/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5914832">map_type_assoc_name(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the name subtree of a <fo:inline font-family="monospace">map_type_assoc</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">map_type_assoc/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5920560">map_type_assoc_value(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the value subtree of a <fo:inline font-family="monospace">map_type_assoc</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">map_type_assoc/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5926288">map_type_exact(Name::syntaxTree(), Value::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract map type exact field. The result represents
  "<fo:inline font-family="monospace">Name := Value</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">map_type/1</fo:inline>, <fo:inline font-style="italic">map_type_exact_name/1</fo:inline>, <fo:inline font-style="italic">map_type_exact_value/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5934192">map_type_exact_name(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the name subtree of a <fo:inline font-family="monospace">map_type_exact</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">map_type_exact/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5939920">map_type_exact_value(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the value subtree of a <fo:inline font-family="monospace">map_type_exact</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">map_type_exact/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5945648">map_type_fields(Node::syntaxTree()) -&gt; any_size | [syntaxTree()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the list of field subtrees of a <fo:inline font-family="monospace">map_type</fo:inline> node.
  If <fo:inline font-family="monospace">Node</fo:inline> represents "<fo:inline font-family="monospace">map()</fo:inline>", <fo:inline font-family="monospace">any_size</fo:inline> is returned;
  otherwise, if <fo:inline font-family="monospace">Node</fo:inline> represents
  "<fo:inline font-family="monospace">#{F1, ..., Fn}</fo:inline>",
  <fo:inline font-family="monospace">[F1, ..., Fn]</fo:inline> is returned.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">map_type/0</fo:inline>, <fo:inline font-style="italic">map_type/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5954960">match_expr(Pattern::syntaxTree(), Body::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract match-expression. The result represents
  "<fo:inline font-family="monospace">Pattern = Body</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">match_expr_body/1</fo:inline>, <fo:inline font-style="italic">match_expr_pattern/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5962128">match_expr_body(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the body subtree of a <fo:inline font-family="monospace">match_expr</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">match_expr/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5967840">match_expr_pattern(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the pattern subtree of a <fo:inline font-family="monospace">match_expr</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">match_expr/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5973568">meta(T::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a meta-representation of a syntax tree. The result
  represents an Erlang expression "<fo:inline font-family="monospace">MetaTree</fo:inline>"
  which, if evaluated, will yield a new syntax tree representing the
  same source code text as <fo:inline font-family="monospace">Tree</fo:inline> (although the actual data
  representation may be different). The expression represented by
  <fo:inline font-family="monospace">MetaTree</fo:inline> is <fo:inline font-weight="bold">implementation independent</fo:inline> with
  regard to the data structures used by the abstract syntax tree
  implementation. Comments attached to nodes of <fo:inline font-family="monospace">Tree</fo:inline> will  
be preserved, but other attributes are lost.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Any node in <fo:inline font-family="monospace">Tree</fo:inline> whose node type is
  <fo:inline font-family="monospace">variable</fo:inline> (see <fo:inline font-style="italic">type/1</fo:inline>), and whose list of
  annotations (see <fo:inline font-style="italic">get_ann/1</fo:inline>) contains the atom
  <fo:inline font-family="monospace">meta_var</fo:inline>, will remain unchanged in the resulting tree,
  except that exactly one occurrence of <fo:inline font-family="monospace">meta_var</fo:inline> is  
removed from its annotation list.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The main use of the function <fo:inline font-family="monospace">meta/1</fo:inline> is to transform a
  data structure <fo:inline font-family="monospace">Tree</fo:inline>, which represents a piece of program
  code, into a form that is <fo:inline font-weight="bold">representation independent when
  printed</fo:inline>. E.g., suppose <fo:inline font-family="monospace">Tree</fo:inline> represents a variable
  named "V". Then (assuming a function <fo:inline font-family="monospace">print/1</fo:inline> for
  printing syntax trees), evaluating <fo:inline font-family="monospace">print(abstract(Tree))</fo:inline>
  - simply using <fo:inline font-style="italic">abstract/1</fo:inline> to map the actual data
  structure onto a syntax tree representation - would output a string
  that might look something like "<fo:inline font-family="monospace">{tree, variable, ..., "V",
  ...}</fo:inline>", which is obviously dependent on the implementation of
  the abstract syntax trees. This could e.g. be useful for caching a
  syntax tree in a file. However, in some situations like in a program
  generator generator (with two "generator"), it may be unacceptable.
  Using <fo:inline font-family="monospace">print(meta(Tree))</fo:inline> instead would output a
  <fo:inline font-weight="bold">representation independent</fo:inline> syntax tree generating
  expression; in the above case, something like
  "<fo:inline font-family="monospace">erl_syntax:variable("V")</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">abstract/1</fo:inline>, <fo:inline font-style="italic">get_ann/1</fo:inline>, <fo:inline font-style="italic">type/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5993008">module_qualifier(Module::syntaxTree(), Body::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract module qualifier. The result represents
  "<fo:inline font-family="monospace">Module:Body</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">module_qualifier_argument/1</fo:inline>, <fo:inline font-style="italic">module_qualifier_body/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6000240">module_qualifier_argument(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the argument (the module) subtree of a
  <fo:inline font-family="monospace">module_qualifier</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">module_qualifier/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6006016">module_qualifier_body(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the body subtree of a <fo:inline font-family="monospace">module_qualifier</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">module_qualifier/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6011744">named_fun_expr(Name::syntaxTree(), Clauses::[syntaxTree()]) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract named fun-expression. If <fo:inline font-family="monospace">Clauses</fo:inline> is
  <fo:inline font-family="monospace">[C1, ..., Cn]</fo:inline>, the result represents "<fo:inline font-family="monospace">fun
  Name C1; ...; Name Cn end</fo:inline>".
  More exactly, if each <fo:inline font-family="monospace">Ci</fo:inline> represents
  "<fo:inline font-family="monospace">(Pi1, ..., Pim) Gi -&gt; Bi</fo:inline>",
  then the result represents
  "<fo:inline font-family="monospace">fun Name(P11, ..., P1m) G1 -&gt;
  B1; ...; Name(Pn1, ..., Pnm)
  Gn -&gt; Bn end</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">named_fun_expr_arity/1</fo:inline>, <fo:inline font-style="italic">named_fun_expr_clauses/1</fo:inline>, <fo:inline font-style="italic">named_fun_expr_name/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6022048">named_fun_expr_arity(Node::syntaxTree()) -&gt; arity()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the arity of a <fo:inline font-family="monospace">named_fun_expr</fo:inline> node. The result is  
the number of parameter patterns in the first clause of the  
named fun-expression; subsequent clauses are ignored.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An exception is thrown if <fo:inline font-family="monospace">named_fun_expr_clauses(Node)</fo:inline>
  returns an empty list, or if the first element of that list is not a
  syntax tree <fo:inline font-family="monospace">C</fo:inline> of type <fo:inline font-family="monospace">clause</fo:inline> such that
  <fo:inline font-family="monospace">clause_patterns(C)</fo:inline> is a nonempty list.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">clause/3</fo:inline>, <fo:inline font-style="italic">clause_patterns/1</fo:inline>, <fo:inline font-style="italic">named_fun_expr/2</fo:inline>, <fo:inline font-style="italic">named_fun_expr_clauses/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6031856">named_fun_expr_clauses(Node::syntaxTree()) -&gt; [syntaxTree()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the list of clause subtrees of a <fo:inline font-family="monospace">named_fun_expr</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">named_fun_expr/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6037792">named_fun_expr_name(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the name subtree of a <fo:inline font-family="monospace">named_fun_expr</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">named_fun_expr/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6043520">nil() -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract empty list. The result represents
  "<fo:inline font-family="monospace">[]</fo:inline>". The empty list is traditionally called "nil".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">is_list_skeleton/1</fo:inline>, <fo:inline font-style="italic">list/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6049280">normalize_list(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Expands an abstract list skeleton to its most explicit form. If
  <fo:inline font-family="monospace">Node</fo:inline> represents "<fo:inline font-family="monospace">[E1, ..., En |
  Tail]</fo:inline>", the result represents "<fo:inline font-family="monospace">[E1 |
  ... [En | Tail1] ... ]</fo:inline>", where
  <fo:inline font-family="monospace">Tail1</fo:inline> is the result of
  <fo:inline font-family="monospace">normalize_list(Tail)</fo:inline>. If <fo:inline font-family="monospace">Node</fo:inline> represents
  "<fo:inline font-family="monospace">[E1, ..., En]</fo:inline>", the result simply
  represents "<fo:inline font-family="monospace">[E1 | ... [En | []] ...
  ]</fo:inline>". If <fo:inline font-family="monospace">Node</fo:inline> does not represent a list skeleton,
  <fo:inline font-family="monospace">Node</fo:inline> itself is returned.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">compact_list/1</fo:inline>, <fo:inline font-style="italic">list/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6059872">operator(Name::atom() | string()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract operator. The name of the operator is the
  character sequence represented by <fo:inline font-family="monospace">Name</fo:inline>. This is
  analogous to the print name of an atom, but an operator is never
  written within single-quotes; e.g., the result of
  <fo:inline font-family="monospace">operator(</fo:inline>++')' represents "<fo:inline font-family="monospace">++</fo:inline>" rather
  than "`++''".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">atom/1</fo:inline>, <fo:inline font-style="italic">operator_literal/1</fo:inline>, <fo:inline font-style="italic">operator_name/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6067392">operator_literal(Node::syntaxTree()) -&gt; string()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the literal string represented by an
  <fo:inline font-family="monospace">operator</fo:inline> node. This is simply the operator name as a string.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">operator/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6072608">operator_name(Node::syntaxTree()) -&gt; atom()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the name of an <fo:inline font-family="monospace">operator</fo:inline> node. Note that
  the name is returned as an atom.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">operator/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6077760">parentheses(Expr::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract parenthesised expression. The result
  represents "<fo:inline font-family="monospace">(Body)</fo:inline>", independently of the
  context.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">parentheses_body/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6083520">parentheses_body(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the body subtree of a <fo:inline font-family="monospace">parentheses</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">parentheses/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6089232">prefix_expr(Operator::syntaxTree(), Argument::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract prefix operator expression. The result
  represents "<fo:inline font-family="monospace">Operator Argument</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">infix_expr/3</fo:inline>, <fo:inline font-style="italic">prefix_expr_argument/1</fo:inline>, <fo:inline font-style="italic">prefix_expr_operator/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6097152">prefix_expr_argument(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the argument subtree of a <fo:inline font-family="monospace">prefix_expr</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">prefix_expr/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6102880">prefix_expr_operator(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the operator subtree of a <fo:inline font-family="monospace">prefix_expr</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">prefix_expr/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6108608">receive_expr(Clauses::[syntaxTree()]) -&gt; syntaxTree()</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">receive_expr(Clauses, none, [])</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6113136">receive_expr(Clauses::[syntaxTree()], Timeout::none | syntaxTree(), Action::[syntaxTree()]) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract receive-expression. If <fo:inline font-family="monospace">Timeout</fo:inline>
  is <fo:inline font-family="monospace">none</fo:inline>, the result represents "<fo:inline font-family="monospace">receive
  C1; ...; Cn end</fo:inline>" (the <fo:inline font-family="monospace">Action</fo:inline>
  argument is ignored). Otherwise, if <fo:inline font-family="monospace">Clauses</fo:inline> is
  <fo:inline font-family="monospace">[C1, ..., Cn]</fo:inline> and <fo:inline font-family="monospace">Action</fo:inline> is <fo:inline font-family="monospace">[A1, ...,
  Am]</fo:inline>, the result represents "<fo:inline font-family="monospace">receive C1; ...;
  Cn after Timeout -&gt; A1, ..., Am
  end</fo:inline>". More exactly, if each <fo:inline font-family="monospace">Ci</fo:inline> represents
  "<fo:inline font-family="monospace">(Pi) Gi -&gt; Bi</fo:inline>", then the
  result represents "<fo:inline font-family="monospace">receive P1 G1 -&gt;
  B1; ...; Pn Gn -&gt; Bn ...
  end</fo:inline>".</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that in Erlang, a receive-expression must have at least one
  clause if no timeout part is specified.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">case_expr/2</fo:inline>, <fo:inline font-style="italic">clause/3</fo:inline>, <fo:inline font-style="italic">receive_expr/1</fo:inline>, <fo:inline font-style="italic">receive_expr_action/1</fo:inline>, <fo:inline font-style="italic">receive_expr_clauses/1</fo:inline>, <fo:inline font-style="italic">receive_expr_timeout/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6129536">receive_expr_action(Node::syntaxTree()) -&gt; [syntaxTree()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the list of action body subtrees of a
  <fo:inline font-family="monospace">receive_expr</fo:inline> node. If <fo:inline font-family="monospace">Node</fo:inline> represents
  "<fo:inline font-family="monospace">receive C1; ...; Cn end</fo:inline>", this is the
  empty list.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">receive_expr/3</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6136368">receive_expr_clauses(Node::syntaxTree()) -&gt; [syntaxTree()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the list of clause subtrees of a
  <fo:inline font-family="monospace">receive_expr</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">receive_expr/3</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6142288">receive_expr_timeout(Node::syntaxTree()) -&gt; none | syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the timeout subtree of a <fo:inline font-family="monospace">receive_expr</fo:inline> node,
  if any. If <fo:inline font-family="monospace">Node</fo:inline> represents "<fo:inline font-family="monospace">receive C1;
  ...; Cn end</fo:inline>", <fo:inline font-family="monospace">none</fo:inline> is returned.
  Otherwise, if <fo:inline font-family="monospace">Node</fo:inline> represents "<fo:inline font-family="monospace">receive
  C1; ...; Cn after Timeout -&gt; ... end</fo:inline>",
  <fo:inline font-family="monospace">Timeout</fo:inline> is returned.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">receive_expr/3</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6150784">record_access(Argument::syntaxTree(), Type::syntaxTree(), Field::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract record field access expression. The result
  represents "<fo:inline font-family="monospace">Argument#Type.Field</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">record_access_argument/1</fo:inline>, <fo:inline font-style="italic">record_access_field/1</fo:inline>, <fo:inline font-style="italic">record_access_type/1</fo:inline>, <fo:inline font-style="italic">record_expr/3</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6160192">record_access_argument(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the argument subtree of a <fo:inline font-family="monospace">record_access</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">record_access/3</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6165936">record_access_field(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the field subtree of a <fo:inline font-family="monospace">record_access</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">record_access/3</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6171664">record_access_type(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the type subtree of a <fo:inline font-family="monospace">record_access</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">record_access/3</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6177392">record_expr(Type::syntaxTree(), Fields::[syntaxTree()]) -&gt; syntaxTree()</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">record_expr(none, Type, Fields)</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6182640">record_expr(Argument::none | syntaxTree(), Type::syntaxTree(), Fields::[syntaxTree()]) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract record expression. If <fo:inline font-family="monospace">Fields</fo:inline> is
  <fo:inline font-family="monospace">[F1, ..., Fn]</fo:inline>, then if <fo:inline font-family="monospace">Argument</fo:inline> is
  <fo:inline font-family="monospace">none</fo:inline>, the result represents
  "<fo:inline font-family="monospace">#Type{F1, ..., Fn}</fo:inline>",
  otherwise it represents
  "<fo:inline font-family="monospace">Argument#Type{F1, ...,
  Fn}</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">record_access/3</fo:inline>, <fo:inline font-style="italic">record_expr/2</fo:inline>, <fo:inline font-style="italic">record_expr_argument/1</fo:inline>, <fo:inline font-style="italic">record_expr_fields/1</fo:inline>, <fo:inline font-style="italic">record_expr_type/1</fo:inline>, <fo:inline font-style="italic">record_field/2</fo:inline>, <fo:inline font-style="italic">record_index_expr/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6196416">record_expr_argument(Node::syntaxTree()) -&gt; none | syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the argument subtree of a <fo:inline font-family="monospace">record_expr</fo:inline> node,
  if any. If <fo:inline font-family="monospace">Node</fo:inline> represents
  "<fo:inline font-family="monospace">#Type{...}</fo:inline>", <fo:inline font-family="monospace">none</fo:inline> is returned.
  Otherwise, if <fo:inline font-family="monospace">Node</fo:inline> represents
  "<fo:inline font-family="monospace">Argument#Type{...}</fo:inline>",
  <fo:inline font-family="monospace">Argument</fo:inline> is returned.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">record_expr/3</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6204864">record_expr_fields(Node::syntaxTree()) -&gt; [syntaxTree()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the list of field subtrees of a
  <fo:inline font-family="monospace">record_expr</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">record_expr/3</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6210784">record_expr_type(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the type subtree of a <fo:inline font-family="monospace">record_expr</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">record_expr/3</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6216496">record_field(Name::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">record_field(Name, none)</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6221024">record_field(Name::syntaxTree(), Value::none | syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract record field specification. If
  <fo:inline font-family="monospace">Value</fo:inline> is <fo:inline font-family="monospace">none</fo:inline>, the result represents
  simply "<fo:inline font-family="monospace">Name</fo:inline>", otherwise it represents
  "<fo:inline font-family="monospace">Name = Value</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">record_expr/3</fo:inline>, <fo:inline font-style="italic">record_field_name/1</fo:inline>, <fo:inline font-style="italic">record_field_value/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6230288">record_field_name(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the name subtree of a <fo:inline font-family="monospace">record_field</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">record_field/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6236016">record_field_value(Node::syntaxTree()) -&gt; none | syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the value subtree of a <fo:inline font-family="monospace">record_field</fo:inline> node,
  if any. If <fo:inline font-family="monospace">Node</fo:inline> represents
  "<fo:inline font-family="monospace">Name</fo:inline>", <fo:inline font-family="monospace">none</fo:inline> is
  returned. Otherwise, if <fo:inline font-family="monospace">Node</fo:inline> represents
  "<fo:inline font-family="monospace">Name = Value</fo:inline>", <fo:inline font-family="monospace">Value</fo:inline>
  is returned.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">record_field/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6244464">record_index_expr(Type::syntaxTree(), Field::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract record field index expression. The result
  represents "<fo:inline font-family="monospace">#Type.Field</fo:inline>".</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">(Note: the function name <fo:inline font-family="monospace">record_index/2</fo:inline> is reserved
  by the Erlang compiler, which is why that name could not be used
  for this constructor.)
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">record_expr/3</fo:inline>, <fo:inline font-style="italic">record_index_expr_field/1</fo:inline>, <fo:inline font-style="italic">record_index_expr_type/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6253472">record_index_expr_field(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the field subtree of a <fo:inline font-family="monospace">record_index_expr</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">record_index_expr/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6259216">record_index_expr_type(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the type subtree of a <fo:inline font-family="monospace">record_index_expr</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">record_index_expr/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6264960">record_type(Name::syntaxTree(), Fields::[syntaxTree()]) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract record type. If <fo:inline font-family="monospace">Fields</fo:inline> is
  <fo:inline font-family="monospace">[F1, ..., Fn]</fo:inline>, the result represents
  "<fo:inline font-family="monospace">#Name{F1, ..., Fn}</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">record_type_fields/1</fo:inline>, <fo:inline font-style="italic">record_type_name/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6273008">record_type_field(Name::syntaxTree(), Type::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract record type field. The result represents
  "<fo:inline font-family="monospace">Name :: Type</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">record_type_field_name/1</fo:inline>, <fo:inline font-style="italic">record_type_field_type/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6280256">record_type_field_name(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the name subtree of a <fo:inline font-family="monospace">record_type_field</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">record_type_field/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6286000">record_type_field_type(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the type subtree of a <fo:inline font-family="monospace">record_type_field</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">record_type_field/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6291744">record_type_fields(Node::syntaxTree()) -&gt; [syntaxTree()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the fields subtree of a <fo:inline font-family="monospace">record_type</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">record_type/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6297632">record_type_name(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the name subtree of a <fo:inline font-family="monospace">record_type</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">record_type/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6303344">remove_comments(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Clears the associated comments of <fo:inline font-family="monospace">Node</fo:inline>.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note: This is equivalent to
  <fo:inline font-family="monospace">set_precomments(set_postcomments(Node, []), [])</fo:inline>, but
  potentially more efficient.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">set_postcomments/2</fo:inline>, <fo:inline font-style="italic">set_precomments/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6310720">revert(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns an <fo:inline font-family="monospace">erl_parse</fo:inline>-compatible representation of a
  syntax tree, if possible. If <fo:inline font-family="monospace">Tree</fo:inline> represents a
  well-formed Erlang program or expression, the conversion should work
  without problems. Typically, <fo:inline font-style="italic">is_tree/1</fo:inline> yields
  <fo:inline font-family="monospace">true</fo:inline> if conversion failed (i.e., the result is still an
  abstract syntax tree), and <fo:inline font-family="monospace">false</fo:inline> otherwise.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-style="italic">is_tree/1</fo:inline> test is not completely foolproof. For a
  few special node types (e.g. <fo:inline font-family="monospace">arity_qualifier</fo:inline>), if such a
  node occurs in a context where it is not expected, it will be left
  unchanged as a non-reverted subtree of the result. This can only
  happen if <fo:inline font-family="monospace">Tree</fo:inline> does not actually represent legal Erlang
  code.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">erl_parse(3)</fo:inline>, <fo:inline font-style="italic">revert_forms/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6321744">revert_forms(Forms::forms()) -&gt; [erl_parse()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Reverts a sequence of Erlang source code forms. The sequence can
  be given either as a <fo:inline font-family="monospace">form_list</fo:inline> syntax tree (possibly
  nested), or as a list of "program form" syntax trees. If successful,
  the corresponding flat list of <fo:inline font-family="monospace">erl_parse</fo:inline>-compatible
  syntax trees is returned (see <fo:inline font-style="italic">revert/1</fo:inline>). If some program
  form could not be reverted, <fo:inline font-family="monospace">{error, Form}</fo:inline> is thrown.
  Standalone comments in the form sequence are discarded.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">form_list/1</fo:inline>, <fo:inline font-style="italic">is_form/1</fo:inline>, <fo:inline font-style="italic">revert/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6330960">set_ann(Node::syntaxTree(), As::[term()]) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the list of user annotations of <fo:inline font-family="monospace">Node</fo:inline> to <fo:inline font-family="monospace">Annotations</fo:inline>.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">add_ann/2</fo:inline>, <fo:inline font-style="italic">copy_ann/2</fo:inline>, <fo:inline font-style="italic">get_ann/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6338576">set_attrs(Node::syntaxTree(), Attr::syntaxTreeAttributes()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the attributes of <fo:inline font-family="monospace">Node</fo:inline> to <fo:inline font-family="monospace">Attributes</fo:inline>.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">copy_attrs/2</fo:inline>, <fo:inline font-style="italic">get_attrs/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6346176">set_pos(Node::syntaxTree(), Pos::term()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the position information of <fo:inline font-family="monospace">Node</fo:inline> to <fo:inline font-family="monospace">Pos</fo:inline>.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">copy_pos/2</fo:inline>, <fo:inline font-style="italic">get_pos/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6353056">set_postcomments(Node::syntaxTree(), Cs::[syntaxTree()]) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the post-comments of <fo:inline font-family="monospace">Node</fo:inline> to
  <fo:inline font-family="monospace">Comments</fo:inline>. <fo:inline font-family="monospace">Comments</fo:inline> should be a possibly
  empty list of abstract comments, in top-down textual order
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">add_postcomments/2</fo:inline>, <fo:inline font-style="italic">comment/2</fo:inline>, <fo:inline font-style="italic">copy_comments/2</fo:inline>, <fo:inline font-style="italic">get_postcomments/1</fo:inline>, <fo:inline font-style="italic">join_comments/2</fo:inline>, <fo:inline font-style="italic">remove_comments/1</fo:inline>, <fo:inline font-style="italic">set_precomments/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6364768">set_precomments(Node::syntaxTree(), Cs::[syntaxTree()]) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the pre-comments of <fo:inline font-family="monospace">Node</fo:inline> to
  <fo:inline font-family="monospace">Comments</fo:inline>. <fo:inline font-family="monospace">Comments</fo:inline> should be a possibly
  empty list of abstract comments, in top-down textual order.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">add_precomments/2</fo:inline>, <fo:inline font-style="italic">comment/2</fo:inline>, <fo:inline font-style="italic">copy_comments/2</fo:inline>, <fo:inline font-style="italic">get_precomments/1</fo:inline>, <fo:inline font-style="italic">join_comments/2</fo:inline>, <fo:inline font-style="italic">remove_comments/1</fo:inline>, <fo:inline font-style="italic">set_postcomments/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6376480">size_qualifier(Body::syntaxTree(), Size::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract size qualifier. The result represents
  "<fo:inline font-family="monospace">Body:Size</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">size_qualifier_argument/1</fo:inline>, <fo:inline font-style="italic">size_qualifier_body/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6383680">size_qualifier_argument(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the argument subtree (the size) of a
  <fo:inline font-family="monospace">size_qualifier</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">size_qualifier/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6389456">size_qualifier_body(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the body subtree of a <fo:inline font-family="monospace">size_qualifier</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">size_qualifier/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6395184">string(String::string()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract string literal. The result represents
  <fo:inline font-family="monospace">"Text"</fo:inline> (including the surrounding
  double-quotes), where <fo:inline font-family="monospace">Text</fo:inline> corresponds to the sequence
  of characters in <fo:inline font-family="monospace">Value</fo:inline>, but not representing a
  <fo:inline font-weight="bold">specific</fo:inline> string literal.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For example, the result of <fo:inline font-family="monospace">string("x\ny")</fo:inline> represents any and all of
  <fo:inline font-family="monospace">"x\ny"</fo:inline>, <fo:inline font-family="monospace">"x\12y"</fo:inline>, <fo:inline font-family="monospace">"x\012y"</fo:inline> and <fo:inline font-family="monospace">"x\^Jy"</fo:inline>; see <fo:inline font-style="italic">char/1</fo:inline>.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">char/1</fo:inline>, <fo:inline font-style="italic">is_string/2</fo:inline>, <fo:inline font-style="italic">string_literal/1</fo:inline>, <fo:inline font-style="italic">string_literal/2</fo:inline>, <fo:inline font-style="italic">string_value/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6407952">string_literal(Node::syntaxTree()) -&gt; nonempty_string()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the literal string represented by a <fo:inline font-family="monospace">string</fo:inline>
  node. This includes surrounding double-quote characters.
  Characters beyond 255 will be escaped.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">string/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6413216">string_literal(Node::syntaxTree(), X2::encoding()) -&gt; nonempty_string()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the literal string represented by a <fo:inline font-family="monospace">string</fo:inline>
  node. This includes surrounding double-quote characters.
  Depending on the encoding characters beyond 255 will be escaped
  (<fo:inline font-family="monospace">latin1</fo:inline>) or copied as is (<fo:inline font-family="monospace">utf8</fo:inline>).
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">string/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6420128">string_value(Node::syntaxTree()) -&gt; string()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the value represented by a <fo:inline font-family="monospace">string</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">string/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6425280">subtrees(T::syntaxTree()) -&gt; [[syntaxTree()]]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the grouped list of all subtrees of a syntax tree. If
  <fo:inline font-family="monospace">Node</fo:inline> is a leaf node (see <fo:inline font-style="italic">is_leaf/1</fo:inline>), this
  is the empty list, otherwise the result is always a nonempty list,
  containing the lists of subtrees of <fo:inline font-family="monospace">Node</fo:inline>, in  
left-to-right order as they occur in the printed program text, and  
grouped by category. Often, each group contains only a single  
subtree.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Depending on the type of <fo:inline font-family="monospace">Node</fo:inline>, the size of some  
groups may be variable (e.g., the group consisting of all the  
elements of a tuple), while others always contain the same number of  
elements - usually exactly one (e.g., the group containing the  
argument expression of a case-expression). Note, however, that the  
exact structure of the returned list (for a given node type) should  
in general not be depended upon, since it might be subject to change  
without notice.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function <fo:inline font-style="italic">subtrees/1</fo:inline> and the constructor functions
  <fo:inline font-style="italic">make_tree/2</fo:inline> and <fo:inline font-style="italic">update_tree/2</fo:inline> can be a  
great help if one wants to traverse a syntax tree, visiting all its  
subtrees, but treat nodes of the tree in a uniform way in most or all  
cases. Using these functions makes this simple, and also assures that  
your code is not overly sensitive to extensions of the syntax tree  
data type, because any node types not explicitly handled by your code  
can be left to a default case.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For example:
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">     postorder(F, Tree) -&gt;
        F(case subtrees(Tree) of
            [] -&gt; Tree;
            List -&gt; update_tree(Tree,
                                [[postorder(F, Subtree)
                                  || Subtree &amp;lt;- Group]
                                 || Group &amp;lt;- List])
          end).</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  maps the function <fo:inline font-family="monospace">F</fo:inline> on <fo:inline font-family="monospace">Tree</fo:inline> and all its
  subtrees, doing a post-order traversal of the syntax tree. (Note the
  use of <fo:inline font-style="italic">update_tree/2</fo:inline> to preserve node attributes.) For a
  simple function like:
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">     f(Node) -&gt;
        case type(Node) of
            atom -&gt; atom("a_" ++ atom_name(Node));
            _ -&gt; Node
        end.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  the call <fo:inline font-family="monospace">postorder(fun f/1, Tree)</fo:inline> will yield a new
  representation of <fo:inline font-family="monospace">Tree</fo:inline> in which all atom names have been
  extended with the prefix "a_", but nothing else (including comments,
  annotations and line numbers) has been changed.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">copy_attrs/2</fo:inline>, <fo:inline font-style="italic">is_leaf/1</fo:inline>, <fo:inline font-style="italic">make_tree/2</fo:inline>, <fo:inline font-style="italic">type/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6443920">text(String::string()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract piece of source code text. The result
  represents exactly the sequence of characters in <fo:inline font-family="monospace">String</fo:inline>.
  This is useful in cases when one wants full control of the resulting
  output, e.g., for the appearance of floating-point numbers or macro
  definitions.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">text_string/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6449152">text_string(Node::syntaxTree()) -&gt; string()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the character sequence represented by a <fo:inline font-family="monospace">text</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">text/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6454336">tree(Type::atom()) -&gt; #tree{type=atom(), attr=#attr{pos=term(), ann=[term()], com=none | #com{pre=[syntaxTree()], post=[syntaxTree()]}}, data=term()}</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">tree(Type, [])</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6459072">tree(Type::atom(), Data::term()) -&gt; #tree{type=atom(), attr=#attr{pos=term(), ann=[term()], com=none | #com{pre=[syntaxTree()], post=[syntaxTree()]}}, data=term()}</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">For special purposes only</fo:inline>. Creates an abstract syntax
  tree node with type tag <fo:inline font-family="monospace">Type</fo:inline> and associated data
  <fo:inline font-family="monospace">Data</fo:inline>.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function and the related <fo:inline font-style="italic">is_tree/1</fo:inline> and
  <fo:inline font-style="italic">data/1</fo:inline> provide a uniform way to extend the set of
  <fo:inline font-family="monospace">erl_parse</fo:inline> node types. The associated data is any term,  
whose format may depend on the type tag.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Notes:</fo:inline>
  </fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
   <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Any nodes created outside of this module must have type tags
       distinct from those currently defined by this module; see
       <fo:inline font-style="italic">type/1</fo:inline> for a complete list.</fo:block></fo:block></fo:list-item-body></fo:list-item>
   <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The type tag of a syntax tree node may also be used
       as a primary tag by the <fo:inline font-family="monospace">erl_parse</fo:inline> representation;
       in that case, the selector functions for that node type
       <fo:inline font-weight="bold">must</fo:inline> handle both the abstract syntax tree and the
       <fo:inline font-family="monospace">erl_parse</fo:inline> form. The function <fo:inline font-family="monospace">type(T)</fo:inline>
       should return the correct type tag regardless of the
       representation of <fo:inline font-family="monospace">T</fo:inline>, so that the user sees no
       difference between <fo:inline font-family="monospace">erl_syntax</fo:inline> and
       <fo:inline font-family="monospace">erl_parse</fo:inline> nodes.</fo:block></fo:block></fo:list-item-body></fo:list-item>
  </fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">data/1</fo:inline>, <fo:inline font-style="italic">is_tree/1</fo:inline>, <fo:inline font-style="italic">type/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6477056">try_after_expr(Body::[syntaxTree()], After::[syntaxTree()]) -&gt; syntaxTree()</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">try_expr(Body, [], [], After)</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6482304">try_expr(Body::[syntaxTree()], Handlers::[syntaxTree()]) -&gt; syntaxTree()</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">try_expr(Body, [], Handlers)</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6487552">try_expr(Body::[syntaxTree()], Clauses::[syntaxTree()], Handlers::[syntaxTree()]) -&gt; syntaxTree()</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">try_expr(Body, Clauses, Handlers, [])</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6493520">try_expr(Body::[syntaxTree()], Clauses::[syntaxTree()], Handlers::[syntaxTree()], After::[syntaxTree()]) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract try-expression. If <fo:inline font-family="monospace">Body</fo:inline> is
  <fo:inline font-family="monospace">[B1, ..., Bn]</fo:inline>, <fo:inline font-family="monospace">Clauses</fo:inline> is <fo:inline font-family="monospace">[C1, ...,
  Cj]</fo:inline>, <fo:inline font-family="monospace">Handlers</fo:inline> is <fo:inline font-family="monospace">[H1, ..., Hk]</fo:inline>, and
  <fo:inline font-family="monospace">After</fo:inline> is <fo:inline font-family="monospace">[A1, ..., Am]</fo:inline>, the result
  represents "<fo:inline font-family="monospace">try B1, ..., Bn of C1;
  ...; Cj catch H1; ...; Hk after
  A1, ..., Am end</fo:inline>". More exactly, if each
  <fo:inline font-family="monospace">Ci</fo:inline> represents "<fo:inline font-family="monospace">(CPi) CGi -&gt;
  CBi</fo:inline>", and each <fo:inline font-family="monospace">Hi</fo:inline> represents
  "<fo:inline font-family="monospace">(HPi) HGi -&gt; HBi</fo:inline>", then the
  result represents "<fo:inline font-family="monospace">try B1, ..., Bn of
  CP1 CG1 -&gt; CB1; ...; CPj
  CGj -&gt; CBj catch HP1 HG1 -&gt;
  HB1; ...; HPk HGk -&gt; HBk after
  A1, ..., Am end</fo:inline>"; see
  <fo:inline font-style="italic">case_expr/2</fo:inline>. If <fo:inline font-family="monospace">Clauses</fo:inline> is the empty list,
  the <fo:inline font-family="monospace">of ...</fo:inline> section is left out. If <fo:inline font-family="monospace">After</fo:inline> is
  the empty list, the <fo:inline font-family="monospace">after ...</fo:inline> section is left out. If
  <fo:inline font-family="monospace">Handlers</fo:inline> is the empty list, and <fo:inline font-family="monospace">After</fo:inline> is
  nonempty, the <fo:inline font-family="monospace">catch ...</fo:inline> section is left out.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">case_expr/2</fo:inline>, <fo:inline font-style="italic">class_qualifier/2</fo:inline>, <fo:inline font-style="italic">clause/3</fo:inline>, <fo:inline font-style="italic">try_after_expr/2</fo:inline>, <fo:inline font-style="italic">try_expr/2</fo:inline>, <fo:inline font-style="italic">try_expr/3</fo:inline>, <fo:inline font-style="italic">try_expr_after/1</fo:inline>, <fo:inline font-style="italic">try_expr_body/1</fo:inline>, <fo:inline font-style="italic">try_expr_clauses/1</fo:inline>, <fo:inline font-style="italic">try_expr_handlers/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6517840">try_expr_after(Node::syntaxTree()) -&gt; [syntaxTree()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the list of "after" subtrees of a <fo:inline font-family="monospace">try_expr</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">try_expr/4</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6523744">try_expr_body(Node::syntaxTree()) -&gt; [syntaxTree()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the list of body subtrees of a <fo:inline font-family="monospace">try_expr</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">try_expr/4</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6529616">try_expr_clauses(Node::syntaxTree()) -&gt; [syntaxTree()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the list of case-clause subtrees of a
  <fo:inline font-family="monospace">try_expr</fo:inline> node. If <fo:inline font-family="monospace">Node</fo:inline> represents
  "<fo:inline font-family="monospace">try Body catch H1; ...; Hn
  end</fo:inline>", the result is the empty list.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">try_expr/4</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6536448">try_expr_handlers(Node::syntaxTree()) -&gt; [syntaxTree()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the list of handler-clause subtrees of a
  <fo:inline font-family="monospace">try_expr</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">try_expr/4</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6542368">tuple(List::[syntaxTree()]) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract tuple. If <fo:inline font-family="monospace">Elements</fo:inline> is
  <fo:inline font-family="monospace">[X1, ..., Xn]</fo:inline>, the result represents
  "<fo:inline font-family="monospace">{X1, ..., Xn}</fo:inline>".</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note: The Erlang language has distinct 1-tuples, i.e.,
  <fo:inline font-family="monospace">{X}</fo:inline> is always distinct from <fo:inline font-family="monospace">X</fo:inline> itself.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">tuple_elements/1</fo:inline>, <fo:inline font-style="italic">tuple_size/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6551104">tuple_elements(Node::syntaxTree()) -&gt; [syntaxTree()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the list of element subtrees of a <fo:inline font-family="monospace">tuple</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">tuple/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6556992">tuple_size(Node::syntaxTree()) -&gt; non_neg_integer()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the number of elements of a <fo:inline font-family="monospace">tuple</fo:inline> node.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note: this is equivalent to
  <fo:inline font-family="monospace">length(tuple_elements(Node))</fo:inline>, but potentially more
  efficient.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">tuple/1</fo:inline>, <fo:inline font-style="italic">tuple_elements/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6563808">tuple_type() -&gt; term()
</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">tuple_type(any_size)</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6567024">tuple_type(Elements::any_size | [syntaxTree()]) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract type tuple. If <fo:inline font-family="monospace">Elements</fo:inline> is
  <fo:inline font-family="monospace">[T1, ..., Tn]</fo:inline>, the result represents
  "<fo:inline font-family="monospace">{T1, ..., Tn}</fo:inline>";
  otherwise, if <fo:inline font-family="monospace">Elements</fo:inline> is <fo:inline font-family="monospace">any_size</fo:inline>, it represents
  "<fo:inline font-family="monospace">tuple()</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">tuple_type_elements/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6574992">tuple_type_elements(Node::syntaxTree()) -&gt; any_size | [syntaxTree()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the list of type element subtrees of a <fo:inline font-family="monospace">tuple_type</fo:inline> node.
  If <fo:inline font-family="monospace">Node</fo:inline> represents "<fo:inline font-family="monospace">tuple()</fo:inline>", <fo:inline font-family="monospace">any_size</fo:inline> is returned;
  otherwise, if <fo:inline font-family="monospace">Node</fo:inline> represents
  "<fo:inline font-family="monospace">{T1, ..., Tn}</fo:inline>",
  <fo:inline font-family="monospace">[T1, ..., Tn]</fo:inline> is returned.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">tuple_type/0</fo:inline>, <fo:inline font-style="italic">tuple_type/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6584336">type(Tree::syntaxTree()) -&gt; atom()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the type tag of <fo:inline font-family="monospace">Node</fo:inline>. If <fo:inline font-family="monospace">Node</fo:inline>
  does not represent a syntax tree, evaluation fails with reason
  <fo:inline font-family="monospace">badarg</fo:inline>. Node types currently defined by this module are:</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
   
    application
    annotated_type
    arity_qualifier
    atom
   <fo:block/>
    attribute
    binary
    binary_field
    bitstring_type
   <fo:block/>
    block_expr
    case_expr
    catch_expr
    char
   <fo:block/>
    class_qualifier
    clause
    comment
    cond_expr
   <fo:block/>
    conjunction
    constrained_function_type
    constraint
    disjunction
   <fo:block/>
    eof_marker
    error_marker
    float
    form_list
   <fo:block/>
    fun_expr
    fun_type
    function
    function_type
   <fo:block/>
    generator
    if_expr
    implicit_fun
    infix_expr
   <fo:block/>
    integer
    integer_range_type
    list
    list_comp
   <fo:block/>
    macro
    map_expr
    map_field_assoc
    map_field_exact
   <fo:block/>
    map_type
    map_type_assoc
    map_type_exact
    match_expr
    module_qualifier
   <fo:block/>
    named_fun_expr
    nil
    operator
    parentheses
   <fo:block/>
    prefix_expr
    receive_expr
    record_access
    record_expr
   <fo:block/>
    record_field
    record_index_expr
    record_type
    record_type_field
   <fo:block/>
    size_qualifier
    string
    text
    try_expr
   <fo:block/>
    tuple
    tuple_type
    typed_record_field
    type_application
    type_union
    underscore
    user_type_application
    variable
   <fo:block/>
    warning_marker
   <fo:block/>
  </fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The user may (for special purposes) create additional nodes
  with other type tags, using the <fo:inline font-style="italic">tree/2</fo:inline> function.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note: The primary constructor functions for a node type should
  always have the same name as the node type itself.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">annotated_type/2</fo:inline>, <fo:inline font-style="italic">application/3</fo:inline>, <fo:inline font-style="italic">arity_qualifier/2</fo:inline>, <fo:inline font-style="italic">atom/1</fo:inline>, <fo:inline font-style="italic">attribute/2</fo:inline>, <fo:inline font-style="italic">binary/1</fo:inline>, <fo:inline font-style="italic">binary_field/2</fo:inline>, <fo:inline font-style="italic">bitstring_type/2</fo:inline>, <fo:inline font-style="italic">block_expr/1</fo:inline>, <fo:inline font-style="italic">case_expr/2</fo:inline>, <fo:inline font-style="italic">catch_expr/1</fo:inline>, <fo:inline font-style="italic">char/1</fo:inline>, <fo:inline font-style="italic">class_qualifier/2</fo:inline>, <fo:inline font-style="italic">clause/3</fo:inline>, <fo:inline font-style="italic">comment/2</fo:inline>, <fo:inline font-style="italic">cond_expr/1</fo:inline>, <fo:inline font-style="italic">conjunction/1</fo:inline>, <fo:inline font-style="italic">constrained_function_type/2</fo:inline>, <fo:inline font-style="italic">constraint/2</fo:inline>, <fo:inline font-style="italic">disjunction/1</fo:inline>, <fo:inline font-style="italic">eof_marker/0</fo:inline>, <fo:inline font-style="italic">error_marker/1</fo:inline>, <fo:inline font-style="italic">float/1</fo:inline>, <fo:inline font-style="italic">form_list/1</fo:inline>, <fo:inline font-style="italic">fun_expr/1</fo:inline>, <fo:inline font-style="italic">fun_type/0</fo:inline>, <fo:inline font-style="italic">function/2</fo:inline>, <fo:inline font-style="italic">function_type/1</fo:inline>, <fo:inline font-style="italic">function_type/2</fo:inline>, <fo:inline font-style="italic">generator/2</fo:inline>, <fo:inline font-style="italic">if_expr/1</fo:inline>, <fo:inline font-style="italic">implicit_fun/2</fo:inline>, <fo:inline font-style="italic">infix_expr/3</fo:inline>, <fo:inline font-style="italic">integer/1</fo:inline>, <fo:inline font-style="italic">integer_range_type/2</fo:inline>, <fo:inline font-style="italic">list/2</fo:inline>, <fo:inline font-style="italic">list_comp/2</fo:inline>, <fo:inline font-style="italic">macro/2</fo:inline>, <fo:inline font-style="italic">map_expr/2</fo:inline>, <fo:inline font-style="italic">map_field_assoc/2</fo:inline>, <fo:inline font-style="italic">map_field_exact/2</fo:inline>, <fo:inline font-style="italic">map_type/0</fo:inline>, <fo:inline font-style="italic">map_type/1</fo:inline>, <fo:inline font-style="italic">map_type_assoc/2</fo:inline>, <fo:inline font-style="italic">map_type_exact/2</fo:inline>, <fo:inline font-style="italic">match_expr/2</fo:inline>, <fo:inline font-style="italic">module_qualifier/2</fo:inline>, <fo:inline font-style="italic">named_fun_expr/2</fo:inline>, <fo:inline font-style="italic">nil/0</fo:inline>, <fo:inline font-style="italic">operator/1</fo:inline>, <fo:inline font-style="italic">parentheses/1</fo:inline>, <fo:inline font-style="italic">prefix_expr/2</fo:inline>, <fo:inline font-style="italic">receive_expr/3</fo:inline>, <fo:inline font-style="italic">record_access/3</fo:inline>, <fo:inline font-style="italic">record_expr/2</fo:inline>, <fo:inline font-style="italic">record_field/2</fo:inline>, <fo:inline font-style="italic">record_index_expr/2</fo:inline>, <fo:inline font-style="italic">record_type/2</fo:inline>, <fo:inline font-style="italic">record_type_field/2</fo:inline>, <fo:inline font-style="italic">size_qualifier/2</fo:inline>, <fo:inline font-style="italic">string/1</fo:inline>, <fo:inline font-style="italic">text/1</fo:inline>, <fo:inline font-style="italic">tree/2</fo:inline>, <fo:inline font-style="italic">try_expr/3</fo:inline>, <fo:inline font-style="italic">tuple/1</fo:inline>, <fo:inline font-style="italic">tuple_type/0</fo:inline>, <fo:inline font-style="italic">tuple_type/1</fo:inline>, <fo:inline font-style="italic">type_application/2</fo:inline>, <fo:inline font-style="italic">type_union/1</fo:inline>, <fo:inline font-style="italic">typed_record_field/2</fo:inline>, <fo:inline font-style="italic">underscore/0</fo:inline>, <fo:inline font-style="italic">user_type_application/2</fo:inline>, <fo:inline font-style="italic">variable/1</fo:inline>, <fo:inline font-style="italic">warning_marker/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6651120">type_application(TypeName::syntaxTree(), Arguments::[syntaxTree()]) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract type application expression. If <fo:inline font-family="monospace">Arguments</fo:inline> is
  <fo:inline font-family="monospace">[T1, ..., Tn]</fo:inline>, the result represents
  "<fo:inline font-family="monospace">TypeName(T1, ...Tn)</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">type_application/3</fo:inline>, <fo:inline font-style="italic">type_application_arguments/1</fo:inline>, <fo:inline font-style="italic">type_application_name/1</fo:inline>, <fo:inline font-style="italic">user_type_application/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6660720">type_application(Module::none | syntaxTree(), TypeName::syntaxTree(), Arguments::[syntaxTree()]) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract type application expression. If
  <fo:inline font-family="monospace">Module</fo:inline> is <fo:inline font-family="monospace">none</fo:inline>, this is call is equivalent
  to <fo:inline font-family="monospace">type_application(TypeName, Arguments)</fo:inline>, otherwise it is
  equivalent to <fo:inline font-family="monospace">type_application(module_qualifier(Module, TypeName),
  Arguments)</fo:inline>.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">(This is a utility function.)
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">module_qualifier/2</fo:inline>, <fo:inline font-style="italic">type_application/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6670528">type_application_arguments(Node::syntaxTree()) -&gt; [syntaxTree()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the arguments subtrees of a <fo:inline font-family="monospace">type_application</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">type_application/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6676448">type_application_name(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the type name subtree of a <fo:inline font-family="monospace">type_application</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">type_application/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6682192">type_union(Types::[syntaxTree()]) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract type union. If <fo:inline font-family="monospace">Types</fo:inline> is
  <fo:inline font-family="monospace">[T1, ..., Tn]</fo:inline>, the result represents
  "<fo:inline font-family="monospace">T1 | ... | Tn</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">type_union_types/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6688800">type_union_types(Node::syntaxTree()) -&gt; [syntaxTree()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the list of type subtrees of a <fo:inline font-family="monospace">type_union</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">type_union/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6694672">typed_record_field(Field::syntaxTree(), Type::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract typed record field specification. The
  result represents "<fo:inline font-family="monospace">Field :: Type</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">typed_record_field_body/1</fo:inline>, <fo:inline font-style="italic">typed_record_field_type/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6701952">typed_record_field_body(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the field subtree of a <fo:inline font-family="monospace">typed_record_field</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">typed_record_field/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6707696">typed_record_field_type(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the type subtree of a <fo:inline font-family="monospace">typed_record_field</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">typed_record_field/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6713440">underscore() -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract universal pattern ("<fo:inline font-family="monospace">_</fo:inline>"). The
  lexical representation is a single underscore character. Note that
  this is <fo:inline font-weight="bold">not</fo:inline> a variable, lexically speaking.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">variable/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6718976">update_tree(Node::syntaxTree(), Groups::[[syntaxTree()]]) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a syntax tree with the same type and attributes as the
  given tree. This is equivalent to <fo:inline font-family="monospace">copy_attrs(Node,
  make_tree(type(Node), Groups))</fo:inline>.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">copy_attrs/2</fo:inline>, <fo:inline font-style="italic">make_tree/2</fo:inline>, <fo:inline font-style="italic">type/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6726976">user_type_application(TypeName::syntaxTree(), Arguments::[syntaxTree()]) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract user type. If <fo:inline font-family="monospace">Arguments</fo:inline> is
  <fo:inline font-family="monospace">[T1, ..., Tn]</fo:inline>, the result represents
  "<fo:inline font-family="monospace">TypeName(T1, ...Tn)</fo:inline>".
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">type_application/2</fo:inline>, <fo:inline font-style="italic">user_type_application_arguments/1</fo:inline>, <fo:inline font-style="italic">user_type_application_name/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6735824">user_type_application_arguments(Node::syntaxTree()) -&gt; [syntaxTree()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the arguments subtrees of a <fo:inline font-family="monospace">user_type_application</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">user_type_application/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6741760">user_type_application_name(Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the type name subtree of a <fo:inline font-family="monospace">user_type_application</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">user_type_application/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6747536">variable(Name::atom() | string()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract variable with the given name.
  <fo:inline font-family="monospace">Name</fo:inline> may be any atom or string that represents a
  lexically valid variable name, but <fo:inline font-weight="bold">not</fo:inline> a single underscore
  character; see <fo:inline font-style="italic">underscore/0</fo:inline>.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note: no checking is done whether the character sequence
  represents a proper variable name, i.e., whether or not its first
  character is an uppercase Erlang character, or whether it does not
  contain control characters, whitespace, etc.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">underscore/0</fo:inline>, <fo:inline font-style="italic">variable_literal/1</fo:inline>, <fo:inline font-style="italic">variable_name/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6755920">variable_literal(Node::syntaxTree()) -&gt; string()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the name of a <fo:inline font-family="monospace">variable</fo:inline> node as a string.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">variable/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6761056">variable_name(Node::syntaxTree()) -&gt; atom()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the name of a <fo:inline font-family="monospace">variable</fo:inline> node as an atom.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">variable/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6766192">warning_marker(Warning::term()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an abstract warning marker. The result represents an
  occurrence of a possible problem in the source code, with an
  associated Erlang I/O ErrorInfo structure given by <fo:inline font-family="monospace">Error</fo:inline>
  (see module <fo:inline font-style="italic">io(3)</fo:inline> for details). Warning markers are  
regarded as source code forms, but have no defined lexical form.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note: this is supported only for backwards compatibility with
  existing parsers and tools.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">eof_marker/0</fo:inline>, <fo:inline font-style="italic">error_marker/1</fo:inline>, <fo:inline font-style="italic">is_form/1</fo:inline>, <fo:inline font-style="italic">warning_marker_info/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6774816">warning_marker_info(Node::syntaxTree()) -&gt; term()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the ErrorInfo structure of a <fo:inline font-family="monospace">warning_marker</fo:inline> node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">warning_marker/1</fo:inline>.</fo:block>
</fo:block>



Richard Carlsson
carlsson.richard@gmail.com<fo:block page-break-before="always" id="idp6785520" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">erl_syntax_lib</fo:marker>erl_syntax_lib</fo:block>Erlang module</fo:block>
<fo:block/>
erl_syntax_lib
<fo:block/>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Support library for abstract Erlang syntax trees.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module contains utility functions for working with the
  abstract data type defined in the module <fo:inline font-style="italic">erl_syntax</fo:inline>.
 </fo:block>
<fo:block id="idp6788592" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">DATA TYPES</fo:block>

<fo:block space-after="0.25em" space-before="0.25em">
<fo:block keep-with-next.within-page="always">info_pair() = {<fo:inline font-style="italic">key()</fo:inline>, term()}</fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/> </fo:block></fo:block-container>
<fo:block keep-with-next.within-page="always">key() = attributes | errors | exports | functions | imports | module | records | warnings</fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/> </fo:block></fo:block-container>
<fo:block keep-with-next.within-page="always">ordset(T) = <fo:inline font-style="italic">ordsets:ordset(T)</fo:inline></fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/> </fo:block></fo:block-container>
<fo:block keep-with-next.within-page="always">set(T) = <fo:inline font-style="italic">sets:set(T)</fo:inline></fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/> </fo:block></fo:block-container>
<fo:block keep-with-next.within-page="always">syntaxTree() = <fo:inline font-style="italic">erl_syntax:syntaxTree()</fo:inline></fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An abstract syntax
  tree. See the <fo:inline font-style="italic">erl_syntax</fo:inline> module for details.</fo:block>
</fo:block></fo:block-container>
</fo:block>
<fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6801280">analyze_application(Node::syntaxTree()) -&gt; FunctionName | Arity</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FunctionName = {atom(), Arity} | {ModuleName, FunctionName}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Arity = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ModuleName = atom()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the name of a called function. The result is a
  representation of the name of the applied function <fo:inline font-family="monospace">F/A</fo:inline>,
  if <fo:inline font-family="monospace">Node</fo:inline> represents a function application
  "<fo:inline font-family="monospace">&lt;em&gt;F&lt;/em&gt;(&lt;em&gt;X_1&lt;/em&gt;, ..., &lt;em&gt;X_A&lt;/em&gt;)</fo:inline>". If the
  function is not explicitly named (i.e., <fo:inline font-family="monospace">F</fo:inline> is given by
  some expression), only the arity <fo:inline font-family="monospace">A</fo:inline> is returned.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The evaluation throws <fo:inline font-family="monospace">syntax_error</fo:inline> if <fo:inline font-family="monospace">Node</fo:inline> does not represent a
  well-formed application expression.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">analyze_function_name/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6811200">analyze_attribute(Node::syntaxTree()) -&gt; preprocessor | {atom(), atom()}</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Analyzes an attribute node. If <fo:inline font-family="monospace">Node</fo:inline> represents a
  preprocessor directive, the atom <fo:inline font-family="monospace">preprocessor</fo:inline> is
  returned. Otherwise, if <fo:inline font-family="monospace">Node</fo:inline> represents a module
  attribute "<fo:inline font-family="monospace">-&lt;em&gt;Name&lt;/em&gt;...</fo:inline>", a tuple <fo:inline font-family="monospace">{Name,
  Info}</fo:inline> is returned, where <fo:inline font-family="monospace">Info</fo:inline> depends on
  <fo:inline font-family="monospace">Name</fo:inline>, as follows:
  </fo:block><fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{module, Info}</fo:inline></fo:block>
 
  	    <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">where <fo:inline font-family="monospace">Info =
  	    analyze_module_attribute(Node)</fo:inline>.</fo:block></fo:block></fo:block-container>
 
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{export, Info}</fo:inline></fo:block>
 
  	    <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">where <fo:inline font-family="monospace">Info =
  	    analyze_export_attribute(Node)</fo:inline>.</fo:block></fo:block></fo:block-container>
 
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{import, Info}</fo:inline></fo:block>
 
  	    <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">where <fo:inline font-family="monospace">Info =
  	    analyze_import_attribute(Node)</fo:inline>.</fo:block></fo:block></fo:block-container>
 
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{file, Info}</fo:inline></fo:block>
 
  	    <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">where <fo:inline font-family="monospace">Info =
  	    analyze_file_attribute(Node)</fo:inline>.</fo:block></fo:block></fo:block-container>
 
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{record, Info}</fo:inline></fo:block>
 
  	    <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">where <fo:inline font-family="monospace">Info =
  	    analyze_record_attribute(Node)</fo:inline>.</fo:block></fo:block></fo:block-container>
 
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{Name, Info}</fo:inline></fo:block>
 
  	    <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">where <fo:inline font-family="monospace">{Name, Info} =
  	    analyze_wild_attribute(Node)</fo:inline>.</fo:block></fo:block></fo:block-container>
  </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  The evaluation throws <fo:inline font-family="monospace">syntax_error</fo:inline> if <fo:inline font-family="monospace">Node</fo:inline>
  does not represent a well-formed module attribute.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">analyze_export_attribute/1</fo:inline>, <fo:inline font-style="italic">analyze_file_attribute/1</fo:inline>, <fo:inline font-style="italic">analyze_import_attribute/1</fo:inline>, <fo:inline font-style="italic">analyze_module_attribute/1</fo:inline>, <fo:inline font-style="italic">analyze_record_attribute/1</fo:inline>, <fo:inline font-style="italic">analyze_wild_attribute/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6834224">analyze_export_attribute(Node::syntaxTree()) -&gt; [FunctionName]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FunctionName = atom() | {atom(), integer()} | {ModuleName, FunctionName}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ModuleName = atom()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the list of function names declared by an export  
attribute. We do not guarantee that each name occurs at most once in  
the list. The order of listing is not defined.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The evaluation throws <fo:inline font-family="monospace">syntax_error</fo:inline> if <fo:inline font-family="monospace">Node</fo:inline> does not represent a
  well-formed export attribute.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">analyze_attribute/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6841584">analyze_file_attribute(Node::syntaxTree()) -&gt; {string(), integer()}</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the file name and line number of a <fo:inline font-family="monospace">file</fo:inline>
  attribute. The result is the pair <fo:inline font-family="monospace">{File, Line}</fo:inline> if
  <fo:inline font-family="monospace">Node</fo:inline> represents "<fo:inline font-family="monospace">-file(File, Line).</fo:inline>".</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The evaluation throws <fo:inline font-family="monospace">syntax_error</fo:inline> if
  <fo:inline font-family="monospace">Node</fo:inline> does not represent a well-formed <fo:inline font-family="monospace">file</fo:inline>
  attribute.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">analyze_attribute/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6849984">analyze_form(Node::syntaxTree()) -&gt; {atom(), term()} | atom()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Analyzes a "source code form" node. If <fo:inline font-family="monospace">Node</fo:inline> is a
  "form" type (cf. <fo:inline font-family="monospace">erl_syntax:is_form/1</fo:inline>), the returned
  value is a tuple <fo:inline font-family="monospace">{Type, Info}</fo:inline> where <fo:inline font-family="monospace">Type</fo:inline> is
  the node type and <fo:inline font-family="monospace">Info</fo:inline> depends on <fo:inline font-family="monospace">Type</fo:inline>, as
  follows:
  </fo:block><fo:block space-after="0.25em" space-before="0.25em">
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{attribute, Info}</fo:inline></fo:block>
 
       <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">where <fo:inline font-family="monospace">Info = analyze_attribute(Node)</fo:inline>.</fo:block></fo:block></fo:block-container>
 
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{error_marker, Info}</fo:inline></fo:block>
 
  	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">where <fo:inline font-family="monospace">Info =
  	erl_syntax:error_marker_info(Node)</fo:inline>.</fo:block></fo:block></fo:block-container>
 
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{function, Info}</fo:inline></fo:block>
 
  	    <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">where <fo:inline font-family="monospace">Info = analyze_function(Node)</fo:inline>.</fo:block></fo:block></fo:block-container>
 
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{warning_marker, Info}</fo:inline></fo:block>
 
  	    <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">where <fo:inline font-family="monospace">Info =
  	    erl_syntax:warning_marker_info(Node)</fo:inline>.</fo:block></fo:block></fo:block-container>
  </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">  
For other types of forms, only the node type is returned.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The evaluation throws <fo:inline font-family="monospace">syntax_error</fo:inline> if
  <fo:inline font-family="monospace">Node</fo:inline> is not well-formed.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">analyze_attribute/1</fo:inline>, <fo:inline font-style="italic">analyze_function/1</fo:inline>, <fo:inline font-style="italic">erl_syntax:error_marker_info/1</fo:inline>, <fo:inline font-style="italic">erl_syntax:is_form/1</fo:inline>, <fo:inline font-style="italic">erl_syntax:warning_marker_info/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6868832">analyze_forms(Forms) -&gt; [{Key, term()}]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Forms = <fo:inline font-style="italic">syntaxTree()</fo:inline> | [<fo:inline font-style="italic">syntaxTree()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = attributes | errors | exports | functions | imports | module | records | warnings</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Analyzes a sequence of "program forms". The given
  <fo:inline font-family="monospace">Forms</fo:inline> may be a single syntax tree of type
  <fo:inline font-family="monospace">form_list</fo:inline>, or a list of "program form" syntax trees. The
  returned value is a list of pairs <fo:inline font-family="monospace">{Key, Info}</fo:inline>, where
  each value of <fo:inline font-family="monospace">Key</fo:inline> occurs at most once in the list; the  
absence of a particular key indicates that there is no well-defined  
value for that key.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each entry in the resulting list contains the following
  corresponding information about the program forms:
  </fo:block><fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{attributes, Attributes}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
  	   <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Attributes = [{atom(), term()}]</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  	 <fo:inline font-family="monospace">Attributes</fo:inline> is a list of pairs representing the
  	 names and corresponding values of all so-called "wild"
  	 attributes (as e.g. "<fo:inline font-family="monospace">-compile(...)</fo:inline>") occurring in
  	 <fo:inline font-family="monospace">Forms</fo:inline> (cf. <fo:inline font-family="monospace">analyze_wild_attribute/1</fo:inline>).
  	 We do not guarantee that each name occurs at most once in the
  	 list. The order of listing is not defined.</fo:block></fo:block></fo:block-container>
 
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{errors, Errors}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
  	   <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Errors = [term()]</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  	 <fo:inline font-family="monospace">Errors</fo:inline> is the list of error descriptors of all
  	 <fo:inline font-family="monospace">error_marker</fo:inline> nodes that occur in
  	 <fo:inline font-family="monospace">Forms</fo:inline>. The order of listing is not defined.</fo:block></fo:block></fo:block-container>
 
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{exports, Exports}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
  	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Exports = [FunctionName]</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
  	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">FunctionName = atom()
                     | {atom(), integer()}
  		      | {ModuleName, FunctionName}</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
  	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ModuleName = atom()</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  	 <fo:inline font-family="monospace">Exports</fo:inline> is a list of representations of those
  	 function names that are listed by export declaration attributes
  	 in <fo:inline font-family="monospace">Forms</fo:inline> (cf.
  	 <fo:inline font-family="monospace">analyze_export_attribute/1</fo:inline>). We do not guarantee
  	 that each name occurs at most once in the list. The order of
  	 listing is not defined.</fo:block></fo:block></fo:block-container>
 
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{functions, Functions}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
  	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Functions = [{atom(), integer()}]</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  	 <fo:inline font-family="monospace">Functions</fo:inline> is a list of the names of the functions
  	 that are defined in <fo:inline font-family="monospace">Forms</fo:inline> (cf.
  	 <fo:inline font-family="monospace">analyze_function/1</fo:inline>). We do not guarantee that each
  	 name occurs at most once in the list. The order of listing is
  	 not defined.</fo:block></fo:block></fo:block-container>
 
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{imports, Imports}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
  	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Imports = [{Module, Names}]</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
  	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Module = atom()</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
  	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Names = [FunctionName]</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
  	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">FunctionName = atom()
                     | {atom(), integer()}
  		      | {ModuleName, FunctionName}</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
  	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ModuleName = atom()</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  	 <fo:inline font-family="monospace">Imports</fo:inline> is a list of pairs representing those
  	 module names and corresponding function names that are listed
  	 by import declaration attributes in <fo:inline font-family="monospace">Forms</fo:inline> (cf.
  	 <fo:inline font-family="monospace">analyze_import_attribute/1</fo:inline>), where each
  	 <fo:inline font-family="monospace">Module</fo:inline> occurs at most once in
  	 <fo:inline font-family="monospace">Imports</fo:inline>. We do not guarantee that each name occurs
  	 at most once in the lists of function names. The order of
  	 listing is not defined.</fo:block></fo:block></fo:block-container>
 
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{module, ModuleName}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
  	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ModuleName = atom()</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  	 <fo:inline font-family="monospace">ModuleName</fo:inline> is the name declared by a module
  	 attribute in <fo:inline font-family="monospace">Forms</fo:inline>. If no module name is defined
  	 in <fo:inline font-family="monospace">Forms</fo:inline>, the result will contain no entry for the
  	 <fo:inline font-family="monospace">module</fo:inline> key. If multiple module name declarations
  	 should occur, all but the first will be ignored.</fo:block></fo:block></fo:block-container>
 
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{records, Records}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
  	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Records = [{atom(), Fields}]</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
  	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Fields = [{atom(), {Default, Type}}]</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
  	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Default = none | syntaxTree()</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
  	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Type = none | syntaxTree()</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  	 <fo:inline font-family="monospace">Records</fo:inline> is a list of pairs representing the names
  	 and corresponding field declarations of all record declaration
  	 attributes occurring in <fo:inline font-family="monospace">Forms</fo:inline>. For fields declared
  	 without a default value, the corresponding value for
  	 <fo:inline font-family="monospace">Default</fo:inline> is the atom <fo:inline font-family="monospace">none</fo:inline>. Similarly, for fields declared
        without a type, the corresponding value for <fo:inline font-family="monospace">Type</fo:inline> is the
        atom <fo:inline font-family="monospace">none</fo:inline> (cf.
  	 <fo:inline font-family="monospace">analyze_record_attribute/1</fo:inline>). We do not guarantee
  	 that each record name occurs at most once in the list. The
  	 order of listing is not defined.</fo:block></fo:block></fo:block-container>
 
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{warnings, Warnings}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
  	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Warnings = [term()]</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  	 <fo:inline font-family="monospace">Warnings</fo:inline> is the list of error descriptors of all
  	 <fo:inline font-family="monospace">warning_marker</fo:inline> nodes that occur in
  	 <fo:inline font-family="monospace">Forms</fo:inline>. The order of listing is not defined.</fo:block></fo:block></fo:block-container>
  </fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The evaluation throws <fo:inline font-family="monospace">syntax_error</fo:inline> if an ill-formed
  Erlang construct is encountered.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">analyze_export_attribute/1</fo:inline>, <fo:inline font-style="italic">analyze_function/1</fo:inline>, <fo:inline font-style="italic">analyze_import_attribute/1</fo:inline>, <fo:inline font-style="italic">analyze_record_attribute/1</fo:inline>, <fo:inline font-style="italic">analyze_wild_attribute/1</fo:inline>, <fo:inline font-style="italic">erl_syntax:error_marker_info/1</fo:inline>, <fo:inline font-style="italic">erl_syntax:warning_marker_info/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6925456">analyze_function(Node::syntaxTree()) -&gt; {atom(), integer()}</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the name and arity of a function definition. The result
  is a pair <fo:inline font-family="monospace">{Name, A}</fo:inline> if <fo:inline font-family="monospace">Node</fo:inline> represents a
  function definition "<fo:inline font-family="monospace">Name(&lt;em&gt;P_1&lt;/em&gt;, ..., &lt;em&gt;P_A&lt;/em&gt;) -&gt;
  ...</fo:inline>".</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The evaluation throws <fo:inline font-family="monospace">syntax_error</fo:inline> if
  <fo:inline font-family="monospace">Node</fo:inline> does not represent a well-formed function
  definition.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6931552">analyze_function_name(Node::syntaxTree()) -&gt; FunctionName</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FunctionName = atom() | {atom(), integer()} | {ModuleName, FunctionName}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ModuleName = atom()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the function name represented by a syntax tree. If
  <fo:inline font-family="monospace">Node</fo:inline> represents a function name, such as
  "<fo:inline font-family="monospace">foo/1</fo:inline>" or "<fo:inline font-family="monospace">bloggs:fred/2</fo:inline>", a uniform  
representation of that name is returned. Different nestings of arity  
and module name qualifiers in the syntax tree does not affect the  
result.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The evaluation throws <fo:inline font-family="monospace">syntax_error</fo:inline> if
  <fo:inline font-family="monospace">Node</fo:inline> does not represent a well-formed function name.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6938832">analyze_implicit_fun(Node::syntaxTree()) -&gt; FunctionName</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FunctionName = atom() | {atom(), integer()} | {ModuleName, FunctionName}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ModuleName = atom()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the name of an implicit fun expression "<fo:inline font-family="monospace">fun
  &lt;em&gt;F&lt;/em&gt;</fo:inline>". The result is a representation of the function
  name <fo:inline font-family="monospace">F</fo:inline>. (Cf. <fo:inline font-family="monospace">analyze_function_name/1</fo:inline>.)</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The evaluation throws <fo:inline font-family="monospace">syntax_error</fo:inline> if
  <fo:inline font-family="monospace">Node</fo:inline> does not represent a well-formed implicit fun.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">analyze_function_name/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6947456">analyze_import_attribute(Node::syntaxTree()) -&gt; {atom(), [FunctionName]} | atom()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FunctionName = atom() | {atom(), integer()} | {ModuleName, FunctionName}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ModuleName = atom()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the module name and (if present) list of function names
  declared by an import attribute. The returned value is an atom
  <fo:inline font-family="monospace">Module</fo:inline> or a pair <fo:inline font-family="monospace">{Module, Names}</fo:inline>, where
  <fo:inline font-family="monospace">Names</fo:inline> is a list of function names declared as imported
  from the module named by <fo:inline font-family="monospace">Module</fo:inline>. We do not guarantee
  that each name occurs at most once in <fo:inline font-family="monospace">Names</fo:inline>. The order  
of listing is not defined.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The evaluation throws <fo:inline font-family="monospace">syntax_error</fo:inline> if <fo:inline font-family="monospace">Node</fo:inline> does not represent a
  well-formed import attribute.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">analyze_attribute/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6957200">analyze_module_attribute(Node::syntaxTree()) -&gt; Name::atom() | {Name::atom(), Variables::[atom()]}</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the module name and possible parameters declared by a
  module attribute. If the attribute is a plain module declaration such
  as <fo:inline font-family="monospace">-module(name)</fo:inline>, the result is the module name. If the attribute  
is a parameterized module declaration, the result is a tuple  
containing the module name and a list of the parameter variable  
names.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The evaluation throws <fo:inline font-family="monospace">syntax_error</fo:inline> if <fo:inline font-family="monospace">Node</fo:inline> does not represent a
  well-formed module attribute.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">analyze_attribute/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6964112">analyze_record_attribute(Node::syntaxTree()) -&gt; {atom(), Fields}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Fields = [{atom(), {Default, Type}}]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Default = none | <fo:inline font-style="italic">syntaxTree()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Type = none | <fo:inline font-style="italic">syntaxTree()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the name and the list of fields of a record declaration
  attribute. The result is a pair <fo:inline font-family="monospace">{Name, Fields}</fo:inline>, if
  <fo:inline font-family="monospace">Node</fo:inline> represents "<fo:inline font-family="monospace">-record(Name, {...}).</fo:inline>",
  where <fo:inline font-family="monospace">Fields</fo:inline> is a list of pairs <fo:inline font-family="monospace">{Label,
  {Default, Type}}</fo:inline> for each field "<fo:inline font-family="monospace">Label</fo:inline>", "<fo:inline font-family="monospace">Label =
  &lt;em&gt;Default&lt;/em&gt;</fo:inline>", "<fo:inline font-family="monospace">Label :: &lt;em&gt;Type&lt;/em&gt;</fo:inline>", or
  "<fo:inline font-family="monospace">Label = &lt;em&gt;Default&lt;/em&gt; :: &lt;em&gt;Type&lt;/em&gt;</fo:inline>" in the declaration,
  listed in left-to-right
  order. If the field has no default-value declaration, the value for
  <fo:inline font-family="monospace">Default</fo:inline> will be the atom <fo:inline font-family="monospace">none</fo:inline>. If the field has no type declaration,
  the value for <fo:inline font-family="monospace">Type</fo:inline> will be the atom <fo:inline font-family="monospace">none</fo:inline>. We do not  
guarantee that each label occurs at most once in the list.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The evaluation throws <fo:inline font-family="monospace">syntax_error</fo:inline> if
  <fo:inline font-family="monospace">Node</fo:inline> does not represent a well-formed record declaration
  attribute.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">analyze_attribute/1</fo:inline>, <fo:inline font-style="italic">analyze_record_field/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6979616">analyze_record_expr(Node::syntaxTree()) -&gt; {atom(), Info} | atom()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Info = {atom(), [{atom(), Value}]} | {atom(), atom()} | atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value = <fo:inline font-style="italic">syntaxTree()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the record name and field name/names of a record
  expression. If <fo:inline font-family="monospace">Node</fo:inline> has type <fo:inline font-family="monospace">record_expr</fo:inline>,
  <fo:inline font-family="monospace">record_index_expr</fo:inline> or <fo:inline font-family="monospace">record_access</fo:inline>, a pair
  <fo:inline font-family="monospace">{Type, Info}</fo:inline> is returned, otherwise an atom
  <fo:inline font-family="monospace">Type</fo:inline> is returned. <fo:inline font-family="monospace">Type</fo:inline> is the node type of
  <fo:inline font-family="monospace">Node</fo:inline>, and <fo:inline font-family="monospace">Info</fo:inline> depends on
  <fo:inline font-family="monospace">Type</fo:inline>, as follows:
  </fo:block><fo:block space-after="0.25em" space-before="0.25em">
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">record_expr</fo:inline>:</fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{atom(), [{atom(), Value}]}</fo:inline></fo:block></fo:block></fo:block-container>
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">record_access</fo:inline>:</fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{atom(), atom()}</fo:inline></fo:block></fo:block></fo:block-container>
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">record_index_expr</fo:inline>:</fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{atom(), atom()}</fo:inline></fo:block></fo:block></fo:block-container>
  </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
 
  </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For a <fo:inline font-family="monospace">record_expr</fo:inline> node, <fo:inline font-family="monospace">Info</fo:inline> represents
  the record name and the list of descriptors for the involved fields,
  listed in the order they appear. A field descriptor is a pair
  <fo:inline font-family="monospace">{Label, Value}</fo:inline>, if <fo:inline font-family="monospace">Node</fo:inline> represents "<fo:inline font-family="monospace">Label = &lt;em&gt;Value&lt;/em&gt;</fo:inline>".
  For a <fo:inline font-family="monospace">record_access</fo:inline> node,
  <fo:inline font-family="monospace">Info</fo:inline> represents the record name and the field name. For a
  <fo:inline font-family="monospace">record_index_expr</fo:inline> node, <fo:inline font-family="monospace">Info</fo:inline> represents the  
record name and the name field name.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The evaluation throws <fo:inline font-family="monospace">syntax_error</fo:inline> if
  <fo:inline font-family="monospace">Node</fo:inline> represents a record expression that is not
  well-formed.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">analyze_record_attribute/1</fo:inline>, <fo:inline font-style="italic">analyze_record_field/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7002128">analyze_record_field(Node::syntaxTree()) -&gt; {atom(), {Default, Type}}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Default = none | <fo:inline font-style="italic">syntaxTree()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Type = none | <fo:inline font-style="italic">syntaxTree()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the label, value-expression, and type of a record field
  specifier. The result is a pair <fo:inline font-family="monospace">{Label, {Default, Type}}</fo:inline>, if
  <fo:inline font-family="monospace">Node</fo:inline> represents "<fo:inline font-family="monospace">Label</fo:inline>", "<fo:inline font-family="monospace">Label = &lt;em&gt;Default&lt;/em&gt;</fo:inline>",
  "<fo:inline font-family="monospace">Label :: &lt;em&gt;Type&lt;/em&gt;</fo:inline>", or
   "<fo:inline font-family="monospace">Label = &lt;em&gt;Default&lt;/em&gt; :: &lt;em&gt;Type&lt;/em&gt;</fo:inline>".
  If the field has no value-expression, the value for
  <fo:inline font-family="monospace">Default</fo:inline> will be the atom <fo:inline font-family="monospace">none</fo:inline>. If the field has no type,
  the value for <fo:inline font-family="monospace">Type</fo:inline> will be the atom <fo:inline font-family="monospace">none</fo:inline>.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The evaluation throws <fo:inline font-family="monospace">syntax_error</fo:inline> if
  <fo:inline font-family="monospace">Node</fo:inline> does not represent a well-formed record field
  specifier.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">analyze_record_attribute/1</fo:inline>, <fo:inline font-style="italic">analyze_record_expr/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7015872">analyze_type_application(Node::syntaxTree()) -&gt; TypeName</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TypeName = {atom(), integer()} | {ModuleName, {atom(), integer()}}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ModuleName = atom()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the name of a used type. The result is a
  representation of the name of the used pre-defined or local type <fo:inline font-family="monospace">N/A</fo:inline>,
  if <fo:inline font-family="monospace">Node</fo:inline> represents a local (user) type application
  "<fo:inline font-family="monospace">&lt;em&gt;N&lt;/em&gt;(&lt;em&gt;T_1&lt;/em&gt;, ..., &lt;em&gt;T_A&lt;/em&gt;)</fo:inline>", or
  a representation of the name of the used remote type <fo:inline font-family="monospace">M:N/A</fo:inline>
  if <fo:inline font-family="monospace">Node</fo:inline> represents a remote user type application
  "<fo:inline font-family="monospace">&lt;em&gt;M&lt;/em&gt;:&lt;em&gt;N&lt;/em&gt;(&lt;em&gt;T_1&lt;/em&gt;, ..., &lt;em&gt;T_A&lt;/em&gt;)</fo:inline>".</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The evaluation throws <fo:inline font-family="monospace">syntax_error</fo:inline> if <fo:inline font-family="monospace">Node</fo:inline> does not represent a
  well-formed (user) type application expression.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">analyze_type_name/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7026016">analyze_type_name(Node::syntaxTree()) -&gt; TypeName</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TypeName = atom() | {atom(), integer()} | {ModuleName, {atom(), integer()}}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ModuleName = atom()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the type name represented by a syntax tree. If
  <fo:inline font-family="monospace">Node</fo:inline> represents a type name, such as
  "<fo:inline font-family="monospace">foo/1</fo:inline>" or "<fo:inline font-family="monospace">bloggs:fred/2</fo:inline>", a uniform  
representation of that name is returned.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The evaluation throws <fo:inline font-family="monospace">syntax_error</fo:inline> if
  <fo:inline font-family="monospace">Node</fo:inline> does not represent a well-formed type name.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7033168">analyze_wild_attribute(Node::syntaxTree()) -&gt; {atom(), term()}</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the name and value of a "wild" attribute. The result is
  the pair <fo:inline font-family="monospace">{Name, Value}</fo:inline>, if <fo:inline font-family="monospace">Node</fo:inline> represents "<fo:inline font-family="monospace">-Name(Value)</fo:inline>".</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that no checking is done whether <fo:inline font-family="monospace">Name</fo:inline> is a
  reserved attribute name such as <fo:inline font-family="monospace">module</fo:inline> or
  <fo:inline font-family="monospace">export</fo:inline>: it is assumed that the attribute is "wild".</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The evaluation throws <fo:inline font-family="monospace">syntax_error</fo:inline> if <fo:inline font-family="monospace">Node</fo:inline> does not represent a
  well-formed wild attribute.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">analyze_attribute/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7042544">annotate_bindings(Tree::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Adds or updates annotations on nodes in a syntax tree.
  Equivalent to <fo:inline font-family="monospace">annotate_bindings(Tree, Bindings)</fo:inline> where
  the top-level environment <fo:inline font-family="monospace">Bindings</fo:inline> is taken from the
  annotation <fo:inline font-family="monospace">{env, Bindings}</fo:inline> on the root node of
  <fo:inline font-family="monospace">Tree</fo:inline>. An exception is thrown if no such annotation
  should exist.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">annotate_bindings/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7049744">annotate_bindings(Tree::syntaxTree(), Bindings::ordset(atom())) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Adds or updates annotations on nodes in a syntax tree.
  <fo:inline font-family="monospace">Bindings</fo:inline> specifies the set of bound variables in the
  environment of the top level node. The following annotations are
  affected:
  </fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{env, Vars}</fo:inline>, representing the input environment
      of the subtree.</fo:block></fo:block></fo:list-item-body></fo:list-item>
 
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{bound, Vars}</fo:inline>, representing the variables that
      are bound in the subtree.</fo:block></fo:block></fo:list-item-body></fo:list-item>
 
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{free, Vars}</fo:inline>, representing the free variables in
      the subtree.</fo:block></fo:block></fo:list-item-body></fo:list-item>
  </fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  <fo:inline font-family="monospace">Bindings</fo:inline> and <fo:inline font-family="monospace">Vars</fo:inline> are ordered-set lists
  (cf. module <fo:inline font-family="monospace">ordsets</fo:inline>) of atoms representing variable
  names.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">ordsets(3)</fo:inline>, <fo:inline font-style="italic">annotate_bindings/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7062016">fold(F::Function, Start::term(), Tree::syntaxTree()) -&gt; term()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Function = (<fo:inline font-style="italic">syntaxTree()</fo:inline>, term()) -&gt; term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Folds a function over all nodes of a syntax tree. The result is
  the value of <fo:inline font-family="monospace">Function(X1, Function(X2, ... Function(Xn, Start)
  ... ))</fo:inline>, where <fo:inline font-family="monospace">[X1, X2, ..., Xn]</fo:inline> are the nodes of
  <fo:inline font-family="monospace">Tree</fo:inline> in a post-order traversal.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">fold_subtrees/3</fo:inline>, <fo:inline font-style="italic">foldl_listlist/3</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7070368">fold_subtrees(F::Function, Start::term(), Tree::syntaxTree()) -&gt; term()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Function = (<fo:inline font-style="italic">syntaxTree()</fo:inline>, term()) -&gt; term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Folds a function over the immediate subtrees of a syntax tree.
  This is similar to <fo:inline font-family="monospace">fold/3</fo:inline>, but only on the immediate
  subtrees of <fo:inline font-family="monospace">Tree</fo:inline>, in left-to-right order; it does not
  include the root node of <fo:inline font-family="monospace">Tree</fo:inline>.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">fold/3</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7078048">foldl_listlist(F::Function, Start::term(), Ls::[[term()]]) -&gt; term()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Function = (term(), term()) -&gt; term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Like <fo:inline font-family="monospace">lists:foldl/3</fo:inline>, but over a list of lists.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">lists:foldl/3</fo:inline>, <fo:inline font-style="italic">fold/3</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7084000">function_name_expansions(Names::[Name]) -&gt; [{ShortName, Name}]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = ShortName | {atom(), Name}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ShortName = atom() | {atom(), integer()}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a mapping from corresponding short names to full
  function names. Names are represented by nested tuples of atoms and
  integers (cf. <fo:inline font-family="monospace">analyze_function_name/1</fo:inline>). The result is a
  list containing a pair <fo:inline font-family="monospace">{ShortName, Name}</fo:inline> for each
  element <fo:inline font-family="monospace">Name</fo:inline> in the given list, where the corresponding
  <fo:inline font-family="monospace">ShortName</fo:inline> is the rightmost-innermost part of
  <fo:inline font-family="monospace">Name</fo:inline>. The list thus represents a finite mapping from  
unqualified names to the corresponding qualified names.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note: the resulting list can contain more than one tuple
  <fo:inline font-family="monospace">{ShortName, Name}</fo:inline> for the same <fo:inline font-family="monospace">ShortName</fo:inline>,
  possibly with different values for <fo:inline font-family="monospace">Name</fo:inline>, depending on
  the given list.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">analyze_function_name/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7093568">is_fail_expr(Tree::syntaxTree()) -&gt; boolean()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if <fo:inline font-family="monospace">Tree</fo:inline> represents an
  expression which never terminates normally. Note that the reverse
  does not apply. Currently, the detected cases are calls to
  <fo:inline font-family="monospace">exit/1</fo:inline>, <fo:inline font-family="monospace">throw/1</fo:inline>,
  <fo:inline font-family="monospace">erlang:error/1</fo:inline> and <fo:inline font-family="monospace">erlang:error/2</fo:inline>.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">erlang:error/1</fo:inline>, <fo:inline font-style="italic">erlang:error/2</fo:inline>, <fo:inline font-style="italic">erlang:exit/1</fo:inline>, <fo:inline font-style="italic">erlang:throw/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7103264">limit(Tree, Depth) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-family="monospace">limit(Tree, Depth, Text)</fo:inline> using the
  text <fo:inline font-family="monospace">"..."</fo:inline> as default replacement.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">limit/3</fo:inline>, <fo:inline font-style="italic">erl_syntax:text/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7109472">limit(Tree::syntaxTree(), Depth::integer(), Node::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Limits a syntax tree to a specified depth. Replaces all non-leaf
  subtrees in <fo:inline font-family="monospace">Tree</fo:inline> at the given <fo:inline font-family="monospace">Depth</fo:inline> by
  <fo:inline font-family="monospace">Node</fo:inline>. If <fo:inline font-family="monospace">Depth</fo:inline> is negative, the result is
  always <fo:inline font-family="monospace">Node</fo:inline>, even if <fo:inline font-family="monospace">Tree</fo:inline> has no subtrees.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a group of subtrees (as e.g., the argument list of an
  <fo:inline font-family="monospace">application</fo:inline> node) is at the specified depth, and there
  are two or more subtrees in the group, these will be collectively
  replaced by <fo:inline font-family="monospace">Node</fo:inline> even if they are leaf nodes. Groups of
  subtrees that are above the specified depth will be limited in size,
  as if each subsequent tree in the group were one level deeper than
  the previous. E.g., if <fo:inline font-family="monospace">Tree</fo:inline> represents a list of
  integers "<fo:inline font-family="monospace">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</fo:inline>", the result
  of <fo:inline font-family="monospace">limit(Tree, 5)</fo:inline> will represent <fo:inline font-family="monospace">[1, 2, 3, 4,
  ...]</fo:inline>.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The resulting syntax tree is typically only useful for
  pretty-printing or similar visual formatting.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">limit/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7122288">map(F::Function, Tree::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Function = (<fo:inline font-style="italic">syntaxTree()</fo:inline>) -&gt; <fo:inline font-style="italic">syntaxTree()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Applies a function to each node of a syntax tree. The result of
  each application replaces the corresponding original node. The order
  of traversal is bottom-up.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">map_subtrees/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7129696">map_subtrees(F::Function, Tree::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Function = (Tree) -&gt; Tree1</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Applies a function to each immediate subtree of a syntax tree.
  The result of each application replaces the corresponding original
  node.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">map/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7135856">mapfold(F::Function, Start::term(), Tree::syntaxTree()) -&gt; {syntaxTree(), term()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Function = (<fo:inline font-style="italic">syntaxTree()</fo:inline>, term()) -&gt; {<fo:inline font-style="italic">syntaxTree()</fo:inline>, term()}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Combines map and fold in a single operation. This is similar to
  <fo:inline font-family="monospace">map/2</fo:inline>, but also propagates an extra value from each
  application of the <fo:inline font-family="monospace">Function</fo:inline> to the next, while doing a
  post-order traversal of the tree like <fo:inline font-family="monospace">fold/3</fo:inline>. The value
  <fo:inline font-family="monospace">Start</fo:inline> is passed to the first function application, and
  the final result is the result of the last application.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">fold/3</fo:inline>, <fo:inline font-style="italic">map/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7146224">mapfold_subtrees(F::Function, Start::term(), Tree::syntaxTree()) -&gt; {syntaxTree(), term()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Function = (<fo:inline font-style="italic">syntaxTree()</fo:inline>, term()) -&gt; {<fo:inline font-style="italic">syntaxTree()</fo:inline>, term()}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Does a mapfold operation over the immediate subtrees of a syntax
  tree. This is similar to <fo:inline font-family="monospace">mapfold/3</fo:inline>, but only on the
  immediate subtrees of <fo:inline font-family="monospace">Tree</fo:inline>, in left-to-right order; it
  does not include the root node of <fo:inline font-family="monospace">Tree</fo:inline>.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">mapfold/3</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7155376">mapfoldl_listlist(F::Function, S::State, Ls::[[term()]]) -&gt; {[[term()]], term()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Function = (term(), term()) -&gt; {term(), term()}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Like <fo:inline font-family="monospace">lists:mapfoldl/3</fo:inline>, but over a list of lists.
  The list of lists in the result has the same structure as the given
  list of lists.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7159264">new_variable_name(Used::set(atom())) -&gt; atom()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns an atom which is not already in the set <fo:inline font-family="monospace">Used</fo:inline>. This is
  equivalent to <fo:inline font-family="monospace">new_variable_name(Function, Used)</fo:inline>, where <fo:inline font-family="monospace">Function</fo:inline>
  maps a given integer <fo:inline font-family="monospace">N</fo:inline> to the atom whose name consists of "<fo:inline font-family="monospace">V</fo:inline>"
  followed by the numeral for <fo:inline font-family="monospace">N</fo:inline>.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">new_variable_name/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7166768">new_variable_name(F::Function, Used::set(atom())) -&gt; atom()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Function = (integer()) -&gt; atom()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a user-named atom which is not already in the set
  <fo:inline font-family="monospace">Used</fo:inline>. The atom is generated by applying the given
  <fo:inline font-family="monospace">Function</fo:inline> to a generated integer. Integers are generated  
using an algorithm which tries to keep the names randomly distributed  
within a reasonably small range relative to the number of elements in  
the set.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function uses the module <fo:inline font-family="monospace">rand</fo:inline> to generate new
  keys. The seed it uses may be initialized by calling
  <fo:inline font-family="monospace">rand:seed/1</fo:inline> or <fo:inline font-family="monospace">rand:seed/2</fo:inline> before this
  function is first called.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">random(3)</fo:inline>, <fo:inline font-style="italic">sets(3)</fo:inline>, <fo:inline font-style="italic">new_variable_name/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7176752">new_variable_names(N::integer(), Used::set(atom())) -&gt; [atom()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Like <fo:inline font-family="monospace">new_variable_name/1</fo:inline>, but generates a list of
  <fo:inline font-family="monospace">N</fo:inline> new names.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">new_variable_name/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7182384">new_variable_names(N::integer(), F::Function, Used::set(atom())) -&gt; [atom()]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Function = (integer()) -&gt; atom()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Like <fo:inline font-family="monospace">new_variable_name/2</fo:inline>, but generates a list of
  <fo:inline font-family="monospace">N</fo:inline> new names.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">new_variable_name/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7188784">strip_comments(Tree::syntaxTree()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Removes all comments from all nodes of a syntax tree. All other
  attributes (such as position information) remain unchanged.
  Standalone comments in form lists are removed; any other standalone
  comments are changed into null-comments (no text, no indentation).</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7192832">to_comment(Tree) -&gt; syntaxTree()</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">to_comment(Tree, "% ")</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7196608">to_comment(Tree::syntaxTree(), Prefix::string()) -&gt; syntaxTree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-family="monospace">to_comment(Tree, Prefix, F)</fo:inline> for a
  default formatting function <fo:inline font-family="monospace">F</fo:inline>. The default
  <fo:inline font-family="monospace">F</fo:inline> simply calls <fo:inline font-family="monospace">erl_prettypr:format/1</fo:inline>.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">to_comment/3</fo:inline>, <fo:inline font-style="italic">erl_prettypr:format/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7204432">to_comment(Tree::syntaxTree(), Prefix::string(), F::Printer) -&gt; syntaxTree()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Printer = (<fo:inline font-style="italic">syntaxTree()</fo:inline>) -&gt; string()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Transforms a syntax tree into an abstract comment. The lines of
  the comment contain the text for <fo:inline font-family="monospace">Node</fo:inline>, as produced by
  the given <fo:inline font-family="monospace">Printer</fo:inline> function. Each line of the comment is
  prefixed by the string <fo:inline font-family="monospace">Prefix</fo:inline> (this does not include the
  initial "<fo:inline font-family="monospace">%</fo:inline>" character of the comment line).</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For example, the result of
  <fo:inline font-family="monospace">to_comment(erl_syntax:abstract([a,b,c]))</fo:inline> represents
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
          %% [a,b,c]</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  (cf. <fo:inline font-family="monospace">to_comment/1</fo:inline>).</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note: the text returned by the formatting function will be split
  automatically into separate comment lines at each line break. No
  extra work is needed.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">to_comment/1</fo:inline>, <fo:inline font-style="italic">to_comment/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7216400">variables(Tree::syntaxTree()) -&gt; set(atom())</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the names of variables occurring in a syntax tree, The
  result is a set of variable names represented by atoms. Macro names
  are not included.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">sets(3)</fo:inline>.</fo:block>
</fo:block>



Richard Carlsson
carlsson.richard@gmail.com<fo:block page-break-before="always" id="idp7227392" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">erl_tidy</fo:marker>erl_tidy</fo:block>Erlang module</fo:block>
<fo:block/>
erl_tidy
<fo:block/>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tidies and pretty-prints Erlang source code, removing unused  
functions, updating obsolete constructs and function calls, etc.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Caveats: It is possible that in some intricate uses of macros,  
the automatic addition or removal of parentheses around uses or  
arguments could cause the resulting program to be rejected by the  
compiler; however, we have found no such case in existing  
code. Programs defining strange macros can usually not be read by  
this program, and in those cases, no changes will be made.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you really, really want to, you may call it "Inga".</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Disclaimer: The author accepts no responsibility for errors
  introduced in code that has been processed by the program. It has
  been reasonably well tested, but the possibility of errors remains.
  Keep backups of your original code safely stored, until you feel
  confident that the new, modified code can be trusted.
 </fo:block>
<fo:block id="idp7231424" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">DATA TYPES</fo:block>

<fo:block space-after="0.25em" space-before="0.25em">
<fo:block keep-with-next.within-page="always">filename() = <fo:inline font-style="italic">file:filename()</fo:inline></fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/> </fo:block></fo:block-container>
<fo:block keep-with-next.within-page="always">syntaxTree() = <fo:inline font-style="italic">erl_syntax:syntaxTree()</fo:inline></fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An abstract syntax
  tree. See the <fo:inline font-style="italic">erl_syntax</fo:inline> module for details.
 </fo:block>
</fo:block></fo:block-container>
</fo:block>
<fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7238464">dir() -&gt; ok</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">dir("")</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7241664">dir(Dir) -&gt; ok</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">dir(Dir, [])</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7244880">dir(Directory::filename(), Options::[term()]) -&gt; ok</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tidies Erlang source files in a directory and its  
subdirectories.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Available options:
  </fo:block><fo:block space-after="0.25em" space-before="0.25em">
    <fo:block keep-with-next.within-page="always">{follow_links, boolean()}</fo:block>
 
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the value is <fo:inline font-family="monospace">true</fo:inline>, symbolic directory
        links will be followed.  The default value is
        <fo:inline font-family="monospace">false</fo:inline>.</fo:block></fo:block></fo:block-container>
 
    <fo:block keep-with-next.within-page="always">{recursive, boolean()}</fo:block>
 
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the value is <fo:inline font-family="monospace">true</fo:inline>, subdirectories will be
        visited recursively.  The default value is
        <fo:inline font-family="monospace">true</fo:inline>.</fo:block></fo:block></fo:block-container>
 
    <fo:block keep-with-next.within-page="always">{regexp, string()}</fo:block>
 
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The value denotes a regular expression (see module
        <fo:inline font-family="monospace">re</fo:inline>).  Tidying will only be applied to those
        regular files whose names match this pattern. The default
        value is <fo:inline font-family="monospace">".*\\.erl$"</fo:inline>, which matches normal
        Erlang source file names.</fo:block></fo:block></fo:block-container>
 
    <fo:block keep-with-next.within-page="always">{test, boolean()}</fo:block>
 
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the value is <fo:inline font-family="monospace">true</fo:inline>, no files will be
        modified. The default value is <fo:inline font-family="monospace">false</fo:inline>.</fo:block></fo:block></fo:block-container>
 
    <fo:block keep-with-next.within-page="always">{verbose, boolean()}</fo:block>
 
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the value is <fo:inline font-family="monospace">true</fo:inline>, progress messages will
        be output while the program is running, unless the
        <fo:inline font-family="monospace">quiet</fo:inline> option is <fo:inline font-family="monospace">true</fo:inline>. The default
        value when calling <fo:inline font-style="italic">dir/2</fo:inline> is <fo:inline font-family="monospace">true</fo:inline>.</fo:block></fo:block></fo:block-container>
 
  </fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See the function <fo:inline font-style="italic">file/2</fo:inline> for further options.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">re(3)</fo:inline>, <fo:inline font-style="italic">file/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7264000">file(Name) -&gt; ok</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">file(Name, [])</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7267216">file(Name::filename(), Options::[term()]) -&gt; ok</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tidies an Erlang source code file.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Available options are:
  </fo:block><fo:block space-after="0.25em" space-before="0.25em">
    <fo:block keep-with-next.within-page="always">{backup_suffix, string()}</fo:block>
 
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the file name suffix to be used when a backup
        file is created; the default value is <fo:inline font-family="monospace">".bak"</fo:inline>
        (cf. the <fo:inline font-family="monospace">backups</fo:inline> option).</fo:block></fo:block></fo:block-container>
 
    <fo:block keep-with-next.within-page="always">{backups, boolean()}</fo:block>
 
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the value is <fo:inline font-family="monospace">true</fo:inline>, existing files will be
        renamed before new files are opened for writing. The new
        names are formed by appending the string given by the
        <fo:inline font-family="monospace">backup_suffix</fo:inline> option to the original name. The
        default value is <fo:inline font-family="monospace">true</fo:inline>.</fo:block></fo:block></fo:block-container>
 
    <fo:block keep-with-next.within-page="always">{dir, filename()}</fo:block>
 
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the name of the directory in which the output
        file is to be written. By default, the current directory is
        used. If the value is an empty string, the current directory
        is used. </fo:block></fo:block></fo:block-container>
 
    <fo:block keep-with-next.within-page="always">{outfile, filename()}</fo:block>
 
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the name of the file (without suffix) to which
        the resulting source code is to be written. If this option is
        not specified, the <fo:inline font-family="monospace">Name</fo:inline> argument is used.</fo:block></fo:block></fo:block-container>
 
    <fo:block keep-with-next.within-page="always">{printer, Function}</fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Function = (syntaxTree(), [term()]) -&gt; string()</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
 
        Specifies a function for prettyprinting Erlang syntax trees.
        This is used for outputting the resulting module definition.
        The function is assumed to return formatted text for the given
        syntax tree, and should raise an exception if an error occurs.
        The default formatting function calls
        <fo:inline font-family="monospace">erl_prettypr:format/2</fo:inline>.</fo:block></fo:block></fo:block-container>
 
    <fo:block keep-with-next.within-page="always">{test, boolean()}</fo:block>
 
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the value is <fo:inline font-family="monospace">true</fo:inline>, no files will be modified; this
        is typically most useful if the <fo:inline font-family="monospace">verbose</fo:inline> flag is enabled, to
        generate reports about the program files without affecting
        them. The default value is <fo:inline font-family="monospace">false</fo:inline>.</fo:block></fo:block></fo:block-container>
 
    <fo:block keep-with-next.within-page="always">{stdout, boolean()}</fo:block>
 
       <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the value is <fo:inline font-family="monospace">true</fo:inline>, instead of the file being written
       to disk it will be printed to stdout. The default value is
       <fo:inline font-family="monospace">false</fo:inline>.</fo:block></fo:block></fo:block-container>
 
  </fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See the function <fo:inline font-family="monospace">module/2</fo:inline> for further options.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">module/2</fo:inline>, <fo:inline font-style="italic">erl_prettypr:format/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7289344">module(Forms) -&gt; syntaxTree()</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">module(Forms, [])</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7293120">module(Forms, Options::[term()]) -&gt; syntaxTree()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Forms = <fo:inline font-style="italic">syntaxTree()</fo:inline> | [<fo:inline font-style="italic">syntaxTree()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tidies a syntax tree representation of a module
  definition. The given <fo:inline font-family="monospace">Forms</fo:inline> may be either a single
  syntax tree of type <fo:inline font-family="monospace">form_list</fo:inline>, or a list of syntax
  trees representing "program forms". In either case,
  <fo:inline font-family="monospace">Forms</fo:inline> must represent a single complete module
  definition. The returned syntax tree has type
  <fo:inline font-family="monospace">form_list</fo:inline> and represents a tidied-up version of the  
same source code.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Available options are:
  </fo:block><fo:block space-after="0.25em" space-before="0.25em">
    <fo:block keep-with-next.within-page="always">{auto_export_vars, boolean()}</fo:block>
 
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the value is <fo:inline font-family="monospace">true</fo:inline>, all matches
        "<fo:inline font-family="monospace">{V1, ..., Vn} = E</fo:inline>" where <fo:inline font-family="monospace">E</fo:inline> is a
        case-, if- or receive-expression whose branches all return
        n-tuples (or explicitly throw exceptions) will be rewritten
        to bind and export the variables <fo:inline font-family="monospace">V1</fo:inline>, ...,
        <fo:inline font-family="monospace">Vn</fo:inline> directly. The default value is <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
 
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For example:
        </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
                 {X, Y} = case ... of
                              ... -&gt; {17, foo()};
                              ... -&gt; {42, bar()}
                          end
        </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
        will be rewritten to:
        </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
                 case ... of
                     ... -&gt; X = 17, Y = foo(), {X, Y};
                     ... -&gt; X = 42, Y = bar(), {X, Y}
                 end
        </fo:block></fo:block></fo:block-container>
 
    <fo:block keep-with-next.within-page="always">{auto_list_comp, boolean()}</fo:block>
 
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the value is <fo:inline font-family="monospace">true</fo:inline>, calls to <fo:inline font-family="monospace">lists:map/2</fo:inline> and
        <fo:inline font-family="monospace">lists:filter/2</fo:inline> will be rewritten using list comprehensions.
        The default value is <fo:inline font-family="monospace">true</fo:inline>.</fo:block></fo:block></fo:block-container>
 
    <fo:block keep-with-next.within-page="always">{file, string()}</fo:block>
 
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the name of the file from which the source code
        was taken. This is only used for generation of error
        reports. The default value is the empty string.</fo:block></fo:block></fo:block-container>
 
    <fo:block keep-with-next.within-page="always">{idem, boolean()}</fo:block>
 
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the value is <fo:inline font-family="monospace">true</fo:inline>, all options that affect how the
        code is modified are set to "no changes". For example, to
        only update guard tests, and nothing else, use the options
        <fo:inline font-family="monospace">[new_guard_tests, idem]</fo:inline>. (Recall that options closer to the
        beginning of the list have higher precedence.)</fo:block></fo:block></fo:block-container>
 
    <fo:block keep-with-next.within-page="always">{keep_unused, boolean()}</fo:block>
 
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the value is <fo:inline font-family="monospace">true</fo:inline>, unused functions will
        not be removed from the code. The default value is
        <fo:inline font-family="monospace">false</fo:inline>.</fo:block></fo:block></fo:block-container>
 
    <fo:block keep-with-next.within-page="always">{new_guard_tests, boolean()}</fo:block>
 
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the value is <fo:inline font-family="monospace">true</fo:inline>, guard tests will be updated to
        use the new names, e.g. "<fo:inline font-family="monospace">is_integer(X)</fo:inline>" instead of
        "<fo:inline font-family="monospace">integer(X)</fo:inline>". The default value is <fo:inline font-family="monospace">true</fo:inline>. See also
        <fo:inline font-family="monospace">old_guard_tests</fo:inline>.</fo:block></fo:block></fo:block-container>
 
    <fo:block keep-with-next.within-page="always">{no_imports, boolean()}</fo:block>
 
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the value is <fo:inline font-family="monospace">true</fo:inline>, all import statements will be
        removed and calls to imported functions will be expanded to
        explicit remote calls. The default value is <fo:inline font-family="monospace">false</fo:inline>.</fo:block></fo:block></fo:block-container>
 
    <fo:block keep-with-next.within-page="always">{old_guard_tests, boolean()}</fo:block>
 
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the value is <fo:inline font-family="monospace">true</fo:inline>, guard tests will be changed to
        use the old names instead of the new ones, e.g.
        "<fo:inline font-family="monospace">integer(X)</fo:inline>" instead of "<fo:inline font-family="monospace">is_integer(X)</fo:inline>". The default
        value is <fo:inline font-family="monospace">false</fo:inline>. This option overrides the <fo:inline font-family="monospace">new_guard_tests</fo:inline>
        option.</fo:block></fo:block></fo:block-container>
 
    <fo:block keep-with-next.within-page="always">{quiet, boolean()}</fo:block>
 
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the value is <fo:inline font-family="monospace">true</fo:inline>, all information
        messages and warning messages will be suppressed. The default
        value is <fo:inline font-family="monospace">false</fo:inline>.</fo:block></fo:block></fo:block-container>
 
    <fo:block keep-with-next.within-page="always">{rename, [{{atom(), atom(), integer()},
                   {atom(), atom()}}]}</fo:block>
 
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The value is a list of pairs, associating tuples
        <fo:inline font-family="monospace">{Module, Name, Arity}</fo:inline> with tuples <fo:inline font-family="monospace">{NewModule, NewName}</fo:inline>,        
specifying renamings of calls to remote functions. By        
default, the value is the empty list.</fo:block>
 
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The renaming affects only remote calls (also when
        disguised by import declarations); local calls within a
        module are not affected, and no function definitions are
        renamed. Since the arity cannot change, the new name is
        represented by <fo:inline font-family="monospace">{NewModule, NewName}</fo:inline> only. Only        
calls matching the specified arity will match; multiple        
entries are necessary for renaming calls to functions that        
have the same module and function name, but different        
arities.</fo:block>
 
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This option can also be used to override the default
        renaming of calls which use obsolete function names.</fo:block></fo:block></fo:block-container>
 
    <fo:block keep-with-next.within-page="always">{verbose, boolean()}</fo:block>
 
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the value is <fo:inline font-family="monospace">true</fo:inline>, progress messages will be output
        while the program is running, unless the <fo:inline font-family="monospace">quiet</fo:inline> option is
        <fo:inline font-family="monospace">true</fo:inline>. The default value is <fo:inline font-family="monospace">false</fo:inline>.</fo:block></fo:block></fo:block-container>
 
  </fo:block>
</fo:block>



Richard Carlsson
carlsson.richard@gmail.com<fo:block page-break-before="always" id="idp7338288" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">igor</fo:marker>igor</fo:block>Erlang module</fo:block>
<fo:block/>
igor
<fo:block/>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Igor: the Module Merger and Renamer.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The program Igor merges the source code of one or more Erlang  
modules into a single module, which can then replace the original set  
of modules. Igor is also able to rename a set of (possibly  
interdependent) modules, without joining them into a single  
module.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The main user interface consists of the functions <fo:inline font-style="italic">merge/3</fo:inline> and
  <fo:inline font-style="italic">rename/3</fo:inline>. See also the function <fo:inline font-style="italic">parse_transform/2</fo:inline>.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A note of warning: Igor cannot do anything about the case when the
  name of a remote function is passed to the built-in functions
  <fo:inline font-family="monospace">apply</fo:inline> and <fo:inline font-family="monospace">spawn</fo:inline> <fo:inline font-weight="bold">unless</fo:inline> the module
  and function names are explicitly stated in the call, as in e.g.
  <fo:inline font-family="monospace">apply(lists, reverse, [Xs])</fo:inline>. In all other cases, Igor  
leaves such calls unchanged, and warns the user that manual editing  
might be necessary.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Also note that Erlang records will be renamed as necessary to
  avoid non-equivalent definitions using the same record name. This
  does not work if the source code accesses the name field of such
  record tuples by <fo:inline font-family="monospace">element/2</fo:inline> or similar methods. Always  
use the record syntax to handle record tuples, if possible.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Disclaimer: the author of this program takes no responsibility for  
the correctness of the produced output, or for any effects of its  
execution. In particular, the author may not be held responsible  
should Igor include the code of a deceased madman in the result.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For further information on Igors in general, see e.g. "Young
  Frankenstein", Mel Brooks, 1974, and "The Fifth Elephant", Terry
  Pratchett, 1999.</fo:block>
<fo:block id="idp7348432" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">DATA TYPES</fo:block>

<fo:block space-after="0.25em" space-before="0.25em">
<fo:block keep-with-next.within-page="always">filename() = <fo:inline font-style="italic">file:filename()</fo:inline></fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/> </fo:block></fo:block-container>
<fo:block keep-with-next.within-page="always">stubDescriptor() = {ModuleName, Functions, [Attribute]}</fo:block>
<fo:block-container><fo:block start-indent="2em">
<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">ModuleName = atom()</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Functions = [{FunctionName, {ModuleName, FunctionName}}]</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">FunctionName = {atom(), integer()}</fo:block></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Attribute = {atom(), term()}</fo:block></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A stub module descriptor contains the module name, a list of
       exported functions, and a list of module attributes. Each
       function is described by its name (which includes its arity),
       and the corresponding module and function that it calls. (The
       arities should always match.) The attributes are simply
       described by key-value pairs.
 </fo:block>
</fo:block></fo:block-container>
<fo:block keep-with-next.within-page="always">syntaxTree() = <fo:inline font-style="italic">erl_syntax:syntaxTree()</fo:inline></fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An abstract syntax
  tree. See the <fo:inline font-style="italic">erl_syntax</fo:inline> module for details.
 </fo:block>
</fo:block></fo:block-container>
</fo:block>
<fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7359904">create_stubs(Stubs::[stubDescriptor()], Options::[term()]) -&gt; [string()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates stub module source files corresponding to the given stub
  descriptors. The returned value is the list of names of the created
  files. See <fo:inline font-family="monospace">merge_sources/3</fo:inline> for more information about  
stub descriptors.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Options:
  </fo:block><fo:block space-after="0.25em" space-before="0.25em">
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{backup_suffix, string()}</fo:inline></fo:block>
    <fo:block-container><fo:block start-indent="2em"/></fo:block-container><fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{backups, boolean()}</fo:inline></fo:block>
    <fo:block-container><fo:block start-indent="2em"/></fo:block-container><fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{printer, Function}</fo:inline></fo:block>
    <fo:block-container><fo:block start-indent="2em"/></fo:block-container><fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{stub_dir, filename()}</fo:inline></fo:block>
    <fo:block-container><fo:block start-indent="2em"/></fo:block-container><fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{suffix, string()}</fo:inline></fo:block>
    <fo:block-container><fo:block start-indent="2em"/></fo:block-container><fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{verbose, boolean()}</fo:inline></fo:block>
  <fo:block-container><fo:block start-indent="2em"/></fo:block-container></fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See <fo:inline font-family="monospace">merge/3</fo:inline> for details on these options.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">merge/3</fo:inline>, <fo:inline font-style="italic">merge_sources/3</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7371856">merge(Name::atom(), Files::[filename()]) -&gt; [filename()]</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">merge(Name, Files, [])</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7376528">merge(Name::atom(), Files::[filename()], Options::[term()]) -&gt; [filename()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Merges source code files to a single file. <fo:inline font-family="monospace">Name</fo:inline>
  specifies the name of the resulting module - not the name of the
  output file. <fo:inline font-family="monospace">Files</fo:inline> is a list of file names and/or module
  names of source modules to be read and merged (see
  <fo:inline font-family="monospace">merge_files/4</fo:inline> for details). All the input modules must  
be distinctly named.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The resulting source code is written to a file named
  "<fo:inline font-family="monospace">&lt;em&gt;Name&lt;/em&gt;.erl</fo:inline>" in the current directory, unless
  otherwise specified by the options <fo:inline font-family="monospace">dir</fo:inline> and
  <fo:inline font-family="monospace">outfile</fo:inline> described below.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Examples:
  </fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">given a module <fo:inline font-family="monospace">m</fo:inline> in file "<fo:inline font-family="monospace">m.erl</fo:inline>"
    which uses the standard library module <fo:inline font-family="monospace">lists</fo:inline>, calling
    <fo:inline font-family="monospace">igor:merge(m, [m, lists])</fo:inline> will create a new file
    "<fo:inline font-family="monospace">m.erl</fo:inline> which contains the code from <fo:inline font-family="monospace">m</fo:inline> and
    exports the same functions, and which includes the referenced code
    from the <fo:inline font-family="monospace">lists</fo:inline> module. The original file will be
    renamed to "<fo:inline font-family="monospace">m.erl.bak</fo:inline>".</fo:block></fo:block></fo:list-item-body></fo:list-item>
 
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">given modules <fo:inline font-family="monospace">m1</fo:inline> and <fo:inline font-family="monospace">m2</fo:inline>, in
    corresponding files, calling <fo:inline font-family="monospace">igor:merge(m, [m1, m2])</fo:inline>
    will create a file "<fo:inline font-family="monospace">m.erl</fo:inline>" which contains the code
    from <fo:inline font-family="monospace">m1</fo:inline> and <fo:inline font-family="monospace">m2</fo:inline> and exports the functions
    of <fo:inline font-family="monospace">m1</fo:inline>.</fo:block></fo:block></fo:list-item-body></fo:list-item>
  </fo:list-block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stub module files are created for those modules that are to be
  exported by the target module (see options <fo:inline font-family="monospace">export</fo:inline>,
  <fo:inline font-family="monospace">stubs</fo:inline> and <fo:inline font-family="monospace">stub_dir</fo:inline>).</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function returns the list of file names of all created  
modules, including any automatically created stub modules. The file  
name of the target module is always first in the list.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note: If you get a "syntax error" message when trying to merge
  files (and you know those files to be correct), then try the
  <fo:inline font-family="monospace">preprocess</fo:inline> option. It typically means that your code  
contains too strange macros to be handled without actually performing  
the preprocessor expansions.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Options:
  </fo:block><fo:block space-after="0.25em" space-before="0.25em">
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{backup_suffix, string()}</fo:inline></fo:block>
 
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the file name suffix to be used when a backup file
      is created; the default value is <fo:inline font-family="monospace">".bak"</fo:inline>.</fo:block></fo:block></fo:block-container>
 
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{backups, boolean()}</fo:inline></fo:block>
 
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the value is <fo:inline font-family="monospace">true</fo:inline>, existing files will be
      renamed before new files are opened for writing. The new names
      are formed by appending the string given by the
      <fo:inline font-family="monospace">backup_suffix</fo:inline> option to the original name. The
      default value is <fo:inline font-family="monospace">true</fo:inline>.</fo:block></fo:block></fo:block-container>
 
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{dir, filename()}</fo:inline></fo:block>
 
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the name of the directory in which the output file
      is to be written. An empty string is interpreted as the current
      directory. By default, the current directory is used.</fo:block></fo:block></fo:block-container>
 
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{outfile, filename()}</fo:inline></fo:block>
 
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the name of the file (without suffix) to which the
      resulting source code is to be written. By default, this is the
      same as the <fo:inline font-family="monospace">Name</fo:inline> argument.</fo:block></fo:block></fo:block-container>
 
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{preprocess, boolean()}</fo:inline></fo:block>
 
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the value is <fo:inline font-family="monospace">true</fo:inline>, preprocessing will be done
      when reading the source code. See <fo:inline font-family="monospace">merge_files/4</fo:inline> for
      details.</fo:block></fo:block></fo:block-container>
 
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{printer, Function}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Function = (syntaxTree()) -&gt; string()</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Specifies a function for prettyprinting Erlang syntax trees.
      This is used for outputting the resulting module definition, as
      well as for creating stub files. The function is assumed to
      return formatted text for the given syntax tree, and should raise
      an exception if an error occurs. The default formatting function
      calls <fo:inline font-family="monospace">erl_prettypr:format/2</fo:inline>.</fo:block></fo:block></fo:block-container>
 
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{stub_dir, filename()}</fo:inline></fo:block>
 
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the name of the directory to which any generated
      stub module files are written. The default value is
      <fo:inline font-family="monospace">"stubs"</fo:inline>.</fo:block></fo:block></fo:block-container>
 
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{stubs, boolean()}</fo:inline></fo:block>
 
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the value is <fo:inline font-family="monospace">true</fo:inline>, stub module files will be
      automatically generated for all exported modules that do not have
      the same name as the target module. The default value is
      <fo:inline font-family="monospace">true</fo:inline>.</fo:block></fo:block></fo:block-container>
 
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{suffix, string()}</fo:inline></fo:block>
 
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the suffix to be used for the output file names;
      the default value is <fo:inline font-family="monospace">".erl"</fo:inline>.</fo:block></fo:block></fo:block-container>
  </fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See <fo:inline font-family="monospace">merge_files/4</fo:inline> for further options.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">merge/2</fo:inline>, <fo:inline font-style="italic">merge_files/4</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7418912">merge_files(Name::atom(), Files::[filename()], Options::[term()]) -&gt; {syntaxTree(), [stubDescriptor()]}</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">merge_files(Name, [], Files, Options)</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7424352">merge_files(Name::atom(), Sources::[Forms], Files::[filename()], Options::[term()]) -&gt; {syntaxTree(), [stubDescriptor()]}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Forms = <fo:inline font-style="italic">syntaxTree()</fo:inline> | [<fo:inline font-style="italic">syntaxTree()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Merges source code files and syntax trees to a single syntax
  tree. This is a file-reading front end to
  <fo:inline font-family="monospace">merge_sources/3</fo:inline>. <fo:inline font-family="monospace">Name</fo:inline> specifies the name of
  the resulting module - not the name of the output file.
  <fo:inline font-family="monospace">Sources</fo:inline> is a list of syntax trees and/or lists of
  "source code form" syntax trees, each entry representing a module
  definition. <fo:inline font-family="monospace">Files</fo:inline> is a list of file names and/or module  
names of source modules to be read and included. All the input  
modules must be distinctly named.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a name in <fo:inline font-family="monospace">Files</fo:inline> is not the name of an existing
  file, Igor assumes it represents a module name, and tries to locate
  and read the corresponding source file. The parsed files are appended
  to <fo:inline font-family="monospace">Sources</fo:inline> and passed on to
  <fo:inline font-family="monospace">merge_sources/3</fo:inline>, i.e., entries in <fo:inline font-family="monospace">Sources</fo:inline>  
are listed before entries read from files.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If no exports are listed by an <fo:inline font-family="monospace">export</fo:inline> option (see
  <fo:inline font-family="monospace">merge_sources/3</fo:inline> for details), then if <fo:inline font-family="monospace">Name</fo:inline>
  is also the name of one of the input modules, that module will be
  exported; otherwise, the first listed module will be exported. Cf.
  the examples under <fo:inline font-family="monospace">merge/3</fo:inline>.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The result is a pair <fo:inline font-family="monospace">{Tree, Stubs}</fo:inline>, where
  <fo:inline font-family="monospace">Tree</fo:inline> represents the source code that is the result of
  merging all the code in <fo:inline font-family="monospace">Sources</fo:inline> and <fo:inline font-family="monospace">Files</fo:inline>,
  and <fo:inline font-family="monospace">Stubs</fo:inline> is a list of stub module descriptors (see
  <fo:inline font-family="monospace">merge_sources/3</fo:inline> for details).</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Options:
  </fo:block><fo:block space-after="0.25em" space-before="0.25em">
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{comments, boolean()}</fo:inline></fo:block>
 
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the value is <fo:inline font-family="monospace">true</fo:inline>, source code comments in
      the original files will be preserved in the output. The default
      value is <fo:inline font-family="monospace">true</fo:inline>.</fo:block></fo:block></fo:block-container>
 
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{find_src_rules, [{string(), string()}]}</fo:inline></fo:block>
 
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies a list of rules for associating object files with
      source files, to be passed to the function
      <fo:inline font-family="monospace">filelib:find_source/2</fo:inline>. This can be used to change the
      way Igor looks for source files. If this option is not specified,
      the default system rules are used. The first occurrence of this
      option completely overrides any later in the option list.</fo:block></fo:block></fo:block-container>
 
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{includes, [filename()]}</fo:inline></fo:block>
 
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies a list of directory names for the Erlang
      preprocessor, if used, to search for include files (cf. the
      <fo:inline font-family="monospace">preprocess</fo:inline> option). The default value is the empty
      list. The directory of the source file and the current directory
      are automatically appended to the list.</fo:block></fo:block></fo:block-container>
 
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{macros, [{atom(), term()}]}</fo:inline></fo:block>
 
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies a list of "pre-defined" macro definitions for the
      Erlang preprocessor, if used (cf. the <fo:inline font-family="monospace">preprocess</fo:inline>
      option). The default value is the empty list.</fo:block></fo:block></fo:block-container>
 
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{preprocess, boolean()}</fo:inline></fo:block>
 
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the value is <fo:inline font-family="monospace">false</fo:inline>, Igor will read source
      files without passing them through the Erlang preprocessor
      (<fo:inline font-family="monospace">epp</fo:inline>), in order to avoid expansion of preprocessor
      directives such as <fo:inline font-family="monospace">-include(...).</fo:inline>,
      <fo:inline font-family="monospace">-define(...).</fo:inline> and <fo:inline font-family="monospace">-ifdef(...)</fo:inline>, and
      macro calls such as <fo:inline font-family="monospace">?LINE</fo:inline> and <fo:inline font-family="monospace">?MY_MACRO(x,
      y)</fo:inline>. The default value is <fo:inline font-family="monospace">false</fo:inline>, i.e.,
      preprocessing is not done. (See the module
      <fo:inline font-family="monospace">epp_dodger</fo:inline> for details.)</fo:block>
 
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notes: If a file contains too exotic definitions or uses of
      macros, it will not be possible to read it without preprocessing.
      Furthermore, Igor does not currently try to sort out multiple
      inclusions of the same file, or redefinitions of the same macro
      name. Therefore, when preprocessing is turned off, it may become
      necessary to edit the resulting source code, removing such
      re-inclusions and redefinitions.</fo:block></fo:block></fo:block-container>
  </fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See <fo:inline font-family="monospace">merge_sources/3</fo:inline> for further options.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">epp_dodger</fo:inline>, <fo:inline font-style="italic">filelib:find_source/2</fo:inline>, <fo:inline font-style="italic">merge/3</fo:inline>, <fo:inline font-style="italic">merge_files/3</fo:inline>, <fo:inline font-style="italic">merge_sources/3</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7461488">merge_sources(Name::atom(), Sources::[Forms], Options::[term()]) -&gt; {syntaxTree(), [stubDescriptor()]}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Forms = <fo:inline font-style="italic">syntaxTree()</fo:inline> | [<fo:inline font-style="italic">syntaxTree()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Merges syntax trees to a single syntax tree. This is the main
  code merging "engine". <fo:inline font-family="monospace">Name</fo:inline> specifies the name of the
  resulting module. <fo:inline font-family="monospace">Sources</fo:inline> is a list of syntax trees of
  type <fo:inline font-family="monospace">form_list</fo:inline> and/or lists of "source code form" syntax  
trees, each entry representing a module definition. All the input  
modules must be distinctly named.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Unless otherwise specified by the options, all modules are assumed
  to be at least "static", and all except the target module are assumed
  to be "safe". See the <fo:inline font-family="monospace">static</fo:inline> and <fo:inline font-family="monospace">safe</fo:inline>  
options for details.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Name</fo:inline> is also the name of one of the input modules,  
the code from that module will occur at the top of the resulting  
code, and no extra "header" comments will be added. In other words,  
the look of that module will be preserved.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The result is a pair <fo:inline font-family="monospace">{Tree, Stubs}</fo:inline>, where
  <fo:inline font-family="monospace">Tree</fo:inline> represents the source code that is the result of
  merging all the code in <fo:inline font-family="monospace">Sources</fo:inline>, and <fo:inline font-family="monospace">Stubs</fo:inline>  
is a list of stub module descriptors (see below).</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Stubs</fo:inline> contains one entry for each exported input
  module (cf. the <fo:inline font-family="monospace">export</fo:inline> option), each entry describing a
  stub module that redirects calls of functions in the original module
  to the corresponding (possibly renamed) functions in the new module.
  The stub descriptors can be used to automatically generate stub
  modules; see <fo:inline font-family="monospace">create_stubs/2</fo:inline>.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Options:
  </fo:block><fo:block space-after="0.25em" space-before="0.25em">
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{export, [atom()]}</fo:inline></fo:block>
 
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies a list of names of input modules whose interfaces
      should be exported by the output module. A stub descriptor is
      generated for each specified module, unless its name is
      <fo:inline font-family="monospace">Name</fo:inline>. If no modules are specified, then if
      <fo:inline font-family="monospace">Name</fo:inline> is also the name of an input module, that
      module will be exported; otherwise the first listed module in
      <fo:inline font-family="monospace">Sources</fo:inline> will be exported. The default value is the
      empty list.</fo:block></fo:block></fo:block-container>
 
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{export_all, boolean()}</fo:inline></fo:block>
 
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the value is <fo:inline font-family="monospace">true</fo:inline>, this is equivalent to
      listing all of the input modules in the <fo:inline font-family="monospace">export</fo:inline>
      option. The default value is <fo:inline font-family="monospace">false</fo:inline>.</fo:block></fo:block></fo:block-container>
 
  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{file_attributes, Preserve}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Preserve = yes | comment | no</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      If the value is <fo:inline font-family="monospace">yes</fo:inline>, all file attributes
      <fo:inline font-family="monospace">-file(...)</fo:inline> in the input sources will be preserved in
      the resulting code. If the value is <fo:inline font-family="monospace">comment</fo:inline>, they
      will be turned into comments, but remain in their original
      positions in the code relative to the other source code forms. If
      the value is <fo:inline font-family="monospace">no</fo:inline>, all file attributes will be removed
      from the code, unless they have attached comments, in which case
      they will be handled as in the <fo:inline font-family="monospace">comment</fo:inline> case. The
      default value is <fo:inline font-family="monospace">no</fo:inline>.</fo:block></fo:block></fo:block-container>
 
  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{no_banner, boolean()}</fo:inline></fo:block>
 
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the value is <fo:inline font-family="monospace">true</fo:inline>, no banner comment will be
      added at the top of the resulting module, even if the target
      module does not have the same name as any of the input modules.
      Instead, Igor will try to preserve the look of the module whose
      code is at the top of the output. The default value is
      <fo:inline font-family="monospace">false</fo:inline>.</fo:block></fo:block></fo:block-container>
 
  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{no_headers, boolean()}</fo:inline></fo:block>
 
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the value is <fo:inline font-family="monospace">true</fo:inline>, no header comments will be
      added to the resulting module at the beginning of each section of
      code that originates from a particular input module. The default
      value is <fo:inline font-family="monospace">false</fo:inline>, which means that section headers are
      normally added whenever more than two or more modules are
      merged.</fo:block></fo:block></fo:block-container>
 
  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{no_imports, boolean()}</fo:inline></fo:block>
 
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the value is <fo:inline font-family="monospace">true</fo:inline>, all
      <fo:inline font-family="monospace">-import(...)</fo:inline> declarations in the original code will
      be expanded in the result; otherwise, as much as possible of the
      original import declarations will be preserved. The default value
      is <fo:inline font-family="monospace">false</fo:inline>.</fo:block></fo:block></fo:block-container>
 
  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{notes, Notes}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Notes = always | yes | no</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      If the value is <fo:inline font-family="monospace">yes</fo:inline>, comments will be inserted where
      important changes have been made in the code. If the value is
      <fo:inline font-family="monospace">always</fo:inline>, <fo:inline font-weight="bold">all</fo:inline> changes to the code will be
      commented. If the value is <fo:inline font-family="monospace">no</fo:inline>, changes will be made
      without comments. The default value is <fo:inline font-family="monospace">yes</fo:inline>.</fo:block></fo:block></fo:block-container>
 
  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{redirect, [{atom(), atom()}]}</fo:inline></fo:block>
 
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies a list of pairs of module names, representing a
      mapping from old names to new. <fo:inline font-weight="bold">The set of old names may not
      include any of the names of the input modules.</fo:inline> All calls to
      the listed old modules will be rewritten to refer to the
      corresponding new modules. <fo:inline font-weight="bold">The redirected calls will not be
      further processed, even if the new destination is in one of the
      input modules.</fo:inline> This option mainly exists to support module
      renaming; cf. <fo:inline font-family="monospace">rename/3</fo:inline>. The default value is the
      empty list.</fo:block></fo:block></fo:block-container>
 
  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{safe, [atom()]}</fo:inline></fo:block>
 
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies a list of names of input modules such that calls to
      these "safe" modules may be turned into direct local calls, that
      do not test for code replacement. Typically, this can be done for
      e.g. standard library modules. If a module is "safe", it is per
      definition also "static" (cf. below). The list may be empty. By
      default, all involved modules <fo:inline font-weight="bold">except the target module</fo:inline>
      are considered "safe".</fo:block></fo:block></fo:block-container>
 
  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{static, [atom()]}</fo:inline></fo:block>
 
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies a list of names of input modules which will be
      assumed never to be replaced (reloaded) unless the target module
      is also first replaced. The list may be empty. The target module
      itself (which may also be one of the input modules) is always
      regarded as "static", regardless of the value of this option. By
      default, all involved modules are assumed to be static.</fo:block></fo:block></fo:block-container>
 
  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{tidy, boolean()}</fo:inline></fo:block>
 
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the value is <fo:inline font-family="monospace">true</fo:inline>, the resulting code will be
      processed using the <fo:inline font-family="monospace">erl_tidy</fo:inline> module, which removes
      unused functions and does general code cleanup. (See
      <fo:inline font-family="monospace">erl_tidy:module/2</fo:inline> for additional options.) The
      default value is <fo:inline font-family="monospace">true</fo:inline>.</fo:block></fo:block></fo:block-container>
 
  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{verbose, boolean()}</fo:inline></fo:block>
 
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the value is <fo:inline font-family="monospace">true</fo:inline>, progress messages will be
      output while the program is running; the default value is
      <fo:inline font-family="monospace">false</fo:inline>.</fo:block></fo:block></fo:block-container>
  </fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note: The distinction between "static" and "safe" modules is
  necessary in order not to break the semantics of dynamic code
  replacement. A "static" source module will not be replaced unless the
  target module also is. Now imagine a state machine implemented by
  placing the code for each state in a separate module, and suppose
  that we want to merge this into a single target module, marking all
  source modules as static. At each point in the original code where a
  call is made from one of the modules to another (i.e., the state
  transitions), code replacement is expected to be detected. Then, if
  we in the merged code do not check at these points if the
  <fo:inline font-weight="bold">target</fo:inline> module (the result of the merge) has been replaced,  
we can not be sure in general that we will be able to do code  
replacement of the merged state machine - it could run forever  
without detecting the code change. Therefore, all such calls must  
remain remote-calls (detecting code changes), but may call the target  
module directly.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If we are sure that this kind of situation cannot ensue, we may
  specify the involved modules as "safe", and all calls between them
  will become local. Note that if the target module itself is specified
  as safe, "remote" calls to itself will be turned into local calls.
  This would destroy the code replacement properties of e.g. a typical
  server loop.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">create_stubs/2</fo:inline>, <fo:inline font-style="italic">rename/3</fo:inline>, <fo:inline font-style="italic">erl_tidy:module/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7517200">parse_transform(Forms::[syntaxTree()], Options::[term()]) -&gt; [syntaxTree()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allows Igor to work as a component of the Erlang compiler.
  Including the term <fo:inline font-family="monospace">{parse_transform, igor}</fo:inline> in the
  compile options when compiling an Erlang module (cf.
  <fo:inline font-family="monospace">compile:file/2</fo:inline>), will call upon Igor to process the  
source code, allowing automatic inclusion of other source files. No  
files are created or overwritten when this function is used.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Igor will look for terms <fo:inline font-family="monospace">{igor, List}</fo:inline> in the compile
  options, where <fo:inline font-family="monospace">List</fo:inline> is a list of Igor-specific options,
  as follows:
  </fo:block><fo:block space-after="0.25em" space-before="0.25em">
   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{files, [filename()]}</fo:inline></fo:block>
     <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The value specifies a list of source files to be merged with
     the file being compiled; cf. <fo:inline font-family="monospace">merge_files/4</fo:inline>.</fo:block></fo:block></fo:block-container>
  </fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See <fo:inline font-family="monospace">merge_files/4</fo:inline> for further options. Note, however,
  that some options are preset by this function and cannot be
  overridden by the user; in particular, all cosmetic features are
  turned off, for efficiency. Preprocessing is turned on.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">compile:file/2</fo:inline>, <fo:inline font-style="italic">merge_files/4</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7529024">rename(Files::[filename()], Renamings) -&gt; [string()]</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">rename(Files, Renamings, [])</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7533008">rename(Files::[filename()], Renamings, Options::[term()]) -&gt; [string()]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Renamings = [{atom(), atom()}]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Renames a set of possibly interdependent source code modules.
  <fo:inline font-family="monospace">Files</fo:inline> is a list of file names of source modules to be
  processed. <fo:inline font-family="monospace">Renamings</fo:inline> is a list of pairs of <fo:inline font-weight="bold">module
  names</fo:inline>, representing a mapping from old names to new. The  
returned value is the list of output file names.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each file in the list will be read and processed separately. For
  every file, each reference to some module M, such that there is an
  entry <fo:inline font-family="monospace">{&lt;em&gt;M&lt;/em&gt;, &lt;em&gt;M1&lt;/em&gt;}</fo:inline> in
  <fo:inline font-family="monospace">Renamings</fo:inline>, will be changed to the corresponding M1.
  Furthermore, if a file F defines module M, and there is an entry
  <fo:inline font-family="monospace">{&lt;em&gt;M&lt;/em&gt;, &lt;em&gt;M1&lt;/em&gt;}</fo:inline> in <fo:inline font-family="monospace">Renamings</fo:inline>, a
  new file named <fo:inline font-family="monospace">&lt;em&gt;M1&lt;/em&gt;.erl</fo:inline> will be created in the
  same directory as F, containing the source code for module M, renamed
  to M1. If M does not have an entry in <fo:inline font-family="monospace">Renamings</fo:inline>, the
  module is not renamed, only updated, and the resulting source code is
  written to <fo:inline font-family="monospace">&lt;em&gt;M&lt;/em&gt;.erl</fo:inline> (typically, this overwrites
  the original file). The <fo:inline font-family="monospace">suffix</fo:inline> option (see below) can be
  used to change the default "<fo:inline font-family="monospace">.erl</fo:inline>" suffix for the  
generated files.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stub modules will automatically be created (see the
  <fo:inline font-family="monospace">stubs</fo:inline> and <fo:inline font-family="monospace">stub_dir</fo:inline> options below) for each  
module that is renamed. These can be used to redirect any calls still  
using the old module names. The stub files are created in the same  
directory as the source file (typically overwriting the original  
file).</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Options:
  </fo:block><fo:block space-after="0.25em" space-before="0.25em">
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{backup_suffix, string()}</fo:inline></fo:block>
    <fo:block-container><fo:block start-indent="2em"/></fo:block-container><fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{backups, boolean()}</fo:inline></fo:block>
    <fo:block-container><fo:block start-indent="2em"/></fo:block-container><fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{printer, Function}</fo:inline></fo:block>
    <fo:block-container><fo:block start-indent="2em"/></fo:block-container><fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{stubs, boolean()}</fo:inline></fo:block>
    <fo:block-container><fo:block start-indent="2em"/></fo:block-container><fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{suffix, string()}</fo:inline></fo:block>
  <fo:block-container><fo:block start-indent="2em"/></fo:block-container></fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  See <fo:inline font-family="monospace">merge/3</fo:inline> for details on these options.</fo:block>
 
  <fo:block space-after="0.25em" space-before="0.25em">
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{comments, boolean()}</fo:inline></fo:block>
    <fo:block-container><fo:block start-indent="2em"/></fo:block-container><fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{preprocess, boolean()}</fo:inline></fo:block>
  <fo:block-container><fo:block start-indent="2em"/></fo:block-container></fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  See <fo:inline font-family="monospace">merge_files/4</fo:inline> for details on these options.</fo:block>
 
  <fo:block space-after="0.25em" space-before="0.25em">
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{no_banner, boolean()}</fo:inline></fo:block>
  <fo:block-container><fo:block start-indent="2em"/></fo:block-container></fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  For the <fo:inline font-family="monospace">rename</fo:inline> function, this option is
  <fo:inline font-family="monospace">true</fo:inline> by default. See <fo:inline font-family="monospace">merge_sources/3</fo:inline> for  
details.</fo:block>
 
  <fo:block space-after="0.25em" space-before="0.25em">
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{tidy, boolean()}</fo:inline></fo:block>
  <fo:block-container><fo:block start-indent="2em"/></fo:block-container></fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  For the <fo:inline font-family="monospace">rename</fo:inline> function, this option is
  <fo:inline font-family="monospace">false</fo:inline> by default. See <fo:inline font-family="monospace">merge_sources/3</fo:inline> for  
details.</fo:block>
 
  <fo:block space-after="0.25em" space-before="0.25em">
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{no_headers, boolean()}</fo:inline></fo:block>
    <fo:block-container><fo:block start-indent="2em"/></fo:block-container><fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{stub_dir, filename()}</fo:inline></fo:block>
  <fo:block-container><fo:block start-indent="2em"/></fo:block-container></fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  These options are preset by the <fo:inline font-family="monospace">rename</fo:inline> function and  
cannot be overridden by the user.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See <fo:inline font-family="monospace">merge_sources/3</fo:inline> for further options.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">merge/3</fo:inline>, <fo:inline font-style="italic">merge_files/4</fo:inline>, <fo:inline font-style="italic">merge_sources/3</fo:inline>.</fo:block>
</fo:block>



Richard Carlsson
carlsson.richard@gmail.com<fo:block page-break-before="always" id="idp7570384" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">merl</fo:marker>merl</fo:block>Erlang module</fo:block>
<fo:block/>
merl
<fo:block/>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Metaprogramming in Erlang.
  Merl is a more user friendly interface to the <fo:inline font-family="monospace">erl_syntax</fo:inline> module, making
  it easy both to build new ASTs from scratch and to
  match and decompose existing ASTs. For details that are outside the scope
  of Merl itself, please see the documentation of <fo:inline font-style="italic">erl_syntax</fo:inline>.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Quick start</fo:inline></fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To enable the full power of Merl, your module needs to include the Merl
  header file:
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">     -include_lib("syntax_tools/include/merl.hrl").</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Then, you can use the <fo:inline font-family="monospace">?Q(Text)</fo:inline> macros in your code to create ASTs or match
  on existing ASTs. For example:
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">     Tuple = ?Q("{foo, 42}"),
     ?Q("{foo, _@Number}") = Tuple,
     Call = ?Q("foo:bar(_@Number)")</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calling <fo:inline font-family="monospace">merl:print(Call)</fo:inline> will then print the following code:
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">     foo:bar(42)</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">?Q</fo:inline> macros turn the quoted code fragments into ASTs, and lifts
  metavariables such as <fo:inline font-family="monospace">_@Tuple</fo:inline> and <fo:inline font-family="monospace">_@Number</fo:inline> to the level of your Erlang
  code, so you can use the corresponding Erlang variables <fo:inline font-family="monospace">Tuple</fo:inline> and <fo:inline font-family="monospace">Number</fo:inline>  
directly. This is the most straightforward way to use Merl, and in many  
cases it's all you need.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">You can even write case switches using <fo:inline font-family="monospace">?Q</fo:inline> macros as patterns. For example:
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">     case AST of
         ?Q("{foo, _@Foo}") -&gt; handle(Foo);
         ?Q("{bar, _@Bar}") when erl_syntax:is_integer(Bar) -&gt; handle(Bar);
         _ -&gt; handle_default()
     end</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These case switches only allow <fo:inline font-family="monospace">?Q(...)</fo:inline> or <fo:inline font-family="monospace">_</fo:inline> as clause patterns, and the  
guards may contain any expressions, not just Erlang guard expressions.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the macro <fo:inline font-family="monospace">MERL_NO_TRANSFORM</fo:inline> is defined before the <fo:inline font-family="monospace">merl.hrl</fo:inline> header
  file is included, the parse transform used by Merl will be disabled, and in
  that case, the match expressions <fo:inline font-family="monospace">?Q(...) = ...</fo:inline>, case switches using
  <fo:inline font-family="monospace">?Q(...)</fo:inline> patterns, and automatic metavariables like <fo:inline font-family="monospace">_@Tuple</fo:inline> cannot be
  used in your code, but the Merl macros and functions still work. To do
  metavariable substitution, you need to use the <fo:inline font-family="monospace">?Q(Text, Map)</fo:inline> macro, e.g.:
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">     Tuple = ?Q("{foo, _@bar, _@baz}", [{bar, Bar}, {baz,Baz}])</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The text given to a <fo:inline font-family="monospace">?Q(Text)</fo:inline> macro can be either a single string, or a
  list of strings. The latter is useful when you need to split a long
  expression over multiple lines, e.g.:
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">     ?Q(["case _@Expr of",
         "  {foo, X} -&gt; f(X);",
         "  {bar, X} -&gt; g(X)",
         "  _ -&gt; h(X)"
         "end"])</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">  
If there is a syntax error somewhere in the text (like the missing semicolon  
in the second clause above) this allows Merl to generate an error message  
pointing to the exact line in your source code. (Just remember to  
comma-separate the strings in the list, otherwise Erlang will concatenate  
the string fragments as if they were a single string.)</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Metavariable syntax</fo:inline></fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are several ways to write a metavariable in your quoted code:
  </fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Atoms starting with <fo:inline font-family="monospace">@</fo:inline>, for example <fo:inline font-family="monospace">'@foo'</fo:inline> or <fo:inline font-family="monospace">'@Foo'</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Variables starting with <fo:inline font-family="monospace">_@</fo:inline>, for example <fo:inline font-family="monospace">_@bar</fo:inline> or <fo:inline font-family="monospace">_@Bar</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Strings starting with <fo:inline font-family="monospace">"'@</fo:inline>, for example <fo:inline font-family="monospace">"'@File"</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Integers starting with 909, for example <fo:inline font-family="monospace">9091</fo:inline> or <fo:inline font-family="monospace">909123</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
  </fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  Following the prefix, one or more <fo:inline font-family="monospace">_</fo:inline> or <fo:inline font-family="monospace">0</fo:inline> characters may be used to
  indicate "lifting" of the variable one or more levels, and after that, a <fo:inline font-family="monospace">@</fo:inline>
  or <fo:inline font-family="monospace">9</fo:inline> character indicates a glob metavariable (matching zero or more
  elements in a sequence) rather than a normal metavariable. For example:
  </fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">'@_foo'</fo:inline> is lifted one level, and <fo:inline font-family="monospace">_@__foo</fo:inline> is lifted two
        levels</fo:block></fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">_@@bar</fo:inline> is a glob variable, and <fo:inline font-family="monospace">_@_@bar</fo:inline> is a lifted glob
        variable</fo:block></fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">90901</fo:inline> is a lifted variable,<fo:inline font-family="monospace">90991</fo:inline> is a glob variable, and <fo:inline font-family="monospace">9090091</fo:inline>
        is a glob variable lifted two levels</fo:block></fo:block></fo:list-item-body></fo:list-item>
  </fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  (Note that the last character in the name is never considered to be a lift
  or glob marker, hence, <fo:inline font-family="monospace">_@__</fo:inline> and <fo:inline font-family="monospace">90900</fo:inline> are only lifted one level, not  
two. Also note that globs only matter for matching; when doing  
substitutions, a non-glob variable can be used to inject a sequence of  
elements, and vice versa.)</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the name after the prefix and any lift and glob markers is <fo:inline font-family="monospace">_</fo:inline> or <fo:inline font-family="monospace">0</fo:inline>,
  the variable is treated as an anonymous catch-all pattern in matches. For
  example, <fo:inline font-family="monospace">_@_</fo:inline>, <fo:inline font-family="monospace">_@@_</fo:inline>, <fo:inline font-family="monospace">_@__</fo:inline>, or even <fo:inline font-family="monospace">_@__@_</fo:inline>.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Finally, if the name without any prefixes or lift/glob markers begins with
  an uppercase character, as in <fo:inline font-family="monospace">_@Foo</fo:inline> or <fo:inline font-family="monospace">_@_@Foo</fo:inline>, it will become a
  variable on the Erlang level, and can be used to easily deconstruct and
  construct syntax trees:
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">     case Input of
         ?Q("{foo, _@Number}") -&gt; ?Q("foo:bar(_@Number)");
         ...</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  We refer to these as "automatic metavariables". If in addition the name ends
  with <fo:inline font-family="monospace">@</fo:inline>, as in <fo:inline font-family="monospace">_@Foo@</fo:inline>, the value of the variable as an Erlang term will
  be automatically converted to the corresponding abstract syntax tree when
  used to construct a larger tree. For example, in:
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">     Bar = {bar, 42},
     Foo = ?Q("{foo, _@Bar@}")</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  (where Bar is just some term, not a syntax tree) the result <fo:inline font-family="monospace">Foo</fo:inline> will be a
  syntax tree representing <fo:inline font-family="monospace">{foo, {bar, 42}}</fo:inline>. This avoids the need for
  temporary variables in order to inject data, as in
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">     TmpBar = erl_syntax:abstract(Bar),
     Foo = ?Q("{foo, _@TmpBar}")</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the context requires an integer rather than a variable, an atom, or a
  string, you cannot use the uppercase convention to mark an automatic
  metavariable. Instead, if the integer (without the <fo:inline font-family="monospace">909</fo:inline>-prefix and
  lift/glob markers) ends in a <fo:inline font-family="monospace">9</fo:inline>, the integer will become an Erlang-level
  variable prefixed with <fo:inline font-family="monospace">Q</fo:inline>, and if it ends with <fo:inline font-family="monospace">99</fo:inline> it will also be
  automatically abstracted. For example, the following will increment the
  arity of the exported function f:
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">     case Form of
         ?Q("-export([f/90919]).") -&gt;
             Q2 = erl_syntax:concrete(Q1) + 1,
             ?Q("-export([f/909299]).");
         ...</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">When to use the various forms of metavariables</fo:inline></fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Merl can only parse a fragment of text if it follows the basic syntactical
  rules of Erlang. In most places, a normal Erlang variable can be used as
  metavariable, for example:
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">     ?Q("f(_@Arg)") = Expr</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  but if you want to match on something like the name of a function, you have
  to use an atom as metavariable:
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">     ?Q("'@Name'() -&gt; _@@_." = Function</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  (note the anonymous glob variable <fo:inline font-family="monospace">_@@_</fo:inline> to ignore the function body).</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In some contexts, only a string or an integer is allowed. For example, the
  directive <fo:inline font-family="monospace">-file(Name, Line)</fo:inline> requires that <fo:inline font-family="monospace">Name</fo:inline> is a string literal and
  <fo:inline font-family="monospace">Line</fo:inline> an integer literal:</fo:block>
 
  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">     ?Q("-file(\"'@File\", 9090).") = ?Q("-file(\"foo.erl\", 42).")).</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  This will extract the string literal <fo:inline font-family="monospace">"foo.erl"</fo:inline> into the variable <fo:inline font-family="monospace">Foo</fo:inline>.
  Note the use of the anonymous variable <fo:inline font-family="monospace">9090</fo:inline> to ignore the line number. To  
match and also bind a metavariable that must be an integer literal, we can  
use the convention of ending the integer with a 9, turning it into a  
Q-prefixed variable on the Erlang level (see the previous section).</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Globs</fo:inline></fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Whenever you want to match out a number of elements in a sequence (zero or
  more) rather than a fixed set of elements, you need to use a glob. For
  example:
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">     ?Q("{_@@Elements}") = ?Q({a, b, c})</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  will bind Elements to the list of individual syntax trees representing the
  atoms <fo:inline font-family="monospace">a</fo:inline>, <fo:inline font-family="monospace">b</fo:inline>, and <fo:inline font-family="monospace">c</fo:inline>. This can also be used with static prefix and suffix
  elements in the sequence. For example:
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">     ?Q("{a, b, _@@Elements}") = ?Q({a, b, c, d})</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  will bind Elements to the list of the <fo:inline font-family="monospace">c</fo:inline> and <fo:inline font-family="monospace">d</fo:inline> subtrees, and
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">     ?Q("{_@@Elements, c, d}") = ?Q({a, b, c, d})</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  will bind Elements to the list of the <fo:inline font-family="monospace">a</fo:inline> and <fo:inline font-family="monospace">b</fo:inline> subtrees. You can even use
  plain metavariables in the prefix or suffix:
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">     ?Q("{_@First, _@@Rest}") = ?Q({a, b, c})</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  or
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">     ?Q("{_@@_, _@Last}") = ?Q({a, b, c})</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">  
(ignoring all but the last element). You cannot however have two globs as  
part of the same sequence.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Lifted metavariables</fo:inline></fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In some cases, the Erlang syntax rules make it impossible to place a
  metavariable directly where you would like it. For example, you cannot
  write:
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">     ?Q("-export([_@@Name]).")</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  to match out all name/arity pairs in the export list, or to insert a list of
  exports in a declaration, because the Erlang parser only allows elements on
  the form <fo:inline font-family="monospace">A/I</fo:inline> (where <fo:inline font-family="monospace">A</fo:inline> is an atom and <fo:inline font-family="monospace">I</fo:inline> an integer) in the export list.
  A variable like the above is not allowed, but neither is a single atom or
  integer, so <fo:inline font-family="monospace">'@@Name'</fo:inline> or <fo:inline font-family="monospace">909919</fo:inline> wouldn't work either.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">What you have to do in such cases is to write your metavariable in a
  syntactically valid position, and use lifting markers to denote where it
  should really apply, as in:
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">     ?Q("-export(['@_@Name'/0]).")</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  This causes the variable to be lifted (after parsing) to the next higher
  level in the syntax tree, replacing that entire subtree. In this case, the
  <fo:inline font-family="monospace">'@_@Name'/0</fo:inline> will be replaced with <fo:inline font-family="monospace">'@@Name'</fo:inline>, and the <fo:inline font-family="monospace">/0</fo:inline>  
part was just used as dummy notation and will be discarded.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">You may even need to apply lifting more than once. To match the entire
  export list as a single syntax tree, you can write:
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">     ?Q("-export(['@__Name'/0]).")</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  using two underscores, but with no glob marker this time. This will make the
  entire <fo:inline font-family="monospace">['@__Name'/0]</fo:inline> part be replaced with <fo:inline font-family="monospace">'@Name'</fo:inline>.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sometimes, the tree structure of a code fragment isn't very obvious, and
  parts of the structure may be invisible when printed as source code. For
  instance, a simple function definition like the following:
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">     zero() -&gt; 0.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  consists of the name (the atom <fo:inline font-family="monospace">zero</fo:inline>), and a list of clauses containing the
  single clause <fo:inline font-family="monospace">() -&gt; 0</fo:inline>. The clause consists of an argument list (empty), a
  guard (empty), and a body (which is always a list of expressions) containing
  the single expression <fo:inline font-family="monospace">0</fo:inline>. This means that to match out the name and the
  list of clauses of any function, you'll need to use a pattern like
  <fo:inline font-family="monospace">?Q("'@Name'() -&gt; _@_@Body.")</fo:inline>, using a dummy clause whose body is a glob  
lifted one level.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To visualize the structure of a syntax tree, you can use the function
  <fo:inline font-family="monospace">merl:show(T)</fo:inline>, which prints a summary. For example, entering
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">     merl:show(merl:quote("inc(X, Y) when Y &gt; 0 -&gt; X + Y."))</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  in the Erlang shell will print the following (where the <fo:inline font-family="monospace">+</fo:inline> signs separate
  groups of subtrees on the same level):
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">     function: inc(X, Y) when ... -&gt; X + Y.
       atom: inc
       +
       clause: (X, Y) when ... -&gt; X + Y
         variable: X
         variable: Y
         +
         disjunction: Y &gt; 0
           conjunction: Y &gt; 0
             infix_expr: Y &gt; 0
               variable: Y
               +
               operator: &gt;
               +
               integer: 0
         +
         infix_expr: X + Y
           variable: X
           +
           operator: +
           +
           variable: Y</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This shows another important non-obvious case: a clause guard, even if it's
  as simple as <fo:inline font-family="monospace">Y &gt; 0</fo:inline>, always consists of a single disjunction of one or more
  conjunctions of tests, much like a tuple of tuples. Thus:
  </fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">"when _@Guard -&gt;"</fo:inline> will only match a guard with exactly one
      test</fo:block></fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">"when _@@Guard -&gt;"</fo:inline> will match a guard with one or more
      comma-separated tests (but no semicolons), binding <fo:inline font-family="monospace">Guard</fo:inline> to the list
      of tests</fo:block></fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">"when _@_Guard -&gt;"</fo:inline> will match just like the previous pattern, but
      binds <fo:inline font-family="monospace">Guard</fo:inline> to the conjunction subtree</fo:block></fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">"when _@_@Guard -&gt;"</fo:inline> will match an arbitrary nonempty guard,
      binding <fo:inline font-family="monospace">Guard</fo:inline> to the list of conjunction subtrees</fo:block></fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">"when _@__Guard -&gt;"</fo:inline> will match like the previous pattern, but
      binds <fo:inline font-family="monospace">Guard</fo:inline> to the whole disjunction subtree</fo:block></fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">and finally, <fo:inline font-family="monospace">"when _@__@Guard -&gt;"</fo:inline> will match any clause,
      binding <fo:inline font-family="monospace">Guard</fo:inline> to <fo:inline font-family="monospace">[]</fo:inline> if the guard is empty and to <fo:inline font-family="monospace">[Disjunction]</fo:inline>
      otherwise</fo:block></fo:block></fo:list-item-body></fo:list-item>
  </fo:list-block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Thus, the following pattern matches all possible clauses:
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">     "(_@Args) when _@__@Guard -&gt; _@Body"</fo:block>
<fo:block id="idp7660992" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">DATA TYPES</fo:block>

<fo:block space-after="0.25em" space-before="0.25em">
<fo:block keep-with-next.within-page="always">default_action() = () -&gt; any()</fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/> </fo:block></fo:block-container>
<fo:block keep-with-next.within-page="always">env() = [{Key::<fo:inline font-style="italic">id()</fo:inline>, <fo:inline font-style="italic">pattern_or_patterns()</fo:inline>}]</fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/> </fo:block></fo:block-container>
<fo:block keep-with-next.within-page="always">guard_test() = (<fo:inline font-style="italic">env()</fo:inline>) -&gt; boolean()</fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/> </fo:block></fo:block-container>
<fo:block keep-with-next.within-page="always">guarded_action() = <fo:inline font-style="italic">switch_action()</fo:inline> | {<fo:inline font-style="italic">guard_test()</fo:inline>, <fo:inline font-style="italic">switch_action()</fo:inline>}</fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/> </fo:block></fo:block-container>
<fo:block keep-with-next.within-page="always">guarded_actions() = <fo:inline font-style="italic">guarded_action()</fo:inline> | [<fo:inline font-style="italic">guarded_action()</fo:inline>]</fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/> </fo:block></fo:block-container>
<fo:block keep-with-next.within-page="always">id() = atom() | integer()</fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/> </fo:block></fo:block-container>
<fo:block keep-with-next.within-page="always">location() = <fo:inline font-style="italic">erl_anno:location()</fo:inline></fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/> </fo:block></fo:block-container>
<fo:block keep-with-next.within-page="always">pattern() = <fo:inline font-style="italic">tree()</fo:inline> | <fo:inline font-style="italic">template()</fo:inline></fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/> </fo:block></fo:block-container>
<fo:block keep-with-next.within-page="always">pattern_or_patterns() = <fo:inline font-style="italic">pattern()</fo:inline> | [<fo:inline font-style="italic">pattern()</fo:inline>]</fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/> </fo:block></fo:block-container>
<fo:block keep-with-next.within-page="always">switch_action() = (<fo:inline font-style="italic">env()</fo:inline>) -&gt; any()</fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/> </fo:block></fo:block-container>
<fo:block keep-with-next.within-page="always">switch_clause() = {<fo:inline font-style="italic">pattern_or_patterns()</fo:inline>, <fo:inline font-style="italic">guarded_actions()</fo:inline>} | {<fo:inline font-style="italic">pattern_or_patterns()</fo:inline>, <fo:inline font-style="italic">guard_test()</fo:inline>, <fo:inline font-style="italic">switch_action()</fo:inline>} | <fo:inline font-style="italic">default_action()</fo:inline></fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/> </fo:block></fo:block-container>
<fo:block keep-with-next.within-page="always">template() = <fo:inline font-style="italic">tree()</fo:inline> | {<fo:inline font-style="italic">id()</fo:inline>} | {'*', <fo:inline font-style="italic">id()</fo:inline>} | {template, atom(), term(), [[<fo:inline font-style="italic">template()</fo:inline>]]}</fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/> </fo:block></fo:block-container>
<fo:block keep-with-next.within-page="always">template_or_templates() = <fo:inline font-style="italic">template()</fo:inline> | [<fo:inline font-style="italic">template()</fo:inline>]</fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/> </fo:block></fo:block-container>
<fo:block keep-with-next.within-page="always">text() = string() | binary() | [string()] | [binary()]</fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/> </fo:block></fo:block-container>
<fo:block keep-with-next.within-page="always">tree() = <fo:inline font-style="italic">erl_syntax:syntaxTree()</fo:inline></fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/> </fo:block></fo:block-container>
<fo:block keep-with-next.within-page="always">tree_or_trees() = <fo:inline font-style="italic">tree()</fo:inline> | [<fo:inline font-style="italic">tree()</fo:inline>]</fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/> </fo:block></fo:block-container>
</fo:block>
<fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7706096">alpha(Trees::pattern_or_patterns(), Env::[{id(), id()}]) -&gt; template_or_templates()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Alpha converts a pattern (renames variables). Similar to tsubst/1,
  but only renames variables (including globs).</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">tsubst/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7712912">compile(Code) -&gt; term()
</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">compile(Code, [])</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7716144">compile(Code, Options) -&gt; term()
</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Compile a syntax tree or list of syntax trees representing a module
  into a binary BEAM object.</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">compile/1</fo:inline>, <fo:inline font-style="italic">compile_and_load/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7720976">compile_and_load(Code) -&gt; term()
</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">compile_and_load(Code, [])</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7724240">compile_and_load(Code, Options) -&gt; term()
</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Compile a syntax tree or list of syntax trees representing a module
  and load the resulting module into memory.</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">compile/2</fo:inline>, <fo:inline font-style="italic">compile_and_load/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7729120">match(Patterns::pattern_or_patterns(), Trees::tree_or_trees()) -&gt; {ok, env()} | error</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Match a pattern against a syntax tree (or patterns against syntax
  trees) returning an environment mapping variable names to subtrees; the
  environment is always sorted on keys. Note that multiple occurrences of
  metavariables in the pattern is not allowed, but is not checked.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">switch/2</fo:inline>, <fo:inline font-style="italic">template/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7736384">meta_template(Templates::template_or_templates()) -&gt; tree_or_trees()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Turn a template into a syntax tree representing the template.
  Meta-variables in the template are turned into normal Erlang variables if
  their names (after the metavariable prefix characters) begin with an
  uppercase character. E.g., <fo:inline font-family="monospace">_@Foo</fo:inline> in the template becomes the variable
  <fo:inline font-family="monospace">Foo</fo:inline> in the meta-template. Furthermore, variables ending with <fo:inline font-family="monospace">@</fo:inline> are
  automatically wrapped in a call to merl:term/1, so e.g. <fo:inline font-family="monospace">_@Foo@ in the
  template becomes `merl:term(Foo)</fo:inline> in the meta-template.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7742400">print(Ts) -&gt; term()
</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Pretty-print a syntax tree or template to the standard output. This
  is a utility function for development and debugging.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7745040">qquote(Text::text(), Env::env()) -&gt; tree_or_trees()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parse text and substitute meta-variables.
 </fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7749584">qquote(StartPos::location(), Text::text(), Env::env()) -&gt; tree_or_trees()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parse text and substitute meta-variables. Takes an initial scanner  
starting position as first argument.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The macro <fo:inline font-family="monospace">?Q(Text, Env)</fo:inline> expands to <fo:inline font-family="monospace">merl:qquote(?LINE, Text, Env)</fo:inline>.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">quote/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7757728">quote(Text::text()) -&gt; tree_or_trees()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parse text.
 </fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7761488">quote(StartPos::location(), Text::text()) -&gt; tree_or_trees()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parse text. Takes an initial scanner starting position as first  
argument.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The macro <fo:inline font-family="monospace">?Q(Text)</fo:inline> expands to <fo:inline font-family="monospace">merl:quote(?LINE, Text, Env)</fo:inline>.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">quote/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7768848">show(Ts) -&gt; term()
</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Print the structure of a syntax tree or template to the standard
  output. This is a utility function for development and debugging.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7771504">subst(Trees::pattern_or_patterns(), Env::env()) -&gt; tree_or_trees()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Substitute metavariables in a pattern or list of patterns, yielding
  a syntax tree or list of trees as result. Both for normal metavariables
  and glob metavariables, the substituted value may be a single element or
  a list of elements. For example, if a list representing <fo:inline font-family="monospace">1, 2, 3</fo:inline> is
  substituted for <fo:inline font-family="monospace">var</fo:inline> in either of <fo:inline font-family="monospace">[foo, _@var, bar]</fo:inline> or <fo:inline font-family="monospace">[foo, _@var,
  bar]</fo:inline>, the result represents <fo:inline font-family="monospace">[foo, 1, 2, 3, bar]</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7778608">switch(Trees::tree_or_trees(), Cs::[switch_clause()]) -&gt; any()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Match against one or more clauses with patterns and optional guards.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that clauses following a default action will be ignored.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">match/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7784576">template(Trees::pattern_or_patterns()) -&gt; template_or_templates()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Turn a syntax tree or list of trees into a template or templates.
  Templates can be instantiated or matched against, and reverted back to
  normal syntax trees using <fo:inline font-style="italic">tree/1</fo:inline>. If the input is already a
  template, it is not modified further.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">match/2</fo:inline>, <fo:inline font-style="italic">subst/2</fo:inline>, <fo:inline font-style="italic">tree/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7792224">template_vars(Template::template_or_templates()) -&gt; [id()]</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Return an ordered list of the metavariables in the template.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7796272">term(Term::term()) -&gt; tree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Create a syntax tree for a constant term.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7799376">tree(Templates::template_or_templates()) -&gt; tree_or_trees()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Revert a template to a normal syntax tree. Any remaining
  metavariables are turned into <fo:inline font-family="monospace">@</fo:inline>-prefixed atoms or <fo:inline font-family="monospace">909</fo:inline>-prefixed
  integers.</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">template/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7805616">tsubst(Trees::pattern_or_patterns(), Env::env()) -&gt; template_or_templates()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Like subst/2, but does not convert the result from a template back
  to a tree. Useful if you want to do multiple separate substitutions.</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">subst/2</fo:inline>, <fo:inline font-style="italic">tree/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7812496">var(Name::atom()) -&gt; tree()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Create a variable.</fo:block>
</fo:block>



Richard Carlsson
carlsson.richard@gmail.com<fo:block page-break-before="always" id="idp7821056" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">merl_transform</fo:marker>merl_transform</fo:block>Erlang module</fo:block>
<fo:block/>
merl_transform
<fo:block/>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parse transform for merl. Enables the use of automatic metavariables
  and using quasi-quotes in matches and case switches. Also optimizes calls
  to functions in <fo:inline font-family="monospace">merl</fo:inline> by partially evaluating them, turning strings to  
templates, etc., at compile-time.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Using <fo:inline font-family="monospace">-include_lib("syntax_tools/include/merl.hrl").</fo:inline> enables this
  transform, unless the macro <fo:inline font-family="monospace">MERL_NO_TRANSFORM</fo:inline> is defined first.</fo:block>
<fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7825344">parse_transform(Forms, Options) -&gt; term()
</fo:block></fo:block>
 </fo:block>



Richard Carlsson
carlsson.richard@gmail.com<fo:block page-break-before="always" id="idp7832928" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">prettypr</fo:marker>prettypr</fo:block>Erlang module</fo:block>
<fo:block/>
prettypr
<fo:block/>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A generic pretty printer library. This module uses a  
strict-style context passing implementation of John Hughes algorithm,  
described in "The design of a Pretty-printing Library". The  
paragraph-style formatting, empty documents, floating documents, and  
null strings are my own additions to the algorithm.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To get started, you should read about the <fo:inline font-style="italic">document()</fo:inline> data
  type; the main constructor functions: <fo:inline font-style="italic">text/1</fo:inline>, <fo:inline font-style="italic">above/2</fo:inline>, <fo:inline font-style="italic">beside/2</fo:inline>, <fo:inline font-style="italic">nest/2</fo:inline>, <fo:inline font-style="italic">sep/1</fo:inline>, and <fo:inline font-style="italic">par/2</fo:inline>; and the main layout function <fo:inline font-style="italic">format/3</fo:inline>.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you simply want to format a paragraph of plain text, you probably
  want to use the <fo:inline font-style="italic">text_par/2</fo:inline> function, as in the following
  example:
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">  prettypr:format(prettypr:text_par("Lorem ipsum dolor sit amet"), 20)</fo:block>
<fo:block id="idp7842880" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">DATA TYPES</fo:block>

<fo:block space-after="0.25em" space-before="0.25em">
<fo:block keep-with-next.within-page="always">document()</fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An abstract character-based "document" representing  
a number of possible layouts, which can be processed to produce a  
single concrete layout. A concrete layout can then be rendered as a  
sequence of characters containing linebreaks, which can be passed to  
a printer or terminal that uses a fixed-width font.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For example, a document <fo:inline font-family="monospace">sep([text("foo"), text("bar")])</fo:inline>
  represents the two layouts
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">     foo bar</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  and
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">     foo
     bar</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Which layout is chosen depends on the available horizontal space.
  When processing a document, the main parameters are the <fo:inline font-weight="bold">paper
  width</fo:inline> and the <fo:inline font-weight="bold">line width</fo:inline> (also known as the "ribbon  
width"). In the resulting layout, no text should be printed beyond  
the paper width (which by default is 80 characters) as long as it can  
be avoided, and each single line of text (its indentation not  
counted, hence "ribbon") should preferably be no wider than the  
specified line width (which by default is 65).</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Documents can be joined into a single new document using the
  constructor functions of this module. Note that the new document
  often represents a larger number of possible layouts than just the
  sum of the components.</fo:block>
</fo:block></fo:block-container>
</fo:block>
<fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7851184">above(D1::document(), D2::document()) -&gt; document()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Concatenates documents vertically. Returns a document
  representing the concatenation of the documents <fo:inline font-family="monospace">D1</fo:inline> and <fo:inline font-family="monospace">D2</fo:inline> such
  that the first line of <fo:inline font-family="monospace">D2</fo:inline> follows directly below the last line of
  <fo:inline font-family="monospace">D1</fo:inline>, and the first character of <fo:inline font-family="monospace">D2</fo:inline> is in the same horizontal
  column as the first character of <fo:inline font-family="monospace">D1</fo:inline>, in all possible layouts.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Examples:
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">     ab  cd  =&gt;  ab
                 cd
 
                    abc
     abc   fgh  =&gt;   de
      de    ij      fgh
                     ij</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7859456">beside(D1::document(), D2::document()) -&gt; document()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Concatenates documents horizontally. Returns a document
  representing the concatenation of the documents <fo:inline font-family="monospace">D1</fo:inline> and <fo:inline font-family="monospace">D2</fo:inline> such
  that the last character of <fo:inline font-family="monospace">D1</fo:inline> is horizontally adjacent to the first
  character of <fo:inline font-family="monospace">D2</fo:inline>, in all possible layouts. (Note: any indentation of
  <fo:inline font-family="monospace">D2</fo:inline> is lost.)</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Examples:
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">     ab  cd  =&gt;  abcd
 
     ab  ef      ab
     cd  gh  =&gt;  cdef
                   gh</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7867168">best(D::document(), PaperWidth::integer(), LineWidth::integer()) -&gt; empty | document()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Selects a "best" layout for a document, creating a corresponding
  fixed-layout document. If no layout could be produced, the atom
  <fo:inline font-family="monospace">empty</fo:inline> is returned instead. For details about <fo:inline font-family="monospace">PaperWidth</fo:inline> and
  <fo:inline font-family="monospace">LineWidth</fo:inline>, see <fo:inline font-style="italic">format/3</fo:inline>. The function is idempotent.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">One possible use of this function is to compute a fixed layout for a
  document, which can then be included as part of a larger document.
  For example:
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">     above(text("Example:"), nest(8, best(D, W - 12, L - 6)))</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  will format <fo:inline font-family="monospace">D</fo:inline> as a displayed-text example indented by 8, whose
  right margin is indented by 4 relative to the paper width <fo:inline font-family="monospace">W</fo:inline> of the
  surrounding document, and whose maximum individual line length is
  shorter by 6 than the line length <fo:inline font-family="monospace">L</fo:inline> of the surrounding document.</fo:block>
 
 <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is used by the <fo:inline font-style="italic">format/3</fo:inline> function to prepare a
  document before being laid out as text.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7877280">break(D::document()) -&gt; document()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Forces a line break at the end of the given document. This is a
  utility function; see <fo:inline font-style="italic">empty/0</fo:inline> for details.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7881872">empty() -&gt; document()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Yields the empty document, which has neither height nor width.
  (<fo:inline font-family="monospace">empty</fo:inline> is thus different from an empty <fo:inline font-style="italic">text</fo:inline>  
string, which has zero width but height 1.)</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Empty documents are occasionally useful; in particular, they have the
  property that <fo:inline font-family="monospace">above(X, empty())</fo:inline> will force a new line after <fo:inline font-family="monospace">X</fo:inline>
  without leaving an empty line below it; since this is a common idiom,
  the utility function <fo:inline font-style="italic">break/1</fo:inline> will place a given document in
  such a context.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">text/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7889936">floating(D::document()) -&gt; document()</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">floating(D, 0, 0)</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7894432">floating(D::document(), Hp::integer(), Vp::integer()) -&gt; document()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a "floating" document. The result represents the same
  set of layouts as <fo:inline font-family="monospace">D</fo:inline>; however, a floating document may be moved
  relative to other floating documents immediately beside or above it,
  according to their relative horizontal and vertical priorities. These
  priorities are set with the <fo:inline font-family="monospace">Hp</fo:inline> and <fo:inline font-family="monospace">Vp</fo:inline> parameters; if omitted,  
both default to zero.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notes: Floating documents appear to work well, but are currently less
  general than you might wish, losing effect when embedded in certain
  contexts. It is possible to nest floating-operators (even with
  different priorities), but the effects may be difficult to predict.
  In any case, note that the way the algorithm reorders floating
  documents amounts to a "bubblesort", so don't expect it to be able to
  sort large sequences of floating documents quickly.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7900768">follow(D1::document(), D2::document()) -&gt; document()</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">follow(D1, D2, 0)</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7905984">follow(D1::document(), D2::document(), Offset::integer()) -&gt; document()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Separates two documents by either a single space, or a line
  break and intentation. In other words, one of the layouts
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">     abc def</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  or
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">     abc
      def</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">  
will be generated, using the optional offset in the latter case. This  
is often useful for typesetting programming language constructs.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is a utility function; see <fo:inline font-style="italic">par/2</fo:inline> for further details.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">follow/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7914576">format(D::document()) -&gt; string()</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">format(D, 80)</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7918512">format(D::document(), PaperWidth::integer()) -&gt; string()</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">format(D, PaperWidth, 65)</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7922496">format(D::document(), PaperWidth::integer(), LineWidth::integer()) -&gt; string()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Computes a layout for a document and returns the corresponding
  text. See <fo:inline font-style="italic">document()</fo:inline> for further information. Throws
  <fo:inline font-family="monospace">no_layout</fo:inline> if no layout could be selected.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">PaperWidth</fo:inline> specifies the total width (in character positions) of
  the field for which the text is to be laid out. <fo:inline font-family="monospace">LineWidth</fo:inline> specifies
  the desired maximum width (in number of characters) of the text
  printed on any single line, disregarding leading and trailing white
  space. These parameters need to be properly balanced in order to
  produce good layouts. By default, <fo:inline font-family="monospace">PaperWidth</fo:inline> is 80 and <fo:inline font-family="monospace">LineWidth</fo:inline>
  is 65.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">best/3</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7930928">nest(N::integer(), D::document()) -&gt; document()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Indents a document a number of character positions to the right.
  Note that <fo:inline font-family="monospace">N</fo:inline> may be negative, shifting the text to the left, or
  zero, in which case <fo:inline font-family="monospace">D</fo:inline> is returned unchanged.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7935760">null_text(Characters::string()) -&gt; document()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Similar to <fo:inline font-style="italic">text/1</fo:inline>, but the result is treated as having  
zero width. This is regardless of the actual length of the string.  
Null text is typically used for markup, which is supposed to have no  
effect on the actual layout.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The standard example is when formatting source code as HTML to be
  placed within <fo:inline font-family="monospace">&lt;pre&gt;...&lt;/pre&gt;</fo:inline> markup, and using e.g. <fo:inline font-family="monospace">&lt;i&gt;</fo:inline> and <fo:inline font-family="monospace">&lt;b&gt;</fo:inline>
  to make parts of the source code stand out. In this case, the markup
  does not add to the width of the text when viewed in an HTML browser,
  so the layout engine should simply pretend that the markup has zero
  width.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">empty/0</fo:inline>, <fo:inline font-style="italic">text/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7944032">par(Docs::[document()]) -&gt; document()</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">par(Ds, 0)</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7948528">par(Docs::[document()], Offset::integer()) -&gt; document()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Arranges documents in a paragraph-like layout. Returns a
  document representing all possible left-aligned paragraph-like
  layouts of the (nonempty) sequence <fo:inline font-family="monospace">Docs</fo:inline> of documents. Elements in
  <fo:inline font-family="monospace">Docs</fo:inline> are separated horizontally by a single space character and
  vertically with a single line break. All lines following the first
  (if any) are indented to the same left column, whose indentation is
  specified by the optional <fo:inline font-family="monospace">Offset</fo:inline> parameter relative to the position
  of the first element in <fo:inline font-family="monospace">Docs</fo:inline>. For example, with an offset of -4,  
the following layout can be produced, for a list of documents  
representing the numbers 0 to 15:</fo:block>
 
  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">         0 1 2 3
     4 5 6 7 8 9
     10 11 12 13
     14 15</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  or with an offset of +2:
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">     0 1 2 3 4 5 6
       7 8 9 10 11
       12 13 14 15</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The utility function <fo:inline font-style="italic">text_par/2</fo:inline> can be used to easily
  transform a string of text into a <fo:inline font-family="monospace">par</fo:inline> representation by splitting  
it into words.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that whenever a document in <fo:inline font-family="monospace">Docs</fo:inline> contains a line break, it
  will be placed on a separate line. Thus, neither a layout such as
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">     ab cd
        ef</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  nor
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">     ab
     cd ef</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  will be generated. However, a useful idiom for making the former
  variant possible (when wanted) is <fo:inline font-family="monospace">beside(par([D1, text("")], N),
  D2)</fo:inline> for two documents <fo:inline font-family="monospace">D1</fo:inline> and <fo:inline font-family="monospace">D2</fo:inline>. This will break the line
  between <fo:inline font-family="monospace">D1</fo:inline> and <fo:inline font-family="monospace">D2</fo:inline> if <fo:inline font-family="monospace">D1</fo:inline> contains a line break (or if otherwise
  necessary), and optionally further indent <fo:inline font-family="monospace">D2</fo:inline> by <fo:inline font-family="monospace">N</fo:inline> character
  positions. The utility function <fo:inline font-style="italic">follow/3</fo:inline> creates this context
  for two documents <fo:inline font-family="monospace">D1</fo:inline> and <fo:inline font-family="monospace">D2</fo:inline>, and an optional integer <fo:inline font-family="monospace">N</fo:inline>.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">par/1</fo:inline>, <fo:inline font-style="italic">text_par/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7967744">sep(Docs::[document()]) -&gt; document()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Arranges documents horizontally or vertically, separated by
  whitespace. Returns a document representing two alternative layouts
  of the (nonempty) sequence <fo:inline font-family="monospace">Docs</fo:inline> of documents, such that either all
  elements in <fo:inline font-family="monospace">Docs</fo:inline> are concatenated horizontally, and separated by a  
space character, or all elements are concatenated vertically (without  
extra separation).</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note: If some document in <fo:inline font-family="monospace">Docs</fo:inline> contains a line break, the vertical  
layout will always be selected.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Examples:
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">                                  ab
     ab  cd  ef  =&gt;  ab cd ef  |  cd
                                  ef
 
     ab           ab
     cd  ef  =&gt;   cd
                  ef</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">par/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7976368">text(Characters::string()) -&gt; document()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Yields a document representing a fixed, unbreakable sequence of
  characters. The string should contain only <fo:inline font-weight="bold">printable</fo:inline>
  characters (tabs allowed but not recommended), and <fo:inline font-weight="bold">not</fo:inline>
  newline, line feed, vertical tab, etc. A tab character (<fo:inline font-family="monospace">\t</fo:inline>) is
  interpreted as padding of 1-8 space characters to the next column of
  8 characters <fo:inline font-weight="bold">within the string</fo:inline>.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">empty/0</fo:inline>, <fo:inline font-style="italic">null_text/1</fo:inline>, <fo:inline font-style="italic">text_par/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7984432">text_par(Text::string()) -&gt; document()</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">text_par(Text, 0)</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7988224">text_par(Text::string(), Indentation::integer()) -&gt; document()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Yields a document representing paragraph-formatted plain text.
  The optional <fo:inline font-family="monospace">Indentation</fo:inline> parameter specifies the extra indentation
  of the first line of the paragraph. For example, <fo:inline font-family="monospace">text_par("Lorem
  ipsum dolor sit amet", N)</fo:inline> could represent
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">     Lorem ipsum dolor
     sit amet</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  if <fo:inline font-family="monospace">N</fo:inline> = 0, or
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">       Lorem ipsum
     dolor sit amet</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  if <fo:inline font-family="monospace">N</fo:inline> = 2, or
  </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">     Lorem ipsum dolor
       sit amet</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  if <fo:inline font-family="monospace">N</fo:inline> = -2.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">(The sign of the indentation is thus reversed compared to the <fo:inline font-style="italic">par/2</fo:inline> function, and the behaviour varies slightly depending on the  
sign in order to match the expected layout of a paragraph of text.)</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that this is just a utility function, which does all the work of
  splitting the given string into words separated by whitespace and
  setting up a <fo:inline font-style="italic">par</fo:inline> with the proper indentation,
  containing a list of <fo:inline font-style="italic">text</fo:inline> elements.
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">par/2</fo:inline>, <fo:inline font-style="italic">text/1</fo:inline>, <fo:inline font-style="italic">text_par/1</fo:inline>.</fo:block>
</fo:block>



Richard Carlsson
carlsson.richard@gmail.com</fo:flow>
  </fo:page-sequence>
</fo:root>
