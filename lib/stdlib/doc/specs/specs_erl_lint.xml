<module name="erl_lint">
<type>
  <name>error_description</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-error_description">error_description()</marker> = term()</typehead></typedecl>
</type>
<type>
  <name>error_info</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-error_info">error_info()</marker> = {<seealso marker="erl_anno#type-line">erl_anno:line()</seealso>, module(), <seealso marker="#type-error_description">error_description()</seealso>}</typehead></typedecl>
</type>
<type>
  <name>fa</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-fa">fa()</marker> = {atom(), arity()}</typehead></typedecl>
</type>
<spec>
  <name>bool_option</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>bool_option(On :: atom(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Off :: atom(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Default :: boolean(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Opts :: [<seealso marker="compile#type-option">compile:option()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>boolean()</head></clause>
  </contract>
  <anno>Default</anno>
  <anno>Off</anno>
  <anno>On</anno>
  <anno>Opts</anno>
</spec>
<spec>
  <name>exprs</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>exprs_opt</name>
  <arity>3</arity>
  <contract/>
</spec>
<spec>
  <name>format_error</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>format_error(ErrorDescriptor) -&gt; <seealso marker="io_lib#type-chars">io_lib:chars()</seealso></head>
      <guard>
        <subtype><typename>ErrorDescriptor</typename><string>ErrorDescriptor = <seealso marker="#type-error_description">error_description()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>ErrorDescriptor</anno>
</spec>
<spec>
  <name>is_guard_expr</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>is_guard_test</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_guard_test(Expr) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Expr</typename><string>Expr = <seealso marker="erl_parse#type-abstract_expr">erl_parse:abstract_expr()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Expr</anno>
</spec>
<spec>
  <name>is_guard_test</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>is_guard_test</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>is_guard_test(Expr, Forms, IsOverridden) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Expr</typename><string>Expr = <seealso marker="erl_parse#type-abstract_expr">erl_parse:abstract_expr()</seealso></string></subtype>
        <subtype><typename>Forms</typename><string>Forms = [<seealso marker="erl_parse#type-abstract_form">erl_parse:abstract_form()</seealso> | <seealso marker="erl_parse#type-form_info">erl_parse:form_info()</seealso>]</string></subtype>
        <subtype><typename>IsOverridden</typename><string>IsOverridden = fun((<seealso marker="#type-fa">fa()</seealso>) -&gt; boolean())</string></subtype>
      </guard></clause>
  </contract>
  <anno>Expr</anno>
  <anno>Forms</anno>
  <anno>IsOverridden</anno>
</spec>
<spec>
  <name>is_pattern_expr</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>module</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>module(AbsForms) -&gt; {ok, Warnings} | {error, Errors, Warnings}</head>
      <guard>
        <subtype><typename>AbsForms</typename><string>AbsForms = [<seealso marker="erl_parse#type-abstract_form">erl_parse:abstract_form()</seealso> | <seealso marker="erl_parse#type-form_info">erl_parse:form_info()</seealso>]</string></subtype>
        <subtype><typename>Warnings</typename><string>Warnings = [{<seealso marker="file#type-filename">file:filename()</seealso>, [ErrorInfo]}]</string></subtype>
        <subtype><typename>Errors</typename><string>Errors = [{FileName2 :: <seealso marker="file#type-filename">file:filename()</seealso>, [ErrorInfo]}]</string></subtype>
        <subtype><typename>ErrorInfo</typename><string>ErrorInfo = <seealso marker="#type-error_info">error_info()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>AbsForms</anno>
  <anno>ErrorInfo</anno>
  <anno>Errors</anno>
  <anno>FileName2</anno>
  <anno>Warnings</anno>
</spec>
<spec>
  <name>module</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>module(AbsForms, FileName) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Warnings} | {error, Errors, Warnings}</head>
      <guard>
        <subtype><typename>AbsForms</typename><string>AbsForms = [<seealso marker="erl_parse#type-abstract_form">erl_parse:abstract_form()</seealso> | <seealso marker="erl_parse#type-form_info">erl_parse:form_info()</seealso>]</string></subtype>
        <subtype><typename>FileName</typename><string>FileName = atom() | string()</string></subtype>
        <subtype><typename>Warnings</typename><string>Warnings = [{<seealso marker="file#type-filename">file:filename()</seealso>, [ErrorInfo]}]</string></subtype>
        <subtype><typename>Errors</typename><string>Errors = [{FileName2 :: <seealso marker="file#type-filename">file:filename()</seealso>, [ErrorInfo]}]</string></subtype>
        <subtype><typename>ErrorInfo</typename><string>ErrorInfo = <seealso marker="#type-error_info">error_info()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>AbsForms</anno>
  <anno>ErrorInfo</anno>
  <anno>Errors</anno>
  <anno>FileName</anno>
  <anno>FileName2</anno>
  <anno>Warnings</anno>
</spec>
<spec>
  <name>module</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>module(AbsForms, FileName, CompileOptions) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Warnings} | {error, Errors, Warnings}</head>
      <guard>
        <subtype><typename>AbsForms</typename><string>AbsForms = [<seealso marker="erl_parse#type-abstract_form">erl_parse:abstract_form()</seealso> | <seealso marker="erl_parse#type-form_info">erl_parse:form_info()</seealso>]</string></subtype>
        <subtype><typename>FileName</typename><string>FileName = atom() | string()</string></subtype>
        <subtype><typename>CompileOptions</typename><string>CompileOptions = [<seealso marker="compile#type-option">compile:option()</seealso>]</string></subtype>
        <subtype><typename>Warnings</typename><string>Warnings = [{<seealso marker="file#type-filename">file:filename()</seealso>, [ErrorInfo]}]</string></subtype>
        <subtype><typename>Errors</typename><string>Errors = [{FileName2 :: <seealso marker="file#type-filename">file:filename()</seealso>, [ErrorInfo]}]</string></subtype>
        <subtype><typename>ErrorInfo</typename><string>ErrorInfo = <seealso marker="#type-error_info">error_info()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>AbsForms</anno>
  <anno>CompileOptions</anno>
  <anno>ErrorInfo</anno>
  <anno>Errors</anno>
  <anno>FileName</anno>
  <anno>FileName2</anno>
  <anno>Warnings</anno>
</spec>
<spec>
  <name>used_vars</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>value_option</name>
  <arity>3</arity>
  <contract/>
</spec>
<spec>
  <name>value_option</name>
  <arity>7</arity>
  <contract/>
</spec>
<timestamp>Generated by EDoc, Jul 12 2017, 20:27:15.</timestamp>
</module>