<module name="wx">
<type>
  <name>wx_colour</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-wx_colour">wx_colour()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{R :: byte(), G :: byte(), B :: byte()} | <seealso marker="#type-wx_colour4">wx_colour4()</seealso></typehead></typedecl>
  <anno>B</anno>
  <anno>G</anno>
  <anno>R</anno>
</type>
<type>
  <name>wx_colour4</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-wx_colour4">wx_colour4()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{R :: byte(), G :: byte(), B :: byte(), A :: byte()}</typehead></typedecl>
  <anno>A</anno>
  <anno>B</anno>
  <anno>G</anno>
  <anno>R</anno>
</type>
<type>
  <name>wx_datetime</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-wx_datetime">wx_datetime()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{{Year :: integer(), Month :: integer(), Day :: integer()},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{Hour :: integer(), Minute :: integer(), Second :: integer()}}</typehead></typedecl>
  <anno>Day</anno>
  <anno>Hour</anno>
  <anno>Minute</anno>
  <anno>Month</anno>
  <anno>Second</anno>
  <anno>Year</anno>
</type>
<type>
  <name>wx_enum</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-wx_enum">wx_enum()</marker> = integer()</typehead></typedecl>
</type>
<type>
  <name>wx_env</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-wx_env">wx_env()</marker> = #wx_env{}</typehead></typedecl>
</type>
<type>
  <name>wx_memory</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-wx_memory">wx_memory()</marker> = binary() | #wx_mem{}</typehead></typedecl>
</type>
<type>
  <name>wx_object</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-wx_object">wx_object()</marker> = #wx_ref{}</typehead></typedecl>
</type>
<type>
  <name>wx_wxHtmlLinkInfo</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-wx_wxHtmlLinkInfo">wx_wxHtmlLinkInfo()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#wxHtmlLinkInfo{href = <seealso marker="unicode#type-chardata">unicode:chardata()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>target = <seealso marker="unicode#type-chardata">unicode:chardata()</seealso>}</typehead></typedecl>
</type>
<type>
  <name>wx_wxMouseState</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-wx_wxMouseState">wx_wxMouseState()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#wxMouseState{x = integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>y = integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>leftDown = boolean(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>middleDown = boolean(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>rightDown = boolean(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>controlDown = boolean(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>shiftDown = boolean(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>altDown = boolean(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>metaDown = boolean(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>cmdDown = boolean()}</typehead></typedecl>
</type>
<spec>
  <name>batch</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>batch(Fun :: function()) -&gt; term()</head></clause>
  </contract>
  <anno>Fun</anno>
</spec>
<spec>
  <name>create_memory</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>create_memory(Size :: integer()) -&gt; <seealso marker="#type-wx_memory">wx_memory()</seealso></head></clause>
  </contract>
  <anno>Size</anno>
</spec>
<spec>
  <name>debug</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>debug(Debug :: Level | [Level]) -&gt; ok</head>
      <guard>
        <subtype><typename>Level</typename><string>Level = none | verbose | trace | driver | integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Debug</anno>
  <anno>Level</anno>
</spec>
<spec>
  <name>demo</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>demo() -&gt; ok | {error, atom()}</head></clause>
  </contract>
</spec>
<spec>
  <name>destroy</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>destroy() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>equal</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>equal(Wx_ref :: <seealso marker="#type-wx_object">wx_object()</seealso>, X2 :: <seealso marker="#type-wx_object">wx_object()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>Wx_ref</anno>
  <anno>X2</anno>
</spec>
<spec>
  <name>foldl</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>foldl(Fun :: function(), Acc :: term(), List :: list()) -&gt; term()</head></clause>
  </contract>
  <anno>Acc</anno>
  <anno>Fun</anno>
  <anno>List</anno>
</spec>
<spec>
  <name>foldr</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>foldr(Fun :: function(), Acc :: term(), List :: list()) -&gt; term()</head></clause>
  </contract>
  <anno>Acc</anno>
  <anno>Fun</anno>
  <anno>List</anno>
</spec>
<spec>
  <name>foreach</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>foreach(Fun :: function(), List :: list()) -&gt; ok</head></clause>
  </contract>
  <anno>Fun</anno>
  <anno>List</anno>
</spec>
<spec>
  <name>getObjectType</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>getObjectType(Wx_ref :: <seealso marker="#type-wx_object">wx_object()</seealso>) -&gt; atom()</head></clause>
  </contract>
  <anno>Wx_ref</anno>
</spec>
<spec>
  <name>get_env</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>get_env() -&gt; <seealso marker="#type-wx_env">wx_env()</seealso></head></clause>
  </contract>
</spec>
<spec>
  <name>get_memory_bin</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_memory_bin(Wx_mem :: <seealso marker="#type-wx_memory">wx_memory()</seealso>) -&gt; binary()</head></clause>
  </contract>
  <anno>Wx_mem</anno>
</spec>
<spec>
  <name>is_null</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_null(Wx_ref :: <seealso marker="#type-wx_object">wx_object()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>Wx_ref</anno>
</spec>
<spec>
  <name>map</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>map(Fun :: function(), List :: list()) -&gt; list()</head></clause>
  </contract>
  <anno>Fun</anno>
  <anno>List</anno>
</spec>
<spec>
  <name>new</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>new() -&gt; <seealso marker="#type-wx_object">wx_object()</seealso></head></clause>
  </contract>
</spec>
<spec>
  <name>new</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>new(Options :: [Option]) -&gt; <seealso marker="#type-wx_object">wx_object()</seealso></head>
      <guard>
        <subtype><typename>Option</typename><string>Option = {debug, list() | atom()} | {silent_start, boolean()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Option</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>null</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>null() -&gt; <seealso marker="#type-wx_object">wx_object()</seealso></head></clause>
  </contract>
</spec>
<spec>
  <name>parent_class</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>release_memory</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>release_memory(Wx_mem :: <seealso marker="#type-wx_memory">wx_memory()</seealso>) -&gt; ok</head></clause>
  </contract>
  <anno>Wx_mem</anno>
</spec>
<spec>
  <name>retain_memory</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>retain_memory(Wx_mem :: <seealso marker="#type-wx_memory">wx_memory()</seealso>) -&gt; ok</head></clause>
  </contract>
  <anno>Wx_mem</anno>
</spec>
<spec>
  <name>set_env</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>set_env(Wx_env :: <seealso marker="#type-wx_env">wx_env()</seealso>) -&gt; ok</head></clause>
  </contract>
  <anno>Wx_env</anno>
</spec>
<spec>
  <name>typeCast</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>typeCast(Old :: <seealso marker="#type-wx_object">wx_object()</seealso>, NewType :: atom()) -&gt; <seealso marker="#type-wx_object">wx_object()</seealso></head></clause>
  </contract>
  <anno>NewType</anno>
  <anno>Old</anno>
</spec>
<timestamp>Generated by EDoc, Jul 12 2017, 20:29:43.</timestamp>
</module>