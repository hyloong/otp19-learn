<module name="sys">
<type>
  <name>dbg_fun</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-dbg_fun">dbg_fun()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>fun((FuncState :: term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Event :: <seealso marker="#type-system_event">system_event()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ProcState :: term()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>done | (NewFuncState :: term()))</typehead></typedecl>
  <anno>Event</anno>
  <anno>FuncState</anno>
  <anno>NewFuncState</anno>
  <anno>ProcState</anno>
</type>
<type>
  <name>dbg_opt</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-dbg_opt">dbg_opt()</marker></typehead></typedecl>
</type>
<type>
  <name>format_fun</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-format_fun">format_fun()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>fun((Device :: <seealso marker="io#type-device">io:device()</seealso> | <seealso marker="file#type-io_device">file:io_device()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Event :: <seealso marker="#type-system_event">system_event()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Extra :: term()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>any())</typehead></typedecl>
  <anno>Device</anno>
  <anno>Event</anno>
  <anno>Extra</anno>
</type>
<type>
  <name>name</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-name">name()</marker> = pid() | atom() | {global, atom()}</typehead></typedecl>
</type>
<type>
  <name>system_event</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-system_event">system_event()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{in, Msg :: term()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{in, Msg :: term(), From :: term()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{out, Msg :: term(), To :: term()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>term()</typehead></typedecl>
  <anno>From</anno>
  <anno>Msg</anno>
  <anno>To</anno>
</type>
<spec>
  <name>change_code</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>change_code(Name, Module, OldVsn, Extra) -&gt; ok | {error, Reason}</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seealso marker="#type-name">name()</seealso></string></subtype>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>OldVsn</typename><string>OldVsn = undefined | term()</string></subtype>
        <subtype><typename>Extra</typename><string>Extra = Reason = term()</string></subtype>
        <subtype><typename>Reason</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Extra</anno>
  <anno>Module</anno>
  <anno>Name</anno>
  <anno>OldVsn</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>change_code</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>change_code(Name, Module, OldVsn, Extra, Timeout) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok | {error, Reason}</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seealso marker="#type-name">name()</seealso></string></subtype>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>OldVsn</typename><string>OldVsn = undefined | term()</string></subtype>
        <subtype><typename>Extra</typename><string>Extra = term()</string></subtype>
        <subtype><typename>Timeout</typename><string>Timeout = timeout()</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Extra</anno>
  <anno>Module</anno>
  <anno>Name</anno>
  <anno>OldVsn</anno>
  <anno>Reason</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>debug_options</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>debug_options(Options) -&gt; [<seealso marker="#type-dbg_opt">dbg_opt()</seealso>]</head>
      <guard>
        <subtype><typename>Options</typename><string>Options = [Opt]</string></subtype>
        <subtype><typename>Opt</typename><string>Opt = <br/><nbsp/><nbsp/><nbsp/><nbsp/>trace |<br/><nbsp/><nbsp/><nbsp/><nbsp/>log |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{log, integer() &gt;= 1} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>statistics |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{log_to_file, FileName} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{install, FuncSpec}</string></subtype>
        <subtype><typename>FileName</typename><string>FileName = <seealso marker="file#type-name">file:name()</seealso></string></subtype>
        <subtype><typename>FuncSpec</typename><string>FuncSpec = {Func, FuncState}</string></subtype>
        <subtype><typename>Func</typename><string>Func = <seealso marker="#type-dbg_fun">dbg_fun()</seealso></string></subtype>
        <subtype><typename>FuncState</typename><string>FuncState = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>FileName</anno>
  <anno>Func</anno>
  <anno>FuncSpec</anno>
  <anno>FuncState</anno>
  <anno>Opt</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>get_debug</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>get_debug(Item, Debug, Default) -&gt; term()</head>
      <guard>
        <subtype><typename>Item</typename><string>Item = log | statistics</string></subtype>
        <subtype><typename>Debug</typename><string>Debug = [<seealso marker="#type-dbg_opt">dbg_opt()</seealso>]</string></subtype>
        <subtype><typename>Default</typename><string>Default = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Debug</anno>
  <anno>Default</anno>
  <anno>Item</anno>
</spec>
<spec>
  <name>get_state</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_state(Name) -&gt; State</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seealso marker="#type-name">name()</seealso></string></subtype>
        <subtype><typename>State</typename><string>State = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
  <anno>State</anno>
</spec>
<spec>
  <name>get_state</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>get_state(Name, Timeout) -&gt; State</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seealso marker="#type-name">name()</seealso></string></subtype>
        <subtype><typename>Timeout</typename><string>Timeout = timeout()</string></subtype>
        <subtype><typename>State</typename><string>State = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
  <anno>State</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>get_status</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_status(Name) -&gt; Status</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seealso marker="#type-name">name()</seealso></string></subtype>
        <subtype><typename>Status</typename><string>Status = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{status, Pid :: pid(), {module, Module :: module()}, [SItem]}</string></subtype>
        <subtype><typename>SItem</typename><string>SItem = <br/><nbsp/><nbsp/><nbsp/><nbsp/>(PDict :: [{Key :: term(), Value :: term()}]) |<br/><nbsp/><nbsp/><nbsp/><nbsp/>(SysState :: running | suspended) |<br/><nbsp/><nbsp/><nbsp/><nbsp/>(Parent :: pid()) |<br/><nbsp/><nbsp/><nbsp/><nbsp/>(Dbg :: [<seealso marker="#type-dbg_opt">dbg_opt()</seealso>]) |<br/><nbsp/><nbsp/><nbsp/><nbsp/>(Misc :: term())</string></subtype>
      </guard></clause>
  </contract>
  <anno>Dbg</anno>
  <anno>Key</anno>
  <anno>Misc</anno>
  <anno>Module</anno>
  <anno>Name</anno>
  <anno>PDict</anno>
  <anno>Parent</anno>
  <anno>Pid</anno>
  <anno>SItem</anno>
  <anno>Status</anno>
  <anno>SysState</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>get_status</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>get_status(Name, Timeout) -&gt; Status</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seealso marker="#type-name">name()</seealso></string></subtype>
        <subtype><typename>Timeout</typename><string>Timeout = timeout()</string></subtype>
        <subtype><typename>Status</typename><string>Status = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{status, Pid :: pid(), {module, Module :: module()}, [SItem]}</string></subtype>
        <subtype><typename>SItem</typename><string>SItem = <br/><nbsp/><nbsp/><nbsp/><nbsp/>(PDict :: [{Key :: term(), Value :: term()}]) |<br/><nbsp/><nbsp/><nbsp/><nbsp/>(SysState :: running | suspended) |<br/><nbsp/><nbsp/><nbsp/><nbsp/>(Parent :: pid()) |<br/><nbsp/><nbsp/><nbsp/><nbsp/>(Dbg :: [<seealso marker="#type-dbg_opt">dbg_opt()</seealso>]) |<br/><nbsp/><nbsp/><nbsp/><nbsp/>(Misc :: term())</string></subtype>
      </guard></clause>
  </contract>
  <anno>Dbg</anno>
  <anno>Key</anno>
  <anno>Misc</anno>
  <anno>Module</anno>
  <anno>Name</anno>
  <anno>PDict</anno>
  <anno>Parent</anno>
  <anno>Pid</anno>
  <anno>SItem</anno>
  <anno>Status</anno>
  <anno>SysState</anno>
  <anno>Timeout</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>handle_debug</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>handle_debug(Debug, FormFunc, Extra, Event) -&gt; [<seealso marker="#type-dbg_opt">dbg_opt()</seealso>]</head>
      <guard>
        <subtype><typename>Debug</typename><string>Debug = [<seealso marker="#type-dbg_opt">dbg_opt()</seealso>]</string></subtype>
        <subtype><typename>FormFunc</typename><string>FormFunc = <seealso marker="#type-format_fun">format_fun()</seealso></string></subtype>
        <subtype><typename>Extra</typename><string>Extra = term()</string></subtype>
        <subtype><typename>Event</typename><string>Event = <seealso marker="#type-system_event">system_event()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Debug</anno>
  <anno>Event</anno>
  <anno>Extra</anno>
  <anno>FormFunc</anno>
</spec>
<spec>
  <name>handle_system_msg</name>
  <arity>6</arity>
  <contract>
    <clause>
      <head>handle_system_msg(Msg, From, Parent, Module, Debug, Misc) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>no_return()</head>
      <guard>
        <subtype><typename>Msg</typename><string>Msg = term()</string></subtype>
        <subtype><typename>From</typename><string>From = {pid(), Tag :: term()}</string></subtype>
        <subtype><typename>Parent</typename><string>Parent = pid()</string></subtype>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>Debug</typename><string>Debug = [<seealso marker="#type-dbg_opt">dbg_opt()</seealso>]</string></subtype>
        <subtype><typename>Misc</typename><string>Misc = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Debug</anno>
  <anno>From</anno>
  <anno>Misc</anno>
  <anno>Module</anno>
  <anno>Msg</anno>
  <anno>Parent</anno>
  <anno>Tag</anno>
</spec>
<spec>
  <name>handle_system_msg</name>
  <arity>7</arity>
  <contract/>
</spec>
<spec>
  <name>install</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>install(Name, FuncSpec) -&gt; ok</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seealso marker="#type-name">name()</seealso></string></subtype>
        <subtype><typename>FuncSpec</typename><string>FuncSpec = {Func, FuncState}</string></subtype>
        <subtype><typename>Func</typename><string>Func = <seealso marker="#type-dbg_fun">dbg_fun()</seealso></string></subtype>
        <subtype><typename>FuncState</typename><string>FuncState = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Func</anno>
  <anno>FuncSpec</anno>
  <anno>FuncState</anno>
  <anno>Name</anno>
</spec>
<spec>
  <name>install</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>install(Name, FuncSpec, Timeout) -&gt; ok</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seealso marker="#type-name">name()</seealso></string></subtype>
        <subtype><typename>FuncSpec</typename><string>FuncSpec = {Func, FuncState}</string></subtype>
        <subtype><typename>Func</typename><string>Func = <seealso marker="#type-dbg_fun">dbg_fun()</seealso></string></subtype>
        <subtype><typename>FuncState</typename><string>FuncState = term()</string></subtype>
        <subtype><typename>Timeout</typename><string>Timeout = timeout()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Func</anno>
  <anno>FuncSpec</anno>
  <anno>FuncState</anno>
  <anno>Name</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>log</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>log(Name, Flag) -&gt; ok | {ok, [<seealso marker="#type-system_event">system_event()</seealso>]}</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seealso marker="#type-name">name()</seealso></string></subtype>
        <subtype><typename>Flag</typename><string>Flag = true | {true, N :: integer() &gt;= 1} | false | get | print</string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
  <anno>N</anno>
  <anno>Name</anno>
</spec>
<spec>
  <name>log</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>log(Name, Flag, Timeout) -&gt; ok | {ok, [<seealso marker="#type-system_event">system_event()</seealso>]}</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seealso marker="#type-name">name()</seealso></string></subtype>
        <subtype><typename>Flag</typename><string>Flag = true | {true, N :: integer() &gt;= 1} | false | get | print</string></subtype>
        <subtype><typename>Timeout</typename><string>Timeout = timeout()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
  <anno>N</anno>
  <anno>Name</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>log_to_file</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>log_to_file(Name, Flag) -&gt; ok | {error, open_file}</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seealso marker="#type-name">name()</seealso></string></subtype>
        <subtype><typename>Flag</typename><string>Flag = (FileName :: string()) | false</string></subtype>
      </guard></clause>
  </contract>
  <anno>FileName</anno>
  <anno>Flag</anno>
  <anno>Name</anno>
</spec>
<spec>
  <name>log_to_file</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>log_to_file(Name, Flag, Timeout) -&gt; ok | {error, open_file}</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seealso marker="#type-name">name()</seealso></string></subtype>
        <subtype><typename>Flag</typename><string>Flag = (FileName :: string()) | false</string></subtype>
        <subtype><typename>Timeout</typename><string>Timeout = timeout()</string></subtype>
      </guard></clause>
  </contract>
  <anno>FileName</anno>
  <anno>Flag</anno>
  <anno>Name</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>no_debug</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>no_debug(Name) -&gt; ok</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seealso marker="#type-name">name()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
</spec>
<spec>
  <name>no_debug</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>no_debug(Name, Timeout) -&gt; ok</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seealso marker="#type-name">name()</seealso></string></subtype>
        <subtype><typename>Timeout</typename><string>Timeout = timeout()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>print_log</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>print_log(Debug) -&gt; ok</head>
      <guard>
        <subtype><typename>Debug</typename><string>Debug = [<seealso marker="#type-dbg_opt">dbg_opt()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Debug</anno>
</spec>
<spec>
  <name>remove</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>remove(Name, Func) -&gt; ok</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seealso marker="#type-name">name()</seealso></string></subtype>
        <subtype><typename>Func</typename><string>Func = <seealso marker="#type-dbg_fun">dbg_fun()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Func</anno>
  <anno>Name</anno>
</spec>
<spec>
  <name>remove</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>remove(Name, Func, Timeout) -&gt; ok</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seealso marker="#type-name">name()</seealso></string></subtype>
        <subtype><typename>Func</typename><string>Func = <seealso marker="#type-dbg_fun">dbg_fun()</seealso></string></subtype>
        <subtype><typename>Timeout</typename><string>Timeout = timeout()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Func</anno>
  <anno>Name</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>replace_state</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>replace_state(Name, StateFun) -&gt; NewState</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seealso marker="#type-name">name()</seealso></string></subtype>
        <subtype><typename>StateFun</typename><string>StateFun = fun((State :: term()) -&gt; NewState :: term())</string></subtype>
        <subtype><typename>NewState</typename><string>NewState = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
  <anno>NewState</anno>
  <anno>State</anno>
  <anno>StateFun</anno>
</spec>
<spec>
  <name>replace_state</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>replace_state(Name, StateFun, Timeout) -&gt; NewState</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seealso marker="#type-name">name()</seealso></string></subtype>
        <subtype><typename>StateFun</typename><string>StateFun = fun((State :: term()) -&gt; NewState :: term())</string></subtype>
        <subtype><typename>Timeout</typename><string>Timeout = timeout()</string></subtype>
        <subtype><typename>NewState</typename><string>NewState = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
  <anno>NewState</anno>
  <anno>State</anno>
  <anno>StateFun</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>resume</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>resume(Name) -&gt; ok</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seealso marker="#type-name">name()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
</spec>
<spec>
  <name>resume</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>resume(Name, Timeout) -&gt; ok</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seealso marker="#type-name">name()</seealso></string></subtype>
        <subtype><typename>Timeout</typename><string>Timeout = timeout()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>statistics</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>statistics(Name, Flag) -&gt; ok | {ok, Statistics}</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seealso marker="#type-name">name()</seealso></string></subtype>
        <subtype><typename>Flag</typename><string>Flag = true | false | get</string></subtype>
        <subtype><typename>Statistics</typename><string>Statistics = [StatisticsTuple] | no_statistics</string></subtype>
        <subtype><typename>StatisticsTuple</typename><string>StatisticsTuple = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{start_time, DateTime1} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{current_time, DateTime2} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{reductions, integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{messages_in, integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{messages_out, integer() &gt;= 0}</string></subtype>
        <subtype><typename>DateTime1</typename><string>DateTime1 = DateTime2 = <seealso marker="file#type-date_time">file:date_time()</seealso></string></subtype>
        <subtype><typename>DateTime2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>DateTime1</anno>
  <anno>DateTime2</anno>
  <anno>Flag</anno>
  <anno>Name</anno>
  <anno>Statistics</anno>
  <anno>StatisticsTuple</anno>
</spec>
<spec>
  <name>statistics</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>statistics(Name, Flag, Timeout) -&gt; ok | {ok, Statistics}</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seealso marker="#type-name">name()</seealso></string></subtype>
        <subtype><typename>Flag</typename><string>Flag = true | false | get</string></subtype>
        <subtype><typename>Statistics</typename><string>Statistics = [StatisticsTuple] | no_statistics</string></subtype>
        <subtype><typename>StatisticsTuple</typename><string>StatisticsTuple = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{start_time, DateTime1} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{current_time, DateTime2} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{reductions, integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{messages_in, integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{messages_out, integer() &gt;= 0}</string></subtype>
        <subtype><typename>DateTime1</typename><string>DateTime1 = DateTime2 = <seealso marker="file#type-date_time">file:date_time()</seealso></string></subtype>
        <subtype><typename>DateTime2</typename><string/></subtype>
        <subtype><typename>Timeout</typename><string>Timeout = timeout()</string></subtype>
      </guard></clause>
  </contract>
  <anno>DateTime1</anno>
  <anno>DateTime2</anno>
  <anno>Flag</anno>
  <anno>Name</anno>
  <anno>Statistics</anno>
  <anno>StatisticsTuple</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>suspend</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>suspend(Name) -&gt; ok</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seealso marker="#type-name">name()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
</spec>
<spec>
  <name>suspend</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>suspend(Name, Timeout) -&gt; ok</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seealso marker="#type-name">name()</seealso></string></subtype>
        <subtype><typename>Timeout</typename><string>Timeout = timeout()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>suspend_loop_hib</name>
  <arity>6</arity>
  <contract/>
</spec>
<spec>
  <name>terminate</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>terminate(Name, Reason) -&gt; ok</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seealso marker="#type-name">name()</seealso></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>terminate</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>terminate(Name, Reason, Timeout) -&gt; ok</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seealso marker="#type-name">name()</seealso></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = term()</string></subtype>
        <subtype><typename>Timeout</typename><string>Timeout = timeout()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
  <anno>Reason</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>trace</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>trace(Name, Flag) -&gt; ok</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seealso marker="#type-name">name()</seealso></string></subtype>
        <subtype><typename>Flag</typename><string>Flag = boolean()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
  <anno>Name</anno>
</spec>
<spec>
  <name>trace</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>trace(Name, Flag, Timeout) -&gt; ok</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = <seealso marker="#type-name">name()</seealso></string></subtype>
        <subtype><typename>Flag</typename><string>Flag = boolean()</string></subtype>
        <subtype><typename>Timeout</typename><string>Timeout = timeout()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
  <anno>Name</anno>
  <anno>Timeout</anno>
</spec>
<timestamp>Generated by EDoc, Jul 12 2017, 20:27:28.</timestamp>
</module>