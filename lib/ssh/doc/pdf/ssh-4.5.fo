<?xml version="1.0"?>
<fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format">
  <fo:layout-master-set>
    <fo:simple-page-master master-name="cover" margin="25mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin="0mm"/>
    </fo:simple-page-master>
    <fo:simple-page-master master-name="left-page" margin-top="25mm" margin-bottom="15mm" margin-left="20mm" margin-right="25mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin-top="15mm" margin-bottom="20mm"/>
      <fo:region-before region-name="left-header" extent="10mm"/>
      <fo:region-after region-name="left-footer" extent="10mm"/>
    </fo:simple-page-master>
    <fo:simple-page-master master-name="right-page" margin-top="25mm" margin-bottom="15mm" margin-left="25mm" margin-right="20mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin-top="15mm" margin-bottom="20mm"/>
      <fo:region-before region-name="right-header" extent="10mm"/>
      <fo:region-after region-name="right-footer" extent="10mm"/>
    </fo:simple-page-master>
    <fo:page-sequence-master master-name="document">
      <fo:repeatable-page-master-alternatives>
        <fo:conditional-page-master-reference master-reference="left-page" odd-or-even="even"/>
        <fo:conditional-page-master-reference master-reference="right-page" odd-or-even="odd"/>
      </fo:repeatable-page-master-alternatives>
    </fo:page-sequence-master>
  </fo:layout-master-set>
  <fo:bookmark-tree>
    <fo:bookmark internal-destination="cover-page" starting-state="show">
      <fo:bookmark-title>SSH</fo:bookmark-title>
      <fo:bookmark internal-destination="idp497216" starting-state="hide">
        <fo:bookmark-title>SSH User's Guide</fo:bookmark-title>
        <fo:bookmark internal-destination="idp443792" starting-state="hide">
          <fo:bookmark-title>Introduction</fo:bookmark-title>
          <fo:bookmark internal-destination="idp438992" starting-state="hide">
            <fo:bookmark-title>Scope and Purpose</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6976" starting-state="hide">
            <fo:bookmark-title>Prerequisites</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5008" starting-state="hide">
            <fo:bookmark-title>SSH Protocol Overview</fo:bookmark-title>
            <fo:bookmark internal-destination="idp2928" starting-state="hide">
              <fo:bookmark-title>Transport Protocol</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp466864" starting-state="hide">
              <fo:bookmark-title>Authentication Protocol</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp600384" starting-state="hide">
              <fo:bookmark-title>Connection Protocol</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp597984" starting-state="hide">
              <fo:bookmark-title>Channels</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp301120" starting-state="hide">
            <fo:bookmark-title>Where to Find More Information</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp593616" starting-state="hide">
          <fo:bookmark-title>Getting Started</fo:bookmark-title>
          <fo:bookmark internal-destination="idp511840" starting-state="hide">
            <fo:bookmark-title>General Information</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp571408" starting-state="hide">
            <fo:bookmark-title>Using the Erlang ssh Terminal Client</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp481664" starting-state="hide">
            <fo:bookmark-title>Running an Erlang ssh Daemon</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp478816" starting-state="hide">
            <fo:bookmark-title>One-Time Execution</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp498096" starting-state="hide">
            <fo:bookmark-title>SFTP Server</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp603744" starting-state="hide">
            <fo:bookmark-title>SFTP Client</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp448432" starting-state="hide">
            <fo:bookmark-title>SFTP Client with TAR Compression and Encryption</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp15264" starting-state="hide">
            <fo:bookmark-title>Creating a Subsystem</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
      </fo:bookmark>
      <fo:bookmark internal-destination="idp371296" starting-state="hide">
        <fo:bookmark-title>Reference Manual</fo:bookmark-title>
        <fo:bookmark internal-destination="idp639088" starting-state="hide">
          <fo:bookmark-title>SSH</fo:bookmark-title>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp1662304" starting-state="hide">
          <fo:bookmark-title>ssh</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1473424" starting-state="hide">
            <fo:bookmark-title>close/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1476464" starting-state="hide">
            <fo:bookmark-title>connect/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1476928" starting-state="hide">
            <fo:bookmark-title>connect/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1477408" starting-state="hide">
            <fo:bookmark-title>connect/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1477872" starting-state="hide">
            <fo:bookmark-title>connect/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1569248" starting-state="hide">
            <fo:bookmark-title>connection_info/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1573664" starting-state="hide">
            <fo:bookmark-title>daemon/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1574112" starting-state="hide">
            <fo:bookmark-title>daemon/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1574576" starting-state="hide">
            <fo:bookmark-title>daemon/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1575040" starting-state="hide">
            <fo:bookmark-title>daemon/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1575488" starting-state="hide">
            <fo:bookmark-title>daemon/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1934848" starting-state="hide">
            <fo:bookmark-title>daemon_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1939168" starting-state="hide">
            <fo:bookmark-title>default_algorithms/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1942736" starting-state="hide">
            <fo:bookmark-title>shell/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1943184" starting-state="hide">
            <fo:bookmark-title>shell/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1943632" starting-state="hide">
            <fo:bookmark-title>shell/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1944096" starting-state="hide">
            <fo:bookmark-title>shell/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1951440" starting-state="hide">
            <fo:bookmark-title>start/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1951888" starting-state="hide">
            <fo:bookmark-title>start/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1958112" starting-state="hide">
            <fo:bookmark-title>stop/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1962928" starting-state="hide">
            <fo:bookmark-title>stop_daemon/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1963392" starting-state="hide">
            <fo:bookmark-title>stop_daemon/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1967552" starting-state="hide">
            <fo:bookmark-title>stop_listener/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1968016" starting-state="hide">
            <fo:bookmark-title>stop_listener/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp1978304" starting-state="hide">
          <fo:bookmark-title>ssh_channel</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1998576" starting-state="hide">
            <fo:bookmark-title>call/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1999040" starting-state="hide">
            <fo:bookmark-title>call/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2006416" starting-state="hide">
            <fo:bookmark-title>cast/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2012000" starting-state="hide">
            <fo:bookmark-title>enter_loop/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2019632" starting-state="hide">
            <fo:bookmark-title>init/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2033936" starting-state="hide">
            <fo:bookmark-title>reply/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2041584" starting-state="hide">
            <fo:bookmark-title>start/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2042080" starting-state="hide">
            <fo:bookmark-title>start_link/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2056032" starting-state="hide">
            <fo:bookmark-title>Module:code_change/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2069632" starting-state="hide">
            <fo:bookmark-title>Module:init/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2076048" starting-state="hide">
            <fo:bookmark-title>Module:handle_call/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2086544" starting-state="hide">
            <fo:bookmark-title>Module:handle_cast/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2093728" starting-state="hide">
            <fo:bookmark-title>Module:handle_msg/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2101680" starting-state="hide">
            <fo:bookmark-title>Module:handle_ssh_msg/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2110208" starting-state="hide">
            <fo:bookmark-title>Module:terminate/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp2121312" starting-state="hide">
          <fo:bookmark-title>ssh_connection</fo:bookmark-title>
          <fo:bookmark internal-destination="idp2178128" starting-state="hide">
            <fo:bookmark-title>adjust_window/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2184560" starting-state="hide">
            <fo:bookmark-title>close/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2190624" starting-state="hide">
            <fo:bookmark-title>exec/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2203392" starting-state="hide">
            <fo:bookmark-title>exit_status/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2207600" starting-state="hide">
            <fo:bookmark-title>ptty_alloc/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2208080" starting-state="hide">
            <fo:bookmark-title>ptty_alloc/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2224432" starting-state="hide">
            <fo:bookmark-title>reply_request/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2231056" starting-state="hide">
            <fo:bookmark-title>send/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2231520" starting-state="hide">
            <fo:bookmark-title>send/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2232000" starting-state="hide">
            <fo:bookmark-title>send/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2232480" starting-state="hide">
            <fo:bookmark-title>send/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2239280" starting-state="hide">
            <fo:bookmark-title>send_eof/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2243840" starting-state="hide">
            <fo:bookmark-title>session_channel/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2244320" starting-state="hide">
            <fo:bookmark-title>session_channel/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2249552" starting-state="hide">
            <fo:bookmark-title>setenv/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2254752" starting-state="hide">
            <fo:bookmark-title>shell/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2258704" starting-state="hide">
            <fo:bookmark-title>subsystem/4</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp2271200" starting-state="hide">
          <fo:bookmark-title>ssh_client_key_api</fo:bookmark-title>
          <fo:bookmark internal-destination="idp2284304" starting-state="hide">
            <fo:bookmark-title>Module:add_host_key/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2291360" starting-state="hide">
            <fo:bookmark-title>Module:is_host_key/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2299472" starting-state="hide">
            <fo:bookmark-title>Module:user_key/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp2315392" starting-state="hide">
          <fo:bookmark-title>ssh_server_key_api</fo:bookmark-title>
          <fo:bookmark internal-destination="idp2328048" starting-state="hide">
            <fo:bookmark-title>Module:host_key/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2335664" starting-state="hide">
            <fo:bookmark-title>Module:is_auth_key/3</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp2348976" starting-state="hide">
          <fo:bookmark-title>ssh_sftp</fo:bookmark-title>
          <fo:bookmark internal-destination="idp2365168" starting-state="hide">
            <fo:bookmark-title>apread/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2372208" starting-state="hide">
            <fo:bookmark-title>apwrite/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2380144" starting-state="hide">
            <fo:bookmark-title>aread/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2388992" starting-state="hide">
            <fo:bookmark-title>awrite/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2398304" starting-state="hide">
            <fo:bookmark-title>close/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2398768" starting-state="hide">
            <fo:bookmark-title>close/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2402896" starting-state="hide">
            <fo:bookmark-title>delete/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2403360" starting-state="hide">
            <fo:bookmark-title>delete/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2407904" starting-state="hide">
            <fo:bookmark-title>del_dir/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2408368" starting-state="hide">
            <fo:bookmark-title>del_dir/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2412976" starting-state="hide">
            <fo:bookmark-title>list_dir/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2413440" starting-state="hide">
            <fo:bookmark-title>list_dir/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2418512" starting-state="hide">
            <fo:bookmark-title>make_dir/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2418976" starting-state="hide">
            <fo:bookmark-title>make_dir/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2424064" starting-state="hide">
            <fo:bookmark-title>make_symlink/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2424544" starting-state="hide">
            <fo:bookmark-title>make_symlink/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2429584" starting-state="hide">
            <fo:bookmark-title>open/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2430048" starting-state="hide">
            <fo:bookmark-title>open/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2435632" starting-state="hide">
            <fo:bookmark-title>opendir/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2436096" starting-state="hide">
            <fo:bookmark-title>opendir/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2440288" starting-state="hide">
            <fo:bookmark-title>open_tar/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2440752" starting-state="hide">
            <fo:bookmark-title>open_tar/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2465024" starting-state="hide">
            <fo:bookmark-title>position/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2465504" starting-state="hide">
            <fo:bookmark-title>position/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2482128" starting-state="hide">
            <fo:bookmark-title>pread/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2482608" starting-state="hide">
            <fo:bookmark-title>pread/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2490128" starting-state="hide">
            <fo:bookmark-title>pwrite/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2490608" starting-state="hide">
            <fo:bookmark-title>pwrite/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2497632" starting-state="hide">
            <fo:bookmark-title>read/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2498096" starting-state="hide">
            <fo:bookmark-title>read/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2508192" starting-state="hide">
            <fo:bookmark-title>read_file/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2508656" starting-state="hide">
            <fo:bookmark-title>read_file/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2513232" starting-state="hide">
            <fo:bookmark-title>read_file_info/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2513696" starting-state="hide">
            <fo:bookmark-title>read_file_info/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2520832" starting-state="hide">
            <fo:bookmark-title>read_link/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2521296" starting-state="hide">
            <fo:bookmark-title>read_link/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2525888" starting-state="hide">
            <fo:bookmark-title>read_link_info/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2526384" starting-state="hide">
            <fo:bookmark-title>read_link_info/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2533520" starting-state="hide">
            <fo:bookmark-title>rename/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2534000" starting-state="hide">
            <fo:bookmark-title>rename/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2539440" starting-state="hide">
            <fo:bookmark-title>start_channel/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2539904" starting-state="hide">
            <fo:bookmark-title>start_channel/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2540416" starting-state="hide">
            <fo:bookmark-title>start_channel/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2540880" starting-state="hide">
            <fo:bookmark-title>start_channel/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2541408" starting-state="hide">
            <fo:bookmark-title>start_channel/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2541872" starting-state="hide">
            <fo:bookmark-title>start_channel/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2559440" starting-state="hide">
            <fo:bookmark-title>stop_channel/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2563376" starting-state="hide">
            <fo:bookmark-title>write/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2563840" starting-state="hide">
            <fo:bookmark-title>write/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2571536" starting-state="hide">
            <fo:bookmark-title>write_file/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2572000" starting-state="hide">
            <fo:bookmark-title>write_file/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2576608" starting-state="hide">
            <fo:bookmark-title>write_file_info/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2577088" starting-state="hide">
            <fo:bookmark-title>write_file_info/4</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp2589792" starting-state="hide">
          <fo:bookmark-title>ssh_sftpd</fo:bookmark-title>
          <fo:bookmark internal-destination="idp2600816" starting-state="hide">
            <fo:bookmark-title>subsystem_spec/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
      </fo:bookmark>
    </fo:bookmark>
  </fo:bookmark-tree>
  <fo:page-sequence font-family="sans-serif" force-page-count="even" master-reference="cover" font-size="10pt">
    <fo:flow flow-name="xsl-region-body">
      <fo:block space-before="130mm" space-before.conditionality="retain" text-align="end">
        <fo:external-graphic src="/root/download/otp_src_20.0/bootstrap/lib/erl_docgen/priv/images/erlang-logo.gif"/>
      </fo:block>
      <fo:block id="cover-page" border-before-style="solid" border-before-width="10pt" border-color="#960003" font-size="2.3em" padding-before="0.5em" text-align="end">SSH</fo:block>
      <fo:block font-size="0.9em" text-align="end">Copyright © 2005-2017 Ericsson AB. All Rights Reserved.</fo:block>
      <fo:block font-size="0.9em" text-align="end">SSH 4.5</fo:block>
      <fo:block font-size="0.9em" text-align="end">July 12, 2017</fo:block>
      <fo:block padding-before="2.5em" font-size="1.33em" font-weight="bold" color="#C00" text-align="end"/>
      <fo:block break-before="page" border-before-style="solid" border-before-width="1pt" border-color="#960003" font-weight="bold" padding-before="0.5em" space-before="200mm" space-before.conditionality="retain">Copyright © 2005-2017 Ericsson AB. All Rights Reserved.</fo:block>
      <fo:block font-size="0.9em">
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
 
          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.

    Ericsson AB. All Rights Reserved..
        </fo:block>
      <fo:block font-size="0.9em" font-weight="bold" space-before="2em">July 12, 2017</fo:block>
    </fo:flow>
  </fo:page-sequence>
  <fo:page-sequence font-family="serif" master-reference="document" initial-page-number="1" font-size="10pt">
    <fo:static-content flow-name="left-header">
      <fo:block text-align="start" border-after-style="solid" border-after-width="2pt" border-color="#960003" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">
        <fo:retrieve-marker retrieve-boundary="page-sequence" retrieve-class-name="chapter-title" retrieve-position="first-including-carryover"/>
      </fo:block>
    </fo:static-content>
    <fo:static-content flow-name="right-header">
      <fo:block text-align="end" border-after-style="solid" border-after-width="2pt" border-color="#960003" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">
        <fo:retrieve-marker retrieve-boundary="page-sequence" retrieve-class-name="chapter-title" retrieve-position="first-including-carryover"/>
      </fo:block>
    </fo:static-content>
    <fo:static-content flow-name="left-footer">
      <fo:block text-align="start" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold"><fo:page-number/> | Ericsson AB. All Rights Reserved.:
            SSH</fo:block>
    </fo:static-content>
    <fo:static-content flow-name="right-footer">
      <fo:block text-align="end" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">Ericsson AB. All Rights Reserved.:
            SSH | <fo:page-number/></fo:block>
    </fo:static-content>
    <fo:flow flow-name="xsl-region-body"><fo:block/><fo:block id="idp497216" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">1   
      SSH User's Guide</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Erlang Secure Shell (SSH) application, <fo:inline font-family="monospace">ssh</fo:inline>, implements the SSH Transport Layer Protocol and
    provides SSH File Transfer Protocol (SFTP) clients and servers.
    </fo:block>
  <fo:block id="idp443792" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.1  Introduction</fo:marker>1.1  Introduction</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">SSH is a protocol for secure remote logon and
    other secure network services over an insecure network.</fo:block><fo:block id="idp438992" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.1 
      Scope and Purpose</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">SSH provides a single, full-duplex, and byte-oriented connection between
    client and server. The protocol also provides privacy, integrity,
    server authentication, and man-in-the-middle protection.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">ssh</fo:inline> application is an implementation of the SSH Transport, Connection and Authentication
    Layer Protocols in Erlang. It provides the following:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>API functions to write customized SSH clients and servers applications</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The Erlang shell available over SSH</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>An SFTP client (<fo:inline font-style="italic">ssh_sftp</fo:inline>)
      and server (<fo:inline font-style="italic">ssh_sftpd</fo:inline>)</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp6976" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.2 
      Prerequisites</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is assumed that the reader is familiar with the Erlang programming language,
    concepts of <fo:inline font-weight="bold">OTP</fo:inline>, and has a basic understanding of <fo:inline font-weight="bold">public keys</fo:inline>.</fo:block>
  <fo:block id="idp5008" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.3 
      SSH Protocol Overview</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Conceptually, the SSH protocol can be partitioned into four
    layers:</fo:block>

    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="SSH_protocols.png"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        1.1:
         
        SSH Protocol Architecture</fo:block>
    </fo:block>

    <fo:block id="idp2928" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Transport Protocol</fo:block>
      

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The SSH Transport Protocol is a secure, low-level transport.
      It provides strong encryption, cryptographic host
      authentication, and integrity protection. A minimum of
      Message Authentication Code (MAC) and encryption
      algorithms are supported. For details, see the
      <fo:inline font-style="italic">ssh(3)</fo:inline> manual page in <fo:inline font-family="monospace">ssh</fo:inline>.</fo:block>
    

    <fo:block id="idp466864" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Authentication Protocol</fo:block>
      

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The SSH Authentication Protocol is a general-purpose user
      authentication protocol run over the SSH Transport Layer
      Protocol. The <fo:inline font-family="monospace">ssh</fo:inline> application supports user authentication as follows:
      </fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	  Using public key technology. RSA and DSA, X509-certificates
	  are not supported.
	</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	  Using keyboard-interactive authentication.
	  This is suitable for interactive authentication methods
	  that do not need any special software support on the client side.
	  Instead, all authentication data is entered from the keyboard.
	</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	  Using a pure password-based authentication scheme.
	  Here, the plain text password is encrypted before sent
	  over the network.
	</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Several configuration options for
      authentication handling are available in
      <fo:inline font-style="italic">ssh:connect/[3,4]</fo:inline>
      and <fo:inline font-style="italic">ssh:daemon/[2,3]</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The public key handling can be customized by implementing
      the following behaviours from <fo:inline font-family="monospace">ssh</fo:inline>:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Module
      <fo:inline font-style="italic">ssh_client_key_api</fo:inline>.
	</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Module
      <fo:inline font-style="italic">ssh_server_key_api</fo:inline>.
	</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
    

    <fo:block id="idp600384" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Connection Protocol</fo:block>
      

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The SSH Connection Protocol provides application-support
      services over the transport pipe, for example, channel multiplexing,
      flow control, remote program execution, signal propagation, and
      connection forwarding. Functions for handling the SSH
      Connection Protocol can be found in the module <fo:inline font-style="italic">ssh_connection</fo:inline> in <fo:inline font-family="monospace">ssh</fo:inline>.
      </fo:block>
    

    <fo:block id="idp597984" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Channels</fo:block>
      

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All terminal sessions, forwarded connections, and so on, are
      channels. Multiple channels are multiplexed into a single
      connection. All channels are flow-controlled. This means that no
      data is sent to a channel peer until a message is received to
      indicate that window space is available.
      The <fo:inline font-weight="bold">initial window size</fo:inline> specifies how many bytes of channel
      data that can be sent to the channel peer without adjusting the
      window. Typically, an SSH client opens a channel, sends data (commands),
      receives data (control information), and then closes the channel.
      The <fo:inline font-style="italic">ssh_channel</fo:inline> behaviour
      handles generic parts of SSH channel management. This makes it easy
      to write your own SSH client/server processes that use flow-control
      and thus opens for more focus on the application logic.
      </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Channels come in the following three flavors:</fo:block>

      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Subsystem</fo:inline> - Named services that can be run as
	part of an SSH server, such as SFTP <fo:inline font-style="italic">(ssh_sftpd)</fo:inline>, that is built into the
	SSH daemon (server) by default, but it can be disabled. The Erlang <fo:inline font-family="monospace">ssh</fo:inline>
	daemon can be configured to run any Erlang-
	implemented SSH subsystem.
	</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Shell</fo:inline> - Interactive shell. By default the
	Erlang daemon runs the Erlang shell. The shell can be customized by
	providing your own read-eval-print loop. You can also provide your
	own Command-Line Interface (CLI) implementation,
	but that is much more work.
	</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Exec</fo:inline> - One-time remote execution of commands. See function
	<fo:inline font-style="italic">ssh_connection:exec/4</fo:inline>
	for more information.</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
    



  <fo:block id="idp301120" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.4 
      Where to Find More Information</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      For detailed information about the SSH protocol, refer to the
      following Request for Comments(RFCs):
    </fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC 4250</fo:basic-link></fo:inline> -
      Protocol Assigned Numbers</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC 4251</fo:basic-link></fo:inline> -
      Protocol Architecture</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC 4252</fo:basic-link></fo:inline> -
      Authentication Protocol</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC 4253</fo:basic-link></fo:inline> -
      Transport Layer Protocol</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC 4254</fo:basic-link></fo:inline> -
      Connection Protocol</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC 4344</fo:basic-link></fo:inline> -
      Transport Layer Encryption Modes</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC 4716</fo:basic-link></fo:inline> -
      Public Key File Format</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp593616" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.2  Getting Started</fo:marker>1.2  Getting Started</fo:block><fo:block id="idp511840" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.1 
      General Information</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following examples use the utility function
    <fo:inline font-style="italic"> ssh:start/0</fo:inline> to start
    all needed applications (<fo:inline font-family="monospace">crypto</fo:inline>, <fo:inline font-family="monospace">public_key</fo:inline>, and <fo:inline font-family="monospace">ssh</fo:inline>).
    All examples are run in an Erlang shell, or in a bash shell, using <fo:inline font-weight="bold">openssh</fo:inline>
    to illustrate how the <fo:inline font-family="monospace">ssh</fo:inline> application can be used. The
    examples are run as the user <fo:inline font-family="monospace">otptest</fo:inline> on a local network where the
    user is authorized to log in over <fo:inline font-family="monospace">ssh</fo:inline> to the host <fo:inline font-weight="bold">tarlop</fo:inline>.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If nothing else is stated, it is presumed that the <fo:inline font-family="monospace">otptest</fo:inline> user
    has an entry in the <fo:inline font-weight="bold">authorized_keys</fo:inline> file of <fo:inline font-weight="bold">tarlop</fo:inline>
    (allowed to log in over <fo:inline font-family="monospace">ssh</fo:inline> without entering a password).
    Also, <fo:inline font-weight="bold">tarlop</fo:inline> is a known host in the <fo:inline font-family="monospace">known_hosts</fo:inline>
    file of the user <fo:inline font-family="monospace">otptest</fo:inline>. This means that host-verification
    can be done without user-interaction.
    </fo:block>
  <fo:block id="idp571408" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.2 
      Using the Erlang ssh Terminal Client</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The user <fo:inline font-family="monospace">otptest</fo:inline>, which has bash as default shell, uses the
    <fo:inline font-family="monospace">ssh:shell/1</fo:inline> client to connect to the <fo:inline font-weight="bold">openssh</fo:inline> daemon running on a
    host called <fo:inline font-weight="bold">tarlop</fo:inline>:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      1&gt;  ssh:start().
      ok
      2&gt; {ok, S} = ssh:shell("tarlop").
      otptest@tarlop:&gt; pwd
      /home/otptest
      otptest@tarlop:&gt; exit
      logout
      3&gt;
    </fo:block>
  <fo:block id="idp481664" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.3 
      Running an Erlang ssh Daemon</fo:block>
    
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">system_dir</fo:inline> option must be a directory containing a host
    key file and it defaults to <fo:inline font-family="monospace">/etc/ssh</fo:inline>. For details, see Section
    Configuration Files in <fo:inline font-style="italic">ssh(6)</fo:inline>.
    </fo:block>

    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Normally, the <fo:inline font-family="monospace">/etc/ssh</fo:inline> directory is only readable by root.</fo:block>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The option <fo:inline font-family="monospace">user_dir</fo:inline> defaults to directory <fo:inline font-family="monospace">users ~/.ssh</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 1.</fo:inline> To run the example without root privileges,
    generate new keys and host keys:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      $bash&gt; ssh-keygen -t rsa -f /tmp/ssh_daemon/ssh_host_rsa_key
      [...]
      $bash&gt; ssh-keygen -t rsa -f /tmp/otptest_user/.ssh/id_rsa
      [...]
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 2.</fo:inline> Create the file <fo:inline font-family="monospace">/tmp/otptest_user/.ssh/authorized_keys</fo:inline>
    and add the content of <fo:inline font-family="monospace">/tmp/otptest_user/.ssh/id_rsa.pub</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 3.</fo:inline> Start the Erlang <fo:inline font-family="monospace">ssh</fo:inline> daemon:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      1&gt; ssh:start().
      ok
      2&gt; {ok, Sshd} = ssh:daemon(8989, [{system_dir, "/tmp/ssh_daemon"},
                                        {user_dir, "/tmp/otptest_user/.ssh"}]).
      {ok,&lt;0.54.0&gt;}
      3&gt;
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 4.</fo:inline> Use the <fo:inline font-weight="bold">openssh</fo:inline> client from a shell to connect
    to the Erlang <fo:inline font-family="monospace">ssh</fo:inline> daemon:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      $bash&gt; ssh tarlop -p 8989  -i /tmp/otptest_user/.ssh/id_rsa\
             -o UserKnownHostsFile=/tmp/otptest_user/.ssh/known_hosts
      The authenticity of host 'tarlop' can't be established.
      RSA key fingerprint is 14:81:80:50:b1:1f:57:dd:93:a8:2d:2f:dd:90:ae:a8.
      Are you sure you want to continue connecting (yes/no)? yes
      Warning: Permanently added 'tarlop' (RSA) to the list of known hosts.
      Eshell V5.10  (abort with ^G)
      1&gt;
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are two ways of shutting down an <fo:inline font-family="monospace">ssh</fo:inline> daemon,
    see <fo:inline font-weight="bold">Step 5a</fo:inline> and <fo:inline font-weight="bold">Step 5b</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 5a.</fo:inline> Shut down the Erlang <fo:inline font-family="monospace">ssh</fo:inline> daemon so that it
    stops the listener but leaves existing connections, started by the listener,
    operational:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      3&gt; ssh:stop_listener(Sshd).
      ok
      4&gt;
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 5b.</fo:inline> Shut down the Erlang <fo:inline font-family="monospace">ssh</fo:inline> daemon so that it
    stops the listener and all connections started by the listener:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      3&gt; ssh:stop_daemon(Sshd)
      ok
      4&gt;
    </fo:block>

  <fo:block id="idp478816" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.4 
      One-Time Execution</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the following example, the Erlang shell is the client process
    that receives the channel replies.</fo:block>

    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The number of received messages in this example depends on which OS
    and which shell that is used on the machine running the <fo:inline font-family="monospace">ssh</fo:inline> daemon.
    See also <fo:inline font-style="italic">ssh_connection:exec/4</fo:inline>.
    </fo:block></fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Do a one-time execution of a remote command over <fo:inline font-family="monospace">ssh</fo:inline>:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      1&gt;  ssh:start().
      ok
      2&gt; {ok, ConnectionRef} = ssh:connect("tarlop", 22, []).
      {ok,&lt;0.57.0&gt;}
      3&gt;{ok, ChannelId} =  ssh_connection:session_channel(ConnectionRef, infinity).
      {ok,0}
      4&gt; success = ssh_connection:exec(ConnectionRef, ChannelId, "pwd", infinity).
      5&gt;  flush().
      Shell got {ssh_cm,&lt;0.57.0&gt;,{data,0,0,&lt;&lt;"/home/otptest\n"&gt;&gt;}}
      Shell got {ssh_cm,&lt;0.57.0&gt;,{eof,0}}
      Shell got {ssh_cm,&lt;0.57.0&gt;,{exit_status,0,0}}
      Shell got {ssh_cm,&lt;0.57.0&gt;,{closed,0}}
      ok
      6&gt;
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that only the channel is closed. The connection is still up and can
    handle other channels:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      6&gt; {ok, NewChannelId} =  ssh_connection:session_channel(ConnectionRef, infinity).
        {ok,1}
	...
    </fo:block>
  <fo:block id="idp498096" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.5 
      SFTP Server</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Start the Erlang <fo:inline font-family="monospace">ssh</fo:inline> daemon with the SFTP subsystem:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      1&gt; ssh:start().
      ok
      2&gt; ssh:daemon(8989, [{system_dir, "/tmp/ssh_daemon"},
                           {user_dir, "/tmp/otptest_user/.ssh"},
                           {subsystems, [ssh_sftpd:subsystem_spec([{cwd, "/tmp/sftp/example"}])
                                        ]}]).
      {ok,&lt;0.54.0&gt;}
      3&gt;
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Run the OpenSSH SFTP client:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      $bash&gt; sftp -oPort=8989 -o IdentityFile=/tmp/otptest_user/.ssh/id_rsa\
             -o UserKnownHostsFile=/tmp/otptest_user/.ssh/known_hosts tarlop
      Connecting to tarlop...
      sftp&gt; pwd
      Remote working directory: /tmp/sftp/example
      sftp&gt;
    </fo:block>
  <fo:block id="idp603744" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.6 
      SFTP Client</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Fetch a file with the Erlang SFTP client:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      1&gt; ssh:start().
      ok
      2&gt; {ok, ChannelPid, Connection} = ssh_sftp:start_channel("tarlop", []).
      {ok,&lt;0.57.0&gt;,&lt;0.51.0&gt;}
      3&gt;  ssh_sftp:read_file(ChannelPid, "/home/otptest/test.txt").
      {ok,&lt;&lt;"This is a test file\n"&gt;&gt;}
    </fo:block>
  <fo:block id="idp448432" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.7 
      SFTP Client with TAR Compression and Encryption</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example of writing and then reading a tar file follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      {ok,HandleWrite} = ssh_sftp:open_tar(ChannelPid, ?tar_file_name, [write]),
      ok = erl_tar:add(HandleWrite, .... ),
      ok = erl_tar:add(HandleWrite, .... ),
      ...
      ok = erl_tar:add(HandleWrite, .... ),
      ok = erl_tar:close(HandleWrite),

      %% And for reading
      {ok,HandleRead} = ssh_sftp:open_tar(ChannelPid, ?tar_file_name, [read]),
      {ok,NameValueList} = erl_tar:extract(HandleRead,[memory]),
      ok = erl_tar:close(HandleRead),
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The previous write and read example can be extended with encryption and decryption as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
%% First three parameters depending on which crypto type we select:
Key = &lt;&lt;"This is a 256 bit key. abcdefghi"&gt;&gt;,
Ivec0 = crypto:strong_rand_bytes(16),
DataSize = 1024,  % DataSize rem 16 = 0 for aes_cbc

%% Initialization of the CryptoState, in this case it is the Ivector.
InitFun = fun() -&gt; {ok, Ivec0, DataSize} end,

%% How to encrypt:
EncryptFun =
    fun(PlainBin,Ivec) -&gt;
        EncryptedBin = crypto:block_encrypt(aes_cbc256, Key, Ivec, PlainBin),
        {ok, EncryptedBin, crypto:next_iv(aes_cbc,EncryptedBin)}
    end,

%% What to do with the very last block:
CloseFun =
    fun(PlainBin, Ivec) -&gt;
        EncryptedBin = crypto:block_encrypt(aes_cbc256, Key, Ivec,
                                            pad(16,PlainBin) %% Last chunk
                                           ),
       {ok, EncryptedBin}
    end,

Cw = {InitFun,EncryptFun,CloseFun},
{ok,HandleWrite} = ssh_sftp:open_tar(ChannelPid, ?tar_file_name, [write,{crypto,Cw}]),
ok = erl_tar:add(HandleWrite, .... ),
ok = erl_tar:add(HandleWrite, .... ),
...
ok = erl_tar:add(HandleWrite, .... ),
ok = erl_tar:close(HandleWrite),

%% And for decryption (in this crypto example we could use the same InitFun
%% as for encryption):
DecryptFun =
    fun(EncryptedBin,Ivec) -&gt;
        PlainBin = crypto:block_decrypt(aes_cbc256, Key, Ivec, EncryptedBin),
       {ok, PlainBin, crypto:next_iv(aes_cbc,EncryptedBin)}
    end,

Cr = {InitFun,DecryptFun},
{ok,HandleRead} = ssh_sftp:open_tar(ChannelPid, ?tar_file_name, [read,{crypto,Cw}]),
{ok,NameValueList} = erl_tar:extract(HandleRead,[memory]),
ok = erl_tar:close(HandleRead),
    </fo:block>
  <fo:block id="idp15264" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.8 
      Creating a Subsystem</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A small <fo:inline font-family="monospace">ssh</fo:inline> subsystem that echoes N bytes can be implemented as shown
    in the following example:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(ssh_echo_server).
-behaviour(ssh_daemon_channel).
-record(state, {
	  n,
	  id,
	  cm
	 }).
-export([init/1, handle_msg/2, handle_ssh_msg/2, terminate/2]).

init([N]) -&gt;
    {ok, #state{n = N}}.

handle_msg({ssh_channel_up, ChannelId, ConnectionManager}, State) -&gt;
    {ok, State#state{id = ChannelId,
		     cm = ConnectionManager}}.

handle_ssh_msg({ssh_cm, CM, {data, ChannelId, 0, Data}}, #state{n = N} = State) -&gt;
    M = N - size(Data),
    case M &gt; 0 of
	true -&gt;
	   ssh_connection:send(CM, ChannelId, Data),
	   {ok, State#state{n = M}};
	false -&gt;
	   &lt;&lt;SendData:N/binary, _/binary&gt;&gt; = Data,
           ssh_connection:send(CM, ChannelId, SendData),
           ssh_connection:send_eof(CM, ChannelId),
	   {stop, ChannelId, State}
    end;
handle_ssh_msg({ssh_cm, _ConnectionManager,
		{data, _ChannelId, 1, Data}}, State) -&gt;
    error_logger:format(standard_error, " ~p~n", [binary_to_list(Data)]),
    {ok, State};

handle_ssh_msg({ssh_cm, _ConnectionManager, {eof, _ChannelId}}, State) -&gt;
    {ok, State};

handle_ssh_msg({ssh_cm, _, {signal, _, _}}, State) -&gt;
    %% Ignore signals according to RFC 4254 section 6.9.
    {ok, State};

handle_ssh_msg({ssh_cm, _, {exit_signal, ChannelId, _, _Error, _}},
	       State) -&gt;
    {stop, ChannelId,  State};

handle_ssh_msg({ssh_cm, _, {exit_status, ChannelId, _Status}}, State) -&gt;
    {stop, ChannelId, State}.

terminate(_Reason, _State) -&gt;
    ok.
 </fo:block>

 <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The subsystem can be run on the host <fo:inline font-weight="bold">tarlop</fo:inline> with the generated keys,
 as described in Section <fo:inline font-style="italic">
 Running an Erlang ssh Daemon</fo:inline>:</fo:block>

 <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
   1&gt; ssh:start().
   ok
   2&gt; ssh:daemon(8989, [{system_dir, "/tmp/ssh_daemon"},
                        {user_dir, "/tmp/otptest_user/.ssh"}
                        {subsystems, [{"echo_n", {ssh_echo_server, [10]}}]}]).
   {ok,&lt;0.54.0&gt;}
   3&gt;
 </fo:block>

 <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
   1&gt; ssh:start().
   ok
   2&gt;{ok, ConnectionRef} = ssh:connect("tarlop", 8989, [{user_dir, "/tmp/otptest_user/.ssh"}]).
    {ok,&lt;0.57.0&gt;}
   3&gt;{ok, ChannelId} = ssh_connection:session_channel(ConnectionRef, infinity).
   4&gt; success = ssh_connection:subsystem(ConnectionRef, ChannelId, "echo_n", infinity).
   5&gt; ok = ssh_connection:send(ConnectionRef, ChannelId, "0123456789", infinity).
   6&gt; flush().
   {ssh_msg, &lt;0.57.0&gt;, {data, 0, 1, "0123456789"}}
   {ssh_msg, &lt;0.57.0&gt;, {eof, 0}}
   {ssh_msg, &lt;0.57.0&gt;, {closed, 0}}
   7&gt; {error, closed} = ssh_connection:send(ConnectionRef, ChannelId, "10", infinity).
 </fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic"> ssh_channel(3)</fo:inline>.</fo:block>

<fo:block id="idp371296" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">2   
      Reference Manual</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">ssh</fo:inline> application is an Erlang implementation of the
      Secure Shell Protocol (SSH) as defined by RFC 4250 - 4254.</fo:block>

  <fo:block page-break-before="always" id="idp639088" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">SSH</fo:marker>SSH</fo:block>Application</fo:block>
  <fo:block/>
  SSH
  The ssh application implements the Secure Shell (SSH) protocol and
  provides an SSH File Transfer Protocol (SFTP) client and server.
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">ssh</fo:inline> application is an implementation of the SSH protocol in Erlang.
    <fo:inline font-family="monospace">ssh</fo:inline> offers API functions to write customized SSH clients and servers as well as
    making the Erlang shell available over SSH. An SFTP client, <fo:inline font-family="monospace">ssh_sftp</fo:inline>, and server,
    <fo:inline font-family="monospace">ssh_sftpd</fo:inline>, are also included.</fo:block>
  

   <fo:block id="idp1010480" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">DEPENDENCIES</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">ssh</fo:inline> application uses the applications
    <fo:inline font-style="italic">public_key</fo:inline> and
    <fo:inline font-style="italic">crypto</fo:inline> 
    to handle public keys and encryption. Hence, these
    applications must be loaded for the <fo:inline font-family="monospace">ssh</fo:inline> application to work. In
    an embedded environment this means that they must be started with
    <fo:inline font-style="italic">application:start/1,2</fo:inline> before the
    <fo:inline font-family="monospace">ssh</fo:inline> application is started.
    </fo:block>
  

   <fo:block id="idp1013392" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">CONFIGURATION</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">ssh</fo:inline> application does not have an application-
    specific configuration file, as described in <fo:inline font-style="italic">application(3)</fo:inline>.
    However, by default it use the following configuration files
    from OpenSSH:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">known_hosts</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">authorized_keys</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">authorized_keys2</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">id_dsa</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">id_rsa</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">id_ecdsa</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ssh_host_dsa_key</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ssh_host_rsa_key</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ssh_host_ecdsa_key</fo:inline></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By default, <fo:inline font-family="monospace">ssh</fo:inline> looks for <fo:inline font-family="monospace">id_dsa</fo:inline>, <fo:inline font-family="monospace">id_rsa</fo:inline>,
      <fo:inline font-family="monospace">id_ecdsa_key</fo:inline>,
      <fo:inline font-family="monospace">known_hosts</fo:inline>, and <fo:inline font-family="monospace">authorized_keys</fo:inline> in ~/.ssh,
      and for the host key files in <fo:inline font-family="monospace">/etc/ssh</fo:inline>. These locations can be changed
      by the options <fo:inline font-family="monospace">user_dir</fo:inline> and <fo:inline font-family="monospace">system_dir</fo:inline>.
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Public key handling can also be customized through a callback module that
      implements the behaviors
      <fo:inline font-style="italic">ssh_client_key_api</fo:inline> and
      <fo:inline font-style="italic">ssh_server_key_api</fo:inline>.
      </fo:block>

  
  <fo:block id="idp635968" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Public Keys</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">id_dsa</fo:inline>, <fo:inline font-family="monospace">id_rsa</fo:inline> and <fo:inline font-family="monospace">id_ecdsa</fo:inline> are the users private key files.
	Notice that the public key is part of the private key so the <fo:inline font-family="monospace">ssh</fo:inline>
	application does not use the <fo:inline font-family="monospace">id_&lt;*&gt;.pub</fo:inline> files. These are
	for the user's convenience when it is needed to convey the user's
	public key.
      </fo:block>
  
 <fo:block id="idp339776" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Known Hosts</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">known_hosts</fo:inline> file contains a list of approved servers and
      their public keys. Once a server is listed, it can be verified
      without user interaction.
      </fo:block>
  
 <fo:block id="idp351232" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Authorized Keys</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">authorized_key</fo:inline> file keeps track of the user's authorized
      public keys. The most common use of this file is to let users
      log in without entering their password, which is supported by the
      Erlang <fo:inline font-family="monospace">ssh</fo:inline> daemon.
      </fo:block>
  
 <fo:block id="idp338608" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Host Keys</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">RSA, DSA and ECDSA host keys are supported and are
       expected to be found in files named <fo:inline font-family="monospace">ssh_host_rsa_key</fo:inline>,
       <fo:inline font-family="monospace">ssh_host_dsa_key</fo:inline> and <fo:inline font-family="monospace">ssh_host_ecdsa_key</fo:inline>.
       </fo:block>
  
  <fo:block id="idp977776" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">ERROR LOGGER AND EVENT HANDLERS</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">ssh</fo:inline> application uses the default <fo:inline font-style="italic">OTP error logger</fo:inline> to log unexpected errors or print information about special events.</fo:block>
  

  <fo:block id="idp645664" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">SUPPORTED SPECIFICATIONS AND STANDARDS</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The supported SSH version is 2.0.</fo:block>
  
  <fo:block id="idp116368" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Algorithms</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The actual set of algorithms may vary depending on which OpenSSL crypto library that is installed on the machine.
    For the list on a particular installation, use the command
    <fo:inline font-style="italic">ssh:default_algorithms/0</fo:inline>. 
    The user may override the default algorithm configuration both on the server side and the client side.
    See the option <fo:inline font-family="monospace">preferred_algorithms</fo:inline> in the <fo:inline font-style="italic">ssh:daemon/1,2,3</fo:inline> and
    <fo:inline font-style="italic">ssh:connect/3,4</fo:inline> functions.
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Supported algorithms are:</fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always">Key exchange algorithms</fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>ecdh-sha2-nistp256</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>ecdh-sha2-nistp384</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>ecdh-sha2-nistp521</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>diffie-hellman-group-exchange-sha1</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>diffie-hellman-group-exchange-sha256</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>diffie-hellman-group14-sha1</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>diffie-hellman-group14-sha256</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>diffie-hellman-group16-sha512</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>diffie-hellman-group18-sha512</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>(diffie-hellman-group1-sha1, retired: can be enabled with the <fo:inline font-family="monospace">preferred_algorithms</fo:inline> option)</fo:block></fo:list-item-body></fo:list-item>
	</fo:list-block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">Public key algorithms</fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>ecdsa-sha2-nistp256</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>ecdsa-sha2-nistp384</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>ecdsa-sha2-nistp521</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>ssh-rsa</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>ssh-dss</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>rsa-sha2-256</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>rsa-sha2-512</fo:block></fo:list-item-body></fo:list-item>
	</fo:list-block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">MAC algorithms</fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>hmac-sha2-256</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>hmac-sha2-512</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>hmac-sha1</fo:block></fo:list-item-body></fo:list-item>
	</fo:list-block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">Encryption algorithms (ciphers)</fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>aes128-gcm@openssh.com</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>aes256-gcm@openssh.com</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>aes128-ctr</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>aes192-ctr</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>aes256-ctr</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>aes128-cbc</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>3des-cbc</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>(AEAD_AES_128_GCM, not enabled per default)</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>(AEAD_AES_256_GCM, not enabled per default)</fo:block></fo:list-item-body></fo:list-item>
	</fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See the text at the description of <fo:inline font-style="italic">the rfc 5647 further down</fo:inline>
	for more information regarding AEAD_AES_*_GCM.
	</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Following the internet de-facto standard, the cipher and mac algorithm AEAD_AES_128_GCM is selected when the 
	cipher aes128-gcm@openssh.com is negotiated. The cipher and mac algorithm AEAD_AES_256_GCM is selected when the
	cipher aes256-gcm@openssh.com is negotiated.
	</fo:block>
      </fo:block></fo:block-container>
	
      <fo:block keep-with-next.within-page="always">Compression algorithms</fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>none</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>zlib@openssh.com</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>zlib</fo:block></fo:list-item-body></fo:list-item>
	</fo:list-block>
      </fo:block></fo:block-container>
    </fo:block>
  
  <fo:block id="idp93376" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Unicode support</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Unicode filenames are supported if the emulator and the underlaying OS support it. See section DESCRIPTION in the
      <fo:inline font-style="italic">file</fo:inline> manual page in Kernel for information about this subject.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The shell and the cli both support unicode.
    </fo:block>
  

  <fo:block id="idp130432" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Rfcs</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following rfc:s are supported:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC 4251</fo:basic-link></fo:inline>, The Secure Shell (SSH) Protocol Architecture.
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Except</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>9.4.6 Host-Based Authentication</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>9.5.2 Proxy Forwarding</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>9.5.3 X11 Forwarding</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC 4252</fo:basic-link></fo:inline>, The Secure Shell (SSH) Authentication Protocol.
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Except</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>9. Host-Based Authentication: "hostbased"</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC 4253</fo:basic-link></fo:inline>, The Secure Shell (SSH) Transport Layer Protocol.
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Except</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>8.1.  diffie-hellman-group1-sha1. Disabled by default, can be enabled with the <fo:inline font-family="monospace">preferred_algorithms</fo:inline> option.</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC 4254</fo:basic-link></fo:inline>, The Secure Shell (SSH) Connection Protocol.
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Except</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>6.3. X11 Forwarding</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>7. TCP/IP Port Forwarding</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC 4256</fo:basic-link></fo:inline>, Generic Message Exchange Authentication for
      the Secure Shell Protocol (SSH).
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Except</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">num-prompts &gt; 1</fo:inline></fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>password changing</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>other identification methods than userid-password</fo:block></fo:list-item-body></fo:list-item>
	</fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC 4419</fo:basic-link></fo:inline>, Diffie-Hellman Group Exchange for
      the Secure Shell (SSH) Transport Layer Protocol.
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC 4716</fo:basic-link></fo:inline>, The Secure Shell (SSH) Public Key File Format.
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC 5647</fo:basic-link></fo:inline>, AES Galois Counter Mode for
      the Secure Shell Transport Layer Protocol.
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There is an ambiguity in the synchronized selection of cipher and mac algorithm. 
      This is resolved by OpenSSH in the ciphers aes128-gcm@openssh.com and aes256-gcm@openssh.com which are implemented.
      If the explicit ciphers and macs AEAD_AES_128_GCM or AEAD_AES_256_GCM are needed, 
      they could be enabled with the option preferred_algorithms.
      </fo:block>
      <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	  If the client or the server is not Erlang/OTP, it is the users responsibility to check that 
	  other implementation has the same interpretation of AEAD_AES_*_GCM as the Erlang/OTP SSH before
	  enabling them. The  aes*-gcm@openssh.com variants are always safe to use since they lack the
	  ambiguity.
	</fo:block>
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The second paragraph in section 5.1 is resolved as:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If the negotiated cipher is AEAD_AES_128_GCM, the mac algorithm is set to  AEAD_AES_128_GCM.</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If the negotiated cipher is AEAD_AES_256_GCM, the mac algorithm is set to  AEAD_AES_256_GCM.</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If the mac algorithm is AEAD_AES_128_GCM, the cipher is set to AEAD_AES_128_GCM.</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If the mac algorithm is AEAD_AES_256_GCM, the cipher is set to AEAD_AES_256_GCM.</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The first rule that matches when read in order from the top is applied</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
	
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC 5656</fo:basic-link></fo:inline>, Elliptic Curve Algorithm Integration in 
      the Secure Shell Transport Layer.
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Except</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>5.   ECMQV Key Exchange</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>6.4. ECMQV Key Exchange and Verification Method Name</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>7.2. ECMQV Message Numbers</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>10.2. Recommended Curves</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>
      
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC 6668</fo:basic-link></fo:inline>, SHA-2 Data Integrity Verification for
      the Secure Shell (SSH) Transport Layer Protocol
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Comment: Defines hmac-sha2-256 and hmac-sha2-512
      </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:basic-link external-destination="href">Draft-ietf-curdle-ssh-kex-sha2 (work in progress)</fo:basic-link></fo:inline>, Key Exchange (KEX) Method Updates and Recommendations for Secure Shell (SSH).
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Deviations:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The <fo:inline font-family="monospace">diffie-hellman-group1-sha1</fo:inline> is not enabled by default, but is still supported and can be enabled
	with the option <fo:inline font-family="monospace">preferred-algorithms</fo:inline></fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The questionable sha1-based algorithms <fo:inline font-family="monospace">diffie-hellman-group-exchange-sha1</fo:inline> and
	<fo:inline font-family="monospace">diffie-hellman-group14-sha1</fo:inline> are still enabled by default for compatibility with ancient clients and servers.
	They can be disabled with the option <fo:inline font-family="monospace">preferred-algorithms</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:basic-link external-destination="href">Draft-ietf-curdle-rsa-sha2 (work in progress)</fo:basic-link></fo:inline>, Use of RSA Keys with SHA-2 256 and 512 in Secure Shell (SSH).
      </fo:block></fo:list-item-body></fo:list-item>
      
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold"><fo:basic-link external-destination="href">Draft-ietf-curdle-ssh-ext-info (work in progress)</fo:basic-link></fo:inline>, Extension Negotiation in Secure Shell (SSH).
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Implemented are:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The Extension Negotiation Mechanism</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The extension <fo:inline font-family="monospace">server-sig-algs</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      </fo:block></fo:list-item-body></fo:list-item>
      
    </fo:list-block>

  

  <fo:block id="idp1654720" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">SEE ALSO</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">application(3)</fo:inline></fo:block>
  

<fo:block page-break-before="always" id="idp1662304" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">ssh</fo:marker>ssh</fo:block>Erlang module</fo:block>
  <fo:block/>
  ssh
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Interface module for the <fo:inline font-family="monospace">ssh</fo:inline> application.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See <fo:inline font-style="italic">ssh(6)</fo:inline> for details of supported version,
    algorithms and unicode support.</fo:block>
  

  <fo:block id="idp1329552" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">OPTIONS</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The exact behaviour of some functions can be adjusted with the use of options which are documented together
    with the functions. Generally could each option be used at most one time in each function call. If given two or more
    times, the effect is not predictable unless explicitly documented.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The options are of different kinds:</fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always">Limits</fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">which alters limits in the system, for example number of simultaneous login attempts.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">Timeouts</fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">which give some defined behaviour if too long time elapses before a given event or action,
      for example time to wait for an answer.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">Callbacks</fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">which gives the caller of the function the possibility to execute own code on some events,
      for example calling an own logging function or to perform an own login function</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">Behaviour</fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">which changes the systems behaviour.</fo:block></fo:block></fo:block-container>
    </fo:block>
  

  <fo:block id="idp1336464" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">DATA TYPES</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Type definitions that are used more than once in
    this module, or abstractions to indicate the intended use of the data
    type, or both:</fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">boolean() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">true | false</fo:inline></fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">string() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">[byte()]</fo:inline></fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ssh_daemon_ref() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">opaque() -
      as returned by <fo:inline font-family="monospace">ssh:daemon/[1,2,3]</fo:inline></fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ssh_connection_ref() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">opaque() - as returned by <fo:inline font-family="monospace">ssh:connect/3</fo:inline></fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ip_address() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">inet::ip_address</fo:inline></fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">subsystem_spec() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{subsystem_name(),
      {channel_callback(), channel_init_args()}}</fo:inline></fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">subsystem_name() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">string()</fo:inline></fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">channel_callback() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">atom()</fo:inline> - Name of the Erlang module
      implementing the subsystem using the <fo:inline font-family="monospace">ssh_channel</fo:inline> behavior, see
      <fo:inline font-style="italic">ssh_channel(3)</fo:inline></fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">key_cb() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">atom() | {atom(), list()}</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">atom()</fo:inline> - Name of the erlang module implementing the behaviours
        <fo:inline font-style="italic">ssh_client_key_api</fo:inline> or
        <fo:inline font-style="italic">ssh_client_key_api</fo:inline> as the
        case maybe.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">list()</fo:inline> - List of options that can be passed to the callback module.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">channel_init_args() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">list()</fo:inline></fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">algs_list() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">list( alg_entry() )</fo:inline></fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">alg_entry() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{kex, simple_algs()} | {public_key, simple_algs()} | {cipher, double_algs()} | {mac, double_algs()} | {compression, double_algs()}</fo:inline></fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">simple_algs() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">list( atom() )</fo:inline></fo:block></fo:block></fo:block-container>
      
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">double_algs() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">[{client2serverlist,simple_algs()},{server2client,simple_algs()}] | simple_algs()</fo:inline></fo:block></fo:block></fo:block-container>
     </fo:block>


 <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
   
   <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1473424">close(ConnectionRef) -&gt; ok </fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConnectionRef = ssh_connection_ref()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Closes an SSH connection.</fo:block>
      </fo:block>
    
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1476464">connect(Host, Port, Options) -&gt; </fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1476928">connect(Host, Port, Options, Timeout) -&gt; </fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1477408">connect(TcpSocket, Options) -&gt; </fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1477872">connect(TcpSocket, Options, Timeout) -&gt; 
      {ok, ssh_connection_ref()} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Host = string()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Port = integer()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">22</fo:inline> is default, the assigned well-known port
	number for SSH.</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = [{Option, Value}]</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = infinity | integer()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Negotiation time-out in milli-seconds. The default value is <fo:inline font-family="monospace">infinity</fo:inline>.
	For connection time-out, use option <fo:inline font-family="monospace">{connect_timeout, timeout()}</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TcpSocket = port()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The socket is supposed to be from <fo:inline font-style="italic">gen_tcp:connect</fo:inline> or <fo:inline font-style="italic">gen_tcp:accept</fo:inline> with option <fo:inline font-family="monospace">{active,false}</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Connects to an SSH server. No channel is started. This is done
	by calling
	<fo:inline font-style="italic">
	ssh_connection:session_channel/[2, 4]</fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Options:</fo:block>
	<fo:block space-after="0.25em" space-before="0.25em">
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{inet, inet | inet6}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">IP version to use.</fo:block>
	  </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{user_dir, string()}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the user directory, that is, the directory containing
	    <fo:inline font-family="monospace">ssh</fo:inline> configuration files for the user, such as
	    <fo:inline font-family="monospace">known_hosts</fo:inline>, <fo:inline font-family="monospace">id_rsa,
	    id_dsa</fo:inline>, and
	    <fo:inline font-family="monospace">authorized_key</fo:inline>. Defaults to the
	    directory normally referred to as
	    <fo:inline font-family="monospace">~/.ssh</fo:inline>.</fo:block>
	  </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{dsa_pass_phrase, string()}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the user DSA key is protected by a passphrase, it can be
	    supplied with this option.
	    </fo:block>
	  </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{rsa_pass_phrase, string()}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the user RSA key is protected by a passphrase, it can be
	    supplied with this option.
	    </fo:block>
	  </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">
            <fo:inline font-family="monospace">{silently_accept_hosts, boolean()}</fo:inline> <fo:block/>
            <fo:inline font-family="monospace">{silently_accept_hosts, CallbackFun}</fo:inline> <fo:block/>
            <fo:inline font-family="monospace">{silently_accept_hosts, {HashAlgoSpec, CallbackFun} }</fo:inline> <fo:block/>
            <fo:block/>
	    <fo:inline font-family="monospace">HashAlgoSpec = crypto:digest_type() | [ crypto:digest_type() ] </fo:inline><fo:block/>
	    <fo:inline font-family="monospace">CallbackFun = fun(PeerName, FingerPrint) -&gt; boolean()</fo:inline><fo:block/>
	    <fo:inline font-family="monospace">PeerName = string()</fo:inline><fo:block/>
	    <fo:inline font-family="monospace">FingerPrint = string() | [ string() ] </fo:inline>
	  </fo:block>
	  <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This option guides the <fo:inline font-family="monospace">connect</fo:inline> function how to act when the connected server presents a Host 
            Key that the client has not seen before. The default is to ask the user with a question on stdio of whether to
            accept or reject the new Host Key.
            See also the option <fo:inline font-style="italic"><fo:inline font-family="monospace">user_dir</fo:inline></fo:inline>
            for the path to the file <fo:inline font-family="monospace">known_hosts</fo:inline> where previously accepted Host Keys are recorded.
            </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The option can be given in three different forms as seen above:</fo:block>
	    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The value is a <fo:inline font-family="monospace">boolean()</fo:inline>.  The value <fo:inline font-family="monospace">true</fo:inline> will make the client accept any unknown
              Host Key without any user interaction.  The value <fo:inline font-family="monospace">false</fo:inline> keeps the default behaviour of asking the
              the user on stdio.
              </fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A <fo:inline font-family="monospace">CallbackFun</fo:inline> will be called and the boolean return value <fo:inline font-family="monospace">true</fo:inline> will make the client
              accept the Host Key. A return value of <fo:inline font-family="monospace">false</fo:inline> will make the client to reject the Host Key and therefore
              also the connection will be closed. The arguments to the fun are:
              <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">PeerName</fo:inline> - a string with the name or address of the remote host.</fo:block></fo:list-item-body></fo:list-item>
                <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">FingerPrint</fo:inline> - the fingerprint of the Host Key as 
                <fo:inline font-style="italic">public_key:ssh_hostkey_fingerprint/1</fo:inline>
                calculates it.
                </fo:block></fo:list-item-body></fo:list-item>
              </fo:list-block>
              </fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A tuple <fo:inline font-family="monospace">{HashAlgoSpec, CallbackFun}</fo:inline>. The <fo:inline font-family="monospace">HashAlgoSpec</fo:inline> specifies which hash algorithm
                shall be used to calculate the fingerprint used in the call of the <fo:inline font-family="monospace">CallbackFun</fo:inline>. The <fo:inline font-family="monospace">HashALgoSpec</fo:inline>
                is either an atom or a list of atoms as the first argument in
                <fo:inline font-style="italic">public_key:ssh_hostkey_fingerprint/2</fo:inline>.
                If it is a list of hash algorithm names, the <fo:inline font-family="monospace">FingerPrint</fo:inline> argument in the <fo:inline font-family="monospace">CallbackFun</fo:inline> will be 
                a list of fingerprints in the same order as the corresponding name in the <fo:inline font-family="monospace">HashAlgoSpec</fo:inline> list.
              </fo:block></fo:list-item-body></fo:list-item>
            </fo:list-block>
	  </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{user_interaction, boolean()}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">false</fo:inline>, disables the client to connect to the server
	    if any user interaction is needed, such as accepting
	    the server to be added to the <fo:inline font-family="monospace">known_hosts</fo:inline> file, or
	    supplying a password. Defaults to <fo:inline font-family="monospace">true</fo:inline>.
	    Even if user interaction is allowed it can be
	    suppressed by other options, such as <fo:inline font-family="monospace">silently_accept_hosts</fo:inline>
	    and <fo:inline font-family="monospace">password</fo:inline>. However, those options are not always desirable
	    to use from a security point of view.</fo:block>
	  </fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{disconnectfun, fun(Reason:term()) -&gt; _}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Provides a fun to implement your own logging when a server disconnects the client.</fo:block>
	  </fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{unexpectedfun, fun(Message:term(), Peer) -&gt; report | skip }</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Provides a fun to implement your own logging or other action when an unexpected message arrives.
	    If the fun returns <fo:inline font-family="monospace">report</fo:inline> the usual info report is issued but if <fo:inline font-family="monospace">skip</fo:inline> is returned no
	    report is generated.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Peer</fo:inline> is in the format of <fo:inline font-family="monospace">{Host,Port}</fo:inline>.</fo:block>
	  </fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{pref_public_key_algs, list()}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">List of user (client) public key algorithms to try to use.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default value is the <fo:inline font-family="monospace">public_key</fo:inline> entry in 
	    <fo:inline font-style="italic">ssh:default_algorithms/0</fo:inline>.
	    </fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If there is no public key of a specified type available, the corresponding entry is ignored.
	    Note that the available set is dependent on the underlying cryptolib and current user's public keys.
	    </fo:block>
	  </fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{preferred_algorithms, algs_list()}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">List of algorithms to use in the algorithm negotiation. The default <fo:inline font-family="monospace">algs_list()</fo:inline> can
	    be obtained from <fo:inline font-style="italic">default_algorithms/0</fo:inline>.
	    </fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If an alg_entry() is missing in the algs_list(), the default value is used for that entry.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here is an example of this option:</fo:block>
	<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{preferred_algorithms, 
 [{public_key,['ssh-rsa','ssh-dss']},
  {cipher,[{client2server,['aes128-ctr']},
           {server2client,['aes128-cbc','3des-cbc']}]},
  {mac,['hmac-sha2-256','hmac-sha1']},
  {compression,[none,zlib]}
  ]
}
</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The example specifies different algorithms in the two directions (client2server and server2client),
	for cipher but specifies the same algorithms for mac and compression in both directions.
	The kex (key exchange) is implicit but public_key is set explicitly.</fo:block>

        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Changing the values can make a connection less secure. Do not change unless you
	  know exactly what you are doing. If you do not understand the values then you
	  are not supposed to change them.</fo:block>
	</fo:block>
	  </fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{dh_gex_limits,{Min=integer(),I=integer(),Max=integer()}}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the three diffie-hellman-group-exchange parameters that guides the connected server in choosing a group.
	    See RFC 4419 for the function of thoose.  The default value is <fo:inline font-family="monospace">{1024, 6144, 8192}</fo:inline>.
	    </fo:block>
	  </fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{connect_timeout, timeout()}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets a time-out on the transport layer
	    connection. For <fo:inline font-family="monospace">gen_tcp</fo:inline> the time is in milli-seconds and the default value is
	    <fo:inline font-family="monospace">infinity</fo:inline>.</fo:block>
	  </fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{auth_methods, string()}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Comma-separated string that determines which
	    authentication methods that the client shall support and
	    in which order they are tried. Defaults to
	    <fo:inline font-family="monospace">"publickey,keyboard-interactive,password"</fo:inline></fo:block>
          </fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{user, string()}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Provides a username. If this option is not given, <fo:inline font-family="monospace">ssh</fo:inline>
	    reads from the environment (<fo:inline font-family="monospace">LOGNAME</fo:inline> or
	    <fo:inline font-family="monospace">USER</fo:inline> on UNIX,
	    <fo:inline font-family="monospace">USERNAME</fo:inline> on Windows).</fo:block>
          </fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{password, string()}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Provides a password for password authentication.
	    If this option is not given, the user is asked for a
	    password, if the password authentication method is
	    attempted.</fo:block>
          </fo:block></fo:block-container>

	  

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{recv_ext_info, boolean()}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tell the server that the client accepts extension negotiation.  See 
	    <fo:inline font-weight="bold"><fo:basic-link external-destination="href">Draft-ietf-curdle-ssh-ext-info (work in progress)</fo:basic-link></fo:inline> for details.
	    </fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Currently implemented extension is <fo:inline font-family="monospace">server-sig-algs</fo:inline> which is the list of the server's preferred
	    user's public key algorithms.
	    </fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default value is <fo:inline font-family="monospace">true</fo:inline>.
	    </fo:block>
          </fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{key_cb, key_cb()}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Module implementing the behaviour <fo:inline font-style="italic">ssh_client_key_api</fo:inline>. Can be used to
	    customize the handling of public keys. If callback options are provided
	    along with the module name, they are made available to the callback
	    module via the options passed to it under the key 'key_cb_private'.
	    </fo:block>
	  </fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{quiet_mode, atom() = boolean()}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">true</fo:inline>, the client does not print anything on authorization.</fo:block>
	  </fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{id_string, random | string()}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The string that the client presents to a connected server initially.  The default value is "Erlang/VSN" where VSN is the ssh application version number.
	    </fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The value <fo:inline font-family="monospace">random</fo:inline> will cause a random string to be created at each connection attempt.  This is to make it a bit more difficult for a malicious peer to find the ssh software brand and version.
	    </fo:block>
	  </fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{fd, file_descriptor()}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allows an existing file descriptor to be used
	  (by passing it on to the transport protocol).</fo:block></fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{rekey_limit, integer()}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Provides, in bytes, when rekeying is to be initiated.
	    Defaults to once per each GB and once per hour.</fo:block>
	  </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{idle_time, integer()}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets a time-out on a connection when no channels are active.
	  Defaults to <fo:inline font-family="monospace">infinity</fo:inline>.</fo:block></fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{ssh_msg_debug_fun, fun(ConnectionRef::ssh_connection_ref(), AlwaysDisplay::boolean(), Msg::binary(), LanguageTag::binary()) -&gt; _}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Provide a fun to implement your own logging of the SSH message SSH_MSG_DEBUG. The last three parameters are from the message, see RFC4253, section 11.3. The <fo:inline font-family="monospace">ConnectionRef</fo:inline> is the reference to the connection on which the message arrived. The return value from the fun is not checked.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default behaviour is ignore the message.
	    To get a printout for each message with <fo:inline font-family="monospace">AlwaysDisplay = true</fo:inline>, use for example <fo:inline font-family="monospace">{ssh_msg_debug_fun, fun(_,true,M,_)-&gt; io:format("DEBUG: ~p~n", [M]) end}</fo:inline></fo:block>
	  </fo:block></fo:block-container>

	</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1569248">connection_info(ConnectionRef, [Option]) -&gt;[{Option,
      Value}]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Option = client_version | server_version | user | peer | sockname </fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value = [option_value()] </fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">option_value() = {{Major::integer(), Minor::integer()}, VersionString::string()} |
	User::string() |  Peer::{inet:hostname(), {inet::ip_adress(), inet::port_number()}} |
	Sockname::{inet::ip_adress(), inet::port_number()}</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Retrieves information about a connection.</fo:block>
      </fo:block>
    
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1573664">daemon(Port) -&gt; </fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1574112">daemon(Port, Options) -&gt; </fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1574576">daemon(HostAddress, Port, Options) -&gt; </fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1575040">daemon(TcpSocket) -&gt; </fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1575488">daemon(TcpSocket, Options) -&gt; {ok, ssh_daemon_ref()} | {error, atom()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Port = integer()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">HostAddress = ip_address() | any | loopback</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = [{Option, Value}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Option = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value = term()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TcpSocket = port()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The socket is supposed to be from <fo:inline font-style="italic">gen_tcp:connect</fo:inline> or <fo:inline font-style="italic">gen_tcp:accept</fo:inline> with option <fo:inline font-family="monospace">{active,false}</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts a server listening for SSH connections on the given
        port. If the <fo:inline font-family="monospace">Port</fo:inline> is 0, a random free port is selected. See
	<fo:inline font-style="italic">daemon_info/1</fo:inline> about how to find the selected port number.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Please note that by historical reasons both the <fo:inline font-family="monospace">HostAddress</fo:inline> argument and the inet socket option
	<fo:inline font-family="monospace">ip</fo:inline> set the listening address. This is a source of possible inconsistent settings.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The rules for handling the two address passing options are:</fo:block>
	<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>if <fo:inline font-family="monospace">HostAddress</fo:inline> is an IP-address, that IP-address is the listening address.
	  An 'ip'-option will be discarded if present.</fo:block></fo:list-item-body></fo:list-item>

	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>if <fo:inline font-family="monospace">HostAddress</fo:inline> is <fo:inline font-family="monospace">loopback</fo:inline>, the listening address
	  is <fo:inline font-family="monospace">loopback</fo:inline> and an loopback address will be choosen by the underlying layers.
	  An 'ip'-option will be discarded if present.</fo:block></fo:list-item-body></fo:list-item>

	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>if <fo:inline font-family="monospace">HostAddress</fo:inline> is <fo:inline font-family="monospace">any</fo:inline> and no 'ip'-option is present, the listening address is
	  <fo:inline font-family="monospace">any</fo:inline> and the socket will listen to all addresses</fo:block></fo:list-item-body></fo:list-item>

	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>if <fo:inline font-family="monospace">HostAddress</fo:inline> is <fo:inline font-family="monospace">any</fo:inline> and an 'ip'-option is present, the listening address is
	  set to the value of the 'ip'-option</fo:block></fo:list-item-body></fo:list-item>
	</fo:list-block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Options:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{inet, inet | inet6}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">IP version to use when the host address is specified as <fo:inline font-family="monospace">any</fo:inline>.</fo:block></fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{subsystems, [subsystem_spec()]}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Provides specifications for handling of subsystems. The
	    "sftp" subsystem specification is retrieved by calling
	    <fo:inline font-family="monospace">ssh_sftpd:subsystem_spec/1</fo:inline>. If the subsystems option is
	    not present, the value of
	    <fo:inline font-family="monospace">[ssh_sftpd:subsystem_spec([])]</fo:inline> is used.
	    The option can be set to the empty list if
	    you do not want the daemon to run any subsystems.</fo:block>
	  </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{shell, {Module, Function, Args} |
	  fun(string() = User) - &gt; pid() | fun(string() = User,
	  ip_address() = PeerAddr) -&gt; pid()}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines the read-eval-print loop used when a shell is
	    requested by the client. The default is to use the Erlang shell:
	    <fo:inline font-family="monospace">{shell, start, []}</fo:inline></fo:block>
	  </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{ssh_cli, {channel_callback(),
	  channel_init_args()} | no_cli}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Provides your own CLI implementation, that is, a channel callback
	    module that implements a shell and command execution. The shell
	    read-eval-print loop can be customized, using the
	    option <fo:inline font-family="monospace">shell</fo:inline>. This means less work than implementing
	    an own CLI channel. If set to <fo:inline font-family="monospace">no_cli</fo:inline>, the CLI channels
	    are disabled and only subsystem channels are allowed.</fo:block>
	  </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{user_dir, string()}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the user directory. That is, the directory containing
	    <fo:inline font-family="monospace">ssh</fo:inline> configuration files for the user, such as
	    <fo:inline font-family="monospace">known_hosts</fo:inline>, <fo:inline font-family="monospace">id_rsa,
	    id_dsa</fo:inline>, and
	    <fo:inline font-family="monospace">authorized_key</fo:inline>. Defaults to the
	    directory normally referred to as
	    <fo:inline font-family="monospace">~/.ssh</fo:inline>.</fo:block>
	  </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{system_dir, string()}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the system directory, containing the host key files
            that identify the host keys for <fo:inline font-family="monospace">ssh</fo:inline>. Defaults to
            <fo:inline font-family="monospace">/etc/ssh</fo:inline>. For security reasons,
            this directory is normally accessible only to the root user.</fo:block>
	  </fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{auth_methods, string()}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Comma-separated string that determines which
	    authentication methods that the server is to support and
	    in what order they are tried. Defaults to
	    <fo:inline font-family="monospace">"publickey,keyboard-interactive,password"</fo:inline></fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that the client is free to use any order and to exclude methods.</fo:block>
          </fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{auth_method_kb_interactive_data, PromptTexts}</fo:inline>
	  <fo:block/><fo:inline font-family="monospace">where:</fo:inline>
	  <fo:block/><fo:inline font-family="monospace">PromptTexts = kb_int_tuple()  | fun(Peer::{IP::tuple(),Port::integer()}, User::string(), Service::string()) -&gt;  kb_int_tuple()</fo:inline>
	  <fo:block/><fo:inline font-family="monospace">kb_int_tuple() = {Name::string(), Instruction::string(), Prompt::string(), Echo::boolean()}</fo:inline>
	  </fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the text strings that the daemon sends to the client for presentation to the user when using <fo:inline font-family="monospace">keyboar-interactive</fo:inline> authentication. If the fun/3 is used, it is called when the actual authentication occurs and may therefore return dynamic data like time, remote ip etc.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The parameter <fo:inline font-family="monospace">Echo</fo:inline> guides the client about need to hide the password.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default value is:
	    <fo:inline font-family="monospace">{auth_method_kb_interactive_data, {"SSH server", "Enter password for \""++User++"\"", "password: ", false}&gt;</fo:inline></fo:block>
          </fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{user_passwords, [{string() = User,
	  string() = Password}]}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Provides passwords for password authentication. The passwords
	    are used when someone tries to connect to the server and
	    public key user-authentication fails. The option provides
	    a list of valid usernames and the corresponding passwords.
	    </fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{password, string()}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Provides a global password that authenticates any
              user. From a security perspective this option makes
	      the server very vulnerable.</fo:block>
	  </fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{preferred_algorithms, algs_list()}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">List of algorithms to use in the algorithm negotiation. The default <fo:inline font-family="monospace">algs_list()</fo:inline> can
	    be obtained from <fo:inline font-style="italic">default_algorithms/0</fo:inline>.
	    </fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If an alg_entry() is missing in the algs_list(), the default value is used for that entry.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here is an example of this option:</fo:block>
	<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{preferred_algorithms, 
 [{public_key,['ssh-rsa','ssh-dss']},
  {cipher,[{client2server,['aes128-ctr']},
           {server2client,['aes128-cbc','3des-cbc']}]},
  {mac,['hmac-sha2-256','hmac-sha1']},
  {compression,[none,zlib]}
  ]
}
</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The example specifies different algorithms in the two directions (client2server and server2client),
	for cipher but specifies the same algorithms for mac and compression in both directions.
	The kex (key exchange) is implicit but public_key is set explicitly.</fo:block>

        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Changing the values can make a connection less secure. Do not change unless you
	  know exactly what you are doing. If you do not understand the values then you
	  are not supposed to change them.</fo:block>
	</fo:block>
	  </fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{dh_gex_groups, [{Size=integer(),G=integer(),P=integer()}] | {file,filename()} {ssh_moduli_file,filename()} }</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines the groups the server may choose among when diffie-hellman-group-exchange is negotiated.
	    See RFC 4419 for details. The three variants of this option are:
	    </fo:block>
	    <fo:block space-after="0.25em" space-before="0.25em">
	      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{Size=integer(),G=integer(),P=integer()}</fo:inline></fo:block>
	      <fo:block-container><fo:block start-indent="2em">The groups are given explicitly in this list. There may be several elements with the same <fo:inline font-family="monospace">Size</fo:inline>.
	      In such a case, the server will choose one randomly in the negotiated Size.
	      </fo:block></fo:block-container>
	      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{file,filename()}</fo:inline></fo:block>
	      <fo:block-container><fo:block start-indent="2em">The file must have one or more three-tuples <fo:inline font-family="monospace">{Size=integer(),G=integer(),P=integer()}</fo:inline> 
	      terminated by a dot. The file is read when the daemon starts.
	      </fo:block></fo:block-container>
	      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{ssh_moduli_file,filename()}</fo:inline></fo:block>
	      <fo:block-container><fo:block start-indent="2em">The file must be in
	      <fo:inline font-style="italic">ssh-keygen moduli file format</fo:inline>.
	      The file is read when the daemon starts.
	      </fo:block></fo:block-container>
	    </fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default list is fetched from the 
	      <fo:inline font-style="italic">public_key</fo:inline> application.
	    </fo:block>
	  </fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{dh_gex_limits,{Min=integer(),Max=integer()}}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Limits what a client can ask for in diffie-hellman-group-exchange.
	    The limits will be
	    <fo:inline font-family="monospace">{MaxUsed = min(MaxClient,Max), MinUsed = max(MinClient,Min)}</fo:inline> where <fo:inline font-family="monospace">MaxClient</fo:inline> and 
	    <fo:inline font-family="monospace">MinClient</fo:inline> are the values proposed by a connecting client.
	    </fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default value is <fo:inline font-family="monospace">{0,infinity}</fo:inline>.
	    </fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">MaxUsed &lt; MinUsed</fo:inline> in a key exchange, it will fail with a disconnect.
	    </fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See RFC 4419 for the function of the Max and Min values.</fo:block>
	  </fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{pwdfun, fun(User::string(), Password::string(), PeerAddress::{ip_adress(),port_number()}, State::any()) -&gt; boolean() | disconnect | {boolean(),any()} }</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Provides a function for password validation. This could used for calling an external system or if
	    passwords should be stored as a hash. The fun returns:
	    </fo:block>
	    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">true</fo:inline> if the user and password is valid and</fo:block></fo:list-item-body></fo:list-item>
	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">false</fo:inline> otherwise.</fo:block></fo:list-item-body></fo:list-item> 
	    </fo:list-block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This fun can also be used to make delays in authentication tries for example by calling
	      <fo:inline font-style="italic">timer:sleep/1</fo:inline>. To facilitate counting of failed tries
	      the <fo:inline font-family="monospace">State</fo:inline> variable could be used. This state is per connection only. The first time the pwdfun
	      is called for a connection, the <fo:inline font-family="monospace">State</fo:inline> variable has the value <fo:inline font-family="monospace">undefined</fo:inline>.  
	      The pwdfun can return - in addition to the values above - a new state
	      as:
	    </fo:block>
	    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{true,  NewState:any()}</fo:inline> if the user and password is valid or</fo:block></fo:list-item-body></fo:list-item>
	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{false, NewState:any()}</fo:inline> if the user or password is invalid</fo:block></fo:list-item-body></fo:list-item> 
	    </fo:list-block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A third usage is to block login attempts from a missbehaving peer. The <fo:inline font-family="monospace">State</fo:inline> described above 
	    can be used for this. In addition to the responses above, the following return value is introduced:
	    </fo:block>
	    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">disconnect</fo:inline> if the connection should be closed immediately after sending a SSH_MSG_DISCONNECT
	      message.</fo:block></fo:list-item-body></fo:list-item>
	    </fo:list-block>
	  </fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{pwdfun, fun(User::string(), Password::string()) -&gt; boolean()}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Provides a function for password validation. This function is called
	      with user and password as strings, and returns
	      <fo:inline font-family="monospace">true</fo:inline> if the password is valid and
	      <fo:inline font-family="monospace">false</fo:inline> otherwise.</fo:block>
	      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This option (<fo:inline font-family="monospace">{pwdfun,fun/2}</fo:inline>) is the same as a subset of the previous 
	      (<fo:inline font-family="monospace">{pwdfun,fun/4}</fo:inline>). It is kept for compatibility.</fo:block>
	  </fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{negotiation_timeout, integer()}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Maximum time in milliseconds for the authentication negotiation.
	    Defaults to 120000 (2 minutes). If the client fails to log in within this time,
	    the connection is closed.
	    </fo:block>
	  </fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{max_sessions, pos_integer()}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The maximum number of simultaneous sessions that are accepted at any time
	    for this daemon. This includes sessions that are being authorized.
	    Thus, if set to <fo:inline font-family="monospace">N</fo:inline>, and <fo:inline font-family="monospace">N</fo:inline> clients have connected but not started
	    the login process, connection attempt <fo:inline font-family="monospace">N+1</fo:inline> is aborted.
	    If <fo:inline font-family="monospace">N</fo:inline> connections are authenticated and still logged in, no more logins
	    are accepted until one of the existing ones log out.
	    </fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The counter is per listening port. Thus, if two daemons are started, one with
	    <fo:inline font-family="monospace">{max_sessions,N}</fo:inline> and the other with <fo:inline font-family="monospace">{max_sessions,M}</fo:inline>, in total
	    <fo:inline font-family="monospace">N+M</fo:inline> connections are accepted for the whole <fo:inline font-family="monospace">ssh</fo:inline> application.
	    </fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that if <fo:inline font-family="monospace">parallel_login</fo:inline> is <fo:inline font-family="monospace">false</fo:inline>, only one client
	    at a time can be in the authentication phase.
	    </fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By default, this option is not set. This means that the number is not limited.
	    </fo:block>
	  </fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{max_channels, pos_integer()}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The maximum number of channels with active remote subsystem that are accepted for
	    each connection to this daemon</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By default, this option is not set. This means that the number is not limited.
	    </fo:block>
	  </fo:block></fo:block-container>


	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{parallel_login, boolean()}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If set to false (the default value), only one login is handled at a time.
	    If set to true, an unlimited number of login attempts are allowed simultaneously.
	    </fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the <fo:inline font-family="monospace">max_sessions</fo:inline> option is set to <fo:inline font-family="monospace">N</fo:inline> and <fo:inline font-family="monospace">parallel_login</fo:inline>
	    is set to <fo:inline font-family="monospace">true</fo:inline>, the maximum number of simultaneous login attempts at any time is
	    limited to <fo:inline font-family="monospace">N-K</fo:inline>, where <fo:inline font-family="monospace">K</fo:inline> is the number of authenticated connections present
	    at this daemon.
	    </fo:block>
	    <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
	      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Do not enable <fo:inline font-family="monospace">parallel_logins</fo:inline> without protecting the server by other means,
	      for example, by the <fo:inline font-family="monospace">max_sessions</fo:inline> option or a firewall configuration. If set to
	      <fo:inline font-family="monospace">true</fo:inline>, there is no protection against DOS attacks.</fo:block>
	    </fo:block>
	  </fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{minimal_remote_max_packet_size, non_negative_integer()}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The least maximum packet size that the daemon will accept in channel open requests from the client.  The default value is 0.
	    </fo:block>
	  </fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{id_string, random | string()}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The string the daemon will present to a connecting peer initially.  The default value is "Erlang/VSN" where VSN is the ssh application version number.
	    </fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The value <fo:inline font-family="monospace">random</fo:inline> will cause a random string to be created at each connection attempt.  This is to make it a bit more difficult for a malicious peer to find the ssh software brand and version.
	    </fo:block>
	  </fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{send_ext_info, boolean()}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Send a list of extensions to the client if the client has asked for it. See 
	    <fo:inline font-weight="bold"><fo:basic-link external-destination="href">Draft-ietf-curdle-ssh-ext-info (work in progress)</fo:basic-link></fo:inline> for details.
	    </fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Currently implemented extension is sending <fo:inline font-family="monospace">server-sig-algs</fo:inline> which is the list of the server's preferred
	    user's public key algorithms.
	    </fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default value is <fo:inline font-family="monospace">true</fo:inline>.
	    </fo:block>
          </fo:block></fo:block-container>

	  

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{key_cb, key_cb()}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Module implementing the behaviour <fo:inline font-style="italic">ssh_server_key_api</fo:inline>. Can be used to
	    customize the handling of public keys. If callback options are provided
	    along with the module name, they are made available to the callback
	    module via the options passed to it under the key 'key_cb_private'.
	    </fo:block>
	  </fo:block></fo:block-container>
	  
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{profile, atom()}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Used together with <fo:inline font-family="monospace">ip-address</fo:inline> and <fo:inline font-family="monospace">port</fo:inline> to
	    uniquely identify a ssh daemon. This can be useful in a
	    virtualized environment, where there can be more that one
	    server that has the same <fo:inline font-family="monospace">ip-address</fo:inline> and
	    <fo:inline font-family="monospace">port</fo:inline>. If this property is not explicitly set, it is
	    assumed that the the <fo:inline font-family="monospace">ip-address</fo:inline> and <fo:inline font-family="monospace">port</fo:inline>
	    uniquely identifies the SSH daemon.
	    </fo:block>
	  </fo:block></fo:block-container>
	  
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{fd, file_descriptor()}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allows an existing file-descriptor to be used
	  (passed on to the transport protocol).</fo:block></fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{failfun, fun(User::string(),
	  PeerAddress::ip_address(), Reason::term()) -&gt; _}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Provides a fun to implement your own logging when a user fails to authenticate.</fo:block>
	  </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{connectfun, fun(User::string(), PeerAddress::ip_address(),
	  Method::string()) -&gt;_}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Provides a fun to implement your own logging when a user authenticates to the server.</fo:block>
	  </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{disconnectfun, fun(Reason:term()) -&gt; _}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Provides a fun to implement your own logging when a user disconnects from the server.</fo:block>
	  </fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{unexpectedfun, fun(Message:term(), Peer) -&gt; report | skip }</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Provides a fun to implement your own logging or other action when an unexpected message arrives.
	    If the fun returns <fo:inline font-family="monospace">report</fo:inline> the usual info report is issued but if <fo:inline font-family="monospace">skip</fo:inline> is returned no
	    report is generated.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Peer</fo:inline> is in the format of <fo:inline font-family="monospace">{Host,Port}</fo:inline>.</fo:block>
	  </fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{idle_time, integer()}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets a time-out on a connection when no channels are active.
	  Defaults to <fo:inline font-family="monospace">infinity</fo:inline>.</fo:block>
	  </fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{ssh_msg_debug_fun, fun(ConnectionRef::ssh_connection_ref(), AlwaysDisplay::boolean(), Msg::binary(), LanguageTag::binary()) -&gt; _}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Provide a fun to implement your own logging of the SSH message SSH_MSG_DEBUG. The last three parameters are from the message, see RFC4253, section 11.3. The <fo:inline font-family="monospace">ConnectionRef</fo:inline> is the reference to the connection on which the message arrived. The return value from the fun is not checked.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default behaviour is ignore the message.
	    To get a printout for each message with <fo:inline font-family="monospace">AlwaysDisplay = true</fo:inline>, use for example <fo:inline font-family="monospace">{ssh_msg_debug_fun, fun(_,true,M,_)-&gt; io:format("DEBUG: ~p~n", [M]) end}</fo:inline></fo:block>
	  </fo:block></fo:block-container>

	</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1934848">daemon_info(Daemon) -&gt; {ok, [DaemonInfo]} | {error,Error}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DaemonInfo = {port,Port::pos_integer()} | {listen_address, any|ip_address()} | {profile,atom()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Port = integer()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Error = bad_daemon_ref</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a key-value list with information about the daemon. For now, only the listening port is returned. This is intended for the case the daemon is started with the port set to 0.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1939168">default_algorithms() -&gt; algs_list()</fo:block></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a key-value list, where the keys are the different types of algorithms and the values are the
	algorithms themselves. An example:</fo:block>
	<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
20&gt; ssh:default_algorithms().
[{kex,['diffie-hellman-group1-sha1']},
 {public_key,['ssh-rsa','ssh-dss']},
 {cipher,[{client2server,['aes128-ctr','aes128-cbc','3des-cbc']},
          {server2client,['aes128-ctr','aes128-cbc','3des-cbc']}]},
 {mac,[{client2server,['hmac-sha2-256','hmac-sha1']},
       {server2client,['hmac-sha2-256','hmac-sha1']}]},
 {compression,[{client2server,[none,zlib]},
               {server2client,[none,zlib]}]}]
21&gt; 
</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1942736">shell(Host) -&gt; </fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1943184">shell(Host, Option) -&gt; </fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1943632">shell(Host, Port, Option) -&gt; </fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1944096">shell(TcpSocket) -&gt; _</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Host = string()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Port = integer()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options - see ssh:connect/3</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TcpSocket = port()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The socket is supposed to be from <fo:inline font-style="italic">gen_tcp:connect</fo:inline> or <fo:inline font-style="italic">gen_tcp:accept</fo:inline> with option <fo:inline font-family="monospace">{active,false}</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts an interactive shell over an SSH server on the
	given <fo:inline font-family="monospace">Host</fo:inline>. The function waits for user input,
	and does not return until the remote shell is ended (that is,
	exit from the shell).
	</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1951440">start() -&gt; </fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1951888">start(Type) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Type =  permanent | transient | temporary</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term() </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Utility function that starts the applications <fo:inline font-family="monospace">crypto</fo:inline>, <fo:inline font-family="monospace">public_key</fo:inline>,
	and <fo:inline font-family="monospace">ssh</fo:inline>. Default type is <fo:inline font-family="monospace">temporary</fo:inline>.
	For more information, see the <fo:inline font-style="italic">application(3)</fo:inline>
	manual page in Kernel.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1958112">stop() -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stops the <fo:inline font-family="monospace">ssh</fo:inline> application.
	For more information, see the <fo:inline font-style="italic">application(3)</fo:inline>
	manual page in Kernel.</fo:block>
      </fo:block>
    
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1962928">stop_daemon(DaemonRef) -&gt; </fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1963392">stop_daemon(Address, Port) -&gt; ok </fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DaemonRef = ssh_daemon_ref()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Address = ip_address()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Port = integer()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stops the listener and all connections started by 
	the listener.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1967552">stop_listener(DaemonRef) -&gt; </fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1968016">stop_listener(Address, Port) -&gt; ok </fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DaemonRef = ssh_daemon_ref()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Address = ip_address()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Port = integer()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stops the listener, but leaves existing connections started
	by the listener operational.</fo:block>
      </fo:block>

  
  
<fo:block page-break-before="always" id="idp1978304" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">ssh_channel</fo:marker>ssh_channel</fo:block>Erlang module</fo:block>
  <fo:block/>
  ssh_channel
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">SSH services (clients and servers) are implemented as channels
    that are multiplexed over an SSH connection and communicates over
    the <fo:inline font-weight="bold"><fo:basic-link external-destination="href"> SSH
    Connection Protocol</fo:basic-link></fo:inline>. This module provides a callback API
    that takes care of generic channel aspects, such as flow control
    and close messages. It lets the callback functions take care of
    the service (application) specific parts. This behavior also ensures
    that the channel process honors the principal of an OTP-process so
    that it can be part of a supervisor tree. This is a requirement of
    channel processes implementing a subsystem that will be added to
    the <fo:inline font-family="monospace">ssh</fo:inline> applications supervisor tree.
    </fo:block>

    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When implementing an <fo:inline font-family="monospace">ssh</fo:inline> subsystem, use
    <fo:inline font-family="monospace">-behaviour(ssh_daemon_channel)</fo:inline> instead of <fo:inline font-family="monospace">-behaviour(ssh_channel)</fo:inline>.
    The reason is that the only relevant callback functions for subsystems are
    <fo:inline font-family="monospace">init/1</fo:inline>, <fo:inline font-family="monospace">handle_ssh_msg/2</fo:inline>, <fo:inline font-family="monospace">handle_msg/2</fo:inline>, and <fo:inline font-family="monospace">terminate/2</fo:inline>.
    So, the <fo:inline font-family="monospace">ssh_daemon_channel</fo:inline> behaviour is a limited version of the
    <fo:inline font-family="monospace">ssh_channel</fo:inline> behaviour.
    </fo:block></fo:block>
  

  <fo:block id="idp1986912" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">DATA TYPES</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Type definitions that are used more than once in this module,
    or abstractions to indicate the intended use of the data
    type, or both:</fo:block>
    
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">boolean() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">true | false</fo:inline></fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">string() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">list of ASCII characters</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">timeout() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">infinity | integer()</fo:inline> in milliseconds</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ssh_connection_ref() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">opaque() -as returned by
      <fo:inline font-family="monospace">ssh:connect/3</fo:inline> or sent to an SSH channel process</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ssh_channel_id() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">integer()</fo:inline></fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ssh_data_type_code() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">1</fo:inline> ("stderr") | <fo:inline font-family="monospace">0</fo:inline> ("normal") are
      the valid values,
      see <fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC 4254</fo:basic-link></fo:inline>
      Section 5.2</fo:block></fo:block></fo:block-container>
    </fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1998576">call(ChannelRef, Msg) -&gt;</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1999040">call(ChannelRef, Msg, Timeout) -&gt; Reply | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelRef = pid() </fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>As returned by <fo:inline font-style="italic">ssh_channel:start_link/4</fo:inline></fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Msg = term()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reply = term()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = closed | timeout</fo:block></fo:list-item-body></fo:list-item>

      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Makes a synchronous call to the channel process by sending
	a message and waiting until a reply arrives, or a time-out
	occurs. The channel calls <fo:inline font-style="italic">Module:handle_call/3</fo:inline>
	to handle the message. If the channel process does not exist,
	<fo:inline font-family="monospace">{error, closed}</fo:inline> is returned.
	</fo:block>
      </fo:block>
    
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2006416">cast(ChannelRef, Msg) -&gt; ok </fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelRef = pid()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>As returned by <fo:inline font-style="italic">ssh_channel:start_link/4</fo:inline></fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Msg = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends an asynchronous message to the channel process and
	returns ok immediately, ignoring if the destination node or
	channel process does not exist. The channel calls
	<fo:inline font-style="italic">Module:handle_cast/2</fo:inline>
	 to handle the message.
	</fo:block>
      </fo:block>

       <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2012000">enter_loop(State) -&gt; _ </fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">State = term()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>as returned by <fo:inline font-style="italic">ssh_channel:init/1</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Makes an existing process an <fo:inline font-family="monospace">ssh_channel</fo:inline>
	process. Does not return, instead the calling process
	enters the <fo:inline font-family="monospace">ssh_channel</fo:inline> process receive loop and become an
	<fo:inline font-family="monospace">ssh_channel process</fo:inline>. The process must have been started using
	one of the start functions in <fo:inline font-family="monospace">proc_lib</fo:inline>, see the <fo:inline font-style="italic">proc_lib(3)</fo:inline> manual page in STDLIB.
	The user is responsible for any initialization of the process
	and must call <fo:inline font-style="italic">ssh_channel:init/1</fo:inline>.
	</fo:block>
      </fo:block>
    
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2019632">init(Options) -&gt; {ok, State} |  {ok, State, Timeout} | {stop, Reason} </fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = [{Option, Value}]</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">State = term()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	  The following options must be present:
	</fo:block>
	  <fo:block space-after="0.25em" space-before="0.25em">
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{channel_cb, atom()}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module that implements the channel behaviour.</fo:block></fo:block></fo:block-container>
	  
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{init_args(), list()}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The list of arguments to the <fo:inline font-family="monospace">init</fo:inline> function of the callback module.</fo:block></fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{cm, connection_ref()}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Reference to the <fo:inline font-family="monospace">ssh</fo:inline> connection as returned by <fo:inline font-style="italic">ssh:connect/3</fo:inline></fo:block></fo:block></fo:block-container>
	  
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{channel_id, channel_id()}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Id of the <fo:inline font-family="monospace">ssh</fo:inline> channel.</fo:block></fo:block></fo:block-container>
	  
	  </fo:block>

	  <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is normally not called by the
	  user. The user only needs to call if the
	  channel process needs to be started with help of
	  <fo:inline font-family="monospace">proc_lib</fo:inline> instead of calling
	  <fo:inline font-family="monospace">ssh_channel:start/4</fo:inline> or
	  <fo:inline font-family="monospace">ssh_channel:start_link/4</fo:inline>.</fo:block>
	  </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2033936">reply(Client, Reply) -&gt; _</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Client = opaque()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reply = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function can be used by a channel to send a
        reply to a client that called <fo:inline font-family="monospace">call/[2,3]</fo:inline> when the reply
        cannot be defined in the return value of
	<fo:inline font-style="italic">Module:handle_call/3</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Client</fo:inline> must be the <fo:inline font-family="monospace">From</fo:inline> argument provided to
          the callback function <fo:inline font-family="monospace">handle_call/3</fo:inline>.
	  <fo:inline font-family="monospace">Reply</fo:inline> is an arbitrary term,
	  which is given back to the client as the return value of
          <fo:inline font-style="italic">ssh_channel:call/[2,3].</fo:inline></fo:block>
      </fo:block>
    
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2041584">start(SshConnection, ChannelId, ChannelCb, CbInitArgs) -&gt; </fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2042080">start_link(SshConnection, ChannelId, ChannelCb, CbInitArgs) -&gt;
      {ok, ChannelRef} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SshConnection = ssh_connection_ref()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelId = ssh_channel_id()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>As returned by
	<fo:inline font-style="italic">
	ssh_connection:session_channel/[2,4]</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelCb = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Name of the module implementing the service-specific parts
	of the channel.</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CbInitArgs = [term()]</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Argument list for the <fo:inline font-family="monospace">init</fo:inline> function in the callback module.</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelRef = pid()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts a process that handles an SSH channel. It is
	called internally, by the <fo:inline font-family="monospace">ssh</fo:inline> daemon, or explicitly by the <fo:inline font-family="monospace">ssh</fo:inline>
	client implementations. The behavior sets the
	<fo:inline font-family="monospace">trap_exit</fo:inline> flag to <fo:inline font-family="monospace">true</fo:inline>.
	</fo:block>
      </fo:block>
    
  
  
  <fo:block id="idp2052400" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">CALLBACK TIME-OUTS</fo:block>
    
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The time-out values that can be returned by the callback functions
    have the same semantics as in a <fo:inline font-style="italic">gen_server</fo:inline>.
    If the time-out occurs, <fo:inline font-style="italic">handle_msg/2</fo:inline>
    is called as <fo:inline font-family="monospace">handle_msg(timeout, State)</fo:inline>.</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2056032">Module:code_change(OldVsn, State, Extra) -&gt; {ok,
      NewState}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OldVsn = term()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>In the case of an upgrade, <fo:inline font-family="monospace">OldVsn</fo:inline> is <fo:inline font-family="monospace">Vsn</fo:inline>, and
	in the case of a downgrade, <fo:inline font-family="monospace">OldVsn</fo:inline> is
	<fo:inline font-family="monospace">{down,Vsn}</fo:inline>. <fo:inline font-family="monospace">Vsn</fo:inline> is defined by the <fo:inline font-family="monospace">vsn</fo:inline>
	attribute(s) of the old version of the callback module
	<fo:inline font-family="monospace">Module</fo:inline>. If no such attribute is defined, the version is
	the checksum of the BEAM file.</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">State = term()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Internal state of the channel.</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Extra = term()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Passed "as-is" from the <fo:inline font-family="monospace">{advanced,Extra}</fo:inline>
	part of the update instruction.</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Converts process state when code is changed.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is called by a client-side channel when it
	is to update its internal state during a release
	upgrade or downgrade, that is, when the instruction
	<fo:inline font-family="monospace">{update,Module,Change,...}</fo:inline>, where
	<fo:inline font-family="monospace">Change={advanced,Extra}</fo:inline>, is given in the <fo:inline font-family="monospace">appup</fo:inline>
	file. For more information, refer to Section 9.11.6
	Release Handling Instructions in the
	<fo:inline font-style="italic">System Documentation</fo:inline>.
	</fo:block>

	<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Soft upgrade according to the OTP release concept
	is not straight forward for the server side, as subsystem
	channel processes are spawned by the <fo:inline font-family="monospace">ssh</fo:inline> application and
	hence added to its supervisor tree. The subsystem channels can
	be upgraded when upgrading the user application, if the callback
	functions can handle two versions of the state, but this function
	cannot be used in the normal way.</fo:block>
	</fo:block>
	  
      </fo:block>
    
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2069632">Module:init(Args) -&gt; {ok, State} | {ok, State, timeout()} |
      {stop, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Args = term()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Last argument to <fo:inline font-family="monospace">ssh_channel:start_link/4</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">State = term()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Makes necessary initializations and returns the initial channel
	state if the initializations succeed.
	</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more detailed information on time-outs, see Section
	<fo:inline font-style="italic">CALLBACK TIME-OUTS</fo:inline>. </fo:block>
      </fo:block>
   
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2076048">Module:handle_call(Msg, From, State) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Msg = term()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">From = opaque()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Is to be used as argument to
	<fo:inline font-style="italic">ssh_channel:reply/2</fo:inline></fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">State = term()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = {reply, Reply, NewState} | {reply, Reply, NewState, timeout()}
	| {noreply, NewState} | {noreply , NewState, timeout()}
	| {stop, Reason, Reply, NewState} | {stop, Reason, NewState} </fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reply = term()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Will be the return value of <fo:inline font-style="italic">ssh_channel:call/[2,3]</fo:inline></fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NewState = term()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Handles messages sent by calling
	<fo:inline font-style="italic">ssh_channel:call/[2,3]</fo:inline>
	</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more detailed information on time-outs,, see Section
	<fo:inline font-style="italic">CALLBACK TIME-OUTS</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2086544">Module:handle_cast(Msg, State) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Msg = term()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">State = term()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = {noreply, NewState} | {noreply, NewState, timeout()}
	| {stop, Reason, NewState}</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NewState = term() </fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Handles messages sent by calling
	<fo:inline font-family="monospace">ssh_channel:cast/2</fo:inline>.
	</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more detailed information on time-outs, see Section
	<fo:inline font-style="italic">CALLBACK TIME-OUTS</fo:inline>.</fo:block>
      </fo:block>
 
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2093728">Module:handle_msg(Msg, State) -&gt; {ok, State} |
      {stop, ChannelId, State}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Msg = timeout | term()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelId = ssh_channel_id()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">State = term() </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Handles other messages than SSH Connection Protocol, call, or
	cast messages sent to the channel. 
	</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Possible Erlang 'EXIT' messages is to be handled by this
	function and all channels are to handle the following message.</fo:block>
	
	<fo:block space-after="0.25em" space-before="0.25em">
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{ssh_channel_up, ssh_channel_id(), 
	  ssh_connection_ref()}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is the first message that the channel receives.
	  It is sent just before the <fo:inline font-style="italic">ssh_channel:init/1</fo:inline> function
	  returns successfully. This is especially useful if the
	  server wants to send a message to the client without first
	  receiving a message from it. If the message is not
	  useful for your particular scenario, ignore it by
	  immediately returning <fo:inline font-family="monospace">{ok, State}</fo:inline>.
	  </fo:block></fo:block></fo:block-container>
	</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2101680">Module:handle_ssh_msg(Msg, State) -&gt; {ok, State} | {stop,
      ChannelId, State}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Msg = ssh_connection:event()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelId = ssh_channel_id()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">State = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Handles SSH Connection Protocol messages that may need
	service-specific attention. For details,
	see <fo:inline font-style="italic"> ssh_connection:event()</fo:inline>.
	</fo:block>
	
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following message is taken care of by the
	<fo:inline font-family="monospace">ssh_channel</fo:inline> behavior.</fo:block>
	
	<fo:block space-after="0.25em" space-before="0.25em">
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{closed, ssh_channel_id()}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The channel behavior sends a close message to the
	  other side, if such a message has not already been sent.
	  Then it terminates the channel with reason <fo:inline font-family="monospace">normal</fo:inline>.</fo:block></fo:block></fo:block-container>
	</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2110208">Module:terminate(Reason, State) -&gt; _</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">State = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is called by a channel process when it is
	about to terminate. Before this function is called, <fo:inline font-style="italic"> ssh_connection:close/2
	</fo:inline> is called, if it has not been called earlier.
	This function does any necessary cleaning
	up. When it returns, the channel process terminates with
	reason <fo:inline font-family="monospace">Reason</fo:inline>. The return value is ignored.
	</fo:block>
      </fo:block>
    
  
  
<fo:block page-break-before="always" id="idp2121312" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">ssh_connection</fo:marker>ssh_connection</fo:block>Erlang module</fo:block>
  <fo:block/>
  ssh_connection
  <fo:block/>

  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-weight="bold"><fo:basic-link external-destination="href">SSH Connection Protocol</fo:basic-link></fo:inline> 
    is used by clients and servers, that is, SSH channels, to communicate over the 
    SSH connection. The API functions in this module send SSH Connection Protocol events,
    which are received as messages by the remote channel.
    If the receiving channel is an Erlang process, the
    messages have the format
    <fo:inline font-family="monospace">{ssh_cm, ssh_connection_ref(), ssh_event_msg()}</fo:inline>.
    If the <fo:inline font-style="italic">ssh_channel</fo:inline> behavior is used to
    implement the channel process, these messages are handled by
    <fo:inline font-style="italic">handle_ssh_msg/2</fo:inline>.</fo:block>
  

  <fo:block id="idp2126560" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">DATA TYPES</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Type definitions that are used more than once in this module,
    or abstractions to indicate the intended use of the data
    type, or both:</fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">boolean() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">true | false </fo:inline></fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">string() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">list of ASCII characters</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">timeout() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">infinity | integer()</fo:inline> in milliseconds</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ssh_connection_ref() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">opaque() -as returned by
      <fo:inline font-family="monospace">ssh:connect/3</fo:inline> or sent to an SSH channel processes</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ssh_channel_id() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">integer()</fo:inline></fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ssh_data_type_code() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">1</fo:inline> ("stderr") | <fo:inline font-family="monospace">0</fo:inline> ("normal") are
      valid values, see
      <fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC 4254</fo:basic-link></fo:inline> Section 5.2.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ssh_request_status() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"> <fo:inline font-family="monospace">success | failure</fo:inline></fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">event() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{ssh_cm, ssh_connection_ref(), ssh_event_msg()}</fo:inline></fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ssh_event_msg() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">data_events() | status_events() | terminal_events()</fo:inline></fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">reason() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">timeout | closed</fo:inline></fo:block></fo:block></fo:block-container>
    </fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">data_events()</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em">
	 <fo:block space-after="0.25em" space-before="0.25em">
	   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{data, ssh_channel_id(), ssh_data_type_code(), Data :: binary()}</fo:inline></fo:block>
	   <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Data has arrived on the channel. This event is sent as a
	   result of calling <fo:inline font-style="italic">
	   ssh_connection:send/[3,4,5]</fo:inline>.</fo:block></fo:block></fo:block-container>

	   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{eof, ssh_channel_id()}</fo:inline></fo:block>
	   <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Indicates that the other side sends no more data.
	   This event is sent as a result of calling <fo:inline font-style="italic"> ssh_connection:send_eof/2</fo:inline>.
	   </fo:block></fo:block></fo:block-container>
	 </fo:block>
       </fo:block></fo:block-container>

       <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">status_events()</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em">

      <fo:block space-after="0.25em" space-before="0.25em">
	<fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{signal, ssh_channel_id(), ssh_signal()}</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A signal can be delivered to the remote process/service
	using the following message. Some systems do not support
	signals, in which case they are to ignore this message. There is
	currently no function to generate this event as the signals
	referred to are on OS-level and not something generated by an
	Erlang program.</fo:block></fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{exit_signal, ssh_channel_id(), ExitSignal :: string(), ErrorMsg ::string(),
	LanguageString :: string()}</fo:inline></fo:block>

	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A remote execution can terminate violently because of a signal.
	Then this message can be received. For details on valid string
	values, see <fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC 4254</fo:basic-link></fo:inline>
	Section 6.10, which shows a special case of these signals.</fo:block></fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{exit_status, ssh_channel_id(), ExitStatus :: integer()}</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the command running at the other end terminates, the
	following message can be sent to return the exit status of the
	command. A zero <fo:inline font-family="monospace">exit_status</fo:inline> usually means that the command
	terminated successfully. This event is sent as a result of calling
	<fo:inline font-style="italic">
	ssh_connection:exit_status/3</fo:inline>.</fo:block></fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{closed, ssh_channel_id()}</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This event is sent as a result of calling
	<fo:inline font-style="italic">ssh_connection:close/2</fo:inline>.
	Both the handling of this event and sending it are taken care of by the
	<fo:inline font-style="italic">ssh_channel</fo:inline> behavior.</fo:block></fo:block></fo:block-container>

      </fo:block>
     </fo:block></fo:block-container>

     <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">terminal_events()</fo:inline></fo:block>

     <fo:block-container><fo:block start-indent="2em">
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Channels implementing a shell and command execution on the
       server side are to handle the following messages that can be sent by client-
       channel processes.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Events that include a <fo:inline font-family="monospace">WantReply</fo:inline> expect the event handling
       process to call <fo:inline font-style="italic">
       ssh_connection:reply_request/4</fo:inline>
       with the boolean value of <fo:inline font-family="monospace">WantReply</fo:inline> as the second argument.</fo:block>

       <fo:block space-after="0.25em" space-before="0.25em">
	 <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{env, ssh_channel_id(), WantReply :: boolean(),
	 Var ::string(), Value :: string()}</fo:inline></fo:block>
	 <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Environment variables can be passed to the shell/command
	 to be started later. This event is sent as a result of calling <fo:inline font-style="italic"> ssh_connection:setenv/5</fo:inline>.
	 </fo:block></fo:block></fo:block-container>

	 <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{pty, ssh_channel_id(),
	 WantReply :: boolean(), {Terminal :: string(), CharWidth :: integer(),
	 RowHeight :: integer(), PixelWidth :: integer(), PixelHeight :: integer(),
	 TerminalModes :: [{Opcode  :: atom() | integer(),
	 Value :: integer()}]}}</fo:inline></fo:block>
	 <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A pseudo-terminal has been requested for the
	 session. <fo:inline font-family="monospace">Terminal</fo:inline> is the value of the TERM environment
	 variable value, that is, <fo:inline font-family="monospace">vt100</fo:inline>. Zero dimension parameters must
	 be ignored. The character/row dimensions override the pixel
	 dimensions (when non-zero). Pixel dimensions refer to the
	 drawable area of the window. <fo:inline font-family="monospace">Opcode</fo:inline> in the
	 <fo:inline font-family="monospace">TerminalModes</fo:inline> list is the mnemonic name, represented
	 as a lowercase Erlang atom, defined in
	 <fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC 4254</fo:basic-link></fo:inline>, Section 8.
	 It can also be an <fo:inline font-family="monospace">Opcode</fo:inline> if the mnemonic name is not listed in the
	 RFC. Example: <fo:inline font-family="monospace">OP code: 53, mnemonic name ECHO erlang atom:
	 echo</fo:inline>. This event is sent as a result of calling <fo:inline font-style="italic">ssh_connection:ptty_alloc/4</fo:inline>.</fo:block></fo:block></fo:block-container>

	 <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{shell, WantReply :: boolean()}</fo:inline></fo:block>
	 <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This message requests that the user default shell
	 is started at the other end. This event is sent as a result of calling
	 <fo:inline font-style="italic"> ssh_connection:shell/2</fo:inline>.
	 </fo:block></fo:block></fo:block-container>

	 <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{window_change, ssh_channel_id(), CharWidth() :: integer(),
	 RowHeight :: integer(), PixWidth :: integer(), PixHeight :: integer()}</fo:inline></fo:block>
	 <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the window (terminal) size changes on the client
	 side, it <fo:inline font-weight="bold">can</fo:inline> send a message to the server side to inform it of
	 the new dimensions. No API function generates this event.</fo:block></fo:block></fo:block-container>
     
	 <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{exec, ssh_channel_id(),
	 WantReply :: boolean(), Cmd :: string()}</fo:inline></fo:block>
	 <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This message requests that the server starts
	 execution of the given command. This event is sent as a result of calling <fo:inline font-style="italic">ssh_connection:exec/4 </fo:inline>.
	 </fo:block></fo:block></fo:block-container>
       </fo:block>
     </fo:block></fo:block-container>
   </fo:block>
 

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
   
   <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2178128">adjust_window(ConnectionRef, ChannelId, NumOfBytes) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConnectionRef = ssh_connection_ref()</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelId = ssh_channel_id()</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NumOfBytes = integer()</fo:block></fo:list-item-body></fo:list-item>
     </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Adjusts the SSH flow control window. This is to be done by both the
	client- and server-side channel processes.</fo:block>
	
	<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Channels implemented with the <fo:inline font-style="italic"> ssh_channel</fo:inline>
	behavior do not normally need to call this function as flow control
	is handled by the behavior. The behavior adjusts the window every time
	the callback <fo:inline font-style="italic">
	handle_ssh_msg/2</fo:inline> returns after processing channel data.</fo:block></fo:block>
      </fo:block>
   
   <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2184560">close(ConnectionRef, ChannelId) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConnectionRef = ssh_connection_ref()</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelId = ssh_channel_id()</fo:block></fo:list-item-body></fo:list-item>
     </fo:list-block>
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A server- or client-channel process can choose to close their session by
       sending a close event.
       </fo:block>

       <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is called by the <fo:inline font-family="monospace">ssh_channel</fo:inline>
       behavior when the channel is terminated, see <fo:inline font-style="italic"> ssh_channel(3)</fo:inline>. Thus, channels implemented
       with the behavior are not to call this function explicitly.</fo:block></fo:block>
     </fo:block>
   
   <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2190624">exec(ConnectionRef, ChannelId, Command, TimeOut) -&gt; ssh_request_status() |
     {error, reason()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConnectionRef = ssh_connection_ref()</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelId = ssh_channel_id()</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Command = string()</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item>
     </fo:list-block>
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Is to be called by a client-channel process to request that the server starts
       executing the given command. The result is several messages according to the
       following pattern. The last message is a channel close message, as the <fo:inline font-family="monospace">exec</fo:inline>
       request is a one-time execution that closes the channel when it is done.</fo:block>

       <fo:block space-after="0.25em" space-before="0.25em">
	 <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">N x {ssh_cm, ssh_connection_ref(),
	 {data, ssh_channel_id(), ssh_data_type_code(), Data :: binary()}}</fo:inline></fo:block>
	 <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The result of executing the command can be only one line
	 or thousands of lines depending on the command.</fo:block></fo:block></fo:block-container>

	 <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">0 or 1 x {ssh_cm, ssh_connection_ref(), {eof, ssh_channel_id()}}</fo:inline></fo:block>
	 <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Indicates that no more data is to be sent.</fo:block></fo:block></fo:block-container>

	 <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">0 or 1 x {ssh_cm,
	 ssh_connection_ref(), {exit_signal,
	 ssh_channel_id(), ExitSignal :: string(), ErrorMsg :: string(), LanguageString :: string()}}</fo:inline></fo:block>
	 <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Not all systems send signals. For details on valid string
	 values, see RFC 4254, Section 6.10</fo:block></fo:block></fo:block-container>
	 
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">0 or 1 x {ssh_cm, ssh_connection_ref(), {exit_status,
	  ssh_channel_id(), ExitStatus :: integer()}}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is recommended by the SSH Connection Protocol to send this
	  message, but that is not always the case.</fo:block></fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">1 x {ssh_cm, ssh_connection_ref(),
	  {closed, ssh_channel_id()}}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Indicates that the <fo:inline font-family="monospace">ssh_channel</fo:inline> started for the
	  execution of the command has now been shut down.</fo:block></fo:block></fo:block-container>
       </fo:block>
     </fo:block>

   <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2203392">exit_status(ConnectionRef, ChannelId, Status) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConnectionRef = ssh_connection_ref() </fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelId = ssh_channel_id()</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Status = integer()</fo:block></fo:list-item-body></fo:list-item>
     </fo:list-block>
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Is to be called by a server-channel process to send the exit status of a command
       to the client.</fo:block>
     </fo:block>
   
   <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2207600">ptty_alloc(ConnectionRef, ChannelId, Options) -&gt;</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2208080">ptty_alloc(ConnectionRef, ChannelId, Options, Timeout) -&gt;  &gt; ssh_request_status() |
     {error, reason()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConnectionRef = ssh_connection_ref()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelId = ssh_channel_id()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = proplists:proplist()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends an SSH Connection Protocol <fo:inline font-family="monospace">pty_req</fo:inline>, to allocate a pseudo-terminal.
	Is to be called by an SSH client process.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Options:</fo:block>

	<fo:block space-after="0.25em" space-before="0.25em">
	  <fo:block keep-with-next.within-page="always">{term, string()}</fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defaults to <fo:inline font-weight="bold">os:getenv("TERM")</fo:inline> or <fo:inline font-weight="bold">vt100</fo:inline>
	  if it is undefined.</fo:block></fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always">{width, integer()}</fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defaults to 80 if <fo:inline font-family="monospace">pixel_width</fo:inline> is not defined.</fo:block></fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always">{height, integer()}</fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defaults to 24 if <fo:inline font-family="monospace">pixel_height</fo:inline> is not defined.</fo:block></fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always">{pixel_width, integer()}</fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Is disregarded if <fo:inline font-family="monospace">width</fo:inline> is defined.</fo:block></fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always">{pixel_height, integer()}</fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Is disregarded if <fo:inline font-family="monospace">height</fo:inline> is defined.</fo:block></fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always">{pty_opts, [{posix_atom(), integer()}]}</fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Option can be an empty list. Otherwise, see possible <fo:inline font-weight="bold">POSIX</fo:inline> names
	  in Section 8 in <fo:inline font-weight="bold"><fo:basic-link external-destination="href"> RFC 4254</fo:basic-link></fo:inline>.</fo:block>
	  </fo:block></fo:block-container>
	 </fo:block>
      </fo:block>

     <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2224432">reply_request(ConnectionRef, WantReply, Status, ChannelId) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConnectionRef = ssh_connection_ref()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">WantReply =  boolean()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Status = ssh_request_status()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelId = ssh_channel_id()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends status replies to requests where the requester has
	stated that it wants a status report, that is, <fo:inline font-family="monospace">WantReply = true</fo:inline>.
	If <fo:inline font-family="monospace">WantReply</fo:inline> is <fo:inline font-family="monospace">false</fo:inline>, calling this function becomes a
	"noop". Is to be called while handling an SSH Connection
	Protocol message containing a <fo:inline font-family="monospace">WantReply</fo:inline> boolean value.</fo:block>
      </fo:block>
    
     <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2231056">send(ConnectionRef, ChannelId, Data) -&gt;</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2231520">send(ConnectionRef, ChannelId, Data, Timeout) -&gt;</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2232000">send(ConnectionRef, ChannelId, Type, Data) -&gt;</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2232480">send(ConnectionRef, ChannelId, Type, Data, TimeOut) -&gt;
       ok | {error, timeout} | {error, closed}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConnectionRef = ssh_connection_ref()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelId = ssh_channel_id()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Data = binary()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Type = ssh_data_type_code()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item>
       </fo:list-block>
	 <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Is to be called by client- and server-channel processes to send data to each other.
	 </fo:block>
	 <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function <fo:inline font-style="italic">subsystem/4</fo:inline> and subsequent
	 calls of <fo:inline font-family="monospace">send/3,4,5</fo:inline> must be executed in the same process.
	 </fo:block>
       </fo:block>
     
     <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2239280">send_eof(ConnectionRef, ChannelId) -&gt; ok | {error, closed}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConnectionRef = ssh_connection_ref()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelId = ssh_channel_id()</fo:block></fo:list-item-body></fo:list-item>
       </fo:list-block>
	 <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends EOF on channel <fo:inline font-family="monospace">ChannelId</fo:inline>.</fo:block>
       </fo:block>

     <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2243840">session_channel(ConnectionRef, Timeout) -&gt;</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2244320">session_channel(ConnectionRef, InitialWindowSize,
       MaxPacketSize, Timeout) -&gt; {ok, ssh_channel_id()} | {error, reason()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	 <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConnectionRef = ssh_connection_ref()</fo:block></fo:list-item-body></fo:list-item>
	 <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">InitialWindowSize = integer()</fo:block></fo:list-item-body></fo:list-item>
	 <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MaxPacketSize = integer()</fo:block></fo:list-item-body></fo:list-item>
	 <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item>
	 <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
       </fo:list-block>
	 <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Opens a channel for an SSH session. The channel id returned from this function
	 is the id used as input to the other functions in this module.</fo:block>
       </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2249552">setenv(ConnectionRef, ChannelId, Var, Value, TimeOut) -&gt; ssh_request_status() |
      {error, reason()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConnectionRef = ssh_connection_ref()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelId = ssh_channel_id()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Var = string()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value = string()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Environment variables can be passed before starting the
	shell/command. Is to be called by a client channel processes.</fo:block>
      </fo:block>
    
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2254752">shell(ConnectionRef, ChannelId) -&gt; ssh_request_status() | {error, closed}
      </fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	 <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConnectionRef = ssh_connection_ref()</fo:block></fo:list-item-body></fo:list-item>
	 <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelId = ssh_channel_id()</fo:block></fo:list-item-body></fo:list-item>
       </fo:list-block>
	 <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Is to be called by a client channel process to request that the user default
	 shell (typically defined in /etc/passwd in Unix systems) is executed
	 at the server end.</fo:block>
       </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2258704">subsystem(ConnectionRef, ChannelId, Subsystem, Timeout) -&gt; ssh_request_status() |
      {error, reason()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	 <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConnectionRef = ssh_connection_ref()</fo:block></fo:list-item-body></fo:list-item>
	 <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelId = ssh_channel_id()</fo:block></fo:list-item-body></fo:list-item>
	 <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Subsystem = string()</fo:block></fo:list-item-body></fo:list-item>
	 <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item>
       </fo:list-block>
	 <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Is to be called by a client-channel process for requesting to execute a predefined
	 subsystem on the server.
	 </fo:block>
	 <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function <fo:inline font-family="monospace">subsystem/4</fo:inline> and subsequent calls of 
	 <fo:inline font-style="italic">send/3,4,5</fo:inline> must be executed in the same process.
	 </fo:block>
       </fo:block>
    
  
  
<fo:block page-break-before="always" id="idp2271200" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">ssh_client_key_api</fo:marker>ssh_client_key_api</fo:block>Erlang module</fo:block>
  <fo:block/>
  ssh_client_key_api
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Behavior describing the API for public key handling of an SSH client. By implementing
    the callbacks defined in this behavior, the public key handling of an SSH client can
    be customized. By default the <fo:inline font-family="monospace">ssh</fo:inline> application implements this behavior
    with help of the standard OpenSSH files,
    see the <fo:inline font-style="italic"> ssh(6)</fo:inline> application manual.</fo:block>
  

  <fo:block id="idp2274752" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">DATA TYPES</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Type definitions that are used more than once in this module,
    or abstractions to indicate the intended use of the data
    type, or both. For more details on public key data types,
    refer to Section 2 Public Key Records in the
    <fo:inline font-style="italic"> public_key user's guide:</fo:inline>
    </fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">boolean() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">true | false</fo:inline></fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">string() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">[byte()]</fo:inline></fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">public_key() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">#'RSAPublicKey'{}| {integer(),  #'Dss-Parms'{}}| term()</fo:inline></fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">private_key() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">#'RSAPrivateKey'{} | #'DSAPrivateKey'{} | term()</fo:inline></fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">public_key_algorithm() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">'ssh-rsa'| 'ssh-dss' | atom()</fo:inline></fo:block></fo:block></fo:block-container>
    </fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2284304">Module:add_host_key(HostNames, Key, ConnectOptions) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">HostNames = string()</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Description of the host that owns the <fo:inline font-family="monospace">PublicKey</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = public_key()</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Normally an RSA or DSA public key, but handling of other public keys can be added.</fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConnectOptions = proplists:proplist()</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Options provided to <fo:inline font-style="italic">ssh:connect/[3,4]</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term().</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	 <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Adds a host key to the set of trusted host keys.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2291360">Module:is_host_key(Key, Host, Algorithm, ConnectOptions) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = public_key() </fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Normally an RSA or DSA public key, but handling of other public keys can be added.</fo:block></fo:list-item-body></fo:list-item>

	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Host = string()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Description of the host.</fo:block></fo:list-item-body></fo:list-item>

	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Algorithm = public_key_algorithm()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Host key algorithm. Is to support <fo:inline font-family="monospace">'ssh-rsa'| 'ssh-dss'</fo:inline>, but more algorithms
	can be handled.</fo:block></fo:list-item-body></fo:list-item>

	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConnectOptions = proplists:proplist() </fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Options provided to <fo:inline font-style="italic">ssh:connect/[3,4]</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>

	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = boolean()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Checks if a host key is trusted.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2299472">Module:user_key(Algorithm, ConnectOptions) -&gt;
      {ok,  PrivateKey}  | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Algorithm = public_key_algorithm()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Host key algorithm. Is to support <fo:inline font-family="monospace">'ssh-rsa'| 'ssh-dss'</fo:inline> but more algorithms
	can be handled.</fo:block></fo:list-item-body></fo:list-item>

	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConnectOptions = proplists:proplist()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Options provided to <fo:inline font-style="italic">ssh:connect/[3,4]</fo:inline></fo:block></fo:list-item-body></fo:list-item>

	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PrivateKey = private_key()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Private key of the user matching the <fo:inline font-family="monospace">Algorithm</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>

	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Fetches the users <fo:inline font-weight="bold">public key</fo:inline> matching the <fo:inline font-family="monospace">Algorithm</fo:inline>.</fo:block>
	<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The private key contains the public key.</fo:block></fo:block>

      </fo:block>

  

<fo:block page-break-before="always" id="idp2315392" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">ssh_server_key_api</fo:marker>ssh_server_key_api</fo:block>Erlang module</fo:block>
  <fo:block/>
  ssh_server_key_api
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Behaviour describing the API for public key handling of an SSH server. By implementing
    the callbacks defined in this behavior, the public key handling of an SSH server can
    be customized. By default the SSH application implements this behavior
    with help of the standard OpenSSH files,
    see the <fo:inline font-style="italic"> ssh(6)</fo:inline> application manual.</fo:block>
  

  <fo:block id="idp2318496" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">DATA TYPES</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Type definitions that are used more than once in this module,
    or abstractions to indicate the intended use of the data
    type, or both. For more details on public key data types,
    refer to Section 2 Public Key Records in the
    <fo:inline font-style="italic"> public_key user's guide</fo:inline>.
    </fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">boolean() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">true | false</fo:inline></fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">string() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">[byte()]</fo:inline></fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">public_key() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">#'RSAPublicKey'{}| {integer(),  #'Dss-Parms'{}}| term()</fo:inline></fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">private_key() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">#'RSAPrivateKey'{} | #'DSAPrivateKey'{} | term()</fo:inline></fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">public_key_algorithm() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">'ssh-rsa'| 'ssh-dss' | atom()</fo:inline></fo:block></fo:block></fo:block-container>
    </fo:block>
  
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2328048">Module:host_key(Algorithm, DaemonOptions) -&gt;
      {ok, Key} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Algorithm = public_key_algorithm()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Host key algorithm. Is to support <fo:inline font-family="monospace">'ssh-rsa' | 'ssh-dss'</fo:inline>, but more algorithms
	can be handled.</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DaemonOptions = proplists:proplist()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Options provided to <fo:inline font-style="italic">ssh:daemon/[2,3]</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = private_key()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Private key of the host matching the <fo:inline font-family="monospace">Algorithm</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Fetches the private key of the host.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2335664">Module:is_auth_key(Key, User, DaemonOptions) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = public_key()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Normally an RSA or DSA public key, but handling of other public keys can be added</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">User = string()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>User owning the public key.</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DaemonOptions = proplists:proplist()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Options provided to  <fo:inline font-style="italic">ssh:daemon/[2,3]</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = boolean()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	 <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Checks if the user key is authorized.</fo:block>
      </fo:block>

  

<fo:block page-break-before="always" id="idp2348976" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">ssh_sftp</fo:marker>ssh_sftp</fo:block>Erlang module</fo:block>
  <fo:block/>
  ssh_sftp
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module implements an SSH FTP (SFTP) client. SFTP is a
    secure, encrypted file transfer service available for
    SSH.</fo:block>
  
  
 <fo:block id="idp2351168" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">DATA TYPES</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Type definitions that are used more than once in this module,
    or abstractions to indicate the intended use of the data type, or both:
    </fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">reason()</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">= <fo:inline font-family="monospace">atom()</fo:inline> A description of the reason why an operation failed.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	  The value is formed from the sftp error codes in the protocol-level responses as defined in 
	  <fo:inline font-weight="bold"><fo:basic-link external-destination="href">draft-ietf-secsh-filexfer-13.txt</fo:basic-link></fo:inline>
	  section 9.1.
	</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	  The codes are named as <fo:inline font-family="monospace">SSH_FX_*</fo:inline> which are transformed into lowercase of the star-part.
	  E.g. the error code <fo:inline font-family="monospace">SSH_FX_NO_SUCH_FILE</fo:inline>
	  will cause the <fo:inline font-family="monospace">reason()</fo:inline> to be <fo:inline font-family="monospace">no_such_file</fo:inline>.
	</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ssh_connection_ref() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">opaque()</fo:inline> - as returned by 
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh:connect/3</fo:inline></fo:inline></fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">timeout()</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">= <fo:inline font-family="monospace">infinity | integer()</fo:inline> in milliseconds. Default infinity.</fo:block></fo:block></fo:block-container>
    </fo:block>
   

 <fo:block id="idp2362432" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Time-outs</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the request functions for the SFTP channel return <fo:inline font-family="monospace">{error, timeout}</fo:inline>,
     no answer was received from the server within the expected time.</fo:block>
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The request may have reached the server and may have been performed.
     However, no answer was received from the server within the expected time.</fo:block>
   

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
     <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2365168">apread(ChannelPid, Handle, Position, Len) -&gt; {async, N} | {error, reason()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	 <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelPid = pid()</fo:block></fo:list-item-body></fo:list-item>
         <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Handle = term()</fo:block></fo:list-item-body></fo:list-item>
         <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Position = integer()</fo:block></fo:list-item-body></fo:list-item>
         <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Len = integer()</fo:block></fo:list-item-body></fo:list-item>
         <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">N = term()</fo:block></fo:list-item-body></fo:list-item>
       </fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">apread/4</fo:inline> function reads from a specified position,
       combining the <fo:inline font-style="italic"><fo:inline font-family="monospace">position/3</fo:inline></fo:inline> and 
       <fo:inline font-style="italic"><fo:inline font-family="monospace">aread/3</fo:inline></fo:inline> functions.</fo:block>
       </fo:block>
     
     <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2372208">apwrite(ChannelPid, Handle, Position, Data) -&gt; {async, N} | {error, reason()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelPid = pid()</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Handle = term()</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Position = integer()</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Len = integer()</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Data = binary()</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">N = term()</fo:block></fo:list-item-body></fo:list-item>
	</fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">apwrite/4</fo:inline> function writes to a specified position,
       combining the <fo:inline font-style="italic"><fo:inline font-family="monospace">position/3</fo:inline></fo:inline> and 
       <fo:inline font-style="italic"><fo:inline font-family="monospace">awrite/3</fo:inline></fo:inline> functions.</fo:block>
       </fo:block>
      
      <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2380144">aread(ChannelPid, Handle, Len) -&gt; {async, N} | {error, reason()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelPid = pid()</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Handle = term()</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Position = integer()</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Len = integer()</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">N = term()</fo:block></fo:list-item-body></fo:list-item>
	</fo:list-block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Reads from an open file, without waiting for the result. If the
          handle is valid, the function returns <fo:inline font-family="monospace">{async, N}</fo:inline>, where <fo:inline font-family="monospace">N</fo:inline>
          is a term guaranteed to be unique between calls of <fo:inline font-family="monospace">aread</fo:inline>.
          The actual data is sent as a message to the calling process. This
          message has the form <fo:inline font-family="monospace">{async_reply, N, Result}</fo:inline>, where
          <fo:inline font-family="monospace">Result</fo:inline> is the result from the read, either <fo:inline font-family="monospace">{ok, Data}</fo:inline>,
          <fo:inline font-family="monospace">eof</fo:inline>, or <fo:inline font-family="monospace">{error, reason()}</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2388992">awrite(ChannelPid, Handle, Data) -&gt; {async, N} | {error, reason()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Handle = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Position = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Len = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Data = binary()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Writes to an open file, without waiting for the result. If the
          handle is valid, the function returns <fo:inline font-family="monospace">{async, N}</fo:inline>, where <fo:inline font-family="monospace">N</fo:inline>
          is a term guaranteed to be unique between calls of
          <fo:inline font-family="monospace">awrite</fo:inline>. The result of the <fo:inline font-family="monospace">write</fo:inline> operation is sent
          as a message to the calling process. This message has the form
          <fo:inline font-family="monospace">{async_reply, N, Result}</fo:inline>, where <fo:inline font-family="monospace">Result</fo:inline> is the result
          from the write, either <fo:inline font-family="monospace">ok</fo:inline>, or <fo:inline font-family="monospace">{error, reason()}</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2398304">close(ChannelPid, Handle) -&gt;</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2398768">close(ChannelPid, Handle, Timeout) -&gt; ok | {error, reason()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Handle = term()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Closes a handle to an open file or directory on the server.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2402896">delete(ChannelPid, Name) -&gt;</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2403360">delete(ChannelPid, Name, Timeout) -&gt; ok | {error, reason()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = string()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Deletes the file specified by <fo:inline font-family="monospace">Name</fo:inline>.
	</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2407904">del_dir(ChannelPid, Name) -&gt;</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2408368">del_dir(ChannelPid, Name, Timeout) -&gt; ok | {error, reason()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = string()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Deletes a directory specified by <fo:inline font-family="monospace">Name</fo:inline>.
	The directory must be empty before it can be successfully deleted.
	</fo:block>
      </fo:block>

     <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2412976">list_dir(ChannelPid, Path) -&gt;</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2413440">list_dir(ChannelPid, Path, Timeout) -&gt; {ok, Filenames} | {error, reason()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Path = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Filenames = [Filename]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Filename = string()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Lists the given directory on the server, returning the
          filenames as a list of strings.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2418512">make_dir(ChannelPid, Name) -&gt;</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2418976">make_dir(ChannelPid, Name, Timeout) -&gt; ok | {error, reason()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = string()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a directory specified by <fo:inline font-family="monospace">Name</fo:inline>. <fo:inline font-family="monospace">Name</fo:inline>
          must be a full path to a new directory. The directory can only be
	created in an existing directory.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2424064">make_symlink(ChannelPid, Name, Target) -&gt;</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2424544">make_symlink(ChannelPid, Name, Target, Timeout) -&gt; ok | {error, reason()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Target = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a symbolic link pointing to <fo:inline font-family="monospace">Target</fo:inline> with the
          name <fo:inline font-family="monospace">Name</fo:inline>.
	</fo:block>
      </fo:block>

       <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2429584">open(ChannelPid, File, Mode) -&gt;</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2430048">open(ChannelPid, File, Mode, Timeout) -&gt; {ok, Handle} | {error, reason()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">File = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Mode = [Modeflag]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Modeflag = read | write | creat | trunc | append | binary</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Handle = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Opens a file on the server and returns a handle, which
          can be used for reading or writing.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2435632">opendir(ChannelPid, Path) -&gt;</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2436096">opendir(ChannelPid, Path, Timeout) -&gt; {ok, Handle} | {error, reason()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Path = string()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Opens a handle to a directory on the server. The handle
          can be used for reading directory contents.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2440288">open_tar(ChannelPid, Path, Mode) -&gt;</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2440752">open_tar(ChannelPid, Path, Mode, Timeout) -&gt; {ok, Handle} | {error, reason()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Path = string()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Mode = [read] | [write] | [read,EncryptOpt] | [write,DecryptOpt]</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EncryptOpt = {crypto,{InitFun,EncryptFun,CloseFun}}</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DecryptOpt = {crypto,{InitFun,DecryptFun}}</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">InitFun = (fun() -&gt; {ok,CryptoState}) | (fun() -&gt; {ok,CryptoState,ChunkSize})</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CryptoState = any()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChunkSize = undefined | pos_integer()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EncryptFun = (fun(PlainBin,CryptoState) -&gt; EncryptResult)</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EncryptResult = {ok,EncryptedBin,CryptoState} | {ok,EncryptedBin,CryptoState,ChunkSize}</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PlainBin = binary()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EncryptedBin = binary()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DecryptFun = (fun(EncryptedBin,CryptoState) -&gt; DecryptResult)</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DecryptResult = {ok,PlainBin,CryptoState} | {ok,PlainBin,CryptoState,ChunkSize}</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CloseFun = (fun(PlainBin,CryptoState) -&gt; {ok,EncryptedBin})</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Opens a handle to a tar file on the server, associated with <fo:inline font-family="monospace">ChannelPid</fo:inline>.
	The handle can be used for remote tar creation and extraction, as defined by the
	<fo:inline font-style="italic">erl_tar:init/3</fo:inline> function.
	</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"> For code exampel see Section
	<fo:inline font-style="italic">SFTP Client with TAR Compression and Encryption</fo:inline> in
	the ssh Users Guide. </fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">crypto</fo:inline> mode option is applied to the generated stream of bytes prior to sending
	them to the SFTP server. This is intended for encryption but can be used for other
	purposes.
	</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">InitFun</fo:inline> is applied once
	prior to any other <fo:inline font-family="monospace">crypto</fo:inline> operation. The returned <fo:inline font-family="monospace">CryptoState</fo:inline> is then folded into
	repeated applications of the <fo:inline font-family="monospace">EncryptFun</fo:inline> or <fo:inline font-family="monospace">DecryptFun</fo:inline>. The binary returned
	from those funs are sent further to the remote SFTP server. Finally, if doing encryption,
	the <fo:inline font-family="monospace">CloseFun</fo:inline> is applied to the last piece of data. The <fo:inline font-family="monospace">CloseFun</fo:inline> is
	responsible for padding (if needed) and encryption of that last piece.
	</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">ChunkSize</fo:inline> defines the size of the <fo:inline font-family="monospace">PlainBin</fo:inline>s that <fo:inline font-family="monospace">EncodeFun</fo:inline> is applied
	to. If the <fo:inline font-family="monospace">ChunkSize</fo:inline> is <fo:inline font-family="monospace">undefined</fo:inline>, the size of the <fo:inline font-family="monospace">PlainBin</fo:inline>s varies,
	because this is	intended for stream crypto, whereas a fixed <fo:inline font-family="monospace">ChunkSize</fo:inline> is intended for block crypto.
	<fo:inline font-family="monospace">ChunkSize</fo:inline>s can be changed in the return from the <fo:inline font-family="monospace">EncryptFun</fo:inline> or
	<fo:inline font-family="monospace">DecryptFun</fo:inline>. The value can be changed between <fo:inline font-family="monospace">pos_integer()</fo:inline> and <fo:inline font-family="monospace">undefined</fo:inline>.
	</fo:block>

      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2465024">position(ChannelPid, Handle, Location) -&gt;</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2465504">position(ChannelPid, Handle, Location, Timeout) -&gt; {ok, NewPosition | {error, reason()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Handle = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Location = Offset
 | {bof, Offset} | {cur, Offset} | {eof, Offset} | bof | cur | eof</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Offset = integer()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NewPosition = integer()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the file position of the file referenced by <fo:inline font-family="monospace">Handle</fo:inline>.
          Returns <fo:inline font-family="monospace">{ok, NewPosition}</fo:inline> (as an absolute offset) if
          successful, otherwise <fo:inline font-family="monospace">{error, reason()}</fo:inline>. <fo:inline font-family="monospace">Location</fo:inline> is
          one of the following:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Offset</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The same as <fo:inline font-family="monospace">{bof, Offset}</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{bof, Offset}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Absolute offset.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{cur, Offset}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Offset from the current position.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{eof, Offset}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Offset from the end of file.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">bof | cur | eof</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The same as eariler with <fo:inline font-family="monospace">Offset</fo:inline> 0,
	    that is, <fo:inline font-family="monospace">{bof, 0} | {cur, 0} | {eof, 0}</fo:inline>.
	    </fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2482128">pread(ChannelPid, Handle, Position, Len) -&gt;</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2482608">pread(ChannelPid, Handle, Position, Len, Timeout) -&gt; {ok, Data} | eof | {error, reason()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Handle = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Position = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Len = integer()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Data = string() | binary()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">pread/3,4</fo:inline> function reads from a specified position,
       combining the <fo:inline font-style="italic"><fo:inline font-family="monospace">position/3</fo:inline></fo:inline> and 
       <fo:inline font-style="italic"><fo:inline font-family="monospace">read/3,4</fo:inline></fo:inline> functions.</fo:block>
       </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2490128">pwrite(ChannelPid, Handle, Position, Data) -&gt; ok</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2490608">pwrite(ChannelPid, Handle, Position, Data, Timeout) -&gt; ok | {error, reason()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Handle = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Position = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Data = iolist()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">pwrite/3,4</fo:inline> function writes to a specified position,
       combining the <fo:inline font-style="italic"><fo:inline font-family="monospace">position/3</fo:inline></fo:inline> and 
       <fo:inline font-style="italic"><fo:inline font-family="monospace">write/3,4</fo:inline></fo:inline> functions.</fo:block>
       </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2497632">read(ChannelPid, Handle, Len) -&gt;</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2498096">read(ChannelPid, Handle, Len, Timeout) -&gt; {ok, Data} | eof | {error, reason()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Handle = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Position = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Len = integer()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Data = string() | binary()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Reads <fo:inline font-family="monospace">Len</fo:inline> bytes from the file referenced by
          <fo:inline font-family="monospace">Handle</fo:inline>. Returns <fo:inline font-family="monospace">{ok, Data}</fo:inline>, <fo:inline font-family="monospace">eof</fo:inline>, or
          <fo:inline font-family="monospace">{error, reason()}</fo:inline>. If the file is opened with <fo:inline font-family="monospace">binary</fo:inline>,
          <fo:inline font-family="monospace">Data</fo:inline> is a binary, otherwise it is a string.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the file is read past <fo:inline font-family="monospace">eof</fo:inline>, only the remaining bytes
          are read and returned. If no bytes are read, <fo:inline font-family="monospace">eof</fo:inline>
          is returned.</fo:block>
      </fo:block>

      <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2508192">read_file(ChannelPid, File) -&gt;</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2508656">read_file(ChannelPid, File, Timeout) -&gt; {ok, Data} | {error, reason()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelPid = pid()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">File = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Data = binary()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Reads a file from the server, and returns the data in a binary.</fo:block>
      </fo:block>

      <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2513232">read_file_info(ChannelPid, Name) -&gt;</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2513696">read_file_info(ChannelPid, Name, Timeout) -&gt; {ok, FileInfo} | {error, reason()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Handle = term()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FileInfo = record()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a <fo:inline font-family="monospace">file_info</fo:inline> record from the file specified by
          <fo:inline font-family="monospace">Name</fo:inline> or <fo:inline font-family="monospace">Handle</fo:inline>. See
	<fo:inline font-style="italic">file:read_file_info/2</fo:inline>
	for information about the record.
	</fo:block>
      </fo:block>

     <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2520832">read_link(ChannelPid, Name) -&gt;</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2521296">read_link(ChannelPid, Name, Timeout) -&gt; {ok, Target} | {error, reason()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Target = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Reads the link target from the symbolic link specified by <fo:inline font-family="monospace">name</fo:inline>.
	</fo:block>
      </fo:block>

     <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2525888">read_link_info(ChannelPid, Name) -&gt; {ok, FileInfo} | {error, reason()}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2526384">read_link_info(ChannelPid, Name, Timeout) -&gt; {ok, FileInfo} | {error, reason()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Handle = term()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FileInfo = record()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a <fo:inline font-family="monospace">file_info</fo:inline> record from the symbolic
          link specified by <fo:inline font-family="monospace">Name</fo:inline> or <fo:inline font-family="monospace">Handle</fo:inline>.
	  See
	  <fo:inline font-style="italic">file:read_link_info/2</fo:inline>
	  for information about the record.
	</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2533520">rename(ChannelPid, OldName, NewName) -&gt; </fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2534000">rename(ChannelPid, OldName, NewName, Timeout) -&gt; ok | {error, reason()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OldName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NewName = string()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Renames a file named <fo:inline font-family="monospace">OldName</fo:inline> and gives it the name
          <fo:inline font-family="monospace">NewName</fo:inline>.
	</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2539440">start_channel(ConnectionRef) -&gt;</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2539904">start_channel(ConnectionRef, Options) -&gt;
      {ok, Pid} | {error, reason()|term()}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2540416">start_channel(Host, Options) -&gt;</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2540880">start_channel(Host, Port, Options) -&gt; 
      {ok, Pid, ConnectionRef} | {error, reason()|term()}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2541408">start_channel(TcpSocket) -&gt;</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2541872">start_channel(TcpSocket, Options) -&gt;
      {ok, Pid, ConnectionRef} | {error, reason()|term()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Host = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConnectionRef = ssh_connection_ref()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Port = integer()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TcpSocket = port()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The socket is supposed to be from <fo:inline font-style="italic">gen_tcp:connect</fo:inline> or <fo:inline font-style="italic">gen_tcp:accept</fo:inline> with option <fo:inline font-family="monospace">{active,false}</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = [{Option, Value}]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If no connection reference is provided, a connection is set
	up, and the new connection is returned. An SSH channel process
	is started to handle the communication with the SFTP server.
	The returned <fo:inline font-family="monospace">pid</fo:inline> for this process is to be used as input to
	all other API functions in this module.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Options:</fo:block>
	<fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{timeout, timeout()}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are two ways to set a timeout for the underlying ssh connection:</fo:block>
	    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If the connection timeout option <fo:inline font-family="monospace">connect_timeout</fo:inline> is set, that value
	      is used also for the negotiation timeout and this option (<fo:inline font-family="monospace">timeout</fo:inline>) is ignored.</fo:block></fo:list-item-body></fo:list-item>
	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Otherwise, this option (<fo:inline font-family="monospace">timeout</fo:inline>) is used as the negotiation timeout
	      only and there is no connection timeout set</fo:block></fo:list-item-body></fo:list-item>
	    </fo:list-block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The value defaults to <fo:inline font-family="monospace">infinity</fo:inline>.</fo:block>
	  </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always">
	    <fo:inline font-family="monospace">{sftp_vsn, integer()}</fo:inline>
	  </fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	      Desired SFTP protocol version.
	      The actual version is the minimum of
	      the desired version and the maximum supported
	      versions by the SFTP server.
	    </fo:block>
	  </fo:block></fo:block-container>
	</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All other options are directly passed to
	<fo:inline font-style="italic">ssh:connect/3</fo:inline> or ignored if a
	connection is already provided.</fo:block>
      </fo:block>

     <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2559440">stop_channel(ChannelPid) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelPid = pid()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stops an SFTP channel. Does not close the SSH connection.
	Use <fo:inline font-style="italic">ssh:close/1</fo:inline> to close it.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2563376">write(ChannelPid, Handle, Data) -&gt;</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2563840">write(ChannelPid, Handle, Data, Timeout) -&gt; ok | {error, reason()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Handle = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Position = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Data = iolist()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Writes <fo:inline font-family="monospace">data</fo:inline> to the file referenced by <fo:inline font-family="monospace">Handle</fo:inline>.
	The file is to be opened with <fo:inline font-family="monospace">write</fo:inline> or <fo:inline font-family="monospace">append</fo:inline>
	flag. Returns <fo:inline font-family="monospace">ok</fo:inline> if successful or <fo:inline font-family="monospace">{error, reason()}</fo:inline>
	otherwise.</fo:block>
      </fo:block>
    
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2571536">write_file(ChannelPid, File, Iolist) -&gt;</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2572000">write_file(ChannelPid, File, Iolist, Timeout) -&gt; ok | {error, reason()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">File = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Iolist = iolist()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Writes a file to the server.	The file is created if it does not exist
	but overwritten if it exists.</fo:block>
      </fo:block>
    
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2576608">write_file_info(ChannelPid, Name, Info) -&gt;</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2577088">write_file_info(ChannelPid, Name, Info, Timeout) -&gt; ok | {error, reason()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Info = record()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Writes file information from a <fo:inline font-family="monospace">file_info</fo:inline> record to the
	file specified by <fo:inline font-family="monospace">Name</fo:inline>. See
	<fo:inline font-style="italic">file:write_file_info/[2,3]</fo:inline>
	for information about the record.
	</fo:block>
      </fo:block>
  
  
<fo:block page-break-before="always" id="idp2589792" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">ssh_sftpd</fo:marker>ssh_sftpd</fo:block>Erlang module</fo:block>
  <fo:block/>
  ssh_sftpd
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies a channel process to handle an SFTP subsystem.</fo:block>
  

  <fo:block id="idp2591968" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">DATA TYPES</fo:block>
    
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">subsystem_spec() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{subsystem_name(), {channel_callback(), channel_init_args()}}</fo:inline></fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">subsystem_name() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">"sftp"</fo:inline></fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">channel_callback() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">atom()</fo:inline> - Name of the Erlang module implementing the subsystem using the
      <fo:inline font-family="monospace">ssh_channel</fo:inline> behavior, see the
      <fo:inline font-style="italic">ssh_channel(3)</fo:inline> manual page.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">channel_init_args() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">list()</fo:inline> - The one given as argument to function <fo:inline font-family="monospace">subsystem_spec/1</fo:inline>.</fo:block></fo:block></fo:block-container>
    </fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2600816">subsystem_spec(Options) -&gt; subsystem_spec()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = [{Option, Value}]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Is to be used together with <fo:inline font-family="monospace">ssh:daemon/[1,2,3]</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Options:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{cwd, String}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the initial current working directory for the server.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{file_handler, CallbackModule}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Determines which module to call for accessing
	    the file server. The default value is <fo:inline font-family="monospace">ssh_sftpd_file</fo:inline>, which uses the
	    <fo:inline font-style="italic">file</fo:inline> and <fo:inline font-style="italic">filelib</fo:inline>
	    APIs to access the standard OTP file server. This option can be used to plug in
	    other file servers.</fo:block>
	  </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{max_files, Integer}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default value is <fo:inline font-family="monospace">0</fo:inline>, which means that there is no upper limit.
	    If supplied, the number of filenames returned to the SFTP client per <fo:inline font-family="monospace">READDIR</fo:inline>
	    request is limited to at most the given value.</fo:block>
	  </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{root, String}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the SFTP root directory. Then the user cannot see any files
	    above this root. If, for example, the root directory is set to <fo:inline font-family="monospace">/tmp</fo:inline>,
	    then the user sees this directory as <fo:inline font-family="monospace">/</fo:inline>. If the user then writes
	    <fo:inline font-family="monospace">cd /etc</fo:inline>, the user moves to <fo:inline font-family="monospace">/tmp/etc</fo:inline>.
	    </fo:block>
	  </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{sftpd_vsn, integer()}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the SFTP version to use. Defaults to 5. Version 6 is under
	    development and limited.</fo:block>
	  </fo:block></fo:block-container>
        </fo:block>
      </fo:block>
    
</fo:flow>
  </fo:page-sequence>
</fo:root>
