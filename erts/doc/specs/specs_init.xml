<module name="init">
<type>
  <name>internal_status</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-internal_status">internal_status()</marker> = starting | started | stopping</typehead></typedecl>
</type>
<spec>
  <name>archive_extension</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>archive_extension() -&gt; nonempty_string()</head></clause>
  </contract>
</spec>
<spec>
  <name>boot</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>boot(BootArgs) -&gt; no_return()</head>
      <guard>
        <subtype><typename>BootArgs</typename><string>BootArgs = [binary()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>BootArgs</anno>
</spec>
<spec>
  <name>code_path_choice</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>code_path_choice() -&gt; relaxed | strict</head></clause>
  </contract>
</spec>
<spec>
  <name>ensure_loaded</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>ensure_loaded(Module :: atom()) -&gt; not_allowed | {module, atom()}</head></clause>
  </contract>
  <anno>Module</anno>
</spec>
<spec>
  <name>fetch_loaded</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>fetch_loaded() -&gt; [{module(), <seealso marker="file#type-filename">file:filename()</seealso>}]</head></clause>
  </contract>
</spec>
<spec>
  <name>get_argument</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_argument(Flag) -&gt; {ok, Arg} | error</head>
      <guard>
        <subtype><typename>Flag</typename><string>Flag = atom()</string></subtype>
        <subtype><typename>Arg</typename><string>Arg = [Values :: [string()]]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Arg</anno>
  <anno>Flag</anno>
  <anno>Values</anno>
</spec>
<spec>
  <name>get_arguments</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>get_arguments() -&gt; Flags</head>
      <guard>
        <subtype><typename>Flags</typename><string>Flags = [{Flag :: atom(), Values :: [string()]}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
  <anno>Flags</anno>
  <anno>Values</anno>
</spec>
<spec>
  <name>get_plain_arguments</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>get_plain_arguments() -&gt; [Arg]</head>
      <guard>
        <subtype><typename>Arg</typename><string>Arg = string()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Arg</anno>
</spec>
<spec>
  <name>get_status</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>get_status() -&gt; {InternalStatus, ProvidedStatus}</head>
      <guard>
        <subtype><typename>InternalStatus</typename><string>InternalStatus = <seealso marker="#type-internal_status">internal_status()</seealso></string></subtype>
        <subtype><typename>ProvidedStatus</typename><string>ProvidedStatus = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>InternalStatus</anno>
  <anno>ProvidedStatus</anno>
</spec>
<spec>
  <name>make_permanent</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>make_permanent(Boot :: <seealso marker="file#type-filename">file:filename()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Config :: false | <seealso marker="file#type-filename">file:filename()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok | {error, term()}</head></clause>
  </contract>
  <anno>Boot</anno>
  <anno>Config</anno>
</spec>
<spec>
  <name>notify_when_started</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>notify_when_started(Pid :: pid()) -&gt; ok | started</head></clause>
  </contract>
  <anno>Pid</anno>
</spec>
<spec>
  <name>objfile_extension</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>objfile_extension() -&gt; nonempty_string()</head></clause>
  </contract>
</spec>
<spec>
  <name>reboot</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>reboot() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>restart</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>restart() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>run_on_load_handlers</name>
  <arity>0</arity>
  <contract/>
</spec>
<spec>
  <name>script_id</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>script_id() -&gt; Id</head>
      <guard>
        <subtype><typename>Id</typename><string>Id = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Id</anno>
</spec>
<spec>
  <name>stop</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>stop() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>stop</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>stop(Status) -&gt; ok</head>
      <guard>
        <subtype><typename>Status</typename><string>Status = integer() &gt;= 0 | string()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Status</anno>
</spec>
<spec>
  <name>wait_until_started</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>wait_until_started() -&gt; ok</head></clause>
  </contract>
</spec>
<timestamp>Generated by EDoc, Jul 12 2017, 20:32:17.</timestamp>
</module>