<?xml version="1.0"?>
<fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format">
  <fo:layout-master-set>
    <fo:simple-page-master master-name="cover" margin="25mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin="0mm"/>
    </fo:simple-page-master>
    <fo:simple-page-master master-name="left-page" margin-top="25mm" margin-bottom="15mm" margin-left="20mm" margin-right="25mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin-top="15mm" margin-bottom="20mm"/>
      <fo:region-before region-name="left-header" extent="10mm"/>
      <fo:region-after region-name="left-footer" extent="10mm"/>
    </fo:simple-page-master>
    <fo:simple-page-master master-name="right-page" margin-top="25mm" margin-bottom="15mm" margin-left="25mm" margin-right="20mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin-top="15mm" margin-bottom="20mm"/>
      <fo:region-before region-name="right-header" extent="10mm"/>
      <fo:region-after region-name="right-footer" extent="10mm"/>
    </fo:simple-page-master>
    <fo:page-sequence-master master-name="document">
      <fo:repeatable-page-master-alternatives>
        <fo:conditional-page-master-reference master-reference="left-page" odd-or-even="even"/>
        <fo:conditional-page-master-reference master-reference="right-page" odd-or-even="odd"/>
      </fo:repeatable-page-master-alternatives>
    </fo:page-sequence-master>
  </fo:layout-master-set>
  <fo:bookmark-tree>
    <fo:bookmark internal-destination="cover-page" starting-state="show">
      <fo:bookmark-title>Kernel</fo:bookmark-title>
      <fo:bookmark internal-destination="idp105936" starting-state="hide">
        <fo:bookmark-title>Reference Manual</fo:bookmark-title>
        <fo:bookmark internal-destination="idp5580880" starting-state="hide">
          <fo:bookmark-title>kernel</fo:bookmark-title>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp5941568" starting-state="hide">
          <fo:bookmark-title>application</fo:bookmark-title>
          <fo:bookmark internal-destination="idp5955248" starting-state="hide">
            <fo:bookmark-title>ensure_all_started/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5956080" starting-state="hide">
            <fo:bookmark-title>ensure_all_started/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5963872" starting-state="hide">
            <fo:bookmark-title>ensure_started/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5964704" starting-state="hide">
            <fo:bookmark-title>ensure_started/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5968656" starting-state="hide">
            <fo:bookmark-title>get_all_env/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5969488" starting-state="hide">
            <fo:bookmark-title>get_all_env/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5973808" starting-state="hide">
            <fo:bookmark-title>get_all_key/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5974640" starting-state="hide">
            <fo:bookmark-title>get_all_key/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5979504" starting-state="hide">
            <fo:bookmark-title>get_application/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5980336" starting-state="hide">
            <fo:bookmark-title>get_application/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5985600" starting-state="hide">
            <fo:bookmark-title>get_env/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5986432" starting-state="hide">
            <fo:bookmark-title>get_env/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5993376" starting-state="hide">
            <fo:bookmark-title>get_env/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5997184" starting-state="hide">
            <fo:bookmark-title>get_key/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5997920" starting-state="hide">
            <fo:bookmark-title>get_key/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6004304" starting-state="hide">
            <fo:bookmark-title>load/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6005136" starting-state="hide">
            <fo:bookmark-title>load/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6025376" starting-state="hide">
            <fo:bookmark-title>loaded_applications/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6031264" starting-state="hide">
            <fo:bookmark-title>permit/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6044464" starting-state="hide">
            <fo:bookmark-title>set_env/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6045296" starting-state="hide">
            <fo:bookmark-title>set_env/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6055760" starting-state="hide">
            <fo:bookmark-title>start/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6056592" starting-state="hide">
            <fo:bookmark-title>start/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6073744" starting-state="hide">
            <fo:bookmark-title>start_type/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6081296" starting-state="hide">
            <fo:bookmark-title>stop/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6091296" starting-state="hide">
            <fo:bookmark-title>takeover/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6100112" starting-state="hide">
            <fo:bookmark-title>unload/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6103536" starting-state="hide">
            <fo:bookmark-title>unset_env/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6104368" starting-state="hide">
            <fo:bookmark-title>unset_env/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6112912" starting-state="hide">
            <fo:bookmark-title>which_applications/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6113744" starting-state="hide">
            <fo:bookmark-title>which_applications/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6123408" starting-state="hide">
            <fo:bookmark-title>Module:start/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6143216" starting-state="hide">
            <fo:bookmark-title>Module:start_phase/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6152528" starting-state="hide">
            <fo:bookmark-title>Module:prep_stop/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6159408" starting-state="hide">
            <fo:bookmark-title>Module:stop/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6165344" starting-state="hide">
            <fo:bookmark-title>Module:config_change/3</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp6181872" starting-state="hide">
          <fo:bookmark-title>auth</fo:bookmark-title>
          <fo:bookmark internal-destination="idp6186544" starting-state="hide">
            <fo:bookmark-title>cookie/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6190080" starting-state="hide">
            <fo:bookmark-title>cookie/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6195008" starting-state="hide">
            <fo:bookmark-title>is_auth/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6202624" starting-state="hide">
            <fo:bookmark-title>node_cookie/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6207840" starting-state="hide">
            <fo:bookmark-title>node_cookie/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp6220672" starting-state="hide">
          <fo:bookmark-title>code</fo:bookmark-title>
          <fo:bookmark internal-destination="idp6308080" starting-state="hide">
            <fo:bookmark-title>set_path/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6315120" starting-state="hide">
            <fo:bookmark-title>get_path/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6317760" starting-state="hide">
            <fo:bookmark-title>add_path/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6318592" starting-state="hide">
            <fo:bookmark-title>add_pathz/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6325040" starting-state="hide">
            <fo:bookmark-title>add_patha/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6331472" starting-state="hide">
            <fo:bookmark-title>add_paths/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6332304" starting-state="hide">
            <fo:bookmark-title>add_pathsz/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6337696" starting-state="hide">
            <fo:bookmark-title>add_pathsa/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6345696" starting-state="hide">
            <fo:bookmark-title>del_path/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6354944" starting-state="hide">
            <fo:bookmark-title>replace_path/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6370064" starting-state="hide">
            <fo:bookmark-title>load_file/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6378928" starting-state="hide">
            <fo:bookmark-title>load_abs/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6387264" starting-state="hide">
            <fo:bookmark-title>ensure_loaded/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6392160" starting-state="hide">
            <fo:bookmark-title>load_binary/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6401616" starting-state="hide">
            <fo:bookmark-title>atomic_load/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6421424" starting-state="hide">
            <fo:bookmark-title>prepare_loading/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6433744" starting-state="hide">
            <fo:bookmark-title>finish_loading/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6443280" starting-state="hide">
            <fo:bookmark-title>ensure_modules_loaded/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6449456" starting-state="hide">
            <fo:bookmark-title>delete/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6456000" starting-state="hide">
            <fo:bookmark-title>purge/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6462400" starting-state="hide">
            <fo:bookmark-title>soft_purge/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6468768" starting-state="hide">
            <fo:bookmark-title>is_loaded/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6479808" starting-state="hide">
            <fo:bookmark-title>all_loaded/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6487568" starting-state="hide">
            <fo:bookmark-title>which/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6494736" starting-state="hide">
            <fo:bookmark-title>get_object_code/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6502912" starting-state="hide">
            <fo:bookmark-title>root_dir/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6507104" starting-state="hide">
            <fo:bookmark-title>lib_dir/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6512144" starting-state="hide">
            <fo:bookmark-title>lib_dir/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6526496" starting-state="hide">
            <fo:bookmark-title>lib_dir/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6532736" starting-state="hide">
            <fo:bookmark-title>compiler_dir/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6535872" starting-state="hide">
            <fo:bookmark-title>priv_dir/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6541136" starting-state="hide">
            <fo:bookmark-title>objfile_extension/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6544304" starting-state="hide">
            <fo:bookmark-title>stick_dir/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6548880" starting-state="hide">
            <fo:bookmark-title>unstick_dir/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6552928" starting-state="hide">
            <fo:bookmark-title>is_sticky/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6557776" starting-state="hide">
            <fo:bookmark-title>where_is_file/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6561664" starting-state="hide">
            <fo:bookmark-title>clash/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6564864" starting-state="hide">
            <fo:bookmark-title>module_status/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6580944" starting-state="hide">
            <fo:bookmark-title>modified_modules/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6585792" starting-state="hide">
            <fo:bookmark-title>is_module_native/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6594144" starting-state="hide">
            <fo:bookmark-title>get_mode/0</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp6607584" starting-state="hide">
          <fo:bookmark-title>disk_log</fo:bookmark-title>
          <fo:bookmark internal-destination="idp6673440" starting-state="hide">
            <fo:bookmark-title>accessible_logs/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6676272" starting-state="hide">
            <fo:bookmark-title>alog/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6677104" starting-state="hide">
            <fo:bookmark-title>balog/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6688496" starting-state="hide">
            <fo:bookmark-title>alog_terms/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6689328" starting-state="hide">
            <fo:bookmark-title>balog_terms/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6700752" starting-state="hide">
            <fo:bookmark-title>block/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6701584" starting-state="hide">
            <fo:bookmark-title>block/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6712880" starting-state="hide">
            <fo:bookmark-title>change_header/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6716480" starting-state="hide">
            <fo:bookmark-title>change_notify/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6719616" starting-state="hide">
            <fo:bookmark-title>change_size/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6726480" starting-state="hide">
            <fo:bookmark-title>chunk/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6727312" starting-state="hide">
            <fo:bookmark-title>chunk/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6728144" starting-state="hide">
            <fo:bookmark-title>bchunk/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6728976" starting-state="hide">
            <fo:bookmark-title>bchunk/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6753872" starting-state="hide">
            <fo:bookmark-title>chunk_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6759888" starting-state="hide">
            <fo:bookmark-title>chunk_step/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6767728" starting-state="hide">
            <fo:bookmark-title>close/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6773424" starting-state="hide">
            <fo:bookmark-title>format_error/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6777552" starting-state="hide">
            <fo:bookmark-title>inc_wrap_file/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6784288" starting-state="hide">
            <fo:bookmark-title>info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6859728" starting-state="hide">
            <fo:bookmark-title>lclose/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6860560" starting-state="hide">
            <fo:bookmark-title>lclose/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6868832" starting-state="hide">
            <fo:bookmark-title>log/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6869664" starting-state="hide">
            <fo:bookmark-title>blog/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6883056" starting-state="hide">
            <fo:bookmark-title>log_terms/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6883888" starting-state="hide">
            <fo:bookmark-title>blog_terms/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6894944" starting-state="hide">
            <fo:bookmark-title>open/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6997184" starting-state="hide">
            <fo:bookmark-title>pid2name/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7000912" starting-state="hide">
            <fo:bookmark-title>reopen/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7001744" starting-state="hide">
            <fo:bookmark-title>reopen/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7002576" starting-state="hide">
            <fo:bookmark-title>breopen/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7015840" starting-state="hide">
            <fo:bookmark-title>sync/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7019168" starting-state="hide">
            <fo:bookmark-title>truncate/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7020000" starting-state="hide">
            <fo:bookmark-title>truncate/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7020832" starting-state="hide">
            <fo:bookmark-title>btruncate/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7032048" starting-state="hide">
            <fo:bookmark-title>unblock/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp7044720" starting-state="hide">
          <fo:bookmark-title>erl_boot_server</fo:bookmark-title>
          <fo:bookmark internal-destination="idp7053120" starting-state="hide">
            <fo:bookmark-title>add_slave/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7056384" starting-state="hide">
            <fo:bookmark-title>delete_slave/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7059648" starting-state="hide">
            <fo:bookmark-title>start/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7062960" starting-state="hide">
            <fo:bookmark-title>start_link/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7065744" starting-state="hide">
            <fo:bookmark-title>which_slaves/0</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp7076992" starting-state="hide">
          <fo:bookmark-title>erl_ddll</fo:bookmark-title>
          <fo:bookmark internal-destination="idp7127472" starting-state="hide">
            <fo:bookmark-title>demonitor/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7135024" starting-state="hide">
            <fo:bookmark-title>format_error/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7140000" starting-state="hide">
            <fo:bookmark-title>info/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7146080" starting-state="hide">
            <fo:bookmark-title>info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7159728" starting-state="hide">
            <fo:bookmark-title>info/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7188496" starting-state="hide">
            <fo:bookmark-title>load/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7214368" starting-state="hide">
            <fo:bookmark-title>load_driver/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7223424" starting-state="hide">
            <fo:bookmark-title>loaded_drivers/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7228016" starting-state="hide">
            <fo:bookmark-title>monitor/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7279712" starting-state="hide">
            <fo:bookmark-title>reload/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7296400" starting-state="hide">
            <fo:bookmark-title>reload_driver/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7304512" starting-state="hide">
            <fo:bookmark-title>try_load/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7416688" starting-state="hide">
            <fo:bookmark-title>try_unload/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7482736" starting-state="hide">
            <fo:bookmark-title>unload/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7494288" starting-state="hide">
            <fo:bookmark-title>unload_driver/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp7514784" starting-state="hide">
          <fo:bookmark-title>erl_prim_loader</fo:bookmark-title>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp7523728" starting-state="hide">
          <fo:bookmark-title>erlang</fo:bookmark-title>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp7532160" starting-state="hide">
          <fo:bookmark-title>error_handler</fo:bookmark-title>
          <fo:bookmark internal-destination="idp7534608" starting-state="hide">
            <fo:bookmark-title>raise_undef_exception/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7540112" starting-state="hide">
            <fo:bookmark-title>undefined_function/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7555136" starting-state="hide">
            <fo:bookmark-title>undefined_lambda/3</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp7573936" starting-state="hide">
          <fo:bookmark-title>error_logger</fo:bookmark-title>
          <fo:bookmark internal-destination="idp7590944" starting-state="hide">
            <fo:bookmark-title>add_report_handler/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7591776" starting-state="hide">
            <fo:bookmark-title>add_report_handler/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7599856" starting-state="hide">
            <fo:bookmark-title>delete_report_handler/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7604320" starting-state="hide">
            <fo:bookmark-title>error_msg/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7605152" starting-state="hide">
            <fo:bookmark-title>error_msg/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7605984" starting-state="hide">
            <fo:bookmark-title>format/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7615744" starting-state="hide">
            <fo:bookmark-title>error_report/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7620656" starting-state="hide">
            <fo:bookmark-title>error_report/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7625424" starting-state="hide">
            <fo:bookmark-title>get_format_depth/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7630720" starting-state="hide">
            <fo:bookmark-title>info_msg/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7631552" starting-state="hide">
            <fo:bookmark-title>info_msg/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7640912" starting-state="hide">
            <fo:bookmark-title>info_report/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7645840" starting-state="hide">
            <fo:bookmark-title>info_report/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7650624" starting-state="hide">
            <fo:bookmark-title>logfile/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7651728" starting-state="hide">
            <fo:bookmark-title>logfile/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7652832" starting-state="hide">
            <fo:bookmark-title>logfile/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7671872" starting-state="hide">
            <fo:bookmark-title>tty/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7677120" starting-state="hide">
            <fo:bookmark-title>warning_map/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7685472" starting-state="hide">
            <fo:bookmark-title>warning_msg/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7686304" starting-state="hide">
            <fo:bookmark-title>warning_msg/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7694992" starting-state="hide">
            <fo:bookmark-title>warning_report/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7698688" starting-state="hide">
            <fo:bookmark-title>warning_report/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp7735872" starting-state="hide">
          <fo:bookmark-title>file</fo:bookmark-title>
          <fo:bookmark internal-destination="idp7781424" starting-state="hide">
            <fo:bookmark-title>advise/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7785584" starting-state="hide">
            <fo:bookmark-title>allocate/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7789296" starting-state="hide">
            <fo:bookmark-title>change_group/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7792784" starting-state="hide">
            <fo:bookmark-title>change_mode/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7796304" starting-state="hide">
            <fo:bookmark-title>change_owner/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7799792" starting-state="hide">
            <fo:bookmark-title>change_owner/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7803312" starting-state="hide">
            <fo:bookmark-title>change_time/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7806848" starting-state="hide">
            <fo:bookmark-title>change_time/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7810416" starting-state="hide">
            <fo:bookmark-title>close/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7816448" starting-state="hide">
            <fo:bookmark-title>consult/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7832528" starting-state="hide">
            <fo:bookmark-title>copy/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7833360" starting-state="hide">
            <fo:bookmark-title>copy/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7855104" starting-state="hide">
            <fo:bookmark-title>datasync/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7863168" starting-state="hide">
            <fo:bookmark-title>del_dir/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7877408" starting-state="hide">
            <fo:bookmark-title>delete/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7891888" starting-state="hide">
            <fo:bookmark-title>eval/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7905488" starting-state="hide">
            <fo:bookmark-title>eval/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7910096" starting-state="hide">
            <fo:bookmark-title>format_error/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7912864" starting-state="hide">
            <fo:bookmark-title>get_cwd/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7920528" starting-state="hide">
            <fo:bookmark-title>get_cwd/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7934128" starting-state="hide">
            <fo:bookmark-title>list_dir/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7947568" starting-state="hide">
            <fo:bookmark-title>list_dir_all/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7957648" starting-state="hide">
            <fo:bookmark-title>make_dir/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7972944" starting-state="hide">
            <fo:bookmark-title>make_link/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7985664" starting-state="hide">
            <fo:bookmark-title>make_symlink/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8001056" starting-state="hide">
            <fo:bookmark-title>native_name_encoding/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8005168" starting-state="hide">
            <fo:bookmark-title>open/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8114000" starting-state="hide">
            <fo:bookmark-title>path_consult/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8133232" starting-state="hide">
            <fo:bookmark-title>path_eval/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8152240" starting-state="hide">
            <fo:bookmark-title>path_open/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8165968" starting-state="hide">
            <fo:bookmark-title>path_script/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8185936" starting-state="hide">
            <fo:bookmark-title>path_script/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8190544" starting-state="hide">
            <fo:bookmark-title>pid2name/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8200432" starting-state="hide">
            <fo:bookmark-title>position/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8220832" starting-state="hide">
            <fo:bookmark-title>pread/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8228928" starting-state="hide">
            <fo:bookmark-title>pread/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8237216" starting-state="hide">
            <fo:bookmark-title>pwrite/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8245104" starting-state="hide">
            <fo:bookmark-title>pwrite/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8254176" starting-state="hide">
            <fo:bookmark-title>read/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8278416" starting-state="hide">
            <fo:bookmark-title>read_file/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8292976" starting-state="hide">
            <fo:bookmark-title>read_file_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8293808" starting-state="hide">
            <fo:bookmark-title>read_file_info/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8355552" starting-state="hide">
            <fo:bookmark-title>read_line/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8378832" starting-state="hide">
            <fo:bookmark-title>read_link/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8390720" starting-state="hide">
            <fo:bookmark-title>read_link_all/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8403120" starting-state="hide">
            <fo:bookmark-title>read_link_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8403952" starting-state="hide">
            <fo:bookmark-title>read_link_info/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8412512" starting-state="hide">
            <fo:bookmark-title>rename/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8440928" starting-state="hide">
            <fo:bookmark-title>script/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8455344" starting-state="hide">
            <fo:bookmark-title>script/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8459952" starting-state="hide">
            <fo:bookmark-title>sendfile/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8464400" starting-state="hide">
            <fo:bookmark-title>sendfile/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8484272" starting-state="hide">
            <fo:bookmark-title>set_cwd/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8502800" starting-state="hide">
            <fo:bookmark-title>sync/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8508080" starting-state="hide">
            <fo:bookmark-title>truncate/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8512688" starting-state="hide">
            <fo:bookmark-title>write/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8523808" starting-state="hide">
            <fo:bookmark-title>write_file/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8538432" starting-state="hide">
            <fo:bookmark-title>write_file/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8543920" starting-state="hide">
            <fo:bookmark-title>write_file_info/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8544752" starting-state="hide">
            <fo:bookmark-title>write_file_info/3</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp8655712" starting-state="hide">
          <fo:bookmark-title>gen_sctp</fo:bookmark-title>
          <fo:bookmark internal-destination="idp8679152" starting-state="hide">
            <fo:bookmark-title>abort/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8683104" starting-state="hide">
            <fo:bookmark-title>close/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8689312" starting-state="hide">
            <fo:bookmark-title>connect/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8694656" starting-state="hide">
            <fo:bookmark-title>connect/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8724896" starting-state="hide">
            <fo:bookmark-title>connect_init/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8730240" starting-state="hide">
            <fo:bookmark-title>connect_init/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8742576" starting-state="hide">
            <fo:bookmark-title>controlling_process/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8747296" starting-state="hide">
            <fo:bookmark-title>eof/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8751232" starting-state="hide">
            <fo:bookmark-title>error_string/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8755808" starting-state="hide">
            <fo:bookmark-title>listen/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8756912" starting-state="hide">
            <fo:bookmark-title>listen/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8764848" starting-state="hide">
            <fo:bookmark-title>open/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8765680" starting-state="hide">
            <fo:bookmark-title>open/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8766784" starting-state="hide">
            <fo:bookmark-title>open/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8767888" starting-state="hide">
            <fo:bookmark-title>open/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8783488" starting-state="hide">
            <fo:bookmark-title>peeloff/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8793920" starting-state="hide">
            <fo:bookmark-title>recv/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8794752" starting-state="hide">
            <fo:bookmark-title>recv/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8842368" starting-state="hide">
            <fo:bookmark-title>send/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp8847680" starting-state="hide">
            <fo:bookmark-title>send/4</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp9030272" starting-state="hide">
          <fo:bookmark-title>gen_tcp</fo:bookmark-title>
          <fo:bookmark internal-destination="idp9045536" starting-state="hide">
            <fo:bookmark-title>accept/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9046368" starting-state="hide">
            <fo:bookmark-title>accept/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9066656" starting-state="hide">
            <fo:bookmark-title>close/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9074928" starting-state="hide">
            <fo:bookmark-title>connect/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9075760" starting-state="hide">
            <fo:bookmark-title>connect/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9112576" starting-state="hide">
            <fo:bookmark-title>controlling_process/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9120096" starting-state="hide">
            <fo:bookmark-title>listen/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9149104" starting-state="hide">
            <fo:bookmark-title>recv/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9149936" starting-state="hide">
            <fo:bookmark-title>recv/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9161600" starting-state="hide">
            <fo:bookmark-title>send/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9166384" starting-state="hide">
            <fo:bookmark-title>shutdown/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp9197472" starting-state="hide">
          <fo:bookmark-title>gen_udp</fo:bookmark-title>
          <fo:bookmark internal-destination="idp9205056" starting-state="hide">
            <fo:bookmark-title>close/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9207680" starting-state="hide">
            <fo:bookmark-title>controlling_process/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9214288" starting-state="hide">
            <fo:bookmark-title>open/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9215120" starting-state="hide">
            <fo:bookmark-title>open/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9260704" starting-state="hide">
            <fo:bookmark-title>recv/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9261536" starting-state="hide">
            <fo:bookmark-title>recv/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9265312" starting-state="hide">
            <fo:bookmark-title>send/4</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp9274768" starting-state="hide">
          <fo:bookmark-title>global</fo:bookmark-title>
          <fo:bookmark internal-destination="idp9299088" starting-state="hide">
            <fo:bookmark-title>del_lock/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9299920" starting-state="hide">
            <fo:bookmark-title>del_lock/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9303120" starting-state="hide">
            <fo:bookmark-title>notify_all_name/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9308928" starting-state="hide">
            <fo:bookmark-title>random_exit_name/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9313856" starting-state="hide">
            <fo:bookmark-title>random_notify_name/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9319696" starting-state="hide">
            <fo:bookmark-title>re_register_name/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9320528" starting-state="hide">
            <fo:bookmark-title>re_register_name/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9328432" starting-state="hide">
            <fo:bookmark-title>register_name/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9329264" starting-state="hide">
            <fo:bookmark-title>register_name/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9346576" starting-state="hide">
            <fo:bookmark-title>registered_names/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9349248" starting-state="hide">
            <fo:bookmark-title>send/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9355536" starting-state="hide">
            <fo:bookmark-title>set_lock/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9356368" starting-state="hide">
            <fo:bookmark-title>set_lock/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9357200" starting-state="hide">
            <fo:bookmark-title>set_lock/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9376544" starting-state="hide">
            <fo:bookmark-title>sync/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9381312" starting-state="hide">
            <fo:bookmark-title>trans/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9382144" starting-state="hide">
            <fo:bookmark-title>trans/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9382976" starting-state="hide">
            <fo:bookmark-title>trans/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9392432" starting-state="hide">
            <fo:bookmark-title>unregister_name/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9395712" starting-state="hide">
            <fo:bookmark-title>whereis_name/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp9408512" starting-state="hide">
          <fo:bookmark-title>global_group</fo:bookmark-title>
          <fo:bookmark internal-destination="idp9436512" starting-state="hide">
            <fo:bookmark-title>global_groups/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9439776" starting-state="hide">
            <fo:bookmark-title>info/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9464768" starting-state="hide">
            <fo:bookmark-title>monitor_nodes/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9471536" starting-state="hide">
            <fo:bookmark-title>own_nodes/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9474224" starting-state="hide">
            <fo:bookmark-title>registered_names/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9476976" starting-state="hide">
            <fo:bookmark-title>send/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9477808" starting-state="hide">
            <fo:bookmark-title>send/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9485424" starting-state="hide">
            <fo:bookmark-title>sync/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9491536" starting-state="hide">
            <fo:bookmark-title>whereis_name/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9492368" starting-state="hide">
            <fo:bookmark-title>whereis_name/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp9512400" starting-state="hide">
          <fo:bookmark-title>heart</fo:bookmark-title>
          <fo:bookmark internal-destination="idp9546080" starting-state="hide">
            <fo:bookmark-title>set_cmd/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9552416" starting-state="hide">
            <fo:bookmark-title>clear_cmd/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9555568" starting-state="hide">
            <fo:bookmark-title>get_cmd/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9558288" starting-state="hide">
            <fo:bookmark-title>set_callback/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9562528" starting-state="hide">
            <fo:bookmark-title>clear_callback/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9565200" starting-state="hide">
            <fo:bookmark-title>get_callback/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9568336" starting-state="hide">
            <fo:bookmark-title>set_options/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9574608" starting-state="hide">
            <fo:bookmark-title>get_options/0</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp9584992" starting-state="hide">
          <fo:bookmark-title>inet</fo:bookmark-title>
          <fo:bookmark internal-destination="idp9637856" starting-state="hide">
            <fo:bookmark-title>close/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9640512" starting-state="hide">
            <fo:bookmark-title>format_error/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9644000" starting-state="hide">
            <fo:bookmark-title>get_rc/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9648048" starting-state="hide">
            <fo:bookmark-title>getaddr/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9651936" starting-state="hide">
            <fo:bookmark-title>getaddrs/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9655808" starting-state="hide">
            <fo:bookmark-title>gethostbyaddr/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9658832" starting-state="hide">
            <fo:bookmark-title>gethostbyname/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9663472" starting-state="hide">
            <fo:bookmark-title>gethostbyname/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9666672" starting-state="hide">
            <fo:bookmark-title>gethostname/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9669344" starting-state="hide">
            <fo:bookmark-title>getifaddrs/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9690080" starting-state="hide">
            <fo:bookmark-title>getopts/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9710880" starting-state="hide">
            <fo:bookmark-title>getstat/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9711712" starting-state="hide">
            <fo:bookmark-title>getstat/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9733168" starting-state="hide">
            <fo:bookmark-title>ntoa/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9736688" starting-state="hide">
            <fo:bookmark-title>parse_address/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9741104" starting-state="hide">
            <fo:bookmark-title>parse_ipv4_address/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9744640" starting-state="hide">
            <fo:bookmark-title>parse_ipv4strict_address/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9748672" starting-state="hide">
            <fo:bookmark-title>parse_ipv6_address/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9752256" starting-state="hide">
            <fo:bookmark-title>parse_ipv6strict_address/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9756240" starting-state="hide">
            <fo:bookmark-title>parse_strict_address/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9761104" starting-state="hide">
            <fo:bookmark-title>peername/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9765216" starting-state="hide">
            <fo:bookmark-title>peernames/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9770528" starting-state="hide">
            <fo:bookmark-title>peernames/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9776832" starting-state="hide">
            <fo:bookmark-title>port/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9779520" starting-state="hide">
            <fo:bookmark-title>setopts/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9988160" starting-state="hide">
            <fo:bookmark-title>sockname/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9992240" starting-state="hide">
            <fo:bookmark-title>socknames/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp9996192" starting-state="hide">
            <fo:bookmark-title>socknames/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp10115088" starting-state="hide">
          <fo:bookmark-title>inet_res</fo:bookmark-title>
          <fo:bookmark internal-destination="idp10153040" starting-state="hide">
            <fo:bookmark-title>getbyname/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10153872" starting-state="hide">
            <fo:bookmark-title>getbyname/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10159344" starting-state="hide">
            <fo:bookmark-title>gethostbyaddr/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10160176" starting-state="hide">
            <fo:bookmark-title>gethostbyaddr/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10163744" starting-state="hide">
            <fo:bookmark-title>gethostbyname/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10164576" starting-state="hide">
            <fo:bookmark-title>gethostbyname/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10165408" starting-state="hide">
            <fo:bookmark-title>gethostbyname/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10172192" starting-state="hide">
            <fo:bookmark-title>lookup/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10173024" starting-state="hide">
            <fo:bookmark-title>lookup/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10173856" starting-state="hide">
            <fo:bookmark-title>lookup/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10180912" starting-state="hide">
            <fo:bookmark-title>resolve/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10181744" starting-state="hide">
            <fo:bookmark-title>resolve/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10182576" starting-state="hide">
            <fo:bookmark-title>resolve/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10209664" starting-state="hide">
            <fo:bookmark-title>nslookup/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10210496" starting-state="hide">
            <fo:bookmark-title>nslookup/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10211600" starting-state="hide">
            <fo:bookmark-title>nslookup/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10218256" starting-state="hide">
            <fo:bookmark-title>nnslookup/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10219088" starting-state="hide">
            <fo:bookmark-title>nnslookup/5</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp10228352" starting-state="hide">
          <fo:bookmark-title>init</fo:bookmark-title>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp10237504" starting-state="hide">
          <fo:bookmark-title>net_adm</fo:bookmark-title>
          <fo:bookmark internal-destination="idp10239936" starting-state="hide">
            <fo:bookmark-title>dns_hostname/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10244944" starting-state="hide">
            <fo:bookmark-title>host_file/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10250224" starting-state="hide">
            <fo:bookmark-title>localhost/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10253968" starting-state="hide">
            <fo:bookmark-title>names/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10254800" starting-state="hide">
            <fo:bookmark-title>names/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10262272" starting-state="hide">
            <fo:bookmark-title>ping/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10266416" starting-state="hide">
            <fo:bookmark-title>world/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10267248" starting-state="hide">
            <fo:bookmark-title>world/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10277344" starting-state="hide">
            <fo:bookmark-title>world_list/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10278176" starting-state="hide">
            <fo:bookmark-title>world_list/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp10294320" starting-state="hide">
          <fo:bookmark-title>net_kernel</fo:bookmark-title>
          <fo:bookmark internal-destination="idp10313888" starting-state="hide">
            <fo:bookmark-title>allow/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10320608" starting-state="hide">
            <fo:bookmark-title>connect_node/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10325216" starting-state="hide">
            <fo:bookmark-title>get_net_ticktime/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10337296" starting-state="hide">
            <fo:bookmark-title>getopts/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10345472" starting-state="hide">
            <fo:bookmark-title>monitor_nodes/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10346304" starting-state="hide">
            <fo:bookmark-title>monitor_nodes/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10398880" starting-state="hide">
            <fo:bookmark-title>set_net_ticktime/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10399712" starting-state="hide">
            <fo:bookmark-title>set_net_ticktime/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10426640" starting-state="hide">
            <fo:bookmark-title>setopts/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10437776" starting-state="hide">
            <fo:bookmark-title>start/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10438256" starting-state="hide">
            <fo:bookmark-title>start/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10438752" starting-state="hide">
            <fo:bookmark-title>start/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10445760" starting-state="hide">
            <fo:bookmark-title>stop/0</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp10456240" starting-state="hide">
          <fo:bookmark-title>os</fo:bookmark-title>
          <fo:bookmark internal-destination="idp10458896" starting-state="hide">
            <fo:bookmark-title>cmd/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10465280" starting-state="hide">
            <fo:bookmark-title>find_executable/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10466112" starting-state="hide">
            <fo:bookmark-title>find_executable/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10471904" starting-state="hide">
            <fo:bookmark-title>getenv/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10477616" starting-state="hide">
            <fo:bookmark-title>getenv/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10484640" starting-state="hide">
            <fo:bookmark-title>getenv/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10491648" starting-state="hide">
            <fo:bookmark-title>getpid/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10496128" starting-state="hide">
            <fo:bookmark-title>putenv/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10503280" starting-state="hide">
            <fo:bookmark-title>set_signal/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10511072" starting-state="hide">
            <fo:bookmark-title>system_time/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10516816" starting-state="hide">
            <fo:bookmark-title>system_time/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10525760" starting-state="hide">
            <fo:bookmark-title>timestamp/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10539024" starting-state="hide">
            <fo:bookmark-title>perf_counter/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10542944" starting-state="hide">
            <fo:bookmark-title>perf_counter/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10547232" starting-state="hide">
            <fo:bookmark-title>type/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10557024" starting-state="hide">
            <fo:bookmark-title>unsetenv/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10562384" starting-state="hide">
            <fo:bookmark-title>version/0</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp10574736" starting-state="hide">
          <fo:bookmark-title>pg2</fo:bookmark-title>
          <fo:bookmark internal-destination="idp10585152" starting-state="hide">
            <fo:bookmark-title>create/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10587904" starting-state="hide">
            <fo:bookmark-title>delete/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10590544" starting-state="hide">
            <fo:bookmark-title>get_closest_pid/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10593360" starting-state="hide">
            <fo:bookmark-title>get_local_members/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10596624" starting-state="hide">
            <fo:bookmark-title>get_members/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10599856" starting-state="hide">
            <fo:bookmark-title>join/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10603472" starting-state="hide">
            <fo:bookmark-title>leave/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10607488" starting-state="hide">
            <fo:bookmark-title>start/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10608320" starting-state="hide">
            <fo:bookmark-title>start_link/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10612976" starting-state="hide">
            <fo:bookmark-title>which_groups/0</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp10623984" starting-state="hide">
          <fo:bookmark-title>rpc</fo:bookmark-title>
          <fo:bookmark internal-destination="idp10629952" starting-state="hide">
            <fo:bookmark-title>abcast/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10634000" starting-state="hide">
            <fo:bookmark-title>abcast/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10637888" starting-state="hide">
            <fo:bookmark-title>async_call/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10649008" starting-state="hide">
            <fo:bookmark-title>block_call/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10653536" starting-state="hide">
            <fo:bookmark-title>block_call/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10657952" starting-state="hide">
            <fo:bookmark-title>call/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10664464" starting-state="hide">
            <fo:bookmark-title>call/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10673856" starting-state="hide">
            <fo:bookmark-title>cast/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10679872" starting-state="hide">
            <fo:bookmark-title>eval_everywhere/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10684352" starting-state="hide">
            <fo:bookmark-title>eval_everywhere/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10688864" starting-state="hide">
            <fo:bookmark-title>multi_server_call/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10692896" starting-state="hide">
            <fo:bookmark-title>multi_server_call/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10704320" starting-state="hide">
            <fo:bookmark-title>multicall/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10708784" starting-state="hide">
            <fo:bookmark-title>multicall/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10713952" starting-state="hide">
            <fo:bookmark-title>multicall/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10719136" starting-state="hide">
            <fo:bookmark-title>multicall/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10729824" starting-state="hide">
            <fo:bookmark-title>nb_yield/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10733408" starting-state="hide">
            <fo:bookmark-title>nb_yield/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10741232" starting-state="hide">
            <fo:bookmark-title>parallel_eval/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10746960" starting-state="hide">
            <fo:bookmark-title>pinfo/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10750496" starting-state="hide">
            <fo:bookmark-title>pinfo/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10751600" starting-state="hide">
            <fo:bookmark-title>pinfo/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10755408" starting-state="hide">
            <fo:bookmark-title>pmap/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10762144" starting-state="hide">
            <fo:bookmark-title>sbcast/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10766192" starting-state="hide">
            <fo:bookmark-title>sbcast/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10774304" starting-state="hide">
            <fo:bookmark-title>server_call/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10783648" starting-state="hide">
            <fo:bookmark-title>yield/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp10795984" starting-state="hide">
          <fo:bookmark-title>seq_trace</fo:bookmark-title>
          <fo:bookmark internal-destination="idp10803104" starting-state="hide">
            <fo:bookmark-title>set_token/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10810640" starting-state="hide">
            <fo:bookmark-title>set_token/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10846064" starting-state="hide">
            <fo:bookmark-title>get_token/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10849840" starting-state="hide">
            <fo:bookmark-title>get_token/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10856304" starting-state="hide">
            <fo:bookmark-title>print/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10860560" starting-state="hide">
            <fo:bookmark-title>print/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10865200" starting-state="hide">
            <fo:bookmark-title>reset_trace/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10868192" starting-state="hide">
            <fo:bookmark-title>set_system_tracer/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10874752" starting-state="hide">
            <fo:bookmark-title>get_system_tracer/0</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp10962640" starting-state="hide">
          <fo:bookmark-title>user</fo:bookmark-title>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp10973216" starting-state="hide">
          <fo:bookmark-title>wrap_log_reader</fo:bookmark-title>
          <fo:bookmark internal-destination="idp10983840" starting-state="hide">
            <fo:bookmark-title>chunk/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp10984672" starting-state="hide">
            <fo:bookmark-title>chunk/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp11002608" starting-state="hide">
            <fo:bookmark-title>close/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp11005248" starting-state="hide">
            <fo:bookmark-title>open/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp11006080" starting-state="hide">
            <fo:bookmark-title>open/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp11027792" starting-state="hide">
          <fo:bookmark-title>zlib</fo:bookmark-title>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp11036304" starting-state="hide">
          <fo:bookmark-title>app</fo:bookmark-title>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp11102352" starting-state="hide">
          <fo:bookmark-title>config</fo:bookmark-title>
        </fo:bookmark>
      </fo:bookmark>
    </fo:bookmark>
  </fo:bookmark-tree>
  <fo:page-sequence font-family="sans-serif" force-page-count="even" master-reference="cover" font-size="10pt">
    <fo:flow flow-name="xsl-region-body">
      <fo:block space-before="130mm" space-before.conditionality="retain" text-align="end">
        <fo:external-graphic src="/root/download/otp_src_20.0/bootstrap/lib/erl_docgen/priv/images/erlang-logo.gif"/>
      </fo:block>
      <fo:block id="cover-page" border-before-style="solid" border-before-width="10pt" border-color="#960003" font-size="2.3em" padding-before="0.5em" text-align="end">Kernel</fo:block>
      <fo:block font-size="0.9em" text-align="end">Copyright © 1997-2017 Ericsson AB. All Rights Reserved.</fo:block>
      <fo:block font-size="0.9em" text-align="end">Kernel 5.3</fo:block>
      <fo:block font-size="0.9em" text-align="end">July 12, 2017</fo:block>
      <fo:block padding-before="2.5em" font-size="1.33em" font-weight="bold" color="#C00" text-align="end"/>
      <fo:block break-before="page" border-before-style="solid" border-before-width="1pt" border-color="#960003" font-weight="bold" padding-before="0.5em" space-before="200mm" space-before.conditionality="retain">Copyright © 1997-2017 Ericsson AB. All Rights Reserved.</fo:block>
      <fo:block font-size="0.9em">
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
 
          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
    
    Ericsson AB. All Rights Reserved..
        </fo:block>
      <fo:block font-size="0.9em" font-weight="bold" space-before="2em">July 12, 2017</fo:block>
    </fo:flow>
  </fo:page-sequence>
  <fo:page-sequence font-family="serif" master-reference="document" initial-page-number="1" font-size="10pt">
    <fo:static-content flow-name="left-header">
      <fo:block text-align="start" border-after-style="solid" border-after-width="2pt" border-color="#960003" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">
        <fo:retrieve-marker retrieve-boundary="page-sequence" retrieve-class-name="chapter-title" retrieve-position="first-including-carryover"/>
      </fo:block>
    </fo:static-content>
    <fo:static-content flow-name="right-header">
      <fo:block text-align="end" border-after-style="solid" border-after-width="2pt" border-color="#960003" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">
        <fo:retrieve-marker retrieve-boundary="page-sequence" retrieve-class-name="chapter-title" retrieve-position="first-including-carryover"/>
      </fo:block>
    </fo:static-content>
    <fo:static-content flow-name="left-footer">
      <fo:block text-align="start" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold"><fo:page-number/> | Ericsson AB. All Rights Reserved.:
            Kernel</fo:block>
    </fo:static-content>
    <fo:static-content flow-name="right-footer">
      <fo:block text-align="end" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">Ericsson AB. All Rights Reserved.:
            Kernel | <fo:page-number/></fo:block>
    </fo:static-content>
    <fo:flow flow-name="xsl-region-body"><fo:block/><fo:block id="idp105936" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">1   
      Reference Manual</fo:block>

  <fo:block page-break-before="always" id="idp5580880" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">kernel</fo:marker>kernel</fo:block>Application</fo:block>
  <fo:block/>
  kernel
  The Kernel application.
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Kernel application has all the code necessary to run
      the Erlang runtime system: file servers, code servers,
      and so on.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Kernel application is the first application started. It is
      mandatory in the sense that the minimal system based on
      Erlang/OTP consists of Kernel and STDLIB. Kernel
      contains the following functional areas:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Start, stop, supervision, configuration, and distribution of applications</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Code loading</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Logging</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Error logging</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Global name service</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Supervision of Erlang/OTP</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Communication with sockets</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Operating system interface</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  

  <fo:block id="idp3360864" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Error Logger Event Handlers</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Two standard error logger event handlers are defined in
      the Kernel application. These are described in
      <fo:inline font-style="italic"><fo:inline font-family="monospace">error_logger(3)</fo:inline></fo:inline>.</fo:block>
  

  <fo:block id="idp3334416" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">OS Signal Event Handler</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Asynchronous OS signals may be subscribed to via the Kernel applications event manager
          (see <fo:inline font-style="italic">OTP Design Principles</fo:inline> and
          <fo:inline font-style="italic"><fo:inline font-family="monospace">gen_event(3)</fo:inline></fo:inline>) registered as <fo:inline font-family="monospace">erl_signal_server</fo:inline>.
          A default signal handler is installed which handles the following signals:</fo:block>
          <fo:block space-after="0.25em" space-before="0.25em">
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sigusr1</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default handler will halt Erlang and produce a crashdump
                      with slogan "Received SIGUSR1".
                      This is equivalent to calling <fo:inline font-family="monospace">erlang:halt("Received SIGUSR1")</fo:inline>.
              </fo:block></fo:block></fo:block-container>

              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sigquit</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default handler will halt Erlang immediately.
                      This is equivalent to calling <fo:inline font-family="monospace">erlang:halt()</fo:inline>.
              </fo:block></fo:block></fo:block-container>

              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sigterm</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default handler will terminate Erlang normally.
                      This is equivalent to calling <fo:inline font-family="monospace">init:stop()</fo:inline>.
              </fo:block></fo:block></fo:block-container>
          </fo:block>

          <fo:block id="idp3370320" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Events</fo:block>
              
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Any event handler added to <fo:inline font-family="monospace">erl_signal_server</fo:inline> must handle the following events.</fo:block>
              <fo:block space-after="0.25em" space-before="0.25em">
                  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sighup</fo:inline></fo:block>
                  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Hangup detected on controlling terminal or death of controlling process</fo:block></fo:block></fo:block-container>
                  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sigquit</fo:inline></fo:block>
                  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Quit from keyboard</fo:block></fo:block></fo:block-container>
                  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sigabrt</fo:inline></fo:block>
                  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Abort signal from abort</fo:block></fo:block></fo:block-container>
                  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sigalrm</fo:inline></fo:block>
                  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Timer signal from alarm</fo:block></fo:block></fo:block-container>
                  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sigterm</fo:inline></fo:block>
                  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Termination signal</fo:block></fo:block></fo:block-container>
                  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sigusr1</fo:inline></fo:block>
                  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">User-defined signal 1</fo:block></fo:block></fo:block-container>
                  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sigusr2</fo:inline></fo:block>
                  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">User-defined signal 2</fo:block></fo:block></fo:block-container>
                  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sigchld</fo:inline></fo:block>
                  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Child process stopped or terminated</fo:block></fo:block></fo:block-container>
                  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sigstop</fo:inline></fo:block>
                  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stop process</fo:block></fo:block></fo:block-container>
                  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sigtstp</fo:inline></fo:block>
                  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stop typed at terminal</fo:block></fo:block></fo:block-container>
              </fo:block>

              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Setting OS signals are described in <fo:inline font-style="italic"><fo:inline font-family="monospace">os:set_signal/2</fo:inline></fo:inline>.</fo:block>
          
  

  <fo:block id="idp2916784" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Configuration</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following configuration parameters are defined for the Kernel
      application. For more information about configuration parameters,
    see file <fo:inline font-style="italic"><fo:inline font-family="monospace">app(4)</fo:inline></fo:inline>.</fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">browser_cmd = string() | {M,F,A}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When pressing the <fo:inline font-weight="bold">Help</fo:inline> button in a tool such as Debugger,
          the help text (an HTML file <fo:inline font-family="monospace">File</fo:inline>) is by default
          displayed in a Netscape browser, which is required to be
          operational. This parameter can be used to change the command for
          how to display the help text if another browser than Netscape
          is preferred, or if another platform than Unix or Windows is
          used.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If set to a string <fo:inline font-family="monospace">Command</fo:inline>, the command
          <fo:inline font-family="monospace">"Command File"</fo:inline> is evaluated using
	<fo:inline font-style="italic"><fo:inline font-family="monospace">os:cmd/1</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If set to a module-function-args tuple, <fo:inline font-family="monospace">{M,F,A}</fo:inline>,
          the call <fo:inline font-family="monospace">apply(M,F,[File|A])</fo:inline> is evaluated.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">distributed = [Distrib]</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies which applications that are distributed and on which
          nodes they are allowed to execute. In this parameter:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Distrib = {App,Nodes} | {App,Time,Nodes}</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">App = atom()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Time = integer()&gt;0</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Nodes = [node() | {node(),...,node()}]</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The parameter is described in
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">application:load/2</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">dist_auto_connect = Value</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies when nodes are automatically connected. If
          this parameter is not specified, a node is always
          automatically connected, for example, when a message is to be sent to
          that node. <fo:inline font-family="monospace">Value</fo:inline> is one of:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">never</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Connections are never automatically established, they
           must be explicitly connected. See
	   <fo:inline font-style="italic"><fo:inline font-family="monospace">net_kernel(3)</fo:inline></fo:inline>.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">once</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Connections are established automatically, but only
           once per node. If a node goes down, it must thereafter be
           explicitly connected. See
	   <fo:inline font-style="italic"><fo:inline font-family="monospace">net_kernel(3)</fo:inline></fo:inline>.</fo:block></fo:block></fo:block-container>
        </fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">permissions = [Perm]</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the default permission for applications when they
          are started. In this parameter:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Perm = {ApplName,Bool}</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ApplName = atom()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Bool = boolean()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Permissions are described in
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">application:permit/2</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">error_logger = Value</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Value</fo:inline> is one of:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">tty</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Installs the standard event handler, which prints error
           reports to <fo:inline font-family="monospace">stdio</fo:inline>. This is the default option.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{file, FileName}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Installs the standard event handler, which prints error
           reports to file <fo:inline font-family="monospace">FileName</fo:inline>, where <fo:inline font-family="monospace">FileName</fo:inline>
           is a string. The file is opened with encoding UTF-8.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">false</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">No standard event handler is installed, but
              the initial, primitive event handler is kept, printing
              raw event messages to <fo:inline font-family="monospace">tty</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">silent</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Error logging is turned off.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">error_logger_format_depth = Depth</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Can be used to limit the size of the
	formatted output from the error logger event handlers.</fo:block>

	<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This configuration parameter was introduced in OTP 18.1
	and is experimental. Based on user feedback, it
	can be changed or improved in future releases, for example,
	to gain better control over how to limit the size of the
	formatted output. We have no plans to remove this
	new feature entirely, unless it turns out to be
	useless.</fo:block></fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Depth</fo:inline> is a positive integer representing the maximum
        depth to which terms are printed by the error logger event
        handlers included in OTP. This
        configuration parameter is used by the two event handlers
        defined by the Kernel application and the two event
        handlers in the SASL application.
	(If you have implemented your own error handlers, this configuration
	parameter has no effect on them.)</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Depth</fo:inline> is used as follows: Format strings
	passed to the event handlers are rewritten.
	The format controls <fo:inline font-family="monospace">~p</fo:inline> and <fo:inline font-family="monospace">~w</fo:inline> are replaced with
	<fo:inline font-family="monospace">~P</fo:inline> and <fo:inline font-family="monospace">~W</fo:inline>, respectively, and <fo:inline font-family="monospace">Depth</fo:inline> is
	used as the depth parameter. For details, see
	<fo:inline font-style="italic"><fo:inline font-family="monospace">io:format/2</fo:inline></fo:inline>
	in STDLIB.</fo:block>

	<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A reasonable starting value for <fo:inline font-family="monospace">Depth</fo:inline> is
	<fo:inline font-family="monospace">30</fo:inline>. We recommend to test crashing various processes in your
	application, examine the logs from the crashes, and then
	increase or decrease the value.</fo:block></fo:block>
     </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">global_groups = [GroupTuple]</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines global groups, see
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">global_group(3)</fo:inline></fo:inline>.
	In this parameter:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">GroupTuple = {GroupName, [Node]} | {GroupName, PublishType, [Node]}</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">GroupName = atom()</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">PublishType = normal | hidden</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Node = node()</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">inet_default_connect_options = [{Opt, Val}]</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies default options for <fo:inline font-family="monospace">connect</fo:inline> sockets,
          see <fo:inline font-style="italic"><fo:inline font-family="monospace">inet(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">inet_default_listen_options = [{Opt, Val}]</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies default options for <fo:inline font-family="monospace">listen</fo:inline> (and
          <fo:inline font-family="monospace">accept</fo:inline>) sockets, see <fo:inline font-style="italic"><fo:inline font-family="monospace">inet(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{inet_dist_use_interface, ip_address()}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the host of an Erlang node has many network interfaces,
          this parameter specifies which one to listen on. For the type definition
	  of <fo:inline font-family="monospace">ip_address()</fo:inline>,
	  see <fo:inline font-style="italic"><fo:inline font-family="monospace">inet(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{inet_dist_listen_min, First}</fo:inline> and <fo:inline font-family="monospace">{inet_dist_listen_max, Last}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines the <fo:inline font-family="monospace">First..Last</fo:inline> port range for the listener
          socket of a distributed Erlang node.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{inet_dist_listen_options, Opts}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines a list of extra socket options to be used when opening the
	  listening socket for a distributed Erlang node.
	  See <fo:inline font-style="italic"><fo:inline font-family="monospace">gen_tcp:listen/2</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{inet_dist_connect_options, Opts}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines a list of extra socket options to be used when connecting to
	  other distributed Erlang nodes.
	  See <fo:inline font-style="italic"><fo:inline font-family="monospace">gen_tcp:connect/4</fo:inline></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">inet_parse_error_log = silent</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If set, no
          <fo:inline font-family="monospace">error_logger</fo:inline> messages are generated when erroneous
          lines are found and skipped in the various Inet configuration
          files.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">inetrc = Filename</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The name (string) of an Inet user configuration file. For details,
	see section
	<fo:inline font-style="italic"><fo:inline font-family="monospace">Inet Configuration</fo:inline></fo:inline>
	in the ERTS User's Guide.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">net_setuptime = SetupTime</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">SetupTime</fo:inline> must be a positive integer or floating point
          number, and is interpreted as the maximum allowed time
          for each network operation during connection setup to another
          Erlang node. The maximum allowed value is <fo:inline font-family="monospace">120</fo:inline>. If higher values
          are specified, <fo:inline font-family="monospace">120</fo:inline> is used. Default is 7 seconds if the variable
          is not specified, or if the value is incorrect (for example, not a number).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that this value does not limit the total connection
          setup time, but rather each individual network operation during
          the connection setup and handshake.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">net_ticktime = TickTime</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the <fo:inline font-family="monospace">net_kernel</fo:inline> tick time. <fo:inline font-family="monospace">TickTime</fo:inline>
          is specified in seconds. Once every <fo:inline font-family="monospace">TickTime/4</fo:inline> second, all
          connected nodes are ticked (if anything else is written
          to a node). If nothing is received from another node
          within the last four tick times, that node is considered
          to be down. This ensures that nodes that are not responding,
          for reasons such as hardware errors, are considered to be
          down.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The time <fo:inline font-family="monospace">T</fo:inline>, in which a node that is not responding is
          detected, is calculated as <fo:inline font-family="monospace">MinT &lt; T &lt; MaxT</fo:inline>, where:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
MinT = TickTime - TickTime / 4
MaxT = TickTime + TickTime / 4</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">TickTime</fo:inline> defaults to <fo:inline font-family="monospace">60</fo:inline> (seconds). Thus,
          <fo:inline font-family="monospace">45 &lt; T &lt; 75</fo:inline> seconds.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that <fo:inline font-weight="bold">all</fo:inline> communicating nodes are to have the <fo:inline font-weight="bold">same</fo:inline>
          <fo:inline font-family="monospace">TickTime</fo:inline> value specified.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Normally, a terminating node is detected immediately.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">shutdown_timeout = integer() | infinity</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the time <fo:inline font-family="monospace">application_controller</fo:inline> waits
          for an application to terminate during node shutdown. If the
          timer expires, <fo:inline font-family="monospace">application_controller</fo:inline> brutally
          kills <fo:inline font-family="monospace">application_master</fo:inline> of the hanging
          application. If this parameter is undefined, it defaults
          to <fo:inline font-family="monospace">infinity</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sync_nodes_mandatory = [NodeName]</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies which other nodes that <fo:inline font-weight="bold">must</fo:inline> be alive
          for this node to start properly. If some node in the list
          does not start within the specified time, this node does not
          start either. If this parameter is undefined, it defaults to
          <fo:inline font-family="monospace">[]</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sync_nodes_optional = [NodeName]</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies which other nodes that <fo:inline font-weight="bold">can</fo:inline> be alive
          for this node to start properly. If some node in this list
          does not start within the specified time, this node starts
          anyway. If this parameter is undefined, it defaults to
          the empty list.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sync_nodes_timeout = integer() | infinity</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the time (in milliseconds) that this node
          waits for the mandatory and optional nodes to start. If
          this parameter is undefined, no node synchronization is
          performed. This option ensures that <fo:inline font-family="monospace">global</fo:inline> is
          synchronized.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">start_dist_ac = true | false</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts the <fo:inline font-family="monospace">dist_ac</fo:inline> server if the parameter is
          <fo:inline font-family="monospace">true</fo:inline>. This parameter is to be set to <fo:inline font-family="monospace">true</fo:inline> for
          systems using distributed applications.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defaults to <fo:inline font-family="monospace">false</fo:inline>.  If this parameter is
          undefined, the server is started if parameter
          <fo:inline font-family="monospace">distributed</fo:inline> is set.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">start_boot_server = true | false</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts the <fo:inline font-family="monospace">boot_server</fo:inline> if the parameter is <fo:inline font-family="monospace">true</fo:inline>
          (see <fo:inline font-style="italic"><fo:inline font-family="monospace">erl_boot_server(3)</fo:inline></fo:inline>).
	  This parameter is to be set to <fo:inline font-family="monospace">true</fo:inline> in an embedded system
	  using this service.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defaults to <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">boot_server_slaves = [SlaveIP]</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If configuration parameter <fo:inline font-family="monospace">start_boot_server</fo:inline> is
          <fo:inline font-family="monospace">true</fo:inline>, this parameter can be used to initialize
          <fo:inline font-family="monospace">boot_server</fo:inline> with a list of slave IP addresses:</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
          <fo:inline font-family="monospace">SlaveIP = string() | atom | {integer(),integer(),integer(),integer()}</fo:inline>,</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">where <fo:inline font-family="monospace">0 &lt;= integer() &lt;=255</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Examples of <fo:inline font-family="monospace">SlaveIP</fo:inline> in atom, string, and tuple form:</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">'150.236.16.70', "150,236,16,70", {150,236,16,70}</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defaults to <fo:inline font-family="monospace">[]</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">start_disk_log = true | false</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts the <fo:inline font-family="monospace">disk_log_server</fo:inline> if the parameter is
          <fo:inline font-family="monospace">true</fo:inline> (see <fo:inline font-style="italic"><fo:inline font-family="monospace">disk_log(3)</fo:inline></fo:inline>).
	  This parameter is to be set to <fo:inline font-family="monospace">true</fo:inline> in an embedded system
	  using this service.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defaults to <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">start_pg2 = true | false</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts the <fo:inline font-family="monospace">pg2</fo:inline> server (see
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">pg2(3)</fo:inline></fo:inline>) if
          the parameter is <fo:inline font-family="monospace">true</fo:inline>. This parameter is to be set to
          <fo:inline font-family="monospace">true</fo:inline> in an embedded system that uses this service.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defaults to <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">start_timer = true | false</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts the <fo:inline font-family="monospace">timer_server</fo:inline> if the parameter is
          <fo:inline font-family="monospace">true</fo:inline> (see <fo:inline font-style="italic"><fo:inline font-family="monospace">timer(3)</fo:inline></fo:inline>).
	  This parameter is to be set to <fo:inline font-family="monospace">true</fo:inline> in an embedded system
	  using this service.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defaults to <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">shell_history = enabled | disabled </fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies whether shell history should be logged to disk
           between usages of <fo:inline font-family="monospace">erl</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">shell_history_drop = [string()]</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specific log lines that should not be persisted. For
           example <fo:inline font-family="monospace">["q().", "init:stop()."]</fo:inline> will allow to
           ignore commands that shut the node down. Defaults to
           <fo:inline font-family="monospace">[]</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">shell_history_file_bytes = integer()</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">how many bytes the shell should remember. By default, the
           value is set to 512kb, and the minimal value is 50kb.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">shell_history_path = string()</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies where the shell history files will be stored.
           defaults to the user's cache directory as returned by
           <fo:inline font-family="monospace">filename:basedir(user_cache, "erlang-history")</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">shutdown_func = {Mod, Func}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Where:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Mod = atom()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Func = atom()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets a function that <fo:inline font-family="monospace">application_controller</fo:inline> calls
          when it starts to terminate. The function is called as
          <fo:inline font-family="monospace">Mod:Func(Reason)</fo:inline>, where <fo:inline font-family="monospace">Reason</fo:inline> is the terminate
          reason for <fo:inline font-family="monospace">application_controller</fo:inline>, and it must
          return as soon as possible for <fo:inline font-family="monospace">application_controller</fo:inline>
          to terminate properly.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">source_search_rules = [DirRule] | [SuffixRule] </fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Where:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">DirRule = {ObjDirSuffix,SrcDirSuffix}</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">SuffixRule = {ObjSuffix,SrcSuffix,[DirRule]}</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ObjDirSuffix = string()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">SrcDirSuffix = string()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ObjSuffix = string()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">SrcSuffix = string()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies a list of rules for use by <fo:inline font-family="monospace">filelib:find_file/2</fo:inline> and
          <fo:inline font-family="monospace">filelib:find_source/2</fo:inline>. If this is set to some other value
          than the empty list, it replaces the default rules. Rules can be
          simple pairs of directory suffixes, such as <fo:inline font-family="monospace">{"ebin",
          "src"}</fo:inline>, which are used by <fo:inline font-family="monospace">filelib:find_file/2</fo:inline>, or
          triples specifying separate directory suffix rules depending on
          file name extensions, for example <fo:inline font-family="monospace">[{".beam", ".erl", [{"ebin",
          "src"}]}</fo:inline>, which are used by <fo:inline font-family="monospace">filelib:find_source/2</fo:inline>. Both
          kinds of rules can be mixed in the list.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>
  

  <fo:block id="idp5918752" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">See Also</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic"><fo:inline font-family="monospace">app(4)</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">application(3)</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">code(3)</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">disk_log(3)</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">erl_boot_server(3)</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">erl_ddll(3)</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">error_logger(3)</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">file(3)</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">global(3)</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">global_group(3)</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">heart(3)</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">inet(3)</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">net_kernel(3)</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">os(3)</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">pg2(3)</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">rpc(3)</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">seq_trace(3)</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">user(3)</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">timer(3)</fo:inline></fo:inline></fo:block>
  
<fo:block page-break-before="always" id="idp5941568" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">application</fo:marker>application</fo:block>Erlang module</fo:block>
  <fo:block/>
  application
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In OTP, <fo:inline font-weight="bold">application</fo:inline> denotes a component implementing
      some specific functionality, that can be started and stopped as a
      unit, and that can be reused in other systems. This
      module interacts with <fo:inline font-weight="bold">application controller</fo:inline>, a process
      started at every Erlang runtime system. This module contains functions
      for controlling applications (for example, starting and stopping
      applications), and functions to access information about
      applications (for example, configuration parameters).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An application is defined by an <fo:inline font-weight="bold">application specification</fo:inline>.
      The specification is normally located in an
      <fo:inline font-weight="bold">application resource file</fo:inline> named <fo:inline font-family="monospace">Application.app</fo:inline>,
      where <fo:inline font-family="monospace">Application</fo:inline> is the application name. For details
      about the application specification, see
    <fo:inline font-style="italic"><fo:inline font-family="monospace">app(4)</fo:inline></fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module can also be viewed as a behaviour for an application
      implemented according to the OTP design principles as a
      supervision tree. The definition of how to start and stop
      the tree is to be located in an <fo:inline font-weight="bold">application callback module</fo:inline>,
      exporting a predefined set of functions.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details about applications and behaviours, see
    <fo:inline font-style="italic">OTP Design Principles</fo:inline>.</fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Data Types</fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">start_type() = <fo:block/>    normal |<fo:block/>    {takeover, Node :: node()} |<fo:block/>    {failover, Node :: node()}</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">restart_type() = permanent | transient | temporary</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:inline font-weight="bold" space-after="0.25em">tuple_of(T)</fo:inline></fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A tuple where the elements are of type <fo:inline font-family="monospace">T</fo:inline>.</fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp5955248"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ensure_all_started(Application) -&gt; {ok, Started} | {error, Reason}</fo:block></fo:block><fo:block id="idp5956080"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ensure_all_started(Application, Type) -&gt;<fo:block/>                      {ok, Started} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Application = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Type = <fo:inline font-style="italic">restart_type()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Started = [atom()]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to calling
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">start/1,2</fo:inline></fo:inline>
          repeatedly on all dependencies that are not yet started for an application.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">{ok, AppNames}</fo:inline> for a successful start or for an already started
          application (which is, however, omitted from the <fo:inline font-family="monospace">AppNames</fo:inline> list).</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function reports <fo:inline font-family="monospace">{error, {AppName,Reason}}</fo:inline> for errors, where
	  <fo:inline font-family="monospace">Reason</fo:inline> is any possible reason returned by
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">start/1,2</fo:inline></fo:inline>
	  when starting a specific dependency.</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If an error occurs, the applications started by the function are stopped
	  to bring the set of running applications back to its initial state.</fo:block>
        </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp5963872"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ensure_started(Application) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block id="idp5964704"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ensure_started(Application, Type) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Application = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Type = <fo:inline font-style="italic">restart_type()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to
	<fo:inline font-style="italic"><fo:inline font-family="monospace">start/1,2</fo:inline></fo:inline>
	except it returns <fo:inline font-family="monospace">ok</fo:inline> for already started applications.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp5968656"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_all_env() -&gt; Env</fo:block></fo:block><fo:block id="idp5969488"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_all_env(Application) -&gt; Env</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Application = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Env = [{Par :: atom(), Val :: term()}]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the configuration parameters and their values for
          <fo:inline font-family="monospace">Application</fo:inline>. If the argument is omitted, it defaults to
          the application of the calling process.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the specified application is not loaded, or if the process
          executing the call does not belong to any application,
          the function returns <fo:inline font-family="monospace">[]</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp5973808"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_all_key() -&gt; [] | {ok, Keys}</fo:block></fo:block><fo:block id="idp5974640"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_all_key(Application) -&gt; undefined | Keys</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Application = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Keys = {ok, [{Key :: atom(), Val :: term()}, ...]}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the application specification keys and their values
          for <fo:inline font-family="monospace">Application</fo:inline>. If the argument is omitted, it
          defaults to the application of the calling process.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the specified application is not loaded, the function
          returns <fo:inline font-family="monospace">undefined</fo:inline>. If the process executing the call
          does not belong to any application, the function returns
          <fo:inline font-family="monospace">[]</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp5979504"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_application() -&gt; undefined | {ok, Application}</fo:block></fo:block><fo:block id="idp5980336"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_application(PidOrModule) -&gt; undefined | {ok, Application}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">PidOrModule = (Pid :: pid()) | (Module :: module())</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Application = atom()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the name of the application to which the process
          <fo:inline font-family="monospace">Pid</fo:inline> or the module <fo:inline font-family="monospace">Module</fo:inline> belongs. Providing no
          argument is the same as calling
          <fo:inline font-family="monospace">get_application(self())</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the specified process does not belong to any application,
          or if the specified process or module does not exist,
          the function returns <fo:inline font-family="monospace">undefined</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp5985600"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_env(Par) -&gt; undefined | {ok, Val}</fo:block></fo:block><fo:block id="idp5986432"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_env(Application, Par) -&gt; undefined | {ok, Val}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Application = Par = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Val = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the value of configuration parameter <fo:inline font-family="monospace">Par</fo:inline>
          for <fo:inline font-family="monospace">Application</fo:inline>. If the application argument is
          omitted, it defaults to the application of the calling
          process.</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">undefined</fo:inline> if any of the following applies:</fo:block>
	  <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The specified application is not loaded.</fo:block></fo:list-item-body></fo:list-item>
	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The configuration parameter does not exist.</fo:block></fo:list-item-body></fo:list-item>
	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The process executing the call does not belong to any application.</fo:block></fo:list-item-body></fo:list-item>
	  </fo:list-block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp5993376"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_env(Application, Par, Def) -&gt; Val</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Application = Par = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Def = Val = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Works like <fo:inline font-style="italic"><fo:inline font-family="monospace">get_env/2</fo:inline></fo:inline> but returns
          value <fo:inline font-family="monospace">Def</fo:inline> when configuration parameter
          <fo:inline font-family="monospace">Par</fo:inline> does not exist.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp5997184"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_key(Key) -&gt; undefined | {ok, Val}</fo:block></fo:block><fo:block id="idp5997920"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_key(Application, Key) -&gt; undefined | {ok, Val}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Application = Key = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Val = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the value of the application specification key
          <fo:inline font-family="monospace">Key</fo:inline> for <fo:inline font-family="monospace">Application</fo:inline>. If the application
          argument is omitted, it defaults to the application of
          the calling process.</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">undefined</fo:inline> if any of the following applies:</fo:block>
	  <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The specified application is not loaded.</fo:block></fo:list-item-body></fo:list-item>
	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The specification key does not exist.</fo:block></fo:list-item-body></fo:list-item>
	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The process executing the call does not belong to any application.</fo:block></fo:list-item-body></fo:list-item>
	  </fo:list-block>

      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6004304"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">load(AppDescr) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block id="idp6005136"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">load(AppDescr, Distributed) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">AppDescr = Application | (AppSpec :: <fo:inline font-style="italic">application_spec()</fo:inline>)</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Application = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Distributed = <fo:block/>    {Application, Nodes} | {Application, Time, Nodes} | default</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Nodes = [node() | <fo:inline font-style="italic">tuple_of</fo:inline>(node())]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Time = integer() &gt;= 1</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">application_spec() = <fo:block/>    {application,<fo:block/>     Application :: atom(),<fo:block/>     AppSpecKeys :: [<fo:inline font-style="italic">application_opt()</fo:inline>]}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">application_opt() = <fo:block/>    {description, Description :: string()} |<fo:block/>    {vsn, Vsn :: string()} |<fo:block/>    {id, Id :: string()} |<fo:block/>    {modules, [Module :: module()]} |<fo:block/>    {registered, Names :: [Name :: atom()]} |<fo:block/>    {applications, [Application :: atom()]} |<fo:block/>    {included_applications, [Application :: atom()]} |<fo:block/>    {env, [{Par :: atom(), Val :: term()}]} |<fo:block/>    {start_phases,<fo:block/>     [{Phase :: atom(), PhaseArgs :: term()}] | undefined} |<fo:block/>    {maxT, MaxT :: timeout()} |<fo:block/>    {maxP, MaxP :: integer() &gt;= 1 | infinity} |<fo:block/>    {mod, Start :: {Module :: module(), StartArgs :: term()}}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Loads the application specification for an application into
          the application controller. It also loads the application
          specifications for any included applications. Notice that
          the function does not load the Erlang object code.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The application can be specified by its name <fo:inline font-family="monospace">Application</fo:inline>.
          In this case, the application controller searches the code
          path for the application resource file <fo:inline font-family="monospace">Application.app</fo:inline>
          and loads the specification it contains.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The application specification can also be specified directly as a
          tuple <fo:inline font-family="monospace">AppSpec</fo:inline>, having the format and
          contents as described in
	<fo:inline font-style="italic"><fo:inline font-family="monospace">app(4)</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Distributed == {Application,[Time,]Nodes}</fo:inline>,
          the application becomes distributed. The argument overrides
          the value for the application in the Kernel configuration
          parameter <fo:inline font-family="monospace">distributed</fo:inline>. <fo:inline font-family="monospace">Application</fo:inline> must be
          the application name (same as in the first argument).
          If a node crashes and <fo:inline font-family="monospace">Time</fo:inline> is specified,
          the application controller waits for <fo:inline font-family="monospace">Time</fo:inline>
          milliseconds before attempting to restart the application on
          another node. If <fo:inline font-family="monospace">Time</fo:inline> is not specified, it
          defaults to <fo:inline font-family="monospace">0</fo:inline> and the application is restarted
          immediately.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Nodes</fo:inline> is a list of node names where the application
          can run, in priority from left to right. Node names can be
          grouped using tuples to indicate that they have the same
          priority.</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Nodes = [cp1@cave, {cp2@cave, cp3@cave}]</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This means that the application is preferably to be started
          at <fo:inline font-family="monospace">cp1@cave</fo:inline>. If <fo:inline font-family="monospace">cp1@cave</fo:inline> is down,
          the application is to be started at <fo:inline font-family="monospace">cp2@cave</fo:inline>
          or <fo:inline font-family="monospace">cp3@cave</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Distributed == default</fo:inline>, the value for
          the application in the Kernel configuration parameter
          <fo:inline font-family="monospace">distributed</fo:inline> is used.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6025376"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">loaded_applications() -&gt; [{Application, Description, Vsn}]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Application = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Description = Vsn = string()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list with information about the applications, and included
	  applications, which are loaded using <fo:inline font-family="monospace">load/1,2</fo:inline>.
          <fo:inline font-family="monospace">Application</fo:inline> is the application name.
          <fo:inline font-family="monospace">Description</fo:inline> and <fo:inline font-family="monospace">Vsn</fo:inline> are the values
	  of their <fo:inline font-family="monospace">description</fo:inline> and <fo:inline font-family="monospace">vsn</fo:inline> application specification
          keys, respectively.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6031264"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">permit(Application, Permission) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Application = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Permission = boolean()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Changes the permission for <fo:inline font-family="monospace">Application</fo:inline> to run at
          the current node. The application must be loaded using
          <fo:inline font-family="monospace">load/1,2</fo:inline> for the function to have effect.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the permission of a loaded, but not started, application
          is set to <fo:inline font-family="monospace">false</fo:inline>, <fo:inline font-family="monospace">start</fo:inline> returns <fo:inline font-family="monospace">ok</fo:inline> but
          the application is not started until the permission is
          set to <fo:inline font-family="monospace">true</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the permission of a running application is set to
          <fo:inline font-family="monospace">false</fo:inline>, the application is stopped. If
          the permission later is set to <fo:inline font-family="monospace">true</fo:inline>, it is
          restarted.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the application is distributed, setting the permission to
          <fo:inline font-family="monospace">false</fo:inline> means that the application will be started at, or
          moved to, another node according to how its distribution is
          configured
	(see <fo:inline font-style="italic"><fo:inline font-family="monospace">load/2</fo:inline></fo:inline>).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function does not return until the application is
          started, stopped, or successfully moved to another node.
          However, in some cases where permission is set to <fo:inline font-family="monospace">true</fo:inline>,
          the function returns <fo:inline font-family="monospace">ok</fo:inline> even though the application
          is not started. This is true when an application
          cannot start because of dependencies to other
          applications that are not yet started. When they are
          started, <fo:inline font-family="monospace">Application</fo:inline> is started as well.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By default, all applications are loaded with permission
          <fo:inline font-family="monospace">true</fo:inline> on all nodes. The permission can be configured
          using the Kernel configuration parameter <fo:inline font-family="monospace">permissions</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6044464"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">set_env(Application, Par, Val) -&gt; ok</fo:block></fo:block><fo:block id="idp6045296"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">set_env(Application, Par, Val, Opts) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Application = Par = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Val = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Opts = [{timeout, timeout()} | {persistent, boolean()}]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the value of configuration parameter <fo:inline font-family="monospace">Par</fo:inline> for
          <fo:inline font-family="monospace">Application</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">set_env/4</fo:inline> uses the standard <fo:inline font-family="monospace">gen_server</fo:inline> time-out
          value (5000 ms). Option <fo:inline font-family="monospace">timeout</fo:inline> can be specified
          if another time-out value is useful, for example, in situations
          where the application controller is heavily loaded.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">set_env/4</fo:inline> is called before the application is loaded,
          the application environment values specified in file <fo:inline font-family="monospace">Application.app</fo:inline>
          override the ones previously set. This is also true for application
          reloads.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Option <fo:inline font-family="monospace">persistent</fo:inline> can be set to <fo:inline font-family="monospace">true</fo:inline>
          to guarantee that parameters set with <fo:inline font-family="monospace">set_env/4</fo:inline>
          are not overridden by those defined in the application resource
          file on load. This means that persistent values will stick after the application
          is loaded and also on application reload.</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Use this function only if you know what you are doing,
            that is, on your own applications. It is very
	    application-dependent and
	    configuration parameter-dependent when and how often
            the value is read by the application. Careless use
            of this function can put the application in a
            weird, inconsistent, and malfunctioning state.</fo:block>
        </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6055760"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">start(Application) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block id="idp6056592"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">start(Application, Type) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Application = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Type = <fo:inline font-style="italic">restart_type()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts <fo:inline font-family="monospace">Application</fo:inline>. If it is not loaded,
          the application controller first loads it using
          <fo:inline font-family="monospace">load/1</fo:inline>. It ensures that any included applications
          are loaded, but does not start them. That is assumed to be
          taken care of in the code for <fo:inline font-family="monospace">Application</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The application controller checks the value of
          the application specification key <fo:inline font-family="monospace">applications</fo:inline>, to
          ensure that all applications needed to be started before
          this application are running. Otherwise,
          <fo:inline font-family="monospace">{error,{not_started,App}}</fo:inline> is returned, where <fo:inline font-family="monospace">App</fo:inline>
          is the name of the missing application.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The application controller then creates an <fo:inline font-weight="bold">application master</fo:inline>
	  for the application. The application master is
          the group leader of all the processes in the application.
          The application master starts the application by calling
          the application callback function <fo:inline font-family="monospace">Module:start/2</fo:inline> as
          defined by the application specification key <fo:inline font-family="monospace">mod</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Argument <fo:inline font-family="monospace">Type</fo:inline> specifies the type of
          the application. If omitted, it defaults to <fo:inline font-family="monospace">temporary</fo:inline>.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If a permanent application terminates, all other
           applications and the entire Erlang node are also terminated.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If a transient application terminates with <fo:inline font-family="monospace">Reason == normal</fo:inline>,
	      this is reported but no other applications are terminated.</fo:block></fo:list-item-body></fo:list-item>
	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If a transient application terminates abnormally, all other
	      applications and the entire Erlang node are also terminated.</fo:block></fo:list-item-body></fo:list-item>
	    </fo:list-block>
	   </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If a temporary application terminates, this is reported
           but no other applications are terminated.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that an application can always be stopped
          explicitly by calling <fo:inline font-family="monospace">stop/1</fo:inline>. Regardless of the type of
          the application, no other applications are affected.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice also that the transient type is of little practical use,
          because when a supervision tree terminates, the reason is set to
          <fo:inline font-family="monospace">shutdown</fo:inline>, not <fo:inline font-family="monospace">normal</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6073744"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">start_type() -&gt; StartType | undefined | local</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">StartType = <fo:inline font-style="italic">start_type()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is intended to be called by a process belonging
          to an application, when the application is started, to
          determine the start type, which is <fo:inline font-family="monospace">StartType</fo:inline> or
          <fo:inline font-family="monospace">local</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For a description of <fo:inline font-family="monospace">StartType</fo:inline>, see
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">Module:start/2</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">local</fo:inline> is returned if only parts of the application are
          restarted (by a supervisor), or if the function is
          called outside a startup.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the process executing the call does not belong to any
          application, the function returns <fo:inline font-family="monospace">undefined</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6081296"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">stop(Application) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Application = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stops <fo:inline font-family="monospace">Application</fo:inline>. The application master calls
          <fo:inline font-family="monospace">Module:prep_stop/1</fo:inline>, if such a function is defined, and
          then tells the top supervisor of the application to shut down
          (see <fo:inline font-style="italic"><fo:inline font-family="monospace">supervisor(3)</fo:inline></fo:inline>).
	  This means that the entire
          supervision tree, including included applications, is
          terminated in reversed start order. After the shutdown,
          the application master calls <fo:inline font-family="monospace">Module:stop/1</fo:inline>.
          <fo:inline font-family="monospace">Module</fo:inline> is the callback module as defined by
          the application specification key <fo:inline font-family="monospace">mod</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Last, the application master terminates. Notice that all
          processes with the application master as group leader, that is,
          processes spawned from a process belonging to the application,
          are also terminated.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When stopped, the application is still loaded.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To stop a distributed application, <fo:inline font-family="monospace">stop/1</fo:inline>
          must be called on all nodes where it can execute (that is,
          on all nodes where it has been started). The call to
          <fo:inline font-family="monospace">stop/1</fo:inline> on the node where the application currently
          executes stops its execution. The application is not
          moved between nodes, as <fo:inline font-family="monospace">stop/1</fo:inline> is called on
          the node where the application currently executes before
          <fo:inline font-family="monospace">stop/1</fo:inline> is called on the other nodes.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6091296"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">takeover(Application, Type) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Application = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Type = <fo:inline font-style="italic">restart_type()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Takes over the distributed application
          <fo:inline font-family="monospace">Application</fo:inline>, which executes at another node
          <fo:inline font-family="monospace">Node</fo:inline>. At the current node, the application is
          restarted by calling
          <fo:inline font-family="monospace">Module:start({takeover,Node},StartArgs)</fo:inline>. <fo:inline font-family="monospace">Module</fo:inline>
          and <fo:inline font-family="monospace">StartArgs</fo:inline> are retrieved from the loaded application
          specification. The application at the other node is not
          stopped until the startup is completed, that is, when
          <fo:inline font-family="monospace">Module:start/2</fo:inline> and any calls to
          <fo:inline font-family="monospace">Module:start_phase/3</fo:inline> have returned.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Thus, two instances of the application run simultaneously
          during the takeover, so that data can be transferred
          from the old to the new instance. If this is not an acceptable
          behavior, parts of the old instance can be shut down when
          the new instance is started. However, the application cannot
          be stopped entirely, at least the top supervisor
          must remain alive.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For a description of <fo:inline font-family="monospace">Type</fo:inline>, see
	<fo:inline font-style="italic"><fo:inline font-family="monospace">start/1,2</fo:inline></fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6100112"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">unload(Application) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Application = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Unloads the application specification for <fo:inline font-family="monospace">Application</fo:inline>
          from the application controller. It also unloads
          the application specifications for any included applications.
          Notice that the function does not purge the Erlang
          object code.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6103536"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">unset_env(Application, Par) -&gt; ok</fo:block></fo:block><fo:block id="idp6104368"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">unset_env(Application, Par, Opts) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Application = Par = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Opts = [{timeout, timeout()} | {persistent, boolean()}]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Removes the configuration parameter <fo:inline font-family="monospace">Par</fo:inline> and its value
          for <fo:inline font-family="monospace">Application</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">unset_env/2</fo:inline> uses the standard <fo:inline font-family="monospace">gen_server</fo:inline>
          time-out value (5000 ms). Option <fo:inline font-family="monospace">timeout</fo:inline> can be
          specified if another time-out value is useful, for example, in
          situations where the application controller is heavily loaded.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">unset_env/3</fo:inline> also allows the persistent option to be passed
          (see <fo:inline font-style="italic"><fo:inline font-family="monospace">set_env/4</fo:inline></fo:inline>).</fo:block>
	<fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Use this function only if you know what you are doing,
            that is, on your own applications. It is very
	    application-dependent and configuration
	    parameter-dependent when and how often
            the value is read by the application. Careless use
            of this function can put the application in a
            weird, inconsistent, and malfunctioning state.</fo:block>
        </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6112912"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">which_applications() -&gt; [{Application, Description, Vsn}]</fo:block></fo:block><fo:block id="idp6113744"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">which_applications(Timeout) -&gt; [{Application, Description, Vsn}]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Application = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Description = Vsn = string()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list with information about the applications that
          are currently running. <fo:inline font-family="monospace">Application</fo:inline> is the application
          name. <fo:inline font-family="monospace">Description</fo:inline> and <fo:inline font-family="monospace">Vsn</fo:inline> are the
	  values of their <fo:inline font-family="monospace">description</fo:inline> and <fo:inline font-family="monospace">vsn</fo:inline> application specification
          keys, respectively.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">which_applications/0</fo:inline> uses the standard
          <fo:inline font-family="monospace">gen_server</fo:inline> time-out value (5000 ms). A <fo:inline font-family="monospace">Timeout</fo:inline>
          argument can be specified if another time-out value is useful,
          for example, in situations where the application controller
          is heavily loaded.</fo:block>
      </fo:block>
  

  <fo:block id="idp6121280" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Callback Module</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following functions are to be exported from an
      <fo:inline font-family="monospace">application</fo:inline> callback module.</fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6123408">Module:start(StartType, StartArgs) -&gt; {ok, Pid} | {ok, Pid, State} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">StartType = <fo:inline font-style="italic"><fo:inline font-family="monospace">start_type()</fo:inline></fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">StartArgs = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Pid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">State = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is called whenever an application is started
          using <fo:inline font-family="monospace">start/1,2</fo:inline>, and is to start
          the processes of the application. If the application is
          structured according to the OTP design principles as a
          supervision tree, this means starting the top supervisor of
          the tree.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">StartType</fo:inline> defines the type of start:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">normal</fo:inline> if it is a normal startup.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">normal</fo:inline> also if the application is distributed and
           started at the current node because of a failover from another
           node, and the application specification key <fo:inline font-family="monospace">start_phases == undefined</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{takeover,Node}</fo:inline> if the application is
           distributed and started at the current node because of a
           takeover from <fo:inline font-family="monospace">Node</fo:inline>, either because
          <fo:inline font-family="monospace">takeover/2</fo:inline> has been called or because
           the current node has higher priority than <fo:inline font-family="monospace">Node</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{failover,Node}</fo:inline> if the application is
           distributed and started at the current node because of a
           failover from <fo:inline font-family="monospace">Node</fo:inline>, and the application
           specification key <fo:inline font-family="monospace">start_phases /= undefined</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">StartArgs</fo:inline> is the <fo:inline font-family="monospace">StartArgs</fo:inline> argument defined by
          the application specification key <fo:inline font-family="monospace">mod</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function is to return <fo:inline font-family="monospace">{ok,Pid}</fo:inline> or
          <fo:inline font-family="monospace">{ok,Pid,State}</fo:inline>, where <fo:inline font-family="monospace">Pid</fo:inline> is the pid of the top
          supervisor and <fo:inline font-family="monospace">State</fo:inline> is any term. If omitted,
          <fo:inline font-family="monospace">State</fo:inline> defaults to <fo:inline font-family="monospace">[]</fo:inline>. If the application
          is stopped later, <fo:inline font-family="monospace">State</fo:inline> is passed to
          <fo:inline font-family="monospace">Module:prep_stop/1</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6143216">Module:start_phase(Phase, StartType, PhaseArgs) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Phase = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">StartType = <fo:inline font-style="italic"><fo:inline font-family="monospace">start_type()</fo:inline></fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PhaseArgs = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Pid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">State = state()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts an application with included
          applications, when synchronization is needed between
          processes in the different applications during startup.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The start phases are defined by the application specification
          key <fo:inline font-family="monospace">start_phases == [{Phase,PhaseArgs}]</fo:inline>. For included
          applications, the set of phases must be a subset of the set of
          phases defined for the including application.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function is called for each start phase (as defined for
          the primary application) for the primary application and all
          included applications, for which the start phase is defined.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For a description of <fo:inline font-family="monospace">StartType</fo:inline>, see
	<fo:inline font-style="italic"><fo:inline font-family="monospace">Module:start/2</fo:inline></fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6152528">Module:prep_stop(State) -&gt; NewState</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">State = NewState = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is called when an application is about to be
          stopped, before shutting down the processes of
          the application.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">State</fo:inline> is the state returned from
          <fo:inline font-family="monospace">Module:start/2</fo:inline>, or <fo:inline font-family="monospace">[]</fo:inline> if no state was returned.
          <fo:inline font-family="monospace">NewState</fo:inline> is any term and is passed to
          <fo:inline font-family="monospace">Module:stop/1</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function is optional. If it is not defined, the processes
          are terminated and then <fo:inline font-family="monospace">Module:stop(State)</fo:inline> is called.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6159408">Module:stop(State)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">State = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is called whenever an application has stopped.
          It is intended to be the opposite of <fo:inline font-family="monospace">Module:start/2</fo:inline>
          and is to do any necessary cleaning up. The return value is
          ignored.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">State</fo:inline> is the return value of <fo:inline font-family="monospace">Module:prep_stop/1</fo:inline>,
	  if such a function exists. Otherwise <fo:inline font-family="monospace">State</fo:inline> is taken from
	  the return value of <fo:inline font-family="monospace">Module:start/2</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6165344">Module:config_change(Changed, New, Removed) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Changed = [{Par,Val}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">New = [{Par,Val}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Removed = [Par]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> Par = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> Val = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is called by an application after a code
          replacement, if the configuration parameters have changed.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Changed</fo:inline> is a list of parameter-value tuples including all
          configuration parameters with changed values.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">New</fo:inline> is a list of parameter-value tuples including all
	  added configuration parameters.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Removed</fo:inline> is a list of all removed parameters.</fo:block>
      </fo:block>
  

  <fo:block id="idp6172992" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">See Also</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">OTP Design Principles</fo:inline>,
      <fo:inline font-style="italic">kernel(6)</fo:inline>,
      <fo:inline font-style="italic">app(4)</fo:inline></fo:block>
  
<fo:block page-break-before="always" id="idp6181872" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">auth</fo:marker>auth</fo:block>Erlang module</fo:block>
  <fo:block/>
  auth
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module is deprecated. For a description of the Magic
      Cookie system, refer to
      <fo:inline font-style="italic">Distributed Erlang</fo:inline> in the Erlang Reference Manual.</fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Data Types</fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">cookie() = atom()</fo:block></fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6186544"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">cookie() -&gt; Cookie</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Cookie = <fo:inline font-style="italic">cookie()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Use
          <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:get_cookie()</fo:inline></fo:inline>
          in ERTS instead.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6190080"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">cookie(TheCookie) -&gt; true</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">TheCookie = Cookie | [Cookie]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        The cookie can also be specified as a list with a single atom element.
      </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Cookie = <fo:inline font-style="italic">cookie()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Use
          <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:set_cookie(node(), Cookie)</fo:inline>
	  in ERTS</fo:inline> instead.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6195008"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">is_auth(Node) -&gt; yes | no</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Node = node()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">yes</fo:inline> if communication with <fo:inline font-family="monospace">Node</fo:inline> is
          authorized. Notice that a connection to <fo:inline font-family="monospace">Node</fo:inline>
          is established in this case. Returns <fo:inline font-family="monospace">no</fo:inline> if <fo:inline font-family="monospace">Node</fo:inline>
          does not exist or communication is not authorized (it has
          another cookie than <fo:inline font-family="monospace">auth</fo:inline> thinks it has).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Use <fo:inline font-style="italic"><fo:inline font-family="monospace">net_adm:ping(Node)</fo:inline></fo:inline>
          instead.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6202624">node_cookie([Node, Cookie]) -&gt; yes | no</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Node = node()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Cookie = <fo:inline font-style="italic"><fo:inline font-family="monospace">cookie()</fo:inline></fo:inline></fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to
          <fo:inline font-style="italic"><fo:inline font-family="monospace">node_cookie(Node, Cookie)</fo:inline></fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6207840"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">node_cookie(Node, Cookie) -&gt; yes | no</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Node = node()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Cookie = <fo:inline font-style="italic">cookie()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the magic cookie of <fo:inline font-family="monospace">Node</fo:inline> to
	<fo:inline font-family="monospace">Cookie</fo:inline> and verifies the status of the authorization.
          Equivalent to calling
          <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:set_cookie(Node, Cookie)</fo:inline></fo:inline>, followed by
          <fo:inline font-style="italic"><fo:inline font-family="monospace">auth:is_auth(Node)</fo:inline></fo:inline>.</fo:block>
      </fo:block>
  
<fo:block page-break-before="always" id="idp6220672" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">code</fo:marker>code</fo:block>Erlang module</fo:block>
  <fo:block/>
  code
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module contains the interface to the Erlang
      <fo:inline font-weight="bold">code server</fo:inline>, which deals with the loading of compiled
      code into a running Erlang runtime system.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The runtime system can be started in <fo:inline font-weight="bold">embedded</fo:inline> or
      <fo:inline font-weight="bold">interactive</fo:inline> mode. Which one is decided by command-line
      flag <fo:inline font-family="monospace">-mode</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% <fo:inline font-weight="bold">erl -mode interactive</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The modes are as follows:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In embedded mode, all code is loaded during system startup
          according to the boot script. (Code can also be loaded later
          by explicitly ordering the code server to do so).</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In interactive mode, which is default, only some code is loaded
	  during system startup, basically the modules needed by the runtime
          system. Other code is dynamically loaded when first
          referenced. When a call to a function in a certain module is
          made, and the module is not loaded, the code server searches
          for and tries to load the module.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To prevent accidentally reloading of modules affecting the Erlang
      runtime system, directories <fo:inline font-family="monospace">kernel</fo:inline>, <fo:inline font-family="monospace">stdlib</fo:inline>,
      and <fo:inline font-family="monospace">compiler</fo:inline> are considered <fo:inline font-weight="bold">sticky</fo:inline>. This
      means that the system issues a warning and rejects the request if
      a user tries to reload a module residing in any of them.
      The feature can be disabled by using command-line flag
      <fo:inline font-family="monospace">-nostick</fo:inline>.</fo:block>
  

  <fo:block id="idp6232368" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Code Path</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In interactive mode, the code server maintains a search path,
      usually called the <fo:inline font-weight="bold">code path</fo:inline>, consisting of a list of
      directories, which it searches sequentially when trying to load a
      module.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Initially, the code path consists of the current working
      directory and all Erlang object code directories under library
      directory <fo:inline font-family="monospace">$OTPROOT/lib</fo:inline>, where <fo:inline font-family="monospace">$OTPROOT</fo:inline> is
      the installation directory of Erlang/OTP, <fo:inline font-family="monospace">code:root_dir()</fo:inline>.
      Directories can be named <fo:inline font-family="monospace">Name[-Vsn]</fo:inline> and the code server,
      by default, chooses the directory with the highest version number
      among those having the same <fo:inline font-family="monospace">Name</fo:inline>. Suffix <fo:inline font-family="monospace">-Vsn</fo:inline>
      is optional. If an <fo:inline font-family="monospace">ebin</fo:inline> directory exists under
      <fo:inline font-family="monospace">Name[-Vsn]</fo:inline>, this directory is added to the code path.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Environment variable <fo:inline font-family="monospace">ERL_LIBS</fo:inline> (defined in the operating
      system) can be used to define more library directories to
      be handled in the same way as the standard OTP library
      directory described above, except that directories without
      an <fo:inline font-family="monospace">ebin</fo:inline> directory are ignored.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All application directories found in the additional directories
      appears before the standard OTP applications, except for the
      Kernel and STDLIB applications, which are placed before
      any additional applications. In other words, modules found in any
      of the additional library directories override modules with
      the same name in OTP, except for modules in Kernel and
      STDLIB.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Environment variable <fo:inline font-family="monospace">ERL_LIBS</fo:inline> (if defined) is to contain
      a colon-separated (for Unix-like systems) or semicolon-separated
      (for Windows) list of additional libraries.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On a Unix-like system, <fo:inline font-family="monospace">ERL_LIBS</fo:inline> can be set to the following</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
/usr/local/jungerl:/home/some_user/my_erlang_lib</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On Windows, use semi-colon as separator.</fo:block>
  

  <fo:block id="idp6244832" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Loading of Code From Archive Files</fo:block>
    

    <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The support for loading code from archive files is
     experimental. The purpose of releasing it before it is ready
     is to obtain early feedback. The file format, semantics,
     interfaces, and so on, can be changed in a future release. The function
     <fo:inline font-style="italic"><fo:inline font-family="monospace">lib_dir/2</fo:inline></fo:inline>
     and  flag <fo:inline font-family="monospace">-code_path_choice</fo:inline> are also
     experimental.</fo:block></fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Erlang archives are <fo:inline font-family="monospace">ZIP</fo:inline>
     files with extension <fo:inline font-family="monospace">.ez</fo:inline>. Erlang archives can also be
     enclosed in <fo:inline font-family="monospace">escript</fo:inline> files whose file extension is arbitrary.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Erlang archive files can contain entire Erlang applications or
     parts of applications. The structure in an archive file is the
     same as the directory structure for an application. If you, for
     example, create an archive of <fo:inline font-family="monospace">mnesia-4.4.7</fo:inline>, the
     archive file must be named <fo:inline font-family="monospace">mnesia-4.4.7.ez</fo:inline> and it must
     contain a top directory named <fo:inline font-family="monospace">mnesia-4.4.7</fo:inline>. If the
     version part of the name is omitted, it must also be omitted in
     the archive. That is, a <fo:inline font-family="monospace">mnesia.ez</fo:inline> archive must contain a
     <fo:inline font-family="monospace">mnesia</fo:inline> top directory.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An archive file for an application can, for example, be
     created like this:</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
zip:create("mnesia-4.4.7.ez",
	["mnesia-4.4.7"],
	[{cwd, code:lib_dir()},
	 {compress, all},
	 {uncompress,[".beam",".app"]}]).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Any file in the archive can be compressed, but to
     speed up the access of frequently read files, it can be a good
     idea to store <fo:inline font-family="monospace">beam</fo:inline> and <fo:inline font-family="monospace">app</fo:inline> files uncompressed in
     the archive.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Normally the top directory of an application is located
     in library directory <fo:inline font-family="monospace">$OTPROOT/lib</fo:inline> or in a directory
     referred to by environment variable <fo:inline font-family="monospace">ERL_LIBS</fo:inline>. At
     startup, when the initial code path is computed, the code server
     also looks for archive files in these directories and
     possibly adds <fo:inline font-family="monospace">ebin</fo:inline> directories in archives to the code path. The
     code path then contains paths to directories that look like
     <fo:inline font-family="monospace">$OTPROOT/lib/mnesia.ez/mnesia/ebin</fo:inline> or
     <fo:inline font-family="monospace">$OTPROOT/lib/mnesia-4.4.7.ez/mnesia-4.4.7/ebin</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The code server uses module <fo:inline font-family="monospace">erl_prim_loader</fo:inline> in ERTS
     (possibly through <fo:inline font-family="monospace">erl_boot_server</fo:inline>) to read code files from
     archives. However, the functions in <fo:inline font-family="monospace">erl_prim_loader</fo:inline> can also be
     used by other applications to read files from archives. For
     example, the call
     <fo:inline font-family="monospace">erl_prim_loader:list_dir( "/otp/root/lib/mnesia-4.4.7.ez/mnesia-4.4.7/examples/bench)"</fo:inline>
     would list the contents of a directory inside an archive.
     See <fo:inline font-style="italic"><fo:inline font-family="monospace">erl_prim_loader(3)</fo:inline></fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An application archive file and a regular application directory
     can coexist. This can be useful when it is needed to have
     parts of the application as regular files. A typical case is the
     <fo:inline font-family="monospace">priv</fo:inline> directory, which must reside as a regular directory
     to link in drivers dynamically and start port programs.
     For other applications that do not need this, directory
     <fo:inline font-family="monospace">priv</fo:inline> can reside in the archive and the files
     under the directory <fo:inline font-family="monospace">priv</fo:inline> can be read through
     <fo:inline font-family="monospace">erl_prim_loader</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a directory is added to the code path and
     when the entire code path is (re)set, the code server
     decides which subdirectories in an application that are to be
     read from the archive and which that are to be read as regular
     files. If directories are added or removed afterwards, the file
     access can fail if the code path is not updated (possibly to the
     same path as before, to trigger the directory resolution
     update).</fo:block>

     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For each directory on the second level in the application archive
     (<fo:inline font-family="monospace">ebin</fo:inline>, <fo:inline font-family="monospace">priv</fo:inline>, <fo:inline font-family="monospace">src</fo:inline>, and so on), the code server first
     chooses the regular directory if it exists and second from the
     archive. Function <fo:inline font-family="monospace">code:lib_dir/2</fo:inline> returns the path to the
     subdirectory. For example, <fo:inline font-family="monospace">code:lib_dir(megaco,ebin)</fo:inline> can return
     <fo:inline font-family="monospace">/otp/root/lib/megaco-3.9.1.1.ez/megaco-3.9.1.1/ebin</fo:inline> while
     <fo:inline font-family="monospace">code:lib_dir(megaco,priv)</fo:inline> can return
     <fo:inline font-family="monospace">/otp/root/lib/megaco-3.9.1.1/priv</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When an <fo:inline font-family="monospace">escript</fo:inline> file contains an archive, there are
     no restrictions on the name of the <fo:inline font-family="monospace">escript</fo:inline> and no restrictions
     on how many applications that can be stored in the embedded
     archive. Single Beam files can also reside on the top
     level in the archive. At startup, the top directory in the
     embedded archive and all (second level) <fo:inline font-family="monospace">ebin</fo:inline>
     directories in the embedded archive are added to the code path.
     See <fo:inline font-style="italic"><fo:inline font-family="monospace">erts:escript(1)</fo:inline></fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the choice of directories in the code path is
     <fo:inline font-family="monospace">strict</fo:inline>, the directory that ends up in the code path is
     exactly the stated one. This means that if, for example, the
     directory <fo:inline font-family="monospace">$OTPROOT/lib/mnesia-4.4.7/ebin</fo:inline> is explicitly
     added to the code path, the code server does not load files from
     <fo:inline font-family="monospace">$OTPROOT/lib/mnesia-4.4.7.ez/mnesia-4.4.7/ebin</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This behavior can be controlled through command-line flag
     <fo:inline font-family="monospace">-code_path_choice Choice</fo:inline>. If the flag is set to <fo:inline font-family="monospace">relaxed</fo:inline>,
     the code server instead chooses a suitable directory
     depending on the actual file structure. If a regular
     application <fo:inline font-family="monospace">ebin</fo:inline> directory exists, it is chosen. Otherwise,
     the directory <fo:inline font-family="monospace">ebin</fo:inline> in the archive is chosen if it
     exists. If neither of them exists, the original directory is
     chosen.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Command-line flag <fo:inline font-family="monospace">-code_path_choice Choice</fo:inline> also
     affects how module <fo:inline font-family="monospace">init</fo:inline> interprets the <fo:inline font-family="monospace">boot script</fo:inline>.
     The interpretation of the explicit code paths in the <fo:inline font-family="monospace">boot
     script</fo:inline> can be <fo:inline font-family="monospace">strict</fo:inline> or <fo:inline font-family="monospace">relaxed</fo:inline>. It is
     particularly useful to set the flag to <fo:inline font-family="monospace">relaxed</fo:inline> when
     elaborating with code loading from archives without editing the
     <fo:inline font-family="monospace">boot script</fo:inline>. The default is <fo:inline font-family="monospace">relaxed</fo:inline>. See <fo:inline font-style="italic"><fo:inline font-family="monospace">erts:init(3)</fo:inline></fo:inline>.</fo:block>

  <fo:block id="idp6282768" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Current and Old Code</fo:block>

    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The code for a module can exist in two variants in a system:
      <fo:inline font-weight="bold">current code</fo:inline> and <fo:inline font-weight="bold">old code</fo:inline>. When a module is
      loaded into the system for the first time, the module code
      becomes 'current' and the global <fo:inline font-weight="bold">export table</fo:inline> is updated
      with references to all functions exported from the module.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If then a new instance of the module is loaded (for example, because of
      error correction), the code of the previous
      instance becomes 'old', and all export entries referring to
      the previous instance are removed. After that, the new instance is
      loaded as for the first time, and becomes 'current'.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Both old and current code for a module are valid, and can even be
      evaluated concurrently. The difference is that exported functions
      in old code are unavailable. Hence, a global call cannot be made
      to an exported function in old code, but old code can
      still be evaluated because of processes lingering in it.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a third instance of the module is loaded, the code server
      removes (purges) the old code and any processes lingering in it
      are terminated. Then the third instance becomes 'current' and
      the previously current code becomes 'old'.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more information about old and current code, and how to
      make a process switch from old to current code, see section
      Compilation and Code Loading in the
      <fo:inline font-style="italic">Erlang Reference Manual</fo:inline>.</fo:block>
  

  <fo:block id="idp6289216" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Argument Types and Invalid Arguments</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Module and application names are atoms, while file and directory
    names are strings. For backward compatibility reasons, some functions accept
    both strings and atoms, but a future release will probably only allow
    the arguments that are documented.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Functions in this module generally fail with an
    exception if they are passed an incorrect type (for example, an integer or a tuple
    where an atom is expected). An error tuple is returned if the argument type
    is correct, but there are some other errors (for example, a non-existing directory
    is specified to <fo:inline font-family="monospace">set_path/1</fo:inline>).</fo:block>
  

  <fo:block id="idp6292576" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Error Reasons for Code-Loading Functions</fo:block>
    
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Functions that load code (such as <fo:inline font-family="monospace">load_file/1</fo:inline>) will
    return <fo:inline font-family="monospace">{error,Reason}</fo:inline> if the load operation fails.
    Here follows a description of the common reasons.</fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badfile</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The object code has an incorrect format or the module
	name in the object code is not the expected module name.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">nofile</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">No file with object code was found.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">not_purged</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The object code could not be loaded because an old version
	of the code already existed.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">on_load_failure</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module has an
	<fo:inline font-style="italic">-on_load function</fo:inline>
	that failed when it was called.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sticky_directory</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The object code resides in a sticky directory.</fo:block>
      </fo:block></fo:block-container>

    </fo:block>
    
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Data Types</fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">load_ret() = <fo:block/>    {error, What :: <fo:inline font-style="italic">load_error_rsn()</fo:inline>} |<fo:block/>    {module, Module :: module()}</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">load_error_rsn() = <fo:block/>    badfile |<fo:block/>    nofile |<fo:block/>    not_purged |<fo:block/>    on_load_failure |<fo:block/>    sticky_directory</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">prepared_code()</fo:block></fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An opaque term holding prepared code.</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6308080"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">set_path(Path) -&gt; true | {error, What}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Path = [Dir :: <fo:inline font-style="italic">file:filename()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">What = bad_directory</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the code path to the list of directories <fo:inline font-family="monospace">Path</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns:</fo:block>
	<fo:block space-after="0.25em" space-before="0.25em">
	<fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">true</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If successful</fo:block></fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{error, bad_directory}</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If any <fo:inline font-family="monospace">Dir</fo:inline> is not a directory name</fo:block></fo:block></fo:block-container>
	</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6315120"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_path() -&gt; Path</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Path = [Dir :: <fo:inline font-style="italic">file:filename()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the code path.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6317760"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">add_path(Dir) -&gt; <fo:inline font-style="italic">add_path_ret()</fo:inline></fo:block></fo:block><fo:block id="idp6318592"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">add_pathz(Dir) -&gt; <fo:inline font-style="italic">add_path_ret()</fo:inline></fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Dir = <fo:inline font-style="italic">file:filename()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">add_path_ret() = true | {error, bad_directory}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Adds <fo:inline font-family="monospace">Dir</fo:inline> to the code path. The directory is added as
          the last directory in the new path. If <fo:inline font-family="monospace">Dir</fo:inline> already
          exists in the path, it is not added.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if successful, or
          <fo:inline font-family="monospace">{error, bad_directory}</fo:inline> if <fo:inline font-family="monospace">Dir</fo:inline> is not the name
          of a directory.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6325040"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">add_patha(Dir) -&gt; <fo:inline font-style="italic">add_path_ret()</fo:inline></fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Dir = <fo:inline font-style="italic">file:filename()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">add_path_ret() = true | {error, bad_directory}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Adds <fo:inline font-family="monospace">Dir</fo:inline> to the beginning of the code path. If
          <fo:inline font-family="monospace">Dir</fo:inline> exists, it is removed from the old
          position in the code path.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if successful, or
          <fo:inline font-family="monospace">{error, bad_directory}</fo:inline> if <fo:inline font-family="monospace">Dir</fo:inline> is not the name
          of a directory.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6331472"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">add_paths(Dirs) -&gt; ok</fo:block></fo:block><fo:block id="idp6332304"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">add_pathsz(Dirs) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Dirs = [Dir :: <fo:inline font-style="italic">file:filename()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Adds the directories in <fo:inline font-family="monospace">Dirs</fo:inline> to the end of the code
          path. If a <fo:inline font-family="monospace">Dir</fo:inline> exists, it is not added.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Always returns <fo:inline font-family="monospace">ok</fo:inline>, regardless of the validity
          of each individual <fo:inline font-family="monospace">Dir</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6337696"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">add_pathsa(Dirs) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Dirs = [Dir :: <fo:inline font-style="italic">file:filename()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Traverses <fo:inline font-family="monospace">Dirs</fo:inline> and adds
	  each <fo:inline font-family="monospace">Dir</fo:inline> to the beginning of the code
	  path. This means that the order of <fo:inline font-family="monospace">Dirs</fo:inline>
	  is reversed in the resulting code path. For example, if you
	  add <fo:inline font-family="monospace">[Dir1,Dir2]</fo:inline>, the resulting path will
	  be <fo:inline font-family="monospace">[Dir2,Dir1|OldCodePath]</fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a <fo:inline font-family="monospace">Dir</fo:inline> already exists in the code
	  path, it is removed from the old position.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Always returns <fo:inline font-family="monospace">ok</fo:inline>, regardless of the validity of each
          individual <fo:inline font-family="monospace">Dir</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6345696"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">del_path(NameOrDir) -&gt; boolean() | {error, What}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">NameOrDir = Name | Dir</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Dir = <fo:inline font-style="italic">file:filename()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">What = bad_name</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Deletes a directory from the code path. The argument can be
          an atom <fo:inline font-family="monospace">Name</fo:inline>, in which case the directory with
          the name <fo:inline font-family="monospace">.../Name[-Vsn][/ebin]</fo:inline> is deleted from the code
          path. Also, the complete directory name <fo:inline font-family="monospace">Dir</fo:inline> can be
	  specified as argument.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns:</fo:block>
	<fo:block space-after="0.25em" space-before="0.25em">
	<fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">true</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If successful</fo:block></fo:block></fo:block-container>
	<fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">false</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the directory is not found</fo:block></fo:block></fo:block-container>
	<fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{error, bad_name}</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the argument is invalid</fo:block></fo:block></fo:block-container>
	</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6354944"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">replace_path(Name, Dir) -&gt; true | {error, What}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Dir = <fo:inline font-style="italic">file:filename()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">What = bad_directory | bad_name | {badarg, term()}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Replaces an old occurrence of a directory
          named <fo:inline font-family="monospace">.../Name[-Vsn][/ebin]</fo:inline> in the code path, with
          <fo:inline font-family="monospace">Dir</fo:inline>. If <fo:inline font-family="monospace">Name</fo:inline> does not exist, it adds
	  the new directory <fo:inline font-family="monospace">Dir</fo:inline> last in the code path. The new
	  directory must also be named <fo:inline font-family="monospace">.../Name[-Vsn][/ebin]</fo:inline>.
	  This function is to be used if a new version of the directory (library) is
          added to a running system.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns:</fo:block>
	<fo:block space-after="0.25em" space-before="0.25em">
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">true</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If successful</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{error, bad_name}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Name</fo:inline> is not found</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{error, bad_directory}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Dir</fo:inline> does not exist</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{error, {badarg, [Name, Dir]}}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Name</fo:inline> or <fo:inline font-family="monospace">Dir</fo:inline> is invalid</fo:block></fo:block></fo:block-container>
	</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6370064"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">load_file(Module) -&gt; <fo:inline font-style="italic">load_ret()</fo:inline></fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">load_ret() = <fo:block/>    {error, What :: <fo:inline font-style="italic">load_error_rsn()</fo:inline>} |<fo:block/>    {module, Module :: module()}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tries to load the Erlang module <fo:inline font-family="monospace">Module</fo:inline>, using
          the code path. It looks for the object code file with an
          extension corresponding to the Erlang machine used, for
          example, <fo:inline font-family="monospace">Module.beam</fo:inline>. The loading fails if the module
          name found in the object code differs from the name
          <fo:inline font-family="monospace">Module</fo:inline>.
          <fo:inline font-style="italic"><fo:inline font-family="monospace">load_binary/3</fo:inline></fo:inline> must
          be used to load object code with a module name that is
          different from the file name.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">{module, Module}</fo:inline> if successful, or
	<fo:inline font-family="monospace">{error, Reason}</fo:inline> if loading fails.
	See <fo:inline font-style="italic">Error Reasons for Code-Loading Functions</fo:inline> for a description of the possible error reasons.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6378928"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">load_abs(Filename) -&gt; <fo:inline font-style="italic">load_ret()</fo:inline></fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filename = <fo:inline font-style="italic">file:filename()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">load_ret() = <fo:block/>    {error, What :: <fo:inline font-style="italic">load_error_rsn()</fo:inline>} |<fo:block/>    {module, Module :: module()}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">loaded_filename() = <fo:block/>    (Filename :: <fo:inline font-style="italic">file:filename()</fo:inline>) | <fo:inline font-style="italic">loaded_ret_atoms()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">loaded_ret_atoms() = cover_compiled | preloaded</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-family="monospace">load_file(Module)</fo:inline>, but
          <fo:inline font-family="monospace">Filename</fo:inline> is an absolute or
          relative filename. The code path is not searched. It returns
          a value in the same way as
          <fo:inline font-style="italic"><fo:inline font-family="monospace">load_file/1</fo:inline></fo:inline>. Notice
          that <fo:inline font-family="monospace">Filename</fo:inline> must not contain the extension (for
          example, <fo:inline font-family="monospace">.beam</fo:inline>) because <fo:inline font-family="monospace">load_abs/1</fo:inline> adds the correct
          extension.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6387264"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ensure_loaded(Module) -&gt; {module, Module} | {error, What}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">What = embedded | badfile | nofile | on_load_failure</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tries to load a module in the same way as
          <fo:inline font-style="italic"><fo:inline font-family="monospace">load_file/1</fo:inline></fo:inline>,
	  unless the module is already loaded.
          However, in embedded mode it does not load a module that is not
          already loaded, but returns <fo:inline font-family="monospace">{error, embedded}</fo:inline> instead.
	  See <fo:inline font-style="italic">Error Reasons for Code-Loading Functions</fo:inline> for a description of other possible error reasons.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6392160"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">load_binary(Module, Filename, Binary) -&gt;<fo:block/>               {module, Module} | {error, What}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filename = <fo:inline font-style="italic">loaded_filename()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Binary = binary()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">What = badarg | <fo:inline font-style="italic">load_error_rsn()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">loaded_filename() = <fo:block/>    (Filename :: <fo:inline font-style="italic">file:filename()</fo:inline>) | <fo:inline font-style="italic">loaded_ret_atoms()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">loaded_ret_atoms() = cover_compiled | preloaded</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function can be used to load object code on remote
          Erlang nodes. Argument <fo:inline font-family="monospace">Binary</fo:inline> must contain
	  object code for <fo:inline font-family="monospace">Module</fo:inline>.
          <fo:inline font-family="monospace">Filename</fo:inline> is only used by the code server to keep a
          record of from which file the object code for <fo:inline font-family="monospace">Module</fo:inline>
          comes. Thus, <fo:inline font-family="monospace">Filename</fo:inline> is not opened and read by
          the code server.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">{module, Module}</fo:inline> if successful, or
	<fo:inline font-family="monospace">{error, Reason}</fo:inline> if loading fails.
	See <fo:inline font-style="italic">Error Reasons for Code-Loading Functions</fo:inline> for a description of the possible error reasons.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6401616"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">atomic_load(Modules) -&gt; ok | {error, [{Module, What}]}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Modules = [Module | {Module, Filename, Binary}]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filename = <fo:inline font-style="italic">file:filename()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Binary = binary()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">What = <fo:block/>    badfile |<fo:block/>    nofile |<fo:block/>    on_load_not_allowed |<fo:block/>    duplicated |<fo:block/>    not_purged |<fo:block/>    sticky_directory |<fo:block/>    pending_on_load</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tries to load all of the modules in the list
        <fo:inline font-family="monospace">Modules</fo:inline> atomically.  That means that
        either all modules are loaded at the same time, or
        none of the modules are loaded if there is a problem with any
	of the modules.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Loading can fail for one the following reasons:</fo:block>
	<fo:block space-after="0.25em" space-before="0.25em">
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badfile</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The object code has an incorrect format or the module
	    name in the object code is not the expected module name.</fo:block>
	  </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">nofile</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">No file with object code exists.</fo:block>
	  </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">on_load_not_allowed</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A module contains an
	    <fo:inline font-style="italic">-on_load function</fo:inline>.</fo:block>
	  </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">duplicated</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A module is included more than once in
	    <fo:inline font-family="monospace">Modules</fo:inline>.</fo:block>
	  </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">not_purged</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The object code can not be loaded because an old version
	    of the code already exists.</fo:block>
	  </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sticky_directory</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The object code resides in a sticky directory.</fo:block>
	  </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">pending_on_load</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A previously loaded module contains an
	    <fo:inline font-family="monospace">-on_load</fo:inline> function that never finished.</fo:block>
	  </fo:block></fo:block-container>
	</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If it is important to minimize the time that an application
	is inactive while changing code, use
	<fo:inline font-style="italic">prepare_loading/1</fo:inline>
	and
	<fo:inline font-style="italic">finish_loading/1</fo:inline>
	instead of <fo:inline font-family="monospace">atomic_load/1</fo:inline>. Here is an example:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{ok,Prepared} = code:prepare_loading(Modules),
%% Put the application into an inactive state or do any
%% other preparation needed before changing the code.
ok = code:finish_loading(Prepared),
%% Resume the application.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6421424"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">prepare_loading(Modules) -&gt;<fo:block/>                   {ok, Prepared} | {error, [{Module, What}]}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Modules = [Module | {Module, Filename, Binary}]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filename = <fo:inline font-style="italic">file:filename()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Binary = binary()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Prepared = <fo:inline font-style="italic">prepared_code()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">What = badfile | nofile | on_load_not_allowed | duplicated</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Prepares to load the modules in the list
        <fo:inline font-family="monospace">Modules</fo:inline>.
	Finish the loading by calling
	<fo:inline font-style="italic">finish_loading(Prepared)</fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function can fail with one of the following error reasons:</fo:block>
	<fo:block space-after="0.25em" space-before="0.25em">
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badfile</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The object code has an incorrect format or the module
	    name in the object code is not the expected module name.</fo:block>
	  </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">nofile</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">No file with object code exists.</fo:block>
	  </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">on_load_not_allowed</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A module contains an
	    <fo:inline font-style="italic">-on_load function</fo:inline>.</fo:block>
	  </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">duplicated</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A module is included more than once in
	    <fo:inline font-family="monospace">Modules</fo:inline>.</fo:block>
	  </fo:block></fo:block-container>
	</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6433744"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">finish_loading(Prepared) -&gt; ok | {error, [{Module, What}]}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Prepared = <fo:inline font-style="italic">prepared_code()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">What = not_purged | sticky_directory | pending_on_load</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tries to load code for all modules that have been previously
	prepared by
	<fo:inline font-style="italic">prepare_loading/1</fo:inline>.
	The loading occurs atomically, meaning that
        either all modules are loaded at the same time, or
        none of the modules are loaded.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function can fail with one of the following error reasons:</fo:block>
	<fo:block space-after="0.25em" space-before="0.25em">
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">not_purged</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The object code can not be loaded because an old version
	    of the code already exists.</fo:block>
	  </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sticky_directory</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The object code resides in a sticky directory.</fo:block>
	  </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">pending_on_load</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A previously loaded module contains an
	    <fo:inline font-family="monospace">-on_load</fo:inline> function that never finished.</fo:block>
	  </fo:block></fo:block-container>
	</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6443280"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ensure_modules_loaded(Modules :: [Module]) -&gt;<fo:block/>                         ok | {error, [{Module, What}]}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">What = badfile | nofile | on_load_failure</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tries to load any modules not already loaded in the list
	<fo:inline font-family="monospace">Modules</fo:inline> in the same way as
          <fo:inline font-style="italic">load_file/1</fo:inline>.</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">ok</fo:inline> if successful, or
	  <fo:inline font-family="monospace">{error,[{Module,Reason}]}</fo:inline> if loading of some modules fails.
	  See <fo:inline font-style="italic">Error Reasons for Code-Loading Functions</fo:inline> for a description of other possible error reasons.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6449456"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">delete(Module) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Removes the current code for <fo:inline font-family="monospace">Module</fo:inline>, that is,
          the current code for <fo:inline font-family="monospace">Module</fo:inline> is made old. This means
          that processes can continue to execute the code in the module,
          but no external function calls can be made to it.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if successful, or <fo:inline font-family="monospace">false</fo:inline> if there
          is old code for <fo:inline font-family="monospace">Module</fo:inline> that must be purged first, or
          if <fo:inline font-family="monospace">Module</fo:inline> is not a (loaded) module.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6456000"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">purge(Module) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Purges the code for <fo:inline font-family="monospace">Module</fo:inline>, that is, removes code
          marked as old. If some processes still linger in the old code,
          these processes are killed before the code is removed.</fo:block>
	<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As of ERTS version 9.0, a process is only considered
	to be lingering in the code if it has direct references to the code.
	For more information see documentation of
	<fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:check_process_code/3</fo:inline></fo:inline>,
	which is used in order to determine this.</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if successful and any process is needed to
          be killed, otherwise <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6462400"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">soft_purge(Module) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Purges the code for <fo:inline font-family="monospace">Module</fo:inline>, that is, removes code
          marked as old, but only if no processes linger in it.</fo:block>
	<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As of ERTS version 9.0, a process is only considered
	to be lingering in the code if it has direct references to the code.
	For more information see documentation of
	<fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:check_process_code/3</fo:inline></fo:inline>,
	which is used in order to determine this.</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">false</fo:inline> if the module cannot be purged because
          of processes lingering in old code, otherwise <fo:inline font-family="monospace">true</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6468768"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">is_loaded(Module) -&gt; {file, Loaded} | false</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Loaded = <fo:inline font-style="italic">loaded_filename()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">loaded_filename() = <fo:block/>    (Filename :: <fo:inline font-style="italic">file:filename()</fo:inline>) | <fo:inline font-style="italic">loaded_ret_atoms()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Filename</fo:inline> is an absolute
      filename.</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">loaded_ret_atoms() = cover_compiled | preloaded</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Checks if <fo:inline font-family="monospace">Module</fo:inline> is loaded. If it is,
          <fo:inline font-family="monospace">{file, Loaded}</fo:inline> is returned, otherwise <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Normally, <fo:inline font-family="monospace">Loaded</fo:inline> is the absolute filename
          <fo:inline font-family="monospace">Filename</fo:inline> from which the code is obtained. If the module
          is preloaded (see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">script(4)</fo:inline></fo:inline>),
          <fo:inline font-family="monospace">Loaded==preloaded</fo:inline>. If the module is Cover-compiled (see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">cover(3)</fo:inline></fo:inline>),
          <fo:inline font-family="monospace">Loaded==cover_compiled</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6479808"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">all_loaded() -&gt; [{Module, Loaded}]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Loaded = <fo:inline font-style="italic">loaded_filename()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">loaded_filename() = <fo:block/>    (Filename :: <fo:inline font-style="italic">file:filename()</fo:inline>) | <fo:inline font-style="italic">loaded_ret_atoms()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Filename</fo:inline> is an absolute
      filename.</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">loaded_ret_atoms() = cover_compiled | preloaded</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of tuples <fo:inline font-family="monospace">{Module, Loaded}</fo:inline> for all
          loaded modules. <fo:inline font-family="monospace">Loaded</fo:inline> is normally the absolute filename,
          as described for
          <fo:inline font-style="italic"><fo:inline font-family="monospace">is_loaded/1</fo:inline></fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6487568"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">which(Module) -&gt; Which</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Which = <fo:inline font-style="italic">file:filename()</fo:inline> | <fo:inline font-style="italic">loaded_ret_atoms()</fo:inline> | non_existing</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">loaded_ret_atoms() = cover_compiled | preloaded</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the module is not loaded, this function searches the code
          path for the first file containing object code for
          <fo:inline font-family="monospace">Module</fo:inline> and returns the absolute filename.</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the module is loaded, it returns the name of the file
          containing the loaded object code.</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the module is preloaded, <fo:inline font-family="monospace">preloaded</fo:inline> is returned.</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the module is Cover-compiled, <fo:inline font-family="monospace">cover_compiled</fo:inline> is returned.</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the module cannot be found, <fo:inline font-family="monospace">non_existing</fo:inline> is returned.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6494736"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_object_code(Module) -&gt; {Module, Binary, Filename} | error</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Binary = binary()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filename = <fo:inline font-style="italic">file:filename()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Searches the code path for the object code of module
          <fo:inline font-family="monospace">Module</fo:inline>. Returns <fo:inline font-family="monospace">{Module, Binary, Filename}</fo:inline>
          if successful, otherwise <fo:inline font-family="monospace">error</fo:inline>. <fo:inline font-family="monospace">Binary</fo:inline> is a
          binary data object, which contains the object code for
          the module. This can be useful if code is to be loaded on a
          remote node in a distributed system. For example, loading
          module <fo:inline font-family="monospace">Module</fo:inline> on a node <fo:inline font-family="monospace">Node</fo:inline> is done as
          follows:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
...
{_Module, Binary, Filename} = code:get_object_code(Module),
rpc:call(Node, code, load_binary, [Module, Filename, Binary]),
...</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6502912"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">root_dir() -&gt; <fo:inline font-style="italic">file:filename()</fo:inline></fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the root directory of Erlang/OTP, which is
          the directory where it is installed.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">code:root_dir().</fo:inline>
"/usr/local/otp"</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6507104"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">lib_dir() -&gt; <fo:inline font-style="italic">file:filename()</fo:inline></fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the library directory, <fo:inline font-family="monospace">$OTPROOT/lib</fo:inline>, where
          <fo:inline font-family="monospace">$OTPROOT</fo:inline> is the root directory of Erlang/OTP.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">code:lib_dir().</fo:inline>
"/usr/local/otp/lib"</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6512144"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">lib_dir(Name) -&gt; <fo:inline font-style="italic">file:filename()</fo:inline> | {error, bad_name}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = atom()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the path
          for the "library directory", the top directory, for an
          application <fo:inline font-family="monospace">Name</fo:inline> located under <fo:inline font-family="monospace">$OTPROOT/lib</fo:inline> or
          on a directory referred to with environment variable <fo:inline font-family="monospace">ERL_LIBS</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a regular directory called <fo:inline font-family="monospace">Name</fo:inline> or
          <fo:inline font-family="monospace">Name-Vsn</fo:inline> exists in the code path with an <fo:inline font-family="monospace">ebin</fo:inline>
          subdirectory, the path to this directory is returned (not
          the <fo:inline font-family="monospace">ebin</fo:inline> directory).</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the directory refers to a directory in an archive, the
	  archive name is stripped away before the path is returned.
	  For example, if directory
          <fo:inline font-family="monospace">/usr/local/otp/lib/mnesia-4.2.2.ez/mnesia-4.2.2/ebin</fo:inline>
          is in the path, <fo:inline font-family="monospace">/usr/local/otp/lib/mnesia-4.2.2/ebin</fo:inline>
          is returned. This means that the library directory for
          an application is the same, regardless if the
          application resides in an archive or not.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">code:lib_dir(mnesia).</fo:inline>
"/usr/local/otp/lib/mnesia-4.2.2"</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">{error, bad_name}</fo:inline> if <fo:inline font-family="monospace">Name</fo:inline>
	 is not the name of an application under <fo:inline font-family="monospace">$OTPROOT/lib</fo:inline> or
	 on a directory referred to through environment variable <fo:inline font-family="monospace">ERL_LIBS</fo:inline>.
	 Fails with an exception if <fo:inline font-family="monospace">Name</fo:inline> has the wrong type.</fo:block>

	<fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For backward compatibility, <fo:inline font-family="monospace">Name</fo:inline> is also
	allowed to be a string. That will probably change in a future release.</fo:block></fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6526496"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">lib_dir(Name, SubDir) -&gt; <fo:inline font-style="italic">file:filename()</fo:inline> | {error, bad_name}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = SubDir = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the path to a subdirectory directly under the top
         directory of an application. Normally the subdirectories
         reside under the top directory for the application, but when
         applications at least partly resides in an archive, the
         situation is different. Some of the subdirectories can reside
         as regular directories while other reside in an archive
         file. It is not checked whether this directory exists.</fo:block>
	 <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">code:lib_dir(megaco, priv).</fo:inline>
"/usr/local/otp/lib/megaco-3.9.1.1/priv"</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Fails with an exception if <fo:inline font-family="monospace">Name</fo:inline> or <fo:inline font-family="monospace">SubDir</fo:inline> has
        the wrong type.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6532736"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">compiler_dir() -&gt; <fo:inline font-style="italic">file:filename()</fo:inline></fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the compiler library directory. Equivalent to
          <fo:inline font-family="monospace">code:lib_dir(compiler)</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6535872"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">priv_dir(Name) -&gt; <fo:inline font-style="italic">file:filename()</fo:inline> | {error, bad_name}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = atom()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the path to the <fo:inline font-family="monospace">priv</fo:inline> directory in an
         application. Equivalent to <fo:inline font-family="monospace">code:lib_dir(Name, priv)</fo:inline>.</fo:block>

	<fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For backward compatibility, <fo:inline font-family="monospace">Name</fo:inline> is also allowed to
	be a string. That will probably change in a future release.</fo:block></fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6541136"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">objfile_extension() -&gt; nonempty_string()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the object code file extension corresponding to
          the Erlang machine used, namely <fo:inline font-family="monospace">.beam</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6544304"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">stick_dir(Dir) -&gt; ok | error</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Dir = <fo:inline font-style="italic">file:filename()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Marks <fo:inline font-family="monospace">Dir</fo:inline> as sticky.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">ok</fo:inline> if successful, otherwise <fo:inline font-family="monospace">error</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6548880"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">unstick_dir(Dir) -&gt; ok | error</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Dir = <fo:inline font-style="italic">file:filename()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Unsticks a directory that is marked as
          sticky.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">ok</fo:inline> if successful, otherwise <fo:inline font-family="monospace">error</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6552928"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">is_sticky(Module) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">true</fo:inline> if <fo:inline font-family="monospace">Module</fo:inline> is the
	name of a module that has been loaded from a sticky directory
	(in other words: an attempt to reload the module will fail),
	or <fo:inline font-family="monospace">false</fo:inline> if <fo:inline font-family="monospace">Module</fo:inline> is not a loaded module or is
	not sticky.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6557776"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">where_is_file(Filename) -&gt; non_existing | Absname</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filename = Absname = <fo:inline font-style="italic">file:filename()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Searches the code path for <fo:inline font-family="monospace">Filename</fo:inline>, a file of
          arbitrary type. If found, the full name is returned.
          <fo:inline font-family="monospace">non_existing</fo:inline> is returned if the file cannot be found.
          The function can be useful, for example, to locate
          application resource files.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6561664"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">clash() -&gt; ok</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Searches all directories in the code path for module names with
          identical names and writes a report to <fo:inline font-family="monospace">stdout</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6564864"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">module_status(Module :: module()) -&gt;<fo:block/>                 not_loaded | loaded | modified | removed</fo:block></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns:</fo:block>
	<fo:block space-after="0.25em" space-before="0.25em">
	<fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">not_loaded</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Module</fo:inline> is not currently loaded.</fo:block></fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">loaded</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Module</fo:inline> is loaded and the object file
	exists and contains the same code.</fo:block></fo:block></fo:block-container>
	<fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">removed</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Module</fo:inline> is loaded but no
	corresponding object file can be found in the code path.</fo:block></fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">modified</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Module</fo:inline> is loaded but the object file
	contains code with a different MD5 checksum.</fo:block></fo:block></fo:block-container>
	</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Preloaded modules are always reported as <fo:inline font-family="monospace">loaded</fo:inline>, without
        inspecting the contents on disk. Cover compiled modules will always
        be reported as <fo:inline font-family="monospace">modified</fo:inline> if an object file exists, or as
        <fo:inline font-family="monospace">removed</fo:inline> otherwise. Modules whose load path is an empty string
        (which is the convention for auto-generated code) will only be
        reported as <fo:inline font-family="monospace">loaded</fo:inline> or <fo:inline font-family="monospace">not_loaded</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For modules that have native code loaded (see
        <fo:inline font-style="italic"><fo:inline font-family="monospace">is_module_native/1</fo:inline></fo:inline>),
        the MD5 sum of the native code in the object file is used for the
        comparison, if it exists; the Beam code in the file is ignored.
        Reversely, for modules that do not currently have native code
        loaded, any native code in the file will be ignored.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic"><fo:inline font-family="monospace">modified_modules/0</fo:inline></fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6580944"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">modified_modules() -&gt; [module()]</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the list of all currently loaded modules for which
        <fo:inline font-style="italic"><fo:inline font-family="monospace">module_status/1</fo:inline></fo:inline>
        returns <fo:inline font-family="monospace">modified</fo:inline>. See also <fo:inline font-style="italic"><fo:inline font-family="monospace">all_loaded/0</fo:inline></fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6585792"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">is_module_native(Module) -&gt; true | false | undefined</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns:</fo:block>
	<fo:block space-after="0.25em" space-before="0.25em">
	<fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">true</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Module</fo:inline> is the
	name of a loaded module that has native code loaded</fo:block></fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">false</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Module</fo:inline> is loaded but does not have
	native code</fo:block></fo:block></fo:block-container>
	<fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">undefined</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Module</fo:inline> is not loaded</fo:block></fo:block></fo:block-container>
	</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp6594144"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_mode() -&gt; embedded | interactive</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns an atom describing the mode of the code server:
        <fo:inline font-family="monospace">interactive</fo:inline> or <fo:inline font-family="monospace">embedded</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This information is useful when an external entity (for example,
        an IDE) provides additional code for a running node. If the code server is
	in interactive mode, it only has to add the path to the code. If the code server
	is in embedded mode, the code must be loaded with
	<fo:inline font-style="italic"><fo:inline font-family="monospace">load_binary/3</fo:inline></fo:inline>.</fo:block>
      </fo:block>
  
<fo:block page-break-before="always" id="idp6607584" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">disk_log</fo:marker>disk_log</fo:block>Erlang module</fo:block>
  <fo:block/>
  disk_log
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">disk_log</fo:inline> is a disk-based term logger that enables
      efficient logging of items on files.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Two types of logs are supported:</fo:block>
      <fo:block space-after="0.25em" space-before="0.25em">
	<fo:block keep-with-next.within-page="always">halt logs</fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Appends items to a single file, which size can
	be limited by the <fo:inline font-family="monospace">disk_log</fo:inline> module.</fo:block></fo:block></fo:block-container>
	<fo:block keep-with-next.within-page="always">wrap logs</fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Uses a sequence of wrap log files of limited size. As a
	wrap log file is filled up, further items are logged on to the next
	file in the sequence, starting all over with the first file when
	the last file is filled up.</fo:block></fo:block></fo:block-container>
      </fo:block>
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For efficiency reasons, items are always written to files as binaries.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Two formats of the log files are supported:</fo:block>
      <fo:block space-after="0.25em" space-before="0.25em">
	<fo:block keep-with-next.within-page="always">internal format</fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Supports automatic repair of log files that are not
	properly closed and enables efficient reading of logged items in
	<fo:inline font-weight="bold">chunks</fo:inline> using a set of functions defined in this module.
	This is the only way to read internally formatted logs.
	An item logged to an internally formatted log must not occupy more
	than 4 GB of disk space (the size must fit in 4 bytes).</fo:block></fo:block></fo:block-container>
	<fo:block keep-with-next.within-page="always">external format</fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Leaves it up to the user to read and interpret the logged data.
	The <fo:inline font-family="monospace">disk_log</fo:inline> module cannot repair externally formatted logs.</fo:block></fo:block></fo:block-container>
      </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For each open disk log, one process handles requests
      made to the disk log. This process is created when
      <fo:inline font-style="italic"><fo:inline font-family="monospace">open/1</fo:inline></fo:inline>
      is called, provided there exists no process handling the disk log.
      A process that opens a disk log can be an <fo:inline font-weight="bold">owner</fo:inline>
      or an anonymous <fo:inline font-weight="bold">user</fo:inline> of the disk log. Each owner is 
      linked to the disk log process, and an owner can close the disk log
      either explicitly (by calling <fo:inline font-family="monospace">close/1</fo:inline> or <fo:inline font-family="monospace">lclose/1,2</fo:inline>)
      or by terminating.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Owners can subscribe to <fo:inline font-weight="bold">notifications</fo:inline>,
      messages of the form <fo:inline font-family="monospace">{disk_log, Node, Log, Info}</fo:inline>, which are sent
      from the disk log process when certain events occur, see 
      the functions and in particular the <fo:inline font-family="monospace">open/1</fo:inline> option
      <fo:inline font-style="italic"><fo:inline font-family="monospace">notify</fo:inline></fo:inline>.
      A log can have many owners, but a process cannot own a
      log more than once. However, the same process can open the log
      as a user more than once.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For a disk log process to close its file properly and terminate,
      it must be closed by its owners and once by some non-owner process
      for each time the log was used anonymously. The users are counted
      and there must not be any users left when the disk log process terminates.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Items can be logged <fo:inline font-weight="bold">synchronously</fo:inline> by using functions
      <fo:inline font-style="italic"><fo:inline font-family="monospace">log/2</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">blog/2</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">log_terms/2</fo:inline></fo:inline>, and
      <fo:inline font-style="italic"><fo:inline font-family="monospace">blog_terms/2</fo:inline></fo:inline>.
      For each of these functions, the caller is put
      on hold until the items are logged (but not necessarily
      written, use <fo:inline font-family="monospace">sync/1</fo:inline> to ensure that). By adding an <fo:inline font-family="monospace">a</fo:inline>
      to each of the mentioned function names, we get functions that log
      items <fo:inline font-weight="bold">asynchronously</fo:inline>. Asynchronous functions do not wait for
      the disk log process to write the items to the file, but
      return the control to the caller more or less immediately.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When using the internal format for logs, use functions
      <fo:inline font-style="italic"><fo:inline font-family="monospace">log/2</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">log_terms/2</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">alog/2</fo:inline></fo:inline>, and
      <fo:inline font-style="italic"><fo:inline font-family="monospace">alog_terms/2</fo:inline></fo:inline>.
      These functions log one or more Erlang terms.
      By prefixing each of the functions with a <fo:inline font-family="monospace">b</fo:inline> (for "binary"),
      we get the corresponding <fo:inline font-family="monospace">blog()</fo:inline> functions for the external format.
      These functions log one or more chunks of bytes.
      For example, to log the string <fo:inline font-family="monospace">"hello"</fo:inline> in ASCII format, you
      can use <fo:inline font-family="monospace">disk_log:blog(Log, "hello")</fo:inline>, or
      <fo:inline font-family="monospace">disk_log:blog(Log, list_to_binary("hello"))</fo:inline>. The two
      alternatives are equally efficient.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">blog()</fo:inline> functions can also be used for internally formatted
      logs, but in this case they must be called with binaries constructed
      with calls to
      <fo:inline font-style="italic"><fo:inline font-family="monospace">term_to_binary/1</fo:inline></fo:inline>.
      There is no check to ensure
      this, it is entirely the responsibility of the caller. If these
      functions are called with binaries that do not correspond to
      Erlang terms, the
      <fo:inline font-style="italic"><fo:inline font-family="monospace">chunk/2,3</fo:inline></fo:inline>
      and automatic repair
      functions fail. The corresponding terms (not the binaries)
      are returned when <fo:inline font-family="monospace">chunk/2,3</fo:inline> is called.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A collection of open disk logs with the same name running on
      different nodes is said to be a <fo:inline font-weight="bold">distributed disk log</fo:inline>
      if requests made to any of the logs are automatically made to
      the other logs as well. The members of such a collection are
      called individual distributed disk logs, or just distributed
      disk logs if there is no risk of confusion. There is no order
      between the members of such a collection. For example, logged
      terms are not necessarily written to the node where the
      request was made before written to the other nodes. However,
      a few functions do not make requests to all
      members of distributed disk logs, namely
      <fo:inline font-style="italic"><fo:inline font-family="monospace">info/1</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">chunk/2,3</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">bchunk/2,3</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">chunk_step/3</fo:inline></fo:inline>, and
      <fo:inline font-style="italic"><fo:inline font-family="monospace">lclose/1,2</fo:inline></fo:inline>.</fo:block>
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An open disk log that is not a distributed disk
      log is said to be a <fo:inline font-weight="bold">local disk log</fo:inline>. A local disk log is
      only accessible from the node where the disk log process runs,
      whereas a distributed disk log is accessible from all nodes in
      the Erlang system, except for those nodes where a local
      disk log with the same name as the distributed disk log exists.
      All processes on nodes that have access to a local or
      distributed disk log can log items or otherwise change, inspect,
      or close the log.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is not guaranteed that all log files of a distributed disk log 
      contain the same log items. No attempt is made to synchronize
      the contents of the files. However, as long as at least one of 
      the involved nodes is alive at each time, all items are logged.
      When logging items to a distributed log, or otherwise trying to
      change the log, the replies from individual logs are
      ignored. If all nodes are down, the disk log functions
      reply with a <fo:inline font-family="monospace">nonode</fo:inline> error.
      </fo:block>
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In some applications, it can be unacceptable that
        replies from individual logs are ignored. An alternative in such
        situations is to use many local disk logs instead of one
        distributed disk log, and implement the distribution without use
        of the <fo:inline font-family="monospace">disk_log</fo:inline> module.</fo:block>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Errors are reported differently for asynchronous log attempts
      and other uses of the <fo:inline font-family="monospace">disk_log</fo:inline> module. When used synchronously,
      this module replies with an error message, but when called
      asynchronously, this module does not know where to send
      the error message. Instead, owners subscribing to notifications
      receive an <fo:inline font-family="monospace">error_status</fo:inline> message. 
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">disk_log</fo:inline> module does not report errors to the
      <fo:inline font-style="italic"><fo:inline font-family="monospace">error_logger</fo:inline></fo:inline>
      module. It is up to the caller to decide
      whether to employ the error logger. Function
      <fo:inline font-style="italic"><fo:inline font-family="monospace">format_error/1</fo:inline></fo:inline>
      can be used to produce readable messages from error replies.
      However, information events are sent to the error logger in two
      situations, namely when a log is repaired, or when a file is missing
      while reading chunks.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Error message <fo:inline font-family="monospace">no_such_log</fo:inline> means that the specified
      disk log is not open. Nothing is said about whether the disk log
      files exist or not.
      </fo:block>
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If an attempt to reopen or truncate a log fails (see
        <fo:inline font-style="italic"><fo:inline font-family="monospace">reopen/2,3</fo:inline></fo:inline>
	and
	<fo:inline font-style="italic"><fo:inline font-family="monospace">truncate/1,2</fo:inline></fo:inline>)
	the disk log process terminates immediately. Before the process
	terminates, links to owners and blocking processes (see
	<fo:inline font-style="italic"><fo:inline font-family="monospace">block/1,2</fo:inline></fo:inline>) are removed.
        The effect is that the links work in one direction only. Any
        process using a disk log must check for error message
        <fo:inline font-family="monospace">no_such_log</fo:inline> if some other process truncates or
        reopens the log simultaneously.</fo:block>
    </fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Data Types</fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">log() = term()</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">dlog_size() = <fo:block/>    infinity |<fo:block/>    integer() &gt;= 1 |<fo:block/>    {MaxNoBytes :: integer() &gt;= 1, MaxNoFiles :: integer() &gt;= 1}</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">dlog_format() = external | internal</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">dlog_head_opt() = none | term() | iodata()</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">dlog_mode() = read_only | read_write</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">dlog_type() = halt | wrap</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">continuation()</fo:block></fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Chunk continuation returned by
         <fo:inline font-family="monospace">chunk/2,3</fo:inline>, <fo:inline font-family="monospace">bchunk/2,3</fo:inline>, or <fo:inline font-family="monospace">chunk_step/3</fo:inline>.</fo:block>
      
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">invalid_header() = term()</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">file_error() = term()</fo:block></fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6673440"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">accessible_logs() -&gt; {[LocalLog], [DistributedLog]}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">LocalLog = DistributedLog = <fo:inline font-style="italic">log()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the names of the disk logs accessible on the current node.
          The first list contains local disk logs and the
          second list contains distributed disk logs.
          </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6676272"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">alog(Log, Term) -&gt; <fo:inline font-style="italic">notify_ret()</fo:inline></fo:block></fo:block><fo:block id="idp6677104"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">balog(Log, Bytes) -&gt; <fo:inline font-style="italic">notify_ret()</fo:inline></fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Log = <fo:inline font-style="italic">log()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Term = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Bytes = iodata()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">notify_ret() = ok | {error, no_such_log}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Asynchronously append an item to a disk log. <fo:inline font-family="monospace">alog/2</fo:inline> is
          used for internally formatted logs and <fo:inline font-family="monospace">balog/2</fo:inline>
          for externally formatted logs. <fo:inline font-family="monospace">balog/2</fo:inline> can also be used
          for internally formatted logs if the binary is
          constructed with a call to
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">term_to_binary/1</fo:inline></fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Owners subscribing to notifications receive
          message <fo:inline font-family="monospace">read_only</fo:inline>, <fo:inline font-family="monospace">blocked_log</fo:inline>,
          or <fo:inline font-family="monospace">format_external</fo:inline> if the item cannot be written
          on the log, and possibly one of the messages <fo:inline font-family="monospace">wrap</fo:inline>,
          <fo:inline font-family="monospace">full</fo:inline>, or <fo:inline font-family="monospace">error_status</fo:inline> if an item is written
          on the log. Message <fo:inline font-family="monospace">error_status</fo:inline> is sent if
          something is wrong with the header function or if a file error
          occurs.
          </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6688496"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">alog_terms(Log, TermList) -&gt; <fo:inline font-style="italic">notify_ret()</fo:inline></fo:block></fo:block><fo:block id="idp6689328"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">balog_terms(Log, ByteList) -&gt; <fo:inline font-style="italic">notify_ret()</fo:inline></fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Log = <fo:inline font-style="italic">log()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">TermList = [term()]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ByteList = [iodata()]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">notify_ret() = ok | {error, no_such_log}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Asynchronously append a list of items to a disk log.
          <fo:inline font-family="monospace">alog_terms/2</fo:inline> is used for internally
          formatted logs and <fo:inline font-family="monospace">balog_terms/2</fo:inline>
          for externally formatted logs. <fo:inline font-family="monospace">balog_terms/2</fo:inline> can also be used
          for internally formatted logs if the binaries are
          constructed with calls to
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">term_to_binary/1</fo:inline></fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Owners subscribing to notifications receive
          message <fo:inline font-family="monospace">read_only</fo:inline>, <fo:inline font-family="monospace">blocked_log</fo:inline>,
          or <fo:inline font-family="monospace">format_external</fo:inline> if the items cannot be written
          on the log, and possibly one or more of the messages <fo:inline font-family="monospace">wrap</fo:inline>,
          <fo:inline font-family="monospace">full</fo:inline>, and <fo:inline font-family="monospace">error_status</fo:inline> if items are written
          on the log. Message <fo:inline font-family="monospace">error_status</fo:inline> is sent if
          something is wrong with the header function or if a file error
          occurs.
          </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6700752"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">block(Log) -&gt; ok | {error, <fo:inline font-style="italic">block_error_rsn()</fo:inline>}</fo:block></fo:block><fo:block id="idp6701584"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">block(Log, QueueLogRecords) -&gt; ok | {error, <fo:inline font-style="italic">block_error_rsn()</fo:inline>}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Log = <fo:inline font-style="italic">log()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">QueueLogRecords = boolean()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">block_error_rsn() = no_such_log | nonode | {blocked_log, <fo:inline font-style="italic">log()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">With a call to <fo:inline font-family="monospace">block/1,2</fo:inline> a process can block a log.
          If the blocking process is not an owner of the log, a temporary
          link is created between the disk log process and the blocking
          process. The link ensures that the disk log is
          unblocked if the blocking process terminates without
          first closing or unblocking the log.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Any process can probe a blocked log with <fo:inline font-family="monospace">info/1</fo:inline> or
          close it with <fo:inline font-family="monospace">close/1</fo:inline>. The blocking process can also
          use functions <fo:inline font-family="monospace">chunk/2,3</fo:inline>, <fo:inline font-family="monospace">bchunk/2,3</fo:inline>,
          <fo:inline font-family="monospace">chunk_step/3</fo:inline>, and <fo:inline font-family="monospace">unblock/1</fo:inline> without being
          affected by the block. Any other attempt than those
          mentioned so far to update or read a blocked log suspends the
          calling process until the log is unblocked or returns
          error message <fo:inline font-family="monospace">{blocked_log, Log}</fo:inline>, depending on
          whether the value of <fo:inline font-family="monospace">QueueLogRecords</fo:inline> is <fo:inline font-family="monospace">true</fo:inline>
          or <fo:inline font-family="monospace">false</fo:inline>. <fo:inline font-family="monospace">QueueLogRecords</fo:inline> defaults to
          <fo:inline font-family="monospace">true</fo:inline>, which is used by <fo:inline font-family="monospace">block/1</fo:inline>.
          </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6712880"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">change_header(Log, Header) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Log = <fo:inline font-style="italic">log()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Header = <fo:block/>    {head, <fo:inline font-style="italic">dlog_head_opt()</fo:inline>} |<fo:block/>    {head_func, MFA :: {atom(), atom(), list()}}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:block/>    no_such_log |<fo:block/>    nonode |<fo:block/>    {read_only_mode, Log} |<fo:block/>    {blocked_log, Log} |<fo:block/>    {badarg, head}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Changes the value of option <fo:inline font-family="monospace">head</fo:inline> or <fo:inline font-family="monospace">head_func</fo:inline> for an owner of a disk log.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6716480"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">change_notify(Log, Owner, Notify) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Log = <fo:inline font-style="italic">log()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Owner = pid()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Notify = boolean()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:block/>    no_such_log |<fo:block/>    nonode |<fo:block/>    {blocked_log, Log} |<fo:block/>    {badarg, notify} |<fo:block/>    {not_owner, Owner}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Changes the value of option <fo:inline font-family="monospace">notify</fo:inline> for an owner of a disk log. </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6719616"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">change_size(Log, Size) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Log = <fo:inline font-style="italic">log()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Size = <fo:inline font-style="italic">dlog_size()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:block/>    no_such_log |<fo:block/>    nonode |<fo:block/>    {read_only_mode, Log} |<fo:block/>    {blocked_log, Log} |<fo:block/>    {new_size_too_small, CurrentSize :: integer() &gt;= 1} |<fo:block/>    {badarg, size} |<fo:block/>    {file_error, <fo:inline font-style="italic">file:filename()</fo:inline>, <fo:inline font-style="italic">file_error()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Changes the size of an open log.
          For a halt log, the size can always be increased,
          but it cannot be decreased to something less than
          the current file size.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For a wrap log, both the size and the number of files can always
	  be increased, as long as the number of files does not
          exceed 65000. If the maximum number of files is decreased, the
          change is not valid until the current file is full and the
          log wraps to the next file.
          The redundant files are removed the next time the log wraps around,
          that is, starts to log to file number 1.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As an example, assume that the old maximum number of files 
          is 10 and that the new maximum number of files is 6. If 
          the current file number is not greater than the new maximum number 
          of files, files 7-10 are removed when file 6
          is full and the log starts to write to file number 1 again. 
          Otherwise, the files greater than the current
          file are removed when the current file is full (for example, if
          the current file is 8, files 9 and 10 are removed). The files between
          the new maximum number of files and the current
          file (that is, files 7 and 8) are removed the next time file 6
          is full.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the size of the files is decreased, the change immediately
          affects the current log. It does not change the
          size of log files already full until the next time they are used.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the log size is decreased, for example, to save space,
          function
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">inc_wrap_file/1</fo:inline></fo:inline>
	  can be used to force the log to wrap.
          </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6726480"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">chunk(Log, Continuation) -&gt; <fo:inline font-style="italic">chunk_ret()</fo:inline></fo:block></fo:block><fo:block id="idp6727312"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">chunk(Log, Continuation, N) -&gt; <fo:inline font-style="italic">chunk_ret()</fo:inline></fo:block></fo:block><fo:block id="idp6728144"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">bchunk(Log, Continuation) -&gt; <fo:inline font-style="italic">bchunk_ret()</fo:inline></fo:block></fo:block><fo:block id="idp6728976"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">bchunk(Log, Continuation, N) -&gt; <fo:inline font-style="italic">bchunk_ret()</fo:inline></fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Log = <fo:inline font-style="italic">log()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Continuation = start | <fo:inline font-style="italic">continuation()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">N = integer() &gt;= 1 | infinity</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">chunk_ret() = <fo:block/>    {Continuation2 :: <fo:inline font-style="italic">continuation()</fo:inline>, Terms :: [term()]} |<fo:block/>    {Continuation2 :: <fo:inline font-style="italic">continuation()</fo:inline>,<fo:block/>     Terms :: [term()],<fo:block/>     Badbytes :: integer() &gt;= 0} |<fo:block/>    eof |<fo:block/>    {error, Reason :: <fo:inline font-style="italic">chunk_error_rsn()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">bchunk_ret() = <fo:block/>    {Continuation2 :: <fo:inline font-style="italic">continuation()</fo:inline>, Binaries :: [binary()]} |<fo:block/>    {Continuation2 :: <fo:inline font-style="italic">continuation()</fo:inline>,<fo:block/>     Binaries :: [binary()],<fo:block/>     Badbytes :: integer() &gt;= 0} |<fo:block/>    eof |<fo:block/>    {error, Reason :: <fo:inline font-style="italic">chunk_error_rsn()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">chunk_error_rsn() = <fo:block/>    no_such_log |<fo:block/>    {format_external, <fo:inline font-style="italic">log()</fo:inline>} |<fo:block/>    {blocked_log, <fo:inline font-style="italic">log()</fo:inline>} |<fo:block/>    {badarg, continuation} |<fo:block/>    {not_internal_wrap, <fo:inline font-style="italic">log()</fo:inline>} |<fo:block/>    {corrupt_log_file, FileName :: <fo:inline font-style="italic">file:filename()</fo:inline>} |<fo:block/>    {file_error, <fo:inline font-style="italic">file:filename()</fo:inline>, <fo:inline font-style="italic">file_error()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Efficiently reads the terms that are appended
	  to an internally formatted log. It minimizes disk
          I/O by reading 64 kilobyte chunks from the file. Functions
          <fo:inline font-family="monospace">bchunk/2,3</fo:inline> return the binaries read from
          the file, they do not call <fo:inline font-family="monospace">binary_to_term()</fo:inline>. Apart from that,
          they work just like <fo:inline font-family="monospace">chunk/2,3</fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The first time <fo:inline font-family="monospace">chunk()</fo:inline> (or <fo:inline font-family="monospace">bchunk()</fo:inline>) is called,
          an initial continuation, the atom <fo:inline font-family="monospace">start</fo:inline>, must be
          provided. If a disk log process is running on the
          current node, terms are read from that log. Otherwise, an
          individual distributed log on some other node is chosen, if
          such a log exists.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-family="monospace">chunk/3</fo:inline> is called, <fo:inline font-family="monospace">N</fo:inline> controls the
          maximum number of terms that are read from the log in each
          chunk. Defaults to <fo:inline font-family="monospace">infinity</fo:inline>, which means that all the
          terms contained in the 64 kilobyte chunk are read. If less than
          <fo:inline font-family="monospace">N</fo:inline> terms are returned, this does not necessarily mean
          that the end of the file is reached.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">chunk()</fo:inline> returns a tuple
          <fo:inline font-family="monospace">{Continuation2, Terms}</fo:inline>, where
	  <fo:inline font-family="monospace">Terms</fo:inline> is a list
          of terms found in the log. <fo:inline font-family="monospace">Continuation2</fo:inline> is yet
          another continuation, which must be passed on to any
          subsequent calls to <fo:inline font-family="monospace">chunk()</fo:inline>. With a series of calls to
          <fo:inline font-family="monospace">chunk()</fo:inline>, all terms from a log can be extracted.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">chunk()</fo:inline> returns a tuple
          <fo:inline font-family="monospace">{Continuation2, Terms, Badbytes}</fo:inline>
	  if the log is opened in read-only mode and the read chunk is corrupt.
	  <fo:inline font-family="monospace">Badbytes</fo:inline> is the number of bytes in the file found not to be
          Erlang terms in the chunk. Notice that the log is not repaired.
          When trying to read chunks from a log opened in read-write mode,
          tuple <fo:inline font-family="monospace">{corrupt_log_file, FileName}</fo:inline> is returned if the
          read chunk is corrupt.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">chunk()</fo:inline> returns <fo:inline font-family="monospace">eof</fo:inline> when the end of the log is
          reached, or <fo:inline font-family="monospace">{error, Reason}</fo:inline> if an error occurs. If
          a wrap log file is missing, a message is output on the error log.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-family="monospace">chunk/2,3</fo:inline> is used with wrap logs, the returned
          continuation might not be valid in the next call to
          <fo:inline font-family="monospace">chunk()</fo:inline>. This is because the log can wrap and delete
          the file into which the continuation points. To prevent this,
          the log can be blocked during the search.
          </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6753872"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">chunk_info(Continuation) -&gt; InfoList | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Continuation = <fo:inline font-style="italic">continuation()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">InfoList = [{node, Node :: node()}, ...]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = {no_continuation, Continuation}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the pair <fo:inline font-family="monospace">{node, Node}</fo:inline>,
          describing the chunk continuation returned by
          <fo:inline font-family="monospace">chunk/2,3</fo:inline>, <fo:inline font-family="monospace">bchunk/2,3</fo:inline>, or <fo:inline font-family="monospace">chunk_step/3</fo:inline>.</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Terms are read from the disk log running on <fo:inline font-family="monospace">Node</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6759888"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">chunk_step(Log, Continuation, Step) -&gt;<fo:block/>              {ok, any()} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Log = <fo:inline font-style="italic">log()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Continuation = start | <fo:inline font-style="italic">continuation()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Step = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:block/>    no_such_log |<fo:block/>    end_of_log |<fo:block/>    {format_external, Log} |<fo:block/>    {blocked_log, Log} |<fo:block/>    {badarg, continuation} |<fo:block/>    {file_error, <fo:inline font-style="italic">file:filename()</fo:inline>, <fo:inline font-style="italic">file_error()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Can be used with <fo:inline font-family="monospace">chunk/2,3</fo:inline> and <fo:inline font-family="monospace">bchunk/2,3</fo:inline>
	  to search through an internally formatted wrap log. It takes as
          argument a continuation as returned by <fo:inline font-family="monospace">chunk/2,3</fo:inline>,
          <fo:inline font-family="monospace">bchunk/2,3</fo:inline>, or <fo:inline font-family="monospace">chunk_step/3</fo:inline>, and steps forward
          (or backward) <fo:inline font-family="monospace">Step</fo:inline> files in the wrap log. The
          continuation returned, points to the first log item in the
          new current file.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If atom <fo:inline font-family="monospace">start</fo:inline> is specified as continuation, a disk log
          to read terms from is chosen. A local or distributed disk log
          on the current node is preferred to an
          individual distributed log on some other node.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the wrap log is not full because all files are not yet
          used, <fo:inline font-family="monospace">{error, end_of_log}</fo:inline> is returned if trying to
          step outside the log.
          </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6767728"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">close(Log) -&gt; ok | {error, <fo:inline font-style="italic">close_error_rsn()</fo:inline>}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Log = <fo:inline font-style="italic">log()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">close_error_rsn() = <fo:block/>    no_such_log |<fo:block/>    nonode |<fo:block/>    {file_error, <fo:inline font-style="italic">file:filename()</fo:inline>, <fo:inline font-style="italic">file_error()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Closes a
          local or distributed disk log properly. An internally
          formatted log must be closed before the Erlang system is
          stopped. Otherwise, the log is regarded as unclosed and the
          automatic repair procedure is activated next time the
          log is opened.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The disk log process is not terminated as long as there are
          owners or users of the log. All owners must close the log,
	  possibly by terminating. Also, any other process, not only the processes
	  that have opened the log anonymously, can decrement the <fo:inline font-family="monospace">users</fo:inline>
          counter by closing the log. 
          Attempts to close a log by a process that is 
          not an owner are ignored if there are no users.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the log is blocked by the closing process, the log is also
          unblocked.
          </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6773424"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">format_error(Error) -&gt; <fo:inline font-style="italic">io_lib:chars()</fo:inline></fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Error = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Given the error returned by any function in this module, 
          this function returns a descriptive string
          of the error in English. For file errors, function
          <fo:inline font-family="monospace">format_error/1</fo:inline> in module
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">file</fo:inline></fo:inline>
	  is called.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6777552"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">inc_wrap_file(Log) -&gt; ok | {error, <fo:inline font-style="italic">inc_wrap_error_rsn()</fo:inline>}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Log = <fo:inline font-style="italic">log()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">inc_wrap_error_rsn() = <fo:block/>    no_such_log |<fo:block/>    nonode |<fo:block/>    {read_only_mode, <fo:inline font-style="italic">log()</fo:inline>} |<fo:block/>    {blocked_log, <fo:inline font-style="italic">log()</fo:inline>} |<fo:block/>    {halt_log, <fo:inline font-style="italic">log()</fo:inline>} |<fo:block/>    {invalid_header, <fo:inline font-style="italic">invalid_header()</fo:inline>} |<fo:block/>    {file_error, <fo:inline font-style="italic">file:filename()</fo:inline>, <fo:inline font-style="italic">file_error()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">invalid_header() = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Forces the internally formatted disk log to start logging to the
          next log file. It can be used, for example, with
          <fo:inline font-family="monospace">change_size/2</fo:inline> to reduce the amount of disk space allocated
          by the disk log.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Owners subscribing to notifications normally
          receive a <fo:inline font-family="monospace">wrap</fo:inline> message, but if
          an error occurs with a reason tag of <fo:inline font-family="monospace">invalid_header</fo:inline> or
          <fo:inline font-family="monospace">file_error</fo:inline>, an <fo:inline font-family="monospace">error_status</fo:inline> message is sent.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6784288"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">info(Log) -&gt; InfoList | {error, no_such_log}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Log = <fo:inline font-style="italic">log()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">InfoList = [<fo:inline font-style="italic">dlog_info()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">dlog_info() = <fo:block/>    {name, Log :: <fo:inline font-style="italic">log()</fo:inline>} |<fo:block/>    {file, File :: <fo:inline font-style="italic">file:filename()</fo:inline>} |<fo:block/>    {type, Type :: <fo:inline font-style="italic">dlog_type()</fo:inline>} |<fo:block/>    {format, Format :: <fo:inline font-style="italic">dlog_format()</fo:inline>} |<fo:block/>    {size, Size :: <fo:inline font-style="italic">dlog_size()</fo:inline>} |<fo:block/>    {mode, Mode :: <fo:inline font-style="italic">dlog_mode()</fo:inline>} |<fo:block/>    {owners, [{pid(), Notify :: boolean()}]} |<fo:block/>    {users, Users :: integer() &gt;= 0} |<fo:block/>    {status,<fo:block/>     Status :: ok | {blocked, QueueLogRecords :: boolean()}} |<fo:block/>    {node, Node :: node()} |<fo:block/>    {distributed, Dist :: local | [node()]} |<fo:block/>    {head,<fo:block/>     Head ::<fo:block/>         none | {head, term()} | (MFA :: {atom(), atom(), list()})} |<fo:block/>    {no_written_items, NoWrittenItems :: integer() &gt;= 0} |<fo:block/>    {full, Full :: boolean} |<fo:block/>    {no_current_bytes, integer() &gt;= 0} |<fo:block/>    {no_current_items, integer() &gt;= 0} |<fo:block/>    {no_items, integer() &gt;= 0} |<fo:block/>    {current_file, integer() &gt;= 1} |<fo:block/>    {no_overflows,<fo:block/>     {SinceLogWasOpened :: integer() &gt;= 0,<fo:block/>      SinceLastInfo :: integer() &gt;= 0}}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of <fo:inline font-family="monospace">{Tag, Value}</fo:inline> pairs describing the log.
	  If a disk log process is running on the current node,
	  that log is used as source of information, otherwise an individual
	  distributed log on some other node is chosen, if such a log exists.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following pairs are returned for all logs:
          </fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{name, Log}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Log</fo:inline> is the log name
              as specified by the <fo:inline font-family="monospace">open/1</fo:inline> option <fo:inline font-family="monospace">name</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{file, File}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For halt logs <fo:inline font-family="monospace">File</fo:inline> is the
              filename, and for wrap logs <fo:inline font-family="monospace">File</fo:inline> is the base name.</fo:block>
          </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{type, Type}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Type</fo:inline> is the log type
              as specified by the <fo:inline font-family="monospace">open/1</fo:inline> option <fo:inline font-family="monospace">type</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{format, Format}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Format</fo:inline> is the log format
              as specified by the <fo:inline font-family="monospace">open/1</fo:inline> option <fo:inline font-family="monospace">format</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{size, Size}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Size</fo:inline> is the log size
              as specified by the <fo:inline font-family="monospace">open/1</fo:inline> option <fo:inline font-family="monospace">size</fo:inline>,
              or the size set by <fo:inline font-family="monospace">change_size/2</fo:inline>. The value set by 
              <fo:inline font-family="monospace">change_size/2</fo:inline> is reflected immediately.</fo:block>
          </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{mode, Mode}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Mode</fo:inline> is the log mode
              as specified by the <fo:inline font-family="monospace">open/1</fo:inline> option <fo:inline font-family="monospace">mode</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{owners, [{pid(), Notify}]}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Notify</fo:inline>
              is the value set by the <fo:inline font-family="monospace">open/1</fo:inline> option <fo:inline font-family="monospace">notify</fo:inline>
              or function <fo:inline font-family="monospace">change_notify/3</fo:inline> for the owners of
              the log.</fo:block>
          </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{users, Users}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Users</fo:inline> is the number
              of anonymous users of the log, see the <fo:inline font-family="monospace">open/1</fo:inline> option
              <fo:inline font-style="italic"><fo:inline font-family="monospace">linkto</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{status, Status}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Status</fo:inline> is <fo:inline font-family="monospace">ok</fo:inline>
              or <fo:inline font-family="monospace">{blocked, QueueLogRecords}</fo:inline> as set by functions
              <fo:inline font-family="monospace">block/1,2</fo:inline> and <fo:inline font-family="monospace">unblock/1</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{node, Node}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The information returned by the
              current invocation of function <fo:inline font-family="monospace">info/1</fo:inline> is
              gathered from the disk log process running on <fo:inline font-family="monospace">Node</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{distributed, Dist}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the log is local on
              the current node, <fo:inline font-family="monospace">Dist</fo:inline> has the value <fo:inline font-family="monospace">local</fo:inline>,
              otherwise all nodes where the log is distributed
              are returned as a list.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following pairs are returned for all logs opened in 
          <fo:inline font-family="monospace">read_write</fo:inline> mode:
          </fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{head, Head}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Depending on the value of
              the <fo:inline font-family="monospace">open/1</fo:inline> options <fo:inline font-family="monospace">head</fo:inline> and <fo:inline font-family="monospace">head_func</fo:inline>,
              or set by function <fo:inline font-family="monospace">change_header/2</fo:inline>, the value
              of <fo:inline font-family="monospace">Head</fo:inline> is <fo:inline font-family="monospace">none</fo:inline> (default),
              <fo:inline font-family="monospace">{head, H}</fo:inline> (<fo:inline font-family="monospace">head</fo:inline> option), or <fo:inline font-family="monospace">{M,F,A}</fo:inline>
              (<fo:inline font-family="monospace">head_func</fo:inline> option).</fo:block>
          </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{no_written_items, NoWrittenItems}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">NoWrittenItems</fo:inline> is the number of items
              written to the log since the disk log process was created.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following pair is returned for halt logs opened in 
          <fo:inline font-family="monospace">read_write</fo:inline> mode:
          </fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{full, Full}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Full</fo:inline> is <fo:inline font-family="monospace">true</fo:inline> or
              <fo:inline font-family="monospace">false</fo:inline> depending on whether the halt log is full or not.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following pairs are returned for wrap logs opened in 
          <fo:inline font-family="monospace">read_write</fo:inline> mode:
          </fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{no_current_bytes, integer() &gt;= 0}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The number
              of bytes written to the current wrap log file.</fo:block>
          </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{no_current_items, integer() &gt;= 0}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The number
              of items written to the current wrap log file, header
              inclusive.</fo:block>
          </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{no_items, integer() &gt;= 0}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The total number
              of items in all wrap log files.</fo:block>
          </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{current_file, integer()}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The ordinal for
              the current wrap log file in the range <fo:inline font-family="monospace">1..MaxNoFiles</fo:inline>,
              where <fo:inline font-family="monospace">MaxNoFiles</fo:inline> is specified by the <fo:inline font-family="monospace">open/1</fo:inline> option
              <fo:inline font-family="monospace">size</fo:inline> or set by <fo:inline font-family="monospace">change_size/2</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{no_overflows, {SinceLogWasOpened, SinceLastInfo}}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">SinceLogWasOpened</fo:inline> (<fo:inline font-family="monospace">SinceLastInfo</fo:inline>)
	      is the number of times a wrap log file has been filled up and a
              new one is opened or <fo:inline font-family="monospace">inc_wrap_file/1</fo:inline> has been called since
              the disk log was last opened (<fo:inline font-family="monospace">info/1</fo:inline> 
              was last called). The first time <fo:inline font-family="monospace">info/2</fo:inline> is called 
              after a log was (re)opened or truncated, the two values 
              are equal.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that functions <fo:inline font-family="monospace">chunk/2,3</fo:inline>, <fo:inline font-family="monospace">bchunk/2,3</fo:inline>, and
          <fo:inline font-family="monospace">chunk_step/3</fo:inline> do not affect any value
          returned by <fo:inline font-family="monospace">info/1</fo:inline>.
          </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6859728"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">lclose(Log) -&gt; ok | {error, <fo:inline font-style="italic">lclose_error_rsn()</fo:inline>}</fo:block></fo:block><fo:block id="idp6860560"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">lclose(Log, Node) -&gt; ok | {error, <fo:inline font-style="italic">lclose_error_rsn()</fo:inline>}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Log = <fo:inline font-style="italic">log()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Node = node()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">lclose_error_rsn() = <fo:block/>    no_such_log | {file_error, <fo:inline font-style="italic">file:filename()</fo:inline>, <fo:inline font-style="italic">file_error()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">lclose/1</fo:inline> closes a local log or an individual distributed
	log on the current node.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">lclose/2</fo:inline> closes an individual distributed log on the
	specified node if the node is not the current one.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">lclose(Log)</fo:inline> is equivalent to
          <fo:inline font-family="monospace">lclose(Log, node())</fo:inline>.
          See also <fo:inline font-style="italic"><fo:inline font-family="monospace">close/1</fo:inline></fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If no log with the specified name exist on the specified node,
	<fo:inline font-family="monospace">no_such_log</fo:inline> is returned.
          </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6868832"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">log(Log, Term) -&gt; ok | {error, Reason :: <fo:inline font-style="italic">log_error_rsn()</fo:inline>}</fo:block></fo:block><fo:block id="idp6869664"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">blog(Log, Bytes) -&gt; ok | {error, Reason :: <fo:inline font-style="italic">log_error_rsn()</fo:inline>}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Log = <fo:inline font-style="italic">log()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Term = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Bytes = iodata()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">log_error_rsn() = <fo:block/>    no_such_log |<fo:block/>    nonode |<fo:block/>    {read_only_mode, <fo:inline font-style="italic">log()</fo:inline>} |<fo:block/>    {format_external, <fo:inline font-style="italic">log()</fo:inline>} |<fo:block/>    {blocked_log, <fo:inline font-style="italic">log()</fo:inline>} |<fo:block/>    {full, <fo:inline font-style="italic">log()</fo:inline>} |<fo:block/>    {invalid_header, <fo:inline font-style="italic">invalid_header()</fo:inline>} |<fo:block/>    {file_error, <fo:inline font-style="italic">file:filename()</fo:inline>, <fo:inline font-style="italic">file_error()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Synchronously
          appends a term to a disk log. Returns <fo:inline font-family="monospace">ok</fo:inline> or
          <fo:inline font-family="monospace">{error, Reason}</fo:inline> when the term is written to
          disk. If the log is distributed, <fo:inline font-family="monospace">ok</fo:inline> is returned,
	  unless all nodes are down. Terms are written by
          the ordinary <fo:inline font-family="monospace">write()</fo:inline> function of the
          operating system. Hence, it is not guaranteed that the term
          is written to disk, it can linger in
          the operating system kernel for a while. To ensure that the
          item is written to disk, function
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">sync/1</fo:inline></fo:inline>
          must be called.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">log/2</fo:inline> is used for internally formatted logs,
          and <fo:inline font-family="monospace">blog/2</fo:inline> for externally formatted logs. 
          <fo:inline font-family="monospace">blog/2</fo:inline> can also be used
          for internally formatted logs if the binary is
          constructed with a call to
	  <fo:inline font-style="italic">
	  <fo:inline font-family="monospace">term_to_binary/1</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Owners subscribing to notifications are notified
          of an error with an <fo:inline font-family="monospace">error_status</fo:inline> message if the error 
          reason tag is <fo:inline font-family="monospace">invalid_header</fo:inline> or <fo:inline font-family="monospace">file_error</fo:inline>.
          </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6883056"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">log_terms(Log, TermList) -&gt;<fo:block/>             ok | {error, Resaon :: <fo:inline font-style="italic">log_error_rsn()</fo:inline>}</fo:block></fo:block><fo:block id="idp6883888"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">blog_terms(Log, BytesList) -&gt;<fo:block/>              ok | {error, Reason :: <fo:inline font-style="italic">log_error_rsn()</fo:inline>}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Log = <fo:inline font-style="italic">log()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">TermList = [term()]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">BytesList = [iodata()]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">log_error_rsn() = <fo:block/>    no_such_log |<fo:block/>    nonode |<fo:block/>    {read_only_mode, <fo:inline font-style="italic">log()</fo:inline>} |<fo:block/>    {format_external, <fo:inline font-style="italic">log()</fo:inline>} |<fo:block/>    {blocked_log, <fo:inline font-style="italic">log()</fo:inline>} |<fo:block/>    {full, <fo:inline font-style="italic">log()</fo:inline>} |<fo:block/>    {invalid_header, <fo:inline font-style="italic">invalid_header()</fo:inline>} |<fo:block/>    {file_error, <fo:inline font-style="italic">file:filename()</fo:inline>, <fo:inline font-style="italic">file_error()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Synchronously appends a list of items to the log. It is more
          efficient to use these functions instead of functions <fo:inline font-family="monospace">log/2</fo:inline>
	  and <fo:inline font-family="monospace">blog/2</fo:inline>. The specified list is split into as large
	  sublists as possible (limited by the size of wrap log files),
	  and each sublist is logged as one single item, which reduces
	  the overhead.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">log_terms/2</fo:inline> is used for internally formatted
          logs, and <fo:inline font-family="monospace">blog_terms/2</fo:inline> for externally formatted logs.
          <fo:inline font-family="monospace">blog_terms/2</fo:inline> can also be used
          for internally formatted logs if the binaries are
          constructed with calls to
	  <fo:inline font-style="italic">
	  <fo:inline font-family="monospace">term_to_binary/1</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Owners subscribing to notifications are notified
          of an error with an <fo:inline font-family="monospace">error_status</fo:inline> message if the error 
          reason tag is <fo:inline font-family="monospace">invalid_header</fo:inline> or <fo:inline font-family="monospace">file_error</fo:inline>.
          </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6894944"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">open(ArgL) -&gt; <fo:inline font-style="italic">open_ret()</fo:inline> | <fo:inline font-style="italic">dist_open_ret()</fo:inline></fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ArgL = <fo:inline font-style="italic">dlog_options()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">dlog_options() = [<fo:inline font-style="italic">dlog_option()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">dlog_option() = <fo:block/>    {name, Log :: <fo:inline font-style="italic">log()</fo:inline>} |<fo:block/>    {file, FileName :: <fo:inline font-style="italic">file:filename()</fo:inline>} |<fo:block/>    {linkto, LinkTo :: none | pid()} |<fo:block/>    {repair, Repair :: true | false | truncate} |<fo:block/>    {type, Type :: <fo:inline font-style="italic">dlog_type()</fo:inline>} |<fo:block/>    {format, Format :: <fo:inline font-style="italic">dlog_format()</fo:inline>} |<fo:block/>    {size, Size :: <fo:inline font-style="italic">dlog_size()</fo:inline>} |<fo:block/>    {distributed, Nodes :: [node()]} |<fo:block/>    {notify, boolean()} |<fo:block/>    {head, Head :: <fo:inline font-style="italic">dlog_head_opt()</fo:inline>} |<fo:block/>    {head_func, MFA :: {atom(), atom(), list()}} |<fo:block/>    {quiet, boolean()} |<fo:block/>    {mode, Mode :: <fo:inline font-style="italic">dlog_mode()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">open_ret() = <fo:inline font-style="italic">ret()</fo:inline> | {error, <fo:inline font-style="italic">open_error_rsn()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ret() = <fo:block/>    {ok, Log :: <fo:inline font-style="italic">log()</fo:inline>} |<fo:block/>    {repaired,<fo:block/>     Log :: <fo:inline font-style="italic">log()</fo:inline>,<fo:block/>     {recovered, Rec :: integer() &gt;= 0},<fo:block/>     {badbytes, Bad :: integer() &gt;= 0}}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">dist_open_ret() = <fo:block/>    {[{node(), <fo:inline font-style="italic">ret()</fo:inline>}], [{node(), {error, <fo:inline font-style="italic">dist_error_rsn()</fo:inline>}}]}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">dist_error_rsn() = nodedown | <fo:inline font-style="italic">open_error_rsn()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">open_error_rsn() = <fo:block/>    no_such_log |<fo:block/>    {badarg, term()} |<fo:block/>    {size_mismatch,<fo:block/>     CurrentSize :: <fo:inline font-style="italic">dlog_size()</fo:inline>,<fo:block/>     NewSize :: <fo:inline font-style="italic">dlog_size()</fo:inline>} |<fo:block/>    {arg_mismatch,<fo:block/>     OptionName :: <fo:inline font-style="italic">dlog_optattr()</fo:inline>,<fo:block/>     CurrentValue :: term(),<fo:block/>     Value :: term()} |<fo:block/>    {name_already_open, Log :: <fo:inline font-style="italic">log()</fo:inline>} |<fo:block/>    {open_read_write, Log :: <fo:inline font-style="italic">log()</fo:inline>} |<fo:block/>    {open_read_only, Log :: <fo:inline font-style="italic">log()</fo:inline>} |<fo:block/>    {need_repair, Log :: <fo:inline font-style="italic">log()</fo:inline>} |<fo:block/>    {not_a_log_file, FileName :: <fo:inline font-style="italic">file:filename()</fo:inline>} |<fo:block/>    {invalid_index_file, FileName :: <fo:inline font-style="italic">file:filename()</fo:inline>} |<fo:block/>    {invalid_header, <fo:inline font-style="italic">invalid_header()</fo:inline>} |<fo:block/>    {file_error, <fo:inline font-style="italic">file:filename()</fo:inline>, <fo:inline font-style="italic">file_error()</fo:inline>} |<fo:block/>    {node_already_open, Log :: <fo:inline font-style="italic">log()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">dlog_optattr() = <fo:block/>    name |<fo:block/>    file |<fo:block/>    linkto |<fo:block/>    repair |<fo:block/>    type |<fo:block/>    format |<fo:block/>    size |<fo:block/>    distributed |<fo:block/>    notify |<fo:block/>    head |<fo:block/>    head_func |<fo:block/>    mode</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">dlog_size() = <fo:block/>    infinity |<fo:block/>    integer() &gt;= 1 |<fo:block/>    {MaxNoBytes :: integer() &gt;= 1, MaxNoFiles :: integer() &gt;= 1}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parameter <fo:inline font-family="monospace">ArgL</fo:inline> is a list of the following
	  options:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{name, Log}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the log name.
              This name must be passed on as a parameter in
              all subsequent logging operations. A name must always
              be supplied.
              </fo:block>
          </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{file, FileName}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the name of the
              file to be used for logged terms. If this value is
              omitted and the log name is an atom or a string,
              the filename defaults to <fo:inline font-family="monospace">lists:concat([Log, ".LOG"])</fo:inline>
	      for halt logs.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For wrap logs, this is the base name of the files. Each file in
	      a wrap log is called <fo:inline font-family="monospace">&lt;base_name&gt;.N</fo:inline>, where <fo:inline font-family="monospace">N</fo:inline>
	      is an integer. Each wrap log also has two files called
              <fo:inline font-family="monospace">&lt;base_name&gt;.idx</fo:inline> and <fo:inline font-family="monospace">&lt;base_name&gt;.siz</fo:inline>.
              </fo:block>
          </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{linkto, LinkTo}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">LinkTo</fo:inline> is a pid, it becomes an owner of the
              log. If <fo:inline font-family="monospace">LinkTo</fo:inline> is <fo:inline font-family="monospace">none</fo:inline>, the log records
              that it is used anonymously by some process by
              incrementing the <fo:inline font-family="monospace">users</fo:inline> counter. By default, the
              process that calls <fo:inline font-family="monospace">open/1</fo:inline> owns the log.
              </fo:block>
          </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{repair, Repair}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Repair</fo:inline> is <fo:inline font-family="monospace">true</fo:inline>,
              the current log file is repaired, if needed. As the
              restoration is initiated, a message is output on the error log.
              If <fo:inline font-family="monospace">false</fo:inline> is specified,
              no automatic repair is attempted. Instead, the
              tuple <fo:inline font-family="monospace">{error, {need_repair, Log}}</fo:inline> is returned if an
              attempt is made to open a corrupt log file. 
              If <fo:inline font-family="monospace">truncate</fo:inline> is specified, the log file becomes
              truncated, creating an empty log. Defaults to
              <fo:inline font-family="monospace">true</fo:inline>, which has no effect on logs opened in 
              read-only mode.
              </fo:block>
          </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{type, Type}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The log type. Defaults to <fo:inline font-family="monospace">halt</fo:inline>.
              </fo:block>
          </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{format, Format}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Disk log format. Defaults to <fo:inline font-family="monospace">internal</fo:inline>.
              </fo:block>
          </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{size, Size}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Log size.</fo:block>
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a halt log has reached its maximum size, all attempts to
              log more items are rejected. Defaults to
              <fo:inline font-family="monospace">infinity</fo:inline>, which for halt implies that there is no
              maximum size.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For wrap logs, parameter <fo:inline font-family="monospace">Size</fo:inline>
              can be a pair
              <fo:inline font-family="monospace">{MaxNoBytes, MaxNoFiles}</fo:inline> or
	      <fo:inline font-family="monospace">infinity</fo:inline>.
	      In the latter case, if the files of an existing wrap log
              with the same name can be found, the size is read
              from the existing wrap log, otherwise an error is returned.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Wrap logs write at most <fo:inline font-family="monospace">MaxNoBytes</fo:inline>
              bytes on each file and use <fo:inline font-family="monospace">MaxNoFiles</fo:inline>
              files before starting all over with the first wrap log
              file. Regardless of <fo:inline font-family="monospace">MaxNoBytes</fo:inline>,
              at least the header (if there is one) and one
              item are written on each wrap log file before
              wrapping to the next file.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When opening an existing wrap log, it is not
              necessary to supply a value for option <fo:inline font-family="monospace">Size</fo:inline>, but any
              supplied value must equal the current log size, otherwise
              the tuple <fo:inline font-family="monospace">{error, {size_mismatch, CurrentSize,
	      NewSize}}</fo:inline> is returned.</fo:block>
          </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{distributed, Nodes}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This option can be used for
              adding members to a distributed disk log.
              Defaults to <fo:inline font-family="monospace">[]</fo:inline>, which means that
              the log is local on the current node.
              </fo:block>
          </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{notify, boolean()}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">true</fo:inline>, the log owners
              are notified when certain log events occur.
              Defaults to <fo:inline font-family="monospace">false</fo:inline>. The owners are sent one of the
              following messages when an event occurs:
              </fo:block>
            <fo:block space-after="0.25em" space-before="0.25em">
	      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{disk_log, Node, Log, {wrap, NoLostItems}}</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sent when a wrap log has
                  filled up one of its files and a new file is
                  opened. <fo:inline font-family="monospace">NoLostItems</fo:inline> is the number of
                  previously logged items that were lost when
                  truncating existing files.
                  </fo:block>
              </fo:block></fo:block-container>
	      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{disk_log, Node, Log, {truncated, NoLostItems}}</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sent when a log is
                  truncated or reopened. For halt logs <fo:inline font-family="monospace">NoLostItems</fo:inline>
                  is the number of items written on the log since the 
                  disk log process was created. For wrap logs 
                  <fo:inline font-family="monospace">NoLostItems</fo:inline> is the number of items on all 
                  wrap log files.
                  </fo:block>
              </fo:block></fo:block-container>
	      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{disk_log, Node, Log, {read_only, Items}}</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sent when an asynchronous log attempt is made to
                  a log file opened in read-only mode. 
                  <fo:inline font-family="monospace">Items</fo:inline> is the items from the log attempt.
                  </fo:block>
              </fo:block></fo:block-container>
	      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{disk_log, Node, Log, {blocked_log, Items}}</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sent when an asynchronous log attempt is made to
                  a blocked log that does not queue log attempts.
                  <fo:inline font-family="monospace">Items</fo:inline> is the items from the log attempt.
                  </fo:block>
              </fo:block></fo:block-container>
	      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{disk_log, Node, Log, {format_external, Items}}</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sent when function <fo:inline font-family="monospace">alog/2</fo:inline> or <fo:inline font-family="monospace">alog_terms/2</fo:inline> is
                  used for internally formatted logs. <fo:inline font-family="monospace">Items</fo:inline> is the 
                  items from the log attempt.
                  </fo:block>
              </fo:block></fo:block-container>
	      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{disk_log, Node, Log, full}</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sent when
                  an attempt to log items to a wrap log would write more
                  bytes than the limit set by option <fo:inline font-family="monospace">size</fo:inline>.
                  </fo:block>
              </fo:block></fo:block-container>
	      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{disk_log, Node, Log, {error_status, Status}}</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sent when the error status changes. The error status
                  is defined by the outcome of the last attempt to log
                  items to the log, or to truncate the log, or the last
                  use of function <fo:inline font-family="monospace">sync/1</fo:inline>, <fo:inline font-family="monospace">inc_wrap_file/1</fo:inline>, or
                  <fo:inline font-family="monospace">change_size/2</fo:inline>. <fo:inline font-family="monospace">Status</fo:inline> is either <fo:inline font-family="monospace">ok</fo:inline> or
                  <fo:inline font-family="monospace">{error, Error}</fo:inline>, the former is the initial value.
                  </fo:block>
              </fo:block></fo:block-container>
            </fo:block>
          </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{head, Head}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies a header to be
              written first on the log file. If the log is a wrap
              log, the item <fo:inline font-family="monospace">Head</fo:inline> is written first in each new file.
              <fo:inline font-family="monospace">Head</fo:inline> is to be a term if the format is
              <fo:inline font-family="monospace">internal</fo:inline>, otherwise a sequence of bytes.
              Defaults to <fo:inline font-family="monospace">none</fo:inline>, which means that
              no header is written first on the file.
              </fo:block>
          </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{head_func, {M,F,A}}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies a function
              to be called each time a new log file is opened.
              The call <fo:inline font-family="monospace">M:F(A)</fo:inline> is assumed to return <fo:inline font-family="monospace">{ok, Head}</fo:inline>.
              The item <fo:inline font-family="monospace">Head</fo:inline> is written first in each file.
              <fo:inline font-family="monospace">Head</fo:inline> is to be a term if the format is
              <fo:inline font-family="monospace">internal</fo:inline>, otherwise a sequence of bytes.
              </fo:block>
          </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{mode, Mode}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies if the log is to be
              opened in read-only or read-write mode. Defaults to
              <fo:inline font-family="monospace">read_write</fo:inline>.
              </fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{quiet, Boolean}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies if messages will be sent to
                <fo:inline font-family="monospace">error_logger</fo:inline> on recoverable errors with
                the log files. Defaults to <fo:inline font-family="monospace">true</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">open/1</fo:inline> returns <fo:inline font-family="monospace">{ok, Log}</fo:inline> if the
          log file is successfully opened. If the file is
          successfully repaired, the tuple <fo:inline font-family="monospace">{repaired, Log,
	  {recovered, Rec}, {badbytes, Bad}}</fo:inline>
	  is returned, where <fo:inline font-family="monospace">Rec</fo:inline> is the number of
	  whole Erlang terms found in the file and <fo:inline font-family="monospace">Bad</fo:inline>
	  is the number of bytes in the file that
          are non-Erlang terms. If the parameter <fo:inline font-family="monospace">distributed</fo:inline>
          is specified, <fo:inline font-family="monospace">open/1</fo:inline> returns a list of
          successful replies and a list of erroneous replies. Each
          reply is tagged with the node name.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a disk log is opened in read-write mode, any existing
          log file is checked for. If there is none, a new empty
          log is created, otherwise the existing file is opened at the
          position after the last logged item, and the logging of items
          starts from there. If the format is <fo:inline font-family="monospace">internal</fo:inline>
          and the existing file is not recognized as an internally
          formatted log, a tuple
	  <fo:inline font-family="monospace">{error, {not_a_log_file, FileName}}</fo:inline>
          is returned.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">open/1</fo:inline> cannot be used for changing the
          values of options of an open log. When there are prior
          owners or users of a log, all option values except <fo:inline font-family="monospace">name</fo:inline>, 
          <fo:inline font-family="monospace">linkto</fo:inline>, and <fo:inline font-family="monospace">notify</fo:inline> are only checked against
          the values supplied before as option values
          to function <fo:inline font-family="monospace">open/1</fo:inline>, <fo:inline font-family="monospace">change_header/2</fo:inline>, <fo:inline font-family="monospace">change_notify/3</fo:inline>,
          or <fo:inline font-family="monospace">change_size/2</fo:inline>. Thus,
          none of the options except <fo:inline font-family="monospace">name</fo:inline> is mandatory. If some
          specified value differs from the current value, a tuple
          <fo:inline font-family="monospace">{error, {arg_mismatch, OptionName, CurrentValue, Value}}</fo:inline>
          is returned.</fo:block>
	<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If an owner attempts to open a log
          as owner once again, it is acknowledged with the return value
          <fo:inline font-family="monospace">{ok, Log}</fo:inline>, but the state of the disk log is not
          affected.</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a log with a specified name is local on some node,
          and one tries to open the log distributed on the same node,
          the tuple <fo:inline font-family="monospace">{error, {node_already_open, Log}}</fo:inline> is
          returned. The same tuple is returned if the log is distributed on
          some node, and one tries to open the log locally on the same node.
          Opening individual distributed disk logs for the first time
          adds those logs to a (possibly empty) distributed disk log.
          The supplied option values are used
          on all nodes mentioned by option <fo:inline font-family="monospace">distributed</fo:inline>.
          Individual distributed logs know nothing
          about each other's option values, so each node can be
          given unique option values by creating a distributed
          log with many calls to <fo:inline font-family="monospace">open/1</fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A log file can be opened more than once by giving
          different values to option <fo:inline font-family="monospace">name</fo:inline> or by using the
          same file when distributing a log on different nodes.
          It is up to the user of module <fo:inline font-family="monospace">disk_log</fo:inline>
          to ensure that not more than one disk log process has write
	  access to any file, otherwise the file can be corrupted.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If an attempt to open a log file for the first time fails, 
          the disk log process terminates with the EXIT message 
          <fo:inline font-family="monospace">{{failed,Reason},[{disk_log,open,1}]}</fo:inline>.
          The function returns <fo:inline font-family="monospace">{error, Reason}</fo:inline> for all other errors.
          </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6997184"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">pid2name(Pid) -&gt; {ok, Log} | undefined</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Pid = pid()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Log = <fo:inline font-style="italic">log()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the log name
          given the pid of a disk log process on the current node, or
          <fo:inline font-family="monospace">undefined</fo:inline> if the specified pid is not a disk log process.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is meant to be used for debugging only.
          </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7000912"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">reopen(Log, File) -&gt; ok | {error, <fo:inline font-style="italic">reopen_error_rsn()</fo:inline>}</fo:block></fo:block><fo:block id="idp7001744"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">reopen(Log, File, Head) -&gt; ok | {error, <fo:inline font-style="italic">reopen_error_rsn()</fo:inline>}</fo:block></fo:block><fo:block id="idp7002576"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">breopen(Log, File, BHead) -&gt; ok | {error, <fo:inline font-style="italic">reopen_error_rsn()</fo:inline>}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Log = <fo:inline font-style="italic">log()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">File = <fo:inline font-style="italic">file:filename()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Head = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">BHead = iodata()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">reopen_error_rsn() = <fo:block/>    no_such_log |<fo:block/>    nonode |<fo:block/>    {read_only_mode, <fo:inline font-style="italic">log()</fo:inline>} |<fo:block/>    {blocked_log, <fo:inline font-style="italic">log()</fo:inline>} |<fo:block/>    {same_file_name, <fo:inline font-style="italic">log()</fo:inline>} |<fo:block/>    {invalid_index_file, <fo:inline font-style="italic">file:filename()</fo:inline>} |<fo:block/>    {invalid_header, <fo:inline font-style="italic">invalid_header()</fo:inline>} |<fo:block/>    {file_error, <fo:inline font-style="italic">file:filename()</fo:inline>, <fo:inline font-style="italic">file_error()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Renames the log file
          to <fo:inline font-family="monospace">File</fo:inline> and then recreates a new log file.
          If a wrap log exists, <fo:inline font-family="monospace">File</fo:inline> is used as the base name
          of the renamed files.
          By default the header given to <fo:inline font-family="monospace">open/1</fo:inline> is written first in
          the newly opened log file, but if argument <fo:inline font-family="monospace">Head</fo:inline> or
          <fo:inline font-family="monospace">BHead</fo:inline> is specified, this item is used instead.
          The header argument is used only once. Next time a wrap log file
          is opened, the header given to <fo:inline font-family="monospace">open/1</fo:inline> is used.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">reopen/2,3</fo:inline> are used for internally formatted
          logs, and <fo:inline font-family="monospace">breopen/3</fo:inline> for externally formatted logs.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Owners subscribing to notifications receive
          a <fo:inline font-family="monospace">truncate</fo:inline> message.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Upon failure to reopen the log, the disk log process terminates
          with the EXIT message <fo:inline font-family="monospace">{{failed,Error},[{disk_log,Fun,Arity}]}</fo:inline>.
          Other processes having requests queued receive the message
          <fo:inline font-family="monospace">{disk_log, Node, {error, disk_log_stopped}}</fo:inline>.
          </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7015840"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">sync(Log) -&gt; ok | {error, <fo:inline font-style="italic">sync_error_rsn()</fo:inline>}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Log = <fo:inline font-style="italic">log()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">sync_error_rsn() = <fo:block/>    no_such_log |<fo:block/>    nonode |<fo:block/>    {read_only_mode, <fo:inline font-style="italic">log()</fo:inline>} |<fo:block/>    {blocked_log, <fo:inline font-style="italic">log()</fo:inline>} |<fo:block/>    {file_error, <fo:inline font-style="italic">file:filename()</fo:inline>, <fo:inline font-style="italic">file_error()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Ensures that the contents of the log are written to the disk.
          This is usually a rather expensive operation.
          </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7019168"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">truncate(Log) -&gt; ok | {error, <fo:inline font-style="italic">trunc_error_rsn()</fo:inline>}</fo:block></fo:block><fo:block id="idp7020000"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">truncate(Log, Head) -&gt; ok | {error, <fo:inline font-style="italic">trunc_error_rsn()</fo:inline>}</fo:block></fo:block><fo:block id="idp7020832"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">btruncate(Log, BHead) -&gt; ok | {error, <fo:inline font-style="italic">trunc_error_rsn()</fo:inline>}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Log = <fo:inline font-style="italic">log()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Head = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">BHead = iodata()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">trunc_error_rsn() = <fo:block/>    no_such_log |<fo:block/>    nonode |<fo:block/>    {read_only_mode, <fo:inline font-style="italic">log()</fo:inline>} |<fo:block/>    {blocked_log, <fo:inline font-style="italic">log()</fo:inline>} |<fo:block/>    {invalid_header, <fo:inline font-style="italic">invalid_header()</fo:inline>} |<fo:block/>    {file_error, <fo:inline font-style="italic">file:filename()</fo:inline>, <fo:inline font-style="italic">file_error()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Removes all items from a disk log.
          If argument <fo:inline font-family="monospace">Head</fo:inline> or <fo:inline font-family="monospace">BHead</fo:inline> is
          specified, this item is written first in the newly truncated
          log, otherwise the header given to <fo:inline font-family="monospace">open/1</fo:inline> is used.
          The header argument is used only once. Next time a wrap log file
          is opened, the header given to <fo:inline font-family="monospace">open/1</fo:inline> is used.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">truncate/1,2</fo:inline> are used for internally
          formatted logs, and <fo:inline font-family="monospace">btruncate/2</fo:inline> for externally formatted
          logs.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Owners subscribing to notifications receive
          a <fo:inline font-family="monospace">truncate</fo:inline> message.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the attempt to truncate the log fails, the disk log process
          terminates with the EXIT message 
          <fo:inline font-family="monospace">{{failed,Reason},[{disk_log,Fun,Arity}]}</fo:inline>.
          Other processes having requests queued receive the message
          <fo:inline font-family="monospace">{disk_log, Node, {error, disk_log_stopped}}</fo:inline>.
          </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7032048"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">unblock(Log) -&gt; ok | {error, <fo:inline font-style="italic">unblock_error_rsn()</fo:inline>}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Log = <fo:inline font-style="italic">log()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">unblock_error_rsn() = <fo:block/>    no_such_log |<fo:block/>    nonode |<fo:block/>    {not_blocked, <fo:inline font-style="italic">log()</fo:inline>} |<fo:block/>    {not_blocked_by_pid, <fo:inline font-style="italic">log()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Unblocks a log.
          A log can only be unblocked by the blocking process.
          </fo:block>
      </fo:block>
  

  <fo:block id="idp7035472" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">See Also</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic"><fo:inline font-family="monospace">file(3)</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">pg2(3)</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">wrap_log_reader(3)</fo:inline></fo:inline></fo:block>
  
<fo:block page-break-before="always" id="idp7044720" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">erl_boot_server</fo:marker>erl_boot_server</fo:block>Erlang module</fo:block>
  <fo:block/>
  erl_boot_server
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This server is used to assist diskless Erlang nodes that fetch
      all Erlang code from another machine.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This server is used to fetch all code, including the start
      script, if an Erlang runtime system is started with
      command-line flag <fo:inline font-family="monospace">-loader inet</fo:inline>. All hosts specified
      with command-line flag <fo:inline font-family="monospace">-hosts Host</fo:inline> must have one
      instance of this server running.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This server can be started with the Kernel configuration
      parameter <fo:inline font-family="monospace">start_boot_server</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">erl_boot_server</fo:inline> can read regular files and
      files in archives. See <fo:inline font-style="italic"><fo:inline font-family="monospace">code(3)</fo:inline></fo:inline>
      and
    <fo:inline font-style="italic"><fo:inline font-family="monospace">erl_prim_loader(3)</fo:inline></fo:inline>
    in ERTS.</fo:block>
    <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The support for loading code from archive files is
     experimental. It is released before it is ready
     to obtain early feedback. The file format, semantics,
     interfaces, and so on, can be changed in a future release.</fo:block></fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7053120"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">add_slave(Slave) -&gt; ok | {error, What}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Slave = Host</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Host = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">What = any()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Adds a <fo:inline font-family="monospace">Slave</fo:inline> node to the list of allowed slave hosts.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7056384"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">delete_slave(Slave) -&gt; ok | {error, What}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Slave = Host</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Host = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">What = any()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Deletes a <fo:inline font-family="monospace">Slave</fo:inline> node from the list of allowed slave
          hosts.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7059648"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">start(Slaves) -&gt; {ok, Pid} | {error, What}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Slaves = [Host]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Host = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Pid = pid()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">What = any()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts the boot server. <fo:inline font-family="monospace">Slaves</fo:inline> is a list of
          IP addresses for hosts, which are allowed to use this server as a
          boot server.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7062960"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">start_link(Slaves) -&gt; {ok, Pid} | {error, What}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Slaves = [Host]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Host = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Pid = pid()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">What = any()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts the boot server and links to the caller. This function
          is used to start the server if it is included in a supervision
          tree.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7065744"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">which_slaves() -&gt; Slaves</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Slaves = [Host]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Host = atom()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the current list of allowed slave hosts.</fo:block>
      </fo:block>
  
  <fo:block id="idp7068592" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">SEE ALSO</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic"><fo:inline font-family="monospace">erts:init(3)</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">erts:erl_prim_loader(3)</fo:inline></fo:inline></fo:block>
  
<fo:block page-break-before="always" id="idp7076992" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">erl_ddll</fo:marker>erl_ddll</fo:block>Erlang module</fo:block>
  <fo:block/>
  erl_ddll
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module provides an interface for loading
      and unloading <fo:inline font-weight="bold">Erlang linked-in drivers</fo:inline> in runtime.</fo:block>
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is a large reference document. For casual use of this
        module, and for most real world applications, the
        descriptions of functions
	<fo:inline font-style="italic"><fo:inline font-family="monospace">load/2</fo:inline></fo:inline> and
	<fo:inline font-style="italic"><fo:inline font-family="monospace">unload/1</fo:inline></fo:inline>
	are enough to getting started.</fo:block>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The driver is to be provided as a dynamically linked library
      in an object code format specific for the platform in use,
      that is, <fo:inline font-family="monospace">.so</fo:inline> files on most Unix systems and <fo:inline font-family="monospace">.ddl</fo:inline>
      files on Windows. An Erlang linked-in driver must provide
      specific interfaces to the emulator, so this module is not
      designed for loading arbitrary dynamic libraries. For more
      information about Erlang drivers, see
      <fo:inline font-style="italic"><fo:inline font-family="monospace">erts:erl_driver</fo:inline></fo:inline>
      .</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When describing a set of functions (that is, a module, a part of a
      module, or an application), executing in a process and wanting to
      use a ddll-driver, we use the term <fo:inline font-weight="bold">user</fo:inline>. A process can
      have many users (different modules needing the same
      driver) and many processes running the same code, making up
      many <fo:inline font-weight="bold">users</fo:inline> of a driver.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the basic scenario, each user loads the driver before
      starting to use it and unloads the driver when done.
      The reference counting keeps track of
      processes and the number of loads by each process. This way
      the driver is only unloaded when no one wants it (it has no user).
      The driver also keeps track of ports that are
      opened to it. This enables delay of unloading until all
      ports are closed, or killing of all ports that use the driver when
      it is unloaded.</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The interface supports two basic scenarios of loading and
      unloading. Each scenario can also have the option of either
      killing ports when the driver is unloading, or waiting for the
      ports to close themselves. The scenarios are as follows:</fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Load and Unload on a "When Needed Basis"</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This (most common) scenario simply supports that each
          <fo:inline font-style="italic">user</fo:inline> of the driver loads
          it when needed and unloads it when no longer needed.
          The driver is always reference counted and as long as a
          process keeping the driver loaded is still alive, the driver
          is present in the system.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each <fo:inline font-style="italic">user</fo:inline> of the driver
          use <fo:inline font-weight="bold">literally</fo:inline> the same pathname for the driver when
          demanding load, but the
	  <fo:inline font-style="italic">users</fo:inline> are not concerned
          with if the driver is already loaded from the file system or
          if the object code must be loaded from file system.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following two pairs of functions support this scenario:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">load/2 and unload/1</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When using the <fo:inline font-family="monospace">load/unload</fo:inline> interfaces, the
              driver is not unloaded until the
              <fo:inline font-weight="bold">last port</fo:inline> using the driver is closed. Function
              <fo:inline font-family="monospace">unload/1</fo:inline> can return immediately, as the
	      <fo:inline font-style="italic">users</fo:inline>
	      have no interrest in when the unloading occurs. The
              driver is unloaded when no one needs it any longer.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a process having the driver loaded dies, it has
              the same effect as if unloading is done.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When loading, function <fo:inline font-family="monospace">load/2</fo:inline> returns
              <fo:inline font-family="monospace">ok</fo:inline> when any instance of the driver is
              present. Thus, if a driver is waiting to get unloaded
              (because of open ports), it simply changes state to no
              longer need unloading.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">load_driver/2 and unload_driver/1</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These interfaces are intended to be used when it is considered an
              error that ports are open to a driver that no
	      <fo:inline font-style="italic">user</fo:inline>
              has loaded. The ports that are still open when the
              last <fo:inline font-style="italic">user</fo:inline> calls
              <fo:inline font-family="monospace">unload_driver/1</fo:inline> or when the last process having the
              driver loaded dies, are killed with reason
              <fo:inline font-family="monospace">driver_unloaded</fo:inline>.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function names <fo:inline font-family="monospace">load_driver</fo:inline> and
              <fo:inline font-family="monospace">unload_driver</fo:inline> are kept for backward
              compatibility.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Loading and Reloading for Code Replacement</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This scenario can occur if the driver code needs
          replacement during operation of the Erlang
          emulator. Implementing driver code replacement is a little
          more tedious than Beam code replacement, as one driver
          cannot be loaded as both "old" and "new" code. All
	  <fo:inline font-style="italic">users</fo:inline> of a driver must have it
          closed (no open ports) before the old code can be unloaded
          and the new code can be loaded.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The unloading/loading is done as one atomic
          operation, blocking all processes in the system from using
          the driver in question while in progress.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The preferred way to do driver code replacement is to let
          <fo:inline font-weight="bold">one single process</fo:inline> keep track of the driver. When
          the process starts, the driver is loaded. When replacement
          is required, the driver is reloaded. Unload is probably never
          done, or done when the process exits. If more than one
	  <fo:inline font-style="italic">user</fo:inline> has a driver
	  loaded when code replacement is demanded, the replacement cannot
	  occur until the last "other"
	  <fo:inline font-style="italic">user</fo:inline> has
          unloaded the driver.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Demanding reload when a reload is already in progress is
          always an error. Using the high-level functions, it is also
          an error to demand reloading when more than one
	  <fo:inline font-style="italic">user</fo:inline> has the driver loaded.</fo:block>
	 <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To simplify driver replacement, avoid designing your system so
          that more than one
	  <fo:inline font-style="italic">user</fo:inline> has the driver loaded.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The two functions for reloading drivers are to be used
          together with corresponding load functions to support the two
          different behaviors concerning open ports:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">load/2 and reload/2</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This pair of functions is used when reloading is to be
              done after the last open port to the driver is
              closed.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As <fo:inline font-family="monospace">reload/2</fo:inline> waits for the reloading to
              occur, a misbehaving process keeping open ports to
              the driver (or keeping the driver loaded) can cause
              infinite waiting for reload. Time-outs must be provided
              outside of the process demanding the reload or by using
              the low-level interface
	      <fo:inline font-style="italic"><fo:inline font-family="monospace">try_load/3</fo:inline></fo:inline>
	      in combination with driver monitors.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">load_driver/2 and reload_driver/2</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This pair of functions are used when open ports to
              the driver are to be killed with reason
              <fo:inline font-family="monospace">driver_unloaded</fo:inline> to allow for new driver code to
              get loaded.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">However, if another process has the driver loaded,
              calling <fo:inline font-family="monospace">reload_driver</fo:inline> returns error code
              <fo:inline font-family="monospace">pending_process</fo:inline>. As stated earlier,
              the recommended design is to not allow other
	      <fo:inline font-style="italic">users</fo:inline> than the "driver
              reloader" to demand loading of the driver in question.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block></fo:block-container>
    </fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Data Types</fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">driver() = iolist() | atom()</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">path() = string() | atom()</fo:block></fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7127472"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">demonitor(MonitorRef) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">MonitorRef = reference()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Removes a driver monitor in much the same way as 
          <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:demonitor/1</fo:inline></fo:inline>
	  in ERTS
	  does with process monitors. For details about how to create
	  driver monitors, see
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">monitor/2</fo:inline></fo:inline>,
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">try_load/3</fo:inline></fo:inline>, and
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">try_unload/2</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function throws a <fo:inline font-family="monospace">badarg</fo:inline> exception if the
          parameter is not a <fo:inline font-family="monospace">reference()</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7135024"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">format_error(ErrorDesc) -&gt; string()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ErrorDesc = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Takes an <fo:inline font-family="monospace">ErrorDesc</fo:inline> returned by load, unload, or
          reload functions and returns a string that
          describes the error or warning.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Because of peculiarities in the dynamic loading interfaces on
            different platforms, the returned string is only guaranteed
            to describe the correct error <fo:inline font-weight="bold">if format_error/1 is called
	    in the same instance of the Erlang virtual machine as the error
	    appeared in</fo:inline> (meaning the same operating
            system process).</fo:block>
        </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7140000"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">info() -&gt; AllInfoList</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">AllInfoList = [DriverInfo]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">DriverInfo = {DriverName, InfoList}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">DriverName = string()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">InfoList = [InfoItem]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">InfoItem = {Tag :: atom(), Value :: term()}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of tuples <fo:inline font-family="monospace">{DriverName, InfoList}</fo:inline>,
	   where <fo:inline font-family="monospace">InfoList</fo:inline> is the result of calling
	   <fo:inline font-style="italic"><fo:inline font-family="monospace">info/1</fo:inline></fo:inline> for that
          <fo:inline font-family="monospace">DriverName</fo:inline>. Only dynamically linked-in drivers are
          included in the list.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7146080"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">info(Name) -&gt; InfoList</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = <fo:inline font-style="italic">driver()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">InfoList = [InfoItem, ...]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">InfoItem = {Tag :: atom(), Value :: term()}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of tuples <fo:inline font-family="monospace">{Tag, Value}</fo:inline>,
	  where <fo:inline font-family="monospace">Tag</fo:inline> is the information item and
	  <fo:inline font-family="monospace">Value</fo:inline> is the result of calling
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">info/2</fo:inline></fo:inline> with this driver
	  name and this tag. The result is a tuple list containing all information
	  available about a driver.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following tags appears in the list:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">processes</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">driver_options</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">port_count</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">linked_in_driver</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">permanent</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">awaiting_load</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">awaiting_unload</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For a detailed description of each value, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">info/2</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function throws a <fo:inline font-family="monospace">badarg</fo:inline> exception if the driver
          is not present in the system.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7159728"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">info(Name, Tag) -&gt; Value</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = <fo:inline font-style="italic">driver()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Tag = <fo:block/>    processes |<fo:block/>    driver_options |<fo:block/>    port_count |<fo:block/>    linked_in_driver |<fo:block/>    permanent |<fo:block/>    awaiting_load |<fo:block/>    awaiting_unload</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Value = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns specific information about one aspect of a driver.
	  Parameter <fo:inline font-family="monospace">Tag</fo:inline> specifies which aspect
          to get information about. The return <fo:inline font-family="monospace">Value</fo:inline> differs
          between different tags:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">processes</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns all processes containing
	    <fo:inline font-style="italic">users</fo:inline> of the specific drivers
              as a list of tuples <fo:inline font-family="monospace">{pid(),integer() &gt;= 0}</fo:inline>, where
              <fo:inline font-family="monospace">integer()</fo:inline> denotes the number of users in process
              <fo:inline font-family="monospace">pid()</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">driver_options</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of the driver options provided when
              loading, and any options set by the driver
              during initialization. The only valid option
              is <fo:inline font-family="monospace">kill_ports</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">port_count</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the number of ports (an <fo:inline font-family="monospace">integer() &gt;= 0</fo:inline>)
	    using the driver.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">linked_in_driver</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a <fo:inline font-family="monospace">boolean()</fo:inline>, which is <fo:inline font-family="monospace">true</fo:inline> if the driver is a
              statically linked-in one, otherwise <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">permanent</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a <fo:inline font-family="monospace">boolean()</fo:inline>, which is <fo:inline font-family="monospace">true</fo:inline> if the driver has
	      made itself permanent (and is <fo:inline font-weight="bold">not</fo:inline> a statically
              linked-in driver), otherwise <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">awaiting_load</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of all processes having monitors for
              <fo:inline font-family="monospace">loading</fo:inline> active. Each process is returned as
              <fo:inline font-family="monospace">{pid(),integer() &gt;= 0}</fo:inline>, where <fo:inline font-family="monospace">integer()</fo:inline> is the
              number of monitors held by process <fo:inline font-family="monospace">pid()</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">awaiting_unload</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of all processes having monitors for
              <fo:inline font-family="monospace">unloading</fo:inline> active. Each process is returned as
              <fo:inline font-family="monospace">{pid(),integer() &gt;= 0}</fo:inline>, where <fo:inline font-family="monospace">integer()</fo:inline> is the
              number of monitors held by process <fo:inline font-family="monospace">pid()</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If option <fo:inline font-family="monospace">linked_in_driver</fo:inline> or <fo:inline font-family="monospace">permanent</fo:inline>
          returns <fo:inline font-family="monospace">true</fo:inline>, all other options return
          <fo:inline font-family="monospace">linked_in_driver</fo:inline> or <fo:inline font-family="monospace">permanent</fo:inline>, respectively.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function throws a <fo:inline font-family="monospace">badarg</fo:inline> exception if the driver
          is not present in the system or if the tag is not supported.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7188496"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">load(Path, Name) -&gt; ok | {error, ErrorDesc}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Path = <fo:inline font-style="italic">path()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = <fo:inline font-style="italic">driver()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ErrorDesc = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Loads and links the dynamic driver <fo:inline font-family="monospace">Name</fo:inline>.
	  <fo:inline font-family="monospace">Path</fo:inline>
          is a file path to the directory containing the driver.
          <fo:inline font-family="monospace">Name</fo:inline> must be a sharable object/dynamic library. Two
          drivers with different <fo:inline font-family="monospace">Path</fo:inline> parameters cannot be
          loaded under the same name. <fo:inline font-family="monospace">Name</fo:inline> is a string or
          atom containing at least one character.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Name</fo:inline> specified is to correspond to the filename
          of the dynamically loadable object file residing in
          the directory specified as <fo:inline font-family="monospace">Path</fo:inline>, but <fo:inline font-weight="bold">without</fo:inline> the
          extension (that is, <fo:inline font-family="monospace">.so</fo:inline>). The driver name provided in
          the driver initialization routine must correspond with the
          filename, in much the same way as Erlang module names
          correspond to the names of the <fo:inline font-family="monospace">.beam</fo:inline> files.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the driver was previously unloaded, but is still
          present because of open ports to it, a call to
          <fo:inline font-family="monospace">load/2</fo:inline> stops the unloading and keeps the driver
          (as long as <fo:inline font-family="monospace">Path</fo:inline> is the same), and <fo:inline font-family="monospace">ok</fo:inline> is
          returned. If you really want the object code to be
          reloaded, use <fo:inline font-style="italic"><fo:inline font-family="monospace">reload/2</fo:inline></fo:inline>
	  or the low-level interface
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">try_load/3</fo:inline></fo:inline> instead.
	  See also the description of
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">different scenarios</fo:inline></fo:inline> for
          loading/unloading in the introduction.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If more than one process tries to load an already loaded
          driver with the same <fo:inline font-family="monospace">Path</fo:inline>, or if the same process
          tries to load it many times, the function returns
          <fo:inline font-family="monospace">ok</fo:inline>. The emulator keeps track of the
          <fo:inline font-family="monospace">load/2</fo:inline> calls, so that a corresponding number of
          <fo:inline font-family="monospace">unload/2</fo:inline> calls must be done from the same
          process before the driver gets unloaded. It is
          therefore safe for an application to load a driver that is
          shared between processes or applications when needed. It can
          safely be unloaded without causing trouble for other
          parts of the system.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is not allowed to load multiple drivers with
	the same name but with different <fo:inline font-family="monospace">Path</fo:inline> parameters.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Path</fo:inline> is interpreted
            literally, so that all loaders of the same driver must
            specify the same <fo:inline font-weight="bold">literal</fo:inline> <fo:inline font-family="monospace">Path</fo:inline> string,
	    although different paths can point out the same directory
            in the file system (because of use of relative paths and
            links).</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On success, the function returns <fo:inline font-family="monospace">ok</fo:inline>. On
          failure, the return value is <fo:inline font-family="monospace">{error,ErrorDesc}</fo:inline>,
          where <fo:inline font-family="monospace">ErrorDesc</fo:inline> is an opaque term to be
          translated into human readable form by function
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">format_error/1</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more control over the error handling, use the
          <fo:inline font-style="italic"><fo:inline font-family="monospace">try_load/3</fo:inline></fo:inline>
          interface instead.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function throws a <fo:inline font-family="monospace">badarg</fo:inline> exception if the
          parameters are not specified as described here.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7214368"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">load_driver(Path, Name) -&gt; ok | {error, ErrorDesc}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Path = <fo:inline font-style="italic">path()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = <fo:inline font-style="italic">driver()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ErrorDesc = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Works essentially as <fo:inline font-family="monospace">load/2</fo:inline>, but loads the driver
          with other options. All ports using the
          driver are killed with reason <fo:inline font-family="monospace">driver_unloaded</fo:inline>
	  when the driver is to be unloaded.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The number of loads and unloads by different
	  <fo:inline font-style="italic">users</fo:inline> influences the loading
          and unloading of a driver file. The port killing
          therefore only occurs when the <fo:inline font-weight="bold">last</fo:inline>
	  <fo:inline font-style="italic">user</fo:inline> unloads the driver,
	  or when the last process having loaded the driver exits.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This interface (or at least the name of the functions) is
          kept for backward compatibility.
	  Using <fo:inline font-style="italic"><fo:inline font-family="monospace">try_load/3</fo:inline></fo:inline> with
          <fo:inline font-family="monospace">{driver_options,[kill_ports]}</fo:inline> in the option list
          gives the same effect regarding the port killing.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function throws a <fo:inline font-family="monospace">badarg</fo:inline> exception if the
          parameters are not specified as described here.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7223424"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">loaded_drivers() -&gt; {ok, Drivers}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Drivers = [Driver]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Driver = string()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of all the available drivers, both
          (statically) linked-in and dynamically loaded ones.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The driver names are returned as a list of strings rather
          than a list of atoms for historical reasons.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more information about drivers, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">info</fo:inline></fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7228016"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">monitor(Tag, Item) -&gt; MonitorRef</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Tag = driver</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Item = {Name, When}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = <fo:inline font-style="italic">driver()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">When = loaded | unloaded | unloaded_only</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">MonitorRef = reference()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a driver monitor and works in many
          ways as
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:monitor/2</fo:inline></fo:inline>
	  in ERTS,
          does for processes. When a driver changes state, the monitor
          results in a monitor message that is sent to the calling
          process. <fo:inline font-family="monospace">MonitorRef</fo:inline> returned by this function is
          included in the message sent.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As with process monitors, each driver monitor set only
          generates <fo:inline font-weight="bold">one single message</fo:inline>. The monitor is
          "destroyed" after the message is sent, so it is then not
          needed to call
	<fo:inline font-style="italic"><fo:inline font-family="monospace">demonitor/1</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">MonitorRef</fo:inline> can also be used in subsequent calls
          to <fo:inline font-style="italic"><fo:inline font-family="monospace">demonitor/1</fo:inline></fo:inline> to
          remove a monitor.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function accepts the following parameters:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Tag</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The monitor tag is always <fo:inline font-family="monospace">driver</fo:inline>, as this function
              can only be used to create driver monitors. In the future,
              driver monitors will be integrated with process monitors,
              why this parameter has to be specified for consistence.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Item</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parameter <fo:inline font-family="monospace">Item</fo:inline> specifies
	    which driver to monitor (the driver name) and
              which state change to monitor. The parameter
              is a tuple of arity two whose first element is the
              driver name and second element is one of the following:</fo:block>
            <fo:block space-after="0.25em" space-before="0.25em">
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">loaded</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notifies when the driver is reloaded (or loaded if
                  loading is underway). It only makes sense to monitor
                  drivers that are in the process of being loaded or
                  reloaded. A future driver name for loading cannot be
		  monitored. That only results in a
                  <fo:inline font-family="monospace">DOWN</fo:inline> message sent immediately.
                  Monitoring for loading is therefore most useful when
                  triggered by function
		  <fo:inline font-style="italic"><fo:inline font-family="monospace">try_load/3</fo:inline></fo:inline>,
                  where the monitor is created <fo:inline font-weight="bold">because</fo:inline> the
                  driver is in such a pending state.</fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Setting a driver monitor for <fo:inline font-family="monospace">loading</fo:inline>
                  eventually leads to one of the following messages
                  being sent:</fo:block>
                <fo:block space-after="0.25em" space-before="0.25em">
                  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{'UP', reference(), driver, Name, loaded}</fo:inline></fo:block>
                  <fo:block-container><fo:block start-indent="2em">
                    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This message is sent either immediately if the
                      driver is already loaded and no reloading is
                      pending, or when reloading is executed if
                      reloading is pending. </fo:block>
                    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-style="italic">user</fo:inline> is
                      expected to know if reloading is demanded before
                      creating a monitor for loading.</fo:block>
                  </fo:block></fo:block-container>
                  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{'UP', reference(), driver, Name, permanent}</fo:inline></fo:block>
                  <fo:block-container><fo:block start-indent="2em">
                    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This message is sent if reloading was
                      expected, but the (old) driver made itself
                      permanent before reloading. It is also
                      sent if the driver was permanent or statically
                      linked-in when trying to create the monitor.</fo:block>
                  </fo:block></fo:block-container>
                  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{'DOWN', reference(), driver, Name, load_cancelled}</fo:inline></fo:block>
                  <fo:block-container><fo:block start-indent="2em">
                    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This message arrives if reloading was
                      underway, but the requesting
		      <fo:inline font-style="italic">user</fo:inline>
                      cancelled it by dying or calling
                      <fo:inline font-style="italic"><fo:inline font-family="monospace">try_unload/2</fo:inline></fo:inline>
                      (or <fo:inline font-family="monospace">unload/1</fo:inline>/<fo:inline font-family="monospace">unload_driver/1</fo:inline>)
                      again before it was reloaded.</fo:block>
                  </fo:block></fo:block-container>
                  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{'DOWN', reference(), driver, Name, {load_failure, Failure}}</fo:inline></fo:block>
                  <fo:block-container><fo:block start-indent="2em">
                    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This message arrives if reloading was
                      underway but the loading for some reason
                      failed. The <fo:inline font-family="monospace">Failure</fo:inline> term is one of the
                      errors that can be returned from
		      <fo:inline font-style="italic"><fo:inline font-family="monospace">try_load/3</fo:inline></fo:inline>.
		      The error term can be passed to
		      <fo:inline font-style="italic"><fo:inline font-family="monospace">format_error/1</fo:inline></fo:inline>
                      for translation into human readable form. Notice
                      that the translation must be done in the same
                      running Erlang virtual machine as the error
                      was detected in.</fo:block>
                  </fo:block></fo:block-container>
                </fo:block>
              </fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">unloaded</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Monitors when a driver gets unloaded. If one
                  monitors a driver that is not present in the system,
                  one immediately gets notified that the driver got
                  unloaded. There is no guarantee that the driver was
                  ever loaded.</fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A driver monitor for unload eventually results
                  in one of the following messages being sent:</fo:block>
                <fo:block space-after="0.25em" space-before="0.25em">
                  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{'DOWN', reference(), driver, Name, unloaded}</fo:inline></fo:block>
                  <fo:block-container><fo:block start-indent="2em">
                    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The monitored driver instance is now
                      unloaded. As the unload can be a result of a
                      <fo:inline font-family="monospace">reload/2</fo:inline> request, the driver can once
                      again have been loaded when this message
                      arrives.</fo:block>
                  </fo:block></fo:block-container>
                  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{'UP', reference(), driver, Name, unload_cancelled}</fo:inline></fo:block>
                  <fo:block-container><fo:block start-indent="2em">
                    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This message is sent if unloading was
                      expected, but while the driver was waiting for
                      all ports to get closed, a new
		      <fo:inline font-style="italic">user</fo:inline> of the driver
                      appeared, and the unloading was cancelled.</fo:block>
                    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This message appears if <fo:inline font-family="monospace">{ok, pending_driver}</fo:inline>
		      was returned from
		      <fo:inline font-style="italic"><fo:inline font-family="monospace">try_unload/2</fo:inline></fo:inline>
                      for the last <fo:inline font-style="italic">user</fo:inline>
		      of the driver, and then <fo:inline font-family="monospace">{ok, already_loaded}</fo:inline> is returned
                      from a call to
		    <fo:inline font-style="italic"><fo:inline font-family="monospace">try_load/3</fo:inline></fo:inline>.</fo:block>
                    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If one <fo:inline font-weight="bold">really</fo:inline> wants to monitor when the
                      driver gets unloaded, this message distorts
                      the picture, because no unloading was done.
                      Option <fo:inline font-family="monospace">unloaded_only</fo:inline> creates a monitor
                      similar to an <fo:inline font-family="monospace">unloaded</fo:inline> monitor, but
                      never results in this message.</fo:block>
                  </fo:block></fo:block-container>
                  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{'UP', reference(), driver, Name, permanent}</fo:inline></fo:block>
                  <fo:block-container><fo:block start-indent="2em">
                    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This message is sent if unloading was
                      expected, but the driver made itself
                      permanent before unloading. It is also
                      sent if trying to monitor a permanent or
                      statically linked-in driver.</fo:block>
                  </fo:block></fo:block-container>
                </fo:block>
              </fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">unloaded_only</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A monitor created as <fo:inline font-family="monospace">unloaded_only</fo:inline> behaves
                  exactly as one created as <fo:inline font-family="monospace">unloaded</fo:inline>
                  except that the
		  <fo:inline font-family="monospace">{'UP', reference(), driver, Name, unload_cancelled}</fo:inline>
		  message is never sent, but the monitor instead persists until
		  the driver <fo:inline font-weight="bold">really</fo:inline> gets unloaded.</fo:block>
              </fo:block></fo:block-container>
            </fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function throws a <fo:inline font-family="monospace">badarg</fo:inline> exception if the
          parameters are not specified as described here.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7279712"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">reload(Path, Name) -&gt; ok | {error, ErrorDesc}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Path = <fo:inline font-style="italic">path()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = <fo:inline font-style="italic">driver()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ErrorDesc = pending_process | OpaqueError</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">OpaqueError = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Reloads the driver named <fo:inline font-family="monospace">Name</fo:inline> from a possibly
          different <fo:inline font-family="monospace">Path</fo:inline> than previously used. This
          function is used in the code change
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">scenario</fo:inline></fo:inline> described in the
          introduction.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If there are other <fo:inline font-style="italic">users</fo:inline>
          of this driver, the function returns <fo:inline font-family="monospace">{error, pending_process}</fo:inline>,
	  but if there are no other users, the function call hangs until all
	  open ports are closed.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Avoid mixing multiple
	  <fo:inline font-style="italic">users</fo:inline>
          with driver reload requests.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To avoid hanging on open ports, use function
          <fo:inline font-style="italic"><fo:inline font-family="monospace">try_load/3</fo:inline></fo:inline>
          instead.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Name</fo:inline> and <fo:inline font-family="monospace">Path</fo:inline> parameters
	  have exactly the same meaning as when calling the plain function
	<fo:inline font-style="italic"><fo:inline font-family="monospace">load/2</fo:inline></fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On success, the function returns <fo:inline font-family="monospace">ok</fo:inline>. On
          failure, the function returns an opaque error,
          except the <fo:inline font-family="monospace">pending_process</fo:inline> error described
          earlier. The opaque errors are to be translated into human
          readable form by function
	<fo:inline font-style="italic"><fo:inline font-family="monospace">format_error/1</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more control over the error handling,  use the
          <fo:inline font-style="italic"><fo:inline font-family="monospace">try_load/3</fo:inline></fo:inline>
          interface instead.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function throws a <fo:inline font-family="monospace">badarg</fo:inline> exception if the
          parameters are not specified as described here.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7296400"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">reload_driver(Path, Name) -&gt; ok | {error, ErrorDesc}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Path = <fo:inline font-style="italic">path()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = <fo:inline font-style="italic">driver()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ErrorDesc = pending_process | OpaqueError</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">OpaqueError = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Works exactly as <fo:inline font-style="italic"><fo:inline font-family="monospace">reload/2</fo:inline></fo:inline>,
	  but for drivers loaded with the
	<fo:inline font-style="italic"><fo:inline font-family="monospace">load_driver/2</fo:inline></fo:inline> interface.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As this interface implies that ports are killed when
          the last user disappears, the function does not hang waiting for
          ports to get closed.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more details, see
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">scenarios</fo:inline></fo:inline> in this module
          description and the function description for
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">reload/2</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function throws a <fo:inline font-family="monospace">badarg</fo:inline> exception if the
          parameters are not specified as described here.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7304512"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">try_load(Path, Name, OptionList) -&gt;<fo:block/>            {ok, Status} |<fo:block/>            {ok, PendingStatus, Ref} |<fo:block/>            {error, ErrorDesc}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Path = <fo:inline font-style="italic">path()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = <fo:inline font-style="italic">driver()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">OptionList = [Option]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Option = <fo:block/>    {driver_options, DriverOptionList} |<fo:block/>    {monitor, MonitorOption} |<fo:block/>    {reload, ReloadOption}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">DriverOptionList = [DriverOption]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">DriverOption = kill_ports</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">MonitorOption = ReloadOption = pending_driver | pending</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Status = loaded | already_loaded | PendingStatus</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">PendingStatus = pending_driver | pending_process</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Ref = reference()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ErrorDesc = ErrorAtom | OpaqueError</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ErrorAtom = <fo:block/>    linked_in_driver |<fo:block/>    inconsistent |<fo:block/>    permanent |<fo:block/>    not_loaded_by_this_process |<fo:block/>    not_loaded |<fo:block/>    pending_reload |<fo:block/>    pending_process</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">OpaqueError = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Provides more control than the
          <fo:inline font-family="monospace">load/2</fo:inline>/<fo:inline font-family="monospace">reload/2</fo:inline> and
          <fo:inline font-family="monospace">load_driver/2</fo:inline>/<fo:inline font-family="monospace">reload_driver/2</fo:inline> interfaces. It
          never waits for completion of other operations related
          to the driver, but immediately returns the status of the
          driver as one of the following:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{ok, loaded}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The driver was loaded and is immediately usable.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{ok, already_loaded}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The driver was already loaded by another process
              or is in use by a living port, or both. The load by you is
              registered and a corresponding <fo:inline font-family="monospace">try_unload</fo:inline> is
              expected sometime in the future.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{ok, pending_driver}</fo:inline>or <fo:inline font-family="monospace">{ok, pending_driver, reference()}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The load request is registered, but the loading is
              delayed because an earlier instance of the
              driver is still waiting to get unloaded (open
              ports use it). Still, unload is expected when you are
              done with the driver. This return value
              <fo:inline font-weight="bold">mostly</fo:inline> occurs when options
              <fo:inline font-family="monospace">{reload,pending_driver}</fo:inline> or
              <fo:inline font-family="monospace">{reload,pending}</fo:inline> are used, but
              <fo:inline font-weight="bold">can</fo:inline> occur when another
	      <fo:inline font-style="italic">user</fo:inline> is unloading a
	      driver in parallel and driver option <fo:inline font-family="monospace">kill_ports</fo:inline> is set.
	      In other words, this return value always needs
              to be handled.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{ok, pending_process}</fo:inline>or <fo:inline font-family="monospace">{ok, pending_process, reference()}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The load request is registered, but the loading is
              delayed because an earlier instance of the
              driver is still waiting to get unloaded by another
              <fo:inline font-style="italic">user</fo:inline> (not only by a
              port, in which case <fo:inline font-family="monospace">{ok,pending_driver}</fo:inline> would
              have been returned). Still, unload is expected when you
              are done with the driver. This return value
              <fo:inline font-weight="bold">only</fo:inline> occurs when option <fo:inline font-family="monospace">{reload,pending}</fo:inline>
              is used.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the function returns <fo:inline font-family="monospace">{ok, pending_driver}</fo:inline> or
          <fo:inline font-family="monospace">{ok, pending_process}</fo:inline>, one can get information
          about when the driver is <fo:inline font-weight="bold">actually</fo:inline> loaded  by using
	  option <fo:inline font-family="monospace">{monitor, MonitorOption}</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When monitoring is requested, and a corresponding
	<fo:inline font-family="monospace">{ok, pending_driver}</fo:inline> or <fo:inline font-family="monospace">{ok, pending_process}</fo:inline> would
	  be returned, the function instead returns a tuple
	  <fo:inline font-family="monospace">{ok, PendingStatus, reference()}</fo:inline>
	  and the process then gets a monitor message later, when the
	  driver gets loaded. The monitor message to expect is described in
          the function description of
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">monitor/2</fo:inline></fo:inline>.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In case of loading, monitoring can <fo:inline font-weight="bold">not</fo:inline> only get
	    triggered by using option <fo:inline font-family="monospace">{reload, ReloadOption}</fo:inline>,
	    but also in special cases where the load error is transient. Thus,
	    <fo:inline font-family="monospace">{monitor, pending_driver}</fo:inline> is to be used under basically
            <fo:inline font-weight="bold">all</fo:inline> real world circumstances.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function accepts the following parameters:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Path</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file system path to the directory where the driver
              object file is located. The filename of the object file
              (minus extension) must correspond to the driver name
              (used in parameter <fo:inline font-family="monospace">Name</fo:inline>) and the driver must
              identify itself with the same name.
              <fo:inline font-family="monospace">Path</fo:inline> can be provided as an <fo:inline font-weight="bold">iolist()</fo:inline>,
              meaning it can be a list of other <fo:inline font-family="monospace">iolist()</fo:inline>s, characters
              (8-bit integers), or binaries, all to be flattened
              into a sequence of characters.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The (possibly flattened) <fo:inline font-family="monospace">Path</fo:inline> parameter must be
              consistent throughout the system. A driver is to, by
              all <fo:inline font-style="italic">users</fo:inline>, be loaded
              using the same <fo:inline font-weight="bold">literal</fo:inline> <fo:inline font-family="monospace">Path</fo:inline>.
	      The exception is when <fo:inline font-weight="bold">reloading</fo:inline> is requested,
	      in which case <fo:inline font-family="monospace">Path</fo:inline> can be specified
              differently. Notice that all
	      <fo:inline font-style="italic">users</fo:inline> trying to load the
              driver later need to use the
	      <fo:inline font-weight="bold">new</fo:inline> <fo:inline font-family="monospace">Path</fo:inline> if <fo:inline font-family="monospace">Path</fo:inline>
	      is changed using a <fo:inline font-family="monospace">reload</fo:inline> option. This is yet another reason
              to have <fo:inline font-weight="bold">only one loader</fo:inline> of a driver one wants to
              upgrade in a running system.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Name</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This parameter is the name of the driver
	      to be used in subsequent calls to function
	      <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:open_port</fo:inline></fo:inline>
	      in ERTS.
	      The name can be specified as an <fo:inline font-family="monospace">iolist()</fo:inline> or
              an <fo:inline font-family="monospace">atom()</fo:inline>. The name specified when loading is used
              to find the object file (with the help of <fo:inline font-family="monospace">Path</fo:inline>
	      and the system-implied extension suffix, that is, <fo:inline font-family="monospace">.so</fo:inline>).
	      The name by which the driver identifies itself must also be consistent
              with this <fo:inline font-family="monospace">Name</fo:inline> parameter, much as
	      the module name of a Beam file much corresponds to its filename.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">OptionList</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Some options can be specified to control the
              loading operation. The options are specified as a list of
              two-tuples. The tuples have the following values and
              meanings:</fo:block>
            <fo:block space-after="0.25em" space-before="0.25em">
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{driver_options, DriverOptionList}</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is to provide options that changes
                  its general behavior and "sticks" to the driver
                  throughout its lifespan.</fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The driver options for a specified driver name need
                  always to be consistent, <fo:inline font-weight="bold">even when the driver is reloaded</fo:inline>,
		  meaning that they are as much a part of the driver as the name.</fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The only allowed driver option is
                  <fo:inline font-family="monospace">kill_ports</fo:inline>, which means that all ports opened
                  to the driver are killed with exit reason
                  <fo:inline font-family="monospace">driver_unloaded</fo:inline> when no process any longer
                  has the driver loaded. This situation arises either
                  when the last <fo:inline font-style="italic">user</fo:inline> calls
		  <fo:inline font-style="italic"><fo:inline font-family="monospace">try_unload/2</fo:inline></fo:inline>, or
                  when the last process having loaded the driver exits.</fo:block>
              </fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{monitor, MonitorOption}</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-family="monospace">MonitorOption</fo:inline> tells <fo:inline font-family="monospace">try_load/3</fo:inline> to
                  trigger a driver monitor under certain
                  conditions. When the monitor is triggered, the
                  function returns a three-tuple
		  <fo:inline font-family="monospace">{ok, PendingStatus, reference()}</fo:inline>, where
		  <fo:inline font-family="monospace">reference()</fo:inline> is the monitor reference for the driver monitor.</fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Only one <fo:inline font-family="monospace">MonitorOption</fo:inline> can be specified.
                  It is one of the following:</fo:block>
		  <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
		    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
		      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The atom <fo:inline font-family="monospace">pending</fo:inline>, which means
                      that a monitor is to be created whenever a load
                      operation is delayed,</fo:block>
		    </fo:block></fo:list-item-body></fo:list-item>
		    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
		      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The atom <fo:inline font-family="monospace">pending_driver</fo:inline>, in which a monitor
		      is created whenever the operation is delayed because
		      of open ports to an otherwise unused driver.</fo:block>
		      </fo:block></fo:list-item-body></fo:list-item>
		  </fo:list-block>
		<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Option <fo:inline font-family="monospace">pending_driver</fo:inline> is of little use, but
		  is present for completeness, as it is well defined which
		  reload options that can give rise to which delays.
		  However, it can be a good idea to use the same
		  <fo:inline font-family="monospace">MonitorOption</fo:inline> as the
		  <fo:inline font-family="monospace">ReloadOption</fo:inline>, if present.</fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If reloading is not requested, it can still be
                  useful to specify option <fo:inline font-family="monospace">monitor</fo:inline>, as
                  forced unloads (driver option <fo:inline font-family="monospace">kill_ports</fo:inline> or
                  option <fo:inline font-family="monospace">kill_ports</fo:inline> to
		  <fo:inline font-style="italic"><fo:inline font-family="monospace">try_unload/2</fo:inline></fo:inline>)
		  trigger a transient state where driver loading
                  cannot be performed until all closing ports are
                  closed. Thus, as <fo:inline font-family="monospace">try_unload</fo:inline> can, in
                  almost all situations, return <fo:inline font-family="monospace">{ok, pending_driver}</fo:inline>,
		  always specify at least <fo:inline font-family="monospace">{monitor, pending_driver}</fo:inline>
		  in production code (see the monitor discussion earlier).</fo:block>
              </fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{reload, ReloadOption}</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This option is used to
                  <fo:inline font-weight="bold">reload</fo:inline> a driver from disk, most often in a
                  code upgrade scenario. Having a <fo:inline font-family="monospace">reload</fo:inline> option
                  also implies that parameter <fo:inline font-family="monospace">Path</fo:inline> does
                  <fo:inline font-weight="bold">not</fo:inline> need to be consistent with earlier loads of
                  the driver.</fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To reload a driver, the process must have loaded the driver
		  before, that is, there must be an active
		  <fo:inline font-style="italic">user</fo:inline> of the driver
		  in the process.</fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">reload</fo:inline> option can be either of the following:</fo:block>
		 <fo:block space-after="0.25em" space-before="0.25em">
		   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">pending</fo:inline></fo:block>
		   <fo:block-container><fo:block start-indent="2em">
		     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">With the atom <fo:inline font-family="monospace">pending</fo:inline>, reloading is requested
		       for any driver and is effectuated when <fo:inline font-weight="bold">all</fo:inline>
                       ports opened to the driver are closed. The driver
                       replacement in this case takes
                       place regardless if there are still
                       pending <fo:inline font-style="italic">users</fo:inline>
                       having the driver loaded.</fo:block>
                     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The option also triggers port-killing (if driver
                       option <fo:inline font-family="monospace">kill_ports</fo:inline> is used) although
                       there are pending users, making it usable for forced
                       driver replacement, but laying much
                       responsibility on the driver
		       <fo:inline font-style="italic">users</fo:inline>.
		       The pending option is seldom used as one does not want other
		       <fo:inline font-style="italic">users</fo:inline> to have loaded
		       the driver when code change is underway.</fo:block></fo:block></fo:block-container>
		   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">pending_driver</fo:inline></fo:block>
		   <fo:block-container><fo:block start-indent="2em">
		     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This option is more useful. Here, reloading is queued
		        if the driver is <fo:inline font-weight="bold">not</fo:inline> loaded by any other
		        <fo:inline font-style="italic">users</fo:inline>, but the
			driver has opened ports, in which case
			<fo:inline font-family="monospace">{ok, pending_driver}</fo:inline> is returned
			(a <fo:inline font-family="monospace">monitor</fo:inline> option is recommended).</fo:block></fo:block></fo:block-container>
		 </fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the driver is unloaded (not present in the system),
		  error code <fo:inline font-family="monospace">not_loaded</fo:inline> is returned. Option
                  <fo:inline font-family="monospace">reload</fo:inline> is intended for when the user
                  has already loaded the driver in advance.</fo:block>
              </fo:block></fo:block-container>
            </fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function can return numerous errors, some
          can only be returned given a certain combination of options.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Some errors are opaque and can only be interpreted by
          passing them to function
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">format_error/1</fo:inline></fo:inline>,
          but some can be interpreted directly:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{error,linked_in_driver}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The driver with the specified name is an Erlang
              statically linked-in driver, which cannot be manipulated
              with this API.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{error,inconsistent}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The driver is already loaded with other
              <fo:inline font-family="monospace">DriverOptionList</fo:inline> or a different
	    <fo:inline font-weight="bold">literal</fo:inline> <fo:inline font-family="monospace">Path</fo:inline> argument.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This can occur even if a <fo:inline font-family="monospace">reload</fo:inline> option is specified,
              if <fo:inline font-family="monospace">DriverOptionList</fo:inline> differs from the current.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{error, permanent}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The driver has requested itself to be permanent, making
              it behave like an Erlang linked-in driver and can no
              longer be manipulated with this API.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{error, pending_process}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The driver is loaded by other
	    <fo:inline font-style="italic">users</fo:inline> when
	    option <fo:inline font-family="monospace">{reload, pending_driver}</fo:inline> was specified.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{error, pending_reload}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Driver reload is already requested by another
	    <fo:inline font-style="italic">user</fo:inline> when option
	    <fo:inline font-family="monospace">{reload, ReloadOption}</fo:inline> was specified.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{error, not_loaded_by_this_process}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Appears when option <fo:inline font-family="monospace">reload</fo:inline> is specified. The
              driver <fo:inline font-family="monospace">Name</fo:inline> is present in the system, but there
	      is no <fo:inline font-style="italic">user</fo:inline> of it in this
              process.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{error, not_loaded}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Appears when option <fo:inline font-family="monospace">reload</fo:inline> is specified. The
              driver <fo:inline font-family="monospace">Name</fo:inline> is not in the system. Only drivers
              loaded by this process can be reloaded.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All other error codes are to be translated by function
	<fo:inline font-style="italic"><fo:inline font-family="monospace">format_error/1</fo:inline></fo:inline>.
	  Notice that calls to <fo:inline font-family="monospace">format_error</fo:inline> are to be
          performed from the same running instance of the Erlang
          virtual machine as the error is detected in, because of
	  system-dependent behavior concerning error values.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the arguments or options are malformed, the function
          throws a <fo:inline font-family="monospace">badarg</fo:inline> exception.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7416688"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">try_unload(Name, OptionList) -&gt;<fo:block/>              {ok, Status} |<fo:block/>              {ok, PendingStatus, Ref} |<fo:block/>              {error, ErrorAtom}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = <fo:inline font-style="italic">driver()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">OptionList = [Option]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Option = {monitor, MonitorOption} | kill_ports</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">MonitorOption = pending_driver | pending</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Status = unloaded | PendingStatus</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">PendingStatus = pending_driver | pending_process</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Ref = reference()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ErrorAtom = <fo:block/>    linked_in_driver |<fo:block/>    not_loaded |<fo:block/>    not_loaded_by_this_process |<fo:block/>    permanent</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is the low-level function to unload (or decrement
          reference counts of) a driver. It can be used to force port
          killing, in much the same way as the driver option
          <fo:inline font-family="monospace">kill_ports</fo:inline> implicitly does. Also, it can trigger a
          monitor either because other
	  <fo:inline font-style="italic">users</fo:inline> still have the driver
          loaded or because open ports use the driver.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Unloading can be described as the process of telling the
          emulator that this particular part of the code in this
          particular process (that is, this
	  <fo:inline font-style="italic">user</fo:inline>) no longer needs
	  the driver. That can, if there are no other users, trigger
          unloading of the driver, in which case the driver name
          disappears from the system and (if possible) the memory
          occupied by the driver executable code is reclaimed.</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the driver has option <fo:inline font-family="monospace">kill_ports</fo:inline> set, or if
          <fo:inline font-family="monospace">kill_ports</fo:inline> is specified as an option to this
          function, all pending ports using this driver are
          killed when unloading is done by the last
	  <fo:inline font-style="italic">user</fo:inline>. If no port-killing
	  is involved and there are open ports, the unloading
          is delayed until no more open ports use the
          driver. If, in this case, another
	  <fo:inline font-style="italic">user</fo:inline> (or even this user)
	  loads the driver again before the driver is unloaded, the
          unloading never takes place.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To allow the <fo:inline font-style="italic">user</fo:inline> to
          <fo:inline font-weight="bold">request unloading</fo:inline> to wait for <fo:inline font-weight="bold">actual unloading</fo:inline>,
          <fo:inline font-family="monospace">monitor</fo:inline> triggers can be specified in much the same way as
	  when loading. However, as <fo:inline font-style="italic">users</fo:inline>
	  of this function seldom are interested in more than decrementing the
          reference counts, monitoring is seldom needed.</fo:block>
	<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"> If option <fo:inline font-family="monospace">kill_ports</fo:inline> is used, monitor trigging is crucial,
	  as the ports are not guaranteed to be killed until the driver is unloaded.
	  Thus, a monitor must be triggered for at least the <fo:inline font-family="monospace">pending_driver</fo:inline>
	  case.</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The possible monitor messages to expect are the
          same as when using option <fo:inline font-family="monospace">unloaded</fo:inline> to function
          <fo:inline font-style="italic"><fo:inline font-family="monospace">monitor/2</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function returns one of the following statuses upon
          success:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{ok, unloaded}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The driver was immediately unloaded, meaning that the
              driver name is now free to use by other drivers and, if
              the underlying OS permits it, the memory occupied by the
              driver object code is now reclaimed.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The driver can only be unloaded when there are no open
              ports using it and no more
	      <fo:inline font-style="italic">users</fo:inline> require it to be
              loaded.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{ok, pending_driver}</fo:inline>or
	       <fo:inline font-family="monospace">{ok, pending_driver, reference()}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Indicates that this call removed the last
	      <fo:inline font-style="italic">user</fo:inline> from the
              driver, but there are still open ports using it.
              When all ports are closed and no new
	      <fo:inline font-style="italic">users</fo:inline> have arrived,
	      the driver is reloaded and the name and memory
              reclaimed.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This return value is valid even if option <fo:inline font-family="monospace">kill_ports</fo:inline>
	      was used, as killing ports can be a process that does not
	      complete immediately. However, the condition is in that case
	      transient. Monitors are always useful to detect when the driver
	      is really unloaded.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{ok, pending_process}</fo:inline>or
	       <fo:inline font-family="monospace">{ok, pending_process, reference()}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The unload request is registered, but
              other <fo:inline font-style="italic">users</fo:inline> still hold
              the driver. Notice that the term <fo:inline font-family="monospace">pending_process</fo:inline>
              can refer to the running process; there can be more
              than one <fo:inline font-style="italic">user</fo:inline> in the
              same process.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is a normal, healthy, return value if the call was
              just placed to inform the emulator that you have no
              further use of the driver. It is the most
              common return value in the most common
	      <fo:inline font-style="italic"><fo:inline font-family="monospace">scenario</fo:inline></fo:inline>
              described in the introduction.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function accepts the following parameters:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Name</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Name</fo:inline> is the name of the
	      driver to be unloaded. The name can be specified as an
              <fo:inline font-family="monospace">iolist()</fo:inline> or as an <fo:inline font-family="monospace">atom()</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">OptionList</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Argument <fo:inline font-family="monospace">OptionList</fo:inline> can be used to specify
              certain behavior regarding ports and triggering
              monitors under certain conditions:</fo:block>
            <fo:block space-after="0.25em" space-before="0.25em">
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">kill_ports</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Forces killing of all ports opened using this driver,
                  with exit reason <fo:inline font-family="monospace">driver_unloaded</fo:inline>, if you are
                  the <fo:inline font-weight="bold">last</fo:inline> <fo:inline font-style="italic">user</fo:inline>
		  of the driver.</fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If other <fo:inline font-style="italic">users</fo:inline>
		  have the driver loaded, this option has no effect.</fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To get the consistent behavior of killing ports
                  when the last <fo:inline font-style="italic">user</fo:inline>
                  unloads, use driver option
                  <fo:inline font-family="monospace">kill_ports</fo:inline> when loading the driver instead.</fo:block>
              </fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{monitor, MonitorOption}</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a driver monitor if the condition
                  specified in <fo:inline font-family="monospace">MonitorOption</fo:inline> is true. The valid
                  options are:</fo:block>
                <fo:block space-after="0.25em" space-before="0.25em">
                  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">pending_driver</fo:inline></fo:block>
                  <fo:block-container><fo:block start-indent="2em">
                    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a driver monitor if the return value is to
                      be <fo:inline font-family="monospace">{ok, pending_driver}</fo:inline>.</fo:block>
                  </fo:block></fo:block-container>
                  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">pending</fo:inline></fo:block>
                  <fo:block-container><fo:block start-indent="2em">
                    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a monitor if the return value is
                      <fo:inline font-family="monospace">{ok, pending_driver}</fo:inline> or <fo:inline font-family="monospace">{ok, pending_process}</fo:inline>.</fo:block>
                  </fo:block></fo:block-container>
                </fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">pending_driver</fo:inline> <fo:inline font-family="monospace">MonitorOption</fo:inline> is
		  by far the most useful. It must be used to ensure that the
                  driver really is unloaded and the ports closed
                  whenever option <fo:inline font-family="monospace">kill_ports</fo:inline> is used, or the
                  driver can have been loaded with driver option
		  <fo:inline font-family="monospace">kill_ports</fo:inline>.</fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Using the monitor triggers in the call to
                  <fo:inline font-family="monospace">try_unload</fo:inline> ensures that the monitor is
                  added before the unloading is executed, meaning
                  that the monitor is always properly triggered,
                  which is not the case if <fo:inline font-family="monospace">monitor/2</fo:inline> is called
		  separately.</fo:block>
              </fo:block></fo:block-container>
            </fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function can return the following error conditions,
          all well specified (no opaque values):</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{error, linked_in_driver}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">You were trying to unload an Erlang statically linked-in
              driver, which cannot be manipulated with this interface
              (and cannot be unloaded at all).</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{error, not_loaded}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The driver <fo:inline font-family="monospace">Name</fo:inline> is not present in the system.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{error, not_loaded_by_this_process}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The driver <fo:inline font-family="monospace">Name</fo:inline> is present in the system, but
              there is no <fo:inline font-style="italic">user</fo:inline> of
              it in this process. </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As a special case, drivers can be unloaded from
              processes that have done no corresponding call to
              <fo:inline font-family="monospace">try_load/3</fo:inline> if, and only if, there are
	      <fo:inline font-weight="bold">no users of the driver at all</fo:inline>, which can occur if the
              process containing the last user dies.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{error, permanent}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The driver has made itself permanent, in which case it
              can no longer be manipulated by this interface (much
              like a statically linked-in driver).</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function throws a <fo:inline font-family="monospace">badarg</fo:inline> exception if the
          parameters are not specified as described here.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7482736"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">unload(Name) -&gt; ok | {error, ErrorDesc}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = <fo:inline font-style="italic">driver()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ErrorDesc = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Unloads, or at least dereferences the driver named
          <fo:inline font-family="monospace">Name</fo:inline>. If the caller is the last
	  <fo:inline font-style="italic">user</fo:inline> of the driver,
	  and no more open ports use the driver, the driver
          gets unloaded. Otherwise, unloading
          is delayed until all ports are closed and no
          <fo:inline font-style="italic">users</fo:inline> remain.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If there are other <fo:inline font-style="italic">users</fo:inline>
	  of the driver, the reference counts of the driver is merely decreased,
	  so that the caller is no longer considered a
	  <fo:inline font-style="italic">user</fo:inline> of the driver. For use
          scenarios, see the <fo:inline font-style="italic"><fo:inline font-family="monospace">description</fo:inline></fo:inline>
	  in the beginning of this module.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">ErrorDesc</fo:inline> returned is an opaque value to be
          passed further on to function
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">format_error/1</fo:inline></fo:inline>.
          For more control over the operation, use the
          <fo:inline font-style="italic"><fo:inline font-family="monospace">try_unload/2</fo:inline></fo:inline>
          interface.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function throws a <fo:inline font-family="monospace">badarg</fo:inline> exception if the
          parameters are not specified as described here.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7494288"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">unload_driver(Name) -&gt; ok | {error, ErrorDesc}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = <fo:inline font-style="italic">driver()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ErrorDesc = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Unloads, or at least dereferences the driver named
          <fo:inline font-family="monospace">Name</fo:inline>. If the caller is the last
	  <fo:inline font-style="italic">user</fo:inline> of the driver, all
          remaining open ports using the driver are killed with
          reason <fo:inline font-family="monospace">driver_unloaded</fo:inline> and the driver
          eventually gets unloaded.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If there are other <fo:inline font-style="italic">users</fo:inline>
          of the driver, the reference counts of the driver is merely
          decreased, so that the caller is no longer considered a
          <fo:inline font-style="italic">user</fo:inline>. For
          use scenarios, see the
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">description</fo:inline></fo:inline> in the
	  beginning of this module.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">ErrorDesc</fo:inline> returned is an opaque value to be
          passed further on to function
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">format_error/1</fo:inline></fo:inline>.
          For more control over the operation, use the
          <fo:inline font-style="italic"><fo:inline font-family="monospace">try_unload/2</fo:inline></fo:inline>
          interface.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function throws a <fo:inline font-family="monospace">badarg</fo:inline> exception if the
          parameters are not specified as described here.</fo:block>
      </fo:block>
  
  <fo:block id="idp7505696" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">See Also</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic"><fo:inline font-family="monospace">erts:erl_driver(4)</fo:inline></fo:inline>,
       <fo:inline font-style="italic"><fo:inline font-family="monospace">erts:driver_entry(4)</fo:inline></fo:inline></fo:block>
  
<fo:block page-break-before="always" id="idp7514784" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">erl_prim_loader</fo:marker>erl_prim_loader</fo:block>Erlang module</fo:block>
  <fo:block/>
  erl_prim_loader
  <fo:block/>
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">

  The module erl_prim_loader is moved to the runtime system
  application.  Please see <fo:inline font-style="italic">erl_prim_loader(3)</fo:inline> in the
  ERTS reference manual instead.

  </fo:block>
<fo:block page-break-before="always" id="idp7523728" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">erlang</fo:marker>erlang</fo:block>Erlang module</fo:block>
  <fo:block/>
  erlang
  <fo:block/>
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">

  The module erlang is moved to the runtime system
  application.  Please see <fo:inline font-style="italic">erlang(3)</fo:inline> in the
  ERTS reference manual instead.

  </fo:block>
<fo:block page-break-before="always" id="idp7532160" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">error_handler</fo:marker>error_handler</fo:block>Erlang module</fo:block>
  <fo:block/>
  error_handler
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module defines what happens when certain types
      of errors occur.</fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7534608"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">raise_undef_exception(Module, Function, Args) -&gt; no_return()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = Function = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Args = list()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        A (possibly empty) list of arguments <fo:inline font-family="monospace">Arg1,..,ArgN</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item></fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Raises an <fo:inline font-family="monospace">undef</fo:inline> exception with a stacktrace, indicating
	that <fo:inline font-family="monospace">Module:Function/N</fo:inline> is
	undefined.
	</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7540112"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">undefined_function(Module, Function, Args) -&gt; any()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = Function = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Args = list()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        A (possibly empty) list of arguments <fo:inline font-family="monospace">Arg1,..,ArgN</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is called by the runtime system if a call is made to
          <fo:inline font-family="monospace">Module:Function(Arg1,.., ArgN)</fo:inline> and
          <fo:inline font-family="monospace">Module:Function/N</fo:inline> is undefined.
	  Notice that this function is evaluated inside the process
          making the original call.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function first attempts to autoload
	  <fo:inline font-family="monospace">Module</fo:inline>. If that is not possible,
	  an <fo:inline font-family="monospace">undef</fo:inline> exception is raised.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If it is possible to load <fo:inline font-family="monospace">Module</fo:inline>
	  and function <fo:inline font-family="monospace">Function/N</fo:inline> is exported,
	  it is called.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Otherwise, if function <fo:inline font-family="monospace">'$handle_undefined_function'/2</fo:inline>
	  is exported, it is called as
          <fo:inline font-family="monospace">'$handle_undefined_function'(</fo:inline>Function,
	  Args).
	</fo:block>
	<fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defining <fo:inline font-family="monospace">'$handle_undefined_function'/2</fo:inline> in
	  ordinary application code is highly discouraged. It is very
	  easy to make subtle errors that can take a long time to
	  debug. Furthermore, none of the tools for static code
	  analysis (such as Dialyzer and Xref) supports the use of
	  <fo:inline font-family="monospace">'$handle_undefined_function'/2</fo:inline> and no such support
	  will be added. Only use this function after having carefully
	  considered other, less dangerous, solutions. One example of
	  potential legitimate use is creating stubs for other
	  sub-systems during testing and debugging.
	  </fo:block>
	</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Otherwise an <fo:inline font-family="monospace">undef</fo:inline> exception is raised.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7555136"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">undefined_lambda(Module, Fun, Args) -&gt; term()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Fun = function()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Args = list()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        A (possibly empty) list of arguments <fo:inline font-family="monospace">Arg1,..,ArgN</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is evaluated if a call is made to
          <fo:inline font-family="monospace">Fun(Arg1,.., ArgN)</fo:inline> when the module defining
	  the fun is not loaded. The function is evaluated inside the process
          making the original call.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Module</fo:inline> is interpreted, the interpreter is invoked
          and the return value of the interpreted
          <fo:inline font-family="monospace">Fun(Arg1,.., ArgN)</fo:inline> call is returned.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Otherwise, it returns, if possible, the value of
          <fo:inline font-family="monospace">apply(Fun, Args)</fo:inline> after an attempt
	  is made to autoload <fo:inline font-family="monospace">Module</fo:inline>. If this is not possible,
	  the call fails with exit reason <fo:inline font-family="monospace">undef</fo:inline>.</fo:block>
      </fo:block>
  

  <fo:block id="idp7564848" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Notes</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The code in <fo:inline font-family="monospace">error_handler</fo:inline> is complex. Do not
      change it without fully understanding the interaction between
      the error handler, the <fo:inline font-family="monospace">init</fo:inline> process of the code server,
      and the I/O mechanism of the code.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Code changes that seem small can cause a deadlock,
      as unforeseen consequences can occur. The use of <fo:inline font-family="monospace">input</fo:inline> is
      dangerous in this type of code.</fo:block>
  
<fo:block page-break-before="always" id="idp7573936" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">error_logger</fo:marker>error_logger</fo:block>Erlang module</fo:block>
  <fo:block/>
  error_logger
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Erlang <fo:inline font-weight="bold">error logger</fo:inline> is an event manager (see
      <fo:inline font-style="italic">OTP Design Principles</fo:inline> and
      <fo:inline font-style="italic"><fo:inline font-family="monospace">gen_event(3)</fo:inline></fo:inline>),
      registered as <fo:inline font-family="monospace">error_logger</fo:inline>. Errors, warnings, and info events
      are sent to the error logger from the Erlang runtime system and
      the different Erlang/OTP applications. The events are, by default,
      logged to the terminal. Notice that an event from a process <fo:inline font-family="monospace">P</fo:inline> is
      logged at the node of the group leader of <fo:inline font-family="monospace">P</fo:inline>. This means
      that log output is directed to the node from which a process was
      created, which not necessarily is the same node as where it is
      executing.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Initially, <fo:inline font-family="monospace">error_logger</fo:inline> has only a primitive event
      handler, which buffers and prints the raw event messages. During
      system startup, the Kernel application replaces this with a
      <fo:inline font-weight="bold">standard event handler</fo:inline>, by default one that writes
      nicely formatted output to the terminal. Kernel can also be
      configured so that events are logged to a file instead, or not logged at all,
      see <fo:inline font-style="italic"><fo:inline font-family="monospace">kernel(6)</fo:inline></fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Also the SASL application, if started, adds its own event
      handler, which by default writes supervisor, crash, and progress
      reports to the terminal. See
      <fo:inline font-style="italic"><fo:inline font-family="monospace">sasl(6)</fo:inline></fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is recommended that user-defined applications report
      errors through the error logger to get uniform reports.
      User-defined event handlers can be added to handle application-specific
      events, see
      <fo:inline font-style="italic"><fo:inline font-family="monospace">add_report_handler/1,2</fo:inline></fo:inline>.
      Also, a useful event handler is provided in STDLIB for multi-file
      logging of events, see
      <fo:inline font-style="italic"><fo:inline font-family="monospace">log_mf_h(3)</fo:inline></fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Warning events were introduced in Erlang/OTP R9C and are enabled
      by default as from Erlang/OTP 18.0. To retain backwards compatibility
      with existing user-defined event handlers, the warning events can be
      tagged as <fo:inline font-family="monospace">errors</fo:inline> or <fo:inline font-family="monospace">info</fo:inline> using command-line flag
      <fo:inline font-family="monospace">+W &lt;e | i | w&gt;</fo:inline>, thus showing up as
      <fo:inline font-family="monospace">ERROR REPORT</fo:inline> or <fo:inline font-family="monospace">INFO REPORT</fo:inline> in the logs.</fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Data Types</fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">report() = <fo:block/>    [{Tag :: term(), Data :: term()} | term()] | string() | term()</fo:block></fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7590944"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">add_report_handler(Handler) -&gt; any()</fo:block></fo:block><fo:block id="idp7591776"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">add_report_handler(Handler, Args) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Handler = module()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Args = <fo:inline font-style="italic">gen_event:handler_args()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Result = <fo:inline font-style="italic">gen_event:add_handler_ret()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Adds a new event handler to the error logger. The event
          handler must be implemented as a <fo:inline font-family="monospace">gen_event</fo:inline> callback
          module, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">gen_event(3)</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Handler</fo:inline> is typically the name of the callback module
          and <fo:inline font-family="monospace">Args</fo:inline> is an optional term (defaults to []) passed
          to the initialization callback function <fo:inline font-family="monospace">Handler:init/1</fo:inline>.
          The function returns <fo:inline font-family="monospace">ok</fo:inline> if successful.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The event handler must be able to handle the events in this module, see
          section <fo:inline font-style="italic">Events</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7599856"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">delete_report_handler(Handler) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Handler = module()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Result = <fo:inline font-style="italic">gen_event:del_handler_ret()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Deletes an event handler from the error logger by calling
          <fo:inline font-family="monospace">gen_event:delete_handler(error_logger, Handler, [])</fo:inline>,
          see <fo:inline font-style="italic"><fo:inline font-family="monospace">gen_event(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7604320"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">error_msg(Format) -&gt; ok</fo:block></fo:block><fo:block id="idp7605152"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">error_msg(Format, Data) -&gt; ok</fo:block></fo:block><fo:block id="idp7605984"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">format(Format, Data) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Format = string()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Data = list()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends a standard error event to the error logger.
          The <fo:inline font-family="monospace">Format</fo:inline> and <fo:inline font-family="monospace">Data</fo:inline> arguments
	  are the same as the arguments of
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">io:format/2</fo:inline></fo:inline>
	  in STDLIB.
	  The event is handled by the standard event handler.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">error_logger:error_msg("An error occurred in ~p~n", [a_module]).</fo:inline>

=ERROR REPORT==== 11-Aug-2005::14:03:19 ===
An error occurred in a_module
ok</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If called with bad arguments, this function can crash
            the standard event handler, meaning no further events are
            logged. When in doubt, use
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">error_report/1</fo:inline></fo:inline>
	  instead.</fo:block>
        </fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the Unicode translation modifier (<fo:inline font-family="monospace">t</fo:inline>) is used in
            the format string, all error handlers must ensure that the
            formatted output is correctly encoded for the I/O
            device.</fo:block>
        </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7615744"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">error_report(Report) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Report = <fo:inline font-style="italic">report()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends a standard error report event to the error logger.
          The event is handled by the standard event handler.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
2&gt; <fo:inline font-weight="bold">error_logger:error_report([{tag1,data1},a_term,{tag2,data}]).</fo:inline>

=ERROR REPORT==== 11-Aug-2005::13:45:41 ===
    tag1: data1
    a_term
    tag2: data
ok
3&gt; <fo:inline font-weight="bold">error_logger:error_report("Serious error in my module").</fo:inline>

=ERROR REPORT==== 11-Aug-2005::13:45:49 ===
Serious error in my module
ok</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7620656"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">error_report(Type, Report) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Type = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Report = <fo:inline font-style="italic">report()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends a user-defined error report event to the error logger.
          An event handler to handle the event is supposed to have been
          added. The event is ignored by the standard event handler.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is recommended that <fo:inline font-family="monospace">Report</fo:inline> follows the same
          structure as for
	<fo:inline font-style="italic"><fo:inline font-family="monospace">error_report/1</fo:inline></fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7625424"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_format_depth() -&gt; unlimited | integer() &gt;= 1</fo:block></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">max(10, Depth)</fo:inline>, where <fo:inline font-family="monospace">Depth</fo:inline> is the
	value of
	<fo:inline font-style="italic">
	error_logger_format_depth</fo:inline>
	in the Kernel application, if Depth is an integer. Otherwise,
	<fo:inline font-family="monospace">unlimited</fo:inline> is returned.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7630720"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">info_msg(Format) -&gt; ok</fo:block></fo:block><fo:block id="idp7631552"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">info_msg(Format, Data) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Format = string()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Data = list()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends a standard information event to the error logger.
          The <fo:inline font-family="monospace">Format</fo:inline> and <fo:inline font-family="monospace">Data</fo:inline> arguments
	  are the same as the arguments of
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">io:format/2</fo:inline></fo:inline>
	  in STDLIB. The event is handled by the standard event handler.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">error_logger:info_msg("Something happened in ~p~n", [a_module]).</fo:inline>

=INFO REPORT==== 11-Aug-2005::14:06:15 ===
Something happened in a_module
ok</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If called with bad arguments, this function can crash
            the standard event handler, meaning no further events are
            logged. When in doubt, use <fo:inline font-family="monospace">info_report/1</fo:inline> instead.</fo:block>
        </fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the Unicode translation modifier (<fo:inline font-family="monospace">t</fo:inline>) is used in
            the format string, all error handlers must ensure that the
            formatted output is correctly encoded for the I/O
            device.</fo:block>
        </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7640912"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">info_report(Report) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Report = <fo:inline font-style="italic">report()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends a standard information report event to the error
          logger. The event is handled by the standard event handler.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
2&gt; <fo:inline font-weight="bold">error_logger:info_report([{tag1,data1},a_term,{tag2,data}]).</fo:inline>

=INFO REPORT==== 11-Aug-2005::13:55:09 ===
    tag1: data1
    a_term
    tag2: data
ok
3&gt; <fo:inline font-weight="bold">error_logger:info_report("Something strange happened").</fo:inline>

=INFO REPORT==== 11-Aug-2005::13:55:36 ===
Something strange happened
ok</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7645840"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">info_report(Type, Report) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Type = any()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Report = <fo:inline font-style="italic">report()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends a user-defined information report event to the error
          logger. An event handler to handle the event is supposed to
          have been added. The event is ignored by the standard event
          handler.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is recommended that <fo:inline font-family="monospace">Report</fo:inline> follows the same
          structure as for
	<fo:inline font-style="italic"><fo:inline font-family="monospace">info_report/1</fo:inline></fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7650624"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">logfile(Request :: {open, Filename}) -&gt; ok | {error, OpenReason}</fo:block></fo:block><fo:block id="idp7651728"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">logfile(Request :: close) -&gt; ok | {error, CloseReason}</fo:block></fo:block><fo:block id="idp7652832"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">logfile(Request :: filename) -&gt; Filename | {error, FilenameReason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filename = <fo:inline font-style="italic">file:name()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">OpenReason = allready_have_logfile | <fo:inline font-style="italic">open_error()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">CloseReason = module_not_found</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">FilenameReason = no_log_file</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">open_error() = <fo:inline font-style="italic">file:posix()</fo:inline> | badarg | system_limit</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Enables or disables printout of standard events to a file.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is done by adding or deleting the standard event handler
          for output to file. Thus, calling this function overrides
          the value of the Kernel <fo:inline font-family="monospace">error_logger</fo:inline> configuration
          parameter.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Enabling file logging can be used together with calling
          <fo:inline font-family="monospace">tty(false)</fo:inline>, to have a silent system where
          all standard events are logged to a file only.
          Only one log file can be active at a time.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Request</fo:inline> is one of the following:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{open, Filename}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Opens log file <fo:inline font-family="monospace">Filename</fo:inline>. Returns <fo:inline font-family="monospace">ok</fo:inline> if
              successful, or <fo:inline font-family="monospace">{error, allready_have_logfile}</fo:inline> if
              logging to file is already enabled, or an error tuple if
              another error occurred (for example, if <fo:inline font-family="monospace">Filename</fo:inline>
              cannot be opened). The file is opened with encoding UTF-8.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">close</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Closes the current log file. Returns <fo:inline font-family="monospace">ok</fo:inline>, or
              <fo:inline font-family="monospace">{error, module_not_found}</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">filename</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the name of the log file <fo:inline font-family="monospace">Filename</fo:inline>, or
              <fo:inline font-family="monospace">{error, no_log_file}</fo:inline> if logging to file is not
              enabled.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7671872"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">tty(Flag) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Flag = boolean()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Enables (<fo:inline font-family="monospace">Flag == true</fo:inline>) or disables
          (<fo:inline font-family="monospace">Flag == false</fo:inline>) printout of standard events
	  to the terminal.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is done by adding or deleting the standard event handler
          for output to the terminal. Thus, calling this function overrides
          the value of the Kernel <fo:inline font-family="monospace">error_logger</fo:inline> configuration parameter.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7677120"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">warning_map() -&gt; Tag</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Tag = error | warning | info</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the current mapping for warning events. Events sent
          using <fo:inline font-family="monospace">warning_msg/1,2</fo:inline> or <fo:inline font-family="monospace">warning_report/1,2</fo:inline>
          are tagged as errors, warnings (default), or info, depending
          on the value of command-line flag <fo:inline font-family="monospace">+W</fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
os$ <fo:inline font-weight="bold">erl</fo:inline>
Erlang (BEAM) emulator version 5.4.8 [hipe] [threads:0] [kernel-poll]

Eshell V5.4.8  (abort with ^G)
1&gt; <fo:inline font-weight="bold">error_logger:warning_map().</fo:inline>
warning
2&gt; <fo:inline font-weight="bold">error_logger:warning_msg("Warnings tagged as: ~p~n", [warning]).</fo:inline>

=WARNING REPORT==== 11-Aug-2005::15:31:55 ===
Warnings tagged as: warning
ok
3&gt;
User switch command
 --&gt; q
os$ <fo:inline font-weight="bold">erl +W e</fo:inline>
Erlang (BEAM) emulator version 5.4.8 [hipe] [threads:0] [kernel-poll]

Eshell V5.4.8  (abort with ^G)
1&gt; <fo:inline font-weight="bold">error_logger:warning_map().</fo:inline>
error
2&gt; <fo:inline font-weight="bold">error_logger:warning_msg("Warnings tagged as: ~p~n", [error]).</fo:inline>

=ERROR REPORT==== 11-Aug-2005::15:31:23 ===
Warnings tagged as: error
ok</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7685472"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">warning_msg(Format) -&gt; ok</fo:block></fo:block><fo:block id="idp7686304"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">warning_msg(Format, Data) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Format = string()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Data = list()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends a standard warning event to the error logger.
          The <fo:inline font-family="monospace">Format</fo:inline> and <fo:inline font-family="monospace">Data</fo:inline> arguments
	  are the same as the arguments of
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">io:format/2</fo:inline></fo:inline>
	  in STDLIB.
	  The event is handled by the standard event handler. It is tagged
	  as an error, warning, or info, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">warning_map/0</fo:inline></fo:inline>.</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If called with bad arguments, this function can crash
            the standard event handler, meaning no further events are
            logged. When in doubt, use <fo:inline font-family="monospace">warning_report/1</fo:inline> instead.</fo:block>
        </fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the Unicode translation modifier (<fo:inline font-family="monospace">t</fo:inline>) is used in
            the format string, all error handlers must ensure that the
            formatted output is correctly encoded for the I/O
            device.</fo:block>
        </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7694992"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">warning_report(Report) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Report = <fo:inline font-style="italic">report()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends a standard warning report event to the error logger.
          The event is handled by the standard event handler. It is
          tagged as an error, warning, or info, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">warning_map/0</fo:inline></fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7698688"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">warning_report(Type, Report) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Type = any()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Report = <fo:inline font-style="italic">report()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends a user-defined warning report event to the error
          logger. An event handler to handle the event is supposed to
          have been added. The event is ignored by the standard event
          handler. It is tagged as an error, warning, or info,
          depending on the value of
          <fo:inline font-style="italic"><fo:inline font-family="monospace">warning_map/0</fo:inline></fo:inline>.</fo:block>
      </fo:block>
  

  <fo:block id="idp7703216" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Events</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All event handlers added to the error logger must handle
      the following events. <fo:inline font-family="monospace">Gleader</fo:inline> is the group leader pid of
      the process that sent the event, and <fo:inline font-family="monospace">Pid</fo:inline> is the process
      that sent the event.</fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{error, Gleader, {Pid, Format, Data}}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Generated when <fo:inline font-family="monospace">error_msg/1,2</fo:inline> or <fo:inline font-family="monospace">format</fo:inline> is
          called.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{error_report, Gleader, {Pid, std_error, Report}}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Generated when <fo:inline font-family="monospace">error_report/1</fo:inline> is called.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{error_report, Gleader, {Pid, Type, Report}}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Generated when <fo:inline font-family="monospace">error_report/2</fo:inline> is called.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{warning_msg, Gleader, {Pid, Format, Data}}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Generated when <fo:inline font-family="monospace">warning_msg/1,2</fo:inline> is called
          if warnings are set to be tagged as warnings.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{warning_report, Gleader, {Pid, std_warning, Report}}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Generated when <fo:inline font-family="monospace">warning_report/1</fo:inline> is called
          if warnings are set to be tagged as warnings.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{warning_report, Gleader, {Pid, Type, Report}}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Generated when <fo:inline font-family="monospace">warning_report/2</fo:inline> is called
          if warnings are set to be tagged as warnings.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{info_msg, Gleader, {Pid, Format, Data}}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Generated when <fo:inline font-family="monospace">info_msg/1,2</fo:inline> is called.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{info_report, Gleader, {Pid, std_info, Report}}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Generated when <fo:inline font-family="monospace">info_report/1</fo:inline> is called.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{info_report, Gleader, {Pid, Type, Report}}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Generated when <fo:inline font-family="monospace">info_report/2</fo:inline> is called.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that some system-internal events can also be
      received. Therefore a catch-all clause last in the definition of
      the event handler callback function <fo:inline font-family="monospace">Module:handle_event/2</fo:inline>
      is necessary. This also applies for
      <fo:inline font-family="monospace">Module:handle_info/2</fo:inline>, as the event handler must also take care of
      some system-internal messages.</fo:block>
  
  <fo:block id="idp7725776" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">See Also</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic"><fo:inline font-family="monospace">gen_event(3)</fo:inline></fo:inline>,
       <fo:inline font-style="italic"><fo:inline font-family="monospace">log_mf_h(3)</fo:inline></fo:inline>
       <fo:inline font-style="italic"><fo:inline font-family="monospace">kernel(6)</fo:inline></fo:inline>
       <fo:inline font-style="italic"><fo:inline font-family="monospace">sasl(6)</fo:inline></fo:inline></fo:block>
  
<fo:block page-break-before="always" id="idp7735872" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">file</fo:marker>file</fo:block>Erlang module</fo:block>
  <fo:block/>
  file
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module provides an interface to the file system.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On operating systems with thread support,
      file operations can be performed in threads of their own, allowing
      other Erlang processes to continue executing in parallel with
      the file operations. See command-line flag
      <fo:inline font-family="monospace">+A</fo:inline> in <fo:inline font-style="italic"><fo:inline font-family="monospace">erl(1)</fo:inline></fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Regarding filename encoding, the Erlang VM can operate in
    two modes. The current mode can be queried using function
    <fo:inline font-style="italic"><fo:inline font-family="monospace">native_name_encoding/0</fo:inline></fo:inline>.
    It returns <fo:inline font-family="monospace">latin1</fo:inline> or <fo:inline font-family="monospace">utf8</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In <fo:inline font-family="monospace">latin1</fo:inline> mode, the Erlang VM does not change the
    encoding of filenames. In <fo:inline font-family="monospace">utf8</fo:inline> mode, filenames can
    contain Unicode characters greater than 255 and the VM
    converts filenames back and forth to the native filename encoding
    (usually UTF-8, but UTF-16 on Windows).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default mode depends on the operating system. Windows and
    MacOS X enforce consistent filename encoding and therefore the
    VM uses <fo:inline font-family="monospace">utf8</fo:inline> mode.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On operating systems with transparent naming (for example, all Unix
    systems except MacOS X), default is <fo:inline font-family="monospace">utf8</fo:inline> if the
    terminal supports UTF-8, otherwise <fo:inline font-family="monospace">latin1</fo:inline>. The default can
    be overridden using <fo:inline font-family="monospace">+fnl</fo:inline> (to force <fo:inline font-family="monospace">latin1</fo:inline> mode)
    or <fo:inline font-family="monospace">+fnu</fo:inline> (to force <fo:inline font-family="monospace">utf8</fo:inline> mode) when starting
    <fo:inline font-style="italic"><fo:inline font-family="monospace">erts:erl</fo:inline></fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On operating systems with transparent naming, files can be
    inconsistently named, for example, some files are encoded in UTF-8 while
    others are encoded in ISO Latin-1. The concept of <fo:inline font-weight="bold">raw filenames</fo:inline> is
    introduced to handle file systems with inconsistent naming when running in
    <fo:inline font-family="monospace">utf8</fo:inline> mode.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-weight="bold">raw filename</fo:inline> is a filename specified as a binary. The Erlang VM
    does not translate a filename specified as a binary on
    systems with transparent naming.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When running in <fo:inline font-family="monospace">utf8</fo:inline> mode, functions
    <fo:inline font-style="italic"><fo:inline font-family="monospace">list_dir/1</fo:inline></fo:inline> and
    <fo:inline font-style="italic"><fo:inline font-family="monospace">read_link/1</fo:inline></fo:inline>
    never return raw filenames. To return all filenames including raw filenames,
    use functions
    <fo:inline font-style="italic"><fo:inline font-family="monospace">list_dir_all/1</fo:inline></fo:inline> and
    <fo:inline font-style="italic"><fo:inline font-family="monospace">read_link_all/1</fo:inline></fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also section <fo:inline font-style="italic">Notes About Raw Filenames</fo:inline> in the STDLIB User's Guide.</fo:block>

  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Data Types</fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">deep_list() = [char() | atom() | <fo:inline font-style="italic">deep_list()</fo:inline>]</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:inline font-weight="bold" space-after="0.25em">fd()</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A file descriptor representing a file opened in
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">raw</fo:inline></fo:inline> mode.</fo:block>
      
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">filename() = string()</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">filename_all() = string() | binary()</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">io_device() = pid() | <fo:inline font-style="italic">fd()</fo:inline></fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As returned by
          <fo:inline font-style="italic"><fo:inline font-family="monospace">open/2</fo:inline></fo:inline>;
          <fo:inline font-family="monospace">pid()</fo:inline> is a process handling I/O-protocols.</fo:block>
      
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">name() = string() | atom() | <fo:inline font-style="italic">deep_list()</fo:inline></fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If VM is in Unicode filename mode, <fo:inline font-family="monospace">string()</fo:inline> and <fo:inline font-family="monospace">char()</fo:inline>
          are allowed to be &gt; 255.
        </fo:block>
      
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">name_all() = <fo:block/>    string() | atom() | <fo:inline font-style="italic">deep_list()</fo:inline> | (RawFilename :: binary())</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If VM is in Unicode filename mode, <fo:inline font-family="monospace">string()</fo:inline> and <fo:inline font-family="monospace">char()</fo:inline>
          are allowed to be &gt; 255.
          <fo:inline font-family="monospace">RawFilename</fo:inline> is a filename not subject to
          Unicode translation,
          meaning that it can contain characters not conforming to
          the Unicode encoding expected from the file system
          (that is, non-UTF-8 characters although the VM is started
          in Unicode filename mode).
        </fo:block>
      
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">posix() = <fo:block/>    eacces |<fo:block/>    eagain |<fo:block/>    ebadf |<fo:block/>    ebusy |<fo:block/>    edquot |<fo:block/>    eexist |<fo:block/>    efault |<fo:block/>    efbig |<fo:block/>    eintr |<fo:block/>    einval |<fo:block/>    eio |<fo:block/>    eisdir |<fo:block/>    eloop |<fo:block/>    emfile |<fo:block/>    emlink |<fo:block/>    enametoolong |<fo:block/>    enfile |<fo:block/>    enodev |<fo:block/>    enoent |<fo:block/>    enomem |<fo:block/>    enospc |<fo:block/>    enotblk |<fo:block/>    enotdir |<fo:block/>    enotsup |<fo:block/>    enxio |<fo:block/>    eperm |<fo:block/>    epipe |<fo:block/>    erofs |<fo:block/>    espipe |<fo:block/>    esrch |<fo:block/>    estale |<fo:block/>    exdev</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An atom that is named from the POSIX error codes used in
          Unix, and in the runtime libraries of most C compilers.</fo:block>
      
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">date_time() = <fo:inline font-style="italic">calendar:datetime()</fo:inline></fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Must denote a valid date and time.</fo:block>
      
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">file_info() = <fo:block/>    #file_info{size = integer() &gt;= 0 | undefined,<fo:block/>               type =<fo:block/>                   device |<fo:block/>                   directory |<fo:block/>                   other |<fo:block/>                   regular |<fo:block/>                   symlink |<fo:block/>                   undefined,<fo:block/>               access =<fo:block/>                   read | write | read_write | none | undefined,<fo:block/>               atime =<fo:block/>                   <fo:inline font-style="italic">file:date_time()</fo:inline> |<fo:block/>                   integer() &gt;= 0 |<fo:block/>                   undefined,<fo:block/>               mtime =<fo:block/>                   <fo:inline font-style="italic">file:date_time()</fo:inline> |<fo:block/>                   integer() &gt;= 0 |<fo:block/>                   undefined,<fo:block/>               ctime =<fo:block/>                   <fo:inline font-style="italic">file:date_time()</fo:inline> |<fo:block/>                   integer() &gt;= 0 |<fo:block/>                   undefined,<fo:block/>               mode = integer() &gt;= 0 | undefined,<fo:block/>               links = integer() &gt;= 0 | undefined,<fo:block/>               major_device = integer() &gt;= 0 | undefined,<fo:block/>               minor_device = integer() &gt;= 0 | undefined,<fo:block/>               inode = integer() &gt;= 0 | undefined,<fo:block/>               uid = integer() &gt;= 0 | undefined,<fo:block/>               gid = integer() &gt;= 0 | undefined}</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">location() = <fo:block/>    integer() |<fo:block/>    {bof, Offset :: integer()} |<fo:block/>    {cur, Offset :: integer()} |<fo:block/>    {eof, Offset :: integer()} |<fo:block/>    bof |<fo:block/>    cur |<fo:block/>    eof</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">mode() = <fo:block/>    read |<fo:block/>    write |<fo:block/>    append |<fo:block/>    exclusive |<fo:block/>    raw |<fo:block/>    binary |<fo:block/>    {delayed_write,<fo:block/>     Size :: integer() &gt;= 0,<fo:block/>     Delay :: integer() &gt;= 0} |<fo:block/>    delayed_write |<fo:block/>    {read_ahead, Size :: integer() &gt;= 1} |<fo:block/>    read_ahead |<fo:block/>    compressed |<fo:block/>    {encoding, <fo:inline font-style="italic">unicode:encoding()</fo:inline>} |<fo:block/>    sync</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">file_info_option() = <fo:block/>    {time, local} | {time, universal} | {time, posix} | raw</fo:block></fo:block>
   

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7781424"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">advise(IoDevice, Offset, Length, Advise) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">IoDevice = <fo:inline font-style="italic">io_device()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Offset = Length = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Advise = <fo:inline font-style="italic">posix_file_advise()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">posix()</fo:inline> | badarg</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">posix_file_advise() = <fo:block/>    normal |<fo:block/>    sequential |<fo:block/>    random |<fo:block/>    no_reuse |<fo:block/>    will_need |<fo:block/>    dont_need</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">advise/4</fo:inline> can be used to announce an intention to access file
          data in a specific pattern in the future, thus allowing the
          operating system to perform appropriate optimizations.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On some platforms, this function might have no effect.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7785584"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">allocate(File, Offset, Length) -&gt; ok | {error, <fo:inline font-style="italic">posix()</fo:inline>}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">File = <fo:inline font-style="italic">io_device()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Offset = Length = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">allocate/3</fo:inline> can be used to preallocate space for a file.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function only succeeds in platforms that provide this
          feature. When it succeeds, space is preallocated for the file but
          the file size might not be updated. This behaviour depends on the
          preallocation implementation. To guarantee that the file size is updated,
          truncate the file to the new size.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7789296"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">change_group(Filename, Gid) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filename = <fo:inline font-style="italic">name_all()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Gid = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">posix()</fo:inline> | badarg</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Changes group of a file. See
          <fo:inline font-style="italic"><fo:inline font-family="monospace">write_file_info/2</fo:inline></fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7792784"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">change_mode(Filename, Mode) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filename = <fo:inline font-style="italic">name_all()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Mode = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">posix()</fo:inline> | badarg</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Changes permissions of a file. See
          <fo:inline font-style="italic"><fo:inline font-family="monospace">write_file_info/2</fo:inline></fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7796304"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">change_owner(Filename, Uid) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filename = <fo:inline font-style="italic">name_all()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Uid = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">posix()</fo:inline> | badarg</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Changes owner of a file. See
          <fo:inline font-style="italic"><fo:inline font-family="monospace">write_file_info/2</fo:inline></fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7799792"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">change_owner(Filename, Uid, Gid) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filename = <fo:inline font-style="italic">name_all()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Uid = Gid = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">posix()</fo:inline> | badarg</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Changes owner and group of a file. See
          <fo:inline font-style="italic"><fo:inline font-family="monospace">write_file_info/2</fo:inline></fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7803312"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">change_time(Filename, Mtime) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filename = <fo:inline font-style="italic">name_all()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Mtime = <fo:inline font-style="italic">date_time()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">posix()</fo:inline> | badarg</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Changes the modification and access times of a file. See
          <fo:inline font-style="italic"><fo:inline font-family="monospace">write_file_info/2</fo:inline></fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7806848"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">change_time(Filename, Atime, Mtime) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filename = <fo:inline font-style="italic">name_all()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Atime = Mtime = <fo:inline font-style="italic">date_time()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">posix()</fo:inline> | badarg</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Changes the modification and last access times of a file. See
          <fo:inline font-style="italic"><fo:inline font-family="monospace">write_file_info/2</fo:inline></fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7810416"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">close(IoDevice) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">IoDevice = <fo:inline font-style="italic">io_device()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">posix()</fo:inline> | badarg | terminated</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Closes the file referenced by <fo:inline font-family="monospace">IoDevice</fo:inline>. It mostly
          returns <fo:inline font-family="monospace">ok</fo:inline>, except for some severe errors such as out
          of memory.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that if option <fo:inline font-family="monospace">delayed_write</fo:inline> was
          used when opening the file, <fo:inline font-family="monospace">close/1</fo:inline> can return an
          old write error and not even try to close the file. See
          <fo:inline font-style="italic"><fo:inline font-family="monospace">open/2</fo:inline></fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7816448"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">consult(Filename) -&gt; {ok, Terms} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filename = <fo:inline font-style="italic">name_all()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Terms = [term()]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:block/>    <fo:inline font-style="italic">posix()</fo:inline> |<fo:block/>    badarg |<fo:block/>    terminated |<fo:block/>    system_limit |<fo:block/>    {Line :: integer(), Mod :: module(), Term :: term()}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Reads Erlang terms, separated by '.', from
           <fo:inline font-family="monospace">Filename</fo:inline>. Returns one of the following:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{ok, Terms}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file was successfully read.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{error, atom()}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An error occurred when opening the file or reading it.
              For a list of typical error codes, see
	      <fo:inline font-style="italic"><fo:inline font-family="monospace">open/2</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{error, {Line, Mod,
                           Term}}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An error occurred when interpreting the Erlang terms in
              the file. To convert the three-element tuple to an English
	      description of the error, use
	    <fo:inline font-style="italic"><fo:inline font-family="monospace">format_error/1</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
f.txt:  {person, "kalle", 25}.
        {person, "pelle", 30}.</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">file:consult("f.txt").</fo:inline>
{ok,[{person,"kalle",25},{person,"pelle",30}]}</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The encoding of <fo:inline font-family="monospace">Filename</fo:inline> can be set
          by a comment, as described in
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">epp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7832528"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">copy(Source, Destination) -&gt; {ok, BytesCopied} | {error, Reason}</fo:block></fo:block><fo:block id="idp7833360"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">copy(Source, Destination, ByteCount) -&gt;<fo:block/>        {ok, BytesCopied} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Source = Destination = <fo:inline font-style="italic">io_device()</fo:inline> | Filename | {Filename, Modes}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filename = <fo:inline font-style="italic">name_all()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Modes = [<fo:inline font-style="italic">mode()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ByteCount = integer() &gt;= 0 | infinity</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">BytesCopied = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">posix()</fo:inline> | badarg | terminated</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Copies <fo:inline font-family="monospace">ByteCount</fo:inline> bytes from
          <fo:inline font-family="monospace">Source</fo:inline> to <fo:inline font-family="monospace">Destination</fo:inline>.
          <fo:inline font-family="monospace">Source</fo:inline> and <fo:inline font-family="monospace">Destination</fo:inline> refer
          to either filenames or IO devices from, for example, <fo:inline font-family="monospace">open/2</fo:inline>.
          <fo:inline font-family="monospace">ByteCount</fo:inline> defaults to <fo:inline font-family="monospace">infinity</fo:inline>, denoting an
          infinite number of bytes.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Argument <fo:inline font-family="monospace">Modes</fo:inline> is a list of possible modes,
          see <fo:inline font-style="italic"><fo:inline font-family="monospace">open/2</fo:inline></fo:inline>, and defaults to
          <fo:inline font-family="monospace">[]</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If both <fo:inline font-family="monospace">Source</fo:inline> and
          <fo:inline font-family="monospace">Destination</fo:inline> refer to
          filenames, the files are opened with <fo:inline font-family="monospace">[read, binary]</fo:inline>
          and <fo:inline font-family="monospace">[write, binary]</fo:inline> prepended to their mode lists,
          respectively, to optimize the copy.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Source</fo:inline> refers to a filename, it is opened with
          <fo:inline font-family="monospace">read</fo:inline> mode prepended to the mode list before the copy,
          and closed when done.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Destination</fo:inline> refers to a filename, it is opened
          with <fo:inline font-family="monospace">write</fo:inline> mode prepended to the mode list before
          the copy, and closed when done.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">{ok, BytesCopied}</fo:inline>, where
          <fo:inline font-family="monospace">BytesCopied</fo:inline> is
          the number of bytes that was copied, which can be
          less than <fo:inline font-family="monospace">ByteCount</fo:inline> if end of file was
          encountered on the source. If the operation fails,
          <fo:inline font-family="monospace">{error, Reason}</fo:inline> is returned.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Typical error reasons: as for
	<fo:inline font-style="italic"><fo:inline font-family="monospace">open/2</fo:inline></fo:inline> if a file
	had to be opened, and as for
	<fo:inline font-style="italic"><fo:inline font-family="monospace">read/2</fo:inline></fo:inline> and
	<fo:inline font-style="italic"><fo:inline font-family="monospace">write/2</fo:inline></fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7855104"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">datasync(IoDevice) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">IoDevice = <fo:inline font-style="italic">io_device()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">posix()</fo:inline> | badarg | terminated</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Ensures that any buffers kept by the operating system
          (not by the Erlang runtime system) are written to disk. In
          many ways it resembles <fo:inline font-family="monospace">fsync</fo:inline> but it does not update
          some of the metadata of the file, such as the access time. On
          some platforms this function has no effect.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Applications that access databases or log files often write
          a tiny data fragment (for example, one line in a log file) and then
          call <fo:inline font-family="monospace">fsync()</fo:inline> immediately to ensure that the written
          data is physically stored on the hard disk. Unfortunately, <fo:inline font-family="monospace">fsync()</fo:inline>
          always initiates two write operations: one for the newly
          written data and another one to update the modification
          time stored in the <fo:inline font-family="monospace">inode</fo:inline>. If the modification time is not a part
          of the transaction concept, <fo:inline font-family="monospace">fdatasync()</fo:inline> can be used to avoid
          unnecessary <fo:inline font-family="monospace">inode</fo:inline> disk write operations.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Available only in some POSIX systems, this call results in a
          call to <fo:inline font-family="monospace">fsync()</fo:inline>, or has no effect in systems not providing
          the <fo:inline font-family="monospace">fdatasync()</fo:inline> syscall.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7863168"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">del_dir(Dir) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Dir = <fo:inline font-style="italic">name_all()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">posix()</fo:inline> | badarg</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tries to delete directory <fo:inline font-family="monospace">Dir</fo:inline>.
          The directory must
          be empty before it can be deleted. Returns <fo:inline font-family="monospace">ok</fo:inline> if
          successful.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Typical error reasons:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">eacces</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Missing search or write permissions for the parent
              directories of <fo:inline font-family="monospace">Dir</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">eexist</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The directory is not empty.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">enoent</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The directory does not exist.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">enotdir</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A component of <fo:inline font-family="monospace">Dir</fo:inline> is not a directory.
              On some platforms, <fo:inline font-family="monospace">enoent</fo:inline> is returned instead.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">einval</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Attempt to delete the current directory. On some
              platforms, <fo:inline font-family="monospace">eacces</fo:inline> is returned instead.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7877408"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">delete(Filename) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filename = <fo:inline font-style="italic">name_all()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">posix()</fo:inline> | badarg</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tries to delete file <fo:inline font-family="monospace">Filename</fo:inline>.
          Returns <fo:inline font-family="monospace">ok</fo:inline> if successful.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Typical error reasons:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">enoent</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file does not exist.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">eacces</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Missing permission for the file or one of its parents.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">eperm</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file is a directory and the user is not superuser.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">enotdir</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A component of the filename is not a directory. On some
              platforms, <fo:inline font-family="monospace">enoent</fo:inline> is returned instead.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">einval</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Filename</fo:inline> has an improper type, such as tuple.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In a future release, a bad type for argument
            <fo:inline font-family="monospace">Filename</fo:inline> will probably generate
            an exception.</fo:block>
        </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7891888"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">eval(Filename) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filename = <fo:inline font-style="italic">name_all()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:block/>    <fo:inline font-style="italic">posix()</fo:inline> |<fo:block/>    badarg |<fo:block/>    terminated |<fo:block/>    system_limit |<fo:block/>    {Line :: integer(), Mod :: module(), Term :: term()}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Reads and evaluates Erlang expressions, separated by '.' (or
          ',', a sequence of expressions is also an expression) from
          <fo:inline font-family="monospace">Filename</fo:inline>. The result of the evaluation
          is not returned; any expression sequence in the file must be there
          for its side effect. Returns one of the following:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ok</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file was read and evaluated.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{error, atom()}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An error occurred when opening the file or reading it.
            For a list of typical error codes, see
	    <fo:inline font-style="italic"><fo:inline font-family="monospace">open/2</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{error, {Line, Mod,
                           Term}}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An error occurred when interpreting the Erlang
              expressions in the file. To convert the three-element tuple
	      to an English description of the error, use
	      <fo:inline font-style="italic"><fo:inline font-family="monospace">format_error/1</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The encoding of <fo:inline font-family="monospace">Filename</fo:inline> can be set
          by a comment, as described in
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">epp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7905488"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">eval(Filename, Bindings) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filename = <fo:inline font-style="italic">name_all()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Bindings = <fo:inline font-style="italic">erl_eval:binding_struct()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:block/>    <fo:inline font-style="italic">posix()</fo:inline> |<fo:block/>    badarg |<fo:block/>    terminated |<fo:block/>    system_limit |<fo:block/>    {Line :: integer(), Mod :: module(), Term :: term()}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The same as <fo:inline font-family="monospace">eval/1</fo:inline>, but the variable bindings
          <fo:inline font-family="monospace">Bindings</fo:inline> are used in the evaluation. For information
	  about the variable bindings, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">erl_eval(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7910096"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">format_error(Reason) -&gt; Chars</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:block/>    <fo:inline font-style="italic">posix()</fo:inline> |<fo:block/>    badarg |<fo:block/>    terminated |<fo:block/>    system_limit |<fo:block/>    {Line :: integer(), Mod :: module(), Term :: term()}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Chars = string()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Given the error reason returned by any function in this
          module, returns a descriptive string of the error in English.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7912864"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_cwd() -&gt; {ok, Dir} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Dir = <fo:inline font-style="italic">filename()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">posix()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">{ok, Dir}</fo:inline>, where <fo:inline font-family="monospace">Dir</fo:inline>
          is the current
          working directory of the file server.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In rare circumstances, this function can fail on Unix.
            It can occur if read permission does not exist for
            the parent directories of the current directory.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A typical error reason:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">eacces</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Missing read permission for one of the parents of
              the current directory.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7920528"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_cwd(Drive) -&gt; {ok, Dir} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Drive = string()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Dir = <fo:inline font-style="italic">filename()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">posix()</fo:inline> | badarg</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">{ok, Dir}</fo:inline> or
          <fo:inline font-family="monospace">{error, Reason}</fo:inline>, where <fo:inline font-family="monospace">Dir</fo:inline>
          is the current working directory of the specified drive.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Drive</fo:inline> is to be of the form
          "<fo:inline font-family="monospace">Letter</fo:inline><fo:inline font-family="monospace">:</fo:inline>", for example, "c:".</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">{error, enotsup}</fo:inline> on platforms
          that have no concept of current drive (Unix, for example).</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Typical error reasons:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">enotsup</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The operating system has no concept of drives.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">eacces</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The drive does not exist.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">einval</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The format of <fo:inline font-family="monospace">Drive</fo:inline> is invalid.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7934128"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">list_dir(Dir) -&gt; {ok, Filenames} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Dir = <fo:inline font-style="italic">name_all()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filenames = [<fo:inline font-style="italic">filename()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:block/>    <fo:inline font-style="italic">posix()</fo:inline> |<fo:block/>    badarg |<fo:block/>    {no_translation, Filename :: <fo:inline font-style="italic">unicode:latin1_binary()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Lists all files in a directory, <fo:inline font-weight="bold">except</fo:inline> files
	with raw filenames. Returns
          <fo:inline font-family="monospace">{ok, Filenames}</fo:inline> if successful,
          otherwise <fo:inline font-family="monospace">{error, Reason}</fo:inline>.
          <fo:inline font-family="monospace">Filenames</fo:inline> is a list of
          the names of all the files in the directory. The names are
          not sorted.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Typical error reasons:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">eacces</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Missing search or write permissions for <fo:inline font-family="monospace">Dir</fo:inline>
              or one of its parent directories.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">enoent</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The directory does not exist.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{no_translation, Filename}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Filename</fo:inline> is a <fo:inline font-family="monospace">binary()</fo:inline> with
              characters coded in ISO Latin-1 and the VM was started
              with parameter <fo:inline font-family="monospace">+fnue</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7947568"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">list_dir_all(Dir) -&gt; {ok, Filenames} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Dir = <fo:inline font-style="italic">name_all()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filenames = [<fo:inline font-style="italic">filename_all()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">posix()</fo:inline> | badarg</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Lists all the files in a directory,
	including files with raw filenames.
	Returns <fo:inline font-family="monospace">{ok, Filenames}</fo:inline> if successful,
          otherwise <fo:inline font-family="monospace">{error, Reason}</fo:inline>.
          <fo:inline font-family="monospace">Filenames</fo:inline> is a list of
          the names of all the files in the directory. The names are
          not sorted.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Typical error reasons:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">eacces</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Missing search or write permissions for <fo:inline font-family="monospace">Dir</fo:inline>
              or one of its parent directories.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">enoent</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The directory does not exist.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7957648"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">make_dir(Dir) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Dir = <fo:inline font-style="italic">name_all()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">posix()</fo:inline> | badarg</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tries to create directory <fo:inline font-family="monospace">Dir</fo:inline>. Missing parent
          directories are <fo:inline font-weight="bold">not</fo:inline> created. Returns <fo:inline font-family="monospace">ok</fo:inline> if
          successful.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Typical error reasons:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">eacces</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Missing search or write permissions for the parent
              directories of <fo:inline font-family="monospace">Dir</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">eexist</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A file or directory named <fo:inline font-family="monospace">Dir</fo:inline> exists already.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">enoent</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A component of <fo:inline font-family="monospace">Dir</fo:inline> does not exist.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">enospc</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">No space is left on the device.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">enotdir</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A component of <fo:inline font-family="monospace">Dir</fo:inline> is not a directory.
              On some platforms, <fo:inline font-family="monospace">enoent</fo:inline> is returned instead.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7972944"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">make_link(Existing, New) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Existing = New = <fo:inline font-style="italic">name_all()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">posix()</fo:inline> | badarg</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Makes a hard link from <fo:inline font-family="monospace">Existing</fo:inline> to
          <fo:inline font-family="monospace">New</fo:inline> on
          platforms supporting links (Unix and Windows). This function returns
          <fo:inline font-family="monospace">ok</fo:inline> if the link was successfully created, otherwise
          <fo:inline font-family="monospace">{error, Reason}</fo:inline>. On platforms not supporting
          links, <fo:inline font-family="monospace">{error,enotsup}</fo:inline> is returned.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Typical error reasons:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">eacces</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Missing read or write permissions for the parent
              directories of <fo:inline font-family="monospace">Existing</fo:inline> or
              <fo:inline font-family="monospace">New</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">eexist</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">New</fo:inline> already exists.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">enotsup</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Hard links are not supported on this platform.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp7985664"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">make_symlink(Existing, New) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Existing = New = <fo:inline font-style="italic">name_all()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">posix()</fo:inline> | badarg</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a symbolic link <fo:inline font-family="monospace">New</fo:inline> to
          the file or directory <fo:inline font-family="monospace">Existing</fo:inline> on platforms
          supporting symbolic links (most Unix systems and Windows, beginning with
	  Vista).
	  <fo:inline font-family="monospace">Existing</fo:inline> does not need to exist.
          Returns <fo:inline font-family="monospace">ok</fo:inline> if the link is
          successfully created, otherwise <fo:inline font-family="monospace">{error, Reason}</fo:inline>.
          On platforms not supporting symbolic links, <fo:inline font-family="monospace">{error, enotsup}</fo:inline>
          is returned.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Typical error reasons:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">eacces</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Missing read or write permissions for the parent directories
            of <fo:inline font-family="monospace">Existing</fo:inline> or <fo:inline font-family="monospace">New</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">eexist</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">New</fo:inline> already exists.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">enotsup</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Symbolic links are not supported on this platform.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">eperm</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">User does not have privileges to create symbolic links
	    (<fo:inline font-family="monospace">SeCreateSymbolicLinkPrivilege</fo:inline> on Windows).</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp8001056"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">native_name_encoding() -&gt; latin1 | utf8</fo:block></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns
	the filename encoding mode. If it is <fo:inline font-family="monospace">latin1</fo:inline>, the
	system translates no filenames. If it is
	<fo:inline font-family="monospace">utf8</fo:inline>, filenames are converted back and forth to
	the native filename encoding (usually UTF-8, but UTF-16 on
	Windows).</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp8005168"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">open(File, Modes) -&gt; {ok, IoDevice} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">File = Filename | iodata()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filename = <fo:inline font-style="italic">name_all()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Modes = [<fo:inline font-style="italic">mode()</fo:inline> | ram]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">IoDevice = <fo:inline font-style="italic">io_device()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">posix()</fo:inline> | badarg | system_limit</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Opens file <fo:inline font-family="monospace">File</fo:inline> in the mode determined
          by <fo:inline font-family="monospace">Modes</fo:inline>, which can contain one or more of the
          following options:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">read</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file, which must exist, is opened for reading.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">write</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file is opened for writing. It is created if it does
              not exist. If the file exists and <fo:inline font-family="monospace">write</fo:inline> is not
              combined with <fo:inline font-family="monospace">read</fo:inline>, the file is truncated.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">append</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file is opened for writing. It is created if it does
	      not exist. Every write operation to a file opened with
	      <fo:inline font-family="monospace">append</fo:inline> takes place at the end of the file.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">exclusive</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file is opened for writing. It is created if it does
	      not exist. If the file exists, <fo:inline font-family="monospace">{error, eexist}</fo:inline>
	      is returned.</fo:block>
	    <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This option does not guarantee exclusiveness on
	    file systems not supporting <fo:inline font-family="monospace">O_EXCL</fo:inline> properly,
	    such as NFS. Do not depend on this option unless you
	    know that the file system supports it (in general, local
	    file systems are safe).</fo:block></fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">raw</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
              Allows faster access to a file,
              as no Erlang process is needed to handle the file.
              However, a file opened in this way has the following
              limitations:</fo:block>
            <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The functions in the <fo:inline font-family="monospace">io</fo:inline> module cannot be used,
               as they can only talk to an Erlang process.
               Instead, use functions
	       <fo:inline font-style="italic"><fo:inline font-family="monospace">read/2</fo:inline></fo:inline>,
	       <fo:inline font-style="italic"><fo:inline font-family="monospace">read_line/1</fo:inline></fo:inline>, and
	       <fo:inline font-style="italic"><fo:inline font-family="monospace">write/2</fo:inline></fo:inline>.</fo:block></fo:block></fo:list-item-body></fo:list-item>
	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Especially if <fo:inline font-family="monospace">read_line/1</fo:inline> is to be used on a <fo:inline font-family="monospace">raw</fo:inline>
	      file, it is recommended to combine this option with option
	      <fo:inline font-family="monospace">{read_ahead, Size}</fo:inline> as line-oriented I/O is inefficient
	      without buffering.</fo:block></fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Only the Erlang process that opened the file can use
               it.</fo:block></fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A remote Erlang file server cannot be used.
               The computer on which the Erlang node is running must
               have access to the file system (directly or through
               NFS).</fo:block></fo:block></fo:list-item-body></fo:list-item>
            </fo:list-block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">binary</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Read operations on the file return binaries rather than lists.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{delayed_write, Size, Delay}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Data in subsequent
              <fo:inline font-family="monospace">write/2</fo:inline> calls is buffered until at least
              <fo:inline font-family="monospace">Size</fo:inline> bytes are buffered, or until the oldest buffered
              data is <fo:inline font-family="monospace">Delay</fo:inline> milliseconds old. Then all buffered
              data is written in one operating system call.
              The buffered data is also flushed before some other file
              operation than <fo:inline font-family="monospace">write/2</fo:inline> is executed.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The purpose of this option is to increase performance
              by reducing the number of operating system calls. Thus, the
              <fo:inline font-family="monospace">write/2</fo:inline> calls must be for sizes significantly
              less than <fo:inline font-family="monospace">Size</fo:inline>, and not interspersed by too many
              other file operations.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When this option is used, the result of <fo:inline font-family="monospace">write/2</fo:inline>
              calls can prematurely be reported as successful, and if
	      a write error occurs, the error is reported as the result
	      of the next file operation, which is not executed.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For example, when <fo:inline font-family="monospace">delayed_write</fo:inline> is used, after a
              number of <fo:inline font-family="monospace">write/2</fo:inline> calls, <fo:inline font-family="monospace">close/1</fo:inline> can
              return <fo:inline font-family="monospace">{error, enospc}</fo:inline>, as there is not enough
              space on the disc for previously written data.
              <fo:inline font-family="monospace">close/1</fo:inline> must probably be called again, as the
              file is still open.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">delayed_write</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The same as <fo:inline font-family="monospace">{delayed_write, Size, Delay}</fo:inline> with
              reasonable default values for <fo:inline font-family="monospace">Size</fo:inline> and
              <fo:inline font-family="monospace">Delay</fo:inline> (roughly some 64 KB, 2 seconds).</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{read_ahead, Size}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Activates read data buffering. If
              <fo:inline font-family="monospace">read/2</fo:inline> calls are for significantly less than
              <fo:inline font-family="monospace">Size</fo:inline> bytes, read operations to the operating
              system are still performed for blocks of <fo:inline font-family="monospace">Size</fo:inline>
              bytes. The extra data is buffered and returned in
              subsequent <fo:inline font-family="monospace">read/2</fo:inline> calls, giving a performance gain
              as the number of operating system calls is reduced.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">read_ahead</fo:inline> buffer is also highly used
	      by function <fo:inline font-family="monospace">read_line/1</fo:inline> in <fo:inline font-family="monospace">raw</fo:inline> mode,
	      therefore this option is recommended
	      (for performance reasons)
	      when accessing raw files using that function.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">read/2</fo:inline> calls are for sizes not significantly
              less than, or even greater than <fo:inline font-family="monospace">Size</fo:inline> bytes, no
              performance gain can be expected.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">read_ahead</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The same as <fo:inline font-family="monospace">{read_ahead, Size}</fo:inline> with a reasonable
              default value for <fo:inline font-family="monospace">Size</fo:inline> (roughly some 64 KB).</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">compressed</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Makes it possible to read or write gzip compressed
              files. Option <fo:inline font-family="monospace">compressed</fo:inline> must be combined
	      with <fo:inline font-family="monospace">read</fo:inline> or <fo:inline font-family="monospace">write</fo:inline>, but not both.
	      Notice that the file size obtained with
              <fo:inline font-style="italic"><fo:inline font-family="monospace">read_file_info/1</fo:inline></fo:inline>
	      does probably not match the number of bytes that can be
	      read from a compressed file.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{encoding, Encoding}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Makes the file perform automatic translation of characters to
	    and from a specific (Unicode) encoding. Notice that the data supplied
	    to
	    <fo:inline font-style="italic"><fo:inline font-family="monospace">write/2</fo:inline></fo:inline>
	    or returned by
	    <fo:inline font-style="italic"><fo:inline font-family="monospace">read/2</fo:inline></fo:inline>
	    still is byte-oriented; this option
	    denotes only how data is stored in the disk file.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Depending on the encoding, different methods of reading and writing
	    data is preferred. The default encoding of <fo:inline font-family="monospace">latin1</fo:inline> implies using
	    this module (<fo:inline font-family="monospace">file</fo:inline>) for reading and writing data as the interfaces
	    provided here work with byte-oriented data. Using other (Unicode)
	    encodings makes the
	    <fo:inline font-style="italic"><fo:inline font-family="monospace">io(3)</fo:inline></fo:inline> functions
	    <fo:inline font-family="monospace">get_chars</fo:inline>, <fo:inline font-family="monospace">get_line</fo:inline>, and <fo:inline font-family="monospace">put_chars</fo:inline> more suitable,
	    as they can work with the full Unicode range.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If data is sent to an <fo:inline font-family="monospace">io_device()</fo:inline> in a format that cannot be
	    converted to the specified encoding, or if data is read by a function
	    that returns data in a format that cannot cope with the character range
	    of the data, an error occurs and the file is closed.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allowed values for <fo:inline font-family="monospace">Encoding</fo:inline>:</fo:block>
	    <fo:block space-after="0.25em" space-before="0.25em">
	    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">latin1</fo:inline></fo:block>
	    <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default encoding. Bytes supplied to the file, that is,
	    <fo:inline font-style="italic"><fo:inline font-family="monospace">write/2</fo:inline></fo:inline>
	    are written "as is" on the file. Likewise, bytes read from the file,
	    that is,
	    <fo:inline font-style="italic"><fo:inline font-family="monospace">read/2</fo:inline></fo:inline> are
	    returned "as is". If module
	    <fo:inline font-style="italic"><fo:inline font-family="monospace">io(3)</fo:inline></fo:inline> is used for
	    writing, the file can only cope with Unicode characters up to code point
	    255 (the ISO Latin-1 range).</fo:block>
	    </fo:block></fo:block-container>
	    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">unicode or utf8</fo:inline></fo:block>
	    <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Characters are translated to and from UTF-8 encoding before they are
	    written to or read from the file. A file opened in this way can be
	    readable using function
	    <fo:inline font-style="italic"><fo:inline font-family="monospace">read/2</fo:inline></fo:inline>,
	    as long as no data stored on
	    the file lies beyond the ISO Latin-1 range (0..255), but failure occurs
	    if the data contains Unicode code points beyond that range. The file is
	    best read with the functions in the Unicode aware module
	    <fo:inline font-style="italic"><fo:inline font-family="monospace">io(3)</fo:inline></fo:inline>.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Bytes written to the file by any means are translated to UTF-8 encoding
	    before being stored on the disk file.</fo:block>
	    </fo:block></fo:block-container>
	    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">utf16 or {utf16,big}</fo:inline></fo:block>
	    <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Works like <fo:inline font-family="monospace">unicode</fo:inline>, but translation is done to and from big
	    endian UTF-16 instead of UTF-8.</fo:block>
	    </fo:block></fo:block-container>
	    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{utf16,little}</fo:inline></fo:block>
	    <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Works like <fo:inline font-family="monospace">unicode</fo:inline>, but translation is done to and from little
	    endian UTF-16 instead of UTF-8.</fo:block>
	    </fo:block></fo:block-container>
	    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">utf32 or {utf32,big}</fo:inline></fo:block>
	    <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Works like <fo:inline font-family="monospace">unicode</fo:inline>, but translation is done to and from big
	    endian UTF-32 instead of UTF-8.</fo:block>
	    </fo:block></fo:block-container>
	    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{utf32,little}</fo:inline></fo:block>
	    <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Works like <fo:inline font-family="monospace">unicode</fo:inline>, but translation is done to and from little
	    endian UTF-32 instead of UTF-8.</fo:block>
	    </fo:block></fo:block-container>
	    </fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Encoding can be changed for a file "on the fly" by using function
	    <fo:inline font-style="italic"><fo:inline font-family="monospace">io:setopts/2</fo:inline></fo:inline>.
	    So a file can be analyzed in latin1 encoding for, for example, a BOM,
	    positioned beyond the BOM and then be set for the right encoding before
	    further reading. For functions identifying BOMs, see module
	    <fo:inline font-style="italic"><fo:inline font-family="monospace">unicode(3)</fo:inline></fo:inline>. </fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This option is not allowed on <fo:inline font-family="monospace">raw</fo:inline> files.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ram</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">File</fo:inline> must be <fo:inline font-family="monospace">iodata()</fo:inline>. Returns an <fo:inline font-family="monospace">fd()</fo:inline>, which lets
	    module <fo:inline font-family="monospace">file</fo:inline> operate on the data in-memory as if it is a file.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sync</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On platforms supporting it, enables the POSIX <fo:inline font-family="monospace">O_SYNC</fo:inline> synchronous
	    I/O flag or its platform-dependent equivalent (for example,
	    <fo:inline font-family="monospace">FILE_FLAG_WRITE_THROUGH</fo:inline> on Windows) so that writes to the file
	    block until the data is physically written to disk. However, be aware
	    that the exact semantics of this flag differ from platform to
            platform. For example, none of Linux or Windows guarantees that all file
	    metadata are also written before the call returns. For precise semantics,
	    check the details of your platform documentation. On platforms with no
            support for POSIX <fo:inline font-family="monospace">O_SYNC</fo:inline> or equivalent, use of the <fo:inline font-family="monospace">sync</fo:inline>
	    flag causes <fo:inline font-family="monospace">open</fo:inline> to return <fo:inline font-family="monospace">{error, enotsup}</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{ok, IoDevice}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file is opened in the requested mode.
              <fo:inline font-family="monospace">IoDevice</fo:inline> is a reference to the file.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{error, Reason}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file cannot be opened.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">IoDevice</fo:inline> is really the pid of the process that
          handles the file. This process is linked to the process
          that originally opened the file. If any process to which
          the <fo:inline font-family="monospace">IoDevice</fo:inline> is linked terminates, the file is
          closed and the process itself is terminated.
          An <fo:inline font-family="monospace">IoDevice</fo:inline> returned from this call can be used
          as an argument to the I/O functions (see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">io(3)</fo:inline></fo:inline>).</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In previous versions of <fo:inline font-family="monospace">file</fo:inline>, modes were specified
            as one of the atoms <fo:inline font-family="monospace">read</fo:inline>, <fo:inline font-family="monospace">write</fo:inline>, or
            <fo:inline font-family="monospace">read_write</fo:inline> instead of a list. This is still allowed
            for reasons of backwards compatibility, but is not to be
            used for new code. Also note that <fo:inline font-family="monospace">read_write</fo:inline> is not
            allowed in a mode list.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Typical error reasons:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">enoent</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file does not exist.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">eacces</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Missing permission for reading the file or searching one
              of the parent directories.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">eisdir</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The named file is not a regular file. It can be a
              directory, a FIFO, or a device.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">enotdir</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A component of the filename is not a directory. On some
              platforms, <fo:inline font-family="monospace">enoent</fo:inline> is returned instead.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">enospc</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There is no space left on the device (if <fo:inline font-family="monospace">write</fo:inline>
              access was specified).</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp8114000"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">path_consult(Path, Filename) -&gt;<fo:block/>                {ok, Terms, FullName} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Path = [Dir]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Dir = Filename = <fo:inline font-style="italic">name_all()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Terms = [term()]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">FullName = <fo:inline font-style="italic">filename_all()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:block/>    <fo:inline font-style="italic">posix()</fo:inline> |<fo:block/>    badarg |<fo:block/>    terminated |<fo:block/>    system_limit |<fo:block/>    {Line :: integer(), Mod :: module(), Term :: term()}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Searches the path <fo:inline font-family="monospace">Path</fo:inline> (a list of directory
          names) until the file <fo:inline font-family="monospace">Filename</fo:inline> is found.
          If <fo:inline font-family="monospace">Filename</fo:inline>
          is an absolute filename, <fo:inline font-family="monospace">Path</fo:inline> is ignored.
          Then reads Erlang terms, separated by '.', from the file.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns one of the following:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{ok, Terms, FullName}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file is successfully read. <fo:inline font-family="monospace">FullName</fo:inline> is
              the full name of the file.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{error, enoent}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file cannot be found in any of the directories in
              <fo:inline font-family="monospace">Path</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{error, atom()}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An error occurred when opening the file or reading it.
              For a list of typical error codes, see
	    <fo:inline font-style="italic"><fo:inline font-family="monospace">open/2</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{error, {Line, Mod,
                           Term}}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An error occurred when interpreting the Erlang terms in
              the file. Use
	      <fo:inline font-style="italic"><fo:inline font-family="monospace">format_error/1</fo:inline></fo:inline>
	      to convert the three-element tuple to an English description of
              the error.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The encoding of <fo:inline font-family="monospace">Filename</fo:inline> can be set
          by a comment as described in
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">epp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp8133232"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">path_eval(Path, Filename) -&gt; {ok, FullName} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Path = [Dir :: <fo:inline font-style="italic">name_all()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filename = <fo:inline font-style="italic">name_all()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">FullName = <fo:inline font-style="italic">filename_all()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:block/>    <fo:inline font-style="italic">posix()</fo:inline> |<fo:block/>    badarg |<fo:block/>    terminated |<fo:block/>    system_limit |<fo:block/>    {Line :: integer(), Mod :: module(), Term :: term()}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Searches the path <fo:inline font-family="monospace">Path</fo:inline> (a list of directory
          names) until the file <fo:inline font-family="monospace">Filename</fo:inline> is found.
          If <fo:inline font-family="monospace">Filename</fo:inline> is an absolute filename,
          <fo:inline font-family="monospace">Path</fo:inline> is ignored. Then reads
          and evaluates Erlang expressions, separated by '.' (or ',', a
          sequence of expressions is also an expression), from the file.
          The result of evaluation is not returned; any
          expression sequence in the file must be there for its side
          effect.</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns one of the following:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{ok, FullName}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file is read and evaluated. <fo:inline font-family="monospace">FullName</fo:inline> is
              the full name of the file.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{error, enoent}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file cannot be found in any of the directories in
              <fo:inline font-family="monospace">Path</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{error, atom()}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An error occurred when opening the file or reading it.
              For a list of typical error codes, see
	    <fo:inline font-style="italic"><fo:inline font-family="monospace">open/2</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{error, {Line, Mod,
                           Term}}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An error occurred when interpreting the Erlang
              expressions in the file. Use
	      <fo:inline font-style="italic"><fo:inline font-family="monospace">format_error/1</fo:inline></fo:inline>
	      to convert the three-element tuple to an English description
              of the error.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The encoding of <fo:inline font-family="monospace">Filename</fo:inline> can be set
          by a comment as described in
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">epp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp8152240"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">path_open(Path, Filename, Modes) -&gt;<fo:block/>             {ok, IoDevice, FullName} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Path = [Dir :: <fo:inline font-style="italic">name_all()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filename = <fo:inline font-style="italic">name_all()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Modes = [<fo:inline font-style="italic">mode()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">IoDevice = <fo:inline font-style="italic">io_device()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">FullName = <fo:inline font-style="italic">filename_all()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">posix()</fo:inline> | badarg | system_limit</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Searches the path <fo:inline font-family="monospace">Path</fo:inline> (a list of directory
          names) until the file <fo:inline font-family="monospace">Filename</fo:inline> is found.
          If <fo:inline font-family="monospace">Filename</fo:inline>
          is an absolute filename, <fo:inline font-family="monospace">Path</fo:inline> is ignored.
          Then opens the file in the mode determined by <fo:inline font-family="monospace">Modes</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns one of the following:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{ok, IoDevice, FullName}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file is opened in the requested mode.
              <fo:inline font-family="monospace">IoDevice</fo:inline> is a reference to the file and
              <fo:inline font-family="monospace">FullName</fo:inline> is the full name of the file.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{error, enoent}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file cannot be found in any of the directories in
              <fo:inline font-family="monospace">Path</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{error, atom()}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file cannot be opened.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp8165968"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">path_script(Path, Filename) -&gt;<fo:block/>               {ok, Value, FullName} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Path = [Dir :: <fo:inline font-style="italic">name_all()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filename = <fo:inline font-style="italic">name_all()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Value = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">FullName = <fo:inline font-style="italic">filename_all()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:block/>    <fo:inline font-style="italic">posix()</fo:inline> |<fo:block/>    badarg |<fo:block/>    terminated |<fo:block/>    system_limit |<fo:block/>    {Line :: integer(), Mod :: module(), Term :: term()}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Searches the path <fo:inline font-family="monospace">Path</fo:inline> (a list of directory
          names) until the file <fo:inline font-family="monospace">Filename</fo:inline> is found.
          If <fo:inline font-family="monospace">Filename</fo:inline> is an absolute filename,
          <fo:inline font-family="monospace">Path</fo:inline> is ignored. Then reads
          and evaluates Erlang expressions, separated by '.' (or ',', a
          sequence of expressions is also an expression), from the file.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns one of the following:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{ok, Value, FullName}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file is read and evaluated. <fo:inline font-family="monospace">FullName</fo:inline> is
              the full name of the file and <fo:inline font-family="monospace">Value</fo:inline> the value of
              the last expression.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{error, enoent}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file cannot be found in any of the directories in
              <fo:inline font-family="monospace">Path</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{error, atom()}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An error occurred when opening the file or reading it.
              For a list of typical error codes, see
	      <fo:inline font-style="italic"><fo:inline font-family="monospace">open/2</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{error, {Line, Mod,
                           Term}}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An error occurred when interpreting the Erlang
              expressions in the file. Use
	      <fo:inline font-style="italic"><fo:inline font-family="monospace">format_error/1</fo:inline></fo:inline>
	      to convert the three-element tuple to an English description
              of the error.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The encoding of <fo:inline font-family="monospace">Filename</fo:inline> can be set
          by a comment as described in
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">epp(3)</fo:inline></fo:inline>.</fo:block>
   </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp8185936"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">path_script(Path, Filename, Bindings) -&gt;<fo:block/>               {ok, Value, FullName} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Path = [Dir :: <fo:inline font-style="italic">name_all()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filename = <fo:inline font-style="italic">name_all()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Bindings = <fo:inline font-style="italic">erl_eval:binding_struct()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Value = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">FullName = <fo:inline font-style="italic">filename_all()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:block/>    <fo:inline font-style="italic">posix()</fo:inline> |<fo:block/>    badarg |<fo:block/>    terminated |<fo:block/>    system_limit |<fo:block/>    {Line :: integer(), Mod :: module(), Term :: term()}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The same as <fo:inline font-family="monospace">path_script/2</fo:inline> but the variable bindings
          <fo:inline font-family="monospace">Bindings</fo:inline> are used in the evaluation. See
          <fo:inline font-style="italic"><fo:inline font-family="monospace">erl_eval(3)</fo:inline></fo:inline> about
          variable bindings.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp8190544"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">pid2name(Pid) -&gt; {ok, Filename} | undefined</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filename = <fo:inline font-style="italic">filename_all()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Pid = pid()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Pid</fo:inline> is an I/O device, that is, a pid returned from
          <fo:inline font-family="monospace">open/2</fo:inline>, this function returns the filename, or rather:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{ok, Filename}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the file server of this node is not a slave, the file was
              opened by the file server of this node (this implies that
              <fo:inline font-family="monospace">Pid</fo:inline> must be a local pid) and the file is not
              closed. <fo:inline font-family="monospace">Filename</fo:inline> is the filename in flat string
              format.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">undefined</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In all other cases.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is intended for debugging only.</fo:block>
        </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp8200432"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">position(IoDevice, Location) -&gt;<fo:block/>            {ok, NewPosition} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">IoDevice = <fo:inline font-style="italic">io_device()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Location = <fo:inline font-style="italic">location()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">NewPosition = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">posix()</fo:inline> | badarg | terminated</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the position of the file referenced by <fo:inline font-family="monospace">IoDevice</fo:inline>
          to <fo:inline font-family="monospace">Location</fo:inline>. Returns <fo:inline font-family="monospace">{ok, NewPosition}</fo:inline>
	  (as absolute offset) if successful, otherwise
	  <fo:inline font-family="monospace">{error, Reason}</fo:inline>. <fo:inline font-family="monospace">Location</fo:inline> is
          one of the following:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Offset</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The same as <fo:inline font-family="monospace">{bof, Offset}</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{bof, Offset}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Absolute offset.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{cur, Offset}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Offset from the current position.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{eof, Offset}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Offset from the end of file.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">bof | cur | eof</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The same as above with <fo:inline font-family="monospace">Offset</fo:inline> 0.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that offsets are counted in bytes, not in characters. If the file
	is opened using some other <fo:inline font-family="monospace">encoding</fo:inline> than <fo:inline font-family="monospace">latin1</fo:inline>, one byte
	does not correspond to one character. Positioning in such a file can only
	be done to known character boundaries. That is, to a position earlier retrieved
	by getting a current position, to the beginning/end of the file or to some
	other position <fo:inline font-weight="bold">known</fo:inline> to be on a correct character boundary by some
	other means (typically beyond a byte order mark in the file, which has a
	known byte-size).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A typical error reason is:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">einval</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Either <fo:inline font-family="monospace">Location</fo:inline> is illegal, or it is
              evaluated to a
              negative offset in the file. Notice that if the resulting
              position is a negative value, the result is an error, and
              after the call the file position is undefined.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp8220832"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">pread(IoDevice, LocNums) -&gt; {ok, DataL} | eof | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">IoDevice = <fo:inline font-style="italic">io_device()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">LocNums = <fo:block/>    [{Location :: <fo:inline font-style="italic">location()</fo:inline>, Number :: integer() &gt;= 0}]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">DataL = [Data]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Data = string() | binary() | eof</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">posix()</fo:inline> | badarg | terminated</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Performs a sequence of <fo:inline font-family="monospace">pread/3</fo:inline> in one operation, 
          which is more efficient than calling them one at a time.
          Returns <fo:inline font-family="monospace">{ok, [Data, ...]}</fo:inline> or
          <fo:inline font-family="monospace">{error, Reason}</fo:inline>,
          where each <fo:inline font-family="monospace">Data</fo:inline>, the result of the corresponding
          <fo:inline font-family="monospace">pread</fo:inline>, is either a list or a binary depending on
          the mode of the file, or <fo:inline font-family="monospace">eof</fo:inline> if the requested position
          is beyond end of file.</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As the position is specified as a byte-offset, take special caution
	  when working with files where <fo:inline font-family="monospace">encoding</fo:inline> is set to something else
	  than <fo:inline font-family="monospace">latin1</fo:inline>, as not every byte position is a valid character
	  boundary on such a file.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp8228928"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">pread(IoDevice, Location, Number) -&gt;<fo:block/>         {ok, Data} | eof | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">IoDevice = <fo:inline font-style="italic">io_device()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Location = <fo:inline font-style="italic">location()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Number = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Data = string() | binary()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">posix()</fo:inline> | badarg | terminated</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Combines <fo:inline font-family="monospace">position/2</fo:inline> and <fo:inline font-family="monospace">read/2</fo:inline> in one
          operation, which is more efficient than calling them one at a
          time. If <fo:inline font-family="monospace">IoDevice</fo:inline> is opened in <fo:inline font-family="monospace">raw</fo:inline> mode,
          some restrictions apply:</fo:block>
	  <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Location</fo:inline> is only allowed to be an
            integer.</fo:block></fo:list-item-body></fo:list-item>
	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The current position of the file is undefined after the
	    operation.</fo:block></fo:list-item-body></fo:list-item>
	  </fo:list-block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As the position is specified as a byte-offset, take special caution
	  when working with files where <fo:inline font-family="monospace">encoding</fo:inline> is set to something else
	  than <fo:inline font-family="monospace">latin1</fo:inline>, as not every byte position is a valid character
	  boundary on such a file.</fo:block>
        </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp8237216"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">pwrite(IoDevice, LocBytes) -&gt; ok | {error, {N, Reason}}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">IoDevice = <fo:inline font-style="italic">io_device()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">LocBytes = [{Location :: <fo:inline font-style="italic">location()</fo:inline>, Bytes :: iodata()}]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">N = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">posix()</fo:inline> | badarg | terminated</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Performs a sequence of <fo:inline font-family="monospace">pwrite/3</fo:inline> in one operation, 
          which is more efficient than calling them one at a time.
          Returns <fo:inline font-family="monospace">ok</fo:inline> or <fo:inline font-family="monospace">{error, {N,
          Reason}}</fo:inline>, where
          <fo:inline font-family="monospace">N</fo:inline> is the number of successful writes done
          before the failure.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When positioning in a file with other <fo:inline font-family="monospace">encoding</fo:inline> than <fo:inline font-family="monospace">latin1</fo:inline>,
	caution must be taken to set the position on a correct character boundary.
	For details, see <fo:inline font-style="italic"><fo:inline font-family="monospace">position/2</fo:inline></fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp8245104"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">pwrite(IoDevice, Location, Bytes) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">IoDevice = <fo:inline font-style="italic">io_device()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Location = <fo:inline font-style="italic">location()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Bytes = iodata()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">posix()</fo:inline> | badarg | terminated</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Combines <fo:inline font-family="monospace">position/2</fo:inline> and <fo:inline font-family="monospace">write/2</fo:inline> in one
          operation, which is more efficient than calling them one at a
          time. If <fo:inline font-family="monospace">IoDevice</fo:inline> has been opened in <fo:inline font-family="monospace">raw</fo:inline> mode,
          some restrictions apply:</fo:block>
	  <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Location</fo:inline> is only allowed to be an
            integer.</fo:block></fo:list-item-body></fo:list-item>
	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The current position of the file is undefined after the
	    operation.</fo:block></fo:list-item-body></fo:list-item>
	  </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When positioning in a file with other <fo:inline font-family="monospace">encoding</fo:inline> than <fo:inline font-family="monospace">latin1</fo:inline>,
	caution must be taken to set the position on a correct character boundary.
	For details, see <fo:inline font-style="italic"><fo:inline font-family="monospace">position/2</fo:inline></fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp8254176"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">read(IoDevice, Number) -&gt; {ok, Data} | eof | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">IoDevice = <fo:inline font-style="italic">io_device()</fo:inline> | atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Number = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Data = string() | binary()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:block/>    <fo:inline font-style="italic">posix()</fo:inline> |<fo:block/>    badarg |<fo:block/>    terminated |<fo:block/>    {no_translation, unicode, latin1}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Reads <fo:inline font-family="monospace">Number</fo:inline> bytes/characters from the file
          referenced by <fo:inline font-family="monospace">IoDevice</fo:inline>. The functions
          <fo:inline font-style="italic"><fo:inline font-family="monospace">read/2</fo:inline></fo:inline>,
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">pread/3</fo:inline></fo:inline>, and
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">read_line/1</fo:inline></fo:inline>
	  are the only ways to read from a file opened in <fo:inline font-family="monospace">raw</fo:inline> mode
	  (although they work for normally opened files, too).</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For files where <fo:inline font-family="monospace">encoding</fo:inline> is set to something else than <fo:inline font-family="monospace">latin1</fo:inline>,
	  one character can be represented by more than one byte on the file.
	  The parameter <fo:inline font-family="monospace">Number</fo:inline> always denotes the number of <fo:inline font-weight="bold">characters</fo:inline>
	  read from the file, while the position in the file can be moved much more than
	  this number when reading a Unicode file.</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Also, if <fo:inline font-family="monospace">encoding</fo:inline> is set to something else than <fo:inline font-family="monospace">latin1</fo:inline>,
	  the <fo:inline font-family="monospace">read/3</fo:inline> call fails if the data contains characters larger than 255,
	  which is why module <fo:inline font-style="italic"><fo:inline font-family="monospace">io(3)</fo:inline></fo:inline>
	  is to be preferred when reading such a file.</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function returns:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{ok, Data}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the file was opened in binary mode, the read bytes are
              returned in a binary, otherwise in a list. The list or
              binary is shorter than the number of bytes requested
              if end of file was reached.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">eof</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returned if <fo:inline font-family="monospace">Number&gt;0</fo:inline> and end of file was
              reached before anything at all could be read.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{error, Reason}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An error occurred.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Typical error reasons:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ebadf</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file is not opened for reading.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{no_translation, unicode, latin1}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file is opened with another <fo:inline font-family="monospace">encoding</fo:inline> than <fo:inline font-family="monospace">latin1</fo:inline> and
	    the data in the file cannot be translated to the byte-oriented data that
	    this function returns.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp8278416"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">read_file(Filename) -&gt; {ok, Binary} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filename = <fo:inline font-style="italic">name_all()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Binary = binary()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">posix()</fo:inline> | badarg | terminated | system_limit</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">{ok, Binary}</fo:inline>, where
          <fo:inline font-family="monospace">Binary</fo:inline> is a binary
          data object that contains the contents of
          <fo:inline font-family="monospace">Filename</fo:inline>, or
          <fo:inline font-family="monospace">{error, Reason}</fo:inline> if an error occurs.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Typical error reasons:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">enoent</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file does not exist.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">eacces</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Missing permission for reading the file, or for
              searching one of the parent directories.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">eisdir</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The named file is a directory.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">enotdir</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A component of the filename is not a directory. On some
              platforms, <fo:inline font-family="monospace">enoent</fo:inline> is returned instead.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">enomem</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There is not enough memory for the contents of the file.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp8292976"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">read_file_info(Filename) -&gt; {ok, FileInfo} | {error, Reason}</fo:block></fo:block><fo:block id="idp8293808"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">read_file_info(Filename, Opts) -&gt; {ok, FileInfo} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filename = <fo:inline font-style="italic">name_all()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Opts = [<fo:inline font-style="italic">file_info_option()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">FileInfo = <fo:inline font-style="italic">file_info()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">posix()</fo:inline> | badarg</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Retrieves information about a file. Returns
          <fo:inline font-family="monospace">{ok, FileInfo}</fo:inline> if successful, otherwise
          <fo:inline font-family="monospace">{error, Reason}</fo:inline>. <fo:inline font-family="monospace">FileInfo</fo:inline>
          is a record
          <fo:inline font-family="monospace">file_info</fo:inline>, defined in the Kernel include file
          <fo:inline font-family="monospace">file.hrl</fo:inline>. Include the following directive in the module
          from which the function is called:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 -include_lib("kernel/include/file.hrl").</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The time type returned in <fo:inline font-family="monospace">atime</fo:inline>, <fo:inline font-family="monospace">mtime</fo:inline>, and <fo:inline font-family="monospace">ctime</fo:inline>
	  is dependent on the time type set in <fo:inline font-family="monospace">Opts :: {time, Type}</fo:inline> as
	  follows:</fo:block>
	  <fo:block space-after="0.25em" space-before="0.25em">
	    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">local</fo:inline></fo:block>
	    <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns local time.</fo:block></fo:block></fo:block-container>
	    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">universal</fo:inline></fo:block>
	    <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns universal time.</fo:block></fo:block></fo:block-container>
	    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">posix</fo:inline></fo:block>
	    <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns seconds since or before Unix time epoch,
	    which is 1970-01-01 00:00 UTC.</fo:block></fo:block></fo:block-container>
	  </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">{time, local}</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the option <fo:inline font-family="monospace">raw</fo:inline> is set, the file server is not called
          and only information about local files is returned.</fo:block>
	  <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As file times are stored in POSIX time on most OS, it is faster to
	  query file information with option <fo:inline font-family="monospace">posix</fo:inline>.</fo:block>
          </fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The record <fo:inline font-family="monospace">file_info</fo:inline> contains the following fields:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">size = integer() &gt;= 0</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Size of file in bytes.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">type = device | directory | other | regular | symlink</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The type of the file.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">access = read | write | read_write | none</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The current system access to the file.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">atime = </fo:inline>
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">date_time()</fo:inline></fo:inline><fo:inline font-family="monospace"> |
	  integer() &gt;= 0</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The last time the file was read.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">mtime = </fo:inline>
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">date_time()</fo:inline></fo:inline><fo:inline font-family="monospace"> |
	  integer() &gt;= 0</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The last time the file was written.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ctime = </fo:inline>
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">date_time()</fo:inline></fo:inline><fo:inline font-family="monospace"> |
	  integer() &gt;=0</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The interpretation of this time field depends on
              the operating system. On Unix, it is the last time
              the file or the <fo:inline font-family="monospace">inode</fo:inline> was changed. In Windows, it is
              the create time.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">mode = integer() &gt;= 0</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file permissions as the sum of the following bit
              values:</fo:block>
            <fo:block space-after="0.25em" space-before="0.25em">
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">8#00400</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">read permission: owner</fo:block></fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">8#00200</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">write permission: owner</fo:block></fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">8#00100</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">execute permission: owner</fo:block></fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">8#00040</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">read permission: group</fo:block></fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">8#00020</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">write permission: group</fo:block></fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">8#00010</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">execute permission: group</fo:block></fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">8#00004</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">read permission: other</fo:block></fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">8#00002</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">write permission: other</fo:block></fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">8#00001</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">execute permission: other</fo:block></fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">16#800</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">set user id on execution</fo:block></fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">16#400</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">set group id on execution</fo:block></fo:block></fo:block-container>
            </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On Unix platforms, other bits than those listed above
		may be set.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">links = integer() &gt;= 0</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Number of links to the file (this is always 1 for
              file systems that have no concept of links).</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">major_device = integer() &gt;= 0</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Identifies the file system where the file is located.
              In Windows, the number indicates a drive as follows:
              0 means A:, 1 means B:, and so on.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">minor_device = integer() &gt;= 0</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Only valid for character devices on Unix. In all other
              cases, this field is zero.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">inode = integer() &gt;= 0</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gives the <fo:inline font-family="monospace">inode</fo:inline> number. On non-Unix file systems,
              this field is zero.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">uid = integer() &gt;= 0</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Indicates the owner of the file. On non-Unix file systems,
              this field is zero.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">gid = integer() &gt;= 0</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gives the group that the owner of the file belongs to.
              On non-Unix file systems, this field is zero.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Typical error reasons:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">eacces</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Missing search permission for one of the parent
              directories of the file.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">enoent</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file does not exist.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">enotdir</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A component of the filename is not a directory. On some
              platforms, <fo:inline font-family="monospace">enoent</fo:inline> is returned instead.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp8355552"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">read_line(IoDevice) -&gt; {ok, Data} | eof | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">IoDevice = <fo:inline font-style="italic">io_device()</fo:inline> | atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Data = string() | binary()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:block/>    <fo:inline font-style="italic">posix()</fo:inline> |<fo:block/>    badarg |<fo:block/>    terminated |<fo:block/>    {no_translation, unicode, latin1}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Reads a line of bytes/characters from the file referenced by
          <fo:inline font-family="monospace">IoDevice</fo:inline>. Lines are defined to be delimited by the
	  linefeed (LF, <fo:inline font-family="monospace">\n</fo:inline>) character, but any carriage return (CR, <fo:inline font-family="monospace">\r</fo:inline>)
	  followed by a newline is also treated as a single LF character (the carriage
	  return is silently ignored). The line is returned <fo:inline font-weight="bold">including</fo:inline> the LF,
	  but excluding any CR immediately followed by an LF. This behaviour is
	  consistent with the behaviour of
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">io:get_line/2</fo:inline></fo:inline>.
	  If end of file is reached without any LF ending the last line, a line with no
	  trailing LF is returned.</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function can be used on files opened in <fo:inline font-family="monospace">raw</fo:inline> mode. However, it is
	  inefficient to use it on <fo:inline font-family="monospace">raw</fo:inline> files if the file is not opened with
	  option <fo:inline font-family="monospace">{read_ahead, Size}</fo:inline> specified. Thus, combining <fo:inline font-family="monospace">raw</fo:inline> and
	  <fo:inline font-family="monospace">{read_ahead, Size}</fo:inline> is highly recommended when opening a text file for
	  raw line-oriented reading.</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">encoding</fo:inline> is set to something else than <fo:inline font-family="monospace">latin1</fo:inline>, the
	  <fo:inline font-family="monospace">read_line/1</fo:inline> call fails if the data contains characters larger than 255,
	  why module <fo:inline font-style="italic"><fo:inline font-family="monospace">io(3)</fo:inline></fo:inline> is to be
	  preferred when reading such a file.</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function returns:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{ok, Data}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">One line from the file is returned, including the trailing LF,
	    but with CRLF sequences replaced by a single LF (see above).</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the file is opened in binary mode, the read bytes are
              returned in a binary, otherwise in a list.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">eof</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returned if end of file was reached
              before anything at all could be read.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{error, Reason}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An error occurred.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Typical error reasons:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ebadf</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file is not opened for reading.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{no_translation, unicode, latin1}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file is opened with another <fo:inline font-family="monospace">encoding</fo:inline> than <fo:inline font-family="monospace">latin1</fo:inline> and
	    the data on the file cannot be translated to the byte-oriented data that
	    this function returns.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp8378832"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">read_link(Name) -&gt; {ok, Filename} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = <fo:inline font-style="italic">name_all()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filename = <fo:inline font-style="italic">filename()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">posix()</fo:inline> | badarg</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns
	<fo:inline font-family="monospace">{ok, Filename}</fo:inline> if
          <fo:inline font-family="monospace">Name</fo:inline> refers to a symbolic link that is
	  not a raw filename, or <fo:inline font-family="monospace">{error, Reason}</fo:inline>
	  otherwise.
          On platforms that do not support symbolic links, the return
          value is <fo:inline font-family="monospace">{error,enotsup}</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Typical error reasons:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">einval</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Name</fo:inline> does not refer to a symbolic link
	    or the name of the file that it refers to does not conform
	    to the expected encoding.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">enoent</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file does not exist.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">enotsup</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Symbolic links are not supported on this platform.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp8390720"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">read_link_all(Name) -&gt; {ok, Filename} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = <fo:inline font-style="italic">name_all()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filename = <fo:inline font-style="italic">filename_all()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">posix()</fo:inline> | badarg</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">{ok, Filename}</fo:inline> if
          <fo:inline font-family="monospace">Name</fo:inline> refers to a symbolic link or
          <fo:inline font-family="monospace">{error, Reason}</fo:inline> otherwise.
          On platforms that do not support symbolic links, the return
          value is <fo:inline font-family="monospace">{error,enotsup}</fo:inline>.</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that <fo:inline font-family="monospace">Filename</fo:inline> can be either a list
	  or a binary.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Typical error reasons:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">einval</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Name</fo:inline> does not refer to a symbolic link.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">enoent</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file does not exist.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">enotsup</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Symbolic links are not supported on this platform.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp8403120"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">read_link_info(Name) -&gt; {ok, FileInfo} | {error, Reason}</fo:block></fo:block><fo:block id="idp8403952"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">read_link_info(Name, Opts) -&gt; {ok, FileInfo} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = <fo:inline font-style="italic">name_all()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Opts = [<fo:inline font-style="italic">file_info_option()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">FileInfo = <fo:inline font-style="italic">file_info()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">posix()</fo:inline> | badarg</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Works like
	<fo:inline font-style="italic"><fo:inline font-family="monospace">read_file_info/1,2</fo:inline></fo:inline>
	except that if <fo:inline font-family="monospace">Name</fo:inline> is a symbolic link, information
	about the link is returned in the <fo:inline font-family="monospace">file_info</fo:inline> record and
          the <fo:inline font-family="monospace">type</fo:inline> field of the record is set to <fo:inline font-family="monospace">symlink</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the option <fo:inline font-family="monospace">raw</fo:inline> is set, the file server is not called
        and only information about local files is returned.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Name</fo:inline> is not a symbolic link, this function returns
          the same result as <fo:inline font-family="monospace">read_file_info/1</fo:inline>.
          On platforms that do not support symbolic links, this function
          is always equivalent to <fo:inline font-family="monospace">read_file_info/1</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp8412512"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">rename(Source, Destination) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Source = Destination = <fo:inline font-style="italic">name_all()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">posix()</fo:inline> | badarg</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tries to rename the file <fo:inline font-family="monospace">Source</fo:inline> to
          <fo:inline font-family="monospace">Destination</fo:inline>.
          It can be used to move files (and directories) between
          directories, but it is not sufficient to specify
          the destination only. The destination filename must also be
          specified. For example, if <fo:inline font-family="monospace">bar</fo:inline> is a normal file and
          <fo:inline font-family="monospace">foo</fo:inline> and <fo:inline font-family="monospace">baz</fo:inline> are directories,
          <fo:inline font-family="monospace">rename("foo/bar", "baz")</fo:inline> returns an error, but
          <fo:inline font-family="monospace">rename("foo/bar", "baz/bar")</fo:inline> succeeds. Returns
          <fo:inline font-family="monospace">ok</fo:inline> if it is successful.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Renaming of open files is not allowed on most platforms
            (see <fo:inline font-family="monospace">eacces</fo:inline> below).</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Typical error reasons:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">eacces</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Missing read or write permissions for the parent
              directories of <fo:inline font-family="monospace">Source</fo:inline> or
              <fo:inline font-family="monospace">Destination</fo:inline>. On
              some platforms, this error is given if either
              <fo:inline font-family="monospace">Source</fo:inline> or <fo:inline font-family="monospace">Destination</fo:inline>
              is open.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">eexist</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Destination</fo:inline> is not an empty directory.
              On some platforms, also given when <fo:inline font-family="monospace">Source</fo:inline> and
              <fo:inline font-family="monospace">Destination</fo:inline> are not of the same type.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">einval</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Source</fo:inline> is a root directory, or
              <fo:inline font-family="monospace">Destination</fo:inline>
              is a subdirectory of <fo:inline font-family="monospace">Source</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">eisdir</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Destination</fo:inline> is a directory, but
              <fo:inline font-family="monospace">Source</fo:inline> is not.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">enoent</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Source</fo:inline> does not exist.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">enotdir</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Source</fo:inline> is a directory, but
              <fo:inline font-family="monospace">Destination</fo:inline> is not.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">exdev</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Source</fo:inline> and <fo:inline font-family="monospace">Destination</fo:inline>
              are on different file systems.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp8440928"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">script(Filename) -&gt; {ok, Value} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filename = <fo:inline font-style="italic">name_all()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Value = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:block/>    <fo:inline font-style="italic">posix()</fo:inline> |<fo:block/>    badarg |<fo:block/>    terminated |<fo:block/>    system_limit |<fo:block/>    {Line :: integer(), Mod :: module(), Term :: term()}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Reads and evaluates Erlang expressions, separated by '.' (or
          ',', a sequence of expressions is also an expression), from
          the file.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns one of the following:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{ok, Value}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file is read and evaluated. <fo:inline font-family="monospace">Value</fo:inline> is
              the value of the last expression.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{error, atom()}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An error occurred when opening the file or reading it.
              For a list of typical error codes, see
	    <fo:inline font-style="italic"><fo:inline font-family="monospace">open/2</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{error, {Line, Mod,
                           Term}}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An error occurred when interpreting the Erlang
              expressions in the file. Use
	      <fo:inline font-style="italic"><fo:inline font-family="monospace">format_error/1</fo:inline></fo:inline>
	      to convert the three-element tuple to an English description
              of the error.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The encoding of <fo:inline font-family="monospace">Filename</fo:inline> can be set
          by a comment as described in
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">epp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp8455344"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">script(Filename, Bindings) -&gt; {ok, Value} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filename = <fo:inline font-style="italic">name_all()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Bindings = <fo:inline font-style="italic">erl_eval:binding_struct()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Value = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:block/>    <fo:inline font-style="italic">posix()</fo:inline> |<fo:block/>    badarg |<fo:block/>    terminated |<fo:block/>    system_limit |<fo:block/>    {Line :: integer(), Mod :: module(), Term :: term()}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The same as <fo:inline font-family="monospace">script/1</fo:inline> but the variable bindings
          <fo:inline font-family="monospace">Bindings</fo:inline> are used in the evaluation. See
          <fo:inline font-style="italic"><fo:inline font-family="monospace">erl_eval(3)</fo:inline></fo:inline> about
          variable bindings.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp8459952"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">sendfile(Filename, Socket) -&gt;<fo:block/>            {ok, integer() &gt;= 0} |<fo:block/>            {error, <fo:inline font-style="italic">inet:posix()</fo:inline> | closed | badarg | not_owner}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filename = <fo:inline font-style="italic">name_all()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Socket = <fo:inline font-style="italic">inet:socket()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends the file <fo:inline font-family="monospace">Filename</fo:inline> to <fo:inline font-family="monospace">Socket</fo:inline>.
        Returns <fo:inline font-family="monospace">{ok, BytesSent}</fo:inline> if successful,
        otherwise <fo:inline font-family="monospace">{error, Reason}</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp8464400"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">sendfile(RawFile, Socket, Offset, Bytes, Opts) -&gt;<fo:block/>            {ok, integer() &gt;= 0} |<fo:block/>            {error, <fo:inline font-style="italic">inet:posix()</fo:inline> | closed | badarg | not_owner}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">RawFile = <fo:inline font-style="italic">fd()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Socket = <fo:inline font-style="italic">inet:socket()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Offset = Bytes = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Opts = [<fo:inline font-style="italic">sendfile_option()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">sendfile_option() = <fo:block/>    {chunk_size, integer() &gt;= 0} | {use_threads, boolean()}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends <fo:inline font-family="monospace">Bytes</fo:inline> from the file
        referenced by <fo:inline font-family="monospace">RawFile</fo:inline> beginning at <fo:inline font-family="monospace">Offset</fo:inline> to
        <fo:inline font-family="monospace">Socket</fo:inline>.
        Returns <fo:inline font-family="monospace">{ok, BytesSent}</fo:inline> if successful,
        otherwise <fo:inline font-family="monospace">{error, Reason}</fo:inline>. If <fo:inline font-family="monospace">Bytes</fo:inline> is set to
	<fo:inline font-family="monospace">0</fo:inline> all data after the specified <fo:inline font-family="monospace">Offset</fo:inline> is sent.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file used must be opened using the <fo:inline font-family="monospace">raw</fo:inline> flag, and the process
	calling <fo:inline font-family="monospace">sendfile</fo:inline> must be the controlling process of the socket.
	See <fo:inline font-style="italic"><fo:inline font-family="monospace">gen_tcp:controlling_process/2</fo:inline></fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the OS used does not support <fo:inline font-family="monospace">sendfile</fo:inline>, an Erlang fallback
	using
	<fo:inline font-style="italic"><fo:inline font-family="monospace">read/2</fo:inline></fo:inline> and
	<fo:inline font-style="italic"><fo:inline font-family="monospace">gen_tcp:send/2</fo:inline></fo:inline> is used.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The option list can contain the following options:</fo:block>
	<fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">chunk_size</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The chunk size used by the Erlang fallback to send
	  data. If using the fallback, set this to a value
	  that comfortably fits in the systems memory. Default is 20 MB.</fo:block></fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">use_threads</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Instructs the emulator to use the <fo:inline font-family="monospace">async</fo:inline> thread pool for the
	  <fo:inline font-family="monospace">sendfile</fo:inline> system call. This can be useful if the OS you are running
	  on does not properly support non-blocking <fo:inline font-family="monospace">sendfile</fo:inline> calls. Notice that
	  using <fo:inline font-family="monospace">async</fo:inline> threads potentially makes your system vulnerable to slow
	  client attacks. If set to <fo:inline font-family="monospace">true</fo:inline> and no <fo:inline font-family="monospace">async</fo:inline> threads are available,
	  the <fo:inline font-family="monospace">sendfile</fo:inline> call returns <fo:inline font-family="monospace">{error,einval}</fo:inline>.
	  Introduced in Erlang/OTP 17.0. Default is <fo:inline font-family="monospace">false</fo:inline>.</fo:block></fo:block></fo:block-container>
	</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp8484272"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">set_cwd(Dir) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Dir = <fo:inline font-style="italic">name()</fo:inline> | EncodedBinary</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">EncodedBinary = binary()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">posix()</fo:inline> | badarg | no_translation</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the current working directory of the file server to
          <fo:inline font-family="monospace">Dir</fo:inline>. Returns <fo:inline font-family="monospace">ok</fo:inline> if successful.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The functions in the module <fo:inline font-family="monospace">file</fo:inline> usually treat binaries
          as raw filenames, that is, they are passed "as is" even when the
	  encoding of the binary does not agree with
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">native_name_encoding()</fo:inline></fo:inline>.
          However, this function expects binaries to be encoded according to the
          value returned by <fo:inline font-family="monospace">native_name_encoding()</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Typical error reasons are:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">enoent</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The directory does not exist.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">enotdir</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A component of <fo:inline font-family="monospace">Dir</fo:inline> is not a directory.
              On some platforms, <fo:inline font-family="monospace">enoent</fo:inline> is returned.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">eacces</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Missing permission for the directory or one of its
              parents.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir</fo:inline> has an improper type,
              such as tuple.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">no_translation</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir</fo:inline> is a <fo:inline font-family="monospace">binary()</fo:inline> with
              characters coded in ISO-latin-1 and the VM is operating
              with unicode filename encoding.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In a future release, a bad type for argument
            <fo:inline font-family="monospace">Dir</fo:inline>
            will probably generate an exception.</fo:block>
        </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp8502800"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">sync(IoDevice) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">IoDevice = <fo:inline font-style="italic">io_device()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">posix()</fo:inline> | badarg | terminated</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Ensures that any buffers kept by the operating system
          (not by the Erlang runtime system) are written to disk. On
          some platforms, this function might have no effect.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A typical error reason is:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">enospc</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Not enough space left to write the file.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp8508080"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">truncate(IoDevice) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">IoDevice = <fo:inline font-style="italic">io_device()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">posix()</fo:inline> | badarg | terminated</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Truncates the file referenced by <fo:inline font-family="monospace">IoDevice</fo:inline> at
          the current position. Returns <fo:inline font-family="monospace">ok</fo:inline> if successful,
          otherwise <fo:inline font-family="monospace">{error, Reason}</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp8512688"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">write(IoDevice, Bytes) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">IoDevice = <fo:inline font-style="italic">io_device()</fo:inline> | atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Bytes = iodata()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">posix()</fo:inline> | badarg | terminated</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Writes <fo:inline font-family="monospace">Bytes</fo:inline> to the file referenced by
          <fo:inline font-family="monospace">IoDevice</fo:inline>. This function is the only way to write to a
          file opened in <fo:inline font-family="monospace">raw</fo:inline> mode (although it works for normally opened
	  files too). Returns <fo:inline font-family="monospace">ok</fo:inline> if successful, and
          <fo:inline font-family="monospace">{error, Reason}</fo:inline> otherwise.</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the file is opened with <fo:inline font-family="monospace">encoding</fo:inline> set to something else than
	  <fo:inline font-family="monospace">latin1</fo:inline>, each byte written can result in many bytes being written to
	  the file, as the byte range 0..255 can represent anything between one and
	  four bytes depending on value and UTF encoding type.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Typical error reasons:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ebadf</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file is not opened for writing.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">enospc</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">No space is left on the device.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp8523808"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">write_file(Filename, Bytes) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filename = <fo:inline font-style="italic">name_all()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Bytes = iodata()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">posix()</fo:inline> | badarg | terminated | system_limit</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Writes the contents of the <fo:inline font-family="monospace">iodata</fo:inline> term <fo:inline font-family="monospace">Bytes</fo:inline>
          to file <fo:inline font-family="monospace">Filename</fo:inline>.
          The file is created if it does not exist.
	  If it exists, the previous contents are overwritten.
	  Returns <fo:inline font-family="monospace">ok</fo:inline> if successful, otherwise
	<fo:inline font-family="monospace">{error, Reason}</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Typical error reasons:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">enoent</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A component of the filename does not exist.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">enotdir</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A component of the filename is not a directory. On some
              platforms, <fo:inline font-family="monospace">enoent</fo:inline> is returned instead.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">enospc</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">No space is left on the device.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">eacces</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Missing permission for writing the file or searching one
              of the parent directories.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">eisdir</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The named file is a directory.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp8538432"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">write_file(Filename, Bytes, Modes) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filename = <fo:inline font-style="italic">name_all()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Bytes = iodata()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Modes = [<fo:inline font-style="italic">mode()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">posix()</fo:inline> | badarg | terminated | system_limit</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-family="monospace">write_file/2</fo:inline>, but takes a third argument
          <fo:inline font-family="monospace">Modes</fo:inline>, a list of possible modes, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">open/2</fo:inline></fo:inline>. The mode flags
          <fo:inline font-family="monospace">binary</fo:inline> and <fo:inline font-family="monospace">write</fo:inline> are implicit, so they are
          not to be used.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp8543920"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">write_file_info(Filename, FileInfo) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block id="idp8544752"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">write_file_info(Filename, FileInfo, Opts) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filename = <fo:inline font-style="italic">name_all()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Opts = [<fo:inline font-style="italic">file_info_option()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">FileInfo = <fo:inline font-style="italic">file_info()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">posix()</fo:inline> | badarg</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Changes file information. Returns <fo:inline font-family="monospace">ok</fo:inline> if successful,
          otherwise <fo:inline font-family="monospace">{error, Reason}</fo:inline>.
          <fo:inline font-family="monospace">FileInfo</fo:inline> is a record
          <fo:inline font-family="monospace">file_info</fo:inline>, defined in the Kernel include file
          <fo:inline font-family="monospace">file.hrl</fo:inline>. Include the following directive in the module
          from which the function is called:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 -include_lib("kernel/include/file.hrl").</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The time type set in <fo:inline font-family="monospace">atime</fo:inline>, <fo:inline font-family="monospace">mtime</fo:inline>, and <fo:inline font-family="monospace">ctime</fo:inline>
	  depends on the time type set in <fo:inline font-family="monospace">Opts :: {time, Type}</fo:inline> as
	  follows:</fo:block>
	  <fo:block space-after="0.25em" space-before="0.25em">
	    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">local</fo:inline></fo:block>
	    <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Interprets the time set as local.</fo:block></fo:block></fo:block-container>
	    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">universal</fo:inline></fo:block>
	    <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Interprets it as universal time.</fo:block></fo:block></fo:block-container>
	    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">posix</fo:inline></fo:block>
	    <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Must be seconds since or before Unix time epoch,
	    which is 1970-01-01 00:00 UTC.</fo:block></fo:block></fo:block-container>
	  </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default is <fo:inline font-family="monospace">{time, local}</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the option <fo:inline font-family="monospace">raw</fo:inline> is set, the file server is not called
          and only information about local files is returned.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following fields are used from the record, if they are
          specified:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">atime = </fo:inline>
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">date_time()</fo:inline></fo:inline><fo:inline font-family="monospace"> |
	  integer() &gt;= 0</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The last time the file was read.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">mtime = </fo:inline>
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">date_time()</fo:inline></fo:inline><fo:inline font-family="monospace"> |
	  integer() &gt;= 0</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The last time the file was written.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ctime = </fo:inline>
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">date_time()</fo:inline></fo:inline><fo:inline font-family="monospace"> |
	  integer() &gt;= 0</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On Unix, any value specified for this field is ignored
              (the "ctime" for the file is set to the current
              time). On Windows, this field is the new creation time to
              set for the file.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">mode = integer() &gt;= 0</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file permissions as the sum of the following bit
              values:</fo:block>
            <fo:block space-after="0.25em" space-before="0.25em">
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">8#00400</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Read permission: owner</fo:block></fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">8#00200</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Write permission: owner</fo:block></fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">8#00100</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Execute permission: owner</fo:block></fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">8#00040</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Read permission: group</fo:block></fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">8#00020</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Write permission: group</fo:block></fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">8#00010</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Execute permission: group</fo:block></fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">8#00004</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Read permission: other</fo:block></fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">8#00002</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Write permission: other</fo:block></fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">8#00001</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Execute permission: other</fo:block></fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">16#800</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Set user id on execution</fo:block></fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">16#400</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Set group id on execution</fo:block></fo:block></fo:block-container>
            </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On Unix platforms, other bits than those listed above
		may be set.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">uid = integer() &gt;= 0</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Indicates the file owner. Ignored for non-Unix
              file systems.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">gid = integer() &gt;= 0</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gives the group that the file owner belongs to.
              Ignored for non-Unix file systems.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Typical error reasons:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">eacces</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Missing search permission for one of the parent
              directories of the file.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">enoent</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file does not exist.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">enotdir</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A component of the filename is not a directory. On some
              platforms, <fo:inline font-family="monospace">enoent</fo:inline> is returned instead.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>
  

  <fo:block id="idp8592640" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">POSIX Error Codes</fo:block>
    
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">eacces</fo:inline> - Permission denied</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">eagain</fo:inline> - Resource temporarily unavailable</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ebadf</fo:inline> - Bad file number</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ebusy</fo:inline> - File busy</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">edquot</fo:inline> - Disk quota exceeded</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">eexist</fo:inline> - File already exists</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">efault</fo:inline> - Bad address in system call argument</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">efbig</fo:inline> - File too large</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">eintr</fo:inline> - Interrupted system call</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">einval</fo:inline> - Invalid argument</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">eio</fo:inline> - I/O error</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">eisdir</fo:inline> - Illegal operation on a directory</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">eloop</fo:inline> - Too many levels of symbolic links</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">emfile</fo:inline> - Too many open files</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">emlink</fo:inline> - Too many links</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">enametoolong</fo:inline> - Filename too long</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">enfile</fo:inline> - File table overflow</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">enodev</fo:inline> - No such device</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">enoent</fo:inline> - No such file or directory</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">enomem</fo:inline> - Not enough memory</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">enospc</fo:inline> - No space left on device</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">enotblk</fo:inline> - Block device required</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">enotdir</fo:inline> - Not a directory</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">enotsup</fo:inline> - Operation not supported</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">enxio</fo:inline> - No such device or address</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">eperm</fo:inline> - Not owner</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">epipe</fo:inline> - Broken pipe</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">erofs</fo:inline> - Read-only file system</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">espipe</fo:inline> - Invalid seek</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">esrch</fo:inline> - No such process</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">estale</fo:inline> - Stale remote file handle</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">exdev</fo:inline> - Cross-domain link</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  

  <fo:block id="idp8618000" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Performance</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Some operating system file operations, for example, a
      <fo:inline font-family="monospace">sync/1</fo:inline> or <fo:inline font-family="monospace">close/1</fo:inline> on a huge file, can block their
      calling thread for seconds. If this affects the emulator main
      thread, the response time is no longer in the order of
      milliseconds, depending on the definition of "soft" in soft
      real-time system.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the device driver thread pool is active, file operations are
      done through those threads instead, so the emulator can go on
      executing Erlang processes. Unfortunately, the time for serving a
      file operation increases because of the extra scheduling required
      from the operating system.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the device driver thread pool is disabled or of size 0, large
      file reads and writes are segmented into many smaller, which
      enable the emulator to serve other processes during the file
      operation. This has the same effect as when using the thread
      pool, but with larger overhead. Other file operations, for
      example, <fo:inline font-family="monospace">sync/1</fo:inline> or <fo:inline font-family="monospace">close/1</fo:inline> on a huge file, still are
      a problem.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For increased performance, raw files are recommended. Raw files
      use the file system of the host machine of the node.</fo:block>
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	For normal files (non-raw), the file server is used to find the files,
	and if the node is running its file server as slave to the file server
	of another node, and the other node runs on some other host machine,
	they can have different file systems.
        However, this is seldom a problem.</fo:block>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A normal file is really a process so it can be used as an I/O
      device (see
      <fo:inline font-style="italic"><fo:inline font-family="monospace">io</fo:inline></fo:inline>).
      Therefore, when data is written to a
      normal file, the sending of the data to the file process, copies 
      all data that are not binaries. Opening the file in binary mode
      and writing binaries is therefore recommended. If the file is
      opened on another node, or if the file server runs as slave to
      the file server of another node, also binaries are copied.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Caching data to reduce the number of file operations, or rather
      the number of calls to the file driver, generally increases
      performance. The following function writes 4 MBytes in 23
      seconds when tested:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
create_file_slow(Name, N) when integer(N), N &gt;= 0 -&gt;
    {ok, FD} = file:open(Name, [raw, write, delayed_write, binary]),
    ok = create_file_slow(FD, 0, N),
    ok = ?FILE_MODULE:close(FD),
    ok.
      
create_file_slow(FD, M, M) -&gt;
    ok;
create_file_slow(FD, M, N) -&gt;
    ok = file:write(FD, &lt;&lt;M:32/unsigned&gt;&gt;),
    create_file_slow(FD, M+1, N).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following, functionally equivalent, function collects 1024
      entries into a list of 128 32-byte binaries before each call to
      <fo:inline font-style="italic"><fo:inline font-family="monospace">write/2</fo:inline></fo:inline> and so
      does the same work in 0.52 seconds,
      which is 44 times faster:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
create_file(Name, N) when integer(N), N &gt;= 0 -&gt;
    {ok, FD} = file:open(Name, [raw, write, delayed_write, binary]),
    ok = create_file(FD, 0, N),
    ok = ?FILE_MODULE:close(FD),
    ok.
      
create_file(FD, M, M) -&gt;
    ok;
create_file(FD, M, N) when M + 1024 =&amp;lt; N -&gt;
    create_file(FD, M, M + 1024, []),
    create_file(FD, M + 1024, N);
create_file(FD, M, N) -&gt;
    create_file(FD, M, N, []).
      
create_file(FD, M, M, R) -&gt;
    ok = file:write(FD, R);
create_file(FD, M, N0, R) when M + 8 =&amp;lt; N0 -&gt;
    N1  = N0-1,  N2  = N0-2,  N3  = N0-3,  N4  = N0-4, 
    N5  = N0-5,  N6  = N0-6,  N7  = N0-7,  N8  = N0-8, 
    create_file(FD, M, N8, 
                [&lt;&lt;N8:32/unsigned,  N7:32/unsigned, 
                   N6:32/unsigned,  N5:32/unsigned, 
                   N4:32/unsigned,  N3:32/unsigned, 
                   N2:32/unsigned,  N1:32/unsigned&gt;&gt; | R]);
create_file(FD, M, N0, R) -&gt;
    N1 = N0-1,
    create_file(FD, M, N1, [&lt;&lt;N1:32/unsigned&gt;&gt; | R]).</fo:block>

    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Trust only your own benchmarks. If the list length in 
        <fo:inline font-family="monospace">create_file/2</fo:inline> above is increased, it runs slightly
        faster, but consumes more memory and causes more memory
        fragmentation. How much this affects your application is
        something that this simple benchmark cannot predict.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the size of each binary is increased to 64 bytes, it
        also runs slightly faster, but the code is then twice as clumsy.
        In the current implementation, binaries larger than 64 bytes are
        stored in memory common to all processes and not copied when
        sent between processes, while these smaller binaries are stored
        on the process heap and copied when sent like any other term.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">So, with a binary size of 68 bytes, <fo:inline font-family="monospace">create_file/2</fo:inline> runs
        30 percent slower than with 64 bytes, and causes much more
        memory fragmentation. Notice that if the binaries were to be sent
        between processes (for example, a non-raw file), the results
        would probably be completely different.</fo:block>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A raw file is really a port. When writing data to a port, it is
      efficient to write a list of binaries. It is not needed to
      flatten a deep list before writing. On Unix hosts, scatter output,
      which writes a set of buffers in one operation, is used when
      possible. In this way <fo:inline font-family="monospace">write(FD, [Bin1, Bin2 | Bin3])</fo:inline>
      writes the contents of the binaries without copying the data
      at all, except for perhaps deep down in the operating system
      kernel.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For raw files, <fo:inline font-family="monospace">pwrite/2</fo:inline> and <fo:inline font-family="monospace">pread/2</fo:inline> are
      efficiently implemented. The file driver is called only once for
      the whole operation, and the list iteration is done in the file
      driver.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The options <fo:inline font-family="monospace">delayed_write</fo:inline> and <fo:inline font-family="monospace">read_ahead</fo:inline> to 
      <fo:inline font-style="italic"><fo:inline font-family="monospace">open/2</fo:inline></fo:inline>
      make the file driver cache data to reduce
      the number of operating system calls. The function
      <fo:inline font-family="monospace">create_file/2</fo:inline> in the recent example takes 60 seconds
      without option <fo:inline font-family="monospace">delayed_write</fo:inline>, which is 2.6
      times slower.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As a bad example, <fo:inline font-family="monospace">create_file_slow/2</fo:inline>
      without options <fo:inline font-family="monospace">raw</fo:inline>, <fo:inline font-family="monospace">binary</fo:inline>, and <fo:inline font-family="monospace">delayed_write</fo:inline>,
      meaning it calls <fo:inline font-family="monospace">open(Name, [write])</fo:inline>, needs
      1 min 20 seconds for the job, which is 3.5 times slower than
      the first example, and 150 times slower than the optimized
      <fo:inline font-family="monospace">create_file/2</fo:inline>.</fo:block>
      <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If an error occurs when accessing an open file with module
      <fo:inline font-style="italic"><fo:inline font-family="monospace">io</fo:inline></fo:inline>,
      the process handling the file exits. The dead
      file process can hang if a process tries to access it later.
      This will be fixed in a future release.</fo:block>
      </fo:block>
  

  <fo:block id="idp8646208" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">See Also</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic"><fo:inline font-family="monospace">filename(3)</fo:inline></fo:inline></fo:block>
  
<fo:block page-break-before="always" id="idp8655712" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">gen_sctp</fo:marker>gen_sctp</fo:block>Erlang module</fo:block>
  <fo:block/>
  gen_sctp
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module provides functions for communicating with
      sockets using the SCTP protocol. The implementation assumes that
      the OS kernel supports SCTP
      <fo:inline font-weight="bold"><fo:basic-link external-destination="href">(RFC 2960)</fo:basic-link></fo:inline>
      through the user-level
      <fo:inline font-weight="bold"><fo:basic-link external-destination="href">Sockets API Extensions</fo:basic-link></fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">During development, this implementation was tested on:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Linux Fedora Core 5.0 (kernel 2.6.15-2054 or later is needed)</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Solaris 10, 11</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">During OTP adaptation it was tested on:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>SUSE Linux Enterprise Server 10 (x86_64) kernel 2.6.16.27-0.6-smp,
        with lksctp-tools-1.0.6</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Briefly on Solaris 10</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>SUSE Linux Enterprise Server 10 Service Pack 1 (x86_64)
        kernel 2.6.16.54-0.2.3-smp with lksctp-tools-1.0.7</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>FreeBSD 8.2</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module was written for one-to-many style sockets
      (type <fo:inline font-family="monospace">seqpacket</fo:inline>). With the addition of
      <fo:inline font-style="italic"><fo:inline font-family="monospace">peeloff/2</fo:inline></fo:inline>,
      one-to-one style sockets (type <fo:inline font-family="monospace">stream</fo:inline>) were introduced.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Record definitions for this module can be found using:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-include_lib("kernel/include/inet_sctp.hrl").</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These record definitions use the "new" spelling 'adaptation',
      not the deprecated 'adaption', regardless of which
      spelling the underlying C API uses.</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Data Types</fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:inline font-weight="bold" space-after="0.25em">assoc_id()</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An opaque term returned in, for example, <fo:inline font-family="monospace">#sctp_paddr_change{}</fo:inline>,
          which identifies an association for an SCTP socket. The term
          is opaque except for the special value <fo:inline font-family="monospace">0</fo:inline>, which has a
          meaning such as "the whole endpoint" or "all future associations".</fo:block>
      
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">option() = <fo:block/>    {active, true | false | once | -32768..32767} |<fo:block/>    {buffer, integer() &gt;= 0} |<fo:block/>    {dontroute, boolean()} |<fo:block/>    {high_msgq_watermark, integer() &gt;= 1} |<fo:block/>    {linger, {boolean(), integer() &gt;= 0}} |<fo:block/>    {low_msgq_watermark, integer() &gt;= 1} |<fo:block/>    {mode, list | binary} |<fo:block/>    list |<fo:block/>    binary |<fo:block/>    {priority, integer() &gt;= 0} |<fo:block/>    {recbuf, integer() &gt;= 0} |<fo:block/>    {reuseaddr, boolean()} |<fo:block/>    {ipv6_v6only, boolean()} |<fo:block/>    {sctp_adaptation_layer, #sctp_setadaptation{}} |<fo:block/>    {sctp_associnfo, #sctp_assocparams{}} |<fo:block/>    {sctp_autoclose, integer() &gt;= 0} |<fo:block/>    {sctp_default_send_param, #sctp_sndrcvinfo{}} |<fo:block/>    {sctp_delayed_ack_time, #sctp_assoc_value{}} |<fo:block/>    {sctp_disable_fragments, boolean()} |<fo:block/>    {sctp_events, #sctp_event_subscribe{}} |<fo:block/>    {sctp_get_peer_addr_info, #sctp_paddrinfo{}} |<fo:block/>    {sctp_i_want_mapped_v4_addr, boolean()} |<fo:block/>    {sctp_initmsg, #sctp_initmsg{}} |<fo:block/>    {sctp_maxseg, integer() &gt;= 0} |<fo:block/>    {sctp_nodelay, boolean()} |<fo:block/>    {sctp_peer_addr_params, #sctp_paddrparams{}} |<fo:block/>    {sctp_primary_addr, #sctp_prim{}} |<fo:block/>    {sctp_rtoinfo, #sctp_rtoinfo{}} |<fo:block/>    {sctp_set_peer_primary_addr, #sctp_setpeerprim{}} |<fo:block/>    {sctp_status, #sctp_status{}} |<fo:block/>    {sndbuf, integer() &gt;= 0} |<fo:block/>    {tos, integer() &gt;= 0}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">One of the
          <fo:inline font-style="italic">SCTP Socket Options</fo:inline>.</fo:block>
      
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">option_name() = <fo:block/>    active |<fo:block/>    buffer |<fo:block/>    dontroute |<fo:block/>    high_msgq_watermark |<fo:block/>    linger |<fo:block/>    low_msgq_watermark |<fo:block/>    mode |<fo:block/>    priority |<fo:block/>    recbuf |<fo:block/>    reuseaddr |<fo:block/>    ipv6_v6only |<fo:block/>    sctp_adaptation_layer |<fo:block/>    sctp_associnfo |<fo:block/>    sctp_autoclose |<fo:block/>    sctp_default_send_param |<fo:block/>    sctp_delayed_ack_time |<fo:block/>    sctp_disable_fragments |<fo:block/>    sctp_events |<fo:block/>    sctp_get_peer_addr_info |<fo:block/>    sctp_i_want_mapped_v4_addr |<fo:block/>    sctp_initmsg |<fo:block/>    sctp_maxseg |<fo:block/>    sctp_nodelay |<fo:block/>    sctp_peer_addr_params |<fo:block/>    sctp_primary_addr |<fo:block/>    sctp_rtoinfo |<fo:block/>    sctp_set_peer_primary_addr |<fo:block/>    sctp_status |<fo:block/>    sndbuf |<fo:block/>    tos</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:inline font-weight="bold" space-after="0.25em">sctp_socket()</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Socket identifier returned from
          <fo:inline font-style="italic"><fo:inline font-family="monospace">open/*</fo:inline></fo:inline>.</fo:block>
        
      
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp8679152"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">abort(Socket, Assoc) -&gt; ok | {error, <fo:inline font-style="italic">inet:posix()</fo:inline>}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Socket = <fo:inline font-style="italic">sctp_socket()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Assoc = #sctp_assoc_change{}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Abnormally terminates the association specified by
          <fo:inline font-family="monospace">Assoc</fo:inline>, without
          flushing of unsent data. The socket itself remains open. Other
          associations opened on this socket are still valid, and the socket
          can be used in new associations.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp8683104"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">close(Socket) -&gt; ok | {error, <fo:inline font-style="italic">inet:posix()</fo:inline>}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Socket = <fo:inline font-style="italic">sctp_socket()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Closes the socket and all associations on it. The unsent
          data is flushed as in <fo:inline font-style="italic"><fo:inline font-family="monospace">eof/2</fo:inline></fo:inline>.
          The <fo:inline font-family="monospace">close/1</fo:inline> call
          is blocking or otherwise depending of the value of
          the <fo:inline font-style="italic"><fo:inline font-family="monospace">linger</fo:inline></fo:inline>
          socket <fo:inline font-style="italic">option</fo:inline>.
          If <fo:inline font-family="monospace">close</fo:inline> does not linger or linger time-out expires,
          the call returns and the data is flushed in the background.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp8689312"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">connect(Socket, Addr, Port, Opts) -&gt;<fo:block/>           {ok, Assoc} | {error, <fo:inline font-style="italic">inet:posix()</fo:inline>}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Socket = <fo:inline font-style="italic">sctp_socket()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Addr = <fo:inline font-style="italic">inet:ip_address()</fo:inline> | <fo:inline font-style="italic">inet:hostname()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Port = <fo:inline font-style="italic">inet:port_number()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Opts = [Opt :: <fo:inline font-style="italic">option()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Assoc = #sctp_assoc_change{}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-family="monospace">connect(Socket, Addr,
          Port, Opts, infinity)</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp8694656"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">connect(Socket, Addr, Port, Opts, Timeout) -&gt;<fo:block/>           {ok, Assoc} | {error, <fo:inline font-style="italic">inet:posix()</fo:inline>}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Socket = <fo:inline font-style="italic">sctp_socket()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Addr = <fo:inline font-style="italic">inet:ip_address()</fo:inline> | <fo:inline font-style="italic">inet:hostname()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Port = <fo:inline font-style="italic">inet:port_number()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Opts = [Opt :: <fo:inline font-style="italic">option()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Assoc = #sctp_assoc_change{}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Establishes a new association for socket <fo:inline font-family="monospace">Socket</fo:inline>,
          with the peer (SCTP server socket) specified by
          <fo:inline font-family="monospace">Addr</fo:inline> and <fo:inline font-family="monospace">Port</fo:inline>.
          <fo:inline font-family="monospace">Timeout</fo:inline>, is expressed in milliseconds.
          A socket can be associated with multiple peers.</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Using a value of <fo:inline font-family="monospace">Timeout</fo:inline> less than
          the maximum time taken by the OS to establish an association (around
          4.5 minutes if the default values from
          <fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC 4960</fo:basic-link></fo:inline>
          are used), can result
          in inconsistent or incorrect return values. This is especially
          relevant for associations sharing the same <fo:inline font-family="monospace">Socket</fo:inline>
          (that is, source address and port), as the controlling process
          blocks until <fo:inline font-family="monospace">connect/*</fo:inline> returns.
          <fo:inline font-style="italic"><fo:inline font-family="monospace">connect_init/*</fo:inline></fo:inline>
          provides an alternative without this limitation.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
          The result of <fo:inline font-family="monospace">connect/*</fo:inline> is an <fo:inline font-family="monospace">#sctp_assoc_change{}</fo:inline>
          event that contains, in particular, the new
          <fo:inline font-style="italic">Association ID</fo:inline>:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#sctp_assoc_change{
      state             = atom(),
      error             = atom(),
      outbound_streams  = integer(),
      inbound_streams   = integer(),
      assoc_id          = assoc_id()
}</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The number of outbound and inbound streams can be set by
          giving an <fo:inline font-family="monospace">sctp_initmsg</fo:inline> option to <fo:inline font-family="monospace">connect</fo:inline> as in:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
connect(Socket, Ip, Port&gt;,
      [{sctp_initmsg,#sctp_initmsg{num_ostreams=OutStreams,
                                   max_instreams=MaxInStreams}}])</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All options <fo:inline font-family="monospace">Opt</fo:inline> are set on the socket before the
          association is attempted. If an option record has undefined
          field values, the options record is first read from the socket
          for those values. In effect, <fo:inline font-family="monospace">Opt</fo:inline> option records
          only define field values to change before connecting.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The returned <fo:inline font-family="monospace">outbound_streams</fo:inline> and <fo:inline font-family="monospace">inbound_streams</fo:inline>
          are the stream numbers on the socket. These can be different
          from the requested values (<fo:inline font-family="monospace">OutStreams</fo:inline> and <fo:inline font-family="monospace">MaxInStreams</fo:inline>,
          respectively) if the peer requires lower values.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">state</fo:inline> can have the following values:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">comm_up</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Association is successfully established. This
            indicates a successful completion of <fo:inline font-family="monospace">connect</fo:inline>.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">cant_assoc</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The association cannot be established
            (<fo:inline font-family="monospace">connect/*</fo:inline> failure).</fo:block></fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Other states do not normally occur in the output from
          <fo:inline font-family="monospace">connect/*</fo:inline>. Rather, they can occur in
          <fo:inline font-family="monospace">#sctp_assoc_change{}</fo:inline> events received instead of data in
          <fo:inline font-style="italic"><fo:inline font-family="monospace">recv/*</fo:inline></fo:inline> calls.
          All of them indicate losing the association because of various error
          conditions, and are listed here for the sake of completeness:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">comm_lost</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"/></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">restart</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"/></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">shutdown_comp</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"/></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Field <fo:inline font-family="monospace">error</fo:inline> can provide more detailed diagnostics.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp8724896"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">connect_init(Socket, Addr, Port, Opts) -&gt;<fo:block/>                ok | {error, <fo:inline font-style="italic">inet:posix()</fo:inline>}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Socket = <fo:inline font-style="italic">sctp_socket()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Addr = <fo:inline font-style="italic">inet:ip_address()</fo:inline> | <fo:inline font-style="italic">inet:hostname()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Port = <fo:inline font-style="italic">inet:port_number()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Opts = [<fo:inline font-style="italic">option()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-family="monospace">connect_init(Socket, Addr,
          Port, Opts, infinity)</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp8730240"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">connect_init(Socket, Addr, Port, Opts, Timeout) -&gt;<fo:block/>                ok | {error, <fo:inline font-style="italic">inet:posix()</fo:inline>}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Socket = <fo:inline font-style="italic">sctp_socket()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Addr = <fo:inline font-style="italic">inet:ip_address()</fo:inline> | <fo:inline font-style="italic">inet:hostname()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Port = <fo:inline font-style="italic">inet:port_number()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Opts = [<fo:inline font-style="italic">option()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Initiates a new association for socket <fo:inline font-family="monospace">Socket</fo:inline>,
          with the peer (SCTP server socket) specified by
          <fo:inline font-family="monospace">Addr</fo:inline> and <fo:inline font-family="monospace">Port</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The fundamental difference between this API
          and <fo:inline font-family="monospace">connect/*</fo:inline> is that the return value is that of the
          underlying OS <fo:inline font-family="monospace">connect(2)</fo:inline> system call. If <fo:inline font-family="monospace">ok</fo:inline> is returned,
          the result of the association establishment is received
          by the calling process as an
          <fo:inline font-style="italic"><fo:inline font-family="monospace">#sctp_assoc_change{}</fo:inline></fo:inline>
          event. The calling process must be prepared to receive this, or
          poll for it using
          <fo:inline font-style="italic"><fo:inline font-family="monospace">recv/*</fo:inline></fo:inline>,
          depending on the value of the active option.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The parameters are as described in
          <fo:inline font-style="italic"><fo:inline font-family="monospace">connect/*</fo:inline></fo:inline>,
           except the <fo:inline font-family="monospace">Timeout</fo:inline> value.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The timer associated with <fo:inline font-family="monospace">Timeout</fo:inline> only supervises
          IP resolution of <fo:inline font-family="monospace">Addr</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp8742576"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">controlling_process(Socket, Pid) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Socket = <fo:inline font-style="italic">sctp_socket()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Pid = pid()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = closed | not_owner | badarg | <fo:inline font-style="italic">inet:posix()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Assigns a new controlling process <fo:inline font-family="monospace">Pid</fo:inline> to
          <fo:inline font-family="monospace">Socket</fo:inline>. Same implementation as
          <fo:inline font-style="italic"><fo:inline font-family="monospace">gen_udp:controlling_process/2</fo:inline></fo:inline>.
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp8747296"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">eof(Socket, Assoc) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Socket = <fo:inline font-style="italic">sctp_socket()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Assoc = #sctp_assoc_change{}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gracefully terminates the association specified by
          <fo:inline font-family="monospace">Assoc</fo:inline>, with
          flushing of all unsent data. The socket itself remains open. Other
          associations opened on this socket are still valid. The socket can
          be used in new associations.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp8751232"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">error_string(ErrorNumber) -&gt; ok | string() | unknown_error</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ErrorNumber = integer()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Translates an SCTP error number from, for example,
          <fo:inline font-family="monospace">#sctp_remote_error{}</fo:inline> or <fo:inline font-family="monospace">#sctp_send_failed{}</fo:inline> into
          an explanatory string, or one of the atoms <fo:inline font-family="monospace">ok</fo:inline> for no
          error or <fo:inline font-family="monospace">undefined</fo:inline> for an unrecognized error.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp8755808"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">listen(Socket, IsServer) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block id="idp8756912"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">listen(Socket, Backlog) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Socket = <fo:inline font-style="italic">sctp_socket()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Backlog = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets up a socket to listen on the IP address and port number
          it is bound to.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For type <fo:inline font-family="monospace">seqpacket</fo:inline>, sockets (the default)
          <fo:inline font-family="monospace">IsServer</fo:inline> must be <fo:inline font-family="monospace">true</fo:inline> or <fo:inline font-family="monospace">false</fo:inline>.
          In contrast to TCP, there is no listening queue length in SCTP.
          If <fo:inline font-family="monospace">IsServer</fo:inline> is <fo:inline font-family="monospace">true</fo:inline>, the socket accepts
          new associations, that is, it becomes an SCTP server socket.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For type <fo:inline font-family="monospace">stream</fo:inline>, sockets Backlog define
          the backlog queue length just like in TCP.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp8764848"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">open() -&gt; {ok, Socket} | {error, <fo:inline font-style="italic">inet:posix()</fo:inline>}</fo:block></fo:block><fo:block id="idp8765680"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">open(Port) -&gt; {ok, Socket} | {error, <fo:inline font-style="italic">inet:posix()</fo:inline>}</fo:block></fo:block><fo:block id="idp8766784"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">open(Opts) -&gt; {ok, Socket} | {error, <fo:inline font-style="italic">inet:posix()</fo:inline>}</fo:block></fo:block><fo:block id="idp8767888"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">open(Port, Opts) -&gt; {ok, Socket} | {error, <fo:inline font-style="italic">inet:posix()</fo:inline>}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Opts = [Opt]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Opt = <fo:block/>    {ip, IP} |<fo:block/>    {ifaddr, IP} |<fo:block/>    <fo:inline font-style="italic">inet:address_family()</fo:inline> |<fo:block/>    {port, Port} |<fo:block/>    {type, SockType} |<fo:block/>    <fo:inline font-style="italic">option()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">IP = <fo:inline font-style="italic">inet:ip_address()</fo:inline> | any | loopback</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Port = <fo:inline font-style="italic">inet:port_number()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">SockType = seqpacket | stream</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Socket = <fo:inline font-style="italic">sctp_socket()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an SCTP socket and binds it to the local addresses
          specified by all <fo:inline font-family="monospace">{ip,IP}</fo:inline> (or synonymously
          <fo:inline font-family="monospace">{ifaddr,IP}</fo:inline>)
          options (this feature is called SCTP multi-homing). The default
          <fo:inline font-family="monospace">IP</fo:inline> and <fo:inline font-family="monospace">Port</fo:inline> are <fo:inline font-family="monospace">any</fo:inline>
          and <fo:inline font-family="monospace">0</fo:inline>, meaning bind to all local addresses on any
          free port.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Other options:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">inet6</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets up the socket for IPv6.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">inet</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets up the socket for IPv4. This is the default.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A default set of socket <fo:inline font-style="italic">options</fo:inline>
          is used. In particular, the socket is opened in
          <fo:inline font-style="italic">binary</fo:inline> and
          <fo:inline font-style="italic">passive</fo:inline> mode,
	  with SockType <fo:inline font-family="monospace">seqpacket</fo:inline>, and with reasonably large
          <fo:inline font-style="italic">kernel</fo:inline> and driver
          <fo:inline font-style="italic">buffers</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp8783488"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">peeloff(Socket, Assoc) -&gt; {ok, NewSocket} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Socket = <fo:inline font-style="italic">sctp_socket()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Assoc = #sctp_assoc_change{} | <fo:inline font-style="italic">assoc_id()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">NewSocket = <fo:inline font-style="italic">sctp_socket()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Branches off an existing association <fo:inline font-family="monospace">Assoc</fo:inline>
          in a socket <fo:inline font-family="monospace">Socket</fo:inline> of type <fo:inline font-family="monospace">seqpacket</fo:inline>
          (one-to-many style) into
          a new socket <fo:inline font-family="monospace">NewSocket</fo:inline> of type <fo:inline font-family="monospace">stream</fo:inline>
          (one-to-one style).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The existing association argument <fo:inline font-family="monospace">Assoc</fo:inline>
          can be either a
          <fo:inline font-style="italic"><fo:inline font-family="monospace">#sctp_assoc_change{}</fo:inline></fo:inline>
          record as returned from, for example,
          <fo:inline font-style="italic"><fo:inline font-family="monospace">recv/*</fo:inline></fo:inline>,
          <fo:inline font-style="italic"><fo:inline font-family="monospace">connect/*</fo:inline></fo:inline>, or
	  from a listening socket in active mode. It can also be just
	  the field <fo:inline font-family="monospace">assoc_id</fo:inline> integer from such a record.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp8793920"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">recv(Socket) -&gt;<fo:block/>        {ok, {FromIP, FromPort, AncData, Data}} | {error, Reason}</fo:block></fo:block><fo:block id="idp8794752"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">recv(Socket, Timeout) -&gt;<fo:block/>        {ok, {FromIP, FromPort, AncData, Data}} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Socket = <fo:inline font-style="italic">sctp_socket()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">FromIP = <fo:inline font-style="italic">inet:ip_address()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">FromPort = <fo:inline font-style="italic">inet:port_number()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">AncData = [#sctp_sndrcvinfo{}]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Data = <fo:block/>    binary() |<fo:block/>    string() |<fo:block/>    #sctp_sndrcvinfo{} |<fo:block/>    #sctp_assoc_change{} |<fo:block/>    #sctp_paddr_change{} |<fo:block/>    #sctp_adaptation_event{}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:block/>    <fo:inline font-style="italic">inet:posix()</fo:inline> |<fo:block/>    #sctp_send_failed{} |<fo:block/>    #sctp_paddr_change{} |<fo:block/>    #sctp_pdapi_event{} |<fo:block/>    #sctp_remote_error{} |<fo:block/>    #sctp_shutdown_event{}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Receives the <fo:inline font-family="monospace">Data</fo:inline> message from any association
          of the socket.
          If the receive times out, <fo:inline font-family="monospace">{error,timeout}</fo:inline> is returned.
          The default time-out is <fo:inline font-family="monospace">infinity</fo:inline>. <fo:inline font-family="monospace">FromIP</fo:inline>
          and <fo:inline font-family="monospace">FromPort</fo:inline> indicate the address of the
          sender.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">AncData</fo:inline> is a list of ancillary data items that
          can be received along with the main <fo:inline font-family="monospace">Data</fo:inline>.
          This list can be empty, or contain a single
          <fo:inline font-style="italic"><fo:inline font-family="monospace">#sctp_sndrcvinfo{}</fo:inline></fo:inline>
          record if receiving of such ancillary data is enabled (see option
          <fo:inline font-style="italic"><fo:inline font-family="monospace">sctp_events</fo:inline></fo:inline>).
          It is enabled by default, as such ancillary data
          provides an easy way of determining the association and stream
          over which the message is received.
          (An alternative way is to get the association ID from
          <fo:inline font-family="monospace">FromIP</fo:inline> and <fo:inline font-family="monospace">FromPort</fo:inline> using
          socket option
          <fo:inline font-style="italic"><fo:inline font-family="monospace">sctp_get_peer_addr_info</fo:inline></fo:inline>,
          but this does still not produce the stream number).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Data</fo:inline> received can be a <fo:inline font-family="monospace">binary()</fo:inline>
          or a <fo:inline font-family="monospace">list()</fo:inline> of bytes (integers in the range 0 through 255)
          depending on the socket mode, or an SCTP event.</fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Possible SCTP events:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:inline font-style="italic"><fo:inline font-family="monospace">#sctp_sndrcvinfo{}</fo:inline></fo:inline>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:inline font-style="italic"><fo:inline font-family="monospace">#sctp_assoc_change{}</fo:inline></fo:inline>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#sctp_paddr_change{
      addr      = {ip_address(),port()},
      state     = atom(),
      error     = integer(),
      assoc_id  = assoc_id()
}</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Indicates change of the status of the IP address of the peer
              specified by
              <fo:inline font-family="monospace">addr</fo:inline> within association <fo:inline font-family="monospace">assoc_id</fo:inline>. Possible
              values of <fo:inline font-family="monospace">state</fo:inline> (mostly self-explanatory) include:</fo:block>
            <fo:block space-after="0.25em" space-before="0.25em">
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">addr_unreachable</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"/></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">addr_available</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"/></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">addr_removed</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"/></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">addr_added</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"/></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">addr_made_prim</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"/></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">addr_confirmed</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"/></fo:block-container>
            </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In case of an error (for example, <fo:inline font-family="monospace">addr_unreachable</fo:inline>),
              field <fo:inline font-family="monospace">error</fo:inline> provides more diagnostics. In such cases,
              event <fo:inline font-family="monospace">#sctp_paddr_change{}</fo:inline> is automatically
              converted into an <fo:inline font-family="monospace">error</fo:inline> term returned by
              <fo:inline font-style="italic"><fo:inline font-family="monospace">recv</fo:inline></fo:inline>.
              The <fo:inline font-family="monospace">error</fo:inline> field value can be converted into a string using
              <fo:inline font-style="italic"><fo:inline font-family="monospace">error_string/1</fo:inline></fo:inline>.
            </fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#sctp_send_failed{
      flags     = true | false,
      error     = integer(),
      info      = #sctp_sndrcvinfo{},
      assoc_id  = assoc_id()
      data      = binary()
}</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The sender can receive this event if a send operation fails.</fo:block>
            <fo:block space-after="0.25em" space-before="0.25em">
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">flags</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A Boolean specifying if the data has been transmitted
                over the wire.</fo:block></fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">error</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Provides extended diagnostics, use
                <fo:inline font-style="italic"><fo:inline font-family="monospace">error_string/1</fo:inline>.</fo:inline></fo:block>
              </fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">info</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The original
                <fo:inline font-style="italic"><fo:inline font-family="monospace">#sctp_sndrcvinfo{}</fo:inline></fo:inline>
                record used in the failed
                <fo:inline font-style="italic"><fo:inline font-family="monospace">send/*</fo:inline>.</fo:inline></fo:block>
              </fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">data</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The whole original data chunk attempted to be sent.</fo:block>
              </fo:block></fo:block-container>
            </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the current implementation of the Erlang/SCTP binding,
              this event is internally converted into an <fo:inline font-family="monospace">error</fo:inline> term
              returned by
              <fo:inline font-style="italic"><fo:inline font-family="monospace">recv/*</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#sctp_adaptation_event{
      adaptation_ind = integer(),
      assoc_id       = assoc_id()
}</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Delivered when a peer sends an adaptation layer indication
              parameter (configured through option
              <fo:inline font-style="italic"><fo:inline font-family="monospace">sctp_adaptation_layer</fo:inline></fo:inline>).
              Notice that with the current implementation of
              the Erlang/SCTP binding, this event is disabled by default.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#sctp_pdapi_event{
      indication = sctp_partial_delivery_aborted,
      assoc_id   = assoc_id()
}</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A partial delivery failure. In the current implementation of
              the Erlang/SCTP binding, this event is internally converted
              into an <fo:inline font-family="monospace">error</fo:inline> term returned by
              <fo:inline font-style="italic"><fo:inline font-family="monospace">recv/*</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp8842368"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">send(Socket, SndRcvInfo, Data) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Socket = <fo:inline font-style="italic">sctp_socket()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">SndRcvInfo = #sctp_sndrcvinfo{}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Data = binary() | iolist()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends the <fo:inline font-family="monospace">Data</fo:inline> message with all sending
          parameters from a
          <fo:inline font-style="italic"><fo:inline font-family="monospace">#sctp_sndrcvinfo{}</fo:inline></fo:inline>
          record. This way, the user can specify the PPID (passed to the remote
          end) and context (passed to the local SCTP layer), which can be used,
          for example, for error identification.
          However, such a fine level of user control is rarely required.
          The function <fo:inline font-family="monospace">send/4</fo:inline> is sufficient for most applications.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp8847680"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">send(Socket, Assoc, Stream, Data) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Socket = <fo:inline font-style="italic">sctp_socket()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Assoc = #sctp_assoc_change{} | <fo:inline font-style="italic">assoc_id()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Stream = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Data = binary() | iolist()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends a <fo:inline font-family="monospace">Data</fo:inline> message over an existing association
          and specified stream.</fo:block>
      </fo:block>
  

  <fo:block id="idp8851712" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">SCTP Socket Options</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The set of admissible SCTP socket options is by construction
      orthogonal to the sets of TCP, UDP, and generic <fo:inline font-family="monospace">inet</fo:inline> options.
      Only options listed here are allowed
      for SCTP sockets. Options can be set on the socket using
      <fo:inline font-style="italic"><fo:inline font-family="monospace">open/1,2</fo:inline></fo:inline> or
      <fo:inline font-style="italic"><fo:inline font-family="monospace">inet:setopts/2</fo:inline></fo:inline>,
      retrieved using
      <fo:inline font-style="italic"><fo:inline font-family="monospace">inet:getopts/2</fo:inline></fo:inline>.
      Options can be changed when calling
      <fo:inline font-style="italic"><fo:inline font-family="monospace">connect/4,5</fo:inline></fo:inline>.</fo:block>
    
    
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{mode, list|binary}</fo:inline> or just <fo:inline font-family="monospace">list</fo:inline> or <fo:inline font-family="monospace">binary</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Determines the type of data returned from
          <fo:inline font-style="italic"><fo:inline font-family="monospace">recv/1,2</fo:inline></fo:inline>.</fo:block>
        
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{active, true|false|once|N}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">false</fo:inline> (passive mode, the default),
              the caller must do an explicit
              <fo:inline font-style="italic"><fo:inline font-family="monospace">recv</fo:inline></fo:inline> call
              to retrieve the available data from the socket.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">true</fo:inline> (full active mode), the pending data or events are
              sent to the owning process.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that this can cause the message queue to overflow,
              as there is no way to throttle the sender in this case
              (no flow control).</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">once</fo:inline>, only one message is automatically placed
              in the message queue, and after that the mode is automatically
              reset to passive. This provides flow control and
              the possibility for the receiver to listen for its incoming
              SCTP data interleaved with other inter-process messages.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">active</fo:inline> is specified as an integer <fo:inline font-family="monospace">N</fo:inline> in the
              range -32768 to 32767 (inclusive), that number is added to
              the socket's counting of data messages to be
              delivered to the controlling process. If the result of the
              addition is negative, the count is set to <fo:inline font-family="monospace">0</fo:inline>. Once the
              count reaches <fo:inline font-family="monospace">0</fo:inline>, either through the delivery of messages
              or by being explicitly set with
              <fo:inline font-style="italic"><fo:inline font-family="monospace">inet:setopts/2</fo:inline></fo:inline>,
              the socket mode is automatically reset to passive (<fo:inline font-family="monospace">{active,
              false}</fo:inline>). When a socket in this active mode transitions to
              passive mode, the message <fo:inline font-family="monospace">{sctp_passive, Socket}</fo:inline> is sent
              to the controlling process to notify it that if it wants to
              receive more data messages from the socket, it must call
              <fo:inline font-style="italic"><fo:inline font-family="monospace">inet:setopts/2</fo:inline></fo:inline>
              to set the socket back into an active mode.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{tos, integer()}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the Type-Of-Service field on the IP datagrams that are sent,
          to the specified value. This effectively determines a prioritization
          policy for the outbound packets. The acceptable values
          are system-dependent.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{priority, integer()}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A protocol-independent equivalent of <fo:inline font-family="monospace">tos</fo:inline> above. Setting
          priority implies setting <fo:inline font-family="monospace">tos</fo:inline> as well.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{dontroute, true|false}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defaults to <fo:inline font-family="monospace">false</fo:inline>. If <fo:inline font-family="monospace">true</fo:inline>, the kernel does not
          send packets through any gateway, only sends them to directly
          connected hosts.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{reuseaddr, true|false}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defaults to <fo:inline font-family="monospace">false</fo:inline>. If true, the local binding address
          <fo:inline font-family="monospace">{IP,Port}</fo:inline> of the socket can be reused immediately.
          No waiting in state <fo:inline font-family="monospace">CLOSE_WAIT</fo:inline> is performed (can  be
          required for high-throughput servers).</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{sndbuf, integer()}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The size, in bytes, of the OS kernel send buffer for this socket.
          Sending errors would occur for datagrams larger than
          <fo:inline font-family="monospace">val(sndbuf)</fo:inline>. Setting this option also adjusts
          the size of the driver buffer (see <fo:inline font-family="monospace">buffer</fo:inline> above).</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{recbuf, integer()}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The size, in bytes, of the OS kernel receive buffer for this socket.
          Sending errors would occur for datagrams larger than
          <fo:inline font-family="monospace">val(recbuf)</fo:inline>. Setting this option also adjusts
          the size of the driver buffer (see <fo:inline font-family="monospace">buffer</fo:inline> above).</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{sctp_module, module()}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Overrides which callback module is used. Defaults to
          <fo:inline font-family="monospace">inet_sctp</fo:inline> for IPv4 and <fo:inline font-family="monospace">inet6_sctp</fo:inline> for IPv6.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{sctp_rtoinfo, #sctp_rtoinfo{}}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#sctp_rtoinfo{
      assoc_id = assoc_id(),
      initial  = integer(),
      max      = integer(),
      min      = integer()
}</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Determines retransmission time-out parameters, in milliseconds,
          for the association(s) specified by <fo:inline font-family="monospace">assoc_id</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">assoc_id = 0</fo:inline> (default) indicates the whole endpoint. See
          <fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC
          2960</fo:basic-link></fo:inline> and
          <fo:inline font-weight="bold"><fo:basic-link external-destination="href">Sockets
          API Extensions for SCTP</fo:basic-link></fo:inline>
          for the exact semantics of the field values.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{sctp_associnfo, #sctp_assocparams{}}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#sctp_assocparams{
      assoc_id                 = assoc_id(),
      asocmaxrxt               = integer(),
      number_peer_destinations = integer(),
      peer_rwnd                = integer(),
      local_rwnd               = integer(),
      cookie_life              = integer()
}</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Determines association parameters for the association(s) specified by
          <fo:inline font-family="monospace">assoc_id</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">assoc_id = 0</fo:inline> (default) indicates the whole endpoint. See
          <fo:inline font-weight="bold"><fo:basic-link external-destination="href">Sockets API Extensions for SCTP</fo:basic-link></fo:inline>
          for the discussion of their semantics. Rarely used.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{sctp_initmsg, #sctp_initmsg{}}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#sctp_initmsg{
     num_ostreams   = integer(),
     max_instreams  = integer(),
     max_attempts   = integer(),
     max_init_timeo = integer()
}</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Determines the default parameters that this socket tries
          to negotiate with its peer while establishing an association with it.
          Is to be set after
          <fo:inline font-style="italic"><fo:inline font-family="monospace">open/*</fo:inline></fo:inline>
          but before the first
          <fo:inline font-style="italic"><fo:inline font-family="monospace">connect/*</fo:inline></fo:inline>.
          <fo:inline font-family="monospace">#sctp_initmsg{}</fo:inline> can also be used
          as ancillary data with the first call of
          <fo:inline font-style="italic"><fo:inline font-family="monospace">send/*</fo:inline></fo:inline> to
          a new peer (when a new association is created).</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">num_ostreams</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Number of outbound streams</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">max_instreams</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Maximum number of inbound streams</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">max_attempts</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Maximum retransmissions while establishing an association</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">max_init_timeo</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Time-out, in milliseconds, for establishing an association</fo:block></fo:block-container>
        </fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{sctp_autoclose, integer() &gt;= 0}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Determines the time, in seconds, after which an idle association is
          automatically closed. <fo:inline font-family="monospace">0</fo:inline> means that the association is
          never automatically closed.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{sctp_nodelay, true|false}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Turns on|off the Nagle algorithm for merging small packets
          into larger ones. This improves throughput at the expense
          of latency.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{sctp_disable_fragments, true|false}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">true</fo:inline>, induces an error on an attempt to send
          a message larger than the current PMTU size
          (which would require fragmentation/reassembling).
          Notice that message fragmentation does not affect
          the logical atomicity of its delivery; this option
          is provided for performance reasons only.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{sctp_i_want_mapped_v4_addr, true|false}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Turns on|off automatic mapping of IPv4 addresses into IPv6 ones
          (if the socket address family is <fo:inline font-family="monospace">AF_INET6</fo:inline>).</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{sctp_maxseg, integer()}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Determines the maximum chunk size if message fragmentation is used.
          If <fo:inline font-family="monospace">0</fo:inline>, the chunk size is limited by the Path MTU only.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{sctp_primary_addr, #sctp_prim{}}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#sctp_prim{
      assoc_id = assoc_id(),
      addr     = {IP, Port}
}
 IP = ip_address()
 Port = port_number()</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For the association specified by <fo:inline font-family="monospace">assoc_id</fo:inline>,
          <fo:inline font-family="monospace">{IP,Port}</fo:inline> must be one of the peer addresses.
          This option determines that the specified address is treated by
          the local SCTP stack as the primary address of the peer.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{sctp_set_peer_primary_addr, #sctp_setpeerprim{}}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#sctp_setpeerprim{
      assoc_id = assoc_id(),
      addr     = {IP, Port}
}
 IP = ip_address()
 Port = port_number()</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When set, informs the peer to use <fo:inline font-family="monospace">{IP, Port}</fo:inline>
          as the primary address of the local endpoint for the association
          specified by <fo:inline font-family="monospace">assoc_id</fo:inline>.</fo:block>
        
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{sctp_adaptation_layer, #sctp_setadaptation{}}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#sctp_setadaptation{
      adaptation_ind = integer()
}</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When set, requests that the local endpoint uses the value specified
          by <fo:inline font-family="monospace">adaptation_ind</fo:inline> as the Adaptation Indication parameter for
          establishing new associations. For details, see
          <fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC 2960</fo:basic-link></fo:inline>
          and
          <fo:inline font-weight="bold"><fo:basic-link external-destination="href">Sockets
          API Extenstions for SCTP</fo:basic-link></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{sctp_peer_addr_params, #sctp_paddrparams{}}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#sctp_paddrparams{
      assoc_id   = assoc_id(),
      address    = {IP, Port},
      hbinterval = integer(),
      pathmaxrxt = integer(),
      pathmtu    = integer(),
      sackdelay  = integer(),
      flags      = list()
}
IP = ip_address()
Port = port_number()</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Determines various per-address parameters for
          the association specified by <fo:inline font-family="monospace">assoc_id</fo:inline> and the peer address
          <fo:inline font-family="monospace">address</fo:inline> (the SCTP protocol supports multi-homing, so
          more than one address can correspond to a specified association).</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">hbinterval</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Heartbeat interval, in milliseconds</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">pathmaxrxt</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Maximum number of retransmissions before this address is
            considered unreachable (and an alternative address is selected)</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">pathmtu</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Fixed Path MTU, if automatic discovery is disabled (see
            <fo:inline font-family="monospace">flags</fo:inline> below)</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sackdelay</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Delay, in milliseconds, for SAC messages (if the delay is
            enabled, see <fo:inline font-family="monospace">flags</fo:inline> below)</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">flags</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following flags are available:</fo:block>
            <fo:block space-after="0.25em" space-before="0.25em">
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">hb_enable</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">Enables heartbeat</fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">hb_disable</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">Disables heartbeat</fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">hb_demand</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">Initiates heartbeat immediately</fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">pmtud_enable</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">Enables automatic Path MTU discovery</fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">pmtud_disable</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">Disables automatic Path MTU discovery</fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sackdelay_enable</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">Enables SAC delay</fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sackdelay_disable</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">Disables SAC delay</fo:block></fo:block-container>
            </fo:block></fo:block></fo:block-container>
        </fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{sctp_default_send_param, #sctp_sndrcvinfo{}}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#sctp_sndrcvinfo{
      stream     = integer(),
      ssn        = integer(),
      flags      = list(),
      ppid       = integer(),
      context    = integer(),
      timetolive = integer(),
      tsn        = integer(),
      cumtsn     = integer(),
      assoc_id   = assoc_id()
}</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">#sctp_sndrcvinfo{}</fo:inline> is used both in this socket option, and as
          ancillary data while sending or receiving SCTP messages. When
          set as an option, it provides default values for subsequent
          <fo:inline font-style="italic"><fo:inline font-family="monospace">send</fo:inline></fo:inline>
          calls on the association specified by
          <fo:inline font-family="monospace">assoc_id</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">assoc_id = 0</fo:inline> (default) indicates
          the whole endpoint.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following fields typically must be specified by the sender:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sinfo_stream</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stream number (0-base) within the association
            to send the messages through;</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sinfo_flags</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following flags are recognised:</fo:block>
            <fo:block space-after="0.25em" space-before="0.25em">
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">unordered</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">The message is to be sent unordered</fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">addr_over</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">The address specified in
                <fo:inline font-style="italic"><fo:inline font-family="monospace">send</fo:inline></fo:inline>
                overwrites the primary peer address</fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">abort</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">Aborts the current association without flushing any unsent
                data</fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">eof</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">Gracefully shuts down the current association, with
                flushing of unsent data</fo:block></fo:block-container>
            </fo:block>
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Other fields are rarely used. For complete information, see
                <fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC 2960</fo:basic-link></fo:inline>
                and
                <fo:inline font-weight="bold"><fo:basic-link external-destination="href">Sockets
                API Extensions for SCTP</fo:basic-link></fo:inline>.</fo:block></fo:block></fo:block-container>
        </fo:block>
        
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{sctp_events, #sctp_event_subscribe{}}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#sctp_event_subscribe{
        data_io_event          = true | false,
        association_event      = true | false,
        address_event          = true | false,
        send_failure_event     = true | false,
        peer_error_event       = true | false,
        shutdown_event         = true | false,
        partial_delivery_event = true | false,
        adaptation_layer_event = true | false
}</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This option determines which
          <fo:inline font-style="italic">SCTP Events</fo:inline> are to be
          received (through
          <fo:inline font-style="italic"><fo:inline font-family="monospace">recv/*</fo:inline></fo:inline>)
          along with the data. The only exception is <fo:inline font-family="monospace">data_io_event</fo:inline>,
          which enables or disables receiving of
          <fo:inline font-style="italic"><fo:inline font-family="monospace">#sctp_sndrcvinfo{}</fo:inline></fo:inline>
          ancillary data, not events.
          By default, all flags except <fo:inline font-family="monospace">adaptation_layer_event</fo:inline> are
          enabled, although <fo:inline font-family="monospace">sctp_data_io_event</fo:inline> and
          <fo:inline font-family="monospace">association_event</fo:inline> are used by the driver itself and not
          exported to the user level.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{sctp_delayed_ack_time, #sctp_assoc_value{}}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#sctp_assoc_value{
      assoc_id    = assoc_id(),
      assoc_value = integer()
}</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Rarely used. Determines the ACK time
          (specified by <fo:inline font-family="monospace">assoc_value</fo:inline>, in milliseconds) for
          the specified association or the whole endpoint
          if <fo:inline font-family="monospace">assoc_value = 0</fo:inline> (default).</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{sctp_status, #sctp_status{}}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#sctp_status{
      assoc_id            = assoc_id(),
      state               = atom(),
      rwnd                = integer(),
      unackdata           = integer(),
      penddata            = integer(),
      instrms             = integer(),
      outstrms            = integer(),
      fragmentation_point = integer(),
      primary             = #sctp_paddrinfo{}
}</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This option is read-only. It determines the status of
          the SCTP association specified by <fo:inline font-family="monospace">assoc_id</fo:inline>.
          The following are the
          possible values of <fo:inline font-family="monospace">state</fo:inline> (the state designations are mostly
          self-explanatory):</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sctp_state_empty</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Default. Means that no other state is active.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sctp_state_closed</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"/></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sctp_state_cookie_wait</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"/></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sctp_state_cookie_echoed</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"/></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sctp_state_established</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"/></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sctp_state_shutdown_pending</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"/></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sctp_state_shutdown_sent</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"/></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sctp_state_shutdown_received</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"/></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sctp_state_shutdown_ack_sent</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"/></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Semantics of the other fields:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sstat_rwnd</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Current receiver window size of the association</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sstat_unackdata</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Number of unacked data chunks</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sstat_penddata</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Number of data chunks pending receipt</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sstat_instrms</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Number of inbound streams</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sstat_outstrms</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Number of outbound streams</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sstat_fragmentation_point</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Message size at which SCTP fragmentation occurs</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sstat_primary</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Information on the current primary peer address (see below for
            the format of <fo:inline font-family="monospace">#sctp_paddrinfo{}</fo:inline>)</fo:block></fo:block-container>
        </fo:block>
        
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{sctp_get_peer_addr_info, #sctp_paddrinfo{}}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#sctp_paddrinfo{
      assoc_id  = assoc_id(),
      address   = {IP, Port},
      state     = inactive | active | unconfirmed,
      cwnd      = integer(),
      srtt      = integer(),
      rto       = integer(),
      mtu       = integer()
}
IP = ip_address()
Port = port_number()</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This option is read-only. It determines the parameters specific to
          the peer address specified by <fo:inline font-family="monospace">address</fo:inline> within the association
          specified by <fo:inline font-family="monospace">assoc_id</fo:inline>. Field <fo:inline font-family="monospace">address</fo:inline> fmust be set by the
          caller; all other fields are filled in on return.
          If <fo:inline font-family="monospace">assoc_id = 0</fo:inline> (default), the <fo:inline font-family="monospace">address</fo:inline>
          is automatically translated into the corresponding
          association ID. This option is rarely used.
          For the semantics of all fields, see
          <fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC 2960</fo:basic-link></fo:inline>
          and
          <fo:inline font-weight="bold"><fo:basic-link external-destination="href">Sockets
          API Extensions for SCTP</fo:basic-link></fo:inline>.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>
  

  <fo:block id="idp9008672" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">SCTP Examples</fo:block>
    
    
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example of an Erlang SCTP server that receives SCTP messages and
         prints them on the standard output:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(sctp_server).

-export([server/0,server/1,server/2]).
-include_lib("kernel/include/inet.hrl").
-include_lib("kernel/include/inet_sctp.hrl").

server() -&gt;
    server(any, 2006).

server([Host,Port]) when is_list(Host), is_list(Port) -&gt;
    {ok, #hostent{h_addr_list = [IP|_]}} = inet:gethostbyname(Host),
    io:format("~w -&gt; ~w~n", [Host, IP]),
    server([IP, list_to_integer(Port)]).

server(IP, Port) when is_tuple(IP) orelse IP == any orelse IP == loopback,
                      is_integer(Port) -&gt;
    {ok,S} = gen_sctp:open(Port, [{recbuf,65536}, {ip,IP}]),
    io:format("Listening on ~w:~w. ~w~n", [IP,Port,S]),
    ok     = gen_sctp:listen(S, true),
    server_loop(S).

server_loop(S) -&gt;
    case gen_sctp:recv(S) of
    {error, Error} -&gt;
        io:format("SCTP RECV ERROR: ~p~n", [Error]);
    Data -&gt;
        io:format("Received: ~p~n", [Data])
    end,
    server_loop(S).</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example of an Erlang SCTP client interacting with the above server.
        Notice that in this example the client creates an association with
        the server with 5 outbound streams. Therefore, sending of
        <fo:inline font-family="monospace">"Test 0"</fo:inline> over stream 0 succeeds, but sending of <fo:inline font-family="monospace">"Test 5"</fo:inline>
        over stream 5 fails. The client then <fo:inline font-family="monospace">abort</fo:inline>s the association,
        which results in that the corresponding event is received on
        the server side.</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(sctp_client).

-export([client/0, client/1, client/2]).
-include_lib("kernel/include/inet.hrl").
-include_lib("kernel/include/inet_sctp.hrl").

client() -&gt;
    client([localhost]).

client([Host]) -&gt;
    client(Host, 2006);
 
client([Host, Port]) when is_list(Host), is_list(Port) -&gt;
    client(Host,list_to_integer(Port)),
    init:stop().

client(Host, Port) when is_integer(Port) -&gt;
    {ok,S}     = gen_sctp:open(),
    {ok,Assoc} = gen_sctp:connect
        (S, Host, Port, [{sctp_initmsg,#sctp_initmsg{num_ostreams=5}}]),
    io:format("Connection Successful, Assoc=~p~n", [Assoc]),

    io:write(gen_sctp:send(S, Assoc, 0, &lt;&lt;"Test 0"&gt;&gt;)),
    io:nl(),
    timer:sleep(10000),
    io:write(gen_sctp:send(S, Assoc, 5, &lt;&lt;"Test 5"&gt;&gt;)),
    io:nl(),
    timer:sleep(10000),
    io:write(gen_sctp:abort(S, Assoc)),
    io:nl(),

    timer:sleep(1000),
    gen_sctp:close(S).</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A simple Erlang SCTP client that uses the <fo:inline font-family="monospace">connect_init</fo:inline> API:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(ex3).

-export([client/4]).
-include_lib("kernel/include/inet.hrl").
-include_lib("kernel/include/inet_sctp.hrl").

client(Peer1, Port1, Peer2, Port2)
  when is_tuple(Peer1), is_integer(Port1), is_tuple(Peer2), is_integer(Port2) -&gt;
    {ok,S}     = gen_sctp:open(),
    SctpInitMsgOpt = {sctp_initmsg,#sctp_initmsg{num_ostreams=5}},
    ActiveOpt = {active, true},
    Opts = [SctpInitMsgOpt, ActiveOpt],
    ok = gen_sctp:connect(S, Peer1, Port1, Opts),
    ok = gen_sctp:connect(S, Peer2, Port2, Opts),
    io:format("Connections initiated~n", []),
    client_loop(S, Peer1, Port1, undefined, Peer2, Port2, undefined).

client_loop(S, Peer1, Port1, AssocId1, Peer2, Port2, AssocId2) -&gt;
    receive
        {sctp, S, Peer1, Port1, {_Anc, SAC}}
          when is_record(SAC, sctp_assoc_change), AssocId1 == undefined -&gt;
            io:format("Association 1 connect result: ~p. AssocId: ~p~n",
                      [SAC#sctp_assoc_change.state,
                       SAC#sctp_assoc_change.assoc_id]),
            client_loop(S, Peer1, Port1, SAC#sctp_assoc_change.assoc_id,
                        Peer2, Port2, AssocId2);

        {sctp, S, Peer2, Port2, {_Anc, SAC}}
          when is_record(SAC, sctp_assoc_change), AssocId2 == undefined -&gt;
            io:format("Association 2 connect result: ~p. AssocId: ~p~n",
                      [SAC#sctp_assoc_change.state, SAC#sctp_assoc_change.assoc_id]),
            client_loop(S, Peer1, Port1, AssocId1, Peer2, Port2,
                       SAC#sctp_assoc_change.assoc_id);

        {sctp, S, Peer1, Port1, Data} -&gt;
            io:format("Association 1: received ~p~n", [Data]),
            client_loop(S, Peer1, Port1, AssocId1,
                        Peer2, Port2, AssocId2);

        {sctp, S, Peer2, Port2, Data} -&gt;
            io:format("Association 2: received ~p~n", [Data]),
            client_loop(S, Peer1, Port1, AssocId1,
                        Peer2, Port2, AssocId2);

        Other -&gt;
            io:format("Other ~p~n", [Other]),
            client_loop(S, Peer1, Port1, AssocId1,
                        Peer2, Port2, AssocId2)

    after 5000 -&gt;
            ok
    end.</fo:block>
  

  <fo:block id="idp9018976" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">See Also</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic"><fo:inline font-family="monospace">gen_tcp(3)</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">gen_udp(3)</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">inet(3)</fo:inline></fo:inline>,
      <fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC 2960</fo:basic-link></fo:inline>
      (Stream Control Transmission Protocol),
      <fo:inline font-weight="bold"><fo:basic-link external-destination="href">Sockets
      API Extensions for SCTP</fo:basic-link></fo:inline></fo:block>
  
<fo:block page-break-before="always" id="idp9030272" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">gen_tcp</fo:marker>gen_tcp</fo:block>Erlang module</fo:block>
  <fo:block/>
  gen_tcp
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module provides functions for communicating
      with sockets using the TCP/IP protocol.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following code fragment is a simple example of
      a client connecting to a server at port 5678, transferring a
      binary, and closing the connection:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
client() -&gt;
    SomeHostInNet = "localhost", % to make it runnable on one machine
    {ok, Sock} = gen_tcp:connect(SomeHostInNet, 5678, 
                                 [binary, {packet, 0}]),
    ok = gen_tcp:send(Sock, "Some Data"),
    ok = gen_tcp:close(Sock).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">At the other end, a server is listening on port 5678, accepts
      the connection, and receives the binary:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
server() -&gt;
    {ok, LSock} = gen_tcp:listen(5678, [binary, {packet, 0}, 
                                        {active, false}]),
    {ok, Sock} = gen_tcp:accept(LSock),
    {ok, Bin} = do_recv(Sock, []),
    ok = gen_tcp:close(Sock),
    Bin.

do_recv(Sock, Bs) -&gt;
    case gen_tcp:recv(Sock, 0) of
        {ok, B} -&gt;
            do_recv(Sock, [Bs, B]);
        {error, closed} -&gt;
            {ok, list_to_binary(Bs)}
    end.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more examples, see section
      <fo:inline font-style="italic">Examples</fo:inline>.</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Data Types</fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">option() = <fo:block/>    {active, true | false | once | -32768..32767} |<fo:block/>    {buffer, integer() &gt;= 0} |<fo:block/>    {delay_send, boolean()} |<fo:block/>    {deliver, port | term} |<fo:block/>    {dontroute, boolean()} |<fo:block/>    {exit_on_close, boolean()} |<fo:block/>    {header, integer() &gt;= 0} |<fo:block/>    {high_msgq_watermark, integer() &gt;= 1} |<fo:block/>    {high_watermark, integer() &gt;= 0} |<fo:block/>    {keepalive, boolean()} |<fo:block/>    {linger, {boolean(), integer() &gt;= 0}} |<fo:block/>    {low_msgq_watermark, integer() &gt;= 1} |<fo:block/>    {low_watermark, integer() &gt;= 0} |<fo:block/>    {mode, list | binary} |<fo:block/>    list |<fo:block/>    binary |<fo:block/>    {nodelay, boolean()} |<fo:block/>    {packet,<fo:block/>     0 |<fo:block/>     1 |<fo:block/>     2 |<fo:block/>     4 |<fo:block/>     raw |<fo:block/>     sunrm |<fo:block/>     asn1 |<fo:block/>     cdr |<fo:block/>     fcgi |<fo:block/>     line |<fo:block/>     tpkt |<fo:block/>     http |<fo:block/>     httph |<fo:block/>     http_bin |<fo:block/>     httph_bin} |<fo:block/>    {packet_size, integer() &gt;= 0} |<fo:block/>    {priority, integer() &gt;= 0} |<fo:block/>    {raw,<fo:block/>     Protocol :: integer() &gt;= 0,<fo:block/>     OptionNum :: integer() &gt;= 0,<fo:block/>     ValueBin :: binary()} |<fo:block/>    {recbuf, integer() &gt;= 0} |<fo:block/>    {reuseaddr, boolean()} |<fo:block/>    {send_timeout, integer() &gt;= 0 | infinity} |<fo:block/>    {send_timeout_close, boolean()} |<fo:block/>    {show_econnreset, boolean()} |<fo:block/>    {sndbuf, integer() &gt;= 0} |<fo:block/>    {tos, integer() &gt;= 0} |<fo:block/>    {ipv6_v6only, boolean()}</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">option_name() = <fo:block/>    active |<fo:block/>    buffer |<fo:block/>    delay_send |<fo:block/>    deliver |<fo:block/>    dontroute |<fo:block/>    exit_on_close |<fo:block/>    header |<fo:block/>    high_msgq_watermark |<fo:block/>    high_watermark |<fo:block/>    keepalive |<fo:block/>    linger |<fo:block/>    low_msgq_watermark |<fo:block/>    low_watermark |<fo:block/>    mode |<fo:block/>    nodelay |<fo:block/>    packet |<fo:block/>    packet_size |<fo:block/>    priority |<fo:block/>    {raw,<fo:block/>     Protocol :: integer() &gt;= 0,<fo:block/>     OptionNum :: integer() &gt;= 0,<fo:block/>     ValueSpec ::<fo:block/>         (ValueSize :: integer() &gt;= 0) | (ValueBin :: binary())} |<fo:block/>    recbuf |<fo:block/>    reuseaddr |<fo:block/>    send_timeout |<fo:block/>    send_timeout_close |<fo:block/>    show_econnreset |<fo:block/>    sndbuf |<fo:block/>    tos |<fo:block/>    ipv6_v6only</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">connect_option() = <fo:block/>    {ip, <fo:inline font-style="italic">inet:socket_address()</fo:inline>} |<fo:block/>    {fd, Fd :: integer() &gt;= 0} |<fo:block/>    {ifaddr, <fo:inline font-style="italic">inet:socket_address()</fo:inline>} |<fo:block/>    <fo:inline font-style="italic">inet:address_family()</fo:inline> |<fo:block/>    {port, <fo:inline font-style="italic">inet:port_number()</fo:inline>} |<fo:block/>    {tcp_module, module()} |<fo:block/>    <fo:inline font-style="italic">option()</fo:inline></fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">listen_option() = <fo:block/>    {ip, <fo:inline font-style="italic">inet:socket_address()</fo:inline>} |<fo:block/>    {fd, Fd :: integer() &gt;= 0} |<fo:block/>    {ifaddr, <fo:inline font-style="italic">inet:socket_address()</fo:inline>} |<fo:block/>    <fo:inline font-style="italic">inet:address_family()</fo:inline> |<fo:block/>    {port, <fo:inline font-style="italic">inet:port_number()</fo:inline>} |<fo:block/>    {backlog, B :: integer() &gt;= 0} |<fo:block/>    {tcp_module, module()} |<fo:block/>    <fo:inline font-style="italic">option()</fo:inline></fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:inline font-weight="bold" space-after="0.25em">socket()</fo:inline></fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As returned by
        <fo:inline font-style="italic"><fo:inline font-family="monospace">accept/1,2</fo:inline></fo:inline> and
        <fo:inline font-style="italic"><fo:inline font-family="monospace">connect/3,4</fo:inline></fo:inline>.</fo:block>
        
      
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp9045536"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">accept(ListenSocket) -&gt; {ok, Socket} | {error, Reason}</fo:block></fo:block><fo:block id="idp9046368"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">accept(ListenSocket, Timeout) -&gt; {ok, Socket} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ListenSocket = <fo:inline font-style="italic">socket()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Returned by
        <fo:inline font-style="italic"><fo:inline font-family="monospace">listen/2</fo:inline></fo:inline>.
      </fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Socket = <fo:inline font-style="italic">socket()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = closed | timeout | system_limit | <fo:inline font-style="italic">inet:posix()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Accepts an incoming connection request on a listening socket.
          <fo:inline font-family="monospace">Socket</fo:inline> must be a socket returned from
          <fo:inline font-style="italic"><fo:inline font-family="monospace">listen/2</fo:inline></fo:inline>.
          <fo:inline font-family="monospace">Timeout</fo:inline> specifies a time-out value in
          milliseconds. Defaults to <fo:inline font-family="monospace">infinity</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{ok, Socket}</fo:inline> if a connection is
            established</fo:block></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{error, closed}</fo:inline> if <fo:inline font-family="monospace">ListenSocket</fo:inline>
            is closed</fo:block></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{error, timeout}</fo:inline> if no connection is established
            within the specified time</fo:block></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{error, system_limit}</fo:inline> if all available ports in the
            Erlang emulator are in use</fo:block></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A POSIX error value if something else goes wrong, see
            <fo:inline font-style="italic"><fo:inline font-family="monospace">inet(3)</fo:inline></fo:inline> for possible
            error values</fo:block></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Packets can be sent to the returned socket <fo:inline font-family="monospace">Socket</fo:inline>
          using
          <fo:inline font-style="italic"><fo:inline font-family="monospace">send/2</fo:inline></fo:inline>.
          Packets sent from the peer are delivered as messages (unless
          <fo:inline font-family="monospace">{active, false}</fo:inline> is specified in the option list for the
          listening socket, in which case packets are retrieved by calling
          <fo:inline font-style="italic"><fo:inline font-family="monospace">recv/2</fo:inline></fo:inline>):</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{tcp, Socket, Data}</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">accept</fo:inline> call does
            <fo:inline font-weight="bold">not</fo:inline> have to be issued from the socket owner
            process. Using version 5.5.3 and higher of the emulator,
            multiple simultaneous accept calls can be issued from
            different processes, which allows for a pool of acceptor
            processes handling incoming connections.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9066656"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">close(Socket) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Socket = <fo:inline font-style="italic">socket()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Closes a TCP socket.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that in most implementations of TCP, doing a <fo:inline font-family="monospace">close</fo:inline> does
         not guarantee that any data sent is delivered to the recipient before
         the close is detected at the remote side. If you want to guarantee
         delivery of the data to the recipient there are two common ways to
         achieve this.</fo:block>
         <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
           <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Use <fo:inline font-style="italic">
             <fo:inline font-family="monospace">gen_tcp:shutdown(Sock, write)</fo:inline></fo:inline> to signal that
             no more data is to be sent and wait for the read side of the
             socket to be closed.</fo:block>
           </fo:block></fo:list-item-body></fo:list-item>
           <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Use the socket option <fo:inline font-style="italic">
             <fo:inline font-family="monospace">{packet, N}</fo:inline></fo:inline> (or something similar) to make
             it possible for the receiver to close the connection when it
             knowns it has received all the data.</fo:block>
           </fo:block></fo:list-item-body></fo:list-item>
         </fo:list-block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9074928"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">connect(Address, Port, Options) -&gt; {ok, Socket} | {error, Reason}</fo:block></fo:block><fo:block id="idp9075760"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">connect(Address, Port, Options, Timeout) -&gt;<fo:block/>           {ok, Socket} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Address = <fo:inline font-style="italic">inet:socket_address()</fo:inline> | <fo:inline font-style="italic">inet:hostname()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Port = <fo:inline font-style="italic">inet:port_number()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Options = [<fo:inline font-style="italic">connect_option()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Socket = <fo:inline font-style="italic">socket()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">inet:posix()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Connects to a server on TCP port <fo:inline font-family="monospace">Port</fo:inline> on the host
          with IP address <fo:inline font-family="monospace">Address</fo:inline>. Argument
          <fo:inline font-family="monospace">Address</fo:inline> can be a hostname or an IP address.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following options are available:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{ip, Address}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the host has many network interfaces, this option
            specifies which one to use.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{ifaddr, Address}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-family="monospace">{ip, Address}</fo:inline>. If the host has many
            network interfaces, this option specifies which one to use.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{fd, integer() &gt;= 0}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a socket has somehow been connected without using
            <fo:inline font-family="monospace">gen_tcp</fo:inline>, use this option to pass the file descriptor
            for it. If <fo:inline font-family="monospace">{ip, Address}</fo:inline> and/or
            <fo:inline font-family="monospace">{port, port_number()}</fo:inline> is combined with this option,  the
            <fo:inline font-family="monospace">fd</fo:inline> is bound to the specified interface and port before
            connecting. If these options are not specified, it is assumed that
            the <fo:inline font-family="monospace">fd</fo:inline> is already bound appropriately.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">inet</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets up the socket for IPv4.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">inet6</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets up the socket for IPv6.</fo:block></fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">local</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	      Sets up a Unix Domain Socket. See
	      <fo:inline font-style="italic">
		<fo:inline font-family="monospace">inet:local_address()</fo:inline>
	      </fo:inline>
	    </fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{port, Port}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies which local port number to use.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{tcp_module, module()}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Overrides which callback module is used. Defaults to
            <fo:inline font-family="monospace">inet_tcp</fo:inline> for IPv4 and <fo:inline font-family="monospace">inet6_tcp</fo:inline> for IPv6.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Opt</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See
            <fo:inline font-style="italic"><fo:inline font-family="monospace">inet:setopts/2</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Packets can be sent to the returned socket <fo:inline font-family="monospace">Socket</fo:inline>
          using <fo:inline font-style="italic"><fo:inline font-family="monospace">send/2</fo:inline></fo:inline>.
          Packets sent from the peer are delivered as messages:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{tcp, Socket, Data}</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the socket is in <fo:inline font-family="monospace">{active, N}</fo:inline> mode (see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">inet:setopts/2</fo:inline></fo:inline>
          for details) and its message counter drops to <fo:inline font-family="monospace">0</fo:inline>, the following
          message is delivered to indicate that the
          socket has transitioned to passive (<fo:inline font-family="monospace">{active, false}</fo:inline>) mode:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{tcp_passive, Socket}</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the socket is closed, the following message is delivered:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{tcp_closed, Socket}</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If an error occurs on the socket, the following message is delivered
          (unless <fo:inline font-family="monospace">{active, false}</fo:inline> is specified in the option list for
          the socket, in which case packets are retrieved by calling
          <fo:inline font-style="italic"><fo:inline font-family="monospace">recv/2</fo:inline></fo:inline>):</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{tcp_error, Socket, Reason}</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The optional <fo:inline font-family="monospace">Timeout</fo:inline> parameter specifies a
          time-out in milliseconds. Defaults to <fo:inline font-family="monospace">infinity</fo:inline>.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default values for options specified to <fo:inline font-family="monospace">connect</fo:inline> can
            be affected by the Kernel configuration parameter
            <fo:inline font-family="monospace">inet_default_connect_options</fo:inline>. For details, see
            <fo:inline font-style="italic"><fo:inline font-family="monospace">inet(3)</fo:inline></fo:inline>.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9112576"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">controlling_process(Socket, Pid) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Socket = <fo:inline font-style="italic">socket()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Pid = pid()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = closed | not_owner | badarg | <fo:inline font-style="italic">inet:posix()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Assigns a new controlling process <fo:inline font-family="monospace">Pid</fo:inline> to
          <fo:inline font-family="monospace">Socket</fo:inline>. The controlling process is the process
          that receives messages from the socket. If called by any other
          process than the current controlling process,
          <fo:inline font-family="monospace">{error, not_owner}</fo:inline> is returned. If the process identified
          by <fo:inline font-family="monospace">Pid</fo:inline> is not an existing local pid,
          <fo:inline font-family="monospace">{error, badarg}</fo:inline> is returned. <fo:inline font-family="monospace">{error, badarg}</fo:inline> may also
          be returned in some cases when <fo:inline font-family="monospace">Socket</fo:inline> is closed
          during the execution of this function.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the socket is set in active mode, this function
          will transfer any messages in the mailbox of the caller
          to the new controlling process.
          If any other process is interacting with the socket while
          the transfer is happening, the transfer may not work correctly
          and messages may remain in the caller's mailbox. For instance
          changing the sockets active mode before the transfere is complete
          may cause this.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9120096"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">listen(Port, Options) -&gt; {ok, ListenSocket} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Port = <fo:inline font-style="italic">inet:port_number()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Options = [<fo:inline font-style="italic">listen_option()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ListenSocket = <fo:inline font-style="italic">socket()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = system_limit | <fo:inline font-style="italic">inet:posix()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets up a socket to listen on port <fo:inline font-family="monospace">Port</fo:inline> on
          the local host.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Port == 0</fo:inline>, the underlying OS assigns an
          available port number, use
          <fo:inline font-style="italic"><fo:inline font-family="monospace">inet:port/1</fo:inline></fo:inline>
          to retrieve it.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following options are available:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">list</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Received <fo:inline font-family="monospace">Packet</fo:inline> is delivered as a list.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">binary</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Received <fo:inline font-family="monospace">Packet</fo:inline> is delivered as a binary.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{backlog, B}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">B</fo:inline> is an integer &gt;= <fo:inline font-family="monospace">0</fo:inline>. The backlog value
            defines the maximum length that the queue of pending connections
            can grow to. Defaults to <fo:inline font-family="monospace">5</fo:inline>.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{ip, Address}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the host has many network interfaces, this option
            specifies which one to listen on.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{port, Port}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies which local port number to use.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{fd, Fd}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a socket has somehow been connected without using
            <fo:inline font-family="monospace">gen_tcp</fo:inline>, use this option to pass the file
            descriptor for it.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{ifaddr, Address}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-family="monospace">{ip, Address}</fo:inline>. If the host has many
            network interfaces, this option specifies which one to use.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">inet6</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets up the socket for IPv6.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">inet</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets up the socket for IPv4.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{tcp_module, module()}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Overrides which callback module is used. Defaults to
            <fo:inline font-family="monospace">inet_tcp</fo:inline> for IPv4 and <fo:inline font-family="monospace">inet6_tcp</fo:inline> for IPv6.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Opt</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See
            <fo:inline font-style="italic"><fo:inline font-family="monospace">inet:setopts/2</fo:inline></fo:inline>.
            </fo:block></fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The returned socket <fo:inline font-family="monospace">ListenSocket</fo:inline> can only be
          used in calls to
          <fo:inline font-style="italic"><fo:inline font-family="monospace">accept/1,2</fo:inline></fo:inline>.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default values for options specified to <fo:inline font-family="monospace">listen</fo:inline> can
            be affected by the Kernel configuration parameter
            <fo:inline font-family="monospace">inet_default_listen_options</fo:inline>. For details, see
            <fo:inline font-style="italic"><fo:inline font-family="monospace">inet(3)</fo:inline></fo:inline>.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9149104"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">recv(Socket, Length) -&gt; {ok, Packet} | {error, Reason}</fo:block></fo:block><fo:block id="idp9149936"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">recv(Socket, Length, Timeout) -&gt; {ok, Packet} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Socket = <fo:inline font-style="italic">socket()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Length = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Packet = string() | binary() | HttpPacket</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = closed | <fo:inline font-style="italic">inet:posix()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">HttpPacket = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>See the description of
        <fo:inline font-family="monospace">HttpPacket</fo:inline> in
        <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:decode_packet/3</fo:inline></fo:inline>
      in ERTS.
      </fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Receives a packet from a socket in passive
          mode. A closed socket is indicated by return value
          <fo:inline font-family="monospace">{error, closed}</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Argument <fo:inline font-family="monospace">Length</fo:inline> is only meaningful when
          the socket is in <fo:inline font-family="monospace">raw</fo:inline> mode and denotes the number of
          bytes to read. If <fo:inline font-family="monospace">Length</fo:inline> is <fo:inline font-family="monospace">0</fo:inline>, all
          available bytes are returned.
          If <fo:inline font-family="monospace">Length</fo:inline> &gt; <fo:inline font-family="monospace">0</fo:inline>, exactly
          <fo:inline font-family="monospace">Length</fo:inline> bytes are returned, or an error;
          possibly discarding less than <fo:inline font-family="monospace">Length</fo:inline> bytes of
          data when the socket is closed from the other side.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The optional <fo:inline font-family="monospace">Timeout</fo:inline> parameter specifies a
          time-out in milliseconds. Defaults to <fo:inline font-family="monospace">infinity</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9161600"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">send(Socket, Packet) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Socket = <fo:inline font-style="italic">socket()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Packet = iodata()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = closed | <fo:inline font-style="italic">inet:posix()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends a packet on a socket.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There is no <fo:inline font-family="monospace">send</fo:inline> call with a time-out option, use socket
          option <fo:inline font-family="monospace">send_timeout</fo:inline> if time-outs are desired. See section
          <fo:inline font-style="italic">Examples</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9166384"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">shutdown(Socket, How) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Socket = <fo:inline font-style="italic">socket()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">How = read | write | read_write</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">inet:posix()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Closes a socket in one or two directions.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">How == write</fo:inline> means closing the socket for
          writing, reading from it is still possible.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">How == read</fo:inline> or there is no outgoing
          data buffered in the <fo:inline font-family="monospace">Socket</fo:inline> port,
          the socket is shut down immediately and any error encountered
          is returned in <fo:inline font-family="monospace">Reason</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If there is data buffered in the socket port, the attempt
          to shutdown the socket is postponed until that data is written to the
          kernel socket send buffer. If any errors are encountered, the socket
          is closed and <fo:inline font-family="monospace">{error, closed}</fo:inline> is returned on the next
          <fo:inline font-style="italic"><fo:inline font-family="monospace">recv/2</fo:inline></fo:inline> or
          <fo:inline font-style="italic"><fo:inline font-family="monospace">send/2</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Option <fo:inline font-family="monospace">{exit_on_close, false}</fo:inline> is useful if the peer has done
          a shutdown on the write side.</fo:block>
      </fo:block>
  

  <fo:block id="idp9176560" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Examples</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following example illustrates use of option
    <fo:inline font-family="monospace">{active,once}</fo:inline> and multiple accepts by implementing a server
    as a number of worker processes doing accept on a single listening
    socket. Function <fo:inline font-family="monospace">start/2</fo:inline> takes the number of worker
    processes and the port number on which to listen for incoming
    connections. If <fo:inline font-family="monospace">LPort</fo:inline> is specified as <fo:inline font-family="monospace">0</fo:inline>, an
    ephemeral port number is used, which is why the start function
    returns the actual port number allocated:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
start(Num,LPort) -&gt;
    case gen_tcp:listen(LPort,[{active, false},{packet,2}]) of
        {ok, ListenSock} -&gt;
            start_servers(Num,ListenSock),
            {ok, Port} = inet:port(ListenSock),
            Port;
        {error,Reason} -&gt;
            {error,Reason}
    end.

start_servers(0,_) -&gt;
    ok;
start_servers(Num,LS) -&gt;
    spawn(?MODULE,server,[LS]),
    start_servers(Num-1,LS).

server(LS) -&gt;
    case gen_tcp:accept(LS) of
        {ok,S} -&gt;
            loop(S),
            server(LS);
        Other -&gt;
            io:format("accept returned ~w - goodbye!~n",[Other]),
            ok
    end.

loop(S) -&gt;
    inet:setopts(S,[{active,once}]),
    receive
        {tcp,S,Data} -&gt;
            Answer = process(Data), % Not implemented in this example
            gen_tcp:send(S,Answer),
            loop(S);
        {tcp_closed,S} -&gt;
            io:format("Socket ~w closed [~w]~n",[S,self()]),
            ok
    end.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example of a simple client:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
client(PortNo,Message) -&gt;
    {ok,Sock} = gen_tcp:connect("localhost",PortNo,[{active,false},
                                                    {packet,2}]),
    gen_tcp:send(Sock,Message),
    A = gen_tcp:recv(Sock,0),
    gen_tcp:close(Sock),
    A.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">send</fo:inline> call does not accept a time-out
      option because time-outs on send is handled through socket
      option <fo:inline font-family="monospace">send_timeout</fo:inline>. The behavior of a send operation with
      no receiver is mainly defined by the underlying TCP
      stack and the network infrastructure. To write
      code that handles a hanging receiver that can eventually cause
      the sender to hang on a <fo:inline font-family="monospace">send</fo:inline> do like the following.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Consider a process that receives data from a client process
      to be forwarded to a server on the network. The process is
      connected to the server through TCP/IP and does not get any acknowledge
      for each message it sends, but has to rely on the send time-out
      option to detect that the other end is unresponsive. Option
      <fo:inline font-family="monospace">send_timeout</fo:inline> can be used when connecting:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
...
{ok,Sock} = gen_tcp:connect(HostAddress, Port,
                            [{active,false},
                             {send_timeout, 5000},
                             {packet,2}]),
                loop(Sock), % See below
...</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the loop where requests are handled, send time-outs can now be
      detected:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
loop(Sock) -&gt;
    receive
        {Client, send_data, Binary} -&gt;
            case gen_tcp:send(Sock,[Binary]) of
                {error, timeout} -&gt;
                    io:format("Send timeout, closing!~n",
                              []),
                    handle_send_timeout(), % Not implemented here
                    Client ! {self(),{error_sending, timeout}},
                    %% Usually, it's a good idea to give up in case of a 
                    %% send timeout, as you never know how much actually 
                    %% reached the server, maybe only a packet header?!
                    gen_tcp:close(Sock);
                {error, OtherSendError} -&gt;
                    io:format("Some other error on socket (~p), closing",
                              [OtherSendError]),
                    Client ! {self(),{error_sending, OtherSendError}},
                    gen_tcp:close(Sock);
                ok -&gt;
                    Client ! {self(), data_sent},
                    loop(Sock)
            end
    end.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Usually it suffices to detect time-outs on receive, as most
      protocols include some sort of acknowledgment from the server,
      but if the protocol is strictly one way, option <fo:inline font-family="monospace">send_timeout</fo:inline>
      comes in handy.</fo:block>
  
<fo:block page-break-before="always" id="idp9197472" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">gen_udp</fo:marker>gen_udp</fo:block>Erlang module</fo:block>
  <fo:block/>
  gen_udp
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module provides functions for communicating
      with sockets using the UDP protocol.</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Data Types</fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">option() = <fo:block/>    {active, true | false | once | -32768..32767} |<fo:block/>    {add_membership, {<fo:inline font-style="italic">inet:ip_address()</fo:inline>, <fo:inline font-style="italic">inet:ip_address()</fo:inline>}} |<fo:block/>    {broadcast, boolean()} |<fo:block/>    {buffer, integer() &gt;= 0} |<fo:block/>    {deliver, port | term} |<fo:block/>    {dontroute, boolean()} |<fo:block/>    {drop_membership, {<fo:inline font-style="italic">inet:ip_address()</fo:inline>, <fo:inline font-style="italic">inet:ip_address()</fo:inline>}} |<fo:block/>    {header, integer() &gt;= 0} |<fo:block/>    {high_msgq_watermark, integer() &gt;= 1} |<fo:block/>    {low_msgq_watermark, integer() &gt;= 1} |<fo:block/>    {mode, list | binary} |<fo:block/>    list |<fo:block/>    binary |<fo:block/>    {multicast_if, <fo:inline font-style="italic">inet:ip_address()</fo:inline>} |<fo:block/>    {multicast_loop, boolean()} |<fo:block/>    {multicast_ttl, integer() &gt;= 0} |<fo:block/>    {priority, integer() &gt;= 0} |<fo:block/>    {raw,<fo:block/>     Protocol :: integer() &gt;= 0,<fo:block/>     OptionNum :: integer() &gt;= 0,<fo:block/>     ValueBin :: binary()} |<fo:block/>    {read_packets, integer() &gt;= 0} |<fo:block/>    {recbuf, integer() &gt;= 0} |<fo:block/>    {reuseaddr, boolean()} |<fo:block/>    {sndbuf, integer() &gt;= 0} |<fo:block/>    {tos, integer() &gt;= 0} |<fo:block/>    {ipv6_v6only, boolean()}</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">option_name() = <fo:block/>    active |<fo:block/>    broadcast |<fo:block/>    buffer |<fo:block/>    deliver |<fo:block/>    dontroute |<fo:block/>    header |<fo:block/>    high_msgq_watermark |<fo:block/>    low_msgq_watermark |<fo:block/>    mode |<fo:block/>    multicast_if |<fo:block/>    multicast_loop |<fo:block/>    multicast_ttl |<fo:block/>    priority |<fo:block/>    {raw,<fo:block/>     Protocol :: integer() &gt;= 0,<fo:block/>     OptionNum :: integer() &gt;= 0,<fo:block/>     ValueSpec ::<fo:block/>         (ValueSize :: integer() &gt;= 0) | (ValueBin :: binary())} |<fo:block/>    read_packets |<fo:block/>    recbuf |<fo:block/>    reuseaddr |<fo:block/>    sndbuf |<fo:block/>    tos |<fo:block/>    ipv6_v6only</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:inline font-weight="bold" space-after="0.25em">socket()</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As returned by
          <fo:inline font-style="italic"><fo:inline font-family="monospace">open/1,2</fo:inline></fo:inline>.</fo:block>
      
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp9205056"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">close(Socket) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Socket = <fo:inline font-style="italic">socket()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Closes a UDP socket.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9207680"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">controlling_process(Socket, Pid) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Socket = <fo:inline font-style="italic">socket()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Pid = pid()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = closed | not_owner | badarg | <fo:inline font-style="italic">inet:posix()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Assigns a new controlling process <fo:inline font-family="monospace">Pid</fo:inline> to
          <fo:inline font-family="monospace">Socket</fo:inline>. The controlling process is the process
          that receives messages from the socket. If called by any other
          process than the current controlling process,
          <fo:inline font-family="monospace">{error, not_owner}</fo:inline> is returned. If the process identified
          by <fo:inline font-family="monospace">Pid</fo:inline> is not an existing local pid,
          <fo:inline font-family="monospace">{error, badarg}</fo:inline> is returned. <fo:inline font-family="monospace">{error, badarg}</fo:inline> may also
          be returned in some cases when <fo:inline font-family="monospace">Socket</fo:inline> is closed
          during the execution of this function.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9214288"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">open(Port) -&gt; {ok, Socket} | {error, Reason}</fo:block></fo:block><fo:block id="idp9215120"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">open(Port, Opts) -&gt; {ok, Socket} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Port = <fo:inline font-style="italic">inet:port_number()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Opts = [Option]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Option = <fo:block/>    {ip, <fo:inline font-style="italic">inet:socket_address()</fo:inline>} |<fo:block/>    {fd, integer() &gt;= 0} |<fo:block/>    {ifaddr, <fo:inline font-style="italic">inet:socket_address()</fo:inline>} |<fo:block/>    <fo:inline font-style="italic">inet:address_family()</fo:inline> |<fo:block/>    {port, <fo:inline font-style="italic">inet:port_number()</fo:inline>} |<fo:block/>    <fo:inline font-style="italic">option()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Socket = <fo:inline font-style="italic">socket()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">inet:posix()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Associates a UDP port number (<fo:inline font-family="monospace">Port</fo:inline>) with the
          calling process.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following options are available:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">list</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Received <fo:inline font-family="monospace">Packet</fo:inline> is delivered as a list.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">binary</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Received <fo:inline font-family="monospace">Packet</fo:inline> is delivered as a binary.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{ip, Address}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the host has many network interfaces, this option
            specifies which one to use.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{ifaddr, Address}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-family="monospace">{ip, Address}</fo:inline>. If the host has many
            network interfaces, this option specifies which one to
            use.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{fd, integer() &gt;= 0}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a socket has somehow been opened without using
            <fo:inline font-family="monospace">gen_udp</fo:inline>, use this option to pass the file descriptor
            for it. If <fo:inline font-family="monospace">Port</fo:inline> is not set to <fo:inline font-family="monospace">0</fo:inline> and/or
            <fo:inline font-family="monospace">{ip, ip_address()}</fo:inline> is combined with this option, the
            <fo:inline font-family="monospace">fd</fo:inline> is bound to the specified interface and port after it is
            being opened. If these options are not specified, it is assumed that
            the <fo:inline font-family="monospace">fd</fo:inline> is already bound appropriately.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">inet6</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets up the socket for IPv6.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">inet</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets up the socket for IPv4.</fo:block></fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">local</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	      Sets up a Unix Domain Socket. See
	      <fo:inline font-style="italic">
		<fo:inline font-family="monospace">inet:local_address()</fo:inline>
	      </fo:inline>
	    </fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{udp_module, module()}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Overrides which callback module is used. Defaults to
            <fo:inline font-family="monospace">inet_udp</fo:inline> for IPv4 and <fo:inline font-family="monospace">inet6_udp</fo:inline> for IPv6.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{multicast_if, Address}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the local device for a multicast socket.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{multicast_loop, true | false}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-family="monospace">true</fo:inline>, sent multicast packets are looped back to
            the local sockets.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{multicast_ttl, Integer}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Option <fo:inline font-family="monospace">multicast_ttl</fo:inline> changes the time-to-live (TTL)
            for outgoing multicast datagrams to control the scope of the
            multicasts.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Datagrams with a TTL of 1 are not forwarded beyond the local
              network. Defaults to <fo:inline font-family="monospace">1</fo:inline>.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{add_membership, {MultiAddress, InterfaceAddress}}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Joins a multicast group.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{drop_membership, {MultiAddress, InterfaceAddress}}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Leaves a multicast group.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Opt</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See
            <fo:inline font-style="italic"><fo:inline font-family="monospace">inet:setopts/2</fo:inline></fo:inline>.
            </fo:block></fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The returned socket <fo:inline font-family="monospace">Socket</fo:inline> is used to send
          packets from this port with
          <fo:inline font-style="italic"><fo:inline font-family="monospace">send/4</fo:inline></fo:inline>.
          When UDP packets arrive
          at the opened port, if the socket is in an active mode, the packets
          are delivered as messages to the controlling process:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{udp, Socket, IP, InPortNo, Packet}</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the socket is not in an active mode, data can be
          retrieved through the
          <fo:inline font-style="italic"><fo:inline font-family="monospace">recv/2,3</fo:inline></fo:inline> calls.
          Notice that arriving UDP packets that are longer than
          the receive buffer option specifies can be truncated
          without warning.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a socket in <fo:inline font-family="monospace">{active, N}</fo:inline> mode (see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">inet:setopts/2</fo:inline></fo:inline>
          for details), transitions to passive (<fo:inline font-family="monospace">{active, false}</fo:inline>) mode,
          the controlling process is notified by a message of the following
          form:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{udp_passive, Socket}</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">IP</fo:inline> and <fo:inline font-family="monospace">InPortNo</fo:inline> define the address from which
          <fo:inline font-family="monospace">Packet</fo:inline> comes. <fo:inline font-family="monospace">Packet</fo:inline> is a list of bytes if
          option <fo:inline font-family="monospace">list</fo:inline> is specified. <fo:inline font-family="monospace">Packet</fo:inline> is a
          binary if option <fo:inline font-family="monospace">binary</fo:inline> is specified.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default value for the receive buffer option is
          <fo:inline font-family="monospace">{recbuf, 8192}</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Port == 0</fo:inline>, the underlying OS assigns a free
          UDP port, use
          <fo:inline font-style="italic"><fo:inline font-family="monospace">inet:port/1</fo:inline></fo:inline>
          to retrieve it.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9260704"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">recv(Socket, Length) -&gt;<fo:block/>        {ok, {Address, Port, Packet}} | {error, Reason}</fo:block></fo:block><fo:block id="idp9261536"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">recv(Socket, Length, Timeout) -&gt;<fo:block/>        {ok, {Address, Port, Packet}} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Socket = <fo:inline font-style="italic">socket()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Length = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Address = <fo:inline font-style="italic">inet:ip_address()</fo:inline> | <fo:inline font-style="italic">inet:returned_non_ip_address()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Port = <fo:inline font-style="italic">inet:port_number()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Packet = string() | binary()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = not_owner | <fo:inline font-style="italic">inet:posix()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Receives a packet from a socket in passive mode. Optional parameter
          <fo:inline font-family="monospace">Timeout</fo:inline> specifies a time-out in milliseconds.
          Defaults to <fo:inline font-family="monospace">infinity</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9265312"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">send(Socket, Address, Port, Packet) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Socket = <fo:inline font-style="italic">socket()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Address = <fo:inline font-style="italic">inet:socket_address()</fo:inline> | <fo:inline font-style="italic">inet:hostname()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Port = <fo:inline font-style="italic">inet:port_number()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Packet = iodata()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = not_owner | <fo:inline font-style="italic">inet:posix()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	  Sends a packet to the specified address and port. Argument
          <fo:inline font-family="monospace">Address</fo:inline> can be a hostname or a socket address.
	</fo:block>
      </fo:block>
  
<fo:block page-break-before="always" id="idp9274768" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">global</fo:marker>global</fo:block>Erlang module</fo:block>
  <fo:block/>
  global
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module consists of the following services:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Registration of global names</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Global locks</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Maintenance of the fully connected network</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These services are controlled through the process
      <fo:inline font-family="monospace">global_name_server</fo:inline> that exists on every node. The global
      name server starts automatically when a node is started.
      With the term <fo:inline font-weight="bold">global</fo:inline> is meant over a system consisting
      of many Erlang nodes.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The ability to globally register names is a central concept in
      the programming of distributed Erlang systems. In this module,
      the equivalent of the <fo:inline font-family="monospace">register/2</fo:inline> and <fo:inline font-family="monospace">whereis/1</fo:inline>
      BIFs (for local name registration) are provided, but for a
      network of Erlang nodes. A registered name is an alias for a
      process identifier (pid). The global name server monitors
      globally registered pids. If a process terminates, the name is
      also globally unregistered.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The registered names are stored in replica global name tables on
      every node. There is no central storage point. Thus,
      the translation of a name to a pid is fast, as it is always done
      locally. For any action resulting in a change to the global name table,
      all tables on other nodes are automatically updated.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Global locks have lock identities and are set on a specific
      resource. For example, the specified resource can be a pid.
      When a global lock is set, access to the locked resource is
      denied for all resources other than the lock requester.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Both the registration and lock services are atomic.
      All nodes involved in these actions have the same view of
      the information.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The global name server also performs the critical task of
      continuously monitoring changes in node configuration. If a node
      that runs a globally registered process goes down, the name
      is globally unregistered. To this end, the global name
      server subscribes to <fo:inline font-family="monospace">nodeup</fo:inline> and <fo:inline font-family="monospace">nodedown</fo:inline> messages
      sent from module <fo:inline font-family="monospace">net_kernel</fo:inline>. Relevant Kernel
      application variables in this context are <fo:inline font-family="monospace">net_setuptime</fo:inline>,
      <fo:inline font-family="monospace">net_ticktime</fo:inline>, and <fo:inline font-family="monospace">dist_auto_connect</fo:inline>. See also
      <fo:inline font-style="italic"><fo:inline font-family="monospace">kernel(6)</fo:inline></fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The name server also maintains a fully connected network. For
      example, if node <fo:inline font-family="monospace">N1</fo:inline> connects to node <fo:inline font-family="monospace">N2</fo:inline> (which is
      already connected to <fo:inline font-family="monospace">N3</fo:inline>), the global name servers on the
      nodes <fo:inline font-family="monospace">N1</fo:inline> and <fo:inline font-family="monospace">N3</fo:inline> ensure that also <fo:inline font-family="monospace">N1</fo:inline>
      and <fo:inline font-family="monospace">N3</fo:inline> are connected. If this is not desired,
      command-line flag <fo:inline font-family="monospace">-connect_all false</fo:inline> can be used (see also
      <fo:inline font-style="italic"><fo:inline font-family="monospace">erl(1)</fo:inline></fo:inline>).
      In this case, the name registration service cannot be used, but the
      lock mechanism still works.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the global name server fails to connect nodes (<fo:inline font-family="monospace">N1</fo:inline> and
      <fo:inline font-family="monospace">N3</fo:inline> in the example), a warning event is sent to the
      error logger. The presence of such an event does not exclude the
      nodes to connect later (you can, for
      example, try command <fo:inline font-family="monospace">rpc:call(N1, net_adm, ping, [N2])</fo:inline> in
      the Erlang shell), but it indicates a network problem.</fo:block>
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the fully connected network is not set up properly, try
        first to increase the value of <fo:inline font-family="monospace">net_setuptime</fo:inline>.</fo:block>
    </fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Data Types</fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">id() = {ResourceId :: term(), LockRequesterId :: term()}</fo:block></fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp9299088"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">del_lock(Id) -&gt; true</fo:block></fo:block><fo:block id="idp9299920"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">del_lock(Id, Nodes) -&gt; true</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Id = <fo:inline font-style="italic">id()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Nodes = [node()]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Deletes the lock <fo:inline font-family="monospace">Id</fo:inline> synchronously.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9303120"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">notify_all_name(Name, Pid1, Pid2) -&gt; none</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Pid1 = Pid2 = pid()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Can be used as a name resolving function for
          <fo:inline font-style="italic"><fo:inline font-family="monospace">register_name/3</fo:inline></fo:inline>
          and
          <fo:inline font-style="italic"><fo:inline font-family="monospace">re_register_name/3</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function unregisters both pids and sends the message
          <fo:inline font-family="monospace">{global_name_conflict, Name, OtherPid}</fo:inline> to both
          processes.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9308928"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">random_exit_name(Name, Pid1, Pid2) -&gt; pid()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Pid1 = Pid2 = pid()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Can be used as a name resolving function for
          <fo:inline font-style="italic"><fo:inline font-family="monospace">register_name/3</fo:inline></fo:inline>
          and
          <fo:inline font-style="italic"><fo:inline font-family="monospace">re_register_name/3</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function randomly selects one of the pids for registration and
          kills the other one.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9313856"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">random_notify_name(Name, Pid1, Pid2) -&gt; pid()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Pid1 = Pid2 = pid()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Can be used as a name resolving function for
          <fo:inline font-style="italic"><fo:inline font-family="monospace">register_name/3</fo:inline></fo:inline>
          and
          <fo:inline font-style="italic"><fo:inline font-family="monospace">re_register_name/3</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function randomly selects one of the pids for registration, and
          sends the message <fo:inline font-family="monospace">{global_name_conflict, Name}</fo:inline> to
          the other pid.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9319696"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">re_register_name(Name, Pid) -&gt; yes</fo:block></fo:block><fo:block id="idp9320528"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">re_register_name(Name, Pid, Resolve) -&gt; yes</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Pid = pid()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Resolve = <fo:inline font-style="italic">method()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">method() = <fo:block/>    fun((Name :: term(), Pid :: pid(), Pid2 :: pid()) -&gt;<fo:block/>            pid() | none)</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>{<fo:inline font-family="monospace">Module</fo:inline>, <fo:inline font-family="monospace">Function</fo:inline>}
        is also allowed.
      </fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Atomically changes the registered name <fo:inline font-family="monospace">Name</fo:inline> on
          all nodes to refer to <fo:inline font-family="monospace">Pid</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Function <fo:inline font-family="monospace">Resolve</fo:inline> has the same behavior as in
          <fo:inline font-style="italic"><fo:inline font-family="monospace">register_name/2,3</fo:inline></fo:inline>.
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9328432"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">register_name(Name, Pid) -&gt; yes | no</fo:block></fo:block><fo:block id="idp9329264"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">register_name(Name, Pid, Resolve) -&gt; yes | no</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Pid = pid()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Resolve = <fo:inline font-style="italic">method()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">method() = <fo:block/>    fun((Name :: term(), Pid :: pid(), Pid2 :: pid()) -&gt;<fo:block/>            pid() | none)</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>{<fo:inline font-family="monospace">Module</fo:inline>, <fo:inline font-family="monospace">Function</fo:inline>} is also
        allowed for backward compatibility, but its use is deprecated.
      </fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Globally associates name <fo:inline font-family="monospace">Name</fo:inline> with a pid, that
          is, globally notifies all nodes of a new global name in a network
          of Erlang nodes.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When new nodes are added to the network, they are informed
          of the globally registered names that already exist.
          The network is also informed of any global names in newly
          connected nodes. If any name clashes are discovered,
          function <fo:inline font-family="monospace">Resolve</fo:inline> is called. Its purpose is to
          decide which pid is correct. If the function crashes, or
          returns anything other than one of the pids, the name is
          unregistered. This function is called once for each name
          clash.</fo:block>
	<fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you plan to change code without restarting your system,
	  you must use an external fun (<fo:inline font-family="monospace">fun Module:Function/Arity</fo:inline>)
	  as function <fo:inline font-family="monospace">Resolve</fo:inline>. If you use a
	  local fun, you can never replace the code for the module that
	  the fun belongs to.</fo:block>
	</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Three predefined resolve functions exist:
          <fo:inline font-family="monospace">random_exit_name/3</fo:inline>, <fo:inline font-family="monospace">random_notify_name/3</fo:inline>, and
          <fo:inline font-family="monospace">notify_all_name/3</fo:inline>. If no <fo:inline font-family="monospace">Resolve</fo:inline> function
          is defined, <fo:inline font-family="monospace">random_exit_name</fo:inline> is used. This means that one
          of the two registered processes is selected as correct
          while the other is killed.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is completely synchronous, that is,
          when this function returns, the name is either registered on
          all nodes or none.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function returns <fo:inline font-family="monospace">yes</fo:inline> if successful, <fo:inline font-family="monospace">no</fo:inline> if
          it fails. For example, <fo:inline font-family="monospace">no</fo:inline> is returned if an attempt
          is made to register an already registered process or to
          register a process with a name that is already in use.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Releases up to and including Erlang/OTP R10 did not check if the
            process was already registered. The global name table could
            therefore become inconsistent. The old
            (buggy) behavior can be chosen by giving the Kernel
            application variable <fo:inline font-family="monospace">global_multi_name_action</fo:inline> the
            value <fo:inline font-family="monospace">allow</fo:inline>.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a process with a registered name dies, or the node goes
          down, the name is unregistered on all nodes.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9346576"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">registered_names() -&gt; [Name]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of all globally registered names.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9349248"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">send(Name, Msg) -&gt; Pid</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = Msg = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Pid = pid()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends message <fo:inline font-family="monospace">Msg</fo:inline> to the pid globally registered
          as <fo:inline font-family="monospace">Name</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Name</fo:inline> is not a globally registered
          name, the calling function exits with reason
          <fo:inline font-family="monospace">{badarg, {Name, Msg}}</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9355536"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">set_lock(Id) -&gt; boolean()</fo:block></fo:block><fo:block id="idp9356368"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">set_lock(Id, Nodes) -&gt; boolean()</fo:block></fo:block><fo:block id="idp9357200"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">set_lock(Id, Nodes, Retries) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Id = <fo:inline font-style="italic">id()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Nodes = [node()]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Retries = <fo:inline font-style="italic">retries()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">id() = {ResourceId :: term(), LockRequesterId :: term()}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">retries() = integer() &gt;= 0 | infinity</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets a lock on the specified nodes (or on all nodes if none
          are specified) on <fo:inline font-family="monospace">ResourceId</fo:inline> for
          <fo:inline font-family="monospace">LockRequesterId</fo:inline>. If a lock already exists on
          <fo:inline font-family="monospace">ResourceId</fo:inline> for another requester than
          <fo:inline font-family="monospace">LockRequesterId</fo:inline>, and <fo:inline font-family="monospace">Retries</fo:inline>
          is not equal to <fo:inline font-family="monospace">0</fo:inline>, the process sleeps for a while and tries
          to execute the action later. When <fo:inline font-family="monospace">Retries</fo:inline>
          attempts have been made, <fo:inline font-family="monospace">false</fo:inline> is returned, otherwise
          <fo:inline font-family="monospace">true</fo:inline>. If <fo:inline font-family="monospace">Retries</fo:inline> is <fo:inline font-family="monospace">infinity</fo:inline>,
          <fo:inline font-family="monospace">true</fo:inline> is eventually returned (unless the lock is never
          released).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If no value for <fo:inline font-family="monospace">Retries</fo:inline> is specified,
          <fo:inline font-family="monospace">infinity</fo:inline> is used.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is completely synchronous.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a process that holds a lock dies, or the node goes
          down, the locks held by the process are deleted.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The global name server keeps track of all processes sharing
          the same lock, that is, if two processes set the same lock,
          both processes must delete the lock.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function does not address the problem of a deadlock. A
          deadlock can never occur as long as processes only lock one
          resource at a time. A deadlock can occur if some processes
          try to lock two or more resources. It is up to the
          application to detect and rectify a deadlock.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Avoid the following values of <fo:inline font-family="monospace">ResourceId</fo:inline>,
            otherwise Erlang/OTP does not work properly:</fo:block>
          <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">dist_ac</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">global</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">mnesia_adjust_log_writes</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">mnesia_table_lock</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">pg2</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          </fo:list-block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9376544"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">sync() -&gt; ok | {error, Reason :: term()}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Synchronizes the global name server with all nodes known to
          this node. These are the nodes that are returned from
          <fo:inline font-family="monospace">erlang:nodes()</fo:inline>. When this function returns,
          the global name server receives global information from
          all nodes. This function can be called when new nodes are
          added to the network.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The only possible error reason <fo:inline font-family="monospace">Reason</fo:inline> is
          <fo:inline font-family="monospace">{"global_groups definition error", Error}</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9381312"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">trans(Id, Fun) -&gt; Res | aborted</fo:block></fo:block><fo:block id="idp9382144"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">trans(Id, Fun, Nodes) -&gt; Res | aborted</fo:block></fo:block><fo:block id="idp9382976"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">trans(Id, Fun, Nodes, Retries) -&gt; Res | aborted</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Id = <fo:inline font-style="italic">id()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Fun = <fo:inline font-style="italic">trans_fun()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Nodes = [node()]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Retries = <fo:inline font-style="italic">retries()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Res = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">retries() = integer() &gt;= 0 | infinity</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">trans_fun() = function() | {module(), atom()}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets a lock on <fo:inline font-family="monospace">Id</fo:inline> (using
          <fo:inline font-style="italic"><fo:inline font-family="monospace">set_lock/3</fo:inline></fo:inline>).
          If this succeeds, <fo:inline font-family="monospace">Fun()</fo:inline> is evaluated and the
          result <fo:inline font-family="monospace">Res</fo:inline>
          is returned. Returns <fo:inline font-family="monospace">aborted</fo:inline> if the lock attempt fails.
          If <fo:inline font-family="monospace">Retries</fo:inline> is set to <fo:inline font-family="monospace">infinity</fo:inline>,
          the transaction does not abort.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">infinity</fo:inline> is the default setting and is used if
          no value is specified for <fo:inline font-family="monospace">Retries</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9392432"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">unregister_name(Name) -&gt; term()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Removes the globally registered name <fo:inline font-family="monospace">Name</fo:inline> from
          the network of Erlang nodes.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9395712"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">whereis_name(Name) -&gt; pid() | undefined</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the pid with the globally registered name
          <fo:inline font-family="monospace">Name</fo:inline>. Returns <fo:inline font-family="monospace">undefined</fo:inline> if the name is not
          globally registered.</fo:block>
      </fo:block>
  

  <fo:block id="idp9399632" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">See Also</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic"><fo:inline font-family="monospace">global_group(3)</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">net_kernel(3)</fo:inline></fo:inline></fo:block>
  
<fo:block page-break-before="always" id="idp9408512" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">global_group</fo:marker>global_group</fo:block>Erlang module</fo:block>
  <fo:block/>
  global_group
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module makes it possible to partition the nodes of a
      system into <fo:inline font-weight="bold">global groups</fo:inline>. Each global group has its own
      global namespace, see <fo:inline font-style="italic">
      <fo:inline font-family="monospace">global(3)</fo:inline></fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The main advantage of dividing systems into global groups is that
      the background load decreases while the number of nodes to be
      updated is reduced when manipulating globally registered names.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Kernel configuration parameter <fo:inline font-family="monospace">global_groups</fo:inline> defines
      the global groups (see also
      <fo:inline font-style="italic"><fo:inline font-family="monospace">kernel(6)</fo:inline></fo:inline>
      and <fo:inline font-style="italic"><fo:inline font-family="monospace">config(4)</fo:inline></fo:inline>):</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{global_groups, [GroupTuple :: group_tuple()]}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For the processes and nodes to run smoothly using the global
      group functionality, the following criteria must be met:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An instance of the global group server, <fo:inline font-family="monospace">global_group</fo:inline>,
          must be running on each node. The processes are automatically
          started and synchronized when a node is started.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All involved nodes must agree on the global group definition,
          otherwise the behavior of the system is undefined.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">All</fo:inline> nodes in the system must belong to exactly
          one global group.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the following descriptions, a <fo:inline font-weight="bold">group node</fo:inline> is a node
      belonging to the same global group as the local node.</fo:block>
  

 <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Data Types</fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">group_tuple() = <fo:block/>    {GroupName :: <fo:inline font-style="italic">group_name()</fo:inline>, [node()]} |<fo:block/>    {GroupName :: <fo:inline font-style="italic">group_name()</fo:inline>,<fo:block/>     PublishType :: <fo:inline font-style="italic">publish_type()</fo:inline>,<fo:block/>     [node()]}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-family="monospace">GroupTuple</fo:inline> without <fo:inline font-family="monospace">PublishType</fo:inline> is the same as a
          <fo:inline font-family="monospace">GroupTuple</fo:inline> with <fo:inline font-family="monospace">PublishType</fo:inline> equal to <fo:inline font-family="monospace">normal</fo:inline>.
	</fo:block>
      
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">group_name() = atom()</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">publish_type() = hidden | normal</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A node started with command-line flag <fo:inline font-family="monospace">-hidden</fo:inline> (see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">erl(1)</fo:inline></fo:inline>) is said
          to be a <fo:inline font-weight="bold">hidden</fo:inline> node. A hidden node establishes hidden
          connections to nodes not part of the same global group, but
          normal (visible) connections to nodes part of the same global
          group.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A global group defined with <fo:inline font-family="monospace">PublishType</fo:inline> equal to
	  <fo:inline font-family="monospace">hidden</fo:inline> is said to be a hidden global group.
	  All nodes in a hidden global
          group are hidden nodes, whether they are started with
          command-line flag <fo:inline font-family="monospace">-hidden</fo:inline> or not.</fo:block>
      
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">name() = atom()</fo:block></fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A registered name.</fo:block>

    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">where() = {node, node()} | {group, <fo:inline font-style="italic">group_name()</fo:inline>}</fo:block></fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp9436512"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">global_groups() -&gt; {GroupName, GroupNames} | undefined</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">GroupName = <fo:inline font-style="italic">group_name()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">GroupNames = [GroupName]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a tuple containing the name of the global group that
          the local node belongs to, and the list of all other known
          group names. Returns <fo:inline font-family="monospace">undefined</fo:inline> if no global groups are
          defined.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9439776"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">info() -&gt; [<fo:inline font-style="italic">info_item()</fo:inline>]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">info_item() = <fo:block/>    {state, State :: <fo:inline font-style="italic">sync_state()</fo:inline>} |<fo:block/>    {own_group_name, GroupName :: <fo:inline font-style="italic">group_name()</fo:inline>} |<fo:block/>    {own_group_nodes, Nodes :: [node()]} |<fo:block/>    {synched_nodes, Nodes :: [node()]} |<fo:block/>    {sync_error, Nodes :: [node()]} |<fo:block/>    {no_contact, Nodes :: [node()]} |<fo:block/>    {other_groups, Groups :: [<fo:inline font-style="italic">group_tuple()</fo:inline>]} |<fo:block/>    {monitoring, Pids :: [pid()]}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">sync_state() = no_conf | synced</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list containing information about the global
          groups. Each list element is a tuple. The order of
          the tuples is undefined.</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{state, State}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the local node is part of a global group,
              <fo:inline font-family="monospace">State</fo:inline> is equal to <fo:inline font-family="monospace">synced</fo:inline>.
              If no global groups are defined,
              <fo:inline font-family="monospace">State</fo:inline> is equal to <fo:inline font-family="monospace">no_conf</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{own_group_name, GroupName}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The name (atom) of the group that the local node belongs
              to.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{own_group_nodes, Nodes}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A list of node names (atoms), the group nodes.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{synced_nodes, Nodes}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A list of node names, the group nodes currently
              synchronized with the local node.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{sync_error, Nodes}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A list of node names, the group nodes with which
              the local node has failed to synchronize.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{no_contact, Nodes}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A list of node names, the group nodes to which there are
              currently no connections.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{other_groups, Groups}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Groups</fo:inline> is a list of tuples
              <fo:inline font-family="monospace">{GroupName, Nodes}</fo:inline>,
              specifying the name and nodes
              of the other global groups.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{monitoring, Pids}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A list of pids, specifying the processes that have
              subscribed to <fo:inline font-family="monospace">nodeup</fo:inline> and <fo:inline font-family="monospace">nodedown</fo:inline> messages.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9464768"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">monitor_nodes(Flag) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Flag = boolean()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Depending on <fo:inline font-family="monospace">Flag</fo:inline>, the calling process
          starts subscribing (<fo:inline font-family="monospace">Flag</fo:inline> equal to
          <fo:inline font-family="monospace">true</fo:inline>) or stops subscribing (<fo:inline font-family="monospace">Flag</fo:inline>
          equal to <fo:inline font-family="monospace">false</fo:inline>) to node status change messages.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A process that has subscribed receives the messages
          <fo:inline font-family="monospace">{nodeup, Node}</fo:inline> and <fo:inline font-family="monospace">{nodedown, Node}</fo:inline> when a
          group node connects or disconnects, respectively.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9471536"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">own_nodes() -&gt; Nodes</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Nodes = [Node :: node()]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the names of all group nodes, regardless of their
          current status.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9474224"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">registered_names(Where) -&gt; Names</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Where = <fo:inline font-style="italic">where()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Names = [Name :: <fo:inline font-style="italic">name()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of all names that are globally registered
          on the specified node or in the specified global group.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9476976"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">send(Name, Msg) -&gt; pid() | {badarg, {Name, Msg}}</fo:block></fo:block><fo:block id="idp9477808"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">send(Where, Name, Msg) -&gt; pid() | {badarg, {Name, Msg}}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Where = <fo:inline font-style="italic">where()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = <fo:inline font-style="italic">name()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Msg = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Searches for <fo:inline font-family="monospace">Name</fo:inline>, globally registered on
          the specified node or in the specified global group, or
          (if argument <fo:inline font-family="monospace">Where</fo:inline> is not provided) in any
          global group. The global groups are searched in the order that
          they appear in the value of configuration parameter
          <fo:inline font-family="monospace">global_groups</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Name</fo:inline> is found, message
          <fo:inline font-family="monospace">Msg</fo:inline> is sent to
          the corresponding pid. The pid is also the return value of
          the function. If the name is not found, the function returns
          <fo:inline font-family="monospace">{badarg, {Name, Msg}}</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9485424"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">sync() -&gt; ok</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Synchronizes the group nodes, that is, the global name
          servers on the group nodes. Also checks the names globally
          registered in the current global group and unregisters them
          on any known node not part of the group.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If synchronization is not possible, an error report is sent
          to the error logger (see also
          <fo:inline font-style="italic"><fo:inline font-family="monospace">error_logger(3)</fo:inline></fo:inline>.
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">{error, {'invalid global_groups definition', Bad}}</fo:inline>
          if configuration parameter <fo:inline font-family="monospace">global_groups</fo:inline> has an
          invalid value <fo:inline font-family="monospace">Bad</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9491536"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">whereis_name(Name) -&gt; pid() | undefined</fo:block></fo:block><fo:block id="idp9492368"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">whereis_name(Where, Name) -&gt; pid() | undefined</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Where = <fo:inline font-style="italic">where()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = <fo:inline font-style="italic">name()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Searches for <fo:inline font-family="monospace">Name</fo:inline>, globally registered on
          the specified node or in the specified global group, or
          (if argument <fo:inline font-family="monospace">Where</fo:inline> is not provided) in any global
          group. The global groups are searched in the order that
          they appear in the value of configuration parameter
          <fo:inline font-family="monospace">global_groups</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Name</fo:inline> is found, the corresponding pid is
          returned. If the name is not found, the function returns
          <fo:inline font-family="monospace">undefined</fo:inline>.</fo:block>
      </fo:block>
  

  <fo:block id="idp9498608" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Notes</fo:block>
    
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the situation where a node has lost its connections to other
        nodes in its global group, but has connections to nodes in other
        global groups, a request from another global group can produce an
        incorrect or misleading result. For example, the isolated node can
        have inaccurate information about registered names in its
        global group.</fo:block></fo:block></fo:list-item-body></fo:list-item>
     <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Function
       <fo:inline font-style="italic"><fo:inline font-family="monospace">send/2,3</fo:inline></fo:inline>
       is not secure.</fo:block></fo:block></fo:list-item-body></fo:list-item>
     <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Distribution of applications is highly dependent of the global
        group definitions. It is not recommended that an application is
        distributed over many global groups, as
        the registered names can be moved to another global group at
        failover/takeover. Nothing prevents this to be done, but
        the application code must then handle the situation.</fo:block></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  

  <fo:block id="idp9503520" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">See Also</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic"><fo:inline font-family="monospace">global(3)</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">erl(1)</fo:inline></fo:inline></fo:block>
  
<fo:block page-break-before="always" id="idp9512400" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">heart</fo:marker>heart</fo:block>Erlang module</fo:block>
  <fo:block/>
  heart
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This modules contains the interface to the <fo:inline font-family="monospace">heart</fo:inline> process.
      <fo:inline font-family="monospace">heart</fo:inline> sends periodic heartbeats to an external port
      program, which is also named <fo:inline font-family="monospace">heart</fo:inline>. The purpose of
      the <fo:inline font-family="monospace">heart</fo:inline> port program is to check that the Erlang runtime system
      it is supervising is still running. If the port program has not
      received any heartbeats within <fo:inline font-family="monospace">HEART_BEAT_TIMEOUT</fo:inline> seconds
      (defaults to 60 seconds), the system can be rebooted.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An Erlang runtime system to be monitored by a heart program
      is to be started with command-line flag <fo:inline font-family="monospace">-heart</fo:inline> (see
      also <fo:inline font-style="italic"><fo:inline font-family="monospace">erl(1)</fo:inline></fo:inline>).
      The <fo:inline font-family="monospace">heart</fo:inline> process is then started automatically:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% <fo:inline font-weight="bold">erl -heart ...</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the system is to be rebooted because of missing heartbeats,
      or a terminated Erlang runtime system, environment variable
      <fo:inline font-family="monospace">HEART_COMMAND</fo:inline> must be set before the system is started.
      If this variable is not set, a warning text is printed but
      the system does not reboot.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To reboot on Windows, <fo:inline font-family="monospace">HEART_COMMAND</fo:inline> can be
      set to <fo:inline font-family="monospace">heart -shutdown</fo:inline> (included in the Erlang delivery)
      or to any other suitable program that can activate a reboot.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The environment variable <fo:inline font-family="monospace">HEART_BEAT_TIMEOUT</fo:inline>
      can be used to configure the heart
      time-outs; it can be set in the operating system shell before Erlang
      is started or be specified at the command line:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% <fo:inline font-weight="bold">erl -heart -env HEART_BEAT_TIMEOUT 30 ...</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The value (in seconds) must be in the range 10 &lt; X &lt;= 65535.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that if the system clock is adjusted with
      more than <fo:inline font-family="monospace">HEART_BEAT_TIMEOUT</fo:inline> seconds, <fo:inline font-family="monospace">heart</fo:inline>
      times out and tries to reboot the system. This can occur, for
      example, if the system clock is adjusted automatically by use of the
      Network Time Protocol (NTP).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a crash occurs, an <fo:inline font-family="monospace">erl_crash.dump</fo:inline> is <fo:inline font-weight="bold">not</fo:inline>
      written unless environment variable
        <fo:inline font-family="monospace">ERL_CRASH_DUMP_SECONDS</fo:inline> is set:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% <fo:inline font-weight="bold">erl -heart -env ERL_CRASH_DUMP_SECONDS 10 ...</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a regular core dump is wanted, let <fo:inline font-family="monospace">heart</fo:inline> know by setting
      the kill signal to abort using environment variable
      <fo:inline font-family="monospace">HEART_KILL_SIGNAL=SIGABRT</fo:inline>. If unset, or not set to
      <fo:inline font-family="monospace">SIGABRT</fo:inline>, the default behavior is a kill signal using
      <fo:inline font-family="monospace">SIGKILL</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% <fo:inline font-weight="bold">erl -heart -env HEART_KILL_SIGNAL SIGABRT ...</fo:inline></fo:block>
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"> If heart should <fo:inline font-weight="bold">not</fo:inline> kill the Erlang runtime system, this can be indicated
      using the environment variable <fo:inline font-family="monospace">HEART_NO_KILL=TRUE</fo:inline>.
      This can be useful if the command executed by heart takes care of this,
      for example as part of a specific cleanup sequence. 
      If unset, or not set to <fo:inline font-family="monospace">TRUE</fo:inline>, the default behaviour
      will be to kill as described above.
  </fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% <fo:inline font-weight="bold">erl -heart -env HEART_NO_KILL 1 ...</fo:inline></fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Furthermore, <fo:inline font-family="monospace">ERL_CRASH_DUMP_SECONDS</fo:inline> has the
      following behavior on <fo:inline font-family="monospace">heart</fo:inline>:</fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_CRASH_DUMP_SECONDS=0</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Suppresses the writing of a crash dump file entirely,
        thus rebooting the runtime system immediately.
        This is the same as not setting the environment variable.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_CRASH_DUMP_SECONDS=-1</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Setting the environment variable to a negative value does not
        reboot the runtime system until the crash dump file is completly
        written.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_CRASH_DUMP_SECONDS=S</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">heart</fo:inline> waits for <fo:inline font-family="monospace">S</fo:inline> seconds to let the crash dump
        file be written. After <fo:inline font-family="monospace">S</fo:inline> seconds, <fo:inline font-family="monospace">heart</fo:inline> reboots the
        runtime system, whether the crash dump file is written or not.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the following descriptions, all functions fail with reason
      <fo:inline font-family="monospace">badarg</fo:inline> if <fo:inline font-family="monospace">heart</fo:inline> is not started.</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Data Types</fo:block>
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">heart_option() = check_schedulers</fo:block></fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp9546080"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">set_cmd(Cmd) -&gt; ok | {error, {bad_cmd, Cmd}}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Cmd = string()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets a temporary reboot command. This command is used if
          a <fo:inline font-family="monospace">HEART_COMMAND</fo:inline> other than the one specified with
          the environment variable is to be used to reboot
          the system. The new Erlang runtime system uses (if it misbehaves)
          environment variable <fo:inline font-family="monospace">HEART_COMMAND</fo:inline> to reboot.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Limitations: Command string <fo:inline font-family="monospace">Cmd</fo:inline> is sent to the
          <fo:inline font-family="monospace">heart</fo:inline> program as an ISO Latin-1 or UTF-8 encoded binary,
          depending on the filename encoding mode of the emulator (see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">file:native_name_encoding/0</fo:inline></fo:inline>).
          The size of the encoded binary must be less than 2047 bytes.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9552416"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">clear_cmd() -&gt; ok</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Clears the temporary boot command. If the system terminates,
          the normal <fo:inline font-family="monospace">HEART_COMMAND</fo:inline> is used to reboot.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9555568"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_cmd() -&gt; {ok, Cmd}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Cmd = string()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gets the temporary reboot command. If the command is cleared,
          the empty string is returned.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9558288"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">set_callback(Module, Function) -&gt;<fo:block/>                ok | {error, {bad_callback, {Module, Function}}}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = Function = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"> This validation callback will be executed before any
          heartbeat is sent to the port program. For the validation to
          succeed it needs to return with the value <fo:inline font-family="monospace">ok</fo:inline>.
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An exception within the callback will be treated as a validation failure.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The callback will be removed if the system reboots.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp9562528"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">clear_callback() -&gt; ok</fo:block></fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Removes the validation callback call before heartbeats.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp9565200"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_callback() -&gt; {ok, {Module, Function}} | none</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = Function = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Get the validation callback. If the callback is cleared, <fo:inline font-family="monospace">none</fo:inline> will be returned.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9568336"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">set_options(Options) -&gt; ok | {error, {bad_options, Options}}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Options = [<fo:inline font-style="italic">heart_option()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"> Valid options <fo:inline font-family="monospace">set_options</fo:inline> are: </fo:block>
            <fo:block space-after="0.25em" space-before="0.25em">
                <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">check_schedulers</fo:inline></fo:block>
                <fo:block-container><fo:block start-indent="2em">
                    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If enabled, a signal will be sent to each scheduler to check its
                        responsiveness. The system check occurs before any heartbeat sent
                        to the port program. If any scheduler is not responsive enough the
                        heart program will not receive its heartbeat and thus eventually terminate the node.
                    </fo:block>
                </fo:block></fo:block-container>
            </fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"> Returns with the value <fo:inline font-family="monospace">ok</fo:inline> if the options are valid.</fo:block>
        </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp9574608"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_options() -&gt; {ok, Options} | none</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Options = [atom()]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">{ok, Options}</fo:inline> where <fo:inline font-family="monospace">Options</fo:inline> is a list of current options enabled for heart.
              If the callback is cleared, <fo:inline font-family="monospace">none</fo:inline> will be returned.</fo:block>
      </fo:block>


  
<fo:block page-break-before="always" id="idp9584992" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">inet</fo:marker>inet</fo:block>Erlang module</fo:block>
  <fo:block/>
  inet
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module provides access to TCP/IP protocols.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also
      <fo:inline font-style="italic">ERTS User's Guide:
      Inet Configuration</fo:inline> for more information about how to
      configure an Erlang runtime system for IP communication.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following two Kernel configuration parameters affect the
      behavior of all sockets opened on an Erlang node:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">inet_default_connect_options</fo:inline> can contain a list of
        default options used for all sockets returned when doing
        <fo:inline font-family="monospace">connect</fo:inline>.</fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">inet_default_listen_options</fo:inline> can contain a list of
        default options used when issuing a <fo:inline font-family="monospace">listen</fo:inline> call.</fo:block></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-family="monospace">accept</fo:inline> is issued, the values of the listening socket options
      are inherited. No such application variable is therefore needed for
      <fo:inline font-family="monospace">accept</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Using the Kernel configuration parameters above, one
      can set default options for all TCP sockets on a node, but use this
      with care. Options such as <fo:inline font-family="monospace">{delay_send,true}</fo:inline> can be
      specified in this way. The following is an example of starting an Erlang
      node with all sockets using delayed send:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ <fo:inline font-weight="bold">erl -sname test -kernel \</fo:inline>
<fo:inline font-weight="bold">inet_default_connect_options '[{delay_send,true}]' \</fo:inline>
<fo:inline font-weight="bold">inet_default_listen_options '[{delay_send,true}]'</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that default option <fo:inline font-family="monospace">{active, true}</fo:inline>
      cannot be changed, for internal reasons.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Addresses as inputs to functions can be either a string or a
      tuple. For example, the IP address 150.236.20.73 can be passed to
      <fo:inline font-family="monospace">gethostbyaddr/1</fo:inline>, either as string <fo:inline font-family="monospace">"150.236.20.73"</fo:inline>
      or as tuple <fo:inline font-family="monospace">{150, 236, 20, 73}</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">IPv4 address examples:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Address          ip_address()
-------          ------------
127.0.0.1        {127,0,0,1}
192.168.42.2     {192,168,42,2}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">IPv6 address examples:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Address          ip_address()
-------          ------------
::1             {0,0,0,0,0,0,0,1}
::192.168.42.2  {0,0,0,0,0,0,(192 bsl 8) bor 168,(42 bsl 8) bor 2}
::FFFF:192.168.42.2
                {0,0,0,0,0,16#FFFF,(192 bsl 8) bor 168,(42 bsl 8) bor 2}
3ffe:b80:1f8d:2:204:acff:fe17:bf38
                {16#3ffe,16#b80,16#1f8d,16#2,16#204,16#acff,16#fe17,16#bf38}
fe80::204:acff:fe17:bf38
                {16#fe80,0,0,0,0,16#204,16#acff,16#fe17,16#bf38}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Function
      <fo:inline font-style="italic"><fo:inline font-family="monospace">parse_address/1</fo:inline></fo:inline>
        can be useful:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">inet:parse_address("192.168.42.2").</fo:inline>
{ok,{192,168,42,2}}
2&gt; <fo:inline font-weight="bold">inet:parse_address("::FFFF:192.168.42.2").</fo:inline>
{ok,{0,0,0,0,0,65535,49320,10754}}</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Data Types</fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">hostent() = <fo:block/>    #hostent{h_name = <fo:inline font-style="italic">inet:hostname()</fo:inline>,<fo:block/>             h_aliases = [<fo:inline font-style="italic">inet:hostname()</fo:inline>],<fo:block/>             h_addrtype = inet | inet6,<fo:block/>             h_length = integer() &gt;= 0,<fo:block/>             h_addr_list = [<fo:inline font-style="italic">inet:ip_address()</fo:inline>]}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The record is defined in the Kernel include file
          <fo:inline font-family="monospace">"inet.hrl"</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Add the following directive to the module:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-include_lib("kernel/include/inet.hrl").</fo:block>
      
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">hostname() = atom() | string()</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ip_address() = <fo:inline font-style="italic">ip4_address()</fo:inline> | <fo:inline font-style="italic">ip6_address()</fo:inline></fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ip4_address() = {0..255, 0..255, 0..255, 0..255}</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ip6_address() = <fo:block/>    {0..65535,<fo:block/>     0..65535,<fo:block/>     0..65535,<fo:block/>     0..65535,<fo:block/>     0..65535,<fo:block/>     0..65535,<fo:block/>     0..65535,<fo:block/>     0..65535}</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">port_number() = 0..65535</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">local_address() = {local, File :: binary() | string()}</fo:block></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	  This address family only works on Unix-like systems.
	</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	  <fo:inline font-family="monospace">File</fo:inline> is normally a file pathname
	  in a local filesystem.  It is limited in length by the
	  operating system, traditionally to 108 bytes.
	</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	  A <fo:inline font-family="monospace">binary()</fo:inline> is passed as is to the operating system,
	  but a <fo:inline font-family="monospace">string()</fo:inline> is encoded according to the
	  <fo:inline font-style="italic">
	    system filename encoding mode.
	  </fo:inline>
	</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	  Other addresses are possible, for example Linux implements
	  "Abstract Addresses".  See the documentation for
	  Unix Domain Sockets on your system,
	  normally <fo:inline font-family="monospace">unix</fo:inline> in manual section 7.
	</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	  In most API functions where you can use
	  this address family the port number must be <fo:inline font-family="monospace">0</fo:inline>.
	</fo:block>
      
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">socket_address() = <fo:block/>    <fo:inline font-style="italic">ip_address()</fo:inline> | any | loopback | <fo:inline font-style="italic">local_address()</fo:inline></fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">socket_getopt() = <fo:block/>    <fo:inline font-style="italic">gen_sctp:option_name()</fo:inline> |<fo:block/>    <fo:inline font-style="italic">gen_tcp:option_name()</fo:inline> |<fo:block/>    <fo:inline font-style="italic">gen_udp:option_name()</fo:inline></fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">socket_setopt() = <fo:block/>    <fo:inline font-style="italic">gen_sctp:option()</fo:inline> | <fo:inline font-style="italic">gen_tcp:option()</fo:inline> | <fo:inline font-style="italic">gen_udp:option()</fo:inline></fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">returned_non_ip_address() = <fo:block/>    {local, binary()} | {unspec, &lt;&lt;&gt;&gt;} | {undefined, any()}</fo:block></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	  Addresses besides
	  <fo:inline font-style="italic">
	    <fo:inline font-family="monospace">ip_address()</fo:inline>
	  </fo:inline>
	  ones that are returned from socket API functions.
	  See in particular
	  <fo:inline font-style="italic">
	    <fo:inline font-family="monospace">local_address()</fo:inline>.
	  </fo:inline>
	  The <fo:inline font-family="monospace">unspec</fo:inline> family corresponds to AF_UNSPEC and can
	  occur if the other side has no socket address.
	  The <fo:inline font-family="monospace">undefined</fo:inline> family can only occur in the unlikely
	  event of an address family that the VM does not recognize.
	</fo:block>
      
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">posix() = exbadport | exbadseq | <fo:inline font-style="italic">file:posix()</fo:inline></fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An atom that is named from the POSIX error codes used in Unix,
          and in the runtime libraries of most C compilers. See section
          <fo:inline font-style="italic">POSIX Error Codes</fo:inline>.</fo:block>
      
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:inline font-weight="bold" space-after="0.25em">socket()</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See
          <fo:inline font-style="italic"><fo:inline font-family="monospace">gen_tcp:type-socket</fo:inline></fo:inline>
          and
          <fo:inline font-style="italic"><fo:inline font-family="monospace">gen_udp:type-socket</fo:inline></fo:inline>.
        </fo:block>
      
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">address_family() = inet | inet6 | local</fo:block></fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp9637856"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">close(Socket) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Socket = <fo:inline font-style="italic">socket()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Closes a socket of any type.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9640512"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">format_error(Reason) -&gt; string()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">posix()</fo:inline> | system_limit</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a diagnostic error string. For possible POSIX values and
          corresponding strings, see section
          <fo:inline font-style="italic">POSIX Error Codes</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9644000"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_rc() -&gt; [{Par :: any(), Val :: any()}]</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the state of the <fo:inline font-family="monospace">Inet</fo:inline> configuration database in
          form of a list of recorded configuration parameters. For more
          information, see <fo:inline font-style="italic">ERTS User's Guide:
          Inet Configuration</fo:inline>.
          Only parameters with other than default values are returned.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9648048"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">getaddr(Host, Family) -&gt; {ok, Address} | {error, <fo:inline font-style="italic">posix()</fo:inline>}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Host = <fo:inline font-style="italic">ip_address()</fo:inline> | <fo:inline font-style="italic">hostname()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Family = <fo:inline font-style="italic">address_family()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Address = <fo:inline font-style="italic">ip_address()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the IP address for <fo:inline font-family="monospace">Host</fo:inline> as a tuple of
          integers. <fo:inline font-family="monospace">Host</fo:inline> can be an IP address, a single
          hostname, or a fully qualified hostname.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9651936"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">getaddrs(Host, Family) -&gt; {ok, Addresses} | {error, <fo:inline font-style="italic">posix()</fo:inline>}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Host = <fo:inline font-style="italic">ip_address()</fo:inline> | <fo:inline font-style="italic">hostname()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Family = <fo:inline font-style="italic">address_family()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Addresses = [<fo:inline font-style="italic">ip_address()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of all IP addresses for <fo:inline font-family="monospace">Host</fo:inline>.
          <fo:inline font-family="monospace">Host</fo:inline> can be an IP address, a single hostname, or
          a fully qualified hostname.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9655808"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">gethostbyaddr(Address) -&gt; {ok, Hostent} | {error, <fo:inline font-style="italic">posix()</fo:inline>}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Address = string() | <fo:inline font-style="italic">ip_address()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Hostent = <fo:inline font-style="italic">hostent()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a <fo:inline font-family="monospace">hostent</fo:inline> record for the host with the specified
          address.</fo:block></fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9658832"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">gethostbyname(Hostname) -&gt; {ok, Hostent} | {error, <fo:inline font-style="italic">posix()</fo:inline>}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Hostname = <fo:inline font-style="italic">hostname()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Hostent = <fo:inline font-style="italic">hostent()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a <fo:inline font-family="monospace">hostent</fo:inline> record for the host with the specified
          hostname.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If resolver option <fo:inline font-family="monospace">inet6</fo:inline> is <fo:inline font-family="monospace">true</fo:inline>,
          an IPv6 address is looked up. If that fails,
          the IPv4 address is looked up and returned on
          IPv6-mapped IPv4 format.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9663472"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">gethostbyname(Hostname, Family) -&gt;<fo:block/>                 {ok, Hostent} | {error, <fo:inline font-style="italic">posix()</fo:inline>}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Hostname = <fo:inline font-style="italic">hostname()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Family = <fo:inline font-style="italic">address_family()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Hostent = <fo:inline font-style="italic">hostent()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a <fo:inline font-family="monospace">hostent</fo:inline> record for the host with the specified
          name, restricted to the specified address family.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9666672"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">gethostname() -&gt; {ok, Hostname}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Hostname = string()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the local hostname. Never fails.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9669344"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">getifaddrs() -&gt; {ok, Iflist} | {error, <fo:inline font-style="italic">posix()</fo:inline>}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Iflist = [{Ifname, [Ifopt]}]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Ifname = string()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Ifopt = <fo:block/>    {flags, [Flag]} |<fo:block/>    {addr, Addr} |<fo:block/>    {netmask, Netmask} |<fo:block/>    {broadaddr, Broadaddr} |<fo:block/>    {dstaddr, Dstaddr} |<fo:block/>    {hwaddr, Hwaddr}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Flag = <fo:block/>    up | broadcast | loopback | pointtopoint | running | multicast</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Addr = Netmask = Broadaddr = Dstaddr = <fo:inline font-style="italic">ip_address()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Hwaddr = [byte()]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of 2-tuples containing interface names and the
          interface addresses. <fo:inline font-family="monospace">Ifname</fo:inline> is a Unicode string.
          <fo:inline font-family="monospace">Hwaddr</fo:inline> is hardware dependent, for example, on
          Ethernet interfaces
          it is the 6-byte Ethernet address (MAC address (EUI-48 address)).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The tuples <fo:inline font-family="monospace">{addr,Addr}</fo:inline>, <fo:inline font-family="monospace">{netmask,_}</fo:inline>, and
          <fo:inline font-family="monospace">{broadaddr,_}</fo:inline> are repeated in the result list if the interface
          has multiple addresses. If you come across an interface with
          multiple <fo:inline font-family="monospace">{flag,_}</fo:inline> or <fo:inline font-family="monospace">{hwaddr,_}</fo:inline> tuples, you have
          a strange interface or possibly a bug in this function. The tuple
          <fo:inline font-family="monospace">{flag,_}</fo:inline> is mandatory, all others are optional.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Do not rely too much on the order of <fo:inline font-family="monospace">Flag</fo:inline> atoms
          or <fo:inline font-family="monospace">Ifopt</fo:inline> tuples. There are however some rules:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Immediately after
            <fo:inline font-family="monospace">{addr,_}</fo:inline> follows <fo:inline font-family="monospace">{netmask,_}</fo:inline>.</fo:block></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Immediately thereafter follows <fo:inline font-family="monospace">{broadaddr,_}</fo:inline> if flag
            <fo:inline font-family="monospace">broadcast</fo:inline> is <fo:inline font-weight="bold">not</fo:inline> set and flag
            <fo:inline font-family="monospace">pointtopoint</fo:inline> <fo:inline font-weight="bold">is</fo:inline> set.</fo:block></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Any <fo:inline font-family="monospace">{netmask,_}</fo:inline>, <fo:inline font-family="monospace">{broadaddr,_}</fo:inline>, or
            <fo:inline font-family="monospace">{dstaddr,_}</fo:inline> tuples that follow an <fo:inline font-family="monospace">{addr,_}</fo:inline>
            tuple concerns that address.</fo:block></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The tuple <fo:inline font-family="monospace">{hwaddr,_}</fo:inline> is not returned on Solaris, as the
          hardware address historically belongs to the link layer and only
          the superuser can read such addresses.</fo:block>
	<fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On Windows, the data is fetched from different OS API functions,
            so the <fo:inline font-family="monospace">Netmask</fo:inline> and <fo:inline font-family="monospace">Broadaddr</fo:inline>
            values can be calculated, just as some <fo:inline font-family="monospace">Flag</fo:inline>
            values. Report flagrant bugs.</fo:block>
	</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9690080"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">getopts(Socket, Options) -&gt; {ok, OptionValues} | {error, <fo:inline font-style="italic">posix()</fo:inline>}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Socket = <fo:inline font-style="italic">socket()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Options = [<fo:inline font-style="italic">socket_getopt()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">OptionValues = [<fo:inline font-style="italic">socket_setopt()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gets one or more options for a socket. For a list of available
          options, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">setopts/2</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The number of elements in the returned
          <fo:inline font-family="monospace">OptionValues</fo:inline>
          list does not necessarily correspond to the number of options
          asked for. If the operating system fails to support an option,
          it is left out in the returned list. An error tuple is returned
          only when getting options for the socket is impossible (that is,
          the socket is closed or the buffer size in a raw request
          is too large). This behavior is kept for backward
          compatibility reasons.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A raw option request
          <fo:inline font-family="monospace">RawOptReq = {raw, Protocol, OptionNum, ValueSpec}</fo:inline>
          can be used to get information about
          socket options not (explicitly) supported by the emulator. The
          use of raw socket options makes the code non-portable, but
          allows the Erlang programmer to take advantage of unusual features
          present on the current platform.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">RawOptReq</fo:inline> consists of tag <fo:inline font-family="monospace">raw</fo:inline> followed
          by the protocol level, the option number, and either a binary
          or the size, in bytes, of the
          buffer in which the option value is to be stored. A binary is to be
          used when the underlying <fo:inline font-family="monospace">getsockopt</fo:inline> requires <fo:inline font-weight="bold">input</fo:inline>
          in the argument field. In this case, the binary size
          is to correspond to the required buffer
          size of the return value. The supplied values in a <fo:inline font-family="monospace">RawOptReq</fo:inline>
          correspond to the second, third, and fourth/fifth parameters to the
          <fo:inline font-family="monospace">getsockopt</fo:inline> call in the C socket API. The value stored
          in the buffer is returned as a binary <fo:inline font-family="monospace">ValueBin</fo:inline>,
          where all values are coded in the native endianess.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Asking for and inspecting raw socket options require low-level
          information about the current operating system and TCP stack.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Consider a Linux machine where option
          <fo:inline font-family="monospace">TCP_INFO</fo:inline> can be used to collect TCP statistics
          for a socket. Assume you are interested in field
          <fo:inline font-family="monospace">tcpi_sacked</fo:inline> of <fo:inline font-family="monospace">struct tcp_info</fo:inline>
          filled in when asking for <fo:inline font-family="monospace">TCP_INFO</fo:inline>. To be able to access
          this information, you need to know the following:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The numeric value of protocol level <fo:inline font-family="monospace">IPPROTO_TCP</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The numeric value of option <fo:inline font-family="monospace">TCP_INFO</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The size of <fo:inline font-family="monospace">struct tcp_info</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The size and offset of the specific field</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By inspecting the headers or writing a small C program, it is found
          that <fo:inline font-family="monospace">IPPROTO_TCP</fo:inline> is 6, <fo:inline font-family="monospace">TCP_INFO</fo:inline> is 11, the structure
          size is 92 (bytes), the offset of <fo:inline font-family="monospace">tcpi_sacked</fo:inline> is 28 bytes,
          and the value is a 32-bit integer. The following code can be used
          to retrieve the value:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
get_tcpi_sacked(Sock) -&gt;
    {ok,[{raw,_,_,Info}]} = inet:getopts(Sock,[{raw,6,11,92}]),
    &lt;&lt;_:28/binary,TcpiSacked:32/native,_/binary&gt;&gt; = Info,
    TcpiSacked.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Preferably, you would check the machine type, the operating system,
          and the Kernel version before executing anything similar to
          this code.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9710880"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">getstat(Socket) -&gt; {ok, OptionValues} | {error, <fo:inline font-style="italic">posix()</fo:inline>}</fo:block></fo:block><fo:block id="idp9711712"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">getstat(Socket, Options) -&gt; {ok, OptionValues} | {error, <fo:inline font-style="italic">posix()</fo:inline>}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Socket = <fo:inline font-style="italic">socket()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Options = [<fo:inline font-style="italic">stat_option()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">OptionValues = [{<fo:inline font-style="italic">stat_option()</fo:inline>, integer()}]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">stat_option() = <fo:block/>    recv_cnt |<fo:block/>    recv_max |<fo:block/>    recv_avg |<fo:block/>    recv_oct |<fo:block/>    recv_dvi |<fo:block/>    send_cnt |<fo:block/>    send_max |<fo:block/>    send_avg |<fo:block/>    send_oct |<fo:block/>    send_pend</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gets one or more statistic options for a socket.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">getstat(Socket)</fo:inline> is equivalent to
          <fo:inline font-family="monospace">getstat(Socket, [recv_avg, recv_cnt, recv_dvi,
          recv_max, recv_oct, send_avg, send_cnt, send_dvi, send_max,
          send_oct])</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following options are available:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">recv_avg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Average size of packets, in bytes, received by the socket.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">recv_cnt</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Number of packets received by the socket.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">recv_dvi</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Average packet size deviation, in bytes, received by the socket.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">recv_max</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Size of the largest packet, in bytes, received by the socket.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">recv_oct</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Number of bytes received by the socket.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">send_avg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Average size of packets, in bytes, sent from the socket.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">send_cnt</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Number of packets sent from the socket.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">send_dvi</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Average packet size deviation, in bytes, sent from the socket.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">send_max</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Size of the largest packet, in bytes, sent from the socket.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">send_oct</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Number of bytes sent from the socket.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9733168"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ntoa(IpAddress) -&gt; Address | {error, einval}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Address = string()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">IpAddress = <fo:inline font-style="italic">ip_address()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parses an
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ip_address()</fo:inline></fo:inline>
          and returns an IPv4 or IPv6 address string.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9736688"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">parse_address(Address) -&gt; {ok, IPAddress} | {error, einval}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Address = string()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">IPAddress = <fo:inline font-style="italic">ip_address()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parses an IPv4 or IPv6 address string and returns an
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ip4_address()</fo:inline></fo:inline> or
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ip6_address()</fo:inline></fo:inline>.
          Accepts a shortened IPv4 address string.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9741104"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">parse_ipv4_address(Address) -&gt; {ok, IPv4Address} | {error, einval}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Address = string()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">IPv4Address = <fo:inline font-style="italic">ip_address()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parses an IPv4 address string and returns an
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ip4_address()</fo:inline></fo:inline>.
	  Accepts a shortened IPv4 address string.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9744640"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">parse_ipv4strict_address(Address) -&gt;<fo:block/>                            {ok, IPv4Address} | {error, einval}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Address = string()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">IPv4Address = <fo:inline font-style="italic">ip_address()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parses an IPv4 address string containing four fields, that is,
          <fo:inline font-weight="bold">not</fo:inline> shortened, and returns an
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ip4_address()</fo:inline></fo:inline>.
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9748672"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">parse_ipv6_address(Address) -&gt; {ok, IPv6Address} | {error, einval}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Address = string()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">IPv6Address = <fo:inline font-style="italic">ip_address()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parses an IPv6 address string and returns an
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ip6_address()</fo:inline></fo:inline>.
          If an IPv4 address string is specified, an IPv4-mapped IPv6 address
          is returned.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9752256"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">parse_ipv6strict_address(Address) -&gt;<fo:block/>                            {ok, IPv6Address} | {error, einval}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Address = string()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">IPv6Address = <fo:inline font-style="italic">ip_address()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parses an IPv6 address string and returns an
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ip6_address()</fo:inline></fo:inline>.
          Does <fo:inline font-weight="bold">not</fo:inline> accept IPv4 addresses.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9756240"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">parse_strict_address(Address) -&gt; {ok, IPAddress} | {error, einval}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Address = string()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">IPAddress = <fo:inline font-style="italic">ip_address()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parses an IPv4 or IPv6 address string and returns an
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ip4_address()</fo:inline></fo:inline> or
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ip6_address()</fo:inline></fo:inline>.
          Does <fo:inline font-weight="bold">not</fo:inline> accept a shortened IPv4 address string.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9761104"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">peername(Socket :: <fo:inline font-style="italic">socket()</fo:inline>) -&gt;<fo:block/>            {ok,<fo:block/>             {<fo:inline font-style="italic">ip_address()</fo:inline>, <fo:inline font-style="italic">port_number()</fo:inline>} |<fo:block/>             <fo:inline font-style="italic">returned_non_ip_address()</fo:inline>} |<fo:block/>            {error, <fo:inline font-style="italic">posix()</fo:inline>}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the address and port for the other end of a connection.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that for SCTP sockets, this function returns only
	  one of the peer addresses of the socket. Function
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">peernames/1,2</fo:inline></fo:inline>
	  returns all.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9765216"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">peernames(Socket :: <fo:inline font-style="italic">socket()</fo:inline>) -&gt;<fo:block/>             {ok,<fo:block/>              [{<fo:inline font-style="italic">ip_address()</fo:inline>, <fo:inline font-style="italic">port_number()</fo:inline>} |<fo:block/>               <fo:inline font-style="italic">returned_non_ip_address()</fo:inline>]} |<fo:block/>             {error, <fo:inline font-style="italic">posix()</fo:inline>}</fo:block></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">peernames(Socket, 0)</fo:inline></fo:inline>.
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that the behavior of this function for an SCTP
	  one-to-many style socket is not defined by the
	  <fo:inline font-weight="bold"><fo:basic-link external-destination="href">SCTP Sockets API Extensions</fo:basic-link></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9770528"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">peernames(Socket, Assoc) -&gt;<fo:block/>             {ok, [{Address, Port}]} | {error, <fo:inline font-style="italic">posix()</fo:inline>}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Socket = <fo:inline font-style="italic">socket()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Assoc = #sctp_assoc_change{} | <fo:inline font-style="italic">gen_sctp:assoc_id()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Address = <fo:inline font-style="italic">ip_address()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Port = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of all address/port number pairs for the other end
	  of an association <fo:inline font-family="monospace">Assoc</fo:inline> of a socket.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function can return multiple addresses for multihomed
	  sockets, such as SCTP sockets. For other sockets it
	  returns a one-element list.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that parameter <fo:inline font-family="monospace">Assoc</fo:inline> is by the
	  <fo:inline font-weight="bold"><fo:basic-link external-destination="href">SCTP Sockets API Extensions</fo:basic-link></fo:inline>
	  defined to be ignored for
	  one-to-one style sockets. What the special value <fo:inline font-family="monospace">0</fo:inline>
	  means, hence its behavior for one-to-many style sockets,
	  is unfortunately undefined.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9776832"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">port(Socket) -&gt; {ok, Port} | {error, any()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Socket = <fo:inline font-style="italic">socket()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Port = <fo:inline font-style="italic">port_number()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the local port number for a socket.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9779520"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">setopts(Socket, Options) -&gt; ok | {error, <fo:inline font-style="italic">posix()</fo:inline>}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Socket = <fo:inline font-style="italic">socket()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Options = [<fo:inline font-style="italic">socket_setopt()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets one or more options for a socket.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following options are available:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{active, true | false | once | N}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the value is <fo:inline font-family="monospace">true</fo:inline>, which is the default,
              everything received from the socket is sent as
              messages to the receiving process.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the value is <fo:inline font-family="monospace">false</fo:inline> (passive mode), the process must
              explicitly receive incoming data by calling
              <fo:inline font-style="italic"><fo:inline font-family="monospace">gen_tcp:recv/2,3</fo:inline></fo:inline>,
              <fo:inline font-style="italic"><fo:inline font-family="monospace">gen_udp:recv/2,3</fo:inline></fo:inline>,
              or <fo:inline font-style="italic"><fo:inline font-family="monospace">gen_sctp:recv/1,2</fo:inline></fo:inline>
              (depending on the type of socket).</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the value is <fo:inline font-family="monospace">once</fo:inline> (<fo:inline font-family="monospace">{active, once}</fo:inline>),
              <fo:inline font-weight="bold">one</fo:inline> data message from the socket is sent
              to the process. To receive one more message,
              <fo:inline font-family="monospace">setopts/2</fo:inline> must be called again with option
              <fo:inline font-family="monospace">{active, once}</fo:inline>.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the value is an integer <fo:inline font-family="monospace">N</fo:inline> in the range -32768 to 32767
              (inclusive), the value is added to the socket's count of data
              messages sent to the controlling process. A socket's default
              message count is <fo:inline font-family="monospace">0</fo:inline>. If a negative value is specified, and
              its magnitude is equal to or greater than the socket's current
              message count, the socket's message count is set to <fo:inline font-family="monospace">0</fo:inline>.
              Once the socket's message count reaches <fo:inline font-family="monospace">0</fo:inline>, either because
              of sending
              received data messages to the process or by being explicitly set,
              the process is then notified by a special message, specific to
              the type of socket, that the socket has entered passive
              mode. Once the socket enters passive mode, to receive more
              messages <fo:inline font-family="monospace">setopts/2</fo:inline> must be called again to set the
              socket back into an active mode.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When using <fo:inline font-family="monospace">{active, once}</fo:inline> or <fo:inline font-family="monospace">{active, N}</fo:inline>, the
              socket changes behavior automatically when data is received.
              This can be confusing in combination with connection-oriented
              sockets (that is, <fo:inline font-family="monospace">gen_tcp</fo:inline>), as a socket
              with <fo:inline font-family="monospace">{active, false}</fo:inline> behavior reports closing
              differently than a socket with <fo:inline font-family="monospace">{active, true}</fo:inline>
              behavior. To simplify programming, a socket where
              the peer closed, and this is detected while in
              <fo:inline font-family="monospace">{active, false}</fo:inline> mode, still generates message
              <fo:inline font-family="monospace">{tcp_closed,Socket}</fo:inline> when set to <fo:inline font-family="monospace">{active, once}</fo:inline>,
              <fo:inline font-family="monospace">{active, true}</fo:inline>, or <fo:inline font-family="monospace">{active, N}</fo:inline> mode.
              It is therefore safe to assume that message
              <fo:inline font-family="monospace">{tcp_closed,Socket}</fo:inline>, possibly followed by socket port
              termination (depending on option <fo:inline font-family="monospace">exit_on_close</fo:inline>)
              eventually appears when a socket changes
              back and forth between <fo:inline font-family="monospace">{active, true}</fo:inline> and
              <fo:inline font-family="monospace">{active, false}</fo:inline> mode. However,
              <fo:inline font-weight="bold">when</fo:inline> peer closing is detected it is all up to the
              underlying TCP/IP stack and protocol.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that <fo:inline font-family="monospace">{active, true}</fo:inline> mode provides no flow
              control; a fast sender can easily overflow the
              receiver with incoming messages. The same is true for
              <fo:inline font-family="monospace">{active, N}</fo:inline> mode, while the message count is greater
              than zero.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Use active mode only if
              your high-level protocol provides its own flow control
              (for example, acknowledging received messages) or the
              amount of data exchanged is small. <fo:inline font-family="monospace">{active, false}</fo:inline>
              mode, use of the <fo:inline font-family="monospace">{active, once}</fo:inline> mode, or <fo:inline font-family="monospace">{active, N}</fo:inline>
              mode with values of <fo:inline font-family="monospace">N</fo:inline> appropriate for the application
              provides flow control. The other side cannot send
              faster than the receiver can read.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{broadcast, Boolean}</fo:inline> (UDP sockets)</fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Enables/disables permission to send broadcasts.</fo:block>
            
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{buffer, Size}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The size of the user-level software buffer used by
              the driver. 
              Not to be confused with options <fo:inline font-family="monospace">sndbuf</fo:inline>
              and <fo:inline font-family="monospace">recbuf</fo:inline>, which correspond to the
              Kernel socket buffers. It is recommended
              to have <fo:inline font-family="monospace">val(buffer) &gt;= max(val(sndbuf),val(recbuf))</fo:inline> to
              avoid performance issues because of unnecessary copying.
              <fo:inline font-family="monospace">val(buffer)</fo:inline> is automatically set to the above
              maximum when values <fo:inline font-family="monospace">sndbuf</fo:inline> or <fo:inline font-family="monospace">recbuf</fo:inline> are set.
              However, as the sizes set for <fo:inline font-family="monospace">sndbuf</fo:inline> and <fo:inline font-family="monospace">recbuf</fo:inline>
              usually become larger, you are encouraged to use
              <fo:inline font-style="italic"><fo:inline font-family="monospace">getopts/2</fo:inline></fo:inline>
              to analyze the behavior of your operating system.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that this is also the maximum amount of data that can be
	       received from a single recv call. If you are using higher than 
	       normal MTU consider setting buffer higher.</fo:block> 
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{delay_send, Boolean}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Normally, when an Erlang process sends to a socket,
              the driver tries to send the data immediately. If that
              fails, the driver uses any means available to queue
              up the message to be sent whenever the operating system
              says it can handle it. Setting <fo:inline font-family="monospace">{delay_send, true}</fo:inline>
              makes <fo:inline font-weight="bold">all</fo:inline> messages queue up. The messages sent
              to the network are then larger but fewer.
              The option affects the scheduling of send
              requests versus Erlang processes instead of changing any
              real property of the socket. The option is
              implementation-specific. Defaults to <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{deliver, port | term}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-family="monospace">{active, true}</fo:inline>, data is delivered on the form
              <fo:inline font-family="monospace">port</fo:inline> : <fo:inline font-family="monospace">{S, {data, [H1,..Hsz | Data]}}</fo:inline> or
              <fo:inline font-family="monospace">term</fo:inline> : <fo:inline font-family="monospace">{tcp, S, [H1..Hsz | Data]}</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{dontroute, Boolean}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Enables/disables routing bypass for outgoing messages.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{exit_on_close, Boolean}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This option is set to <fo:inline font-family="monospace">true</fo:inline> by default.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The only reason to set it to <fo:inline font-family="monospace">false</fo:inline> is if you want
              to continue sending data to the socket after a close is
              detected, for example, if the peer uses
              <fo:inline font-style="italic"><fo:inline font-family="monospace">gen_tcp:shutdown/2</fo:inline></fo:inline>
              to shut down the write side.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{header, Size}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This option is only meaningful if option <fo:inline font-family="monospace">binary</fo:inline>
              was specified when the socket was created. If option
              <fo:inline font-family="monospace">header</fo:inline> is specified, the first
              <fo:inline font-family="monospace">Size</fo:inline> number bytes of data received from the socket
              are elements of a list, and the remaining data is
              a binary specified as the tail of the same list. For example,
              if <fo:inline font-family="monospace">Size == 2</fo:inline>, the data received matches
              <fo:inline font-family="monospace">[Byte1,Byte2|Binary]</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{high_msgq_watermark, Size}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The socket message queue is set to a busy
	      state when the amount of data on the message
	      queue reaches this limit. Notice that this limit only
	      concerns data that has not yet reached the ERTS internal
	      socket implementation. Defaults to 8 kB.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Senders of data to the socket are suspended if
	      either the socket message queue is busy or the socket
	      itself is busy.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more information, see options <fo:inline font-family="monospace">low_msgq_watermark</fo:inline>,
	      <fo:inline font-family="monospace">high_watermark</fo:inline>, and <fo:inline font-family="monospace">low_watermark</fo:inline>.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that distribution sockets disable the use of
	      <fo:inline font-family="monospace">high_msgq_watermark</fo:inline> and <fo:inline font-family="monospace">low_msgq_watermark</fo:inline>.
	      Instead use the
	      <fo:inline font-style="italic">distribution buffer busy limit</fo:inline>,
              which is a similar feature.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{high_watermark, Size}</fo:inline> (TCP/IP sockets)</fo:block>
          <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The socket is set to a busy state when the amount
	      of data queued internally by the ERTS socket implementation
	      reaches this limit. Defaults to 8 kB.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Senders of data to the socket are suspended if
	      either the socket message queue is busy or the socket
	      itself is busy.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more information, see options <fo:inline font-family="monospace">low_watermark</fo:inline>,
	      <fo:inline font-family="monospace">high_msgq_watermark</fo:inline>, and <fo:inline font-family="monospace">low_msqg_watermark</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{ipv6_v6only, Boolean}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Restricts the socket to use only IPv6, prohibiting any
	      IPv4 connections. This is only applicable for
	      IPv6 sockets (option <fo:inline font-family="monospace">inet6</fo:inline>).</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On most platforms this option must be set on the socket
	      before associating it to an address. It is therefore only
	      reasonable to specify it when creating the socket and not
	      to use it when calling function
	      (<fo:inline font-style="italic"><fo:inline font-family="monospace">setopts/2</fo:inline></fo:inline>)
	      containing this description.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The behavior of a socket with this option set to
	      <fo:inline font-family="monospace">true</fo:inline> is the only portable one. The original
	      idea when IPv6 was new of using IPv6 for all traffic
	      is now not recommended by FreeBSD (you can use
	      <fo:inline font-family="monospace">{ipv6_v6only,false}</fo:inline> to override the recommended
	      system default value),
	      forbidden by OpenBSD (the supported GENERIC kernel),
	      and impossible on Windows (which has separate
	      IPv4 and IPv6 protocol stacks). Most Linux distros
	      still have a system default value of <fo:inline font-family="monospace">false</fo:inline>.
	      This policy shift among operating systems to
	      separate IPv6 from IPv4 traffic has evolved, as
	      it gradually proved hard and complicated to get
	      a dual stack implementation correct and secure.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On some platforms, the only allowed value for this option
	      is <fo:inline font-family="monospace">true</fo:inline>, for example, OpenBSD and Windows. Trying to set
	      this option to <fo:inline font-family="monospace">false</fo:inline>, when creating the socket, fails
	      in this case.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Setting this option on platforms where it does not exist
	      is ignored. Getting this option with
	      <fo:inline font-style="italic"><fo:inline font-family="monospace">getopts/2</fo:inline></fo:inline>
	      returns no value, that is, the returned list does not contain an
	      <fo:inline font-family="monospace">{ipv6_v6only,_}</fo:inline> tuple. On Windows, the option
	      does not exist, but it is emulated as a
	      read-only option with value <fo:inline font-family="monospace">true</fo:inline>.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Therefore, setting this option to <fo:inline font-family="monospace">true</fo:inline>
	      when creating a socket never fails, except possibly on a
              platform where you
	      have customized the kernel to only allow <fo:inline font-family="monospace">false</fo:inline>,
	      which can be doable (but awkward) on, for example, OpenBSD.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you read back the option value using
	      <fo:inline font-style="italic"><fo:inline font-family="monospace">getopts/2</fo:inline></fo:inline>
	      and get no value, the option does not exist in the host
              operating system. The behavior of both an IPv6 and an IPv4
	      socket listening on the same port, and for an IPv6 socket
	      getting IPv4 traffic is then no longer predictable.</fo:block>
	  </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{keepalive, Boolean}</fo:inline>(TCP/IP sockets)</fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Enables/disables periodic transmission on a connected
              socket when no other data is exchanged. If
              the other end does not respond, the connection is
              considered broken and an error message is sent to
              the controlling process. Defaults to <fo:inline font-family="monospace">disabled</fo:inline>.</fo:block>
            
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{linger, {true|false, Seconds}}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Determines the time-out, in seconds, for flushing unsent data
              in the <fo:inline font-family="monospace">close/1</fo:inline> socket call. If the first component of
              the value tuple is <fo:inline font-family="monospace">false</fo:inline>, the second is ignored. This
              means that <fo:inline font-family="monospace">close/1</fo:inline> returns immediately, not waiting
              for data to be flushed. Otherwise, the second component is
              the flushing time-out, in seconds.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{low_msgq_watermark, Size}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the socket message queue is in a busy state, the
	      socket message queue is set in a not busy state when
	      the amount of data queued in the message queue falls
	      below this limit. Notice that this limit only concerns data
	      that has not yet reached the ERTS internal socket
	      implementation. Defaults to 4 kB.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Senders that are suspended because of either a
	      busy message queue or a busy socket are resumed
	      when the socket message queue and the socket
	      are not busy.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more information, see options <fo:inline font-family="monospace">high_msgq_watermark</fo:inline>,
	      <fo:inline font-family="monospace">high_watermark</fo:inline>, and <fo:inline font-family="monospace">low_watermark</fo:inline>.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that distribution sockets disable the use of
	      <fo:inline font-family="monospace">high_msgq_watermark</fo:inline> and <fo:inline font-family="monospace">low_msgq_watermark</fo:inline>.
	      Instead they use the
	      <fo:inline font-style="italic">distribution
	      buffer busy limit</fo:inline>, which is a similar feature.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{low_watermark, Size}</fo:inline> (TCP/IP sockets)</fo:block>
          <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the socket is in a busy state, the socket is
	      set in a not busy state when the amount of data
	      queued internally by the ERTS socket implementation
	      falls below this limit. Defaults to 4 kB.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Senders that are suspended because of a
	      busy message queue or a busy socket are resumed
	      when the socket message queue and the socket are not busy.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more information, see options <fo:inline font-family="monospace">high_watermark</fo:inline>,
	      <fo:inline font-family="monospace">high_msgq_watermark</fo:inline>, and <fo:inline font-family="monospace">low_msgq_watermark</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{mode, Mode :: binary | list}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Received <fo:inline font-family="monospace">Packet</fo:inline> is delivered as defined by <fo:inline font-family="monospace">Mode</fo:inline>.
            </fo:block>
          </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{netns, Namespace :: file:filename_all()}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets a network namespace for the socket. Parameter
	      <fo:inline font-family="monospace">Namespace</fo:inline> is a filename defining the namespace, for
	      example, <fo:inline font-family="monospace">"/var/run/netns/example"</fo:inline>, typically created by
	      command <fo:inline font-family="monospace">ip netns add example</fo:inline>. This option must be used in
	      a function call that creates a socket, that is,
	      <fo:inline font-style="italic"><fo:inline font-family="monospace">gen_tcp:connect/3,4</fo:inline></fo:inline>,
	      <fo:inline font-style="italic"><fo:inline font-family="monospace">gen_tcp:listen/2</fo:inline></fo:inline>,
	      <fo:inline font-style="italic"><fo:inline font-family="monospace">gen_udp:open/1,2</fo:inline></fo:inline>, or
	    <fo:inline font-style="italic"><fo:inline font-family="monospace">gen_sctp:open/0,1,2</fo:inline></fo:inline>.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This option uses the Linux-specific syscall
	      <fo:inline font-family="monospace">setns()</fo:inline>, such as in Linux kernel 3.0 or later,
	      and therefore only exists when the runtime system
	      is compiled for such an operating system.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The virtual machine also needs elevated privileges, either
	      running as superuser or (for Linux) having capability
	      <fo:inline font-family="monospace">CAP_SYS_ADMIN</fo:inline> according to the documentation for
	      <fo:inline font-family="monospace">setns(2)</fo:inline>.
	      However, during testing also <fo:inline font-family="monospace">CAP_SYS_PTRACE</fo:inline>
	      and <fo:inline font-family="monospace">CAP_DAC_READ_SEARCH</fo:inline> have proven to be necessary.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
	    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
setcap cap_sys_admin,cap_sys_ptrace,cap_dac_read_search+epi beam.smp</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that the filesystem containing the virtual machine
	      executable (<fo:inline font-family="monospace">beam.smp</fo:inline> in the example) must be local,
	      mounted without flag <fo:inline font-family="monospace">nosetuid</fo:inline>,
	      support extended attributes, and
	      the kernel must support file capabilities.
	      All this runs out of the box on at least Ubuntu 12.04 LTS,
	      except that SCTP sockets appear to not support
	      network namespaces.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Namespace</fo:inline> is a filename and is encoded
	      and decoded as discussed in module
	      <fo:inline font-style="italic">file</fo:inline>, with the
              following exceptions:</fo:block>
	    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Emulator flag <fo:inline font-family="monospace">+fnu</fo:inline> is ignored.</fo:block></fo:block></fo:list-item-body></fo:list-item>
	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic"><fo:inline font-family="monospace">getopts/2</fo:inline></fo:inline>
	      for this option returns a binary for the filename if the stored
	      filename cannot be decoded. This is only to occur if you set the
	      option using a binary that cannot be decoded with the emulator's
	      filename encoding:
	      <fo:inline font-style="italic"><fo:inline font-family="monospace">file:native_name_encoding/0</fo:inline></fo:inline>.</fo:block></fo:block></fo:list-item-body></fo:list-item>
	    </fo:list-block>
          </fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{bind_to_device, Ifname :: binary()}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Binds a socket to a specific network interface. This option
	      must be used in a function call that creates a socket, that is,
	      <fo:inline font-style="italic"><fo:inline font-family="monospace">gen_tcp:connect/3,4</fo:inline></fo:inline>,
	      <fo:inline font-style="italic"><fo:inline font-family="monospace">gen_tcp:listen/2</fo:inline></fo:inline>,
	      <fo:inline font-style="italic"><fo:inline font-family="monospace">gen_udp:open/1,2</fo:inline></fo:inline>, or
	      <fo:inline font-style="italic"><fo:inline font-family="monospace">gen_sctp:open/0,1,2</fo:inline></fo:inline>.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Unlike <fo:inline font-style="italic"><fo:inline font-family="monospace">getifaddrs/0</fo:inline></fo:inline>, Ifname
	      is encoded a binary. In the unlikely case that a system is using
	      non-7-bit-ASCII characters in network device names, special care
	      has to be taken when encoding this argument.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This option uses the Linux-specific socket option
	      <fo:inline font-family="monospace">SO_BINDTODEVICE</fo:inline>, such as in Linux kernel 2.0.30 or later,
	      and therefore only exists when the runtime system
	      is compiled for such an operating system.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Before Linux 3.8, this socket option could be set, but could not retrieved
	      with <fo:inline font-style="italic"><fo:inline font-family="monospace">getopts/2</fo:inline></fo:inline>. Since Linux 3.8,
	      it is readable.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The virtual machine also needs elevated privileges, either
	      running as superuser or (for Linux) having capability
	    <fo:inline font-family="monospace">CAP_NET_RAW</fo:inline>.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The primary use case for this option is to bind sockets into
	      <fo:inline font-weight="bold"><fo:basic-link external-destination="href">Linux VRF instances</fo:basic-link></fo:inline>.
	    </fo:block>
	  </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">list</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Received <fo:inline font-family="monospace">Packet</fo:inline> is delivered as a list.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">binary</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Received <fo:inline font-family="monospace">Packet</fo:inline> is delivered as a binary.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{nodelay, Boolean}</fo:inline>(TCP/IP sockets)</fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Boolean == true</fo:inline>, option <fo:inline font-family="monospace">TCP_NODELAY</fo:inline>
              is turned on for the socket, which means that also small
              amounts of data are sent immediately.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{packet, PacketType}</fo:inline>(TCP/IP sockets)</fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines the type of packets to use for a socket.
	      Possible values:</fo:block>
            <fo:block space-after="0.25em" space-before="0.25em">
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">raw | 0</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">No packaging is done.</fo:block>
              </fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">1 | 2 | 4</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Packets consist of a header specifying the number of
                  bytes in the packet, followed by that number of bytes.
                  The header length can be one, two, or four bytes, and
                  containing an unsigned integer in big-endian byte order.
                  Each send operation generates the header, and the header
                  is stripped off on each receive operation.</fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The 4-byte header is limited to 2Gb.</fo:block>
              </fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">asn1 | cdr | sunrm | fcgi | tpkt | line</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These packet types only have effect on receiving.
                  When sending a packet, it is the responsibility of
                  the application to supply a correct header. On
                  receiving, however, one message is sent to
                  the controlling process for each complete packet
                  received, and, similarly, each call to
                  <fo:inline font-family="monospace">gen_tcp:recv/2,3</fo:inline> returns one complete packet.
                  The header is <fo:inline font-weight="bold">not</fo:inline> stripped off.</fo:block>
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The meanings of the packet types are as follows:</fo:block>
		<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
		  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">asn1</fo:inline> - ASN.1 BER</fo:block></fo:list-item-body></fo:list-item>
		  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">sunrm</fo:inline> - Sun's RPC encoding</fo:block></fo:list-item-body></fo:list-item>
		  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">cdr</fo:inline> - CORBA (GIOP 1.1)</fo:block></fo:list-item-body></fo:list-item>
		  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">fcgi</fo:inline> - Fast CGI</fo:block></fo:list-item-body></fo:list-item>
		  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">tpkt</fo:inline> - TPKT format [RFC1006]</fo:block></fo:list-item-body></fo:list-item>
		  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">line</fo:inline> - Line mode, a packet is a line-terminated
		    with newline, lines longer than the receive buffer are
		    truncated</fo:block></fo:list-item-body></fo:list-item>
		</fo:list-block>
	      </fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">http | http_bin</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Hypertext Transfer Protocol. The packets
                 are returned with the format according to <fo:inline font-family="monospace">HttpPacket</fo:inline>
                 described in
                 <fo:inline font-style="italic">
                 <fo:inline font-family="monospace">erlang:decode_packet/3</fo:inline></fo:inline> in ERTS.
                 A socket in passive
                 mode returns <fo:inline font-family="monospace">{ok, HttpPacket}</fo:inline> from <fo:inline font-family="monospace">gen_tcp:recv</fo:inline>
                 while an active socket sends messages like
		 <fo:inline font-family="monospace">{http, Socket, HttpPacket}</fo:inline>.</fo:block>
              </fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">httph | httph_bin</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">
                <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These two types are often not needed, as the socket
		automatically switches from <fo:inline font-family="monospace">http</fo:inline>/<fo:inline font-family="monospace">http_bin</fo:inline> to
		<fo:inline font-family="monospace">httph</fo:inline>/<fo:inline font-family="monospace">httph_bin</fo:inline> internally after the first line
		is read. However, there can be occasions when they are
		useful, such as parsing trailers from chunked encoding.</fo:block>
              </fo:block></fo:block-container>
            </fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{packet_size, Integer}</fo:inline>(TCP/IP sockets)</fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the maximum allowed length of the packet body. If
              the packet header indicates that the length of the packet
              is longer than the maximum allowed length, the packet is
              considered invalid. The same occurs if the packet header
              is too large for the socket receive buffer.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For line-oriented protocols (<fo:inline font-family="monospace">line</fo:inline>, <fo:inline font-family="monospace">http*</fo:inline>),
	      option <fo:inline font-family="monospace">packet_size</fo:inline> also guarantees that lines up to the
	      indicated length are accepted and not considered invalid
	      because of internal buffer limitations.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{line_delimiter, Char}</fo:inline>(TCP/IP sockets)</fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the line delimiting character for line-oriented protocols
              (<fo:inline font-family="monospace">line</fo:inline>). Defaults to <fo:inline font-family="monospace">$\n</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{raw, Protocol, OptionNum, ValueBin}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See below.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{read_packets, Integer}</fo:inline>(UDP sockets)</fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the maximum number of UDP packets to read without
              intervention from the socket when data is available.
              When this many packets have been read and delivered
              to the destination process, new packets are not read
              until a new notification of available data has arrived.
              Defaults to <fo:inline font-family="monospace">5</fo:inline>. If this parameter is set too
              high, the system can become unresponsive because of
              UDP packet flooding.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{recbuf, Size}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The minimum size of the receive buffer to use for
              the socket. You are encouraged to use
              <fo:inline font-style="italic"><fo:inline font-family="monospace">getopts/2</fo:inline></fo:inline>
              to retrieve the size set by your operating system.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{reuseaddr, Boolean}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allows or disallows local reuse of port numbers. By
              default, reuse is disallowed.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{send_timeout, Integer}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Only allowed for connection-oriented sockets.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies a longest time to wait for a send operation to
              be accepted by the underlying TCP stack. When the limit is
              exceeded, the send operation returns
              <fo:inline font-family="monospace">{error,timeout}</fo:inline>. How much of a packet that
              got sent is unknown; the socket is therefore to be closed
              whenever a time-out has occurred (see <fo:inline font-family="monospace">send_timeout_close</fo:inline>
              below). Defaults to <fo:inline font-family="monospace">infinity</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{send_timeout_close, Boolean}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Only allowed for connection-oriented sockets.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Used together with <fo:inline font-family="monospace">send_timeout</fo:inline> to specify whether
              the socket is to be automatically closed when the send operation
              returns <fo:inline font-family="monospace">{error,timeout}</fo:inline>. The recommended setting is
              <fo:inline font-family="monospace">true</fo:inline>, which automatically closes the socket.
              Defaults to <fo:inline font-family="monospace">false</fo:inline> because of backward compatibility.</fo:block>
            
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{show_econnreset, Boolean}</fo:inline>(TCP/IP sockets)</fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When this option is set to <fo:inline font-family="monospace">false</fo:inline>, which is
              default, an RST received from the TCP peer is treated
              as a normal close (as though an FIN was sent). A caller to
              <fo:inline font-style="italic"><fo:inline font-family="monospace">gen_tcp:recv/2</fo:inline></fo:inline>
              gets <fo:inline font-family="monospace">{error, closed}</fo:inline>. In active
              mode, the controlling process receives a
              <fo:inline font-family="monospace">{tcp_close, Socket}</fo:inline> message, indicating that the
              peer has closed the connection.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Setting this option to <fo:inline font-family="monospace">true</fo:inline> allows you to
              distinguish between a connection that was closed normally,
              and one that was aborted (intentionally or unintentionally)
              by the TCP peer. A call to
              <fo:inline font-style="italic"><fo:inline font-family="monospace">gen_tcp:recv/2</fo:inline></fo:inline>
              returns <fo:inline font-family="monospace">{error, econnreset}</fo:inline>. In
              active mode, the controlling process receives a
              <fo:inline font-family="monospace">{tcp_error, Socket, econnreset}</fo:inline> message
              before the usual <fo:inline font-family="monospace">{tcp_closed, Socket}</fo:inline>, as is
              the case for any other socket error. Calls to
              <fo:inline font-style="italic"><fo:inline font-family="monospace">gen_tcp:send/2</fo:inline></fo:inline>
              also returns <fo:inline font-family="monospace">{error, econnreset}</fo:inline> when it
              is detected that a TCP peer has sent an RST.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A connected socket returned from
              <fo:inline font-style="italic"><fo:inline font-family="monospace">gen_tcp:accept/1</fo:inline></fo:inline>
              inherits the <fo:inline font-family="monospace">show_econnreset</fo:inline> setting from the
              listening socket.</fo:block>
            
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{sndbuf, Size}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The minimum size of the send buffer to use for the socket.
              You are encouraged to use
              <fo:inline font-style="italic"><fo:inline font-family="monospace">getopts/2</fo:inline></fo:inline>,
              to retrieve the size set by your operating system.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{priority, Integer}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the <fo:inline font-family="monospace">SO_PRIORITY</fo:inline> socket level option on platforms
              where this is implemented. The behavior and allowed range varies
              between different systems.
              The option is ignored on platforms where it
              is not implemented. Use with caution.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{tos, Integer}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets <fo:inline font-family="monospace">IP_TOS IP</fo:inline> level options on platforms where this is
              implemented. The behavior and allowed range varies between
              different systems.
              The option is ignored on platforms where it is not
              implemented. Use with caution.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{tclass, Integer}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	      Sets <fo:inline font-family="monospace">IPV6_TCLASS IP</fo:inline> level options on platforms
	      where this is implemented. The behavior and allowed range
	      varies between different systems.
              The option is ignored on platforms where it is not
              implemented. Use with caution.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In addition to these options, <fo:inline font-weight="bold">raw</fo:inline>
          option specifications can be used. The raw options are
          specified as a tuple of arity four, beginning with tag
          <fo:inline font-family="monospace">raw</fo:inline>, followed by the protocol level, the option number,
          and the option value specified as a binary. This
          corresponds to the second, third, and fourth arguments to the
          <fo:inline font-family="monospace">setsockopt</fo:inline> call in the C socket API. The option value
          must be coded in the native endianess of the platform and,
          if a structure is required, must follow the structure
          alignment conventions on the specific platform.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Using raw socket options requires detailed knowledge about
          the current operating system and TCP stack.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This example concerns the use of raw options. Consider a Linux
          system where you want to set option <fo:inline font-family="monospace">TCP_LINGER2</fo:inline> on
          protocol level <fo:inline font-family="monospace">IPPROTO_TCP</fo:inline> in the stack. You know
          that on this particular system it defaults to 60 (seconds),
          but you want to lower it to 30 for a particular
          socket. Option <fo:inline font-family="monospace">TCP_LINGER2</fo:inline> is not explicitly
          supported by <fo:inline font-family="monospace">inet</fo:inline>, but you know that the protocol level
          translates to number 6, the option number to number 8,
          and the value is to be specified as a 32-bit integer. You can use
          this code line to set the option for the socket named
          <fo:inline font-family="monospace">Sock</fo:inline>:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
inet:setopts(Sock,[{raw,6,8,&lt;&lt;30:32/native&gt;&gt;}]),</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As many options are silently discarded by the stack if they
          are specified out of range; it can be a good idea to check that
          a raw option is accepted. The following code places the value
          in variable <fo:inline font-family="monospace">TcpLinger2:</fo:inline></fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{ok,[{raw,6,8,&lt;&lt;TcpLinger2:32/native&gt;&gt;}]}=inet:getopts(Sock,[{raw,6,8,4}]),</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Code such as these examples is inherently non-portable,
          even different versions of the same OS on the same platform
          can respond differently to this kind of option
          manipulation. Use with care.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that the default options for TCP/IP sockets can be
          changed with the Kernel configuration parameters mentioned in
          the beginning of this manual page.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9988160"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">sockname(Socket :: <fo:inline font-style="italic">socket()</fo:inline>) -&gt;<fo:block/>            {ok,<fo:block/>             {<fo:inline font-style="italic">ip_address()</fo:inline>, <fo:inline font-style="italic">port_number()</fo:inline>} |<fo:block/>             <fo:inline font-style="italic">returned_non_ip_address()</fo:inline>} |<fo:block/>            {error, <fo:inline font-style="italic">posix()</fo:inline>}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the local address and port number for a socket.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that for SCTP sockets this function returns only
	  one of the socket addresses. Function
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">socknames/1,2</fo:inline></fo:inline>
	  returns all.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9992240"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">socknames(Socket :: <fo:inline font-style="italic">socket()</fo:inline>) -&gt;<fo:block/>             {ok,<fo:block/>              [{<fo:inline font-style="italic">ip_address()</fo:inline>, <fo:inline font-style="italic">port_number()</fo:inline>} |<fo:block/>               <fo:inline font-style="italic">returned_non_ip_address()</fo:inline>]} |<fo:block/>             {error, <fo:inline font-style="italic">posix()</fo:inline>}</fo:block></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">socknames(Socket, 0)</fo:inline></fo:inline>.
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp9996192"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">socknames(Socket, Assoc) -&gt;<fo:block/>             {ok, [{Address, Port}]} | {error, <fo:inline font-style="italic">posix()</fo:inline>}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Socket = <fo:inline font-style="italic">socket()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Assoc = #sctp_assoc_change{} | <fo:inline font-style="italic">gen_sctp:assoc_id()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Address = <fo:inline font-style="italic">ip_address()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Port = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of all local address/port number pairs for a socket
	  for the specified association <fo:inline font-family="monospace">Assoc</fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function can return multiple addresses for multihomed
	  sockets, such as SCTP sockets. For other sockets it
	  returns a one-element list.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that parameter <fo:inline font-family="monospace">Assoc</fo:inline> is by the
	  <fo:inline font-weight="bold"><fo:basic-link external-destination="href">SCTP Sockets API Extensions</fo:basic-link></fo:inline>
	  defined to be ignored for one-to-one style sockets.
	  For one-to-many style sockets, the special value <fo:inline font-family="monospace">0</fo:inline>
	  is defined to mean that the returned addresses must be
	  without any particular association.
	  How different SCTP implementations interprets this varies somewhat.
        </fo:block>
      </fo:block>
  

  <fo:block id="idp10003312" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">POSIX Error Codes</fo:block>
    
    
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">e2big</fo:inline> - Too long argument list</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">eacces</fo:inline> - Permission denied</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">eaddrinuse</fo:inline> - Address already in use</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">eaddrnotavail</fo:inline> - Cannot assign requested address</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">eadv</fo:inline> - Advertise error</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">eafnosupport</fo:inline> - Address family not supported by
        protocol family</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">eagain</fo:inline> - Resource temporarily unavailable</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ealign</fo:inline> - EALIGN</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ealready</fo:inline> - Operation already in progress</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ebade</fo:inline> - Bad exchange descriptor</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ebadf</fo:inline> - Bad file number</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ebadfd</fo:inline> - File descriptor in bad state</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ebadmsg</fo:inline> - Not a data message</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ebadr</fo:inline> - Bad request descriptor</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ebadrpc</fo:inline> - Bad RPC structure</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ebadrqc</fo:inline> - Bad request code</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ebadslt</fo:inline> - Invalid slot</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ebfont</fo:inline> - Bad font file format</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ebusy</fo:inline> - File busy</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">echild</fo:inline> - No children</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">echrng</fo:inline> - Channel number out of range</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ecomm</fo:inline> - Communication error on send</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">econnaborted</fo:inline> - Software caused connection abort</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">econnrefused</fo:inline> - Connection refused</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">econnreset</fo:inline> - Connection reset by peer</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">edeadlk</fo:inline> - Resource deadlock avoided</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">edeadlock</fo:inline> - Resource deadlock avoided</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">edestaddrreq</fo:inline> - Destination address required</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">edirty</fo:inline> - Mounting a dirty fs without force</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">edom</fo:inline> - Math argument out of range</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">edotdot</fo:inline> - Cross mount point</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">edquot</fo:inline> - Disk quota exceeded</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">eduppkg</fo:inline> - Duplicate package name</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">eexist</fo:inline> - File already exists</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">efault</fo:inline> - Bad address in system call argument</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">efbig</fo:inline> - File too large</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ehostdown</fo:inline> - Host is down</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ehostunreach</fo:inline> - Host is unreachable</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">eidrm</fo:inline> - Identifier removed</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">einit</fo:inline> - Initialization error</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">einprogress</fo:inline> - Operation now in progress</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">eintr</fo:inline> - Interrupted system call</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">einval</fo:inline> - Invalid argument</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">eio</fo:inline> - I/O error</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">eisconn</fo:inline> - Socket is already connected</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">eisdir</fo:inline> - Illegal operation on a directory</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">eisnam</fo:inline> - Is a named file</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">el2hlt</fo:inline> - Level 2 halted</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">el2nsync</fo:inline> - Level 2 not synchronized</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">el3hlt</fo:inline> - Level 3 halted</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">el3rst</fo:inline> - Level 3 reset</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">elbin</fo:inline> - ELBIN</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">elibacc</fo:inline> - Cannot access a needed shared library</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">elibbad</fo:inline> - Accessing a corrupted shared library</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">elibexec</fo:inline> - Cannot exec a shared library directly</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">elibmax</fo:inline> - Attempting to link in more shared
        libraries than system limit</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">elibscn</fo:inline> - <fo:inline font-family="monospace">.lib</fo:inline> section in <fo:inline font-family="monospace">a.out</fo:inline>
        corrupted</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">elnrng</fo:inline> - Link number out of range</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">eloop</fo:inline> - Too many levels of symbolic links</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">emfile</fo:inline> - Too many open files</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">emlink</fo:inline> - Too many links</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">emsgsize</fo:inline> - Message too long</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">emultihop</fo:inline> - Multihop attempted</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">enametoolong</fo:inline> - Filename too long</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">enavail</fo:inline> - Unavailable</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">enet</fo:inline> - ENET</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">enetdown</fo:inline> - Network is down</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">enetreset</fo:inline> - Network dropped connection on reset</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">enetunreach</fo:inline> - Network is unreachable</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">enfile</fo:inline> - File table overflow</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">enoano</fo:inline> - Anode table overflow</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">enobufs</fo:inline> - No buffer space available</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">enocsi</fo:inline> - No CSI structure available</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">enodata</fo:inline> - No data available</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">enodev</fo:inline> - No such device</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">enoent</fo:inline> - No such file or directory</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">enoexec</fo:inline> - Exec format error</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">enolck</fo:inline> - No locks available</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">enolink</fo:inline> - Link has been severed</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">enomem</fo:inline> - Not enough memory</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">enomsg</fo:inline> - No message of desired type</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">enonet</fo:inline> - Machine is not on the network</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">enopkg</fo:inline> - Package not installed</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">enoprotoopt</fo:inline> - Bad protocol option</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">enospc</fo:inline> - No space left on device</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">enosr</fo:inline> - Out of stream resources or not a stream device</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">enosym</fo:inline> - Unresolved symbol name</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">enosys</fo:inline> - Function not implemented</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">enotblk</fo:inline> - Block device required</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">enotconn</fo:inline> - Socket is not connected</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">enotdir</fo:inline> - Not a directory</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">enotempty</fo:inline> - Directory not empty</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">enotnam</fo:inline> - Not a named file</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">enotsock</fo:inline> - Socket operation on non-socket</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">enotsup</fo:inline> - Operation not supported</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">enotty</fo:inline> - Inappropriate device for <fo:inline font-family="monospace">ioctl</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">enotuniq</fo:inline> - Name not unique on network</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">enxio</fo:inline> - No such device or address</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">eopnotsupp</fo:inline> - Operation not supported on socket</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">eperm</fo:inline> - Not owner</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">epfnosupport</fo:inline> - Protocol family not supported</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">epipe</fo:inline> - Broken pipe</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">eproclim</fo:inline> - Too many processes</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">eprocunavail</fo:inline> - Bad procedure for program</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">eprogmismatch</fo:inline> - Wrong program version</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">eprogunavail</fo:inline> - RPC program unavailable</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">eproto</fo:inline> - Protocol error</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">eprotonosupport</fo:inline> - Protocol not supported</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">eprototype</fo:inline> - Wrong protocol type for socket</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">erange</fo:inline> - Math result unrepresentable</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">erefused</fo:inline> - EREFUSED</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">eremchg</fo:inline> - Remote address changed</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">eremdev</fo:inline> - Remote device</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">eremote</fo:inline> - Pathname hit remote filesystem</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">eremoteio</fo:inline> - Remote I/O error</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">eremoterelease</fo:inline> - EREMOTERELEASE</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">erofs</fo:inline> - Read-only filesystem</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">erpcmismatch</fo:inline> - Wrong RPC version</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">erremote</fo:inline> - Object is remote</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">eshutdown</fo:inline> - Cannot send after socket shutdown</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">esocktnosupport</fo:inline> - Socket type not supported</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">espipe</fo:inline> - Invalid seek</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">esrch</fo:inline> - No such process</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">esrmnt</fo:inline> - Srmount error</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">estale</fo:inline> - Stale remote file handle</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">esuccess</fo:inline> - Error 0</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">etime</fo:inline> - Timer expired</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">etimedout</fo:inline> - Connection timed out</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">etoomanyrefs</fo:inline> - Too many references</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">etxtbsy</fo:inline> - Text file or pseudo-device busy</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">euclean</fo:inline> - Structure needs cleaning</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">eunatch</fo:inline> - Protocol driver not attached</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">eusers</fo:inline> - Too many users</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">eversion</fo:inline> - Version mismatch</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ewouldblock</fo:inline> - Operation would block</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">exdev</fo:inline> - Cross-domain link</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">exfull</fo:inline> - Message tables full</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">nxdomain</fo:inline> - Hostname or domain name cannot be found</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  
<fo:block page-break-before="always" id="idp10115088" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">inet_res</fo:marker>inet_res</fo:block>Erlang module</fo:block>
  <fo:block/>
  inet_res
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module performs DNS name resolving to recursive name servers.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also
      <fo:inline font-style="italic">ERTS User's Guide: Inet Configuration</fo:inline>
      for more information about how to configure an Erlang runtime system
      for IP communication, and how to enable this DNS client by defining
      <fo:inline font-family="monospace">'dns'</fo:inline> as a lookup method.
      The DNS client then acts as a backend for the resolving functions in
      <fo:inline font-style="italic"><fo:inline font-family="monospace">inet</fo:inline></fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This DNS client can resolve DNS records even if it
      is not used for normal name resolving in the node.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is not a full-fledged resolver, only a
      DNS client that relies on asking trusted recursive name servers.</fo:block>
  

  <fo:block id="idp10121024" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Name Resolving</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">UDP queries are used unless resolver option
      <fo:inline font-family="monospace">usevc</fo:inline> is <fo:inline font-family="monospace">true</fo:inline>, which forces TCP queries.
      If the query is too large for UDP, TCP is used instead.
      For regular DNS queries, 512 bytes is the size limit.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When EDNS is enabled (resolver option
      <fo:inline font-family="monospace">edns</fo:inline> is set to the EDNS version (that is, <fo:inline font-family="monospace">0</fo:inline>
      instead of <fo:inline font-family="monospace">false</fo:inline>), resolver option
      <fo:inline font-family="monospace">udp_payload_size</fo:inline> sets the limit. If a name server
      replies with the TC bit set (truncation), indicating that
      the answer is incomplete, the query is retried
      to that name server using TCP. Resolver option
      <fo:inline font-family="monospace">udp_payload_size</fo:inline> also sets the advertised
      size for the maximum allowed reply size, if EDNS is
      enabled, otherwise the name server uses the limit
      512 bytes. If the reply is larger, it gets truncated,
      forcing a TCP requery.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For UDP queries, resolver options <fo:inline font-family="monospace">timeout</fo:inline>
      and <fo:inline font-family="monospace">retry</fo:inline> control retransmission.
      Each name server in the <fo:inline font-family="monospace">nameservers</fo:inline> list is
      tried with a time-out of <fo:inline font-family="monospace">timeout</fo:inline>/<fo:inline font-family="monospace">retry</fo:inline>.
      Then all name servers are tried again, doubling the
      time-out, for a total of <fo:inline font-family="monospace">retry</fo:inline> times.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For queries not using the <fo:inline font-family="monospace">search</fo:inline> list,
      if the query to all <fo:inline font-family="monospace">nameservers</fo:inline> results in
      <fo:inline font-family="monospace">{error,nxdomain}</fo:inline> or an empty answer, the same
      query is tried for <fo:inline font-family="monospace">alt_nameservers</fo:inline>.</fo:block>
  

  <fo:block id="idp10132176" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Resolver Types</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following data types concern the resolver:</fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Data Types</fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">res_option() = <fo:block/>    {alt_nameservers, [<fo:inline font-style="italic">nameserver()</fo:inline>]} |<fo:block/>    {edns, 0 | false} |<fo:block/>    {inet6, boolean()} |<fo:block/>    {nameservers, [<fo:inline font-style="italic">nameserver()</fo:inline>]} |<fo:block/>    {recurse, boolean()} |<fo:block/>    {retry, integer()} |<fo:block/>    {timeout, integer()} |<fo:block/>    {udp_payload_size, integer()} |<fo:block/>    {usevc, boolean()}</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">nameserver() = {<fo:inline font-style="italic">inet:ip_address()</fo:inline>, Port :: 1..65535}</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">res_error() = <fo:block/>    formerr |<fo:block/>    qfmterror |<fo:block/>    servfail |<fo:block/>    nxdomain |<fo:block/>    notimp |<fo:block/>    refused |<fo:block/>    badvers |<fo:block/>    timeout</fo:block></fo:block>
  

  <fo:block id="idp10137024" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">DNS Types</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The following data types concern the DNS client:</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Data Types</fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">dns_name() = string()</fo:block></fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A string with no adjacent dots.</fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">rr_type() = <fo:block/>    a |<fo:block/>    aaaa |<fo:block/>    cname |<fo:block/>    gid |<fo:block/>    hinfo |<fo:block/>    ns |<fo:block/>    mb |<fo:block/>    md |<fo:block/>    mg |<fo:block/>    mf |<fo:block/>    minfo |<fo:block/>    mx |<fo:block/>    naptr |<fo:block/>    null |<fo:block/>    ptr |<fo:block/>    soa |<fo:block/>    spf |<fo:block/>    srv |<fo:block/>    txt |<fo:block/>    uid |<fo:block/>    uinfo |<fo:block/>    unspec |<fo:block/>    wks</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">dns_class() = in | chaos | hs | any</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">dns_msg() = term()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is the start of a hiearchy of opaque data structures
          that can be examined with access functions in <fo:inline font-family="monospace">inet_dns</fo:inline>, which
          return lists of <fo:inline font-family="monospace">{Field,Value}</fo:inline> tuples. The arity 2 functions
          only return the value for a specified field.</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
dns_msg() = DnsMsg
    inet_dns:msg(DnsMsg) -&gt;
        [ {header, dns_header()}
        | {qdlist, dns_query()}
        | {anlist, dns_rr()}
        | {nslist, dns_rr()}
        | {arlist, dns_rr()} ]
    inet_dns:msg(DnsMsg, header) -&gt; dns_header() % for example
    inet_dns:msg(DnsMsg, Field) -&gt; Value

dns_header() = DnsHeader
    inet_dns:header(DnsHeader) -&gt;
        [ {id, integer()}
        | {qr, boolean()}
        | {opcode, 'query' | iquery | status | integer()}
        | {aa, boolean()}
        | {tc, boolean()}
        | {rd, boolean()}
        | {ra, boolean()}
        | {pr, boolean()}
        | {rcode, integer(0..16)} ]
    inet_dns:header(DnsHeader, Field) -&gt; Value

query_type() = axfr | mailb | maila | any | rr_type()

dns_query() = DnsQuery
    inet_dns:dns_query(DnsQuery) -&gt;
        [ {domain, dns_name()}
        | {type, query_type()}
        | {class, dns_class()} ]
    inet_dns:dns_query(DnsQuery, Field) -&gt; Value

dns_rr() = DnsRr
    inet_dns:rr(DnsRr) -&gt; DnsRrFields | DnsRrOptFields
    DnsRrFields = [ {domain, dns_name()}
                  | {type, rr_type()}
                  | {class, dns_class()}
                  | {ttl, integer()}
                  | {data, dns_data()} ]
    DnsRrOptFields = [ {domain, dns_name()}
                     | {type, opt}
                     | {udp_payload_size, integer()}
                     | {ext_rcode, integer()}
                     | {version, integer()}
                     | {z, integer()}
                     | {data, dns_data()} ]
    inet_dns:rr(DnsRr, Field) -&gt; Value</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There is an information function for the types above:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
inet_dns:record_type(dns_msg()) -&gt; msg;
inet_dns:record_type(dns_header()) -&gt; header;
inet_dns:record_type(dns_query()) -&gt; dns_query;
inet_dns:record_type(dns_rr()) -&gt; rr;
inet_dns:record_type(_) -&gt; undefined.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">So, <fo:inline font-family="monospace">inet_dns:(inet_dns:record_type(X))(X)</fo:inline> converts
          any of these data structures into a <fo:inline font-family="monospace">{Field,Value}</fo:inline> list.</fo:block>
      
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">dns_data() = <fo:block/>    <fo:inline font-style="italic">dns_name()</fo:inline> |<fo:block/>    <fo:inline font-style="italic">inet:ip4_address()</fo:inline> |<fo:block/>    <fo:inline font-style="italic">inet:ip6_address()</fo:inline> |<fo:block/>    {MName :: <fo:inline font-style="italic">dns_name()</fo:inline>,<fo:block/>     RName :: <fo:inline font-style="italic">dns_name()</fo:inline>,<fo:block/>     Serial :: integer(),<fo:block/>     Refresh :: integer(),<fo:block/>     Retry :: integer(),<fo:block/>     Expiry :: integer(),<fo:block/>     Minimum :: integer()} |<fo:block/>    {<fo:inline font-style="italic">inet:ip4_address()</fo:inline>, Proto :: integer(), BitMap :: binary()} |<fo:block/>    {CpuString :: string(), OsString :: string()} |<fo:block/>    {RM :: <fo:inline font-style="italic">dns_name()</fo:inline>, EM :: <fo:inline font-style="italic">dns_name()</fo:inline>} |<fo:block/>    {Prio :: integer(), <fo:inline font-style="italic">dns_name()</fo:inline>} |<fo:block/>    {Prio :: integer(),<fo:block/>     Weight :: integer(),<fo:block/>     Port :: integer(),<fo:block/>     <fo:inline font-style="italic">dns_name()</fo:inline>} |<fo:block/>    {Order :: integer(),<fo:block/>     Preference :: integer(),<fo:block/>     Flags :: string(),<fo:block/>     Services :: string(),<fo:block/>     Regexp :: string(),<fo:block/>     <fo:inline font-style="italic">dns_name()</fo:inline>} |<fo:block/>    [string()] |<fo:block/>    binary()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Regexp</fo:inline> is a string with characters encoded
          in the UTF-8 coding standard.</fo:block>
      
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp10153040"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">getbyname(Name, Type) -&gt; {ok, Hostent} | {error, Reason}</fo:block></fo:block><fo:block id="idp10153872"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">getbyname(Name, Type, Timeout) -&gt; {ok, Hostent} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = <fo:inline font-style="italic">dns_name()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Type = <fo:inline font-style="italic">rr_type()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Hostent = <fo:inline font-style="italic">inet:hostent()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">inet:posix()</fo:inline> | <fo:inline font-style="italic">res_error()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Resolves a DNS record of the specified type for the specified host,
          of class <fo:inline font-family="monospace">in</fo:inline>. Returns, on success, a <fo:inline font-family="monospace">hostent()</fo:inline> record
          with <fo:inline font-family="monospace">dns_data()</fo:inline> elements in the address list field.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function uses resolver option <fo:inline font-family="monospace">search</fo:inline> that
          is a list of domain names. If the name to resolve contains
          no dots, it is prepended to each domain name in the
          search list, and they are tried in order. If the name
          contains dots, it is first tried as an absolute name
          and if that fails, the search list is used. If the name
          has a trailing dot, it is supposed to be
          an absolute name and the search list is not used.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10159344"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">gethostbyaddr(Address) -&gt; {ok, Hostent} | {error, Reason}</fo:block></fo:block><fo:block id="idp10160176"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">gethostbyaddr(Address, Timeout) -&gt; {ok, Hostent} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Address = <fo:inline font-style="italic">inet:ip_address()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Hostent = <fo:inline font-style="italic">inet:hostent()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">inet:posix()</fo:inline> | <fo:inline font-style="italic">res_error()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Backend functions used by
          <fo:inline font-style="italic"><fo:inline font-family="monospace">inet:gethostbyaddr/1</fo:inline></fo:inline>.
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10163744"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">gethostbyname(Name) -&gt; {ok, Hostent} | {error, Reason}</fo:block></fo:block><fo:block id="idp10164576"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">gethostbyname(Name, Family) -&gt; {ok, Hostent} | {error, Reason}</fo:block></fo:block><fo:block id="idp10165408"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">gethostbyname(Name, Family, Timeout) -&gt;<fo:block/>                 {ok, Hostent} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = <fo:inline font-style="italic">dns_name()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Hostent = <fo:inline font-style="italic">inet:hostent()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Family = <fo:inline font-style="italic">inet:address_family()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">inet:posix()</fo:inline> | <fo:inline font-style="italic">res_error()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Backend functions used by
          <fo:inline font-style="italic"><fo:inline font-family="monospace">inet:gethostbyname/1,2</fo:inline></fo:inline>.
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function uses resolver option <fo:inline font-family="monospace">search</fo:inline> just like
          <fo:inline font-style="italic"><fo:inline font-family="monospace">getbyname/2,3</fo:inline></fo:inline>.
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If resolver option <fo:inline font-family="monospace">inet6</fo:inline> is <fo:inline font-family="monospace">true</fo:inline>,
          an IPv6 address is looked up. If that fails,
          the IPv4 address is looked up and returned on
          IPv6-mapped IPv4 format.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10172192"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">lookup(Name, Class, Type) -&gt; [<fo:inline font-style="italic">dns_data()</fo:inline>]</fo:block></fo:block><fo:block id="idp10173024"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">lookup(Name, Class, Type, Opts) -&gt; [<fo:inline font-style="italic">dns_data()</fo:inline>]</fo:block></fo:block><fo:block id="idp10173856"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">lookup(Name, Class, Type, Opts, Timeout) -&gt; [<fo:inline font-style="italic">dns_data()</fo:inline>]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = <fo:inline font-style="italic">dns_name()</fo:inline> | <fo:inline font-style="italic">inet:ip_address()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Class = <fo:inline font-style="italic">dns_class()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Type = <fo:inline font-style="italic">rr_type()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Opts = [<fo:inline font-style="italic">res_option()</fo:inline> | verbose]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Resolves the DNS data for the record of the specified type and class
          for the specified name. On success, filters out the answer records
          with the correct <fo:inline font-family="monospace">Class</fo:inline> and
          <fo:inline font-family="monospace">Type</fo:inline>, and returns
          a list of their data fields. So, a lookup for type <fo:inline font-family="monospace">any</fo:inline>
          gives an empty answer, as the answer records have
          specific types that are not <fo:inline font-family="monospace">any</fo:inline>. An empty answer
          or a failed lookup returns an empty list.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calls
          <fo:inline font-style="italic"><fo:inline font-family="monospace">resolve/*</fo:inline></fo:inline>
          with the same arguments and filters the result, so
          <fo:inline font-family="monospace">Opts</fo:inline> is described for those functions.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10180912"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">resolve(Name, Class, Type) -&gt; {ok, <fo:inline font-style="italic">dns_msg()</fo:inline>} | Error</fo:block></fo:block><fo:block id="idp10181744"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">resolve(Name, Class, Type, Opts) -&gt; {ok, <fo:inline font-style="italic">dns_msg()</fo:inline>} | Error</fo:block></fo:block><fo:block id="idp10182576"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">resolve(Name, Class, Type, Opts, Timeout) -&gt;<fo:block/>           {ok, <fo:inline font-style="italic">dns_msg()</fo:inline>} | Error</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = <fo:inline font-style="italic">dns_name()</fo:inline> | <fo:inline font-style="italic">inet:ip_address()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Class = <fo:inline font-style="italic">dns_class()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Type = <fo:inline font-style="italic">rr_type()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Opts = [Opt]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Opt = <fo:inline font-style="italic">res_option()</fo:inline> | verbose | atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Error = {error, Reason} | {error, {Reason, <fo:inline font-style="italic">dns_msg()</fo:inline>}}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">inet:posix()</fo:inline> | <fo:inline font-style="italic">res_error()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Resolves a DNS record of the specified type and class for the
          specified name. The returned <fo:inline font-family="monospace">dns_msg()</fo:inline> can be examined using
          access functions in <fo:inline font-family="monospace">inet_db</fo:inline>, as described in section
          in <fo:inline font-style="italic">DNS Types</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Name</fo:inline> is an <fo:inline font-family="monospace">ip_address()</fo:inline>, the domain
          name to query for is generated as the standard reverse
          <fo:inline font-family="monospace">".IN-ADDR.ARPA."</fo:inline> name for an IPv4 address, or the
          <fo:inline font-family="monospace">".IP6.ARPA."</fo:inline> name for an IPv6 address.
          In this case, you most probably want to use
          <fo:inline font-family="monospace">Class = in</fo:inline> and <fo:inline font-family="monospace">Type = ptr</fo:inline>,
          but it is not done automatically.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Opts</fo:inline> overrides the corresponding resolver
          options. If option <fo:inline font-family="monospace">nameservers</fo:inline> is specified, it is
          assumed that it is the complete list of name serves,
          so resolver option <fo:inline font-family="monospace">alt_nameserves</fo:inline> is ignored.
          However, if option <fo:inline font-family="monospace">alt_nameserves</fo:inline> is also specified to this
          function, it is used.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Option <fo:inline font-family="monospace">verbose</fo:inline> (or rather <fo:inline font-family="monospace">{verbose,true}</fo:inline>)
          causes diagnostics printout through
          <fo:inline font-style="italic"><fo:inline font-family="monospace">io:format/2</fo:inline></fo:inline>
          of queries, replies retransmissions, and so on, similar
          to from utilities, such as <fo:inline font-family="monospace">dig</fo:inline> and <fo:inline font-family="monospace">nslookup</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Opt</fo:inline> is any atom, it is interpreted
          as <fo:inline font-family="monospace">{Opt,true}</fo:inline> unless the atom string starts with
          <fo:inline font-family="monospace">"no"</fo:inline>, making the
          interpretation <fo:inline font-family="monospace">{Opt,false}</fo:inline>.
          For example, <fo:inline font-family="monospace">usevc</fo:inline> is an alias for <fo:inline font-family="monospace">{usevc,true}</fo:inline>
          and <fo:inline font-family="monospace">nousevc</fo:inline> is an alias for <fo:inline font-family="monospace">{usevc,false}</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Option <fo:inline font-family="monospace">inet6</fo:inline> has no effect on this function. You
          probably want to use <fo:inline font-family="monospace">Type = a | aaaa</fo:inline> instead.</fo:block>
      </fo:block>
  

  <fo:block id="idp10203728" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Example</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This access functions example shows how
      <fo:inline font-style="italic"><fo:inline font-family="monospace">lookup/3</fo:inline></fo:inline>
      can be implemented using
      <fo:inline font-style="italic"><fo:inline font-family="monospace">resolve/3</fo:inline></fo:inline>
      from outside the module:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
example_lookup(Name, Class, Type) -&gt;
    case inet_res:resolve(Name, Class, Type) of
        {ok,Msg} -&gt;
            [inet_dns:rr(RR, data)
             || RR &lt;- inet_dns:msg(Msg, anlist),
                 inet_dns:rr(RR, type) =:= Type,
                 inet_dns:rr(RR, class) =:= Class];
        {error,_} -&gt;
            []
     end.</fo:block>
  

  <fo:block id="idp10207872" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Legacy Functions</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These are deprecated because the annoying double
      meaning of the name servers/time-out argument, and
      because they have no decent place for a resolver options list.</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp10209664"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">nslookup(Name, Class, Type) -&gt; {ok, <fo:inline font-style="italic">dns_msg()</fo:inline>} | {error, Reason}</fo:block></fo:block><fo:block id="idp10210496"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">nslookup(Name, Class, Type, Timeout) -&gt;<fo:block/>            {ok, <fo:inline font-style="italic">dns_msg()</fo:inline>} | {error, Reason}</fo:block></fo:block><fo:block id="idp10211600"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">nslookup(Name, Class, Type, Nameservers) -&gt;<fo:block/>            {ok, <fo:inline font-style="italic">dns_msg()</fo:inline>} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = <fo:inline font-style="italic">dns_name()</fo:inline> | <fo:inline font-style="italic">inet:ip_address()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Class = <fo:inline font-style="italic">dns_class()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Type = <fo:inline font-style="italic">rr_type()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Nameservers = [<fo:inline font-style="italic">nameserver()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">inet:posix()</fo:inline> | <fo:inline font-style="italic">res_error()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Resolves a DNS record of the specified type and class for the
          specified name.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10218256"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">nnslookup(Name, Class, Type, Nameservers) -&gt;<fo:block/>             {ok, <fo:inline font-style="italic">dns_msg()</fo:inline>} | {error, Reason}</fo:block></fo:block><fo:block id="idp10219088"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">nnslookup(Name, Class, Type, Nameservers, Timeout) -&gt;<fo:block/>             {ok, <fo:inline font-style="italic">dns_msg()</fo:inline>} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = <fo:inline font-style="italic">dns_name()</fo:inline> | <fo:inline font-style="italic">inet:ip_address()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Class = <fo:inline font-style="italic">dns_class()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Type = <fo:inline font-style="italic">rr_type()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Nameservers = [<fo:inline font-style="italic">nameserver()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">inet:posix()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Resolves a DNS record of the specified type and class for the
          specified name.</fo:block>
      </fo:block>
  
<fo:block page-break-before="always" id="idp10228352" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">init</fo:marker>init</fo:block>Erlang module</fo:block>
  <fo:block/>
  init
  <fo:block/>
  
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module is moved to the
    <fo:inline font-style="italic">ERTS</fo:inline> application.</fo:block>
  
<fo:block page-break-before="always" id="idp10237504" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">net_adm</fo:marker>net_adm</fo:block>Erlang module</fo:block>
  <fo:block/>
  net_adm
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module contains various network utility functions.</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp10239936"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">dns_hostname(Host) -&gt; {ok, Name} | {error, Host}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Host = atom() | string()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = string()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the official name of <fo:inline font-family="monospace">Host</fo:inline>, or
          <fo:inline font-family="monospace">{error, Host}</fo:inline> if no such name is found. See also
          <fo:inline font-style="italic"><fo:inline font-family="monospace">inet(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10244944"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">host_file() -&gt; Hosts | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Hosts = [Host :: atom()]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:block/>    <fo:inline font-style="italic">file:posix()</fo:inline> |<fo:block/>    badarg |<fo:block/>    terminated |<fo:block/>    system_limit |<fo:block/>    {Line :: integer(), Mod :: module(), Term :: term()}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Reads file <fo:inline font-family="monospace">.hosts.erlang</fo:inline>, see section
          <fo:inline font-style="italic">Files</fo:inline>. Returns the hosts in this
          file as a list. Returns <fo:inline font-family="monospace">{error, Reason}</fo:inline> if the
          file cannot be read or the Erlang terms on the file cannot be
          interpreted.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10250224"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">localhost() -&gt; Name</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = string()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the name of the local host. If Erlang was started
          with command-line flag <fo:inline font-family="monospace">-name</fo:inline>, <fo:inline font-family="monospace">Name</fo:inline> is
          the fully qualified name.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10253968"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">names() -&gt; {ok, [{Name, Port}]} | {error, Reason}</fo:block></fo:block><fo:block id="idp10254800"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">names(Host) -&gt; {ok, [{Name, Port}]} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Host = atom() | string() | <fo:inline font-style="italic">inet:ip_address()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = string()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Port = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = address | <fo:inline font-style="italic">file:posix()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Similar to <fo:inline font-family="monospace">epmd -names</fo:inline>, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">erts:epmd(1)</fo:inline></fo:inline>.
          <fo:inline font-family="monospace">Host</fo:inline> defaults to the local host. Returns the
          names and associated port numbers of the Erlang nodes that
          <fo:inline font-family="monospace">epmd</fo:inline> registered at the specified host. Returns
          <fo:inline font-family="monospace">{error, address}</fo:inline> if <fo:inline font-family="monospace">epmd</fo:inline> is not operational.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
(arne@dunn)1&gt; <fo:inline font-weight="bold">net_adm:names().</fo:inline>
{ok,[{"arne",40262}]}</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10262272"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ping(Node) -&gt; pong | pang</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Node = atom()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets up a connection to <fo:inline font-family="monospace">Node</fo:inline>. Returns
          <fo:inline font-family="monospace">pong</fo:inline> if it is successful, otherwise <fo:inline font-family="monospace">pang</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10266416"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">world() -&gt; [node()]</fo:block></fo:block><fo:block id="idp10267248"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">world(Arg) -&gt; [node()]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Arg = <fo:inline font-style="italic">verbosity()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">verbosity() = silent | verbose</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calls <fo:inline font-family="monospace">names(Host)</fo:inline> for all hosts that
          are specified in the Erlang host file <fo:inline font-family="monospace">.hosts.erlang</fo:inline>,
          collects the replies, and then evaluates <fo:inline font-family="monospace">ping(Node)</fo:inline> on
          all those nodes. Returns the list of all nodes that are
          successfully pinged.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Arg</fo:inline> defaults to <fo:inline font-family="monospace">silent</fo:inline>.
          If <fo:inline font-family="monospace">Arg == verbose</fo:inline>, the function writes
          information about which nodes it is pinging to <fo:inline font-family="monospace">stdout</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function can be useful when a node is started, and
          the names of the other network nodes are not initially known.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">{error, Reason}</fo:inline> if <fo:inline font-family="monospace">host_file()</fo:inline>
          returns <fo:inline font-family="monospace">{error, Reason}</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10277344"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">world_list(Hosts) -&gt; [node()]</fo:block></fo:block><fo:block id="idp10278176"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">world_list(Hosts, Arg) -&gt; [node()]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Hosts = [atom()]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Arg = <fo:inline font-style="italic">verbosity()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">verbosity() = silent | verbose</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-style="italic"><fo:inline font-family="monospace">world/0,1</fo:inline></fo:inline>,
          but the hosts are specified as argument
          instead of being read from <fo:inline font-family="monospace">.hosts.erlang</fo:inline>.</fo:block>
      </fo:block>
  

  <fo:block id="idp10282928" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Files</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">File <fo:inline font-family="monospace">.hosts.erlang</fo:inline> consists of a number of host names
      written as Erlang terms. It is looked for in the current work
      directory, the user's home directory, and <fo:inline font-family="monospace">$OTP_ROOT</fo:inline>
      (the root directory of Erlang/OTP), in that order.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The format of file <fo:inline font-family="monospace">.hosts.erlang</fo:inline> must be one host
      name per line. The host names must be within quotes.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
'super.eua.ericsson.se'.
'renat.eua.ericsson.se'.
'grouse.eua.ericsson.se'.
'gauffin1.eua.ericsson.se'.
^ (new line)</fo:block>
  
<fo:block page-break-before="always" id="idp10294320" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">net_kernel</fo:marker>net_kernel</fo:block>Erlang module</fo:block>
  <fo:block/>
  net_kernel
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The net kernel is a system process, registered as
      <fo:inline font-family="monospace">net_kernel</fo:inline>, which must be operational for distributed Erlang
      to work. The purpose of this process is to implement parts of
      the BIFs <fo:inline font-family="monospace">spawn/4</fo:inline> and <fo:inline font-family="monospace">spawn_link/4</fo:inline>, and to provide 
      monitoring of the network.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An Erlang node is started using command-line flag
      <fo:inline font-family="monospace">-name</fo:inline> or <fo:inline font-family="monospace">-sname</fo:inline>:</fo:block>
     <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ <fo:inline font-weight="bold">erl -sname foobar</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is also possible to call <fo:inline font-family="monospace">net_kernel:start([foobar])</fo:inline>
      directly from the normal Erlang shell prompt:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">net_kernel:start([foobar, shortnames]).</fo:inline>
{ok,&lt;0.64.0&gt;}
(foobar@gringotts)2&gt;</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the node is started with command-line flag <fo:inline font-family="monospace">-sname</fo:inline>,
      the node name is <fo:inline font-family="monospace">foobar@Host</fo:inline>, where <fo:inline font-family="monospace">Host</fo:inline> is
      the short name of the host (not the fully qualified domain name).
      If started with flag <fo:inline font-family="monospace">-name</fo:inline>, the node name is <fo:inline font-family="monospace">foobar@Host</fo:inline>,
      where <fo:inline font-family="monospace">Host</fo:inline> is the fully qualified domain name.
      For more information, see
      <fo:inline font-style="italic"><fo:inline font-family="monospace">erl</fo:inline></fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Normally, connections are established automatically when
      another node is referenced. This functionality can be disabled
      by setting Kernel configuration parameter
      <fo:inline font-family="monospace">dist_auto_connect</fo:inline> to <fo:inline font-family="monospace">false</fo:inline>, see
      <fo:inline font-style="italic"><fo:inline font-family="monospace">kernel(6)</fo:inline></fo:inline>. In this case,
      connections must be established explicitly by calling
      <fo:inline font-style="italic"><fo:inline font-family="monospace">connect_node/1</fo:inline></fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Which nodes that are allowed to communicate with each other is handled
      by the magic cookie system, see section
      <fo:inline font-style="italic">Distributed Erlang</fo:inline>
      in the Erlang Reference Manual.</fo:block>
    <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
        Starting a distributed node without also specifying
        <fo:inline font-style="italic"><fo:inline font-family="monospace">-proto_dist inet_tls</fo:inline></fo:inline>
        will expose the node to attacks that may give the attacker
        complete access to the node and in extension the cluster.
        When using un-secure distributed nodes, make sure that the
        network is configured to keep potential attackers out.
        See the <fo:inline font-style="italic">
        Using SSL for Erlang Distribution</fo:inline> User's Guide
        for details on how to setup a secure distributed node.
      </fo:block>
    </fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp10313888"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">allow(Nodes) -&gt; ok | error</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Nodes = [node()]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Permits access to the specified set of nodes.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Before the first call to <fo:inline font-family="monospace">allow/1</fo:inline>, any node with the correct
          cookie can be connected. When <fo:inline font-family="monospace">allow/1</fo:inline> is called, a list
          of allowed nodes is established. Any access attempts made from (or to)
          nodes not in that list will be rejected.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Subsequent calls to <fo:inline font-family="monospace">allow/1</fo:inline> will add the specified nodes
          to the list of allowed nodes. It is not possible to remove nodes
          from the list.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">error</fo:inline> if any element in <fo:inline font-family="monospace">Nodes</fo:inline> is not
          an atom.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10320608"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">connect_node(Node) -&gt; boolean() | ignored</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Node = node()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Establishes a connection to <fo:inline font-family="monospace">Node</fo:inline>. Returns
          <fo:inline font-family="monospace">true</fo:inline> if successful, <fo:inline font-family="monospace">false</fo:inline> if not, and <fo:inline font-family="monospace">ignored</fo:inline>
          if the local node is not alive.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10325216"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_net_ticktime() -&gt; Res</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Res = NetTicktime | {ongoing_change_to, NetTicktime} | ignored</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">NetTicktime = integer() &gt;= 1</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gets <fo:inline font-family="monospace">net_ticktime</fo:inline> (see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">kernel(6)</fo:inline></fo:inline>).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defined return values (<fo:inline font-family="monospace">Res</fo:inline>):</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">NetTicktime</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">net_ticktime</fo:inline> is <fo:inline font-family="monospace">NetTicktime</fo:inline>
            seconds.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{ongoing_change_to, NetTicktime}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">net_kernel</fo:inline> is currently changing
            <fo:inline font-family="monospace">net_ticktime</fo:inline> to <fo:inline font-family="monospace">NetTicktime</fo:inline>
            seconds.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ignored</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The local node is not alive.</fo:block></fo:block></fo:block-container>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10337296"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">getopts(Node, Options) -&gt;<fo:block/>           {ok, OptionValues} | {error, Reason} | ignored</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Node = node()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Options = [<fo:inline font-style="italic">inet:socket_getopt()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">OptionValues = [<fo:inline font-style="italic">inet:socket_setopt()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">inet:posix()</fo:inline> | noconnection</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Get one or more options for the distribution socket
	connected to <fo:inline font-family="monospace">Node</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Node</fo:inline> is a connected node
	the return value is the same as from
	<fo:inline font-style="italic"><fo:inline font-family="monospace">inet:getopts(Sock, Options)</fo:inline></fo:inline>
	where <fo:inline font-family="monospace">Sock</fo:inline> is the distribution socket for <fo:inline font-family="monospace">Node</fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">ignored</fo:inline> if the local node is not alive or
	<fo:inline font-family="monospace">{error, noconnection}</fo:inline> if <fo:inline font-family="monospace">Node</fo:inline> is not connected.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10345472"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">monitor_nodes(Flag) -&gt; ok | Error</fo:block></fo:block><fo:block id="idp10346304"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">monitor_nodes(Flag, Options) -&gt; ok | Error</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Flag = boolean()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Options = [Option]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Option = {node_type, NodeType} | nodedown_reason</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">NodeType = visible | hidden | all</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Error = error | {error, term()}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The calling process subscribes or unsubscribes to node
          status change messages. A <fo:inline font-family="monospace">nodeup</fo:inline> message is delivered
          to all subscribing processes when a new node is connected, and
          a <fo:inline font-family="monospace">nodedown</fo:inline> message is delivered when a node is
          disconnected.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Flag</fo:inline> is <fo:inline font-family="monospace">true</fo:inline>, a new subscription is
          started. If <fo:inline font-family="monospace">Flag</fo:inline> is <fo:inline font-family="monospace">false</fo:inline>, all previous
          subscriptions started with the same <fo:inline font-family="monospace">Options</fo:inline>
          are stopped. Two
          option lists are considered the same if they contain the same
          set of options.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As from Kernel version 2.11.4, and ERTS version
          5.5.4, the following is guaranteed:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">nodeup</fo:inline> messages are delivered before delivery
            of any message from the remote node passed through the
            newly established connection.</fo:block></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">nodedown</fo:inline> messages are not delivered until all
            messages from the remote node that have been passed
            through the connection have been delivered.</fo:block></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that this is <fo:inline font-weight="bold">not</fo:inline> guaranteed for Kernel
          versions before 2.11.4.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As from Kernel version 2.11.4, subscriptions can also be
          made before the <fo:inline font-family="monospace">net_kernel</fo:inline> server is started, that is,
          <fo:inline font-family="monospace">net_kernel:monitor_nodes/[1,2]</fo:inline> does not return
          <fo:inline font-family="monospace">ignored</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As from Kernel version 2.13, and ERTS version
          5.7, the following is guaranteed:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">nodeup</fo:inline> messages are delivered after the
	    corresponding node appears in results from
	    <fo:inline font-family="monospace">erlang:nodes/X</fo:inline>.</fo:block></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">nodedown</fo:inline> messages are delivered after the
	    corresponding node has disappeared in results from
	    <fo:inline font-family="monospace">erlang:nodes/X</fo:inline>.</fo:block></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that this is <fo:inline font-weight="bold">not</fo:inline> guaranteed for Kernel
          versions before 2.13.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The format of the node status change messages depends on
          <fo:inline font-family="monospace">Options</fo:inline>. If <fo:inline font-family="monospace">Options</fo:inline> is
          <fo:inline font-family="monospace">[]</fo:inline>, which is the default, the format is as follows:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{nodeup, Node} | {nodedown, Node}
  Node = node()</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Options</fo:inline> is not <fo:inline font-family="monospace">[]</fo:inline>, the format is
          as follows:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{nodeup, Node, InfoList} | {nodedown, Node, InfoList}
  Node = node()
  InfoList = [{Tag, Val}]</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">InfoList</fo:inline> is a list of tuples. Its contents depends on
          <fo:inline font-family="monospace">Options</fo:inline>, see below.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Also, when <fo:inline font-family="monospace">OptionList == []</fo:inline>, only visible nodes, that
          is, nodes that appear in the result of
          <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:nodes/0</fo:inline></fo:inline>,
          are monitored.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Option</fo:inline> can be any of the following:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{node_type, NodeType}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Valid values for <fo:inline font-family="monospace">NodeType</fo:inline>:</fo:block>
            <fo:block space-after="0.25em" space-before="0.25em">
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">visible</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Subscribe to node status change messages for visible
               nodes only. The tuple <fo:inline font-family="monospace">{node_type, visible}</fo:inline> is
               included in <fo:inline font-family="monospace">InfoList</fo:inline>.</fo:block></fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">hidden</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Subscribe to node status change messages for hidden
               nodes only. The tuple <fo:inline font-family="monospace">{node_type, hidden}</fo:inline> is
               included in <fo:inline font-family="monospace">InfoList</fo:inline>.</fo:block></fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">all</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Subscribe to node status change messages for both
               visible and hidden nodes. The tuple
               <fo:inline font-family="monospace">{node_type, visible | hidden}</fo:inline> is included in
               <fo:inline font-family="monospace">InfoList</fo:inline>.</fo:block></fo:block></fo:block-container>
            </fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">nodedown_reason</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The tuple <fo:inline font-family="monospace">{nodedown_reason, Reason}</fo:inline> is included in
              <fo:inline font-family="monospace">InfoList</fo:inline> in <fo:inline font-family="monospace">nodedown</fo:inline> messages.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Reason</fo:inline> can be any of the following:</fo:block>
            <fo:block space-after="0.25em" space-before="0.25em">
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">connection_setup_failed</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The connection setup failed (after <fo:inline font-family="monospace">nodeup</fo:inline>
                messages were sent).</fo:block></fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">no_network</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">No network is available.</fo:block></fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">net_kernel_terminated</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">net_kernel</fo:inline> process terminated.</fo:block></fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">shutdown</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Unspecified connection shutdown.</fo:block></fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">connection_closed</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The connection was closed.</fo:block></fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">disconnect</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The connection was disconnected (forced from the
                current node).</fo:block></fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">net_tick_timeout</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Net tick time-out.</fo:block></fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">send_net_tick_failed</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failed to send net tick over the connection.</fo:block></fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">get_status_failed</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Status information retrieval from the <fo:inline font-family="monospace">Port</fo:inline>
                holding the connection failed.</fo:block></fo:block></fo:block-container>
            </fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10398880"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">set_net_ticktime(NetTicktime) -&gt; Res</fo:block></fo:block><fo:block id="idp10399712"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">set_net_ticktime(NetTicktime, TransitionPeriod) -&gt; Res</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">NetTicktime = integer() &gt;= 1</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">TransitionPeriod = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Res = <fo:block/>    unchanged |<fo:block/>    change_initiated |<fo:block/>    {ongoing_change_to, NewNetTicktime}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">NewNetTicktime = integer() &gt;= 1</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets <fo:inline font-family="monospace">net_ticktime</fo:inline> (see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">kernel(6)</fo:inline></fo:inline>) to
          <fo:inline font-family="monospace">NetTicktime</fo:inline> seconds.
          <fo:inline font-family="monospace">TransitionPeriod</fo:inline> defaults to <fo:inline font-family="monospace">60</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Some definitions:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always">Minimum transition traffic interval (<fo:inline font-family="monospace">MTTI</fo:inline>)</fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">minimum(NetTicktime,
            PreviousNetTicktime)*1000 div 4</fo:inline> milliseconds.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always">Transition period</fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The time of the least number of consecutive <fo:inline font-family="monospace">MTTI</fo:inline>s
            to cover <fo:inline font-family="monospace">TransitionPeriod</fo:inline> seconds following
            the call to <fo:inline font-family="monospace">set_net_ticktime/2</fo:inline> (that is,
            ((<fo:inline font-family="monospace">TransitionPeriod*1000 - 1) div MTTI + 1)*MTTI</fo:inline>
            milliseconds).</fo:block></fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If
          <fo:inline font-family="monospace">NetTicktime &lt; PreviousNetTicktime</fo:inline>,
          the <fo:inline font-family="monospace">net_ticktime</fo:inline> change is done at the end of
          the transition period; otherwise at the beginning. During
          the transition period, <fo:inline font-family="monospace">net_kernel</fo:inline> ensures that
          there is outgoing traffic on all connections at least
          every <fo:inline font-family="monospace">MTTI</fo:inline> millisecond.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">net_ticktime</fo:inline> changes must be initiated on all
            nodes in the network (with the same <fo:inline font-family="monospace">NetTicktime</fo:inline>)
            before the end of any transition period on any node;
            otherwise connections can erroneously be disconnected.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns one of the following:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">unchanged</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">net_ticktime</fo:inline> already has the value of
              <fo:inline font-family="monospace">NetTicktime</fo:inline> and is left unchanged.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">change_initiated</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">net_kernel</fo:inline> initiated the change of
              <fo:inline font-family="monospace">net_ticktime</fo:inline> to <fo:inline font-family="monospace">NetTicktime</fo:inline>
              seconds.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{ongoing_change_to, NewNetTicktime}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The request is <fo:inline font-weight="bold">ignored</fo:inline> because
              <fo:inline font-family="monospace">net_kernel</fo:inline> is busy changing <fo:inline font-family="monospace">net_ticktime</fo:inline> to
              <fo:inline font-family="monospace">NewNetTicktime</fo:inline> seconds.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10426640"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">setopts(Node, Options) -&gt; ok | {error, Reason} | ignored</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Node = node() | new</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Options = [<fo:inline font-style="italic">inet:socket_setopt()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">inet:posix()</fo:inline> | noconnection</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Set one or more options for distribution sockets.
	Argument <fo:inline font-family="monospace">Node</fo:inline> can be either one node name
	or the atom <fo:inline font-family="monospace">new</fo:inline> to affect the distribution sockets of all
	future connected nodes.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The return value is the same as from
	<fo:inline font-style="italic"><fo:inline font-family="monospace">inet:setopts/2</fo:inline></fo:inline>
	or <fo:inline font-family="monospace">{error, noconnection}</fo:inline> if <fo:inline font-family="monospace">Node</fo:inline> is not
	a connected node or <fo:inline font-family="monospace">new</fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Node</fo:inline> is <fo:inline font-family="monospace">new</fo:inline> the <fo:inline font-family="monospace">Options</fo:inline>
	will then also be added to kernel configration parameters
	<fo:inline font-style="italic">inet_dist_listen_options</fo:inline>
	and
	<fo:inline font-style="italic">inet_dist_connect_options</fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">ignored</fo:inline> if the local node is not alive.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp10437776">start([Name]) -&gt; {ok, pid()} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp10438256">start([Name, NameType]) -&gt; {ok, pid()} | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp10438752">start([Name, NameType, Ticktime]) -&gt; {ok, pid()} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NameType = shortnames | longnames</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = {already_started, pid()} | term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Turns a non-distributed node into a distributed node by
          starting <fo:inline font-family="monospace">net_kernel</fo:inline> and other necessary processes.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that the argument is a list with exactly one, two, or
          three arguments. <fo:inline font-family="monospace">NameType</fo:inline> defaults to <fo:inline font-family="monospace">longnames</fo:inline>
          and <fo:inline font-family="monospace">Ticktime</fo:inline> to <fo:inline font-family="monospace">15000</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10445760"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">stop() -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = not_allowed | not_found</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Turns a distributed node into a non-distributed node. For
          other nodes in the network, this is the same as the node
          going down. Only possible when the net kernel was started using
          <fo:inline font-style="italic"><fo:inline font-family="monospace">start/1</fo:inline></fo:inline>,
          otherwise <fo:inline font-family="monospace">{error, not_allowed}</fo:inline> is returned. Returns
          <fo:inline font-family="monospace">{error, not_found}</fo:inline> if the local node is not alive.</fo:block>
      </fo:block>
  
<fo:block page-break-before="always" id="idp10456240" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">os</fo:marker>os</fo:block>Erlang module</fo:block>
  <fo:block/>
  os
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The functions in this module are operating system-specific.
      Careless use of these functions results in programs that will
      only run on a specific platform. On the other hand, with careful
      use, these functions can be of help in enabling a program to run on
      most platforms.</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp10458896"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">cmd(Command) -&gt; string()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Command = atom() | <fo:inline font-style="italic">io_lib:chars()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Executes <fo:inline font-family="monospace">Command</fo:inline> in a command shell of the
          target OS,
          captures the standard output of the command, and returns this
          result as a string. This function is a replacement of
          the previous function <fo:inline font-family="monospace">unix:cmd/1</fo:inline>; they are equivalent on a
          Unix platform.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Examples:</fo:inline></fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
LsOut = os:cmd("ls"), % on unix platform
DirOut = os:cmd("dir"), % on Win32 platform</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that in some cases, standard output of a command when
          called from another program (for example, <fo:inline font-family="monospace">os:cmd/1</fo:inline>)
          can differ, compared with the standard output of the command
          when called directly from an OS command shell.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10465280"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">find_executable(Name) -&gt; Filename | false</fo:block></fo:block><fo:block id="idp10466112"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">find_executable(Name, Path) -&gt; Filename | false</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = Path = Filename = string()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These two functions look up an executable program, with the
          specified name and a search path, in the same way as the underlying
          OS. <fo:inline font-family="monospace">find_executable/1</fo:inline> uses the current
          execution path (that is, the environment variable <fo:inline font-family="monospace">PATH</fo:inline> on
          Unix and Windows).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Path</fo:inline>, if specified, is to conform to the syntax
          of execution paths on the OS. Returns the absolute filename of the
          executable program <fo:inline font-family="monospace">Name</fo:inline>,
          or <fo:inline font-family="monospace">false</fo:inline> if the program is not found.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10471904"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">getenv() -&gt; [string()]</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of all environment variables.
          Each environment variable is expressed as a single string on
          the format <fo:inline font-family="monospace">"VarName=Value"</fo:inline>, where <fo:inline font-family="monospace">VarName</fo:inline> is
          the name of the variable and <fo:inline font-family="monospace">Value</fo:inline> its value.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If Unicode filename encoding is in effect (see the
          <fo:inline font-style="italic"><fo:inline font-family="monospace">erl</fo:inline> manual
	  page</fo:inline>), the strings can contain characters with
	  codepoints &gt; 255.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10477616"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">getenv(VarName) -&gt; Value | false</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">VarName = Value = string()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the <fo:inline font-family="monospace">Value</fo:inline> of the environment variable
          <fo:inline font-family="monospace">VarName</fo:inline>, or <fo:inline font-family="monospace">false</fo:inline> if the environment
          variable is undefined.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If Unicode filename encoding is in effect (see the
          <fo:inline font-style="italic"><fo:inline font-family="monospace">erl</fo:inline> manual
	  page</fo:inline>), the strings <fo:inline font-family="monospace">VarName</fo:inline> and
	  <fo:inline font-family="monospace">Value</fo:inline> can contain characters with
          codepoints &gt; 255.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10484640"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">getenv(VarName, DefaultValue) -&gt; Value</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">VarName = DefaultValue = Value = string()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the <fo:inline font-family="monospace">Value</fo:inline> of the environment variable
          <fo:inline font-family="monospace">VarName</fo:inline>, or <fo:inline font-family="monospace">DefaultValue</fo:inline> if the
          environment variable is undefined.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If Unicode filename encoding is in effect (see the
          <fo:inline font-style="italic"><fo:inline font-family="monospace">erl</fo:inline> manual
	page</fo:inline>), the strings <fo:inline font-family="monospace">VarName</fo:inline> and
	<fo:inline font-family="monospace">Value</fo:inline> can contain characters with
        codepoints &gt; 255.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10491648"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">getpid() -&gt; Value</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Value = string()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the process identifier of the current Erlang emulator
          in the format most commonly used by the OS environment.
          Returns <fo:inline font-family="monospace">Value</fo:inline> as a string containing
          the (usually) numerical identifier for a process. On Unix,
          this is typically the return value of the <fo:inline font-family="monospace">getpid()</fo:inline>
          system call. On Windows,
          the process id as returned by the <fo:inline font-family="monospace">GetCurrentProcessId()</fo:inline>
          system call is used.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10496128"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">putenv(VarName, Value) -&gt; true</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">VarName = Value = string()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets a new <fo:inline font-family="monospace">Value</fo:inline> for environment variable
          <fo:inline font-family="monospace">VarName</fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If Unicode filename encoding is in effect (see the
          <fo:inline font-style="italic"><fo:inline font-family="monospace">erl</fo:inline> manual
	  page</fo:inline>), the strings <fo:inline font-family="monospace">VarName</fo:inline> and
	  <fo:inline font-family="monospace">Value</fo:inline> can contain characters with
          codepoints &gt; 255.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On Unix platforms, the environment is set using UTF-8 encoding
	  if Unicode filename translation is in effect. On Windows, the
	  environment is set using wide character interfaces.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10503280"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">set_signal(Signal, Option) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Signal = <fo:block/>    sighup |<fo:block/>    sigquit |<fo:block/>    sigabrt |<fo:block/>    sigalrm |<fo:block/>    sigterm |<fo:block/>    sigusr1 |<fo:block/>    sigusr2 |<fo:block/>    sigchld |<fo:block/>    sigstop |<fo:block/>    sigtstp</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Option = default | handle | ignore</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Enables or disables OS signals.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each signal my be set to one of the following options:</fo:block>
          <fo:block space-after="0.25em" space-before="0.25em">
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ignore</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">
                  This signal will be ignored.
              </fo:block></fo:block-container>

              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">default</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">
                  This signal will use the default signal handler for the operating system.
              </fo:block></fo:block-container>

              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">handle</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">
                  This signal will notify
                  <fo:inline font-style="italic"><fo:inline font-family="monospace">erl_signal_server</fo:inline></fo:inline>
                  when it is received by the Erlang runtime system.
              </fo:block></fo:block-container>
          </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10511072"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">system_time() -&gt; integer()</fo:block></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the current
	<fo:inline font-style="italic">OS system time</fo:inline>
	in <fo:inline font-family="monospace">native</fo:inline>
	<fo:inline font-style="italic">time unit</fo:inline>.</fo:block>
	<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This time is <fo:inline font-weight="bold">not</fo:inline> a monotonically increasing time.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10516816"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">system_time(Unit) -&gt; integer()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Unit = <fo:inline font-style="italic">erlang:time_unit()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the current
	<fo:inline font-style="italic">OS system time</fo:inline>
	converted into the <fo:inline font-family="monospace">Unit</fo:inline> passed as argument.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calling <fo:inline font-family="monospace">os:system_time(Unit)</fo:inline> is equivalent to
	<fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:convert_time_unit</fo:inline></fo:inline>(<fo:inline font-style="italic"><fo:inline font-family="monospace">os:system_time()</fo:inline></fo:inline><fo:inline font-family="monospace">,
	native, Unit)</fo:inline>.</fo:block>
	<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This time is <fo:inline font-weight="bold">not</fo:inline> a monotonically increasing time.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10525760"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">timestamp() -&gt; Timestamp</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Timestamp = <fo:inline font-style="italic">erlang:timestamp()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Timestamp = {MegaSecs, Secs, MicroSecs}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the current
	<fo:inline font-style="italic">OS system time</fo:inline>
        in the same format as
        <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:timestamp/0</fo:inline></fo:inline>.
	The tuple can be used together with function
	<fo:inline font-style="italic"><fo:inline font-family="monospace">calendar:now_to_universal_time/1</fo:inline></fo:inline>
        or <fo:inline font-style="italic"><fo:inline font-family="monospace">calendar:now_to_local_time/1</fo:inline></fo:inline>
        to get calendar time. Using the calendar time, together with the
        <fo:inline font-family="monospace">MicroSecs</fo:inline> part of the return tuple from this function, allows
        you to log time stamps in high resolution and consistent with the
        time in the rest of the OS.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example of code formatting a string in format
        "DD Mon YYYY HH:MM:SS.mmmmmm", where DD is the day of month,
        Mon is the textual month name, YYYY is the year, HH:MM:SS is the time,
        and mmmmmm is the microseconds in six positions:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(print_time).
-export([format_utc_timestamp/0]).
format_utc_timestamp() -&gt;
    TS = {_,_,Micro} = os:timestamp(),
    {{Year,Month,Day},{Hour,Minute,Second}} =
calendar:now_to_universal_time(TS),
    Mstr = element(Month,{"Jan","Feb","Mar","Apr","May","Jun","Jul",
    "Aug","Sep","Oct","Nov","Dec"}),
    io_lib:format("~2w ~s ~4w ~2w:~2..0w:~2..0w.~6..0w",
    [Day,Mstr,Year,Hour,Minute,Second,Micro]).</fo:block>
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module can be used as follows:</fo:block>
       <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">io:format("~s~n",[print_time:format_utc_timestamp()]).</fo:inline>
29 Apr 2009  9:55:30.051711</fo:block>
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">OS system time can also be retreived by
	<fo:inline font-style="italic"><fo:inline font-family="monospace">system_time/0</fo:inline></fo:inline> and
	<fo:inline font-style="italic"><fo:inline font-family="monospace">system_time/1</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10539024"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">perf_counter() -&gt; Counter</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Counter = integer()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the current performance counter value in <fo:inline font-family="monospace">perf_counter</fo:inline>
	<fo:inline font-style="italic">time unit</fo:inline>.
        This is a highly optimized call that might not be traceable.
        </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp10542944"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">perf_counter(Unit) -&gt; integer()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Unit = <fo:inline font-style="italic">erlang:time_unit()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a performance counter that can be used as a very fast and
      high resolution timestamp. This counter is read directly from the hardware or operating
      system with the same guarantees. This means that two consecutive calls
      to the function are not guaranteed to be monotonic, though it most likely will be.
      The performance counter will be converted to the resolution passed as an argument.</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">1&gt; <fo:inline font-weight="bold">T1 = os:perf_counter(1000),receive after 10000 -&gt; ok end,T2 = os:perf_counter(1000).</fo:inline>
176525861
2&gt; <fo:inline font-weight="bold">T2 - T1.</fo:inline>
10004</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp10547232"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">type() -&gt; {Osfamily, Osname}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Osfamily = unix | win32</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Osname = atom()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the <fo:inline font-family="monospace">Osfamily</fo:inline> and, in some cases, the
          <fo:inline font-family="monospace">Osname</fo:inline> of the current OS.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On Unix, <fo:inline font-family="monospace">Osname</fo:inline> has the same value as
          <fo:inline font-family="monospace">uname -s</fo:inline> returns, but in lower case. For example, on
          Solaris 1 and 2, it is <fo:inline font-family="monospace">sunos</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On Windows, <fo:inline font-family="monospace">Osname</fo:inline> is <fo:inline font-family="monospace">nt</fo:inline>.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Think twice before using this function. Use module
            <fo:inline font-style="italic"><fo:inline font-family="monospace">filename</fo:inline></fo:inline>
            if you want to inspect or build filenames in a portable way.
            Avoid matching on atom <fo:inline font-family="monospace">Osname</fo:inline>.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10557024"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">unsetenv(VarName) -&gt; true</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">VarName = string()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Deletes the environment variable <fo:inline font-family="monospace">VarName</fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If Unicode filename encoding is in effect (see the
        <fo:inline font-style="italic"><fo:inline font-family="monospace">erl</fo:inline> manual
	page</fo:inline>), the string <fo:inline font-family="monospace">VarName</fo:inline> can
	contain characters with codepoints &gt; 255.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10562384"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">version() -&gt; VersionString | {Major, Minor, Release}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">VersionString = string()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Major = Minor = Release = integer() &gt;= 0</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the OS version.
          On most systems, this function returns a tuple, but a string
          is returned instead if the system has versions that
          cannot be expressed as three numbers.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Think twice before using this function. If you still need
            to use it, always <fo:inline font-family="monospace">call os:type()</fo:inline> first.</fo:block>
        </fo:block>
      </fo:block>
  
<fo:block page-break-before="always" id="idp10574736" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">pg2</fo:marker>pg2</fo:block>Erlang module</fo:block>
  <fo:block/>
  pg2
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module implements process groups. Each message can be sent
      to one, some, or all group members.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A group of processes can be accessed by a common name. For
      example, if there is a group named <fo:inline font-family="monospace">foobar</fo:inline>, there can be a
      set of processes (which can be located on different nodes) that
      are all members of the group <fo:inline font-family="monospace">foobar</fo:inline>. There are no special
      functions for sending a message to the group. Instead, client
      functions are to be written with the functions
      <fo:inline font-style="italic"><fo:inline font-family="monospace">get_members/1</fo:inline></fo:inline> and
      <fo:inline font-style="italic"><fo:inline font-family="monospace">get_local_members/1</fo:inline></fo:inline>
      to determine which processes are members of the group.
      Then the message can be sent to one or more group members.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a member terminates, it is automatically removed from the group.</fo:block>
    <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module is used by module
        <fo:inline font-style="italic"><fo:inline font-family="monospace">disk_log</fo:inline></fo:inline> for
        managing distributed disk logs. The disk log names are used as
        group names, which means that some action can be needed
        to avoid name clashes.</fo:block>
    </fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Data Types</fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">name() = any()</fo:block></fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The name of a process group.</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp10585152"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">create(Name :: <fo:inline font-style="italic">name()</fo:inline>) -&gt; ok</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a new, empty process group. The group is globally
          visible on all nodes. If the group exists, nothing happens.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10587904"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">delete(Name :: <fo:inline font-style="italic">name()</fo:inline>) -&gt; ok</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Deletes a process group.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10590544"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_closest_pid(Name) -&gt; pid() | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = <fo:inline font-style="italic">name()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = {no_process, Name} | {no_such_group, Name}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A useful dispatch function that can be used from
          client functions. It returns a process on the local node, if
          such a process exists. Otherwise, it selects one randomly.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10593360"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_local_members(Name) -&gt;<fo:block/>                     [pid()] | {error, {no_such_group, Name}}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = <fo:inline font-style="italic">name()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns all processes running on the local node in the
          group <fo:inline font-family="monospace">Name</fo:inline>. This function is to be used from
          within a client function that accesses the group. It is therefore
          optimized for speed.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10596624"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_members(Name) -&gt; [pid()] | {error, {no_such_group, Name}}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = <fo:inline font-style="italic">name()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns all processes in the group <fo:inline font-family="monospace">Name</fo:inline>. This
          function is to be used from within a client function that
          accesses the group. It is therefore optimized for speed.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10599856"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">join(Name, Pid :: pid()) -&gt; ok | {error, {no_such_group, Name}}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = <fo:inline font-style="italic">name()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Joins the process <fo:inline font-family="monospace">Pid</fo:inline> to the group <fo:inline font-family="monospace">Name</fo:inline>.
	  A process can join a group many times and must then
	  leave the group the same number of times.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10603472"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">leave(Name, Pid :: pid()) -&gt; ok | {error, {no_such_group, Name}}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = <fo:inline font-style="italic">name()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Makes the process <fo:inline font-family="monospace">Pid</fo:inline> leave the group <fo:inline font-family="monospace">Name</fo:inline>.
	  If the process is not a member of the group, <fo:inline font-family="monospace">ok</fo:inline> is
	  returned.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10607488"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">start() -&gt; {ok, pid()} | {error, any()}</fo:block></fo:block><fo:block id="idp10608320"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">start_link() -&gt; {ok, pid()} | {error, any()}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts the <fo:inline font-family="monospace">pg2</fo:inline> server. Normally, the server does not need
          to be started explicitly, as it is started dynamically if it
          is needed. This is useful during development, but in a
          target system the server is to be started explicitly. Use the
          configuration parameters for
          <fo:inline font-style="italic"><fo:inline font-family="monospace">kernel(6)</fo:inline></fo:inline>
	  for this.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10612976"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">which_groups() -&gt; [Name :: <fo:inline font-style="italic">name()</fo:inline>]</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of all known groups.</fo:block>
      </fo:block>
  

  <fo:block id="idp10615792" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">See Also</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic"><fo:inline font-family="monospace">kernel(6)</fo:inline></fo:inline></fo:block>
  
<fo:block page-break-before="always" id="idp10623984" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">rpc</fo:marker>rpc</fo:block>Erlang module</fo:block>
  <fo:block/>
  rpc
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module contains services similar to Remote
      Procedure Calls. It also contains broadcast facilities and
      parallel evaluators. A remote procedure call is a method to call
      a function on a remote node and collect the answer. It is used
      for collecting information on a remote node, or for running a
      function with some specific side effects on the remote node.</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Data Types</fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">key()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As returned by
          <fo:inline font-style="italic"><fo:inline font-family="monospace">async_call/4</fo:inline></fo:inline>.</fo:block>
      
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp10629952"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">abcast(Name, Msg) -&gt; abcast</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Msg = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-family="monospace">abcast([node()|nodes()], Name,
        Msg)</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10634000"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">abcast(Nodes, Name, Msg) -&gt; abcast</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Nodes = [node()]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Msg = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Broadcasts the message <fo:inline font-family="monospace">Msg</fo:inline> asynchronously to
          the registered process <fo:inline font-family="monospace">Name</fo:inline> on the specified
          nodes.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10637888"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">async_call(Node, Module, Function, Args) -&gt; Key</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Node = node()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Function = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Args = [term()]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Key = <fo:inline font-style="italic">key()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Implements <fo:inline font-weight="bold">call streams with promises</fo:inline>, a type of
          RPC that does not suspend the caller until the result is
          finished. Instead, a key is returned, which can be used
          later to collect the value. The key can be viewed as a
          promise to deliver the answer.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this case, the key <fo:inline font-family="monospace">Key</fo:inline> is returned, which
          can be used in a subsequent call to
          <fo:inline font-style="italic"><fo:inline font-family="monospace">yield/1</fo:inline></fo:inline> or
          <fo:inline font-style="italic"><fo:inline font-family="monospace">nb_yield/1,2</fo:inline></fo:inline>
          to retrieve the value of evaluating <fo:inline font-family="monospace">apply(Module,
          Function, Args)</fo:inline> on node
          <fo:inline font-family="monospace">Node</fo:inline>.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic"><fo:inline font-family="monospace">yield/1</fo:inline></fo:inline> and
            <fo:inline font-style="italic"><fo:inline font-family="monospace">nb_yield/1,2</fo:inline></fo:inline>
            must be called by the same process from which this function
            was made otherwise they will never yield correctly.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10649008"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">block_call(Node, Module, Function, Args) -&gt; Res | {badrpc, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Node = node()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Function = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Args = [term()]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Res = Reason = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-style="italic"><fo:inline font-family="monospace">call/4</fo:inline></fo:inline>,
          but the RPC server at <fo:inline font-family="monospace">Node</fo:inline> does
          not create a separate process to handle the call. Thus,
          this function can be used if the intention of the call is to
          block the RPC server from any other incoming requests until
          the request has been handled. The function can also be used
          for efficiency reasons when very small fast functions are
          evaluated, for example, BIFs that are guaranteed not to
          suspend.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10653536"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">block_call(Node, Module, Function, Args, Timeout) -&gt;<fo:block/>              Res | {badrpc, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Node = node()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Function = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Args = [term()]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Res = Reason = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as
          <fo:inline font-style="italic"><fo:inline font-family="monospace">block_call/4</fo:inline></fo:inline>,
          but with a time-out value in the same manner as
          <fo:inline font-style="italic"><fo:inline font-family="monospace">call/5</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10657952"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">call(Node, Module, Function, Args) -&gt; Res | {badrpc, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Node = node()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Function = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Args = [term()]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Res = Reason = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Evaluates <fo:inline font-family="monospace">apply(Module, Function,
          Args)</fo:inline> on node <fo:inline font-family="monospace">Node</fo:inline> and returns
          the corresponding value <fo:inline font-family="monospace">Res</fo:inline>, or
          <fo:inline font-family="monospace">{badrpc, Reason}</fo:inline> if the call fails.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10664464"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">call(Node, Module, Function, Args, Timeout) -&gt;<fo:block/>        Res | {badrpc, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Node = node()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Function = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Args = [term()]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Res = Reason = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Evaluates <fo:inline font-family="monospace">apply(Module, Function,
          Args)</fo:inline> on node <fo:inline font-family="monospace">Node</fo:inline> and returns
          the corresponding value <fo:inline font-family="monospace">Res</fo:inline>, or
          <fo:inline font-family="monospace">{badrpc, Reason}</fo:inline> if the call fails.
          <fo:inline font-family="monospace">Timeout</fo:inline> is
          a time-out value in milliseconds. If the call times out,
          <fo:inline font-family="monospace">Reason</fo:inline> is <fo:inline font-family="monospace">timeout</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the reply arrives after the call times out, no message
          contaminates the caller's message queue, as this
          function spawns off a middleman process to act as (a void)
          destination for such an orphan reply. This feature also makes
          this function more expensive than <fo:inline font-family="monospace">call/4</fo:inline> at
          the caller's end.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10673856"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">cast(Node, Module, Function, Args) -&gt; true</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Node = node()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Function = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Args = [term()]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Evaluates <fo:inline font-family="monospace">apply(Module, Function,
          Args)</fo:inline> on node
          <fo:inline font-family="monospace">Node</fo:inline>. No response is delivered and the calling
          process is not suspended until the evaluation is complete, as
          is the case with
          <fo:inline font-style="italic"><fo:inline font-family="monospace">call/4,5</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10679872"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">eval_everywhere(Module, Function, Args) -&gt; abcast</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Function = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Args = [term()]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-family="monospace">eval_everywhere([node()|nodes()],
          Module, Function,
          Args)</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10684352"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">eval_everywhere(Nodes, Module, Function, Args) -&gt; abcast</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Nodes = [node()]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Function = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Args = [term()]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Evaluates <fo:inline font-family="monospace">apply(Module, Function,
          Args)</fo:inline> on
          the specified nodes. No answers are collected.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10688864"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">multi_server_call(Name, Msg) -&gt; {Replies, BadNodes}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Msg = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Replies = [Reply :: term()]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">BadNodes = [node()]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-family="monospace">multi_server_call([node()|nodes()],
          Name, Msg)</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10692896"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">multi_server_call(Nodes, Name, Msg) -&gt; {Replies, BadNodes}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Nodes = [node()]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Msg = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Replies = [Reply :: term()]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">BadNodes = [node()]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Can be used when interacting with servers called
          <fo:inline font-family="monospace">Name</fo:inline> on the specified nodes. It is assumed that
          the servers receive messages in the format
          <fo:inline font-family="monospace">{From, Msg}</fo:inline> and reply using
          <fo:inline font-family="monospace">From ! {Name, Node, Reply}</fo:inline>, where
          <fo:inline font-family="monospace">Node</fo:inline> is the name of the node where the server is located.
          The function returns <fo:inline font-family="monospace">{Replies,
          BadNodes}</fo:inline>, where <fo:inline font-family="monospace">Replies</fo:inline> is a
          list of all <fo:inline font-family="monospace">Reply</fo:inline> values, and
          <fo:inline font-family="monospace">BadNodes</fo:inline> is one of the following:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A list of the nodes that do not exist</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A list of the nodes where the server does not exist</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A list of the nodes where the server terminatd before sending
          any reply.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10704320"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">multicall(Module, Function, Args) -&gt; {ResL, BadNodes}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Function = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Args = ResL = [term()]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">BadNodes = [node()]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-family="monospace">multicall([node()|nodes()], Module,
          Function, Args, infinity)</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10708784"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">multicall(Nodes, Module, Function, Args) -&gt; {ResL, BadNodes}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Nodes = [node()]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Function = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Args = ResL = [term()]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">BadNodes = [node()]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-family="monospace">multicall(Nodes, Module,
          Function, Args, infinity)</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10713952"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">multicall(Module, Function, Args, Timeout) -&gt; {ResL, BadNodes}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Function = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Args = [term()]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ResL = [term()]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">BadNodes = [node()]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-family="monospace">multicall([node()|nodes()], Module,
          Function, Args,
          Timeout)</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10719136"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">multicall(Nodes, Module, Function, Args, Timeout) -&gt;<fo:block/>             {ResL, BadNodes}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Nodes = [node()]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Function = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Args = [term()]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ResL = [term()]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">BadNodes = [node()]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In contrast to an RPC, a multicall is an RPC that is sent
          concurrently from one client to multiple servers. This is
          useful for collecting information from a set of nodes,
          or for calling a function on a set of nodes to achieve some
          side effects. It is semantically the same as iteratively
          making a series of RPCs on all the nodes, but the multicall
          is faster, as all the requests are sent at the same time
          and are collected one by one as they come back.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function evaluates <fo:inline font-family="monospace">apply(Module,
          Function, Args)</fo:inline>
          on the specified nodes and collects the answers. It returns
          <fo:inline font-family="monospace">{ResL, BadNodes}</fo:inline>, where
          <fo:inline font-family="monospace">BadNodes</fo:inline> is a list
          of the nodes that terminated or timed out during computation,
          and <fo:inline font-family="monospace">ResL</fo:inline> is a list of the return values.
          <fo:inline font-family="monospace">Timeout</fo:inline> is a time (integer) in milliseconds, or
          <fo:inline font-family="monospace">infinity</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following example is useful when new object code is to
          be loaded on all nodes in the network, and indicates
          some side effects that RPCs can produce:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
%% Find object code for module Mod
{Mod, Bin, File} = code:get_object_code(Mod),

%% and load it on all nodes including this one
{ResL, _} = rpc:multicall(code, load_binary, [Mod, File, Bin]),

%% and then maybe check the ResL list.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10729824"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">nb_yield(Key) -&gt; {value, Val} | timeout</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Key = <fo:inline font-style="italic">key()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Val = (Res :: term()) | {badrpc, Reason :: term()}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-family="monospace">nb_yield(Key, 0)</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10733408"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">nb_yield(Key, Timeout) -&gt; {value, Val} | timeout</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Key = <fo:inline font-style="italic">key()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Val = (Res :: term()) | {badrpc, Reason :: term()}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Non-blocking version of
          <fo:inline font-style="italic"><fo:inline font-family="monospace">yield/1</fo:inline></fo:inline>. It returns
          the tuple <fo:inline font-family="monospace">{value, Val}</fo:inline> when the computation is
          finished, or <fo:inline font-family="monospace">timeout</fo:inline> when <fo:inline font-family="monospace">Timeout</fo:inline>
          milliseconds has elapsed.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function must be called by the same process from which
            <fo:inline font-style="italic"><fo:inline font-family="monospace">async_call/4</fo:inline></fo:inline>
            was made otherwise it will only return <fo:inline font-family="monospace">timeout</fo:inline>.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10741232"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">parallel_eval(FuncCalls) -&gt; ResL</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">FuncCalls = [{Module, Function, Args}]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Function = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Args = ResL = [term()]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Evaluates, for every tuple in <fo:inline font-family="monospace">FuncCalls</fo:inline>,
          <fo:inline font-family="monospace">apply(Module, Function,
          Args)</fo:inline> on some node in
          the network. Returns the list of return values, in the same
          order as in <fo:inline font-family="monospace">FuncCalls</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10746960"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">pinfo(Pid) -&gt; [{Item, Info}] | undefined</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Pid = pid()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Item = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Info = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Location transparent version of the BIF
          <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:process_info/1</fo:inline></fo:inline> in ERTS.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10750496"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">pinfo(Pid, Item) -&gt; {Item, Info} | undefined | []</fo:block></fo:block><fo:block id="idp10751600"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">pinfo(Pid, ItemList) -&gt; [{Item, Info}] | undefined | []</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Pid = pid()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Item = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ItemList = [Item]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Info = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Location transparent version of the BIF
          <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:process_info/2</fo:inline></fo:inline> in ERTS.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10755408"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">pmap(FuncSpec, ExtraArgs, List1) -&gt; List2</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">FuncSpec = {Module, Function}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Module = module()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Function = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ExtraArgs = [term()]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">List1 = [Elem :: term()]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">List2 = [term()]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Evaluates <fo:inline font-family="monospace">apply(Module, Function,
          [Elem|ExtraArgs])</fo:inline> for every element
          <fo:inline font-family="monospace">Elem</fo:inline> in <fo:inline font-family="monospace">List1</fo:inline>, in parallel.
          Returns the list of return values, in the same order as in
          <fo:inline font-family="monospace">List1</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10762144"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">sbcast(Name, Msg) -&gt; {GoodNodes, BadNodes}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Msg = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">GoodNodes = BadNodes = [node()]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-family="monospace">sbcast([node()|nodes()], Name,
          Msg)</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10766192"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">sbcast(Nodes, Name, Msg) -&gt; {GoodNodes, BadNodes}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Msg = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Nodes = GoodNodes = BadNodes = [node()]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Broadcasts the message <fo:inline font-family="monospace">Msg</fo:inline> synchronously to
          the registered process <fo:inline font-family="monospace">Name</fo:inline> on the specified
          nodes.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">{GoodNodes, BadNodes}</fo:inline>,
          where <fo:inline font-family="monospace">GoodNodes</fo:inline> is the list of nodes that have
          <fo:inline font-family="monospace">Name</fo:inline> as a registered process.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function is synchronous in the sense that it is known
          that all servers have received the message when the call
          returns. It is not possible to know that the servers have
          processed the message.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Any further messages sent to the servers, after this
          function has returned, are received by all servers after
          this message.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10774304"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">server_call(Node, Name, ReplyWrapper, Msg) -&gt;<fo:block/>               Reply | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Node = node()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Name = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ReplyWrapper = Msg = Reply = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = nodedown</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Can be used when interacting with a server called
          <fo:inline font-family="monospace">Name</fo:inline> on node <fo:inline font-family="monospace">Node</fo:inline>. It is
          assumed that the server receives messages in the format
          <fo:inline font-family="monospace">{From, Msg}</fo:inline> and replies using
          <fo:inline font-family="monospace">From ! {ReplyWrapper, Node,
          Reply}</fo:inline>. This function makes such
          a server call and ensures that the entire call is packed into
          an atomic transaction, which either succeeds or fails. It
          never hangs, unless the server itself hangs.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function returns the answer <fo:inline font-family="monospace">Reply</fo:inline> as
          produced by the server <fo:inline font-family="monospace">Name</fo:inline>, or
          <fo:inline font-family="monospace">{error, Reason}</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp10783648"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">yield(Key) -&gt; Res | {badrpc, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Key = <fo:inline font-style="italic">key()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Res = Reason = term()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the promised answer from a previous
          <fo:inline font-style="italic"><fo:inline font-family="monospace">async_call/4</fo:inline></fo:inline>.
          If the answer is available, it is
          returned immediately. Otherwise, the calling process is
          suspended until the answer arrives from <fo:inline font-family="monospace">Node</fo:inline>.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function must be called by the same process from which
            <fo:inline font-style="italic"><fo:inline font-family="monospace">async_call/4</fo:inline></fo:inline>
            was made otherwise it will never return.</fo:block>
        </fo:block>
      </fo:block>
  
<fo:block page-break-before="always" id="idp10795984" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">seq_trace</fo:marker>seq_trace</fo:block>Erlang module</fo:block>
  <fo:block/>
  seq_trace
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sequential tracing makes it possible to trace all messages
      resulting from one initial message. Sequential tracing is
      independent of the ordinary tracing in Erlang, which
      is controlled by the <fo:inline font-family="monospace">erlang:trace/3</fo:inline> BIF. For more information
      about what sequential tracing is and how it can be used, see section
      <fo:inline font-style="italic">Sequential Tracing</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">seq_trace</fo:inline> provides functions that control all aspects of
      sequential tracing. There are functions for activation,
      deactivation, inspection, and for collection of the trace output.</fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Data Types</fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">token() = {integer(), boolean(), term(), term(), term()}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An opaque term (a tuple) representing a trace token.</fo:block>
      
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp10803104"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">set_token(Token) -&gt; PreviousToken | ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Token = PreviousToken = [] | <fo:inline font-style="italic">token()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the trace token for the calling process to <fo:inline font-family="monospace">Token</fo:inline>.
          If <fo:inline font-family="monospace">Token == []</fo:inline> then tracing is disabled, otherwise
          <fo:inline font-family="monospace">Token</fo:inline> should be an Erlang term returned from
          <fo:inline font-family="monospace">get_token/0</fo:inline> or <fo:inline font-family="monospace">set_token/1</fo:inline>. <fo:inline font-family="monospace">set_token/1</fo:inline>
          can be used to temporarily exclude message passing from
          the trace by setting the trace token to empty like this:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
OldToken = seq_trace:set_token([]), % set to empty and save 
                                    % old value
% do something that should not be part of the trace
io:format("Exclude the signalling caused by this~n"),
seq_trace:set_token(OldToken), % activate the trace token again
...  </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the previous value of the trace token.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp10810640"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">set_token(Component, Val) -&gt; {Component, OldVal}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Component = <fo:inline font-style="italic">component()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Val = OldVal = <fo:inline font-style="italic">value()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">component() = label | serial | <fo:inline font-style="italic">flag()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">flag() = <fo:block/>    send |<fo:block/>    'receive' |<fo:block/>    print |<fo:block/>    timestamp |<fo:block/>    monotonic_timestamp |<fo:block/>    strict_monotonic_timestamp</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">value() = <fo:block/>    (Integer :: integer() &gt;= 0) |<fo:block/>    {Previous :: integer() &gt;= 0, Current :: integer() &gt;= 0} |<fo:block/>    (Bool :: boolean())</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the individual <fo:inline font-family="monospace">Component</fo:inline> of the trace token to
          <fo:inline font-family="monospace">Val</fo:inline>. Returns the previous value of the component.</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">set_token(label, Integer)</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">label</fo:inline> component is an integer which
              identifies all events belonging to the same sequential
              trace. If several sequential traces can be active
              simultaneously, <fo:inline font-family="monospace">label</fo:inline> is used to identify
              the separate traces. Default is 0.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">set_token(serial, SerialValue)</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">SerialValue = {Previous, Current}</fo:inline>.
              The <fo:inline font-family="monospace">serial</fo:inline> component contains counters which
              enables the traced messages to be sorted, should never be
              set explicitly by the user as these counters are updated
              automatically. Default is <fo:inline font-family="monospace">{0, 0}</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">set_token(send, Bool)</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A trace token flag (<fo:inline font-family="monospace">true | false</fo:inline>) which
              enables/disables tracing on message sending. Default is
              <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">set_token('receive', Bool)</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A trace token flag (<fo:inline font-family="monospace">true | false</fo:inline>) which
              enables/disables tracing on message reception. Default is
              <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">set_token(print, Bool)</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A trace token flag (<fo:inline font-family="monospace">true | false</fo:inline>) which
              enables/disables tracing on explicit calls to
              <fo:inline font-family="monospace">seq_trace:print/1</fo:inline>. Default is <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">set_token(timestamp, Bool)</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A trace token flag (<fo:inline font-family="monospace">true | false</fo:inline>) which
              enables/disables a timestamp to be generated for each
              traced event. Default is <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">set_token(strict_monotonic_timestamp, Bool)</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A trace token flag (<fo:inline font-family="monospace">true | false</fo:inline>) which
            enables/disables a strict monotonic timestamp to be generated
	    for each traced event. Default is <fo:inline font-family="monospace">false</fo:inline>. Timestamps will
	    consist of
	    <fo:inline font-style="italic">Erlang
	    monotonic time</fo:inline> and a monotonically increasing
	    integer. The time-stamp has the same format and value
	    as produced by <fo:inline font-family="monospace">{erlang:monotonic_time(nanosecond),
	    erlang:unique_integer([monotonic])}</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">set_token(monotonic_timestamp, Bool)</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A trace token flag (<fo:inline font-family="monospace">true | false</fo:inline>) which
            enables/disables a strict monotonic timestamp to be generated
	    for each traced event. Default is <fo:inline font-family="monospace">false</fo:inline>. Timestamps
	    will use
	    <fo:inline font-style="italic">Erlang
	    monotonic time</fo:inline>. The time-stamp has the same
	    format and value as produced by
	    <fo:inline font-family="monospace">erlang:monotonic_time(nanosecond)</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If multiple timestamp flags are passed, <fo:inline font-family="monospace">timestamp</fo:inline> has
	  precedence over <fo:inline font-family="monospace">strict_monotonic_timestamp</fo:inline> which
	  in turn has precedence over <fo:inline font-family="monospace">monotonic_timestamp</fo:inline>. All
	  timestamp flags are remembered, so if two are passed
	  and the one with highest precedence later is disabled
	  the other one will become active.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp10846064"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_token() -&gt; [] | <fo:inline font-style="italic">token()</fo:inline></fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the value of the trace token for the calling process.
          If <fo:inline font-family="monospace">[]</fo:inline> is returned, it means that tracing is not active.
          Any other value returned is the value of an active trace
          token. The value returned can be used as input to
          the <fo:inline font-family="monospace">set_token/1</fo:inline> function.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp10849840"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_token(Component) -&gt; {Component, Val}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Component = <fo:inline font-style="italic">component()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Val = <fo:inline font-style="italic">value()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">component() = label | serial | <fo:inline font-style="italic">flag()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">flag() = <fo:block/>    send |<fo:block/>    'receive' |<fo:block/>    print |<fo:block/>    timestamp |<fo:block/>    monotonic_timestamp |<fo:block/>    strict_monotonic_timestamp</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">value() = <fo:block/>    (Integer :: integer() &gt;= 0) |<fo:block/>    {Previous :: integer() &gt;= 0, Current :: integer() &gt;= 0} |<fo:block/>    (Bool :: boolean())</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the value of the trace token component
          <fo:inline font-family="monospace">Component</fo:inline>. See
          <fo:inline font-style="italic">set_token/2</fo:inline> for
          possible values of <fo:inline font-family="monospace">Component</fo:inline> and <fo:inline font-family="monospace">Val</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp10856304"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">print(TraceInfo) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">TraceInfo = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Puts the Erlang term <fo:inline font-family="monospace">TraceInfo</fo:inline> into the sequential
          trace output if the calling process currently is executing
          within a sequential trace and the <fo:inline font-family="monospace">print</fo:inline> flag of
          the trace token is set.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp10860560"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">print(Label, TraceInfo) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Label = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">TraceInfo = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-family="monospace">print/1</fo:inline> with the additional condition that
          <fo:inline font-family="monospace">TraceInfo</fo:inline> is output only if <fo:inline font-family="monospace">Label</fo:inline> is equal to
          the label component of the trace token.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp10865200"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">reset_trace() -&gt; true</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the trace token to empty for all processes on the
          local node. The process internal counters used to create
          the serial of the trace token is set to 0. The trace token is
          set to empty for all messages in message queues. Together
          this will effectively stop all ongoing sequential tracing in
          the local node.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp10868192"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">set_system_tracer(Tracer) -&gt; OldTracer</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Tracer = OldTracer = <fo:inline font-style="italic">tracer()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">tracer() = <fo:block/>    (Pid :: pid()) |<fo:block/>    port() |<fo:block/>    (TracerModule :: {module(), term()}) |<fo:block/>    false</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the system tracer. The system tracer can be either a
          process, port or <fo:inline font-style="italic">tracer module</fo:inline>
          denoted by <fo:inline font-family="monospace">Tracer</fo:inline>.
          Returns the previous value (which can be <fo:inline font-family="monospace">false</fo:inline> if no system
          tracer is active).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure: <fo:inline font-family="monospace">{badarg, Info}}</fo:inline> if <fo:inline font-family="monospace">Pid</fo:inline> is not an
          existing local pid.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp10874752"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_system_tracer() -&gt; Tracer</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Tracer = <fo:inline font-style="italic">tracer()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">tracer() = <fo:block/>    (Pid :: pid()) |<fo:block/>    port() |<fo:block/>    (TracerModule :: {module(), term()}) |<fo:block/>    false</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the pid, port identifier or tracer module of the current system
          tracer or <fo:inline font-family="monospace">false</fo:inline> if no system tracer is activated.</fo:block>
      </fo:block>
  

  <fo:block id="idp10878688" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Trace Messages Sent to the System Tracer</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The format of the messages is one of the following, depending on if
      flag <fo:inline font-family="monospace">timestamp</fo:inline> of the trace token is set to <fo:inline font-family="monospace">true</fo:inline> or
      <fo:inline font-family="monospace">false</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{seq_trace, Label, SeqTraceInfo, TimeStamp}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">or</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{seq_trace, Label, SeqTraceInfo}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Where:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Label = int()
TimeStamp = {Seconds, Milliseconds, Microseconds}  
  Seconds = Milliseconds = Microseconds = int()</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">SeqTraceInfo</fo:inline> can have the following formats:</fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{send, Serial, From, To, Message}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Used when a process <fo:inline font-family="monospace">From</fo:inline> with its trace token flag
          <fo:inline font-family="monospace">print</fo:inline> set to <fo:inline font-family="monospace">true</fo:inline> has sent a message.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{'receive', Serial, From, To, Message}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Used when a process <fo:inline font-family="monospace">To</fo:inline> receives a message with a
          trace token that has flag <fo:inline font-family="monospace">'receive'</fo:inline> set to <fo:inline font-family="monospace">true</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{print, Serial, From, _, Info}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Used when a process <fo:inline font-family="monospace">From</fo:inline> has called
          <fo:inline font-family="monospace">seq_trace:print(Label, TraceInfo)</fo:inline> and has a trace
          token with flag <fo:inline font-family="monospace">print</fo:inline> set to <fo:inline font-family="monospace">true</fo:inline>, and
          <fo:inline font-family="monospace">label</fo:inline> set to <fo:inline font-family="monospace">Label</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Serial</fo:inline> is a tuple <fo:inline font-family="monospace">{PreviousSerial, ThisSerial}</fo:inline>,
      where:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Integer <fo:inline font-family="monospace">PreviousSerial</fo:inline> denotes the serial
        counter passed in the last received message that carried a trace
        token. If the process is the first in a new sequential trace,
        <fo:inline font-family="monospace">PreviousSerial</fo:inline> is set to the value of the process internal
        "trace clock".</fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Integer <fo:inline font-family="monospace">ThisSerial</fo:inline> is the serial
        counter that a process sets on outgoing messages. It is based
        on the process internal "trace clock", which is incremented by one
        before it is attached to the trace token in the message.</fo:block></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  

  <fo:block id="idp10901232" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Sequential Tracing</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sequential tracing is a way to trace a sequence of messages sent
      between different local or remote processes, where the sequence
      is initiated by a single message. In short, it works as follows:</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each process has a <fo:inline font-weight="bold">trace token</fo:inline>, which can be empty or
      not empty. When not empty, the trace token can be seen as
      the tuple <fo:inline font-family="monospace">{Label, Flags, Serial, From}</fo:inline>. The trace token is
      passed invisibly with each message.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To start a sequential trace, the user must explicitly set
      the trace token in the process that will send the first message
      in a sequence.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The trace token of a process is set each time the process
      matches a message in a receive statement, according to the trace
      token carried by the received message, empty or not.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On each Erlang node, a process can be set as the <fo:inline font-weight="bold">system tracer</fo:inline>.
      This process will receive trace messages each time
      a message with a trace token is sent or received (if the trace
      token flag <fo:inline font-family="monospace">send</fo:inline> or <fo:inline font-family="monospace">'receive'</fo:inline> is set). The system
      tracer can then print each trace event, write it to a file, or
      whatever suitable.</fo:block>
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The system tracer only receives those trace events that
        occur locally within the Erlang node. To get the whole picture
        of a sequential trace, involving processes on many Erlang
        nodes, the output from the system tracer on each involved node
        must be merged (offline).</fo:block>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following sections describe sequential tracing and its most
      fundamental concepts.</fo:block>
  

  <fo:block id="idp10909232" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Trace Token</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each process has a current trace token. Initially, the token is
      empty. When the process sends a message to another process, a
      copy of the current token is sent "invisibly" along with
      the message.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The current token of a process is set in one of the following two
      ways:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Explicitly by the process itself, through a call to
          <fo:inline font-family="monospace">seq_trace:set_token/1,2</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a message is received</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In both cases, the current token is set. In particular, if
      the token of a received message is empty, the current token of
      the process is set to empty.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A trace token contains a label and a set of flags. Both
      the label and the flags are set in both alternatives above.</fo:block>
  

  <fo:block id="idp10915296" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Serial</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The trace token contains a component called
      <fo:inline font-family="monospace">serial</fo:inline>. It consists of two integers, <fo:inline font-family="monospace">Previous</fo:inline> and
      <fo:inline font-family="monospace">Current</fo:inline>. The purpose is to uniquely identify each traced
      event within a trace sequence, as well as to order the messages
      chronologically and in the different branches, if any.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The algorithm for updating <fo:inline font-family="monospace">Serial</fo:inline> can be described as
      follows:</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Let each process have two counters, <fo:inline font-family="monospace">prev_cnt</fo:inline> and
      <fo:inline font-family="monospace">curr_cnt</fo:inline>, both are set to <fo:inline font-family="monospace">0</fo:inline> when a process is created.
      The counters are updated at the following occasions:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">When the process is about to send a message and the trace token
          is not empty.</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Let the serial of the trace token be <fo:inline font-family="monospace">tprev</fo:inline> and
          <fo:inline font-family="monospace">tcurr</fo:inline>.</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
curr_cnt := curr_cnt + 1
tprev := prev_cnt
tcurr := curr_cnt</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The trace token with <fo:inline font-family="monospace">tprev</fo:inline> and <fo:inline font-family="monospace">tcurr</fo:inline> is then
          passed along with the message.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">When the process calls</fo:inline> <fo:inline font-family="monospace">seq_trace:print(Label, Info)</fo:inline>,
          <fo:inline font-family="monospace">Label</fo:inline> <fo:inline font-weight="bold">matches the label part of the trace token and the
          trace token print flag is <fo:inline font-family="monospace">true</fo:inline>.</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The algorithm is the same as for send above.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">When a message is received and contains a non-empty trace
          token.</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The process trace token is set to the trace token from
          the message.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Let the serial of the trace token be <fo:inline font-family="monospace">tprev</fo:inline> and
          <fo:inline font-family="monospace">tcurr</fo:inline>.</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
if (curr_cnt &lt; tcurr )
   curr_cnt := tcurr
prev_cnt := tcurr</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">curr_cnt</fo:inline> of a process is incremented each time
      the process is involved in a sequential trace. The counter can
      reach its limit (27 bits) if a process is very long-lived and is
      involved in much sequential tracing. If the counter overflows, the
      serial for ordering of the trace events cannot be used. To prevent
      the counter from overflowing in the middle of
      a sequential trace, function <fo:inline font-family="monospace">seq_trace:reset_trace/0</fo:inline>
      can be called to reset <fo:inline font-family="monospace">prev_cnt</fo:inline> and <fo:inline font-family="monospace">curr_cnt</fo:inline> of
      all processes in the Erlang node. This function also sets all
      trace tokens in processes and their message queues to empty, and
      thus stops all ongoing sequential tracing.</fo:block>
  

  <fo:block id="idp10935808" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Performance Considerations</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The performance degradation for a system that is enabled for
      sequential tracing is negligible as long as no tracing is
      activated. When tracing is activated, there is an
      extra cost for each traced message, but all other messages are
      unaffected.</fo:block>
  

  <fo:block id="idp10937424" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Ports</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sequential tracing is not performed across ports.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the user for some reason wants to pass the trace token to a
      port, this must be done manually in the code of the port
      controlling process. The port controlling processes have to check
      the appropriate sequential trace settings (as obtained from
      <fo:inline font-family="monospace">seq_trace:get_token/1</fo:inline>) and include trace information in
      the message data sent to their respective ports.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Similarly, for messages received from a port, a port controller
      has to retrieve trace-specific information, and set appropriate
      sequential trace flags through calls to
      <fo:inline font-family="monospace">seq_trace:set_token/2</fo:inline>.</fo:block>
  

  <fo:block id="idp10941104" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Distribution</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sequential tracing between nodes is performed transparently.
      This applies to C-nodes built with <fo:inline font-family="monospace">Erl_Interface</fo:inline> too. A C-node
      built with <fo:inline font-family="monospace">Erl_Interface</fo:inline> only maintains one trace token, which
      means that the C-node appears as one process from
      the sequential tracing point of view.</fo:block>
  

  <fo:block id="idp10943568" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Example of Use</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This example gives a rough idea of how the new
      primitives can be used and what kind of output it produces.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Assume that you have an initiating process with
      <fo:inline font-family="monospace">Pid == &lt;0.30.0&gt;</fo:inline> like this:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(seqex).
-compile(export_all).

loop(Port) -&gt;
    receive 
        {Port,Message} -&gt;
            seq_trace:set_token(label,17),
            seq_trace:set_token('receive',true),
            seq_trace:set_token(print,true),
            seq_trace:print(17,"**** Trace Started ****"),
            call_server ! {self(),the_message};
        {ack,Ack} -&gt;
            ok
    end,
    loop(Port).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">And a registered process <fo:inline font-family="monospace">call_server</fo:inline> with
      <fo:inline font-family="monospace">Pid == &lt;0.31.0&gt;</fo:inline> like this:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
loop() -&gt;
    receive
        {PortController,Message} -&gt;
            Ack = {received, Message},
            seq_trace:print(17,"We are here now"),
            PortController ! {ack,Ack}
    end,
    loop().</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A possible output from the system's <fo:inline font-family="monospace">sequential_tracer</fo:inline> can be
      like this:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
17:&lt;0.30.0&gt; Info {0,1} WITH
"**** Trace Started ****"
17:&lt;0.31.0&gt; Received {0,2} FROM &lt;0.30.0&gt; WITH
{&lt;0.30.0&gt;,the_message}
17:&lt;0.31.0&gt; Info {2,3} WITH
"We are here now"
17:&lt;0.30.0&gt; Received {2,4} FROM &lt;0.31.0&gt; WITH
{ack,{received,the_message}}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The implementation of a system tracer process that produces
      this printout can look like this:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
tracer() -&gt;
    receive
        {seq_trace,Label,TraceInfo} -&gt;
           print_trace(Label,TraceInfo,false);
        {seq_trace,Label,TraceInfo,Ts} -&gt;
           print_trace(Label,TraceInfo,Ts);
        Other -&gt; ignore
    end,
    tracer().        

print_trace(Label,TraceInfo,false) -&gt;
    io:format("~p:",[Label]),
    print_trace(TraceInfo);
print_trace(Label,TraceInfo,Ts) -&gt;
    io:format("~p ~p:",[Label,Ts]),
    print_trace(TraceInfo).

print_trace({print,Serial,From,_,Info}) -&gt;
    io:format("~p Info ~p WITH~n~p~n", [From,Serial,Info]);
print_trace({'receive',Serial,From,To,Message}) -&gt;
    io:format("~p Received ~p FROM ~p WITH~n~p~n", 
              [To,Serial,From,Message]);
print_trace({send,Serial,From,To,Message}) -&gt;
    io:format("~p Sent ~p TO ~p WITH~n~p~n", 
              [From,Serial,To,Message]).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The code that creates a process that runs this tracer function
      and sets that process as the system tracer can look like this:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
start() -&gt;
    Pid = spawn(?MODULE,tracer,[]),
    seq_trace:set_system_tracer(Pid), % set Pid as the system tracer 
    ok.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">With a function like <fo:inline font-family="monospace">test/0</fo:inline>, the whole example can be
      started:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
test() -&gt;
    P = spawn(?MODULE, loop, [port]),
    register(call_server, spawn(?MODULE, loop, [])),
    start(),
    P ! {port,message}.</fo:block>
  
<fo:block page-break-before="always" id="idp10962640" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">user</fo:marker>user</fo:block>Erlang module</fo:block>
  <fo:block/>
  user
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">user</fo:inline> is a server that responds to all messages
      defined in the I/O interface. The code in <fo:inline font-family="monospace">user.erl</fo:inline> can be
      used as a model for building alternative I/O servers.</fo:block>
  
<fo:block page-break-before="always" id="idp10973216" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">wrap_log_reader</fo:marker>wrap_log_reader</fo:block>Erlang module</fo:block>
  <fo:block/>
  wrap_log_reader
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module makes it possible to read internally formatted
      wrap disk logs, see
      <fo:inline font-style="italic"><fo:inline font-family="monospace">disk_log(3)</fo:inline></fo:inline>.
      <fo:inline font-family="monospace">wrap_log_reader</fo:inline> does not
      interfere with <fo:inline font-family="monospace">disk_log</fo:inline> activities; there is however a bug in this
      version of the <fo:inline font-family="monospace">wrap_log_reader</fo:inline>, see section
      <fo:inline font-style="italic">Known Limitations</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A wrap disk log file consists of many files, called index files. A log
      file can be opened and closed. Also, a single index file can be opened
      separately. If a non-existent or non-internally formatted file is opened,
      an error message is returned. If the file is corrupt, no attempt is made
      to repair it, but an error message is returned.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a log is configured to be distributed, it is possible that all items
      are not logged on all nodes. <fo:inline font-family="monospace">wrap_log_reader</fo:inline> only reads the log on
      the called node; it is up to the user to be sure that all items
      are read.</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Data Types</fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">continuation()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Continuation returned by <fo:inline font-family="monospace">open/1,2</fo:inline> or <fo:inline font-family="monospace">chunk/1,2</fo:inline>.</fo:block>
      
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp10983840"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">chunk(Continuation) -&gt; <fo:inline font-style="italic">chunk_ret()</fo:inline></fo:block></fo:block><fo:block id="idp10984672"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">chunk(Continuation, N) -&gt; <fo:inline font-style="italic">chunk_ret()</fo:inline></fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Continuation = <fo:inline font-style="italic">continuation()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">N = infinity | integer() &gt;= 1</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">chunk_ret() = <fo:block/>    {Continuation2, Terms :: [term()]} |<fo:block/>    {Continuation2,<fo:block/>     Terms :: [term()],<fo:block/>     Badbytes :: integer() &gt;= 0} |<fo:block/>    {Continuation2, eof} |<fo:block/>    {error, Reason :: term()}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Enables to efficiently read the
          terms that are appended to a log. Minimises disk
          I/O by reading 64 kilobyte chunks from the file.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The first time <fo:inline font-family="monospace">chunk()</fo:inline> is called, an initial
          continuation returned from <fo:inline font-family="monospace">open/1</fo:inline> or <fo:inline font-family="monospace">open/2</fo:inline> must be
          provided.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-family="monospace">chunk/3</fo:inline> is called, <fo:inline font-family="monospace">N</fo:inline> controls the
          maximum number of terms that are read from the log in each
          chunk. Defaults to <fo:inline font-family="monospace">infinity</fo:inline>, which means that all the
          terms contained in the 8K chunk are read. If less than
          <fo:inline font-family="monospace">N</fo:inline> terms are returned, this does not necessarily
          mean that end of file is reached.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a tuple <fo:inline font-family="monospace">{Continuation2,
          Terms}</fo:inline>, where <fo:inline font-family="monospace">Terms</fo:inline> is a list
          of terms found in the log. <fo:inline font-family="monospace">Continuation2</fo:inline> is yet
          another continuation that  must be passed on to any
          subsequent calls to <fo:inline font-family="monospace">chunk()</fo:inline>. With a series of calls to
          <fo:inline font-family="monospace">chunk()</fo:inline>, it is then possible to extract all terms from a log.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a tuple <fo:inline font-family="monospace">{Continuation2,
          Terms, Badbytes}</fo:inline> if the log is opened
          in read only mode and the read chunk is corrupt.
          <fo:inline font-family="monospace">Badbytes</fo:inline>
          indicates the number of non-Erlang terms found in the chunk.
          Notice that the log is not repaired.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">{Continuation2, eof}</fo:inline> when
          the end of the log is reached, and <fo:inline font-family="monospace">{error, Reason}</fo:inline>
          if an error occurs.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The returned continuation either is or is not valid in the next call
          to this function. This is because the log can wrap and delete
          the file into which the continuation points. To ensure
          this does not occur, the log can be blocked during the search.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp11002608"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">close(Continuation) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Continuation = <fo:inline font-style="italic">continuation()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">file:posix()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Closes a log file properly.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp11005248"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">open(Filename) -&gt; <fo:inline font-style="italic">open_ret()</fo:inline></fo:block></fo:block><fo:block id="idp11006080"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">open(Filename, N) -&gt; <fo:inline font-style="italic">open_ret()</fo:inline></fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filename = string() | atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">N = integer()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">open_ret() = <fo:block/>    {ok, Continuation :: <fo:inline font-style="italic">continuation()</fo:inline>} |<fo:block/>    {error, Reason :: tuple()}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Filename</fo:inline> specifies the name of the file to be
          read.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">N</fo:inline> specifies the index of the file to be read.
          If <fo:inline font-family="monospace">N</fo:inline> is omitted, the whole wrap log file is read;
          if it is specified, only the specified index file is read.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">{ok, Continuation}</fo:inline> if the
          log/index file is opened successfully.
          <fo:inline font-family="monospace">Continuation</fo:inline>
          is to be used when chunking or closing the file.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">{error, Reason}</fo:inline> for all errors.</fo:block>
      </fo:block>
  

  <fo:block id="idp11014816" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Known Limitations</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This version of <fo:inline font-family="monospace">wrap_log_reader</fo:inline> does not detect if
      <fo:inline font-family="monospace">disk_log</fo:inline> wraps to a new index file between a call to
      <fo:inline font-family="monospace">wrap_log_reader:open()</fo:inline> and the first call to
      <fo:inline font-family="monospace">wrap_log_reader:chunk()</fo:inline>.
      If this occurs, the call to <fo:inline font-family="monospace">chunk()</fo:inline> reads the last logged
      items in the log file, as the opened index file was truncated by
      <fo:inline font-family="monospace">disk_log</fo:inline>.</fo:block>
  

  <fo:block id="idp11019568" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">See Also</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic"><fo:inline font-family="monospace">disk_log(3)</fo:inline></fo:inline></fo:block>
  
<fo:block page-break-before="always" id="idp11027792" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">zlib</fo:marker>zlib</fo:block>Erlang module</fo:block>
  <fo:block/>
  zlib
  <fo:block/>
  
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module is moved to the
    <fo:inline font-style="italic">ERTS</fo:inline> application.</fo:block>
  
<fo:block page-break-before="always" id="idp11036304" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">app</fo:marker>app</fo:block>Name</fo:block>
  <fo:block/>
  app
  Application resource file.
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-weight="bold">application resource file</fo:inline> specifies the resources an
      application uses, and how the application is started. There must
      always be one application resource file called
      <fo:inline font-family="monospace">Application.app</fo:inline> for each application <fo:inline font-family="monospace">Application</fo:inline> in
      the system.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file is read by the application controller when an
      application is loaded/started. It is also used by the functions in
      <fo:inline font-family="monospace">systools</fo:inline>, for example when generating start scripts.</fo:block>
  

  <fo:block id="idp11040944" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">File Syntax</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The application resource file is to be called
      <fo:inline font-family="monospace">Application.app</fo:inline>, where <fo:inline font-family="monospace">Application</fo:inline> is the
      application name. The file is to be located in directory <fo:inline font-family="monospace">ebin</fo:inline>
      for the application.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file must contain a single Erlang term, which is called an
      <fo:inline font-weight="bold">application specification</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{application, Application,
  [{description,  Description},
   {id,           Id},
   {vsn,          Vsn},
   {modules,      Modules},
   {maxP,         MaxP},
   {maxT,         MaxT},
   {registered,   Names},
   {included_applications, Apps},
   {applications, Apps},
   {env,          Env},
   {mod,          Start},
   {start_phases, Phases},
   {runtime_dependencies, RTDeps}]}.

             Value                Default
             -----                -------
Application  atom()               -
Description  string()             ""
Id           string()             ""
Vsn          string()             ""
Modules      [Module]             []
MaxP         int()                infinity
MaxT         int()                infinity
Names        [Name]               []
Apps         [App]                []
Env          [{Par,Val}]          []
Start        {Module,StartArgs}   []
Phases       [{Phase,PhaseArgs}]  undefined
RTDeps       [ApplicationVersion] []

Module = Name = App = Par = Phase = atom()
Val = StartArgs = PhaseArgs = term()
ApplicationVersion = string()</fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Application</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Application name.</fo:block></fo:block-container>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For the application controller, all keys are optional.
      The respective default values are used for any omitted keys.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The functions in <fo:inline font-family="monospace">systools</fo:inline> require more information. If
      they are used, the following keys are mandatory:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">description</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">vsn</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">modules</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">registered</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">applications</fo:inline></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The other keys are ignored by <fo:inline font-family="monospace">systools</fo:inline>.</fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">description</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A one-line description of the application.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">id</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Product identification, or similar.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">vsn</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Version of the application.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">modules</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All modules introduced by this application. <fo:inline font-family="monospace">systools</fo:inline>
          uses this list when generating start scripts and tar files. A
          module can only be defined in one application.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">maxP</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Deprecated - is ignored</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Maximum number of processes allowed in the application.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">maxT</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Maximum time, in milliseconds, that the application is
          allowed to run. After the specified time, the application
          terminates automatically.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">registered</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All names of registered processes started in this
          application. <fo:inline font-family="monospace">systools</fo:inline> uses this list to detect name
          clashes between different applications.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">included_applications</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All applications included by this application.
          When this application is started, all included applications
          are loaded automatically, but not started, by
          the application controller. It is assumed that the top-most
          supervisor of the included application is started by a
          supervisor of this application.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">applications</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All applications that must be started before this
          application is allowed to be started. <fo:inline font-family="monospace">systools</fo:inline> uses
          this list to generate correct start scripts. Defaults to
          the empty list, but notice that all applications have
          dependencies to (at least) Kernel and STDLIB.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">env</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Configuration parameters used by the application. The value
          of a configuration parameter is retrieved by calling
          <fo:inline font-family="monospace">application:get_env/1,2</fo:inline>. The values in the application
          resource file can be overridden by values in a configuration
          file (see <fo:inline font-style="italic"><fo:inline font-family="monospace">config(4)</fo:inline></fo:inline>)
          or by command-line flags (see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">erts:erl(1)</fo:inline></fo:inline>).</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">mod</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the application callback module and a start argument, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">application(3)</fo:inline></fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Key <fo:inline font-family="monospace">mod</fo:inline> is necessary for an application
          implemented as a supervision tree, otherwise the application
          controller does not know how to start it. <fo:inline font-family="monospace">mod</fo:inline>
          can be omitted for applications without processes, typically
          code libraries, for example, STDLIB.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">start_phases</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A list of start phases and corresponding start arguments for
          the application. If this key is present, the application
          master, in addition to the usual call to
          <fo:inline font-family="monospace">Module:start/2</fo:inline>, also calls
          <fo:inline font-family="monospace">Module:start_phase(Phase,Type,PhaseArgs)</fo:inline> for each
          start phase defined by key <fo:inline font-family="monospace">start_phases</fo:inline>. Only
          after this extended start procedure,
          <fo:inline font-family="monospace">application:start(Application)</fo:inline> returns.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Start phases can be used to synchronize startup of an
          application and its included applications. In this case,
          key <fo:inline font-family="monospace">mod</fo:inline> must be specified as follows:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{mod, {application_starter,[Module,StartArgs]}}</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The application master then calls <fo:inline font-family="monospace">Module:start/2</fo:inline>
          for the primary application, followed by calls to
          <fo:inline font-family="monospace">Module:start_phase/3</fo:inline> for each start phase (as defined
          for the primary application), both for the primary application
          and for each of its included applications, for which the start
          phase is defined.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This implies that for an included application, the set of
          start phases must be a subset of the set of phases defined
          for the primary application. For more information, see
          <fo:inline font-style="italic">OTP Design Principles</fo:inline>.
        </fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">
        
        <fo:inline font-family="monospace">runtime_dependencies</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A list of application versions that the application
          depends on. An example of such an application version is
          <fo:inline font-family="monospace">"kernel-3.0"</fo:inline>. Application versions specified as runtime
          dependencies are minimum requirements. That is, a larger
          application version than the one specified in the
          dependency satisfies the requirement. For information about
          how to compare application versions, see section
          <fo:inline font-style="italic">Versions</fo:inline>
          in the System Principles User's Guide.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that the application version
          specifies a source code version. One more, indirect,
          requirement is that the installed binary application of
          the specified version is built so that it is
          compatible with the rest of the system.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Some dependencies can only be required in specific runtime
          scenarios. When such optional dependencies exist, these are
          specified and documented in the corresponding "App" documentation
          of the specific application.</fo:block>
	  <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">runtime_dependencies</fo:inline> key was introduced in
	  OTP 17.0. The type of its value might be subject to changes during
	  the OTP 17 release.</fo:block></fo:block>
	  <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All runtime dependencies specified in OTP applications
	  during the OTP 17 release may not be completely correct. This
	  is actively being worked on. Declared runtime dependencies in OTP
	  applications are expected to be correct in OTP 18.</fo:block></fo:block>
      </fo:block></fo:block-container>
    </fo:block>
  

  <fo:block id="idp11093952" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">See Also</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic"><fo:inline font-family="monospace">application(3)</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">systools(3)</fo:inline></fo:inline></fo:block>
  
<fo:block page-break-before="always" id="idp11102352" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">config</fo:marker>config</fo:block>Name</fo:block>
  <fo:block/>
  config
  Configuration file.
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-weight="bold">configuration file</fo:inline> contains values for configuration
      parameters for the applications in the system. The <fo:inline font-family="monospace">erl</fo:inline>
      command-line argument <fo:inline font-family="monospace">-config Name</fo:inline> tells the system to use
      data in the system configuration file <fo:inline font-family="monospace">Name.config</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Configuration parameter values in the configuration file
      override the values in the application resource files (see
      <fo:inline font-style="italic"><fo:inline font-family="monospace">app(4)</fo:inline></fo:inline>.
      The values in the configuration file can be
      overridden by command-line flags (see
      <fo:inline font-style="italic"><fo:inline font-family="monospace">erts:erl(1)</fo:inline></fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The value of a configuration parameter is retrieved by calling
      <fo:inline font-family="monospace">application:get_env/1,2</fo:inline>.</fo:block>
  

  <fo:block id="idp11109648" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">File Syntax</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The configuration file is to be called <fo:inline font-family="monospace">Name.config</fo:inline>, where
      <fo:inline font-family="monospace">Name</fo:inline> is any name.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">File <fo:inline font-family="monospace">.config</fo:inline> contains a single Erlang term and
      has the following syntax:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
[{Application1, [{Par11, Val11}, ...]},
 ...
 {ApplicationN, [{ParN1, ValN1}, ...]}].</fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Application = atom()</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Application name.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Par = atom()</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Name of a configuration parameter.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Val = term()</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Value of a configuration parameter.</fo:block></fo:block></fo:block-container>
    </fo:block>
  

  <fo:block id="idp11117568" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">sys.config</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When starting Erlang in embedded mode, it is assumed that
      exactly one system configuration file is used, named
      <fo:inline font-family="monospace">sys.config</fo:inline>. This file is to be located in
      <fo:inline font-family="monospace">$ROOT/releases/Vsn</fo:inline>, where <fo:inline font-family="monospace">$ROOT</fo:inline> is the Erlang/OTP
      root installation directory and <fo:inline font-family="monospace">Vsn</fo:inline> is the release version.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Release handling relies on this assumption. When installing a
      new release version, the new <fo:inline font-family="monospace">sys.config</fo:inline> is read and used
      to update the application configurations.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This means that specifying another <fo:inline font-family="monospace">.config</fo:inline> file, or more
      <fo:inline font-family="monospace">.config</fo:inline> files, leads to inconsistent update of application
      configurations. There is, however, a syntax for
      <fo:inline font-family="monospace">sys.config</fo:inline> that allows pointing out other
      <fo:inline font-family="monospace">.config</fo:inline> files:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
[{Application, [{Par, Val}]} | File].</fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">File = string()</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Name of another <fo:inline font-family="monospace">.config</fo:inline> file.
        Extension <fo:inline font-family="monospace">.config</fo:inline> can be omitted. It is
        recommended to use absolute paths. A relative path is
        relative the current working directory of the emulator.</fo:block></fo:block-container>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When traversing the contents of <fo:inline font-family="monospace">sys.config</fo:inline> and a filename
      is encountered, its contents are read and merged with the result
      so far. When an application configuration tuple
      <fo:inline font-family="monospace">{Application, Env}</fo:inline> is found, it is merged with the result
      so far. Merging means that new parameters are added and existing
      parameter values overwritten.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
sys.config:

[{myapp,[{par1,val1},{par2,val2}]},
 "/home/user/myconfig"].

myconfig.config:

[{myapp,[{par2,val3},{par3,val4}]}].</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This yields the following environment for <fo:inline font-family="monospace">myapp</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
[{par1,val1},{par2,val3},{par3,val4}]</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The behavior if a file specified in <fo:inline font-family="monospace">sys.config</fo:inline> does not
      exist, or is erroneous, is backwards compatible.
      Starting the runtime system will fail. Installing a new release
      version will not fail, but an error message is returned and
      the erroneous file is ignored.</fo:block>
  

  <fo:block id="idp11133360" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">See Also</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic"><fo:inline font-family="monospace">app(4)</fo:inline></fo:inline>,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">erts:erl(1)</fo:inline></fo:inline>,
      <fo:inline font-style="italic">OTP Design Principles</fo:inline></fo:block>
  
</fo:flow>
  </fo:page-sequence>
</fo:root>
