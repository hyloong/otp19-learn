<module name="supervisor">
<type>
  <name>call</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-call">call()</marker> = which_children | count_children | {term(), term()}</typehead></typedecl>
</type>
<type>
  <name>child</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-child">child()</marker> = undefined | pid()</typehead></typedecl>
</type>
<type>
  <name>child_id</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-child_id">child_id()</marker> = term()</typehead></typedecl>
</type>
<type>
  <name>child_rec</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-child_rec">child_rec()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#child{pid =<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-child">child()</seealso> | {restarting, pid() | undefined} | [pid()],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>name = <seealso marker="#type-child_id">child_id()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>mfargs = <seealso marker="#type-mfargs">mfargs()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>restart_type = <seealso marker="#type-restart">restart()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>shutdown = <seealso marker="#type-shutdown">shutdown()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>child_type = <seealso marker="#type-worker">worker()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>modules = <seealso marker="#type-modules">modules()</seealso>}</typehead></typedecl>
</type>
<type>
  <name>child_spec</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-child_spec">child_spec()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#{id := <seealso marker="#type-child_id">child_id()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>start := <seealso marker="#type-mfargs">mfargs()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>restart =&gt; <seealso marker="#type-restart">restart()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>shutdown =&gt; <seealso marker="#type-shutdown">shutdown()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>type =&gt; <seealso marker="#type-worker">worker()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>modules =&gt; <seealso marker="#type-modules">modules()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{Id :: <seealso marker="#type-child_id">child_id()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>StartFunc :: <seealso marker="#type-mfargs">mfargs()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Restart :: <seealso marker="#type-restart">restart()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Shutdown :: <seealso marker="#type-shutdown">shutdown()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Type :: <seealso marker="#type-worker">worker()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Modules :: <seealso marker="#type-modules">modules()</seealso>}</typehead></typedecl>
  <anno>Id</anno>
  <anno>Modules</anno>
  <anno>Restart</anno>
  <anno>Shutdown</anno>
  <anno>StartFunc</anno>
  <anno>Type</anno>
</type>
<type>
  <name>init_sup_name</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-init_sup_name">init_sup_name()</marker> = <seealso marker="#type-sup_name">sup_name()</seealso> | self</typehead></typedecl>
</type>
<type>
  <name>mfargs</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-mfargs">mfargs()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{M :: module(), F :: atom(), A :: [term()] | undefined}</typehead></typedecl>
  <anno>A</anno>
  <anno>F</anno>
  <anno>M</anno>
</type>
<type>
  <name>modules</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-modules">modules()</marker> = [module()] | dynamic</typehead></typedecl>
</type>
<type>
  <name>restart</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-restart">restart()</marker> = permanent | transient | temporary</typehead></typedecl>
</type>
<type>
  <name>shutdown</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-shutdown">shutdown()</marker> = brutal_kill | timeout()</typehead></typedecl>
</type>
<type>
  <name>startchild_err</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-startchild_err">startchild_err()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>already_present | {already_started, Child :: <seealso marker="#type-child">child()</seealso>} | term()</typehead></typedecl>
  <anno>Child</anno>
</type>
<type>
  <name>startchild_ret</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-startchild_ret">startchild_ret()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Child :: <seealso marker="#type-child">child()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Child :: <seealso marker="#type-child">child()</seealso>, Info :: term()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{error, <seealso marker="#type-startchild_err">startchild_err()</seealso>}</typehead></typedecl>
  <anno>Child</anno>
  <anno>Info</anno>
</type>
<type>
  <name>startlink_err</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-startlink_err">startlink_err()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{already_started, pid()} | {shutdown, term()} | term()</typehead></typedecl>
</type>
<type>
  <name>startlink_ret</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-startlink_ret">startlink_ret()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, pid()} | ignore | {error, <seealso marker="#type-startlink_err">startlink_err()</seealso>}</typehead></typedecl>
</type>
<type>
  <name>state</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-state">state()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#state{name = any(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>strategy = <seealso marker="#type-strategy">strategy()</seealso> | undefined,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>children = [<seealso marker="#type-child_rec">child_rec()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>dynamics =<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{dict, <seealso marker="dict#type-dict">dict:dict</seealso>(pid(), list())} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{set, <seealso marker="sets#type-set">sets:set</seealso>(pid())} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>undefined,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>intensity = integer() &gt;= 0 | undefined,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>period = integer() &gt;= 1 | undefined,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>restarts = any(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>dynamic_restarts = integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>module = any(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>args = any()}</typehead></typedecl>
</type>
<type>
  <name>stop_rsn</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-stop_rsn">stop_rsn()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{shutdown, term()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{bad_return, {module(), init, term()}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{bad_start_spec, term()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{start_spec, term()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{supervisor_data, term()}</typehead></typedecl>
</type>
<type>
  <name>strategy</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-strategy">strategy()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>one_for_all | one_for_one | rest_for_one | simple_one_for_one</typehead></typedecl>
</type>
<type>
  <name>sup_flags</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-sup_flags">sup_flags()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#{strategy =&gt; <seealso marker="#type-strategy">strategy()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>intensity =&gt; integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>period =&gt; integer() &gt;= 1} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{RestartStrategy :: <seealso marker="#type-strategy">strategy()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Intensity :: integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Period :: integer() &gt;= 1}</typehead></typedecl>
  <anno>Intensity</anno>
  <anno>Period</anno>
  <anno>RestartStrategy</anno>
</type>
<type>
  <name>sup_name</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-sup_name">sup_name()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{local, Name :: atom()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{global, Name :: atom()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{via, Module :: module(), Name :: any()}</typehead></typedecl>
  <anno>Module</anno>
  <anno>Name</anno>
</type>
<type>
  <name>sup_ref</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-sup_ref">sup_ref()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>(Name :: atom()) |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{Name :: atom(), Node :: node()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{global, Name :: atom()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{via, Module :: module(), Name :: any()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>pid()</typehead></typedecl>
  <anno>Module</anno>
  <anno>Name</anno>
  <anno>Node</anno>
</type>
<type>
  <name>worker</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-worker">worker()</marker> = worker | supervisor</typehead></typedecl>
</type>
<spec>
  <name>check_childspecs</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>check_childspecs(ChildSpecs) -&gt; Result</head>
      <guard>
        <subtype><typename>ChildSpecs</typename><string>ChildSpecs = [<seealso marker="#type-child_spec">child_spec()</seealso>]</string></subtype>
        <subtype><typename>Result</typename><string>Result = ok | {error, Error :: term()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>ChildSpecs</anno>
  <anno>Error</anno>
  <anno>Result</anno>
</spec>
<spec>
  <name>code_change</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>code_change(X1 :: term(), State :: <seealso marker="#type-state">state()</seealso>, X3 :: term()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, <seealso marker="#type-state">state()</seealso>} | {error, term()}</head></clause>
  </contract>
  <anno>State</anno>
  <anno>X1</anno>
  <anno>X3</anno>
</spec>
<spec>
  <name>count_children</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>count_children(SupRef) -&gt; PropListOfCounts</head>
      <guard>
        <subtype><typename>SupRef</typename><string>SupRef = <seealso marker="#type-sup_ref">sup_ref()</seealso></string></subtype>
        <subtype><typename>PropListOfCounts</typename><string>PropListOfCounts = [Count]</string></subtype>
        <subtype><typename>Count</typename><string>Count = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{specs, ChildSpecCount :: integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{active, ActiveProcessCount :: integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{supervisors, ChildSupervisorCount :: integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{workers, ChildWorkerCount :: integer() &gt;= 0}</string></subtype>
      </guard></clause>
  </contract>
  <anno>ActiveProcessCount</anno>
  <anno>ChildSpecCount</anno>
  <anno>ChildSupervisorCount</anno>
  <anno>ChildWorkerCount</anno>
  <anno>Count</anno>
  <anno>PropListOfCounts</anno>
  <anno>SupRef</anno>
</spec>
<spec>
  <name>delete_child</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>delete_child(SupRef, Id) -&gt; Result</head>
      <guard>
        <subtype><typename>SupRef</typename><string>SupRef = <seealso marker="#type-sup_ref">sup_ref()</seealso></string></subtype>
        <subtype><typename>Id</typename><string>Id = <seealso marker="#type-child_id">child_id()</seealso></string></subtype>
        <subtype><typename>Result</typename><string>Result = ok | {error, Error}</string></subtype>
        <subtype><typename>Error</typename><string>Error = running | restarting | not_found | simple_one_for_one</string></subtype>
      </guard></clause>
  </contract>
  <anno>Error</anno>
  <anno>Id</anno>
  <anno>Result</anno>
  <anno>SupRef</anno>
</spec>
<spec>
  <name>format_status</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>get_callback_module</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_callback_module(Pid) -&gt; Module</head>
      <guard>
        <subtype><typename>Pid</typename><string>Pid = pid()</string></subtype>
        <subtype><typename>Module</typename><string>Module = atom()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Module</anno>
  <anno>Pid</anno>
</spec>
<spec>
  <name>get_childspec</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>get_childspec(SupRef, Id) -&gt; Result</head>
      <guard>
        <subtype><typename>SupRef</typename><string>SupRef = <seealso marker="#type-sup_ref">sup_ref()</seealso></string></subtype>
        <subtype><typename>Id</typename><string>Id = pid() | <seealso marker="#type-child_id">child_id()</seealso></string></subtype>
        <subtype><typename>Result</typename><string>Result = {ok, <seealso marker="#type-child_spec">child_spec()</seealso>} | {error, Error}</string></subtype>
        <subtype><typename>Error</typename><string>Error = not_found</string></subtype>
      </guard></clause>
  </contract>
  <anno>Error</anno>
  <anno>Id</anno>
  <anno>Result</anno>
  <anno>SupRef</anno>
</spec>
<spec>
  <name>handle_call</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>handle_call(X1 :: <seealso marker="#type-call">call()</seealso>, From :: term(), State :: <seealso marker="#type-state">state()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{reply, term(), <seealso marker="#type-state">state()</seealso>}</head></clause>
  </contract>
  <anno>From</anno>
  <anno>State</anno>
  <anno>X1</anno>
</spec>
<spec>
  <name>handle_cast</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>handle_cast(X1 :: {try_again_restart, <seealso marker="#type-child_id">child_id()</seealso> | pid()},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>State :: <seealso marker="#type-state">state()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{noreply, <seealso marker="#type-state">state()</seealso>} | {stop, shutdown, <seealso marker="#type-state">state()</seealso>}</head></clause>
  </contract>
  <anno>State</anno>
  <anno>X1</anno>
</spec>
<spec>
  <name>handle_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>handle_info(Msg :: term(), State :: <seealso marker="#type-state">state()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{noreply, <seealso marker="#type-state">state()</seealso>} | {stop, shutdown, <seealso marker="#type-state">state()</seealso>}</head></clause>
  </contract>
  <anno>Msg</anno>
  <anno>State</anno>
</spec>
<spec>
  <name>init</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>init(X1 :: {<seealso marker="#type-init_sup_name">init_sup_name()</seealso>, module(), [term()]}) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, <seealso marker="#type-state">state()</seealso>} | ignore | {stop, <seealso marker="#type-stop_rsn">stop_rsn()</seealso>}</head></clause>
  </contract>
  <anno>X1</anno>
</spec>
<spec>
  <name>restart_child</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>restart_child(SupRef, Id) -&gt; Result</head>
      <guard>
        <subtype><typename>SupRef</typename><string>SupRef = <seealso marker="#type-sup_ref">sup_ref()</seealso></string></subtype>
        <subtype><typename>Id</typename><string>Id = <seealso marker="#type-child_id">child_id()</seealso></string></subtype>
        <subtype><typename>Result</typename><string>Result = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Child :: <seealso marker="#type-child">child()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Child :: <seealso marker="#type-child">child()</seealso>, Info :: term()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Error}</string></subtype>
        <subtype><typename>Error</typename><string>Error = <br/><nbsp/><nbsp/><nbsp/><nbsp/>running | restarting | not_found | simple_one_for_one | term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Child</anno>
  <anno>Error</anno>
  <anno>Id</anno>
  <anno>Info</anno>
  <anno>Result</anno>
  <anno>SupRef</anno>
</spec>
<spec>
  <name>start_child</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>start_child(SupRef, ChildSpec) -&gt; <seealso marker="#type-startchild_ret">startchild_ret()</seealso></head>
      <guard>
        <subtype><typename>SupRef</typename><string>SupRef = <seealso marker="#type-sup_ref">sup_ref()</seealso></string></subtype>
        <subtype><typename>ChildSpec</typename><string>ChildSpec = <seealso marker="#type-child_spec">child_spec()</seealso> | (List :: [term()])</string></subtype>
      </guard></clause>
  </contract>
  <anno>ChildSpec</anno>
  <anno>List</anno>
  <anno>SupRef</anno>
</spec>
<spec>
  <name>start_link</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>start_link(Module, Args) -&gt; <seealso marker="#type-startlink_ret">startlink_ret()</seealso></head>
      <guard>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>Args</typename><string>Args = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Module</anno>
</spec>
<spec>
  <name>start_link</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>start_link(SupName, Module, Args) -&gt; <seealso marker="#type-startlink_ret">startlink_ret()</seealso></head>
      <guard>
        <subtype><typename>SupName</typename><string>SupName = <seealso marker="#type-sup_name">sup_name()</seealso></string></subtype>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>Args</typename><string>Args = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Module</anno>
  <anno>SupName</anno>
</spec>
<spec>
  <name>terminate</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>terminate(Reason :: term(), State :: <seealso marker="#type-state">state()</seealso>) -&gt; ok</head></clause>
  </contract>
  <anno>Reason</anno>
  <anno>State</anno>
</spec>
<spec>
  <name>terminate_child</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>terminate_child(SupRef, Id) -&gt; Result</head>
      <guard>
        <subtype><typename>SupRef</typename><string>SupRef = <seealso marker="#type-sup_ref">sup_ref()</seealso></string></subtype>
        <subtype><typename>Id</typename><string>Id = pid() | <seealso marker="#type-child_id">child_id()</seealso></string></subtype>
        <subtype><typename>Result</typename><string>Result = ok | {error, Error}</string></subtype>
        <subtype><typename>Error</typename><string>Error = not_found | simple_one_for_one</string></subtype>
      </guard></clause>
  </contract>
  <anno>Error</anno>
  <anno>Id</anno>
  <anno>Result</anno>
  <anno>SupRef</anno>
</spec>
<spec>
  <name>try_again_restart</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>try_again_restart(SupRef, Child) -&gt; ok</head>
      <guard>
        <subtype><typename>SupRef</typename><string>SupRef = <seealso marker="#type-sup_ref">sup_ref()</seealso></string></subtype>
        <subtype><typename>Child</typename><string>Child = <seealso marker="#type-child_id">child_id()</seealso> | pid()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Child</anno>
  <anno>SupRef</anno>
</spec>
<spec>
  <name>which_children</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>which_children(SupRef) -&gt; [{Id, Child, Type, Modules}]</head>
      <guard>
        <subtype><typename>SupRef</typename><string>SupRef = <seealso marker="#type-sup_ref">sup_ref()</seealso></string></subtype>
        <subtype><typename>Id</typename><string>Id = <seealso marker="#type-child_id">child_id()</seealso> | undefined</string></subtype>
        <subtype><typename>Child</typename><string>Child = <seealso marker="#type-child">child()</seealso> | restarting</string></subtype>
        <subtype><typename>Type</typename><string>Type = <seealso marker="#type-worker">worker()</seealso></string></subtype>
        <subtype><typename>Modules</typename><string>Modules = <seealso marker="#type-modules">modules()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Child</anno>
  <anno>Id</anno>
  <anno>Modules</anno>
  <anno>SupRef</anno>
  <anno>Type</anno>
</spec>
<timestamp>Generated by EDoc, Jul 12 2017, 20:27:28.</timestamp>
</module>