<module name="erl_syntax_lib">
<type>
  <name>appFunName</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-appFunName">appFunName()</marker> = {atom(), arity()} | {atom(), {atom(), arity()}}</typehead></typedecl>
</type>
<type>
  <name>field</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-field">field()</marker> = {atom(), {<seealso marker="#type-field_default">field_default()</seealso>, <seealso marker="#type-field_type">field_type()</seealso>}}</typehead></typedecl>
</type>
<type>
  <name>field_default</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-field_default">field_default()</marker> = none | <seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso></typehead></typedecl>
</type>
<type>
  <name>field_type</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-field_type">field_type()</marker> = none | <seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso></typehead></typedecl>
</type>
<type>
  <name>fields</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-fields">fields()</marker> = [<seealso marker="#type-field">field()</seealso>]</typehead></typedecl>
</type>
<type>
  <name>functionN</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-functionN">functionN()</marker> = atom() | {atom(), arity()}</typehead></typedecl>
</type>
<type>
  <name>functionName</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-functionName">functionName()</marker> = <seealso marker="#type-functionN">functionN()</seealso> | {atom(), <seealso marker="#type-functionN">functionN()</seealso>}</typehead></typedecl>
</type>
<type>
  <name>info</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-info">info()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{atom(), [{atom(), <seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>}]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{atom(), atom()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>atom()</typehead></typedecl>
</type>
<type>
  <name>info_pair</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-info_pair">info_pair()</marker> = {<seealso marker="#type-key">key()</seealso>, term()}</typehead></typedecl>
</type>
<type>
  <name>key</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-key">key()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>attributes |<br/><nbsp/><nbsp/><nbsp/><nbsp/>errors |<br/><nbsp/><nbsp/><nbsp/><nbsp/>exports |<br/><nbsp/><nbsp/><nbsp/><nbsp/>functions |<br/><nbsp/><nbsp/><nbsp/><nbsp/>imports |<br/><nbsp/><nbsp/><nbsp/><nbsp/>module |<br/><nbsp/><nbsp/><nbsp/><nbsp/>records |<br/><nbsp/><nbsp/><nbsp/><nbsp/>warnings</typehead></typedecl>
</type>
<type>
  <name>name</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-name">name()</marker> = <seealso marker="#type-shortname">shortname()</seealso> | {atom(), <seealso marker="#type-shortname">shortname()</seealso>}</typehead></typedecl>
</type>
<type>
  <name>shortname</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-shortname">shortname()</marker> = atom() | {atom(), arity()}</typehead></typedecl>
</type>
<type>
  <name>typeName</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-typeName">typeName()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>atom() | {module(), atom(), arity()} | {atom(), arity()}</typehead></typedecl>
</type>
<spec>
  <name>analyze_application</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>analyze_application(Node :: <seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-appFunName">appFunName()</seealso> | arity()</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>analyze_attribute</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>analyze_attribute(Node :: <seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>preprocessor | {atom(), term()}</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>analyze_export_attribute</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>analyze_export_attribute(Node :: <seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[<seealso marker="#type-functionName">functionName()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>analyze_file_attribute</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>analyze_file_attribute(Node :: <seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{string(), integer()}</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>analyze_form</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>analyze_form(Node :: <seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{atom(), term()} | atom()</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>analyze_forms</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>analyze_forms(Forms :: <seealso marker="erl_syntax#type-forms">erl_syntax:forms()</seealso>) -&gt; [<seealso marker="#type-info_pair">info_pair()</seealso>]</head></clause>
  </contract>
  <anno>Forms</anno>
</spec>
<spec>
  <name>analyze_function</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>analyze_function(Node :: <seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{atom(), arity()}</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>analyze_function_name</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>analyze_function_name(Node :: <seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-functionName">functionName()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>analyze_implicit_fun</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>analyze_implicit_fun(Node :: <seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-functionName">functionName()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>analyze_import_attribute</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>analyze_import_attribute(Node :: <seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{atom(), [<seealso marker="#type-functionName">functionName()</seealso>]} | atom()</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>analyze_module_attribute</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>analyze_module_attribute(Node :: <seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>atom() | {atom(), [atom()]}</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>analyze_record_attribute</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>analyze_record_attribute(Node :: <seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{atom(), <seealso marker="#type-fields">fields()</seealso>}</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>analyze_record_expr</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>analyze_record_expr(Node :: <seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{atom(), <seealso marker="#type-info">info()</seealso>} | atom()</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>analyze_record_field</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>analyze_record_field(Node :: <seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>) -&gt; <seealso marker="#type-field">field()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>analyze_type_application</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>analyze_type_application(Node :: <seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-typeName">typeName()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>analyze_type_name</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>analyze_type_name(Node :: <seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>) -&gt; <seealso marker="#type-typeName">typeName()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>analyze_wild_attribute</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>analyze_wild_attribute(Node :: <seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{atom(), term()}</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>annotate_bindings</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>annotate_bindings(Tree :: <seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Tree</anno>
</spec>
<spec>
  <name>annotate_bindings</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>annotate_bindings(Tree :: <seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Env :: <seealso marker="ordsets#type-ordset">ordsets:ordset</seealso>(atom())) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Env</anno>
  <anno>Tree</anno>
</spec>
<spec>
  <name>fold</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>fold(F :: fun((<seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>, term()) -&gt; term()),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>S :: term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Tree :: <seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>term()</head></clause>
  </contract>
  <anno>F</anno>
  <anno>S</anno>
  <anno>Tree</anno>
</spec>
<spec>
  <name>fold_subtrees</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>fold_subtrees(F ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>fun((<seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>, term()) -&gt; term()),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>S :: term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Tree :: <seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>term()</head></clause>
  </contract>
  <anno>F</anno>
  <anno>S</anno>
  <anno>Tree</anno>
</spec>
<spec>
  <name>foldl_listlist</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>foldl_listlist(F :: fun((term(), term()) -&gt; term()),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>S :: term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Ls :: [[term()]]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>term()</head></clause>
  </contract>
  <anno>F</anno>
  <anno>Ls</anno>
  <anno>S</anno>
</spec>
<spec>
  <name>function_name_expansions</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>function_name_expansions(Fs :: [<seealso marker="#type-name">name()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{<seealso marker="#type-shortname">shortname()</seealso>, <seealso marker="#type-name">name()</seealso>}]</head></clause>
  </contract>
  <anno>Fs</anno>
</spec>
<spec>
  <name>is_fail_expr</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_fail_expr(E :: <seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>E</anno>
</spec>
<spec>
  <name>limit</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>limit(Tree :: <seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>, Depth :: integer()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Depth</anno>
  <anno>Tree</anno>
</spec>
<spec>
  <name>limit</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>limit(Tree :: <seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Depth :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Node :: <seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Depth</anno>
  <anno>Node</anno>
  <anno>Tree</anno>
</spec>
<spec>
  <name>map</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>map(F :: fun((<seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>) -&gt; <seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>),<br/><nbsp/><nbsp/><nbsp/><nbsp/>Tree :: <seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso></head></clause>
  </contract>
  <anno>F</anno>
  <anno>Tree</anno>
</spec>
<spec>
  <name>map_subtrees</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>map_subtrees(F ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>fun((<seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Tree :: <seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso></head></clause>
  </contract>
  <anno>F</anno>
  <anno>Tree</anno>
</spec>
<spec>
  <name>mapfold</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>mapfold(F ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>fun((<seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>, term()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{<seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>, term()}),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>S :: term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Tree :: <seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{<seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>, term()}</head></clause>
  </contract>
  <anno>F</anno>
  <anno>S</anno>
  <anno>Tree</anno>
</spec>
<spec>
  <name>mapfold_subtrees</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>mapfold_subtrees(F ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>fun((<seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>, term()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{<seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>, term()}),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>S :: term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Tree :: <seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{<seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>, term()}</head></clause>
  </contract>
  <anno>F</anno>
  <anno>S</anno>
  <anno>Tree</anno>
</spec>
<spec>
  <name>mapfoldl_listlist</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>mapfoldl_listlist(F :: fun((term(), term()) -&gt; {term(), term()}),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>S :: term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Ls :: [[term()]]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{[[term()]], term()}</head></clause>
  </contract>
  <anno>F</anno>
  <anno>Ls</anno>
  <anno>S</anno>
</spec>
<spec>
  <name>new_variable_name</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>new_variable_name(S :: <seealso marker="sets#type-set">sets:set</seealso>(atom())) -&gt; atom()</head></clause>
  </contract>
  <anno>S</anno>
</spec>
<spec>
  <name>new_variable_name</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>new_variable_name(F :: fun((integer()) -&gt; atom()),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>S :: <seealso marker="sets#type-set">sets:set</seealso>(atom())) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>atom()</head></clause>
  </contract>
  <anno>F</anno>
  <anno>S</anno>
</spec>
<spec>
  <name>new_variable_names</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>new_variable_names(N :: integer(), S :: <seealso marker="sets#type-set">sets:set</seealso>(atom())) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[atom()]</head></clause>
  </contract>
  <anno>N</anno>
  <anno>S</anno>
</spec>
<spec>
  <name>new_variable_names</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>new_variable_names(N :: integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>F :: fun((integer()) -&gt; atom()),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>S :: <seealso marker="sets#type-set">sets:set</seealso>(atom())) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[atom()]</head></clause>
  </contract>
  <anno>F</anno>
  <anno>N</anno>
  <anno>S</anno>
</spec>
<spec>
  <name>strip_comments</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>strip_comments(Tree :: <seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Tree</anno>
</spec>
<spec>
  <name>to_comment</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>to_comment(Tree :: <seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Tree</anno>
</spec>
<spec>
  <name>to_comment</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>to_comment(Tree :: <seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>, Prefix :: string()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Prefix</anno>
  <anno>Tree</anno>
</spec>
<spec>
  <name>to_comment</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>to_comment(Tree :: <seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Prefix :: string(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>F :: fun((<seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>) -&gt; string())) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso></head></clause>
  </contract>
  <anno>F</anno>
  <anno>Prefix</anno>
  <anno>Tree</anno>
</spec>
<spec>
  <name>variables</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>variables(Tree :: <seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>) -&gt; <seealso marker="sets#type-set">sets:set</seealso>(atom())</head></clause>
  </contract>
  <anno>Tree</anno>
</spec>
<timestamp>Generated by EDoc, Jul 12 2017, 20:31:54.</timestamp>
</module>