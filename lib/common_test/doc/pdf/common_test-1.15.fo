<?xml version="1.0"?>
<fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format">
  <fo:layout-master-set>
    <fo:simple-page-master master-name="cover" margin="25mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin="0mm"/>
    </fo:simple-page-master>
    <fo:simple-page-master master-name="left-page" margin-top="25mm" margin-bottom="15mm" margin-left="20mm" margin-right="25mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin-top="15mm" margin-bottom="20mm"/>
      <fo:region-before region-name="left-header" extent="10mm"/>
      <fo:region-after region-name="left-footer" extent="10mm"/>
    </fo:simple-page-master>
    <fo:simple-page-master master-name="right-page" margin-top="25mm" margin-bottom="15mm" margin-left="25mm" margin-right="20mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin-top="15mm" margin-bottom="20mm"/>
      <fo:region-before region-name="right-header" extent="10mm"/>
      <fo:region-after region-name="right-footer" extent="10mm"/>
    </fo:simple-page-master>
    <fo:page-sequence-master master-name="document">
      <fo:repeatable-page-master-alternatives>
        <fo:conditional-page-master-reference master-reference="left-page" odd-or-even="even"/>
        <fo:conditional-page-master-reference master-reference="right-page" odd-or-even="odd"/>
      </fo:repeatable-page-master-alternatives>
    </fo:page-sequence-master>
  </fo:layout-master-set>
  <fo:bookmark-tree>
    <fo:bookmark internal-destination="cover-page" starting-state="show">
      <fo:bookmark-title>Common Test</fo:bookmark-title>
      <fo:bookmark internal-destination="idp481360" starting-state="hide">
        <fo:bookmark-title>Common Test User's Guide</fo:bookmark-title>
        <fo:bookmark internal-destination="idp863952" starting-state="hide">
          <fo:bookmark-title>Introduction</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1403744" starting-state="hide">
            <fo:bookmark-title>Scope</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp593088" starting-state="hide">
            <fo:bookmark-title>Prerequisites</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp262016" starting-state="hide">
          <fo:bookmark-title>Common Test Basics</fo:bookmark-title>
          <fo:bookmark internal-destination="idp261344" starting-state="hide">
            <fo:bookmark-title>General</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp504256" starting-state="hide">
            <fo:bookmark-title>Test Suite Organisation</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp538720" starting-state="hide">
            <fo:bookmark-title>Support Libraries</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1392080" starting-state="hide">
            <fo:bookmark-title>Suites and Test Cases</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp983792" starting-state="hide">
            <fo:bookmark-title>External Interfaces</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp22384" starting-state="hide">
          <fo:bookmark-title>Getting Started</fo:bookmark-title>
          <fo:bookmark internal-destination="idp502176" starting-state="hide">
            <fo:bookmark-title>Introduction for Newcomers</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp804112" starting-state="hide">
            <fo:bookmark-title>Test Case Execution</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1316080" starting-state="hide">
            <fo:bookmark-title>A Simple Test Suite</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp727648" starting-state="hide">
            <fo:bookmark-title>A Test Suite with Configuration Functions</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp626656" starting-state="hide">
            <fo:bookmark-title>Questions and Answers</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp929968" starting-state="hide">
          <fo:bookmark-title>Installation</fo:bookmark-title>
          <fo:bookmark internal-destination="idp2233920" starting-state="hide">
            <fo:bookmark-title>General Information</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp1345904" starting-state="hide">
          <fo:bookmark-title>Writing Test Suites</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1349136" starting-state="hide">
            <fo:bookmark-title>Support for Test Suite Authors</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1356896" starting-state="hide">
            <fo:bookmark-title>Test Suites</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1362800" starting-state="hide">
            <fo:bookmark-title>Init and End per Suite</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2117936" starting-state="hide">
            <fo:bookmark-title>Init and End per Test Case</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2153968" starting-state="hide">
            <fo:bookmark-title>Test Cases</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2176064" starting-state="hide">
            <fo:bookmark-title>Test Case Information Function</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2199568" starting-state="hide">
            <fo:bookmark-title>Test Suite Information Function</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2346432" starting-state="hide">
            <fo:bookmark-title>Test Case Groups</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2398624" starting-state="hide">
            <fo:bookmark-title>Parallel Property and Nested Groups</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2403024" starting-state="hide">
            <fo:bookmark-title>Parallel Test Cases and I/O</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2409360" starting-state="hide">
            <fo:bookmark-title>Repeated Groups</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2427808" starting-state="hide">
            <fo:bookmark-title>Shuffled Test Case Order</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2435664" starting-state="hide">
            <fo:bookmark-title>Group Information Function</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2440640" starting-state="hide">
            <fo:bookmark-title>Information Functions for Init- and End-Configuration</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2449632" starting-state="hide">
            <fo:bookmark-title>Data and Private Directories</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2468512" starting-state="hide">
            <fo:bookmark-title>Execution Environment</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2472960" starting-state="hide">
            <fo:bookmark-title>Timetrap Time-Outs</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2497072" starting-state="hide">
            <fo:bookmark-title>Logging - Categories and Verbosity Levels</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2544016" starting-state="hide">
            <fo:bookmark-title>Illegal Dependencies</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp2564784" starting-state="hide">
          <fo:bookmark-title>Test Structure</fo:bookmark-title>
          <fo:bookmark internal-destination="idp2567472" starting-state="hide">
            <fo:bookmark-title>General</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2569712" starting-state="hide">
            <fo:bookmark-title>Skipping Test Cases</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2579200" starting-state="hide">
            <fo:bookmark-title>Definition of Terms</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp2613600" starting-state="hide">
          <fo:bookmark-title>Examples and Templates</fo:bookmark-title>
          <fo:bookmark internal-destination="idp2616816" starting-state="hide">
            <fo:bookmark-title>Test Suite Example</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2623152" starting-state="hide">
            <fo:bookmark-title>Test Suite Templates</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp2644192" starting-state="hide">
          <fo:bookmark-title>Running Tests and Analyzing Results</fo:bookmark-title>
          <fo:bookmark internal-destination="idp2646880" starting-state="hide">
            <fo:bookmark-title>Using the Common Test Framework</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2652032" starting-state="hide">
            <fo:bookmark-title>Automatic Compilation of Test Suites and Help Modules</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2675248" starting-state="hide">
            <fo:bookmark-title>Running Tests from the OS Command Line</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2758176" starting-state="hide">
            <fo:bookmark-title>Running Tests from the Erlang Shell or from an Erlang Program</fo:bookmark-title>
            <fo:bookmark internal-destination="idp2767584" starting-state="hide">
              <fo:bookmark-title>Releasing the Erlang Shell</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2779328" starting-state="hide">
            <fo:bookmark-title>Test Case Group Execution</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2840048" starting-state="hide">
            <fo:bookmark-title>Running the Interactive Shell Mode</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2866768" starting-state="hide">
            <fo:bookmark-title>Step-by-Step Execution of Test Cases with the Erlang Debugger</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2882176" starting-state="hide">
            <fo:bookmark-title>Test Specifications</fo:bookmark-title>
            <fo:bookmark internal-destination="idp2882912" starting-state="hide">
              <fo:bookmark-title>General Description</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp2903520" starting-state="hide">
              <fo:bookmark-title>Using Multiple Test Specification Files</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp2908080" starting-state="hide">
              <fo:bookmark-title>Test Specification File Inclusion</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp2922544" starting-state="hide">
              <fo:bookmark-title>Test Case Groups</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp2932640" starting-state="hide">
              <fo:bookmark-title>Test Specification Syntax</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp2959008" starting-state="hide">
              <fo:bookmark-title>Constants</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp2972400" starting-state="hide">
              <fo:bookmark-title>Example</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp2986272" starting-state="hide">
              <fo:bookmark-title>The init Term</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp2989056" starting-state="hide">
              <fo:bookmark-title>User-Specific Terms</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp2994240" starting-state="hide">
              <fo:bookmark-title>Reading Test Specification Terms</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3000384" starting-state="hide">
            <fo:bookmark-title>Running Tests from the Web-Based GUI</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3013744" starting-state="hide">
            <fo:bookmark-title>Log Files</fo:bookmark-title>
            <fo:bookmark internal-destination="idp3042416" starting-state="hide">
              <fo:bookmark-title>Log Options</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3052608" starting-state="hide">
              <fo:bookmark-title>Sorting HTML Table Columns</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3056304" starting-state="hide">
              <fo:bookmark-title>The Unexpected I/O Log</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3062672" starting-state="hide">
              <fo:bookmark-title>The Pre- and Post Test I/O Log</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3070240" starting-state="hide">
              <fo:bookmark-title>Delete Old Logs</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3075440" starting-state="hide">
            <fo:bookmark-title>HTML Style Sheets</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3104208" starting-state="hide">
            <fo:bookmark-title>Repeating Tests</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3148064" starting-state="hide">
            <fo:bookmark-title>Silent Connections</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3173376" starting-state="hide">
          <fo:bookmark-title>External Configuration Data</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3176624" starting-state="hide">
            <fo:bookmark-title>General</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3181840" starting-state="hide">
            <fo:bookmark-title>Syntax</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3184624" starting-state="hide">
            <fo:bookmark-title>Requiring and Reading Configuration Data</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3200496" starting-state="hide">
            <fo:bookmark-title>Using Configuration Variables Defined in Multiple Files</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3203456" starting-state="hide">
            <fo:bookmark-title>Encrypted Configuration Files</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3211072" starting-state="hide">
            <fo:bookmark-title>Opening Connections Using Configuration Data</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3219616" starting-state="hide">
            <fo:bookmark-title>User-Specific Configuration Data Formats</fo:bookmark-title>
            <fo:bookmark internal-destination="idp3221616" starting-state="hide">
              <fo:bookmark-title>Default Callback Modules for Handling Configuration Data</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3226176" starting-state="hide">
              <fo:bookmark-title>Using XML Configuration Files</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3229328" starting-state="hide">
              <fo:bookmark-title>Implement a User-Specific Handler</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3245648" starting-state="hide">
            <fo:bookmark-title>Examples of Configuration Data Handling</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3252240" starting-state="hide">
            <fo:bookmark-title>Example of User-Specific Configuration Handler</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3264512" starting-state="hide">
          <fo:bookmark-title>Code Coverage Analysis</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3267728" starting-state="hide">
            <fo:bookmark-title>General</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3271856" starting-state="hide">
            <fo:bookmark-title>Use</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3285632" starting-state="hide">
            <fo:bookmark-title>Stopping the Cover Tool When Tests Are Completed</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3292928" starting-state="hide">
            <fo:bookmark-title>The Cover Specification File</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3300576" starting-state="hide">
            <fo:bookmark-title>Cross Cover Analysis</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3327888" starting-state="hide">
            <fo:bookmark-title>Logging</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3335456" starting-state="hide">
          <fo:bookmark-title>Using Common Test for Large-Scale Testing</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3338704" starting-state="hide">
            <fo:bookmark-title>General</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3348048" starting-state="hide">
            <fo:bookmark-title>Use</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3371232" starting-state="hide">
            <fo:bookmark-title>Test Specifications</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3401280" starting-state="hide">
            <fo:bookmark-title>Automatic Startup of Test Target Nodes</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3423568" starting-state="hide">
          <fo:bookmark-title>Event Handling</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3426800" starting-state="hide">
            <fo:bookmark-title>General</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3443744" starting-state="hide">
            <fo:bookmark-title>Use</fo:bookmark-title>
            <fo:bookmark internal-destination="idp3471296" starting-state="hide">
              <fo:bookmark-title>General Events</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3550784" starting-state="hide">
              <fo:bookmark-title>Internal Events</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3563600" starting-state="hide">
              <fo:bookmark-title>Notes</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3575536" starting-state="hide">
          <fo:bookmark-title>Dependencies between Test Cases and Suites</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3578240" starting-state="hide">
            <fo:bookmark-title>General</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3594752" starting-state="hide">
            <fo:bookmark-title>Saving Configuration Data</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3615552" starting-state="hide">
            <fo:bookmark-title>Sequences</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3637344" starting-state="hide">
          <fo:bookmark-title>Common Test Hooks</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3640560" starting-state="hide">
            <fo:bookmark-title>General</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3647824" starting-state="hide">
            <fo:bookmark-title>Installing a CTH</fo:bookmark-title>
            <fo:bookmark internal-destination="idp3662736" starting-state="hide">
              <fo:bookmark-title>Overriding CTHs</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3666016" starting-state="hide">
              <fo:bookmark-title>CTH Execution Order</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3669632" starting-state="hide">
            <fo:bookmark-title>CTH Scope</fo:bookmark-title>
            <fo:bookmark internal-destination="idp3704208" starting-state="hide">
              <fo:bookmark-title>CTH Processes and Tables</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3707232" starting-state="hide">
              <fo:bookmark-title>External Configuration Data and Logging</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3713056" starting-state="hide">
            <fo:bookmark-title>Manipulating Tests</fo:bookmark-title>
            <fo:bookmark internal-destination="idp3718000" starting-state="hide">
              <fo:bookmark-title>Pre Hooks</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3736592" starting-state="hide">
              <fo:bookmark-title>Post Hooks</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3755344" starting-state="hide">
              <fo:bookmark-title>Skip and Fail Hooks</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3759056" starting-state="hide">
            <fo:bookmark-title>Synchronizing External User Applications with Common Test</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3768256" starting-state="hide">
            <fo:bookmark-title>Example CTH</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3775248" starting-state="hide">
            <fo:bookmark-title>Built-In CTHs</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3795824" starting-state="hide">
          <fo:bookmark-title>Some Thoughts about Testing</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3798496" starting-state="hide">
            <fo:bookmark-title>Goals</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3800864" starting-state="hide">
            <fo:bookmark-title>What to Test</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
      </fo:bookmark>
      <fo:bookmark internal-destination="idp113776" starting-state="hide">
        <fo:bookmark-title>Reference Manual</fo:bookmark-title>
        <fo:bookmark internal-destination="idp1844608" starting-state="hide">
          <fo:bookmark-title>common_test</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1589504" starting-state="hide">
            <fo:bookmark-title>Module:all/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1327744" starting-state="hide">
            <fo:bookmark-title>Module:groups/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp391360" starting-state="hide">
            <fo:bookmark-title>Module:suite/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp92608" starting-state="hide">
            <fo:bookmark-title>Module:init_per_suite/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp650704" starting-state="hide">
            <fo:bookmark-title>Module:end_per_suite/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4816400" starting-state="hide">
            <fo:bookmark-title>Module:group/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4650192" starting-state="hide">
            <fo:bookmark-title>Module:init_per_group/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4661472" starting-state="hide">
            <fo:bookmark-title>Module:end_per_group/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4445568" starting-state="hide">
            <fo:bookmark-title>Module:init_per_testcase/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4455632" starting-state="hide">
            <fo:bookmark-title>Module:end_per_testcase/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4466736" starting-state="hide">
            <fo:bookmark-title>Module:Testcase/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4495008" starting-state="hide">
            <fo:bookmark-title>Module:Testcase/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp4703488" starting-state="hide">
          <fo:bookmark-title>ct_run</fo:bookmark-title>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp4751168" starting-state="hide">
          <fo:bookmark-title>ct</fo:bookmark-title>
          <fo:bookmark internal-destination="idp4785008" starting-state="hide">
            <fo:bookmark-title>abort_current_testcase/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4790080" starting-state="hide">
            <fo:bookmark-title>add_config/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4795728" starting-state="hide">
            <fo:bookmark-title>break/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4806448" starting-state="hide">
            <fo:bookmark-title>break/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4815040" starting-state="hide">
            <fo:bookmark-title>capture_get/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5025440" starting-state="hide">
            <fo:bookmark-title>capture_get/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5034512" starting-state="hide">
            <fo:bookmark-title>capture_start/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5039888" starting-state="hide">
            <fo:bookmark-title>capture_stop/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5045232" starting-state="hide">
            <fo:bookmark-title>comment/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5050368" starting-state="hide">
            <fo:bookmark-title>comment/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5057712" starting-state="hide">
            <fo:bookmark-title>continue/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5061424" starting-state="hide">
            <fo:bookmark-title>continue/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5066944" starting-state="hide">
            <fo:bookmark-title>decrypt_config_file/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5073552" starting-state="hide">
            <fo:bookmark-title>decrypt_config_file/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5080080" starting-state="hide">
            <fo:bookmark-title>encrypt_config_file/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5088464" starting-state="hide">
            <fo:bookmark-title>encrypt_config_file/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5097728" starting-state="hide">
            <fo:bookmark-title>fail/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5101792" starting-state="hide">
            <fo:bookmark-title>fail/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5106496" starting-state="hide">
            <fo:bookmark-title>get_config/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5110064" starting-state="hide">
            <fo:bookmark-title>get_config/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5113632" starting-state="hide">
            <fo:bookmark-title>get_config/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5133520" starting-state="hide">
            <fo:bookmark-title>get_event_mgr_ref/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5139200" starting-state="hide">
            <fo:bookmark-title>get_status/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5148176" starting-state="hide">
            <fo:bookmark-title>get_target_name/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5152352" starting-state="hide">
            <fo:bookmark-title>get_testspec_terms/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5156544" starting-state="hide">
            <fo:bookmark-title>get_testspec_terms/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5169136" starting-state="hide">
            <fo:bookmark-title>get_timetrap_info/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5175760" starting-state="hide">
            <fo:bookmark-title>get_verbosity/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5181104" starting-state="hide">
            <fo:bookmark-title>install/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5190448" starting-state="hide">
            <fo:bookmark-title>listenv/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5195984" starting-state="hide">
            <fo:bookmark-title>log/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5199536" starting-state="hide">
            <fo:bookmark-title>log/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5204512" starting-state="hide">
            <fo:bookmark-title>log/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5209952" starting-state="hide">
            <fo:bookmark-title>log/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5215856" starting-state="hide">
            <fo:bookmark-title>log/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5229040" starting-state="hide">
            <fo:bookmark-title>make_priv_dir/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5233808" starting-state="hide">
            <fo:bookmark-title>notify/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5240624" starting-state="hide">
            <fo:bookmark-title>pal/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5244192" starting-state="hide">
            <fo:bookmark-title>pal/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5249168" starting-state="hide">
            <fo:bookmark-title>pal/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5254608" starting-state="hide">
            <fo:bookmark-title>pal/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5260512" starting-state="hide">
            <fo:bookmark-title>pal/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5272800" starting-state="hide">
            <fo:bookmark-title>parse_table/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5279632" starting-state="hide">
            <fo:bookmark-title>print/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5283184" starting-state="hide">
            <fo:bookmark-title>print/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5288160" starting-state="hide">
            <fo:bookmark-title>print/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5293600" starting-state="hide">
            <fo:bookmark-title>print/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5299504" starting-state="hide">
            <fo:bookmark-title>print/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5311168" starting-state="hide">
            <fo:bookmark-title>reload_config/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5317504" starting-state="hide">
            <fo:bookmark-title>remove_config/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5322224" starting-state="hide">
            <fo:bookmark-title>require/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5341728" starting-state="hide">
            <fo:bookmark-title>require/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5362976" starting-state="hide">
            <fo:bookmark-title>run/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5367920" starting-state="hide">
            <fo:bookmark-title>run/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5371936" starting-state="hide">
            <fo:bookmark-title>run/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5380080" starting-state="hide">
            <fo:bookmark-title>run_test/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5414480" starting-state="hide">
            <fo:bookmark-title>run_testspec/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5422064" starting-state="hide">
            <fo:bookmark-title>set_verbosity/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5427408" starting-state="hide">
            <fo:bookmark-title>sleep/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5435792" starting-state="hide">
            <fo:bookmark-title>start_interactive/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5443088" starting-state="hide">
            <fo:bookmark-title>step/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5448000" starting-state="hide">
            <fo:bookmark-title>step/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5454832" starting-state="hide">
            <fo:bookmark-title>stop_interactive/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5458816" starting-state="hide">
            <fo:bookmark-title>sync_notify/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5466048" starting-state="hide">
            <fo:bookmark-title>testcases/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5471040" starting-state="hide">
            <fo:bookmark-title>timetrap/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5480224" starting-state="hide">
            <fo:bookmark-title>userdata/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5486624" starting-state="hide">
            <fo:bookmark-title>userdata/3</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp5501312" starting-state="hide">
          <fo:bookmark-title>ct_master</fo:bookmark-title>
          <fo:bookmark internal-destination="idp5505136" starting-state="hide">
            <fo:bookmark-title>abort/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5507808" starting-state="hide">
            <fo:bookmark-title>abort/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5511392" starting-state="hide">
            <fo:bookmark-title>basic_html/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5516864" starting-state="hide">
            <fo:bookmark-title>get_event_mgr_ref/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5522560" starting-state="hide">
            <fo:bookmark-title>progress/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5528016" starting-state="hide">
            <fo:bookmark-title>run/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5532496" starting-state="hide">
            <fo:bookmark-title>run/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5538416" starting-state="hide">
            <fo:bookmark-title>run/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5546032" starting-state="hide">
            <fo:bookmark-title>run_on_node/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5551472" starting-state="hide">
            <fo:bookmark-title>run_on_node/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5557376" starting-state="hide">
            <fo:bookmark-title>run_test/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp5575184" starting-state="hide">
          <fo:bookmark-title>ct_cover</fo:bookmark-title>
          <fo:bookmark internal-destination="idp5578416" starting-state="hide">
            <fo:bookmark-title>add_nodes/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5584896" starting-state="hide">
            <fo:bookmark-title>cross_cover_analyse/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5590640" starting-state="hide">
            <fo:bookmark-title>remove_nodes/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp5603936" starting-state="hide">
          <fo:bookmark-title>ct_ftp</fo:bookmark-title>
          <fo:bookmark internal-destination="idp5614400" starting-state="hide">
            <fo:bookmark-title>cd/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5618464" starting-state="hide">
            <fo:bookmark-title>close/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5622080" starting-state="hide">
            <fo:bookmark-title>delete/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5626144" starting-state="hide">
            <fo:bookmark-title>get/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5637216" starting-state="hide">
            <fo:bookmark-title>ls/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5642144" starting-state="hide">
            <fo:bookmark-title>open/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5652816" starting-state="hide">
            <fo:bookmark-title>put/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5664656" starting-state="hide">
            <fo:bookmark-title>recv/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5669136" starting-state="hide">
            <fo:bookmark-title>recv/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5674560" starting-state="hide">
            <fo:bookmark-title>send/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5679008" starting-state="hide">
            <fo:bookmark-title>send/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5684400" starting-state="hide">
            <fo:bookmark-title>type/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp5695776" starting-state="hide">
          <fo:bookmark-title>ct_ssh</fo:bookmark-title>
          <fo:bookmark internal-destination="idp5715440" starting-state="hide">
            <fo:bookmark-title>apread/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5720848" starting-state="hide">
            <fo:bookmark-title>apread/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5726256" starting-state="hide">
            <fo:bookmark-title>apwrite/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5731664" starting-state="hide">
            <fo:bookmark-title>apwrite/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5737072" starting-state="hide">
            <fo:bookmark-title>aread/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5742464" starting-state="hide">
            <fo:bookmark-title>aread/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5747872" starting-state="hide">
            <fo:bookmark-title>awrite/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5753264" starting-state="hide">
            <fo:bookmark-title>awrite/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5758672" starting-state="hide">
            <fo:bookmark-title>close/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5764064" starting-state="hide">
            <fo:bookmark-title>close/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5769456" starting-state="hide">
            <fo:bookmark-title>connect/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5773056" starting-state="hide">
            <fo:bookmark-title>connect/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5776672" starting-state="hide">
            <fo:bookmark-title>connect/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5794752" starting-state="hide">
            <fo:bookmark-title>del_dir/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5800144" starting-state="hide">
            <fo:bookmark-title>del_dir/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5805536" starting-state="hide">
            <fo:bookmark-title>delete/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5810928" starting-state="hide">
            <fo:bookmark-title>delete/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5816320" starting-state="hide">
            <fo:bookmark-title>disconnect/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5820352" starting-state="hide">
            <fo:bookmark-title>exec/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5823952" starting-state="hide">
            <fo:bookmark-title>exec/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5830352" starting-state="hide">
            <fo:bookmark-title>exec/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5837216" starting-state="hide">
            <fo:bookmark-title>get_file_info/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5842608" starting-state="hide">
            <fo:bookmark-title>get_file_info/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5848016" starting-state="hide">
            <fo:bookmark-title>list_dir/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5853408" starting-state="hide">
            <fo:bookmark-title>list_dir/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5858800" starting-state="hide">
            <fo:bookmark-title>make_dir/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5864192" starting-state="hide">
            <fo:bookmark-title>make_dir/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5869584" starting-state="hide">
            <fo:bookmark-title>make_symlink/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5874992" starting-state="hide">
            <fo:bookmark-title>make_symlink/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5880400" starting-state="hide">
            <fo:bookmark-title>open/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5885792" starting-state="hide">
            <fo:bookmark-title>open/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5891184" starting-state="hide">
            <fo:bookmark-title>opendir/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5896576" starting-state="hide">
            <fo:bookmark-title>opendir/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5901968" starting-state="hide">
            <fo:bookmark-title>position/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5907376" starting-state="hide">
            <fo:bookmark-title>position/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5912784" starting-state="hide">
            <fo:bookmark-title>pread/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5918192" starting-state="hide">
            <fo:bookmark-title>pread/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5923600" starting-state="hide">
            <fo:bookmark-title>pwrite/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5929008" starting-state="hide">
            <fo:bookmark-title>pwrite/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5934416" starting-state="hide">
            <fo:bookmark-title>read/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5939808" starting-state="hide">
            <fo:bookmark-title>read/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5945216" starting-state="hide">
            <fo:bookmark-title>read_file/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5950608" starting-state="hide">
            <fo:bookmark-title>read_file/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5956000" starting-state="hide">
            <fo:bookmark-title>read_file_info/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5961392" starting-state="hide">
            <fo:bookmark-title>read_file_info/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5966800" starting-state="hide">
            <fo:bookmark-title>read_link/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5972192" starting-state="hide">
            <fo:bookmark-title>read_link/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5977584" starting-state="hide">
            <fo:bookmark-title>read_link_info/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5982976" starting-state="hide">
            <fo:bookmark-title>read_link_info/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5988384" starting-state="hide">
            <fo:bookmark-title>receive_response/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5992016" starting-state="hide">
            <fo:bookmark-title>receive_response/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp5995680" starting-state="hide">
            <fo:bookmark-title>receive_response/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6008496" starting-state="hide">
            <fo:bookmark-title>rename/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6013888" starting-state="hide">
            <fo:bookmark-title>rename/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6019296" starting-state="hide">
            <fo:bookmark-title>send/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6022912" starting-state="hide">
            <fo:bookmark-title>send/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6026512" starting-state="hide">
            <fo:bookmark-title>send/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6032400" starting-state="hide">
            <fo:bookmark-title>send_and_receive/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6036048" starting-state="hide">
            <fo:bookmark-title>send_and_receive/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6039728" starting-state="hide">
            <fo:bookmark-title>send_and_receive/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6043408" starting-state="hide">
            <fo:bookmark-title>send_and_receive/6</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6051664" starting-state="hide">
            <fo:bookmark-title>session_close/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6056160" starting-state="hide">
            <fo:bookmark-title>session_open/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6059760" starting-state="hide">
            <fo:bookmark-title>session_open/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6064720" starting-state="hide">
            <fo:bookmark-title>sftp_connect/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6069824" starting-state="hide">
            <fo:bookmark-title>shell/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6073440" starting-state="hide">
            <fo:bookmark-title>shell/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6078960" starting-state="hide">
            <fo:bookmark-title>subsystem/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6082624" starting-state="hide">
            <fo:bookmark-title>subsystem/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6088544" starting-state="hide">
            <fo:bookmark-title>write/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6093936" starting-state="hide">
            <fo:bookmark-title>write/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6099344" starting-state="hide">
            <fo:bookmark-title>write_file/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6104736" starting-state="hide">
            <fo:bookmark-title>write_file/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6110144" starting-state="hide">
            <fo:bookmark-title>write_file_info/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6115552" starting-state="hide">
            <fo:bookmark-title>write_file_info/4</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp6128272" starting-state="hide">
          <fo:bookmark-title>ct_netconfc</fo:bookmark-title>
          <fo:bookmark internal-destination="idp6220624" starting-state="hide">
            <fo:bookmark-title>action/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6221456" starting-state="hide">
            <fo:bookmark-title>action/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6225024" starting-state="hide">
            <fo:bookmark-title>close_session/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6225856" starting-state="hide">
            <fo:bookmark-title>close_session/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6230192" starting-state="hide">
            <fo:bookmark-title>connect/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6237568" starting-state="hide">
            <fo:bookmark-title>connect/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6252016" starting-state="hide">
            <fo:bookmark-title>copy_config/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6252848" starting-state="hide">
            <fo:bookmark-title>copy_config/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6256960" starting-state="hide">
            <fo:bookmark-title>create_subscription/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6257424" starting-state="hide">
            <fo:bookmark-title>create_subscription/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6257904" starting-state="hide">
            <fo:bookmark-title>create_subscription/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6258384" starting-state="hide">
            <fo:bookmark-title>create_subscription/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6258880" starting-state="hide">
            <fo:bookmark-title>create_subscription/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6259984" starting-state="hide">
            <fo:bookmark-title>create_subscription/6</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6278224" starting-state="hide">
            <fo:bookmark-title>delete_config/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6279056" starting-state="hide">
            <fo:bookmark-title>delete_config/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6283104" starting-state="hide">
            <fo:bookmark-title>disconnect/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6287008" starting-state="hide">
            <fo:bookmark-title>edit_config/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6287840" starting-state="hide">
            <fo:bookmark-title>edit_config/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6288944" starting-state="hide">
            <fo:bookmark-title>edit_config/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6290048" starting-state="hide">
            <fo:bookmark-title>edit_config/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6298784" starting-state="hide">
            <fo:bookmark-title>get/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6299616" starting-state="hide">
            <fo:bookmark-title>get/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6304128" starting-state="hide">
            <fo:bookmark-title>get_capabilities/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6304960" starting-state="hide">
            <fo:bookmark-title>get_capabilities/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6315296" starting-state="hide">
            <fo:bookmark-title>get_config/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6316128" starting-state="hide">
            <fo:bookmark-title>get_config/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6322000" starting-state="hide">
            <fo:bookmark-title>get_event_streams/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6322832" starting-state="hide">
            <fo:bookmark-title>get_event_streams/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6323936" starting-state="hide">
            <fo:bookmark-title>get_event_streams/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6325040" starting-state="hide">
            <fo:bookmark-title>get_event_streams/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6333008" starting-state="hide">
            <fo:bookmark-title>get_session_id/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6333840" starting-state="hide">
            <fo:bookmark-title>get_session_id/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6336560" starting-state="hide">
            <fo:bookmark-title>hello/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6337392" starting-state="hide">
            <fo:bookmark-title>hello/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6338224" starting-state="hide">
            <fo:bookmark-title>hello/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6342304" starting-state="hide">
            <fo:bookmark-title>kill_session/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6343136" starting-state="hide">
            <fo:bookmark-title>kill_session/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6348080" starting-state="hide">
            <fo:bookmark-title>lock/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6348912" starting-state="hide">
            <fo:bookmark-title>lock/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6354624" starting-state="hide">
            <fo:bookmark-title>only_open/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6359520" starting-state="hide">
            <fo:bookmark-title>only_open/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6364416" starting-state="hide">
            <fo:bookmark-title>open/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6372656" starting-state="hide">
            <fo:bookmark-title>open/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6388496" starting-state="hide">
            <fo:bookmark-title>send/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6389328" starting-state="hide">
            <fo:bookmark-title>send/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6392608" starting-state="hide">
            <fo:bookmark-title>send_rpc/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6393440" starting-state="hide">
            <fo:bookmark-title>send_rpc/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6399456" starting-state="hide">
            <fo:bookmark-title>session/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6400288" starting-state="hide">
            <fo:bookmark-title>session/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6401392" starting-state="hide">
            <fo:bookmark-title>session/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6402496" starting-state="hide">
            <fo:bookmark-title>session/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6411200" starting-state="hide">
            <fo:bookmark-title>unlock/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6412032" starting-state="hide">
            <fo:bookmark-title>unlock/3</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp6424784" starting-state="hide">
          <fo:bookmark-title>ct_rpc</fo:bookmark-title>
          <fo:bookmark internal-destination="idp6427936" starting-state="hide">
            <fo:bookmark-title>app_node/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6434048" starting-state="hide">
            <fo:bookmark-title>app_node/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6440944" starting-state="hide">
            <fo:bookmark-title>app_node/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6449712" starting-state="hide">
            <fo:bookmark-title>call/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6452912" starting-state="hide">
            <fo:bookmark-title>call/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6463392" starting-state="hide">
            <fo:bookmark-title>call/6</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6475728" starting-state="hide">
            <fo:bookmark-title>cast/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6485824" starting-state="hide">
            <fo:bookmark-title>cast/5</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp6505088" starting-state="hide">
          <fo:bookmark-title>ct_snmp</fo:bookmark-title>
          <fo:bookmark internal-destination="idp6611984" starting-state="hide">
            <fo:bookmark-title>get_next_values/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6617424" starting-state="hide">
            <fo:bookmark-title>get_values/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6622832" starting-state="hide">
            <fo:bookmark-title>load_mibs/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6627776" starting-state="hide">
            <fo:bookmark-title>register_agents/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6633504" starting-state="hide">
            <fo:bookmark-title>register_users/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6639216" starting-state="hide">
            <fo:bookmark-title>register_usm_users/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6644896" starting-state="hide">
            <fo:bookmark-title>set_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6652000" starting-state="hide">
            <fo:bookmark-title>set_values/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6657872" starting-state="hide">
            <fo:bookmark-title>start/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6661488" starting-state="hide">
            <fo:bookmark-title>start/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6675264" starting-state="hide">
            <fo:bookmark-title>stop/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6679824" starting-state="hide">
            <fo:bookmark-title>unload_mibs/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6684784" starting-state="hide">
            <fo:bookmark-title>unregister_agents/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6688848" starting-state="hide">
            <fo:bookmark-title>unregister_agents/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6693424" starting-state="hide">
            <fo:bookmark-title>unregister_users/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6697456" starting-state="hide">
            <fo:bookmark-title>unregister_users/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6701968" starting-state="hide">
            <fo:bookmark-title>unregister_usm_users/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6706032" starting-state="hide">
            <fo:bookmark-title>unregister_usm_users/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp6717872" starting-state="hide">
          <fo:bookmark-title>ct_telnet</fo:bookmark-title>
          <fo:bookmark internal-destination="idp6771760" starting-state="hide">
            <fo:bookmark-title>close/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6777776" starting-state="hide">
            <fo:bookmark-title>cmd/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6781360" starting-state="hide">
            <fo:bookmark-title>cmd/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6790704" starting-state="hide">
            <fo:bookmark-title>cmdf/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6794336" starting-state="hide">
            <fo:bookmark-title>cmdf/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6802192" starting-state="hide">
            <fo:bookmark-title>expect/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6805776" starting-state="hide">
            <fo:bookmark-title>expect/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6858000" starting-state="hide">
            <fo:bookmark-title>get_data/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6864848" starting-state="hide">
            <fo:bookmark-title>open/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6868416" starting-state="hide">
            <fo:bookmark-title>open/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6873424" starting-state="hide">
            <fo:bookmark-title>open/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6877056" starting-state="hide">
            <fo:bookmark-title>open/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6897664" starting-state="hide">
            <fo:bookmark-title>send/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6901264" starting-state="hide">
            <fo:bookmark-title>send/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6910064" starting-state="hide">
            <fo:bookmark-title>sendf/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6913696" starting-state="hide">
            <fo:bookmark-title>sendf/4</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp6928960" starting-state="hide">
          <fo:bookmark-title>unix_telnet</fo:bookmark-title>
          <fo:bookmark internal-destination="idp6943072" starting-state="hide">
            <fo:bookmark-title>connect/7</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6955232" starting-state="hide">
            <fo:bookmark-title>get_prompt_regexp/0</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp6971984" starting-state="hide">
          <fo:bookmark-title>ct_slave</fo:bookmark-title>
          <fo:bookmark internal-destination="idp6976256" starting-state="hide">
            <fo:bookmark-title>start/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6983072" starting-state="hide">
            <fo:bookmark-title>start/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp6991040" starting-state="hide">
            <fo:bookmark-title>start/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7029856" starting-state="hide">
            <fo:bookmark-title>stop/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7034896" starting-state="hide">
            <fo:bookmark-title>stop/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp7049072" starting-state="hide">
          <fo:bookmark-title>ct_hooks</fo:bookmark-title>
          <fo:bookmark internal-destination="idp7061280" starting-state="hide">
            <fo:bookmark-title>Module:init/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7073072" starting-state="hide">
            <fo:bookmark-title>Module:pre_init_per_suite/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7094304" starting-state="hide">
            <fo:bookmark-title>Module:post_init_per_suite/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7113248" starting-state="hide">
            <fo:bookmark-title>Module:pre_init_per_group/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7125216" starting-state="hide">
            <fo:bookmark-title>Module:post_init_per_group/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7137168" starting-state="hide">
            <fo:bookmark-title>Module:pre_init_per_testcase/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7149728" starting-state="hide">
            <fo:bookmark-title>Module:post_init_per_testcase/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7161712" starting-state="hide">
            <fo:bookmark-title>Module:pre_end_per_testcase/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7175056" starting-state="hide">
            <fo:bookmark-title>Module:post_end_per_testcase/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7187024" starting-state="hide">
            <fo:bookmark-title>Module:pre_end_per_group/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7198992" starting-state="hide">
            <fo:bookmark-title>Module:post_end_per_group/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7210816" starting-state="hide">
            <fo:bookmark-title>Module:pre_end_per_suite/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7220848" starting-state="hide">
            <fo:bookmark-title>Module:post_end_per_suite/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7230880" starting-state="hide">
            <fo:bookmark-title>Module:on_tc_fail/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7247088" starting-state="hide">
            <fo:bookmark-title>Module:on_tc_skip/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7263376" starting-state="hide">
            <fo:bookmark-title>Module:terminate/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7267744" starting-state="hide">
            <fo:bookmark-title>Module:id/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp7283328" starting-state="hide">
          <fo:bookmark-title>ct_property_test</fo:bookmark-title>
          <fo:bookmark internal-destination="idp7292880" starting-state="hide">
            <fo:bookmark-title>init_per_suite/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp7299856" starting-state="hide">
            <fo:bookmark-title>quickcheck/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp7310640" starting-state="hide">
          <fo:bookmark-title>ct_testspec</fo:bookmark-title>
          <fo:bookmark internal-destination="idp7314000" starting-state="hide">
            <fo:bookmark-title>get_tests/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
      </fo:bookmark>
    </fo:bookmark>
  </fo:bookmark-tree>
  <fo:page-sequence font-family="sans-serif" force-page-count="even" master-reference="cover" font-size="10pt">
    <fo:flow flow-name="xsl-region-body">
      <fo:block space-before="130mm" space-before.conditionality="retain" text-align="end">
        <fo:external-graphic src="/root/download/otp_src_20.0/bootstrap/lib/erl_docgen/priv/images/erlang-logo.gif"/>
      </fo:block>
      <fo:block id="cover-page" border-before-style="solid" border-before-width="10pt" border-color="#960003" font-size="2.3em" padding-before="0.5em" text-align="end">Common Test</fo:block>
      <fo:block font-size="0.9em" text-align="end">Copyright © 2003-2017 Ericsson AB. All Rights Reserved.</fo:block>
      <fo:block font-size="0.9em" text-align="end">Common Test 1.15</fo:block>
      <fo:block font-size="0.9em" text-align="end">July 12, 2017</fo:block>
      <fo:block padding-before="2.5em" font-size="1.33em" font-weight="bold" color="#C00" text-align="end"/>
      <fo:block break-before="page" border-before-style="solid" border-before-width="1pt" border-color="#960003" font-weight="bold" padding-before="0.5em" space-before="200mm" space-before.conditionality="retain">Copyright © 2003-2017 Ericsson AB. All Rights Reserved.</fo:block>
      <fo:block font-size="0.9em">
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
 
          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
    
    Ericsson AB. All Rights Reserved..
        </fo:block>
      <fo:block font-size="0.9em" font-weight="bold" space-before="2em">July 12, 2017</fo:block>
    </fo:flow>
  </fo:page-sequence>
  <fo:page-sequence font-family="serif" master-reference="document" initial-page-number="1" font-size="10pt">
    <fo:static-content flow-name="left-header">
      <fo:block text-align="start" border-after-style="solid" border-after-width="2pt" border-color="#960003" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">
        <fo:retrieve-marker retrieve-boundary="page-sequence" retrieve-class-name="chapter-title" retrieve-position="first-including-carryover"/>
      </fo:block>
    </fo:static-content>
    <fo:static-content flow-name="right-header">
      <fo:block text-align="end" border-after-style="solid" border-after-width="2pt" border-color="#960003" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">
        <fo:retrieve-marker retrieve-boundary="page-sequence" retrieve-class-name="chapter-title" retrieve-position="first-including-carryover"/>
      </fo:block>
    </fo:static-content>
    <fo:static-content flow-name="left-footer">
      <fo:block text-align="start" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold"><fo:page-number/> | Ericsson AB. All Rights Reserved.:
            Common Test</fo:block>
    </fo:static-content>
    <fo:static-content flow-name="right-footer">
      <fo:block text-align="end" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">Ericsson AB. All Rights Reserved.:
            Common Test | <fo:page-number/></fo:block>
    </fo:static-content>
    <fo:flow flow-name="xsl-region-body"><fo:block/><fo:block id="idp481360" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">1   
      Common Test User's Guide</fo:block>
  <fo:block id="idp863952" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.1  Introduction</fo:marker>1.1  Introduction</fo:block><fo:block id="idp1403744" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.1 
      Scope</fo:block>
    
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Common Test</fo:inline> is a portable application for automated 
      testing. It is suitable for:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
         <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Black-box testing of target systems of any type (that
           is, not necessarily implemented in Erlang). This is performed
           through standard O&amp;M interfaces (such as SNMP, HTTP, CORBA,
           and Telnet) and, if necessary, through user-specific interfaces
           (often called test ports).</fo:block></fo:block></fo:list-item-body></fo:list-item>
         <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">White-box testing of Erlang/OTP programs. This is easily
           done by calling the target API functions directly from the test
           case functions.</fo:block></fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Common Test</fo:inline> also integrates use of the OTP
      <fo:inline font-style="italic">cover</fo:inline> tool in application 
      Tools for code coverage analysis of Erlang/OTP programs.</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Common Test</fo:inline> executes test suite programs automatically,
      without operator interaction. Test progress and results are
      printed to logs in HTML format, easily browsed with a standard
      web browser. <fo:inline font-family="monospace">Common Test</fo:inline> also sends notifications about progress
      and results through an OTP event manager to event handlers plugged
      in to the system. This way, users can integrate their own
      programs for, for example, logging, database storing, or supervision with
      <fo:inline font-family="monospace">Common Test</fo:inline>.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Common Test</fo:inline> provides libraries with useful support 
      functions to fill various testing needs and requirements. 
      There is, for example, support for flexible test declarations 
      through test specifications. There is also support 
      for central configuration and control of multiple 
      independent test sessions (to different target systems)
      running in parallel.</fo:block>

  <fo:block id="idp593088" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.2 
      Prerequisites</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is assumed that the reader is familiar with the Erlang
      programming language.</fo:block>
  <fo:block id="idp262016" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.2  Common Test Basics</fo:marker>1.2  Common Test Basics</fo:block><fo:block id="idp261344" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.1 
      General</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Common Test</fo:inline> framework is a tool that supports
      implementation and automated execution of test cases to any
      types of target systems. <fo:inline font-family="monospace">Common Test</fo:inline> is the main tool being used 
      in all testing- and verification activities that are part of Erlang/OTP 
      system development and maintenance.
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Test cases can be executed individually or in batches. <fo:inline font-family="monospace">Common Test</fo:inline>
      also features a distributed testing mode with central control and logging.
      With this feature, multiple systems can be tested independently in
      one common session. This is useful, for example, when running automated 
      large-scale regression tests.
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The System Under Test (SUT) can consist of one or more target
      nodes. <fo:inline font-family="monospace">Common Test</fo:inline> contains a generic test server that, 
      together with other test utilities, is used to perform test case execution. 
      The tests can be started from a GUI, from the OS shell, or from an
      Erlang shell. <fo:inline font-weight="bold">Test suites</fo:inline> are files (Erlang
      modules) that contain the <fo:inline font-weight="bold">test cases</fo:inline> (Erlang functions)
      to be executed. <fo:inline font-weight="bold">Support modules</fo:inline> provide functions
      that the test cases use to do the tests.
    </fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In a black-box testing scenario, <fo:inline font-family="monospace">Common Test</fo:inline>-based test programs connect to
      the target system(s) through standard O&amp;M and CLI protocols. <fo:inline font-family="monospace">Common Test</fo:inline>
      provides implementations of, and wrapper interfaces to, some of these
      protocols (most of which exist as standalone components and
      applications in OTP). The wrappers simplify configuration and add
      verbosity for logging purposes. <fo:inline font-family="monospace">Common Test</fo:inline> is continously extended with
      useful support modules. However, notice that it is
      a straightforward task to use any Erlang/OTP component
      for testing purposes with <fo:inline font-family="monospace">Common Test</fo:inline>, without needing a <fo:inline font-family="monospace">Common Test</fo:inline> 
      wrapper for it. It is as simple as calling Erlang functions. A number of 
      target-independent interfaces are supported in <fo:inline font-family="monospace">Common Test</fo:inline>, such as
      Generic Telnet and FTP. These can be specialized or used
      directly for controlling instruments, traffic load generators, and so on.
    </fo:block> 
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Common Test</fo:inline> is also a very useful tool for white-box testing Erlang
      code (for example, module testing), as the test programs can call exported Erlang
      functions directly. There is very little overhead required for
      implementing basic test suites and executing simple tests. For black-box
      testing Erlang software, Erlang RPC and standard O&amp;M interfaces
      can be used for example.
    </fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A test case can handle several connections to one or
      more target systems, instruments, and traffic generators in
      parallel to perform the necessary actions for a test. 
      The handling of many connections in parallel is one of
      the major strengths of <fo:inline font-family="monospace">Common Test</fo:inline>, thanks to the efficient
      support for concurrency in the Erlang runtime system, which <fo:inline font-family="monospace">Common Test</fo:inline> 
      users can take great advantage of.
    </fo:block>
  <fo:block id="idp504256" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.2 
      Test Suite Organisation</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Test suites are organized in test directories and each test suite
      can have a separate data directory. Typically, these files and directories
      are version-controlled similar to other forms of source code (possibly by
      a version control system like GIT or Subversion). However, <fo:inline font-family="monospace">Common Test</fo:inline> 
      does not itself put any requirements on (or has any awareness of) 
      possible file and directory versions.
    </fo:block>
  <fo:block id="idp538720" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.3 
      Support Libraries</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Support libraries contain functions that are useful for all test suites,
      or for test suites in a specific functional area or subsystem.
      In addition to the general support libraries provided by the
      <fo:inline font-family="monospace">Common Test</fo:inline> framework, and the various libraries and applications provided by
      Erlang/OTP, there can also be a need for customized (user specific) 
      support libraries. 
    </fo:block>
  <fo:block id="idp1392080" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.4 
      Suites and Test Cases</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Testing is performed by running test suites (sets of test cases) or 
      individual test cases. A test suite is implemented as an Erlang module named 
      <fo:inline font-family="monospace">&lt;suite_name&gt;_SUITE.erl</fo:inline> which contains a number of test cases.
      A test case is an Erlang function that tests one or more things. 
      The test case is the smallest unit that the <fo:inline font-family="monospace">Common Test</fo:inline> test server deals with.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Subsets of test cases, called test case groups, can also be defined. A test case 
      group can have execution properties associated with it. Execution properties 
      specify if the test cases in the group are to be executed in
      random order, in parallel, or in sequence, and if the execution of the group 
      is to be repeated. Test case groups can also be nested (that is, a group can,
      besides test cases, contain subgroups).
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Besides test cases and groups, the test suite can also contain configuration 
      functions. These functions are meant to be used for setting up (and verifying)
      environment and state in the SUT (and/or the <fo:inline font-family="monospace">Common Test</fo:inline> host node), 
      required for the tests to execute correctly. Examples of operations are: 
      Opening a connection to the SUT, initializing a database, running an installation 
      script, and so on. Configuration can be performed per suite, per test case group,
      and per individual test case.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The test suite module must conform to a
      <fo:inline font-style="italic">callback interface</fo:inline>
      specified by the <fo:inline font-family="monospace">Common Test</fo:inline> test server. For details, see section
      <fo:inline font-style="italic">Writing Test Suites</fo:inline>.
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      A test case is considered successful if it returns to the caller, no matter 
      what the returned value is. However, a few return values have special meaning
      as follows:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{skip,Reason}</fo:inline> indicates that the test case is skipped.</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{comment,Comment}</fo:inline> prints a comment in the log for the test case.</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{save_config,Config}</fo:inline> makes the <fo:inline font-family="monospace">Common Test</fo:inline> test server pass 
       <fo:inline font-family="monospace">Config</fo:inline> to the next test case.</fo:block></fo:list-item-body></fo:list-item>
     </fo:list-block>
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      A test case failure is specified as a runtime error (a crash), no matter what 
      the reason for termination is. If you use Erlang pattern matching effectively,
      you can take advantage of this property. The result is concise and 
      readable test case functions that look much more like scripts than actual programs. 
      A simple example:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 session(_Config) -&gt;
     {started,ServerId} = my_server:start(),
     {clients,[]} = my_server:get_clients(ServerId),
     MyId = self(),
     connected = my_server:connect(ServerId, MyId),
     {clients,[MyId]} = my_server:get_clients(ServerId),
     disconnected = my_server:disconnect(ServerId, MyId),
     {clients,[]} = my_server:get_clients(ServerId),
     stopped = my_server:stop(ServerId).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      As a test suite runs, all information (including output to <fo:inline font-family="monospace">stdout</fo:inline>) is 
      recorded in many different log files. A minimum of information is displayed 
      in the user console (only start and stop information, plus a note 
      for each failed test case).
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The result from each test case is recorded in a dedicated HTML log file, created 
      for the particular test run. An overview page displays each test case represented 
      by a table row showing total execution time, if the case was successful,
      failed, or skipped, plus an optional user comment. For a failed test case, the 
      reason for termination is also printed in the comment field. The overview page
      has a link to each test case log file, providing simple navigation with any standard
      HTML browser.
    </fo:block>
    <fo:block id="idp983792" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.5 
      External Interfaces</fo:block>

    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The <fo:inline font-family="monospace">Common Test</fo:inline> test server requires that the test suite defines and exports the 
      following mandatory or optional callback functions:
    </fo:block>
    
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">all()</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of all test cases and groups in the suite. (Mandatory)</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">suite()</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Information function used to return properties for the suite. (Optional)</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">groups()</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For declaring test case groups. (Optional)</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">init_per_suite(Config)</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Suite level configuration function, executed before the first 
	test case. (Optional)</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">end_per_suite(Config)</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Suite level configuration function, executed after the last 
	test case. (Optional)</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">group(GroupName)</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Information function used to return properties for a test case group. (Optional)</fo:block></fo:block></fo:block-container>	
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">init_per_group(GroupName, Config)</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Configuration function for a group, executed before the first 
	test case. (Optional)</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">end_per_group(GroupName, Config)</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Configuration function for a group, executed after the last 
	test case. (Optional)</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">init_per_testcase(TestCase, Config)</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Configuration function for a testcase, executed before each 
	test case. (Optional)</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">end_per_testcase(TestCase, Config)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Configuration function for a testcase, executed after each 
      test case. (Optional)</fo:block></fo:block></fo:block-container> 
    </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	For each test case, the <fo:inline font-family="monospace">Common Test</fo:inline> test server expects the
	following functions:
      </fo:block>
      <fo:block space-after="0.25em" space-before="0.25em">
	<fo:block keep-with-next.within-page="always">Testcasename()</fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Information function that returns a list of test case properties. (Optional)</fo:block></fo:block></fo:block-container>
	<fo:block keep-with-next.within-page="always">Testcasename(Config)</fo:block> 
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The test case function.</fo:block></fo:block></fo:block-container> 
      </fo:block>
    <fo:block id="idp22384" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.3  Getting Started</fo:marker>1.3  Getting Started</fo:block><fo:block id="idp502176" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.1 
      Introduction for Newcomers</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The purpose of this section is to let the newcomer get started in
      quickly writing and executing some first simple tests with a 
      "learning by example" approach. Most explanations are left for later sections. 
      If you are not much into "learning by example" and prefer more technical
      details, go ahead and skip to the next section.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      This section demonstrates how simple it is to write a basic 
      (yet for many module testing purposes, often sufficiently complex) 
      test suite and execute its test cases. This is not necessarily
      obvious when you read the remaining sections in this User's Guide.
    </fo:block>
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      To understand what is discussed and examplified here, we recommended 
      you to first read section
      <fo:inline font-style="italic">Common Test Basics</fo:inline>.
      </fo:block>
    </fo:block>
    <fo:block id="idp804112" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.2 
      Test Case Execution</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Execution of test cases is handled as follows:</fo:block>
    
    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="tc_execution.gif"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        3.1:
         
        
	Successful and Unsuccessful Test Case Execution
      </fo:block>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For each test case that <fo:inline font-family="monospace">Common Test</fo:inline> is ordered to execute, it spawns a
      dedicated process on which the test case function starts
      running. (In parallel to the test case process, an idle waiting timer
      process is started, which is linked to the test case process. If the timer
      process runs out of waiting time, it sends an exit signal to terminate
      the test case process. This is called a <fo:inline font-weight="bold">timetrap</fo:inline>).
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In scenario 1, the test case process terminates normally after 
    <fo:inline font-family="monospace">case A</fo:inline> has finished executing its test code without detecting 
    any errors. The test case function returns a value and <fo:inline font-family="monospace">Common Test</fo:inline> 
    logs the test case as successful.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In scenario 2, an error is detected during test <fo:inline font-family="monospace">case B</fo:inline> execution.
      This causes the test <fo:inline font-family="monospace">case B</fo:inline> function to generate an exception
      and, as a result, the test case process exits with reason other than normal. 
      <fo:inline font-family="monospace">Common Test</fo:inline> logs this as an unsuccessful (Failed) test case.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As you can understand from the illustration, <fo:inline font-family="monospace">Common Test</fo:inline> requires
      a test case to generate a runtime error to indicate failure (for example,
      by causing a bad match error or by calling <fo:inline font-family="monospace">exit/1</fo:inline>, preferably
      through the help function 
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:fail/1,2</fo:inline></fo:inline>). A successful 
      execution is indicated by a normal return from the test case function.
    </fo:block>
    <fo:block id="idp1316080" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.3 
      A Simple Test Suite</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As shown in section 
    <fo:inline font-style="italic">Common Test Basics</fo:inline>,
    the test suite module implements
      <fo:inline font-style="italic">callback functions</fo:inline>
      (mandatory or optional) for various purposes, for example:
    </fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Init/end configuration function for the test suite</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Init/end configuration function for a test case</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Init/end configuration function for a test case group</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Test cases</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"> 
     The configuration functions are optional. The following example is a test suite 
     without configuration functions, including one simple test case, to 
     check that module <fo:inline font-family="monospace">mymod</fo:inline> exists (that is, can be successfully loaded by the 
     code server):
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 -module(my1st_SUITE).
 -compile(export_all).

 all() -&gt;
     [mod_exists].

 mod_exists(_) -&gt;
     {module,mymod} = code:load_file(mymod).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      If the operation fails, a bad match error occurs that terminates the test case.
    </fo:block>
    <fo:block id="idp727648" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.4 
      A Test Suite with Configuration Functions</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      If you need to perform configuration operations to run your test, you can
      implement configuration functions in your suite. The result from a
      configuration function is configuration data, or <fo:inline font-family="monospace">Config</fo:inline>.
      This is a list of key-value tuples that get passed from the configuration
      function to the test cases (possibly through configuration functions on
      "lower level"). The data flow looks as follows:
    </fo:block>

    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="config.gif"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        3.2:
         
        
	Configuration Data Flow in a Suite
      </fo:block>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The following example shows a test suite that uses configuration functions
      to open and close a log file for the test cases (an operation that is
      unnecessary and irrelevant to perform by each test case):
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 -module(check_log_SUITE).
 -export([all/0, init_per_suite/1, end_per_suite/1]).
 -export([check_restart_result/1, check_no_errors/1]).

 -define(value(Key,Config), proplists:get_value(Key,Config)).

 all() -&gt; [check_restart_result, check_no_errors].

 init_per_suite(InitConfigData) -&gt;
     [{logref,open_log()} | InitConfigData].

 end_per_suite(ConfigData) -&gt;
     close_log(?value(logref, ConfigData)).

 check_restart_result(ConfigData) -&gt;
     TestData = read_log(restart, ?value(logref, ConfigData)),
     {match,_Line} = search_for("restart successful", TestData).

 check_no_errors(ConfigData) -&gt;
     TestData = read_log(all, ?value(logref, ConfigData)),
     case search_for("error", TestData) of
	 {match,Line} -&gt; ct:fail({error_found_in_log,Line});
	 nomatch -&gt; ok
     end.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The test cases verify, by parsing a log file, that our SUT has performed 
      a successful restart and that no unexpected errors are printed.
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To execute the test cases in the recent test suite, type the 
    following on the UNIX/Linux command line (assuming that the suite module
      is in the current working directory):
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 $ ct_run -dir .</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">or:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 $ ct_run -suite check_log_SUITE</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To use the Erlang shell to run our test, you can evaluate the following call:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 1&gt; ct:run_test([{dir, "."}]).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">or:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 1&gt; ct:run_test([{suite, "check_log_SUITE"}]).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The result from running the test is printed in log files in HTML format
      (stored in unique log directories on a different level). The following 
      illustration shows the log file structure:
    </fo:block>

    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="html_logs.gif"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        3.3:
         
        
	HTML Log File Structure
      </fo:block>
    </fo:block>
  <fo:block id="idp626656" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.5 
      Questions and Answers</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here follows some questions that you might have after reading this section 
    with corresponding tips and links to the answers:
    </fo:block>
      
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Question:</fo:inline> 
	"How and where can I specify variable data for my tests that must not 
	be hard-coded in the test suites (such as hostnames, addresses, and
	  user login data)?"</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Answer:</fo:inline> 
	  See section <fo:inline font-style="italic">External Configuration Data</fo:inline>.</fo:block>
	</fo:block></fo:list-item-body></fo:list-item>

	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Question:</fo:inline> "Is there a way to declare different tests and run them
	  in one session without having to write my own scripts? Also, can such
	  declarations be used for regression testing?"</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Answer:</fo:inline> See section
	  <fo:inline font-style="italic">Test Specifications</fo:inline>
	  in section Running Tests and Analyzing Results.
	  </fo:block>
	</fo:block></fo:list-item-body></fo:list-item>

	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Question:</fo:inline> "Can test cases and/or test runs be automatically repeated?"</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Answer:</fo:inline> Learn more about
	  <fo:inline font-style="italic">Test Case Groups</fo:inline>
	  and read about start flags/options in section
	  <fo:inline font-style="italic">Running Tests</fo:inline> and in
	  the Reference Manual.</fo:block>
	</fo:block></fo:list-item-body></fo:list-item>

	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Question:</fo:inline> "Does <fo:inline font-family="monospace">Common Test</fo:inline> execute my test cases in sequence or in parallel?"</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Answer:</fo:inline> See
	  <fo:inline font-style="italic">Test Case Groups</fo:inline>
	in section Writing Test Suites.</fo:block>
	</fo:block></fo:list-item-body></fo:list-item>

	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Question:</fo:inline> "What is the syntax for timetraps (mentioned earlier), and how do I set them?"</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Answer:</fo:inline> This is explained in the
	  <fo:inline font-style="italic">Timetrap Time-Outs</fo:inline>
	  part of section Writing Test Suites.</fo:block>
	</fo:block></fo:list-item-body></fo:list-item>

	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Question:</fo:inline> "What functions are available for logging and printing?"</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Answer:</fo:inline> See
	  <fo:inline font-style="italic">Logging</fo:inline>
	in section Writing Test Suites.</fo:block>
	</fo:block></fo:list-item-body></fo:list-item>

	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Question:</fo:inline> "I need data files for my tests. Where do I store them preferably?"</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Answer:</fo:inline> See
	  <fo:inline font-style="italic">Data and Private
	  Directories</fo:inline>.</fo:block>
	</fo:block></fo:list-item-body></fo:list-item>

	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Question:</fo:inline> "Can I start with a test suite example, please?"</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Answer:</fo:inline> <fo:inline font-style="italic">Welcome!</fo:inline></fo:block>
	</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">You probably want to get started on your own first test suites now, while
      at the same time digging deeper into the <fo:inline font-family="monospace">Common Test</fo:inline> User's Guide and Reference Manual.
      There are much more to learn about the things that have been introduced
      in this section. There are also many other useful features to learn, 
      so please continue to the other sections and have fun.
      </fo:block>
    <fo:block id="idp929968" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.4  Installation</fo:marker>1.4  Installation</fo:block><fo:block id="idp2233920" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.1 
      General Information</fo:block>
    
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The two main interfaces for running tests with <fo:inline font-family="monospace">Common Test</fo:inline>
      are an executable program named 
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_run</fo:inline></fo:inline> and the
      Erlang module <fo:inline font-style="italic"><fo:inline font-family="monospace">ct</fo:inline></fo:inline>. 
      <fo:inline font-family="monospace">ct_run</fo:inline> is compiled for the underlying operating system (for example,
      Unix/Linux or Windows) during the build of the Erlang/OTP system, 
      and is installed automatically with other executable programs in
      the top level <fo:inline font-family="monospace">bin</fo:inline> directory of Erlang/OTP.
      The <fo:inline font-family="monospace">ct</fo:inline> interface functions can be called from the Erlang shell,
      or from any Erlang function, on any supported platform.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Common Test</fo:inline> application is installed with the Erlang/OTP
      system. No extra installation step is required to start using
      <fo:inline font-family="monospace">Common Test</fo:inline> through the <fo:inline font-family="monospace">ct_run</fo:inline> executable program, 
      and/or the interface functions in the <fo:inline font-family="monospace">ct</fo:inline> module.</fo:block>
    <fo:block id="idp1345904" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.5  Writing Test Suites</fo:marker>1.5  Writing Test Suites</fo:block><fo:block id="idp1349136" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.1 
      Support for Test Suite Authors</fo:block>
    
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-style="italic"><fo:inline font-family="monospace">ct</fo:inline></fo:inline> module provides the main 
    interface for writing test cases. This includes for example, the following:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Functions for printing and logging</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Functions for reading configuration data</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Function for terminating a test case with error reason</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Function for adding comments to the HTML overview page</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details about these functions, see module <fo:inline font-style="italic"><fo:inline font-family="monospace">ct</fo:inline></fo:inline>.</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Common Test</fo:inline> application also includes other modules named 
      <fo:inline font-family="monospace">ct_&lt;component&gt;</fo:inline>, which
      provide various support, mainly simplified use of communication
      protocols such as RPC, SNMP, FTP, Telnet, and others.</fo:block>

  <fo:block id="idp1356896" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.2 
      Test Suites</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A test suite is an ordinary Erlang module that contains test
      cases. It is recommended that the module has a name on the form
      <fo:inline font-family="monospace">*_SUITE.erl</fo:inline>. Otherwise, the directory and auto compilation 
      function in <fo:inline font-family="monospace">Common Test</fo:inline> cannot locate it (at least not by default).
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is also recommended that the <fo:inline font-family="monospace">ct.hrl</fo:inline> header file is included
      in all test suite modules.
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each test suite module must export function 
    <fo:inline font-style="italic"><fo:inline font-family="monospace">all/0</fo:inline></fo:inline>,
      which returns the list of all test case groups and test cases 
      to be executed in that module. 
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The callback functions to be implemented by the test suite are
      all listed in module <fo:inline font-style="italic">common_test
      </fo:inline>. They are also described in more detail later in this User's Guide.
    </fo:block>

  <fo:block id="idp1362800" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.3 
      Init and End per Suite</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each test suite module can contain the optional configuration functions
    <fo:inline font-style="italic"><fo:inline font-family="monospace">init_per_suite/1</fo:inline></fo:inline>
    and <fo:inline font-style="italic"><fo:inline font-family="monospace">end_per_suite/1</fo:inline></fo:inline>. 
    If the init function is defined, so must the end function be.
    </fo:block>    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">init_per_suite</fo:inline> exists, it is called initially before the
    test cases are executed. It typically contains initializations common
    for all test cases in the suite, which are only to be performed once. 
    <fo:inline font-family="monospace">init_per_suite</fo:inline> is recommended for setting up and verifying state 
    and environment on the System Under Test (SUT) or the <fo:inline font-family="monospace">Common Test</fo:inline> 
    host node, or both, so that the test cases in the suite executes correctly. 
    The following are examples of initial configuration operations:
    </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Opening a connection to the SUT</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Initializing a database</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Running an installation script</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">end_per_suite</fo:inline> is called as the final stage of the test suite execution
    (after the last test case has finished). The function is meant to be used 
    for cleaning up after <fo:inline font-family="monospace">init_per_suite</fo:inline>. 
    </fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">init_per_suite</fo:inline> and <fo:inline font-family="monospace">end_per_suite</fo:inline> execute on dedicated
    Erlang processes, just like the test cases do. The result of these functions
    is however not included in the test run statistics of successful, failed, and
    skipped cases.
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The argument to <fo:inline font-family="monospace">init_per_suite</fo:inline> is <fo:inline font-family="monospace">Config</fo:inline>, that is, the
    same key-value list of runtime configuration data that each test case takes
    as input argument. <fo:inline font-family="monospace">init_per_suite</fo:inline> can modify this parameter with 
    information that the test cases need. The possibly modified <fo:inline font-family="monospace">Config</fo:inline>
    list is the return value of the function.
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">init_per_suite</fo:inline> fails, all test cases in the test
    suite are skipped automatically (so called <fo:inline font-weight="bold">auto skipped</fo:inline>), 
    including <fo:inline font-family="monospace">end_per_suite</fo:inline>.
    </fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that if <fo:inline font-family="monospace">init_per_suite</fo:inline> and <fo:inline font-family="monospace">end_per_suite</fo:inline> do not exist
      in the suite, <fo:inline font-family="monospace">Common Test</fo:inline> calls dummy functions (with the same names)
      instead, so that output generated by hook functions can be saved to the log
      files for these dummies. For details, see
      <fo:inline font-style="italic">Common Test Hooks</fo:inline>.
    </fo:block>
  <fo:block id="idp2117936" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.4 
      Init and End per Test Case</fo:block>
  
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each test suite module can contain the optional configuration functions
    <fo:inline font-style="italic"><fo:inline font-family="monospace">init_per_testcase/2</fo:inline></fo:inline>
    and <fo:inline font-style="italic"><fo:inline font-family="monospace">end_per_testcase/2</fo:inline></fo:inline>. 
    If the init function is defined, so must the end function be.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">init_per_testcase</fo:inline> exists, it is called before each
    test case in the suite. It typically contains initialization that
    must be done for each test case (analog to <fo:inline font-family="monospace">init_per_suite</fo:inline> for the 
    suite).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">end_per_testcase/2</fo:inline> is called after each test case has
    finished, enabling cleanup after <fo:inline font-family="monospace">init_per_testcase</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The first argument to these functions is the name of the test
    case. This value can be used with pattern matching in function clauses
    or conditional expressions to choose different initialization and cleanup
    routines for different test cases, or perform the same routine for many,
    or all, test cases.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The second argument is the <fo:inline font-family="monospace">Config</fo:inline> key-value list of runtime
    configuration data, which has the same value as the list returned by
    <fo:inline font-family="monospace">init_per_suite</fo:inline>. <fo:inline font-family="monospace">init_per_testcase/2</fo:inline> can modify this
    parameter or return it "as is". The return value of <fo:inline font-family="monospace">init_per_testcase/2</fo:inline> 
    is passed as parameter <fo:inline font-family="monospace">Config</fo:inline> to the test case itself.</fo:block>
	  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The return value of <fo:inline font-family="monospace">end_per_testcase/2</fo:inline> is ignored by the
    test server, with exception of the 
    <fo:inline font-style="italic"><fo:inline font-family="monospace">save_config</fo:inline></fo:inline>
    and <fo:inline font-family="monospace">fail</fo:inline> tuple.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">end_per_testcase</fo:inline> can check if the test case was successful. 
    (which in turn can determine how cleanup is to be performed). 
    This is done by reading the value tagged with <fo:inline font-family="monospace">tc_status</fo:inline> from 
    <fo:inline font-family="monospace">Config</fo:inline>. The value is one of the following:
    </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ok</fo:inline></fo:block>
       </fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	 <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{failed,Reason}</fo:inline></fo:block>
	 <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">where <fo:inline font-family="monospace">Reason</fo:inline> is <fo:inline font-family="monospace">timetrap_timeout</fo:inline>, information from <fo:inline font-family="monospace">exit/1</fo:inline>, 
       or details of a runtime error</fo:block></fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{skipped,Reason}</fo:inline></fo:block>
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">where <fo:inline font-family="monospace">Reason</fo:inline> is a user-specific term</fo:block></fo:block></fo:list-item-body></fo:list-item>
     </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Function <fo:inline font-family="monospace">end_per_testcase/2</fo:inline> is even called if a
      test case terminates because of a call to 
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:abort_current_testcase/1</fo:inline></fo:inline>,
      or after a timetrap time-out. However, <fo:inline font-family="monospace">end_per_testcase</fo:inline>
      then executes on a different process than the test case
      function. In this situation, <fo:inline font-family="monospace">end_per_testcase</fo:inline> cannot
      change the reason for test case termination by returning <fo:inline font-family="monospace">{fail,Reason}</fo:inline>
      or save data with <fo:inline font-family="monospace">{save_config,Data}</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The test case is skipped in the following two cases:
    </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If <fo:inline font-family="monospace">init_per_testcase</fo:inline> crashes (called <fo:inline font-weight="bold">auto skipped</fo:inline>).</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If <fo:inline font-family="monospace">init_per_testcase</fo:inline> returns a tuple <fo:inline font-family="monospace">{skip,Reason}</fo:inline> 
       (called <fo:inline font-weight="bold">user skipped</fo:inline>).</fo:block></fo:list-item-body></fo:list-item>
     </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The test case can also be marked as failed without executing it
    by returning a tuple <fo:inline font-family="monospace">{fail,Reason}</fo:inline> from <fo:inline font-family="monospace">init_per_testcase</fo:inline>.</fo:block>

    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">init_per_testcase</fo:inline> crashes, or returns <fo:inline font-family="monospace">{skip,Reason}</fo:inline>
    or <fo:inline font-family="monospace">{fail,Reason}</fo:inline>, function <fo:inline font-family="monospace">end_per_testcase</fo:inline> is not called.
    </fo:block></fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If it is determined during execution of <fo:inline font-family="monospace">end_per_testcase</fo:inline> that
    the status of a successful test case is to be changed to failed, 
    <fo:inline font-family="monospace">end_per_testcase</fo:inline> can return the tuple <fo:inline font-family="monospace">{fail,Reason}</fo:inline>
    (where <fo:inline font-family="monospace">Reason</fo:inline> describes why the test case fails).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As <fo:inline font-family="monospace">init_per_testcase</fo:inline> and <fo:inline font-family="monospace">end_per_testcase</fo:inline> execute on the
    same Erlang process as the test case, printouts from these
    configuration functions are included in the test case log file.</fo:block>
  <fo:block id="idp2153968" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.5 
      Test Cases</fo:block>
    
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The smallest unit that the test server is concerned with is a
      test case. Each test case can test many things, for
      example, make several calls to the same interface function with
      different parameters.
    </fo:block>
      
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The author can choose to put many or few tests into each test
      case. Some things to keep in mind follows:
    </fo:block>      
 <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Many small test cases tend to result in extra, and possibly
      duplicated code, as well as slow test execution because of
      large overhead for initializations and cleanups. Avoid duplicated 
      code, for example, by using common help functions. Otherwise,
      the resulting suite becomes difficult to read and understand, and
      expensive to maintain.
    </fo:block></fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Larger test cases make it harder to tell what went wrong if it
      fails. Also, large portions of test code risk being skipped
      when errors occur.</fo:block>
       </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Readability and maintainability suffer 
      when test cases become too large and extensive. It is not certain 
      that the resulting log files reflect very well the  number of tests 
      performed.
    </fo:block></fo:block></fo:list-item-body></fo:list-item>
     </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The test case function takes one argument, <fo:inline font-family="monospace">Config</fo:inline>, which
      contains configuration information such as <fo:inline font-family="monospace">data_dir</fo:inline> and
      <fo:inline font-family="monospace">priv_dir</fo:inline>. (For details about these, see section 
      <fo:inline font-style="italic">Data and Private Directories</fo:inline>.
      The value of <fo:inline font-family="monospace">Config</fo:inline> at the time of the call, is the same 
      as the return value from <fo:inline font-family="monospace">init_per_testcase</fo:inline>, mentioned earlier.
    </fo:block>

    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The test case function argument <fo:inline font-family="monospace">Config</fo:inline> is not to be 
	confused with the information that can be retrieved from the
	configuration files (using <fo:inline font-style="italic"><fo:inline font-family="monospace">
	ct:get_config/1/2</fo:inline></fo:inline>). The test case argument <fo:inline font-family="monospace">Config</fo:inline>
	is to be used for runtime configuration of the test suite and the 
	test cases, while configuration files are to contain data 
	related to the SUT. These two types of configuration data are handled 
	differently.</fo:block></fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As parameter <fo:inline font-family="monospace">Config</fo:inline> is a list of key-value tuples, that is,
    a data type called a property list, it can be handled by the
    <fo:inline font-style="italic"><fo:inline font-family="monospace">proplists</fo:inline></fo:inline> module.
    A value can, for example, be searched for and returned with function 
    <fo:inline font-style="italic"><fo:inline font-family="monospace">proplists:get_value/2</fo:inline></fo:inline>.
    Also, or alternatively, the general <fo:inline font-style="italic"><fo:inline font-family="monospace">lists</fo:inline></fo:inline>
    module contains useful functions. Normally, the only operations 
    performed on <fo:inline font-family="monospace">Config</fo:inline> is insert (adding a tuple to the head of the list) 
    and lookup. <fo:inline font-family="monospace">Common Test</fo:inline> provides a simple macro named <fo:inline font-family="monospace">?config</fo:inline>, 
    which returns a value of an item in <fo:inline font-family="monospace">Config</fo:inline> given the key (exactly like 
    <fo:inline font-family="monospace">proplists:get_value</fo:inline>). Example: <fo:inline font-family="monospace">PrivDir = ?config(priv_dir, Config)</fo:inline>.
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the test case function crashes or exits purposely, it is considered 
    <fo:inline font-weight="bold">failed</fo:inline>. If it returns a value (no matter what value), it is 
    considered successful. An exception to this rule is the return value 
    <fo:inline font-family="monospace">{skip,Reason}</fo:inline>. If this tuple is returned, the test case is considered 
    skipped and is logged as such.</fo:block> 

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the test case returns the tuple <fo:inline font-family="monospace">{comment,Comment}</fo:inline>, the case
    is considered successful and <fo:inline font-family="monospace">Comment</fo:inline> is printed in the overview 
    log file. This is equal to calling 
    <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:comment(Comment)</fo:inline></fo:inline>.
    </fo:block>

  <fo:block id="idp2176064" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.6 
      Test Case Information Function</fo:block>
    
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For each test case function there can be an extra function
	with the same name but without arguments. This is the test case
	information function. It is expected to return a list of tagged 
	tuples that specifies various properties regarding the test case.
      </fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following tags have special meaning:</fo:block>
      <fo:block space-after="0.25em" space-before="0.25em">
	<fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">timetrap</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em">
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	    Sets the maximum time the test case is allowed to execute. If
	    this time is exceeded, the test case fails with
	    reason <fo:inline font-family="monospace">timetrap_timeout</fo:inline>. Notice that <fo:inline font-family="monospace">init_per_testcase</fo:inline> 
	    and <fo:inline font-family="monospace">end_per_testcase</fo:inline> are included in the timetrap time.
	    For details, see section 
	    <fo:inline font-style="italic">Timetrap Time-Outs</fo:inline>.
	  </fo:block>
	</fo:block></fo:block-container>
	<fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">userdata</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em">
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	    Specifies any data related to the test case. This
	    data can be retrieved at any time using the 
	    <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:userdata/3</fo:inline></fo:inline>
	    utility function.
	  </fo:block>
	</fo:block></fo:block-container>
	<fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">silent_connections</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em">
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	    For details, see section 
	    <fo:inline font-style="italic">Silent Connections</fo:inline>.
	  </fo:block>
	</fo:block></fo:block-container>
	<fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">require</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em">
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	    Specifies configuration variables required by the
	    test case. If the required configuration variables are not
	    found in any of the test system configuration files, the test case is
	    skipped.</fo:block> 
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	    A required variable can also be given a default value to 
	    be used if the variable is not found in any configuration file. To specify 
	    a default value, add a tuple on the form 
	    <fo:inline font-family="monospace">{default_config,ConfigVariableName,Value}</fo:inline> to the test case information list 
	    (the position in the list is irrelevant).
	    </fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Examples:</fo:inline></fo:block>
      
	  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 testcase1() -&gt; 
     [{require, ftp},
      {default_config, ftp, [{ftp, "my_ftp_host"},
                             {username, "aladdin"},
                             {password, "sesame"}]}}].</fo:block>

	  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 testcase2() -&gt; 
     [{require, unix_telnet, unix},
      {require, {unix, [telnet, username, password]}},
      {default_config, unix, [{telnet, "my_telnet_host"},
                              {username, "aladdin"},
                              {password, "sesame"}]}}].</fo:block>
	</fo:block></fo:block-container>
      </fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more information about <fo:inline font-family="monospace">require</fo:inline>, see section
	<fo:inline font-style="italic">
	Requiring and Reading Configuration Data</fo:inline>
	in section External Configuration Data and function 
	<fo:inline font-style="italic"><fo:inline font-family="monospace">ct:require/1/2</fo:inline></fo:inline>.</fo:block>

      <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifying a default value for a required variable can result
	  in a test case always getting executed. This might not be a desired behavior.</fo:block>
      </fo:block>  
    
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">timetrap</fo:inline> or <fo:inline font-family="monospace">require</fo:inline>, or both, is not set specifically for
	a particular test case, default values specified by function
	<fo:inline font-style="italic"><fo:inline font-family="monospace">suite/0</fo:inline></fo:inline> 
	are used.
      </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tags other than the earlier mentioned are ignored by the test server.
      </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	An example of a test case information function follows:
      </fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 reboot_node() -&gt;
     [
      {timetrap,{seconds,60}},
      {require,interfaces},
      {userdata,
          [{description,"System Upgrade: RpuAddition Normal RebootNode"},
           {fts,"http://someserver.ericsson.se/test_doc4711.pdf"}]}                  
     ].</fo:block>

  <fo:block id="idp2199568" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.7 
      Test Suite Information Function</fo:block>
    
    

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Function <fo:inline font-style="italic"><fo:inline font-family="monospace">suite/0</fo:inline></fo:inline> 
        can, for example, be used in a test suite module to set a default 
	<fo:inline font-family="monospace">timetrap</fo:inline> value and to <fo:inline font-family="monospace">require</fo:inline> external configuration data. 
	If a test case, or a group information function also specifies any of the information tags, it
	overrides the default values set by <fo:inline font-family="monospace">suite/0</fo:inline>. For details, 
	see 
	<fo:inline font-style="italic">Test Case Information Function</fo:inline> and
	<fo:inline font-style="italic">Test Case Groups</fo:inline>.
      </fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following options can also be specified with the suite information list:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">stylesheet</fo:inline>, 
	  see <fo:inline font-style="italic">HTML Style Sheets</fo:inline></fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">userdata</fo:inline>, 
	  see <fo:inline font-style="italic">Test Case Information Function</fo:inline></fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">silent_connections</fo:inline>, 
	  see <fo:inline font-style="italic">Silent Connections</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>

       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	An example of the suite information function follows:
      </fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 suite() -&gt;
     [
      {timetrap,{minutes,10}},
      {require,global_names},
      {userdata,[{info,"This suite tests database transactions."}]},
      {silent_connections,[telnet]},
      {stylesheet,"db_testing.css"}
     ].</fo:block>    
    
  <fo:block id="idp2346432" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.8 
      Test Case Groups</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A test case group is a set of test cases sharing configuration 
    functions and execution properties. Test case groups are defined by
    function 
    <fo:inline font-style="italic"><fo:inline font-family="monospace">groups/0</fo:inline></fo:inline>
    according to the following syntax:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 groups() -&gt; GroupDefs

 Types:

 GroupDefs = [GroupDef]
 GroupDef = {GroupName,Properties,GroupsAndTestCases}
 GroupName = atom()
 GroupsAndTestCases = [GroupDef | {group,GroupName} | TestCase]
 TestCase = atom()</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">GroupName</fo:inline> is the name of the group and must be unique within
    the test suite module. Groups can be nested, by including a group definition 
    within the <fo:inline font-family="monospace">GroupsAndTestCases</fo:inline> list of another group. 
    <fo:inline font-family="monospace">Properties</fo:inline> is the list of execution 
    properties for the group. The possible values are as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 Properties = [parallel | sequence | Shuffle | {RepeatType,N}]
 Shuffle = shuffle | {shuffle,Seed}
 Seed = {integer(),integer(),integer()}
 RepeatType = repeat | repeat_until_all_ok | repeat_until_all_fail |
              repeat_until_any_ok | repeat_until_any_fail
 N = integer() | forever</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Explanations:</fo:inline></fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
       <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">parallel</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Common Test</fo:inline> executes all test cases in the group in parallel.</fo:block></fo:block></fo:block-container>
       <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sequence</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The cases are executed in a sequence as described in section
    <fo:inline font-style="italic">Sequences</fo:inline> in section
    Dependencies Between Test Cases and Suites.</fo:block></fo:block></fo:block-container>
       <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">shuffle</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The cases in the group are executed in random order.</fo:block></fo:block></fo:block-container>
       <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">repeat</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Orders <fo:inline font-family="monospace">Common Test</fo:inline> to repeat execution of the cases in the 
       group a given number of times, or until any, or all, cases fail or succeed.</fo:block></fo:block></fo:block-container>
     </fo:block>
      
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 groups() -&gt; [{group1, [parallel], [test1a,test1b]},
              {group2, [shuffle,sequence], [test2a,test2b,test2c]}].</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To specify in which order groups are to be executed (also with respect
    to test cases that are not part of any group), add tuples on the form 
    <fo:inline font-family="monospace">{group,GroupName}</fo:inline> to the <fo:inline font-family="monospace">all/0</fo:inline> list.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 all() -&gt; [testcase1, {group,group1}, testcase2, {group,group2}].</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Execution properties with a group tuple in 
    <fo:inline font-family="monospace">all/0</fo:inline>: <fo:inline font-family="monospace">{group,GroupName,Properties}</fo:inline> can also be specified. 
      These properties override those specified in the group definition (see
      <fo:inline font-family="monospace">groups/0</fo:inline> earlier). This way, the same set of tests can be run,
      but with different properties, without having to make copies of the group
      definition in question.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a group contains subgroups, the execution properties for these can
      also be specified in the group tuple:
      <fo:inline font-family="monospace">{group,GroupName,Properties,SubGroups}</fo:inline>
      Where, <fo:inline font-family="monospace">SubGroups</fo:inline> is a list of tuples, <fo:inline font-family="monospace">{GroupName,Properties}</fo:inline> or
      <fo:inline font-family="monospace">{GroupName,Properties,SubGroups}</fo:inline> representing the subgroups.
      Any subgroups defined in <fo:inline font-family="monospace">group/0</fo:inline> for a group, that are not specified
      in the <fo:inline font-family="monospace">SubGroups</fo:inline> list, executes with their predefined
      properties.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 groups() -&gt; {tests1, [], [{tests2, [], [t2a,t2b]},
                           {tests3, [], [t31,t3b]}]}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To execute group <fo:inline font-family="monospace">tests1</fo:inline> twice with different properties for <fo:inline font-family="monospace">tests2</fo:inline>
      each time:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 all() -&gt;
    [{group, tests1, default, [{tests2, [parallel]}]},
     {group, tests1, default, [{tests2, [shuffle,{repeat,10}]}]}].</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is equivalent to the following specification:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 all() -&gt;
    [{group, tests1, default, [{tests2, [parallel]},
                               {tests3, default}]},
     {group, tests1, default, [{tests2, [shuffle,{repeat,10}]},
                               {tests3, default}]}].</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Value <fo:inline font-family="monospace">default</fo:inline> states that the predefined properties
      are to be used.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following example shows how to override properties in a scenario
      with deeply nested groups:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 groups() -&gt;
    [{tests1, [], [{group, tests2}]},
     {tests2, [], [{group, tests3}]},
     {tests3, [{repeat,2}], [t3a,t3b,t3c]}].

 all() -&gt;
    [{group, tests1, default, 
      [{tests2, default,
        [{tests3, [parallel,{repeat,100}]}]}]}].</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The described syntax can also be used in test specifications
      to change group properties at the time of execution,
      without having to edit the test suite. For more information, see
      section <fo:inline font-style="italic">Test
      Specifications</fo:inline> in section Running Tests and Analyzing Results.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As illustrated, properties can be combined. If, for example,
      <fo:inline font-family="monospace">shuffle</fo:inline>, <fo:inline font-family="monospace">repeat_until_any_fail</fo:inline>, and <fo:inline font-family="monospace">sequence</fo:inline>
      are all specified, the test cases in the group are executed
      repeatedly, and in random order, until a test case fails. Then
      execution is immediately stopped and the remaining cases are skipped.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Before execution of a group begins, the configuration function
    <fo:inline font-style="italic"><fo:inline font-family="monospace">init_per_group(GroupName, Config)</fo:inline></fo:inline> 
    is called. The list of tuples returned from this function is passed to the 
    test cases in the usual manner by argument <fo:inline font-family="monospace">Config</fo:inline>. 
    <fo:inline font-family="monospace">init_per_group/2</fo:inline> is meant to be used for initializations common 
    for the test cases in the group. After execution of the group is finished, function
    <fo:inline font-style="italic"><fo:inline font-family="monospace">end_per_group(GroupName, Config)</fo:inline></fo:inline> 
    is called. This function is meant to be used for cleaning up after 
    <fo:inline font-family="monospace">init_per_group/2</fo:inline>. If the init function is defined, so must the end function be.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Whenever a group is executed, if <fo:inline font-family="monospace">init_per_group</fo:inline> and
      <fo:inline font-family="monospace">end_per_group</fo:inline> do not exist in the suite, <fo:inline font-family="monospace">Common Test</fo:inline> calls
      dummy functions (with the same names) instead. Output generated by
      hook functions are saved to the log files for these dummies.
      For more information, see section 
      <fo:inline font-style="italic">Manipulating Tests</fo:inline>
      in section Common Test Hooks.
    </fo:block>

    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">init_per_testcase/2</fo:inline> and <fo:inline font-family="monospace">end_per_testcase/2</fo:inline>
    are always called for each individual test case, no matter if the case 
    belongs to a group or not.</fo:block></fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The properties for a group are always printed in the top of the HTML log 
    for <fo:inline font-family="monospace">init_per_group/2</fo:inline>. The total execution time for a group is
    included at the bottom of the log for <fo:inline font-family="monospace">end_per_group/2</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Test case groups can be nested so sets of groups can be 
    configured with the same <fo:inline font-family="monospace">init_per_group/2</fo:inline> and <fo:inline font-family="monospace">end_per_group/2</fo:inline>
    functions. Nested groups can be defined by including a group definition,
    or a group name reference, in the test case list of another group.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 groups() -&gt; [{group1, [shuffle], [test1a,
                                   {group2, [], [test2a,test2b]},
                                   test1b]},
              {group3, [], [{group,group4},
                            {group,group5}]},
              {group4, [parallel], [test4a,test4b]},
              {group5, [sequence], [test5a,test5b,test5c]}].</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the previous example, if <fo:inline font-family="monospace">all/0</fo:inline> returns group name references
    in the order <fo:inline font-family="monospace">[{group,group1},{group,group3}]</fo:inline>, the order of the 
    configuration functions and test cases becomes the following (notice that
    <fo:inline font-family="monospace">init_per_testcase/2</fo:inline> and <fo:inline font-family="monospace">end_per_testcase/2:</fo:inline> are also
    always called, but not included in this example for simplification):</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 init_per_group(group1, Config) -&gt; Config1  (*)
      test1a(Config1)
      init_per_group(group2, Config1) -&gt; Config2
           test2a(Config2), test2b(Config2)
      end_per_group(group2, Config2)
      test1b(Config1)
 end_per_group(group1, Config1) 
 init_per_group(group3, Config) -&gt; Config3
      init_per_group(group4, Config3) -&gt; Config4
           test4a(Config4), test4b(Config4)  (**)
      end_per_group(group4, Config4)
      init_per_group(group5, Config3) -&gt; Config5
           test5a(Config5), test5b(Config5), test5c(Config5)
      end_per_group(group5, Config5)
 end_per_group(group3, Config3)</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">(*) The order of test case <fo:inline font-family="monospace">test1a</fo:inline>, <fo:inline font-family="monospace">test1b</fo:inline>, and <fo:inline font-family="monospace">group2</fo:inline> is
        undefined, as <fo:inline font-family="monospace">group1</fo:inline> has a shuffle property.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">(**) These cases are not executed in order, but in parallel.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Properties are not inherited from top-level groups to nested 
    subgroups. For instance, in the previous example, the test cases in <fo:inline font-family="monospace">group2</fo:inline> 
    are not executed in random order (which is the property of <fo:inline font-family="monospace">group1</fo:inline>).</fo:block>
  <fo:block id="idp2398624" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.9 
      Parallel Property and Nested Groups</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a group has a parallel property, its test cases are spawned
    simultaneously and get executed in parallel. However, a test case is not 
    allowed to execute in parallel with <fo:inline font-family="monospace">end_per_group/2</fo:inline>, which means
    that the time to execute a parallel group is equal to the
    execution time of the slowest test case in the group. A negative side
    effect of running test cases in parallel is that the HTML summary pages
    are not updated with links to the individual test case logs until function 
    <fo:inline font-family="monospace">end_per_group/2</fo:inline> for the group has finished.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A group nested under a parallel group starts executing in parallel 
    with previous (parallel) test cases (no matter what properties the nested 
    group has). However, as test cases are never executed in parallel with 
    <fo:inline font-family="monospace">init_per_group/2</fo:inline> or <fo:inline font-family="monospace">end_per_group/2</fo:inline> of the same group, it is 
    only after a nested group has finished that remaining parallel cases 
    in the previous group become spawned.</fo:block>
  <fo:block id="idp2403024" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.10 
      Parallel Test Cases and I/O</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A parallel test case has a private I/O server as its group leader. 
      (For a description of the group leader concept, see
      <fo:inline font-style="italic">ERTS</fo:inline>).
      The central I/O server process, which handles the output from 
      regular test cases and configuration functions, does not respond to I/O messages
      during execution of parallel groups. This is important to understand
      to avoid certain traps, like the following:</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a process, <fo:inline font-family="monospace">P</fo:inline>, is spawned during execution of, for example,
      <fo:inline font-family="monospace">init_per_suite/1</fo:inline>, it inherits the group leader of the
      <fo:inline font-family="monospace">init_per_suite</fo:inline> process. This group leader is the central I/O server
      process mentioned earlier. If, at a later time, <fo:inline font-weight="bold">during parallel test case
      execution</fo:inline>, some event triggers process <fo:inline font-family="monospace">P</fo:inline> to call
      <fo:inline font-family="monospace">io:format/1/2</fo:inline>, that call never returns (as the group leader
      is in a non-responsive state) and causes <fo:inline font-family="monospace">P</fo:inline> to hang.
    </fo:block>
  <fo:block id="idp2409360" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.11 
      Repeated Groups</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A test case group can be repeated a certain number of times
    (specified by an integer) or indefinitely (specified by <fo:inline font-family="monospace">forever</fo:inline>).
    The repetition can also be stopped too early if any or all cases
    fail or succeed, that is, if any of the properties <fo:inline font-family="monospace">repeat_until_any_fail</fo:inline>,
    <fo:inline font-family="monospace">repeat_until_any_ok</fo:inline>, <fo:inline font-family="monospace">repeat_until_all_fail</fo:inline>, or 
    <fo:inline font-family="monospace">repeat_until_all_ok</fo:inline> is used. If the basic <fo:inline font-family="monospace">repeat</fo:inline>
    property is used, status of test cases is irrelevant for the repeat 
    operation.</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The status of a subgroup can be returned (<fo:inline font-family="monospace">ok</fo:inline> or
    <fo:inline font-family="monospace">failed</fo:inline>), to affect the execution of the group on the level above. 
    This is accomplished by, in <fo:inline font-family="monospace">end_per_group/2</fo:inline>, looking up the value
    of <fo:inline font-family="monospace">tc_group_properties</fo:inline> in the <fo:inline font-family="monospace">Config</fo:inline> list and checking the
    result of the test cases in the group. If status <fo:inline font-family="monospace">failed</fo:inline> is to be
    returned from the group as a result, <fo:inline font-family="monospace">end_per_group/2</fo:inline> is to return
    the value <fo:inline font-family="monospace">{return_group_result,failed}</fo:inline>. The status of a subgroup
    is taken into account by <fo:inline font-family="monospace">Common Test</fo:inline> when evaluating if execution of a
    group is to be repeated or not (unless the basic <fo:inline font-family="monospace">repeat</fo:inline>
    property is used).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The value of <fo:inline font-family="monospace">tc_group_properties</fo:inline> is a list of status tuples, 
    each with the key <fo:inline font-family="monospace">ok</fo:inline>, <fo:inline font-family="monospace">skipped</fo:inline>, and <fo:inline font-family="monospace">failed</fo:inline>. The
    value of a status tuple is a list with names of test cases 
    that have been executed with the corresponding status as result.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following is an example of how to return the status from a group:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 end_per_group(_Group, Config) -&gt;
     Status = ?config(tc_group_result, Config),
     case proplists:get_value(failed, Status) of
         [] -&gt;                                   % no failed cases 
             {return_group_result,ok};
         _Failed -&gt;                              % one or more failed
             {return_group_result,failed}
     end.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is also possible, in <fo:inline font-family="monospace">end_per_group/2</fo:inline>, to check the status of
    a subgroup (maybe to determine what status the current group is to
    return). This is as simple as illustrated in the previous example, only the
    group name is stored in a tuple <fo:inline font-family="monospace">{group_result,GroupName}</fo:inline>,
    which can be searched for in the status lists.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 end_per_group(group1, Config) -&gt;
     Status = ?config(tc_group_result, Config),
     Failed = proplists:get_value(failed, Status),
     case lists:member({group_result,group2}, Failed) of
           true -&gt;
               {return_group_result,failed};
           false -&gt;                                                    
               {return_group_result,ok}
     end; 
 ...</fo:block>

    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a test case group is repeated, the configuration 
    functions <fo:inline font-family="monospace">init_per_group/2</fo:inline> and <fo:inline font-family="monospace">end_per_group/2</fo:inline> are 
    also always called with each repetition.</fo:block></fo:block>
  <fo:block id="idp2427808" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.12 
      Shuffled Test Case Order</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The order in which test cases in a group are executed is under normal
    circumstances the same as the order specified in the test case list 
    in the group definition. With property <fo:inline font-family="monospace">shuffle</fo:inline> set, however,
    <fo:inline font-family="monospace">Common Test</fo:inline> instead executes the test cases in random order.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">You can provide a seed value (a tuple of three integers) with
    the shuffle property <fo:inline font-family="monospace">{shuffle,Seed}</fo:inline>. This way, the same shuffling
    order can be created every time the group is executed. If no seed value
    is specified, <fo:inline font-family="monospace">Common Test</fo:inline> creates a "random" seed for the shuffling operation 
    (using the return value of <fo:inline font-family="monospace">erlang:timestamp/0</fo:inline>). The seed value is always
    printed to the <fo:inline font-family="monospace">init_per_group/2</fo:inline> log file so that it can be used to
    recreate the same execution order in a subsequent test run.</fo:block>

    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a shuffled test case group is repeated, the seed is not
    reset between turns.</fo:block></fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a subgroup is specified in a group with a <fo:inline font-family="monospace">shuffle</fo:inline> property,
    the execution order of this subgroup in relation to the test cases 
    (and other subgroups) in the group, is random. The order of the
    test cases in the subgroup is however not random (unless the 
    subgroup has a <fo:inline font-family="monospace">shuffle</fo:inline> property).</fo:block>
  <fo:block id="idp2435664" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.13 
      Group Information Function</fo:block>
    
    

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The test case group information function, <fo:inline font-family="monospace">group(GroupName)</fo:inline>,
	serves the same purpose as the suite- and test case information
	functions previously described. However, the scope for
	the group information function, is all test cases and subgroups in the
	group in question (<fo:inline font-family="monospace">GroupName</fo:inline>).</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 group(connection_tests) -&gt;
    [{require,login_data},
     {timetrap,1000}].</fo:block>
	
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The group information properties override those set with the
	suite information function, and can in turn be overridden by test
	case information properties. For a list of valid information properties 
	and more general information, see the
	<fo:inline font-style="italic">Test Case Information Function</fo:inline>.
      </fo:block>
  <fo:block id="idp2440640" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.14 
      Information Functions for Init- and End-Configuration</fo:block>
    
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Information functions can also be used for functions <fo:inline font-family="monospace">init_per_suite</fo:inline>,
	<fo:inline font-family="monospace">end_per_suite</fo:inline>, <fo:inline font-family="monospace">init_per_group</fo:inline>, and <fo:inline font-family="monospace">end_per_group</fo:inline>,
	and they work the same way as with the
	<fo:inline font-style="italic">Test Case Information Function</fo:inline>. 
	This is useful, for example, for setting timetraps and requiring 
	external configuration data relevant only for the configuration 
	function in question (without affecting properties set for groups 
      and test cases in the suite).</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The information function <fo:inline font-family="monospace">init/end_per_suite()</fo:inline> is called for
	<fo:inline font-family="monospace">init/end_per_suite(Config)</fo:inline>, and information function
	<fo:inline font-family="monospace">init/end_per_group(GroupName)</fo:inline> is called for
	<fo:inline font-family="monospace">init/end_per_group(GroupName,Config)</fo:inline>. However, information functions
	cannot be used with <fo:inline font-family="monospace">init/end_per_testcase(TestCase, Config)</fo:inline>,
	as these configuration functions execute on the test case process
	and use the same properties as the test case (that is, the properties
	set by the test case information function, <fo:inline font-family="monospace">TestCase()</fo:inline>). For a list 
	of valid information properties and more general information, see the
	<fo:inline font-style="italic">Test Case Information Function</fo:inline>.
      </fo:block>
  <fo:block id="idp2449632" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.15 
      Data and Private Directories</fo:block>
    
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the data directory, <fo:inline font-family="monospace">data_dir</fo:inline>, the test module has 
      its own files needed for the testing. The name of <fo:inline font-family="monospace">data_dir</fo:inline> 
      is the the name of the test suite followed by <fo:inline font-family="monospace">"_data"</fo:inline>. 
      For example, <fo:inline font-family="monospace">"some_path/foo_SUITE.beam"</fo:inline> has the data directory
      <fo:inline font-family="monospace">"some_path/foo_SUITE_data/"</fo:inline>. Use this directory for portability,
      that is, to avoid hardcoding directory names in your suite. As the data
      directory is stored in the same directory as your test suite, you can
      rely on its existence at runtime, even if the path to your
      test suite directory has changed between test suite implementation and
      execution.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      <fo:inline font-family="monospace">priv_dir</fo:inline> is the private directory for the test cases.
      This directory can be used whenever a test case (or configuration function)
      needs to write something to file. The name of the private directory is
      generated by <fo:inline font-family="monospace">Common Test</fo:inline>, which also creates the directory.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By default, <fo:inline font-family="monospace">Common Test</fo:inline> creates one central private directory
      per test run, shared by all test cases. This is not always suitable.
      Especially if the same test cases are executed multiple times during
      a test run (that is, if they belong to a test case group with property
      <fo:inline font-family="monospace">repeat</fo:inline>) and there is a risk that files in the private directory get
      overwritten. Under these circumstances, <fo:inline font-family="monospace">Common Test</fo:inline> can be 
      configured to create one dedicated private directory per
      test case and execution instead. This is accomplished with
      the flag/option <fo:inline font-family="monospace">create_priv_dir</fo:inline> (to be used with the
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_run</fo:inline></fo:inline> program, the 
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:run_test/1</fo:inline></fo:inline> function, or
      as test specification term). There are three possible values
      for this option as follows:
     </fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">auto_per_run</fo:inline></fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">auto_per_tc</fo:inline></fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">manual_per_tc</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The first value indicates the default <fo:inline font-family="monospace">priv_dir</fo:inline> behavior, that is,
      one private directory created per test run. The two latter
      values tell <fo:inline font-family="monospace">Common Test</fo:inline> to generate a unique test directory name
      per test case and execution. If the auto version is used, <fo:inline font-weight="bold">all</fo:inline>
      private directories are created automatically. This can become very 
      inefficient for test runs with many test cases or repetitions, or both. 
      Therefore, if the manual version is used instead, the test case must tell 
      <fo:inline font-family="monospace">Common Test</fo:inline> to create <fo:inline font-family="monospace">priv_dir</fo:inline> when it needs it.
      It does this by calling the function 
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:make_priv_dir/0</fo:inline></fo:inline>.
      </fo:block>

      <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Do not depend on the current working directory for
	  reading and writing data files, as this is not portable. All 
	  scratch files are to be written in the <fo:inline font-family="monospace">priv_dir</fo:inline> and all 
	  data files are to be located in <fo:inline font-family="monospace">data_dir</fo:inline>. Also, 
	  the <fo:inline font-family="monospace">Common Test</fo:inline> server sets the current working directory to 
	  the test case log directory at the start of every case.
    </fo:block></fo:block>

  <fo:block id="idp2468512" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.16 
      Execution Environment</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each test case is executed by a dedicated Erlang process. The
      process is spawned when the test case starts, and terminated when
      the test case is finished. The configuration functions 
      <fo:inline font-family="monospace">init_per_testcase</fo:inline> and <fo:inline font-family="monospace">end_per_testcase</fo:inline> execute on the 
      same process as the test case.
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The configuration functions <fo:inline font-family="monospace">init_per_suite</fo:inline> and 
      <fo:inline font-family="monospace">end_per_suite</fo:inline> execute, like test cases, on dedicated Erlang
      processes.
    </fo:block>
  <fo:block id="idp2472960" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.17 
      Timetrap Time-Outs</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default time limit for a test case is 30 minutes, unless a
    <fo:inline font-family="monospace">timetrap</fo:inline> is specified either by the suite-, group-,
    or test case information function. The timetrap time-out value defined by
    <fo:inline font-family="monospace">suite/0</fo:inline> is the value that is used for each test case
    in the suite (and for the configuration functions
    <fo:inline font-family="monospace">init_per_suite/1</fo:inline>, <fo:inline font-family="monospace">end_per_suite/1</fo:inline>, <fo:inline font-family="monospace">init_per_group/2</fo:inline>,
    and <fo:inline font-family="monospace">end_per_group/2</fo:inline>). A timetrap value defined by
    <fo:inline font-family="monospace">group(GroupName)</fo:inline> overrides one defined by <fo:inline font-family="monospace">suite()</fo:inline>
    and is used for each test case in group <fo:inline font-family="monospace">GroupName</fo:inline>, and any
    of its subgroups. If a timetrap value is defined by <fo:inline font-family="monospace">group/1</fo:inline>
    for a subgroup, it overrides that of its higher level groups. Timetrap
    values set by individual test cases (by the test case information
    function) override both group- and suite- level timetraps.</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A timetrap can also be set or reset dynamically during the
    execution of a test case, or configuration function. 
    This is done by calling
    <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:timetrap/1</fo:inline></fo:inline>. 
    This function cancels the current timetrap and starts a new one 
    (that stays active until time-out, or end of the current function).</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Timetrap values can be extended with a multiplier value specified at
    startup with option <fo:inline font-family="monospace">multiply_timetraps</fo:inline>. It is also possible
    to let the test server decide to scale up timetrap time-out values
    automatically. That is, if tools such as <fo:inline font-family="monospace">cover</fo:inline> or <fo:inline font-family="monospace">trace</fo:inline> 
    are running during the test. This feature is disabled by default and 
    can be enabled with start option <fo:inline font-family="monospace">scale_timetraps</fo:inline>.</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a test case needs to suspend itself for a time that also gets
    multipled by <fo:inline font-family="monospace">multiply_timetraps</fo:inline> (and possibly also scaled up if
    <fo:inline font-family="monospace">scale_timetraps</fo:inline> is enabled), the function 
    <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:sleep/1</fo:inline></fo:inline>
    can be used (instead of, for example, <fo:inline font-family="monospace">timer:sleep/1</fo:inline>).</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A function (<fo:inline font-family="monospace">fun/0</fo:inline> or <fo:inline font-family="monospace">{Mod,Func,Args}</fo:inline> (MFA) tuple) can be 
    specified as timetrap value in the suite-, group- and test case information 
    function, and as argument to function 
    <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:timetrap/1</fo:inline></fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Examples:</fo:inline></fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{timetrap,{my_test_utils,timetrap,[?MODULE,system_start]}}</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ct:timetrap(fun() -&gt; my_timetrap(TestCaseName, Config) end)</fo:inline></fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The user timetrap function can be used for two things as follows:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>To act as a timetrap. The time-out is triggered when the
      function returns.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>To return a timetrap time value (other than a function).</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Before execution of the timetrap function (which is performed
    on a parallel, dedicated timetrap process), <fo:inline font-family="monospace">Common Test</fo:inline> cancels
    any previously set timer for the test case or configuration function.    
    When the timetrap function returns, the time-out is triggered, <fo:inline font-weight="bold">unless</fo:inline>
    the return value is a valid timetrap time, such as an integer,
    or a <fo:inline font-family="monospace">{SecMinOrHourTag,Time}</fo:inline> tuple (for details, see module
    <fo:inline font-style="italic">common_test</fo:inline>). If a time value 
    is returned, a new timetrap is started to generate a time-out after 
    the specified time.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The user timetrap function can return a time value after a delay.
    The effective timetrap time is then the delay time <fo:inline font-weight="bold">plus</fo:inline> the
    returned time.</fo:block>
  <fo:block id="idp2497072" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.18 
      Logging - Categories and Verbosity Levels</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Common Test</fo:inline> provides the following three main functions for 
    printing strings:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ct:log(Category, Importance, Format, FormatArgs, Opts)</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ct:print(Category, Importance, Format, FormatArgs)</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ct:pal(Category, Importance, Format, FormatArgs)</fo:inline></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-style="italic"><fo:inline font-family="monospace">log/1,2,3,4,5</fo:inline></fo:inline> function 
    prints a string to the test case log file. 
    The <fo:inline font-style="italic"><fo:inline font-family="monospace">print/1,2,3,4</fo:inline></fo:inline> function 
    prints the string to screen.
    The <fo:inline font-style="italic"><fo:inline font-family="monospace">pal/1,2,3,4</fo:inline></fo:inline> function 
    prints the same string both to file and screen. The functions are described 
    in module <fo:inline font-style="italic">ct</fo:inline>.
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The optional <fo:inline font-family="monospace">Category</fo:inline> argument can be used to categorize the
    log printout. Categories can be used for two things as follows:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>To compare the importance of the printout to a specific
      verbosity level.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>To format the printout according to a user-specific HTML
      Style Sheet (CSS).</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Argument <fo:inline font-family="monospace">Importance</fo:inline> specifies a level of importance
    that, compared to a verbosity level (general and/or set per category),
    determines if the printout is to be visible. <fo:inline font-family="monospace">Importance</fo:inline>
    is any integer in the range 0..99. Predefined constants
    exist in the <fo:inline font-family="monospace">ct.hrl</fo:inline> header file. The default importance level,
    <fo:inline font-family="monospace">?STD_IMPORTANCE</fo:inline> (used if argument <fo:inline font-family="monospace">Importance</fo:inline> is not
    provided), is 50. This is also the importance used for standard I/O,
    for example, from printouts made with <fo:inline font-family="monospace">io:format/2</fo:inline>, 
    <fo:inline font-family="monospace">io:put_chars/1</fo:inline>, and so on.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Importance</fo:inline> is compared to a verbosity level set by the
    <fo:inline font-family="monospace">verbosity</fo:inline> start flag/option. The level can be set per
    category or generally, or both. If <fo:inline font-family="monospace">verbosity</fo:inline> is not set by the user,
    a level of 100 (<fo:inline font-family="monospace">?MAX_VERBOSITY</fo:inline> = all printouts visible) is used as
    default value. <fo:inline font-family="monospace">Common Test</fo:inline> performs the following test:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Importance &gt;= (100-VerbosityLevel)</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The constant <fo:inline font-family="monospace">?STD_VERBOSITY</fo:inline> has value 50 (see <fo:inline font-family="monospace">ct.hrl</fo:inline>).
    At this level, all standard I/O gets printed. If a lower verbosity level
    is set, standard I/O printouts are ignored. Verbosity level 0 effectively
    turns all logging off (except from printouts made by <fo:inline font-family="monospace">Common Test</fo:inline>
    itself).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The general verbosity level is not associated with any particular
    category. This level sets the threshold for the standard I/O printouts,
    uncategorized <fo:inline font-family="monospace">ct:log/print/pal</fo:inline> printouts, and
    printouts for categories with undefined verbosity level.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Examples:</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Some printouts during test case execution:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 io:format("1. Standard IO, importance = ~w~n", [?STD_IMPORTANCE]),
 ct:log("2. Uncategorized, importance = ~w", [?STD_IMPORTANCE]),
 ct:log(info, "3. Categorized info, importance = ~w", [?STD_IMPORTANCE]),
 ct:log(info, ?LOW_IMPORTANCE, "4. Categorized info, importance = ~w", [?LOW_IMPORTANCE]),
 ct:log(error, ?HI_IMPORTANCE, "5. Categorized error, importance = ~w", [?HI_IMPORTANCE]),
 ct:log(error, ?MAX_IMPORTANCE, "6. Categorized error, importance = ~w", [?MAX_IMPORTANCE]),</fo:block>

   <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If starting the test with a general verbosity level of 50 (<fo:inline font-family="monospace">?STD_VERBOSITY</fo:inline>):</fo:block>
   <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 $ ct_run -verbosity 50</fo:block>
   <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">the following is printed:</fo:block>
   <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 1. Standard IO, importance = 50
 2. Uncategorized, importance = 50
 3. Categorized info, importance = 50
 5. Categorized error, importance = 75
 6. Categorized error, importance = 99</fo:block>

   <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If starting the test with:</fo:block>
   <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 $ ct_run -verbosity 1 and info 75</fo:block>
   <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">the following is printed:</fo:block>
   <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 3. Categorized info, importance = 50
 4. Categorized info, importance = 25
 6. Categorized error, importance = 99</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that the category argument is not required in order to only specify the
    importance of a printout. Example:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
ct:pal(?LOW_IMPORTANCE, "Info report: ~p", [Info])</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Or perhaps in combination with constants:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-define(INFO, ?LOW_IMPORTANCE).
-define(ERROR, ?HI_IMPORTANCE).

ct:log(?INFO, "Info report: ~p", [Info])
ct:pal(?ERROR, "Error report: ~p", [Error])</fo:block>
 
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The functions <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:set_verbosity/2</fo:inline></fo:inline>
    and <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:get_verbosity/1</fo:inline></fo:inline> may be used
    to modify and read verbosity levels during test execution.</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The arguments <fo:inline font-family="monospace">Format</fo:inline> and <fo:inline font-family="monospace">FormatArgs</fo:inline> in <fo:inline font-family="monospace">ct:log/print/pal</fo:inline> are
    always passed on to the STDLIB function <fo:inline font-family="monospace">io:format/3</fo:inline> (For details,
    see the <fo:inline font-style="italic"><fo:inline font-family="monospace">io</fo:inline></fo:inline> manual page).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ct:pal/4</fo:inline> and <fo:inline font-family="monospace">ct:log/5</fo:inline> add headers to strings being printed to the
    log file. The strings are also wrapped in div tags with a CSS class
    attribute, so that stylesheet formatting can be applied. To disable this feature for
    a printout (i.e. to get a result similar to using <fo:inline font-family="monospace">io:format/2</fo:inline>),
    call <fo:inline font-family="monospace">ct:log/5</fo:inline> with the <fo:inline font-family="monospace">no_css</fo:inline> option.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">How categories can be mapped to CSS tags is documented in section
    <fo:inline font-style="italic">HTML Style Sheets</fo:inline>
    in section Running Tests and Analyzing Results.</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Common Test will escape special HTML characters (&lt;, &gt; and &amp;) in printouts
    to the log file made with <fo:inline font-family="monospace">ct:pal/4</fo:inline> and <fo:inline font-family="monospace">io:format/2</fo:inline>. In order to print
    strings with HTML tags to the log, use the <fo:inline font-family="monospace">ct:log/3,4,5</fo:inline> function. The character
    escaping feature is per default disabled for <fo:inline font-family="monospace">ct:log/3,4,5</fo:inline> but can be enabled with
    the <fo:inline font-family="monospace">esc_chars</fo:inline> option in the <fo:inline font-family="monospace">Opts</fo:inline> list, see <fo:inline font-style="italic">
    <fo:inline font-family="monospace">ct:log/3,4,5</fo:inline></fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the character escaping feature needs to be disabled (typically for backwards
    compatibility reasons), use the <fo:inline font-family="monospace">ct_run</fo:inline> start flag <fo:inline font-family="monospace">-no_esc_chars</fo:inline>, or the
    <fo:inline font-family="monospace">ct:run_test/1</fo:inline> start option <fo:inline font-family="monospace">{esc_chars,Bool}</fo:inline> (this start option is also
    supported in test specifications).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more information about log files, see section
    <fo:inline font-style="italic">Log Files</fo:inline> 
    in section Running Tests and Analyzing Results.</fo:block>
  <fo:block id="idp2544016" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.19 
      Illegal Dependencies</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Even though it is highly efficient to write test suites with
      the <fo:inline font-family="monospace">Common Test</fo:inline> framework, mistakes can be made,
      mainly because of illegal dependencies. Some of the 
      more frequent mistakes from our own experience with running the 
      Erlang/OTP test suites follows:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Depending on current directory, and writing there:</fo:block>
	    
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is a common error in test suites. It is assumed that
	      the current directory is the same as the author used as
	      current directory when the test case was developed. Many test
	      cases even try to write scratch files to this directory. Instead
	      <fo:inline font-family="monospace">data_dir</fo:inline> and <fo:inline font-family="monospace">priv_dir</fo:inline> are to be used to locate 
	      data and for writing scratch files.
	    </fo:block>
	</fo:block></fo:list-item-body></fo:list-item>

	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Depending on execution order:</fo:block>
	
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">During development of test suites, make no assumptions on the 
	    execution order of the test cases or suites. For example, a test 
	    case must not assume that a server it depends on is already 
	    started by a previous test case. Reasons for this follows:
	    </fo:block>
	    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The user/operator can specify the order at will, and maybe
	      a different execution order is sometimes more relevant or 
	      efficient.</fo:block></fo:list-item-body></fo:list-item>
	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If the user specifies a whole directory of test suites 
	      for the test, the execution order of the suites depends on 
	      how the files are listed by the operating system, which varies 
	      between systems.</fo:block></fo:list-item-body></fo:list-item>
	      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If a user wants to run only a subset of a test suite, 
	      there is no way one test case could successfully depend on 
	      another.</fo:block></fo:list-item-body></fo:list-item>
	    </fo:list-block>
	</fo:block></fo:list-item-body></fo:list-item>

	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Depending on Unix:</fo:block>
	    
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Running Unix commands through <fo:inline font-family="monospace">os:cmd</fo:inline> are likely 
	    not to work on non-Unix platforms.
	    </fo:block>
	</fo:block></fo:list-item-body></fo:list-item>

	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Nested test cases:</fo:block>

	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starting a test case from another not only tests the same
	      thing twice, but also makes it harder to follow what is being 
	      tested. Also, if the called test case fails for some
	      reason, so do the caller. This way, one error gives cause to
	      several error reports, which is to be avoided.
	    </fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Functionality common for many test case functions can be 
	       implemented in common help functions. If these functions are 
	       useful for test cases across suites, put the help functions 
	       into common help modules.
	    </fo:block>
	</fo:block></fo:list-item-body></fo:list-item>
	
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Failure to crash or exit when things go wrong:</fo:block>
	    
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Making requests without checking that the return value
	      indicates success can be OK if the test case fails
	      later, but it is never acceptable just to print an error
	      message (into the log file) and return successfully. Such test 
	      cases do harm, as they create a false sense of security when 
	      overviewing the test results.
	    </fo:block>
	</fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Messing up for subsequent test cases:</fo:block>
	
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Test cases are to restore as much of the execution
	      environment as possible, so that subsequent test cases
	      do not crash because of their execution order. 
	      The function 
	      <fo:inline font-style="italic"><fo:inline font-family="monospace">end_per_testcase</fo:inline></fo:inline> 
	      is suitable for this.
	    </fo:block>
	</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp2564784" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.6  Test Structure</fo:marker>1.6  Test Structure</fo:block><fo:block id="idp2567472" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.1 
      General</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A test is performed by running one or more test suites. A test suite
    consists of test cases, configuration functions, and information 
    functions. Test cases can be grouped in so called test case groups. 
    A test suite is an Erlang module and test cases are implemented as 
    Erlang functions. Test suites are stored in test directories.</fo:block>

  <fo:block id="idp2569712" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.2 
      Skipping Test Cases</fo:block>
    
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Certain test cases can be skipped, for example, if you
    know beforehand that a specific test case fails. The reason can be
    functionality that is not yet implemented, a bug that is known but
    not yet fixed, or some functionality that does not work or is not
    applicable on a specific platform.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Test cases can be skipped in the following ways:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Using <fo:inline font-family="monospace">skip_suites</fo:inline> and <fo:inline font-family="monospace">skip_cases</fo:inline>
      terms in 
      <fo:inline font-style="italic">test specifications</fo:inline>.
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Returning <fo:inline font-family="monospace">{skip,Reason}</fo:inline> from function
      <fo:inline font-style="italic"><fo:inline font-family="monospace">init_per_testcase/2</fo:inline></fo:inline> or 
      <fo:inline font-style="italic"><fo:inline font-family="monospace">init_per_suite/1</fo:inline></fo:inline>.</fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Returning <fo:inline font-family="monospace">{skip,Reason}</fo:inline> from the execution clause
      of the test case. The execution clause is called, so the author 
      must ensure that the test case does not run.</fo:block></fo:list-item-body></fo:list-item>

    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a test case is skipped, it is noted as <fo:inline font-family="monospace">SKIPPED</fo:inline>
    in the HTML log.</fo:block>

  <fo:block id="idp2579200" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.3 
      Definition of Terms</fo:block>
    
    
    <fo:block space-after="0.25em" space-before="0.25em">

      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Auto-skipped test case</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a configuration function fails (that is, terminates unexpectedly), 
	the test cases depending on the configuration function are
	skipped automatically by <fo:inline font-family="monospace">Common Test</fo:inline>. The status of the test cases 
	is then "auto-skipped".	Test cases are also "auto-skipped" by
	<fo:inline font-family="monospace">Common Test</fo:inline> if the required configuration data is unavailable at
	runtime.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Configuration function</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A function in a test suite that is meant to be used for
	setting up, cleaning up, and/or verifying the state and 
	environment on the System Under Test (SUT) and/or the <fo:inline font-family="monospace">Common Test</fo:inline> 
	host node, so that a test case (or a set of test cases) can 
	execute correctly.</fo:block>     
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Configuration file</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A file containing data related to a test and/or an SUT,
	for example, protocol server addresses, client
	login details, and hardware interface addresses. That is, any data
	that is to be handled as variable in the suite and not
	be hard-coded.</fo:block>   
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Configuration variable</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A name (an Erlang atom) associated with a data value read from
	a configuration file.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">data_dir</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Data directory for a test suite. This directory contains
	any files used by the test suite, for example, extra Erlang
	modules, binaries, or data files.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Information function</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A function in a test suite that returns a list of properties
	(read by the <fo:inline font-family="monospace">Common Test</fo:inline> server) that describes the conditions 
	for executing the test cases in the suite.</fo:block>
      </fo:block></fo:block-container>
      
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Major log file</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An overview and summary log file for one or more test suites.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Minor log file</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A log file for one particular test case. Also called the 
	test case log file.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">priv_dir</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Private directory for a test suite. This directory is to
	be used when the test suite needs to write to files.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ct_run</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The name of an executable program that can be
	used as an interface for specifying and running
	tests with <fo:inline font-family="monospace">Common Test</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Test case</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A single test included in a test suite. A test case is
	implemented as a function in a test suite module.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Test case group</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A set of test cases sharing configuration functions and 
	execution properties. The execution properties specify if 
	the test cases in the group are to be executed in random order,
	in parallel, or in sequence, and if the execution of the group 
        is be repeated. Test case groups can also be nested. That is, 
	a group can, besides test cases, contain subgroups.</fo:block>
      </fo:block></fo:block-container>
      
      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Test suite</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An Erlang module containing a collection of test cases for
	a specific functional area.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Test directory</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A directory containing one or more test suite modules,
	that is, a group of test suites.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Argument</fo:inline> <fo:inline font-family="monospace">Config</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A list of key-value tuples (that is, a property list) containing
	runtime configuration data passed from the configuration
	functions to the test cases.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">User-skipped test case</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The status of a test case explicitly skipped in any of 
	the ways described in section
	<fo:inline font-style="italic">Skipping Test Cases</fo:inline>.
	</fo:block>
      </fo:block></fo:block-container>


    </fo:block>
    
  <fo:block id="idp2613600" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.7  Examples and Templates</fo:marker>1.7  Examples and Templates</fo:block><fo:block id="idp2616816" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.7.1 
      Test Suite Example</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following example test suite shows some tests of a database server:
    </fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 -module(db_data_type_SUITE).

 -include_lib("common_test/include/ct.hrl").

 %% Test server callbacks
 -export([suite/0, all/0, 
	  init_per_suite/1, end_per_suite/1,
	  init_per_testcase/2, end_per_testcase/2]).

 %% Test cases
 -export([string/1, integer/1]).

 -define(CONNECT_STR, "DSN=sqlserver;UID=alladin;PWD=sesame").

 %%--------------------------------------------------------------------
 %% COMMON TEST CALLBACK FUNCTIONS
 %%--------------------------------------------------------------------

 %%--------------------------------------------------------------------
 %% Function: suite() -&gt; Info
 %%
 %% Info = [tuple()]
 %%   List of key/value pairs.
 %%
 %% Description: Returns list of tuples to set default properties
 %%              for the suite.
 %%--------------------------------------------------------------------
 suite() -&gt; 
     [{timetrap,{minutes,1}}].  

 %%--------------------------------------------------------------------
 %% Function: init_per_suite(Config0) -&gt; Config1
 %%
 %% Config0 = Config1 = [tuple()]
 %%   A list of key/value pairs, holding the test case configuration.
 %%
 %% Description: Initialization before the suite.
 %%--------------------------------------------------------------------
 init_per_suite(Config) -&gt; 
     {ok, Ref} = db:connect(?CONNECT_STR, []),
     TableName = db_lib:unique_table_name(),	
     [{con_ref, Ref },{table_name, TableName}| Config]. 

 %%--------------------------------------------------------------------
 %% Function: end_per_suite(Config) -&gt; term()
 %%
 %% Config = [tuple()]
 %%   A list of key/value pairs, holding the test case configuration.
 %%
 %% Description: Cleanup after the suite.
 %%--------------------------------------------------------------------
 end_per_suite(Config) -&gt;    
     Ref = ?config(con_ref, Config),
     db:disconnect(Ref),
     ok.
 
 %%--------------------------------------------------------------------
 %% Function: init_per_testcase(TestCase, Config0) -&gt; Config1
 %%
 %% TestCase = atom()
 %%   Name of the test case that is about to run.
 %% Config0 = Config1 = [tuple()]
 %%   A list of key/value pairs, holding the test case configuration.
 %%
 %% Description: Initialization before each test case.
 %%--------------------------------------------------------------------
 init_per_testcase(Case, Config) -&gt;
     Ref = ?config(con_ref, Config),   
     TableName = ?config(table_name, Config),
     ok = db:create_table(Ref, TableName, table_type(Case)),
     Config.

 %%--------------------------------------------------------------------
 %% Function: end_per_testcase(TestCase, Config) -&gt; term()
 %%
 %% TestCase = atom()
 %%   Name of the test case that is finished.
 %% Config = [tuple()]
 %%   A list of key/value pairs, holding the test case configuration.
 %%
 %% Description: Cleanup after each test case.
 %%--------------------------------------------------------------------
 end_per_testcase(_Case, Config) -&gt; 
     Ref = ?config(con_ref, Config),   
     TableName = ?config(table_name, Config),
     ok = db:delete_table(Ref, TableName),   
     ok. 

 %%--------------------------------------------------------------------
 %% Function: all() -&gt; GroupsAndTestCases
 %%
 %% GroupsAndTestCases = [{group,GroupName} | TestCase]
 %% GroupName = atom()
 %%   Name of a test case group.
 %% TestCase = atom()
 %%   Name of a test case.
 %%
 %% Description: Returns the list of groups and test cases that
 %%              are to be executed.
 %%--------------------------------------------------------------------
 all() -&gt;
     [string, integer]. 


 %%--------------------------------------------------------------------
 %% TEST CASES
 %%--------------------------------------------------------------------

 string(Config) -&gt; 
     insert_and_lookup(dummy_key, "Dummy string", Config).

 integer(Config) -&gt; 
     insert_and_lookup(dummy_key, 42, Config).


 insert_and_lookup(Key, Value, Config) -&gt;
     Ref = ?config(con_ref, Config),   
     TableName = ?config(table_name, Config),
     ok = db:insert(Ref, TableName, Key, Value),
     [Value] = db:lookup(Ref, TableName, Key),
     ok = db:delete(Ref, TableName, Key),
     [] = db:lookup(Ref, TableName, Key),
     ok.</fo:block>
  <fo:block id="idp2623152" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.7.2 
      Test Suite Templates</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Erlang mode for the Emacs editor includes two <fo:inline font-family="monospace">Common Test</fo:inline> test 
    suite templates, one with extensive information in the function headers, and
    one with minimal information. A test suite template provides a quick start
    for implementing a suite from scratch and gives a good overview
    of the available callback functions. The two templates follows:
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Large Common Test Suite</fo:inline></fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 %%%-------------------------------------------------------------------
 %%% File    : example_SUITE.erl
 %%% Author  : 
 %%% Description : 
 %%%
 %%% Created : 
 %%%-------------------------------------------------------------------
 -module(example_SUITE).

 %% Note: This directive should only be used in test suites.
 -compile(export_all).

 -include_lib("common_test/include/ct.hrl").

 %%--------------------------------------------------------------------
 %% COMMON TEST CALLBACK FUNCTIONS
 %%--------------------------------------------------------------------

 %%--------------------------------------------------------------------
 %% Function: suite() -&gt; Info
 %%
 %% Info = [tuple()]
 %%   List of key/value pairs.
 %%
 %% Description: Returns list of tuples to set default properties
 %%              for the suite.
 %%
 %% Note: The suite/0 function is only meant to be used to return
 %% default data values, not perform any other operations.
 %%--------------------------------------------------------------------
 suite() -&gt;
     [{timetrap,{minutes,10}}].

 %%--------------------------------------------------------------------
 %% Function: init_per_suite(Config0) -&gt;
 %%               Config1 | {skip,Reason} | {skip_and_save,Reason,Config1}
 %%
 %% Config0 = Config1 = [tuple()]
 %%   A list of key/value pairs, holding the test case configuration.
 %% Reason = term()
 %%   The reason for skipping the suite.
 %%
 %% Description: Initialization before the suite.
 %%
 %% Note: This function is free to add any key/value pairs to the Config
 %% variable, but should NOT alter/remove any existing entries.
 %%--------------------------------------------------------------------
 init_per_suite(Config) -&gt;
     Config.

 %%--------------------------------------------------------------------
 %% Function: end_per_suite(Config0) -&gt; term() | {save_config,Config1}
 %%
 %% Config0 = Config1 = [tuple()]
 %%   A list of key/value pairs, holding the test case configuration.
 %%
 %% Description: Cleanup after the suite.
 %%--------------------------------------------------------------------
 end_per_suite(_Config) -&gt;
     ok.

 %%--------------------------------------------------------------------
 %% Function: init_per_group(GroupName, Config0) -&gt;
 %%               Config1 | {skip,Reason} | {skip_and_save,Reason,Config1}
 %%
 %% GroupName = atom()
 %%   Name of the test case group that is about to run.
 %% Config0 = Config1 = [tuple()]
 %%   A list of key/value pairs, holding configuration data for the group.
 %% Reason = term()
 %%   The reason for skipping all test cases and subgroups in the group.
 %%
 %% Description: Initialization before each test case group.
 %%--------------------------------------------------------------------
 init_per_group(_GroupName, Config) -&gt;
     Config.

 %%--------------------------------------------------------------------
 %% Function: end_per_group(GroupName, Config0) -&gt;
 %%               term() | {save_config,Config1}
 %%
 %% GroupName = atom()
 %%   Name of the test case group that is finished.
 %% Config0 = Config1 = [tuple()]
 %%   A list of key/value pairs, holding configuration data for the group.
 %%
 %% Description: Cleanup after each test case group.
 %%--------------------------------------------------------------------
 end_per_group(_GroupName, _Config) -&gt;
     ok.

 %%--------------------------------------------------------------------
 %% Function: init_per_testcase(TestCase, Config0) -&gt;
 %%               Config1 | {skip,Reason} | {skip_and_save,Reason,Config1}
 %%
 %% TestCase = atom()
 %%   Name of the test case that is about to run.
 %% Config0 = Config1 = [tuple()]
 %%   A list of key/value pairs, holding the test case configuration.
 %% Reason = term()
 %%   The reason for skipping the test case.
 %%
 %% Description: Initialization before each test case.
 %%
 %% Note: This function is free to add any key/value pairs to the Config
 %% variable, but should NOT alter/remove any existing entries.
 %%--------------------------------------------------------------------
 init_per_testcase(_TestCase, Config) -&gt;
     Config.

 %%--------------------------------------------------------------------
 %% Function: end_per_testcase(TestCase, Config0) -&gt;
 %%               term() | {save_config,Config1} | {fail,Reason}
 %%
 %% TestCase = atom()
 %%   Name of the test case that is finished.
 %% Config0 = Config1 = [tuple()]
 %%   A list of key/value pairs, holding the test case configuration.
 %% Reason = term()
 %%   The reason for failing the test case.
 %%
 %% Description: Cleanup after each test case.
 %%--------------------------------------------------------------------
 end_per_testcase(_TestCase, _Config) -&gt;
     ok.

 %%--------------------------------------------------------------------
 %% Function: groups() -&gt; [Group]
 %%
 %% Group = {GroupName,Properties,GroupsAndTestCases}
 %% GroupName = atom()
 %%   The name of the group.
 %% Properties = [parallel | sequence | Shuffle | {RepeatType,N}]
 %%   Group properties that may be combined.
 %% GroupsAndTestCases = [Group | {group,GroupName} | TestCase]
 %% TestCase = atom()
 %%   The name of a test case.
 %% Shuffle = shuffle | {shuffle,Seed}
 %%   To get cases executed in random order.
 %% Seed = {integer(),integer(),integer()}
 %% RepeatType = repeat | repeat_until_all_ok | repeat_until_all_fail |
 %%              repeat_until_any_ok | repeat_until_any_fail
 %%   To get execution of cases repeated.
 %% N = integer() | forever
 %%
 %% Description: Returns a list of test case group definitions.
 %%--------------------------------------------------------------------
 groups() -&gt;
     [].

 %%--------------------------------------------------------------------
 %% Function: all() -&gt; GroupsAndTestCases | {skip,Reason}
 %%
 %% GroupsAndTestCases = [{group,GroupName} | TestCase]
 %% GroupName = atom()
 %%   Name of a test case group.
 %% TestCase = atom()
 %%   Name of a test case.
 %% Reason = term()
 %%   The reason for skipping all groups and test cases.
 %%
 %% Description: Returns the list of groups and test cases that
 %%              are to be executed.
 %%--------------------------------------------------------------------
 all() -&gt; 
     [my_test_case].


 %%--------------------------------------------------------------------
 %% TEST CASES
 %%--------------------------------------------------------------------

 %%--------------------------------------------------------------------
 %% Function: TestCase() -&gt; Info
 %%
 %% Info = [tuple()]
 %%   List of key/value pairs.
 %%
 %% Description: Test case info function - returns list of tuples to set
 %%              properties for the test case.
 %%
 %% Note: This function is only meant to be used to return a list of
 %% values, not perform any other operations.
 %%--------------------------------------------------------------------
 my_test_case() -&gt; 
     [].

 %%--------------------------------------------------------------------
 %% Function: TestCase(Config0) -&gt;
 %%               ok | exit() | {skip,Reason} | {comment,Comment} |
 %%               {save_config,Config1} | {skip_and_save,Reason,Config1}
 %%
 %% Config0 = Config1 = [tuple()]
 %%   A list of key/value pairs, holding the test case configuration.
 %% Reason = term()
 %%   The reason for skipping the test case.
 %% Comment = term()
 %%   A comment about the test case that will be printed in the html log.
 %%
 %% Description: Test case function. (The name of it must be specified in
 %%              the all/0 list or in a test case group for the test case
 %%              to be executed).
 %%--------------------------------------------------------------------
 my_test_case(_Config) -&gt; 
     ok.</fo:block>
    <fo:block/>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Small Common Test Suite</fo:inline></fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 %%%-------------------------------------------------------------------
 %%% File    : example_SUITE.erl
 %%% Author  : 
 %%% Description : 
 %%%
 %%% Created : 
 %%%-------------------------------------------------------------------
 -module(example_SUITE).

 -compile(export_all).

 -include_lib("common_test/include/ct.hrl").

 %%--------------------------------------------------------------------
 %% Function: suite() -&gt; Info
 %% Info = [tuple()]
 %%--------------------------------------------------------------------
 suite() -&gt;
     [{timetrap,{seconds,30}}].

 %%--------------------------------------------------------------------
 %% Function: init_per_suite(Config0) -&gt;
 %%               Config1 | {skip,Reason} | {skip_and_save,Reason,Config1}
 %% Config0 = Config1 = [tuple()]
 %% Reason = term()
 %%--------------------------------------------------------------------
 init_per_suite(Config) -&gt;
     Config.

 %%--------------------------------------------------------------------
 %% Function: end_per_suite(Config0) -&gt; term() | {save_config,Config1}
 %% Config0 = Config1 = [tuple()]
 %%--------------------------------------------------------------------
 end_per_suite(_Config) -&gt;
     ok.

 %%--------------------------------------------------------------------
 %% Function: init_per_group(GroupName, Config0) -&gt;
 %%               Config1 | {skip,Reason} | {skip_and_save,Reason,Config1}
 %% GroupName = atom()
 %% Config0 = Config1 = [tuple()]
 %% Reason = term()
 %%--------------------------------------------------------------------
 init_per_group(_GroupName, Config) -&gt;
     Config.

 %%--------------------------------------------------------------------
 %% Function: end_per_group(GroupName, Config0) -&gt;
 %%               term() | {save_config,Config1}
 %% GroupName = atom()
 %% Config0 = Config1 = [tuple()]
 %%--------------------------------------------------------------------
 end_per_group(_GroupName, _Config) -&gt;
     ok.

 %%--------------------------------------------------------------------
 %% Function: init_per_testcase(TestCase, Config0) -&gt;
 %%               Config1 | {skip,Reason} | {skip_and_save,Reason,Config1}
 %% TestCase = atom()
 %% Config0 = Config1 = [tuple()]
 %% Reason = term()
 %%--------------------------------------------------------------------
 init_per_testcase(_TestCase, Config) -&gt;
     Config.

 %%--------------------------------------------------------------------
 %% Function: end_per_testcase(TestCase, Config0) -&gt;
 %%               term() | {save_config,Config1} | {fail,Reason}
 %% TestCase = atom()
 %% Config0 = Config1 = [tuple()]
 %% Reason = term()
 %%--------------------------------------------------------------------
 end_per_testcase(_TestCase, _Config) -&gt;
     ok.

 %%--------------------------------------------------------------------
 %% Function: groups() -&gt; [Group]
 %% Group = {GroupName,Properties,GroupsAndTestCases}
 %% GroupName = atom()
 %% Properties = [parallel | sequence | Shuffle | {RepeatType,N}]
 %% GroupsAndTestCases = [Group | {group,GroupName} | TestCase]
 %% TestCase = atom()
 %% Shuffle = shuffle | {shuffle,{integer(),integer(),integer()}}
 %% RepeatType = repeat | repeat_until_all_ok | repeat_until_all_fail |
 %%              repeat_until_any_ok | repeat_until_any_fail
 %% N = integer() | forever
 %%--------------------------------------------------------------------
 groups() -&gt;
     [].

 %%--------------------------------------------------------------------
 %% Function: all() -&gt; GroupsAndTestCases | {skip,Reason}
 %% GroupsAndTestCases = [{group,GroupName} | TestCase]
 %% GroupName = atom()
 %% TestCase = atom()
 %% Reason = term()
 %%--------------------------------------------------------------------
 all() -&gt; 
     [my_test_case].

 %%--------------------------------------------------------------------
 %% Function: TestCase() -&gt; Info
 %% Info = [tuple()]
 %%--------------------------------------------------------------------
 my_test_case() -&gt; 
     [].

 %%--------------------------------------------------------------------
 %% Function: TestCase(Config0) -&gt;
 %%               ok | exit() | {skip,Reason} | {comment,Comment} |
 %%               {save_config,Config1} | {skip_and_save,Reason,Config1}
 %% Config0 = Config1 = [tuple()]
 %% Reason = term()
 %% Comment = term()
 %%--------------------------------------------------------------------
 my_test_case(_Config) -&gt; 
     ok.</fo:block>
    <fo:block id="idp2644192" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.8  Running Tests and Analyzing Results</fo:marker>1.8  Running Tests and Analyzing Results</fo:block><fo:block id="idp2646880" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.8.1 
      Using the Common Test Framework</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Common Test</fo:inline> framework provides a high-level
    operator interface for testing, providing the following features:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Automatic compilation of test suites (and help modules)</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Creation of extra HTML pages for improved overview.</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Single-command interface for running all available tests</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Handling of configuration files specifying data related to
	  the System Under Test (SUT) (and any other variable data)</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Mode for running multiple independent test sessions in parallel with
	  central control and configuration</fo:block></fo:list-item-body></fo:list-item>	
      </fo:list-block>
  <fo:block id="idp2652032" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.8.2 
      Automatic Compilation of Test Suites and Help Modules</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-family="monospace">Common Test</fo:inline> starts, it automatically attempts to compile any
      suites included in the specified tests. If particular
      suites are specified, only those suites are compiled. If a
      particular test object directory is specified (meaning all suites
      in this directory are to be part of the test), <fo:inline font-family="monospace">Common Test</fo:inline> runs
      function <fo:inline font-family="monospace">make:all/1</fo:inline> in the directory to compile the suites.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If compilation fails for one or more suites, the compilation errors
      are printed to tty and the operator is asked if the test run is to proceed
      without the missing suites, or be aborted. If the operator chooses to proceed, 
      the tests having missing suites are noted in the HTML log. If <fo:inline font-family="monospace">Common Test</fo:inline> is
      unable to prompt the user after compilation failure (if <fo:inline font-family="monospace">Common Test</fo:inline> does not
      control <fo:inline font-family="monospace">stdin</fo:inline>), the test run proceeds automatically without the missing
      suites. This behavior can however be modified with the
      <fo:inline font-family="monospace">ct_run</fo:inline> flag <fo:inline font-family="monospace">-abort_if_missing_suites</fo:inline>, 
      or the <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:run_test/1</fo:inline></fo:inline> option
      <fo:inline font-family="monospace">{abort_if_missing_suites,TrueOrFalse}</fo:inline>. If 
      <fo:inline font-family="monospace">abort_if_missing_suites</fo:inline> is set to <fo:inline font-family="monospace">true</fo:inline>, the test run
      stops immediately if some suites fail to compile.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Any help module (that is, regular Erlang module with name not ending with
      "_SUITE") that resides in the same test object directory as a suite, 
      which is part of the test, is also automatically compiled. A help
      module is not mistaken for a test suite (unless it has a "_SUITE" name).
      All help modules in a particular test object directory
      are compiled, no matter if all or only particular suites in the directory 
      are part of the test.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If test suites or help modules include header files stored in other
      locations than the test directory, these include directories can be specified
      by using flag <fo:inline font-family="monospace">-include</fo:inline> with 
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_run</fo:inline></fo:inline>, 
      or option <fo:inline font-family="monospace">include</fo:inline> with <fo:inline font-family="monospace">ct:run_test/1</fo:inline>.
      Also, an include path can be specified with an OS
      environment variable, <fo:inline font-family="monospace">CT_INCLUDE_PATH</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example (bash):</fo:inline></fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">$ export CT_INCLUDE_PATH=~testuser/common_suite_files/include:~testuser/common_lib_files/include</fo:inline></fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Common Test</fo:inline> passes all include directories (specified either with flag/option
      <fo:inline font-family="monospace">include</fo:inline>, or variable <fo:inline font-family="monospace">CT_INCLUDE_PATH</fo:inline>
      , or both, to the compiler.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Include directories can also be specified in test specifications,
      see <fo:inline font-style="italic">Test Specifications</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the user wants to run all test suites for a test object (or an OTP application)
      by specifying only the top directory (for example, with start flag/option <fo:inline font-family="monospace">dir</fo:inline>),
      <fo:inline font-family="monospace">Common Test</fo:inline> primarily looks for test suite modules in a subdirectory named 
      <fo:inline font-family="monospace">test</fo:inline>. If this subdirectory does not exist, the specified top directory
      is assumed to be the test directory, and test suites are read from
      there instead.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To disable the automatic compilation feature, use flag
      <fo:inline font-family="monospace">-no_auto_compile</fo:inline> with <fo:inline font-family="monospace">ct_run</fo:inline>, or
      option <fo:inline font-family="monospace">{auto_compile,false}</fo:inline> with 
      <fo:inline font-family="monospace">ct:run_test/1</fo:inline>. With automatic compilation
      disabled, the user is responsible for compiling the test suite modules 
      (and any help modules) before the test run. If the modules cannot be loaded
      from the local file system during startup of <fo:inline font-family="monospace">Common Test</fo:inline>, the user must
      preload the modules before starting the test. <fo:inline font-family="monospace">Common Test</fo:inline> only verifies
      that the specified test suites exist (that is, that they are, or can be, loaded).
      This is useful, for example, if the test suites are transferred and loaded as 
      binaries through RPC from a remote node.</fo:block>
  <fo:block id="idp2675248" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.8.3 
      Running Tests from the OS Command Line</fo:block>
  
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_run</fo:inline></fo:inline> program can be used 
       for running tests from the OS command line, for example, as follows:
    </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ct_run -config &lt;configfilenames&gt; -dir &lt;dirs&gt;</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ct_run -config &lt;configfilenames&gt; -suite &lt;suiteswithfullpath&gt;</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ct_run -userconfig &lt;callbackmodulename&gt; &lt;configfilenames&gt; -suite &lt;suiteswithfullpath&gt;</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ct_run -config &lt;configfilenames&gt; -suite &lt;suitewithfullpath&gt;
	      -group &lt;groups&gt; -case &lt;casenames&gt;</fo:inline></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Examples:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 $ ct_run -config $CFGS/sys1.cfg $CFGS/sys2.cfg -dir $SYS1_TEST $SYS2_TEST
 $ ct_run -userconfig ct_config_xml $CFGS/sys1.xml $CFGS/sys2.xml -dir $SYS1_TEST $SYS2_TEST
 $ ct_run -suite $SYS1_TEST/setup_SUITE $SYS2_TEST/config_SUITE
 $ ct_run -suite $SYS1_TEST/setup_SUITE -case start stop
 $ ct_run -suite $SYS1_TEST/setup_SUITE -group installation -case start stop</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The flags <fo:inline font-family="monospace">dir</fo:inline>, <fo:inline font-family="monospace">suite</fo:inline>, and <fo:inline font-family="monospace">group/case</fo:inline> can be combined.
    For example, to run <fo:inline font-family="monospace">x_SUITE</fo:inline> and <fo:inline font-family="monospace">y_SUITE</fo:inline> 
    in directory <fo:inline font-family="monospace">testdir</fo:inline>, as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 $ ct_run -dir ./testdir -suite x_SUITE y_SUITE</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This has the same effect as the following:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 $ ct_run -suite ./testdir/x_SUITE ./testdir/y_SUITE</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details, see 
    <fo:inline font-style="italic">Test Case Group Execution</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following flags can also be used with 
    <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_run</fo:inline></fo:inline>:</fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-help</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Lists all available start flags.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-logdir &lt;dir&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies where the HTML log files are to be written.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-label &lt;name_of_test_run&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Associates the test run with a name that gets printed
	in the overview HTML log files.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-refresh_logs</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Refreshes the top-level HTML index files.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-vts</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts web-based GUI (described later).</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-shell</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts interactive shell mode (described later).</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-step [step_opts]</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Steps through test cases using the Erlang Debugger (described later).</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-spec &lt;testspecs&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Uses test specification as input (described later).</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-allow_user_terms</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allows user-specific terms in a test specification (described later).</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-silent_connections [conn_types]</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">, tells <fo:inline font-family="monospace">Common Test</fo:inline> to suppress printouts for
        specified connections (described later).</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-stylesheet &lt;css_file&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Points out a user HTML style sheet (described later).</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-cover &lt;cover_cfg_file&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To perform code coverage test (see 
	<fo:inline font-style="italic">Code Coverage Analysis</fo:inline>).</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-cover_stop &lt;bool&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To specify if the <fo:inline font-family="monospace">cover</fo:inline> tool is to be stopped 
      after the test is completed (see
	<fo:inline font-style="italic">Code Coverage Analysis</fo:inline>).</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-event_handler &lt;event_handlers&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To install 
        <fo:inline font-style="italic">event handlers</fo:inline>.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-event_handler_init &lt;event_handlers&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To install
        <fo:inline font-style="italic">event handlers</fo:inline> 
      including start arguments.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-ct_hooks &lt;ct_hooks&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To install
        <fo:inline font-style="italic">Common Test Hooks</fo:inline> 
      including start arguments.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-enable_builtin_hooks &lt;bool&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To enable or disable
        <fo:inline font-style="italic">Built-in Common Test Hooks</fo:inline>. 
      Default is <fo:inline font-family="monospace">true</fo:inline>.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-include</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies include directories (described earlier).</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-no_auto_compile</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Disables the automatic test suite compilation feature (described earlier).</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-abort_if_missing_suites</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Aborts the test run if one or more suites fail to compile (described earlier).</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-multiply_timetraps &lt;n&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Extends <fo:inline font-style="italic">timetrap
	  time-out</fo:inline> values.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-scale_timetraps &lt;bool&gt;</fo:inline></fo:block>	  
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Enables automatic <fo:inline font-style="italic">timetrap
	  time-out</fo:inline> scaling.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-repeat &lt;n&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tells <fo:inline font-family="monospace">Common Test</fo:inline> to repeat the tests <fo:inline font-family="monospace">n</fo:inline> times (described later).</fo:block></fo:block></fo:block-container> 

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-duration &lt;time&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tells <fo:inline font-family="monospace">Common Test</fo:inline> to repeat the tests for duration of time (described later).</fo:block></fo:block></fo:block-container> 

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-until &lt;stop_time&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tells <fo:inline font-family="monospace">Common Test</fo:inline> to repeat the tests until <fo:inline font-family="monospace">stop_time</fo:inline> (described later).</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-force_stop [skip_rest]</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On time-out, the test run is aborted when the current test job is finished. If <fo:inline font-family="monospace">skip_rest</fo:inline> 
      is provided, the remaining test cases in the current test job are skipped (described later).</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-decrypt_key &lt;key&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Provides a decryption key for 
      <fo:inline font-style="italic">encrypted configuration files</fo:inline>.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-decrypt_file &lt;key_file&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Points out a file containing a decryption key for 
        <fo:inline font-style="italic">encrypted configuration files</fo:inline>.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-basic_html</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Switches off HTML enhancements that can be incompatible with older browsers.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-logopts &lt;opts&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Enables modification of the logging behavior, see
      <fo:inline font-style="italic">Log options</fo:inline>.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-verbosity &lt;levels&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets <fo:inline font-style="italic">verbosity levels
      for printouts</fo:inline>.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-no_esc_chars</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Disables automatic escaping of special HTML characters.
      See the <fo:inline font-style="italic">Logging chapter</fo:inline>.</fo:block></fo:block></fo:block-container>
    </fo:block>

    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Directories passed to <fo:inline font-family="monospace">Common Test</fo:inline> can have either relative or absolute paths.</fo:block></fo:block>

    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Any start flags to the Erlang runtime system (application ERTS) can also be passed as
             parameters to <fo:inline font-family="monospace">ct_run</fo:inline>. It is, for example, useful to be able to
	     pass directories to be added to the Erlang code server search path
	     with flag <fo:inline font-family="monospace">-pa</fo:inline> or <fo:inline font-family="monospace">-pz</fo:inline>. If you have common help- or library 
	     modules for test suites (separately compiled), stored in other directories 
	     than the test suite directories, these <fo:inline font-family="monospace">help/lib</fo:inline> directories are preferably
	     added to the code path this way.</fo:block>
	     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">$ ct_run -dir ./chat_server -logdir ./chat_server/testlogs -pa $PWD/chat_server/ebin</fo:inline></fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The absolute path of directory <fo:inline font-family="monospace">chat_server/ebin</fo:inline>
	     is here passed to the code server. This is essential because relative
	     paths are stored by the code server as relative, and <fo:inline font-family="monospace">Common Test</fo:inline> changes 
	     the current working directory of ERTS during the test run.</fo:block>
    </fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">ct_run</fo:inline> program sets the exit status before shutting down. The following values
      are defined:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">0</fo:inline> indicates a successful testrun, that is, without failed or auto-skipped test cases.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">1</fo:inline> indicates that one or more test cases have failed, or have been auto-skipped.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">2</fo:inline> indicates that the test execution has failed because of, for example, compilation errors, or an
	illegal return value from an information function.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If auto-skipped test cases do not affect the exit status. The default
      behavior can be changed using start flag:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 -exit_status ignore_config</fo:block>
    
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Executing <fo:inline font-family="monospace">ct_run</fo:inline> without start flags is equal to the command:
    <fo:inline font-family="monospace">ct_run -dir ./</fo:inline></fo:block></fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more information about the <fo:inline font-family="monospace">ct_run</fo:inline> program, see module
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_run</fo:inline></fo:inline> and section
      <fo:inline font-style="italic">Installation</fo:inline>.
    </fo:block>
  <fo:block id="idp2758176" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.8.4 
      Running Tests from the Erlang Shell or from an Erlang Program</fo:block>
    
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Common Test</fo:inline> provides an Erlang API for running tests. The main 
      (and most flexible) function for specifying and executing tests is
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:run_test/1</fo:inline></fo:inline>.
      It takes the same start parameters as
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_run</fo:inline></fo:inline>,
      but the flags are instead specified as options in a list of key-value tuples. 
      For example, a test specified with <fo:inline font-family="monospace">ct_run</fo:inline> as follows:</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">$ ct_run -suite ./my_SUITE -logdir ./results</fo:inline></fo:block> 
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">is with <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:run_test/1</fo:inline></fo:inline> specified as:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">1&gt; ct:run_test([{suite,"./my_SUITE"},{logdir,"./results"}]).</fo:inline></fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function returns the test result, represented by the tuple
	<fo:inline font-family="monospace">{Ok,Failed,{UserSkipped,AutoSkipped}}</fo:inline>, where each element is an
	integer. If test execution fails, the function returns the tuple
	<fo:inline font-family="monospace">{error,Reason}</fo:inline>, where the term <fo:inline font-family="monospace">Reason</fo:inline> explains the
	failure.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default start option <fo:inline font-family="monospace">{dir,Cwd}</fo:inline> (to run all suites in the current
      working directory) is used if the function is called with an empty
      list of options.</fo:block>

	<fo:block id="idp2767584" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Releasing the Erlang Shell</fo:block>
	  
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">During execution of tests started with
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:run_test/1</fo:inline></fo:inline>,
	  the Erlang shell process, controlling <fo:inline font-family="monospace">stdin</fo:inline>, remains the top-level
	  process of the <fo:inline font-family="monospace">Common Test</fo:inline> system of processes. Consequently,
	  the Erlang shell is not available for interaction during
	  the test run. If this is not desirable, for example, because the shell 
	  is needed for debugging purposes or for interaction with the SUT during test
	  execution, set start option <fo:inline font-family="monospace">release_shell</fo:inline> to
	  <fo:inline font-family="monospace">true</fo:inline> (in the call to <fo:inline font-family="monospace">ct:run_test/1</fo:inline> or by
	  using the corresponding test specification term, described later). This
	  makes <fo:inline font-family="monospace">Common Test</fo:inline> release the shell immediately after the test suite
	  compilation stage. To accomplish this, a test runner process
	  is spawned to take control of the test execution. The effect is that
	  <fo:inline font-family="monospace">ct:run_test/1</fo:inline> returns the pid of this process rather than the
	  test result, which instead is printed to tty at the end of the test run.</fo:block>
	  <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To use the functions
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:break/1,2</fo:inline></fo:inline> and
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:continue/0,1</fo:inline></fo:inline>,
	  <fo:inline font-family="monospace">release_shell</fo:inline> <fo:inline font-weight="bold">must</fo:inline> be set to <fo:inline font-family="monospace">true</fo:inline>.</fo:block></fo:block>
	
        
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details, see
        <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:run_test/1</fo:inline></fo:inline> manual page.</fo:block>    
  <fo:block id="idp2779328" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.8.5 
      Test Case Group Execution</fo:block>
    
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">With the <fo:inline font-family="monospace">ct_run</fo:inline> flag, or <fo:inline font-family="monospace">ct:run_test/1</fo:inline> option <fo:inline font-family="monospace">group</fo:inline>,
    one or more test case groups can be specified, optionally in combination
    with specific test cases. The syntax for specifying groups on the command line
    is as follows:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 $ ct_run -group &lt;group_names_or_paths&gt; [-case &lt;cases&gt;]</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The syntax in the Erlang shell is as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 1&gt; ct:run_test([{group,GroupsNamesOrPaths}, {case,Cases}]).</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parameter <fo:inline font-family="monospace">group_names_or_paths</fo:inline> specifies one
    or more group names and/or one or more group paths. At startup,
    <fo:inline font-family="monospace">Common Test</fo:inline> searches for matching groups in the group definitions
    tree (that is, the list returned from <fo:inline font-family="monospace">Suite:groups/0</fo:inline>; for details, see section
    <fo:inline font-style="italic">Test Case Groups</fo:inline>.
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Given a group name, say <fo:inline font-family="monospace">g</fo:inline>, <fo:inline font-family="monospace">Common Test</fo:inline> searches for all paths
    leading to <fo:inline font-family="monospace">g</fo:inline>. By path is meant a sequence of nested groups,
    which must be followed to get from the top-level
    group to <fo:inline font-family="monospace">g</fo:inline>. To execute the test cases in group <fo:inline font-family="monospace">g</fo:inline>, 
    <fo:inline font-family="monospace">Common Test</fo:inline> must call the <fo:inline font-family="monospace">init_per_group/2</fo:inline> function for 
    each group in the path to <fo:inline font-family="monospace">g</fo:inline>, and all corresponding <fo:inline font-family="monospace">end_per_group/2</fo:inline>
    functions afterwards. This is because the configuration
    of a test case in <fo:inline font-family="monospace">g</fo:inline> (and its <fo:inline font-family="monospace">Config</fo:inline> input data) depends on
    <fo:inline font-family="monospace">init_per_testcase(TestCase, Config)</fo:inline> and its return value, which
    in turn depends on <fo:inline font-family="monospace">init_per_group(g, Config)</fo:inline> and its return value,
    which in turn depends on <fo:inline font-family="monospace">init_per_group/2</fo:inline> of the group above
    <fo:inline font-family="monospace">g</fo:inline>, and so on, all the way up to the top-level group.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This means that if there is more than one way to locate a group 
    (and its test cases) in a path, the result of the group search operation 
    is a number of tests, all of which are to be performed.
    <fo:inline font-family="monospace">Common Test</fo:inline> interprets a group specification that consists of a
    single name as follows:</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">"Search and find all paths in the group definitions tree that lead
    to the specified group and, for each path, create a test that does the following, 
    in order:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Executes all configuration functions in the path to the specified group.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Executes all, or all matching, test cases in this group.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Executes all, or all matching, test cases in all subgroups of the group."</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The user can specify a specific group path with
    parameter <fo:inline font-family="monospace">group_names_or_paths</fo:inline>. With this type of specification
    execution of unwanted groups (in otherwise matching paths),
    and/or the execution of subgroups can be avoided. The command line syntax of the 
    group path is a list of group names in the path, for example:
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">$ ct_run -suite "./x_SUITE" -group [g1,g3,g4] -case tc1 tc5</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The syntax in the Erlang shell is as follows (requires a list within the groups list):</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">1&gt; ct:run_test([{suite,"./x_SUITE"}, {group,[[g1,g3,g4]]}, {testcase,[tc1,tc5]}]).</fo:inline></fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The last group in the specified path is the terminating group in
    the test, that is, no subgroups following this group are executed. In the
    previous example, <fo:inline font-family="monospace">g4</fo:inline> is the terminating group. Hence, <fo:inline font-family="monospace">Common Test</fo:inline>
    executes a test that calls all <fo:inline font-family="monospace">init</fo:inline> configuration functions in the path to
    <fo:inline font-family="monospace">g4</fo:inline>, that is, <fo:inline font-family="monospace">g1..g3..g4</fo:inline>. It then calls test cases <fo:inline font-family="monospace">tc1</fo:inline>
    and <fo:inline font-family="monospace">tc5</fo:inline> in <fo:inline font-family="monospace">g4</fo:inline>, and finally all <fo:inline font-family="monospace">end</fo:inline> configuration functions 
    in order <fo:inline font-family="monospace">g4..g3..g1</fo:inline>.</fo:block>
    
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The group path specification does not necessarily
    have to include <fo:inline font-weight="bold">all</fo:inline> groups in the path to the terminating group.
    <fo:inline font-family="monospace">Common Test</fo:inline> searches for all matching paths if an incomplete 
    group path is specified.</fo:block></fo:block>
    
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Group names and group paths can be combined with parameter
    <fo:inline font-family="monospace">group_names_or_paths</fo:inline>. Each element is treated as an individual specification 
    in combination with parameter <fo:inline font-family="monospace">cases</fo:inline>.
    The following examples illustrates this.</fo:block></fo:block>   

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Examples:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 -module(x_SUITE).
 ...
 %% The group definitions:      
 groups() -&gt;
   [{top1,[],[tc11,tc12,
	      {sub11,[],[tc12,tc13]},
	      {sub12,[],[tc14,tc15,
			 {sub121,[],[tc12,tc16]}]}]},

    {top2,[],[{group,sub21},{group,sub22}]},
    {sub21,[],[tc21,{group,sub2X2}]},
    {sub22,[],[{group,sub221},tc21,tc22,{group,sub2X2}]},
    {sub221,[],[tc21,tc23]},
    {sub2X2,[],[tc21,tc24]}].</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following executes two tests, one for all cases and all subgroups 
    under <fo:inline font-family="monospace">top1</fo:inline>, and one for all under <fo:inline font-family="monospace">top2</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 $ ct_run -suite "x_SUITE" -group all
 1&gt; ct:run_test([{suite,"x_SUITE"}, {group,all}]).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Using <fo:inline font-family="monospace">-group top1 top2</fo:inline>, or <fo:inline font-family="monospace">{group,[top1,top2]}</fo:inline> gives the same result.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following executes one test for all cases and subgroups under <fo:inline font-family="monospace">top1</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 $ ct_run -suite "x_SUITE" -group top1
 1&gt; ct:run_test([{suite,"x_SUITE"}, {group,[top1]}]).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following runs a test executing <fo:inline font-family="monospace">tc12</fo:inline> in <fo:inline font-family="monospace">top1</fo:inline> and any subgroup
    under <fo:inline font-family="monospace">top1</fo:inline> where it can be found (<fo:inline font-family="monospace">sub11</fo:inline> and <fo:inline font-family="monospace">sub121</fo:inline>):</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 $ ct_run -suite "x_SUITE" -group top1 -case tc12
 1&gt; ct:run_test([{suite,"x_SUITE"}, {group,[top1]}, {testcase,[tc12]}]).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following executes <fo:inline font-family="monospace">tc12</fo:inline> <fo:inline font-weight="bold">only</fo:inline> in group <fo:inline font-family="monospace">top1</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 $ ct_run -suite "x_SUITE" -group [top1] -case tc12
 1&gt; ct:run_test([{suite,"x_SUITE"}, {group,[[top1]]}, {testcase,[tc12]}]).</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following searches <fo:inline font-family="monospace">top1</fo:inline> and all its subgroups for <fo:inline font-family="monospace">tc16</fo:inline> resulting
    in that this test case executes in group <fo:inline font-family="monospace">sub121</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 $ ct_run -suite "x_SUITE" -group top1 -case tc16
 1&gt; ct:run_test([{suite,"x_SUITE"}, {group,[top1]}, {testcase,[tc16]}]).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Using the specific path <fo:inline font-family="monospace">-group [sub121]</fo:inline> or <fo:inline font-family="monospace">{group,[[sub121]]}</fo:inline> gives
    the same result in this example.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following executes two tests, one including all cases and subgroups under
    <fo:inline font-family="monospace">sub12</fo:inline>, and one with <fo:inline font-weight="bold">only</fo:inline> the test cases in <fo:inline font-family="monospace">sub12</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 $ ct_run -suite "x_SUITE" -group sub12 [sub12]
 1&gt; ct:run_test([{suite,"x_SUITE"}, {group,[sub12,[sub12]]}]).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the following example, <fo:inline font-family="monospace">Common Test</fo:inline> finds and executes two tests, 
    one for the path from <fo:inline font-family="monospace">top2</fo:inline> to <fo:inline font-family="monospace">sub2X2</fo:inline> through <fo:inline font-family="monospace">sub21</fo:inline>, 
    and one from <fo:inline font-family="monospace">top2</fo:inline> to <fo:inline font-family="monospace">sub2X2</fo:inline> through <fo:inline font-family="monospace">sub22</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 $ ct_run -suite "x_SUITE" -group sub2X2
 1&gt; ct:run_test([{suite,"x_SUITE"}, {group,[sub2X2]}]).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the following example, by specifying the unique path <fo:inline font-family="monospace">top2 -&gt; sub21 -&gt; sub2X2</fo:inline>, 
    only one test is executed. The second possible path, from <fo:inline font-family="monospace">top2</fo:inline> to <fo:inline font-family="monospace">sub2X2</fo:inline> 
    (from the former example) is discarded:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 $ ct_run -suite "x_SUITE" -group [sub21,sub2X2]
 1&gt; ct:run_test([{suite,"x_SUITE"}, {group,[[sub21,sub2X2]]}]).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following executes only the test cases for <fo:inline font-family="monospace">sub22</fo:inline> and in reverse order 
    compared to the group definition:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 $ ct_run -suite "x_SUITE" -group [sub22] -case tc22 tc21
 1&gt; ct:run_test([{suite,"x_SUITE"}, {group,[[sub22]]}, {testcase,[tc22,tc21]}]).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a test case belonging to a group (according to the group definition) is executed
    without a group specification, that is, simply by
    (using the command line):</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">$ ct_run -suite "my_SUITE" -case my_tc</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">or (using the Erlang shell):</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">1&gt; ct:run_test([{suite,"my_SUITE"}, {testcase,my_tc}]).</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">then <fo:inline font-family="monospace">Common Test</fo:inline> ignores the group definition and executes the test case 
    in the scope of the test suite only (no group configuration functions are called).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The group specification feature, as presented in this section, can also
    be used in <fo:inline font-style="italic">Test
    Specifications</fo:inline> (with some extra features added).</fo:block>
   <fo:block id="idp2840048" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.8.6 
      Running the Interactive Shell Mode</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">You can start <fo:inline font-family="monospace">Common Test</fo:inline> in an interactive shell mode where no
      automatic testing is performed. Instead, <fo:inline font-family="monospace">Common Test</fo:inline>
      starts its utility processes, installs configuration data (if any),
      and waits for the user to call functions (typically test case support
      functions) from the Erlang shell.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The shell mode is useful, for example, for debugging test suites, analyzing
      and debugging the SUT during "simulated" test case execution, and 
      trying out various operations during test suite development.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To start the interactive shell mode, start an Erlang shell 
      manually and call <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:install/1</fo:inline></fo:inline> 
      to install any configuration data you might need (use <fo:inline font-family="monospace">[]</fo:inline> as argument otherwise). 
      Then call <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:start_interactive/0</fo:inline></fo:inline> 
      to start <fo:inline font-family="monospace">Common Test</fo:inline>.</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you use the <fo:inline font-family="monospace">ct_run</fo:inline> program, you can start 
      the Erlang shell and <fo:inline font-family="monospace">Common Test</fo:inline> in one go by using the flag <fo:inline font-family="monospace">-shell</fo:inline> and, 
      optionally, flag <fo:inline font-family="monospace">-config</fo:inline> and/or <fo:inline font-family="monospace">-userconfig</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Examples:</fo:inline></fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ct_run -shell</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ct_run -shell -config cfg/db.cfg</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ct_run -shell -userconfig db_login testuser x523qZ</fo:inline></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If no configuration file is specified with command <fo:inline font-family="monospace">ct_run</fo:inline>,
      a warning is displayed. If <fo:inline font-family="monospace">Common Test</fo:inline> has been run from the same
      directory earlier, the same configuration file(s) are used again. If <fo:inline font-family="monospace">Common Test</fo:inline> 
      has not been run from this directory before, no configuration files are available.</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If any functions using "required configuration data" (for example, functions 
      <fo:inline font-family="monospace">ct_telnet</fo:inline> or <fo:inline font-family="monospace">ct_ftp</fo:inline>) are to be called from the Erlang shell, first require 
      configuration data with <fo:inline font-style="italic"><fo:inline font-family="monospace">
      ct:require/1,2</fo:inline></fo:inline>. This is equivalent to a <fo:inline font-family="monospace">require</fo:inline> statement 
      in the <fo:inline font-style="italic">Test Suite Information Function</fo:inline> 
      or in the <fo:inline font-style="italic">Test Case Information Function</fo:inline>.</fo:block>
      
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap"> 
 1&gt; ct:require(unix_telnet, unix).
 ok
 2&gt; ct_telnet:open(unix_telnet).
 {ok,&lt;0.105.0&gt;}
 4&gt; ct_telnet:cmd(unix_telnet, "ls .").
 {ok,["ls .","file1  ...",...]}</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Everything that <fo:inline font-family="monospace">Common Test</fo:inline> normally prints in the test case logs,
      are in the interactive mode written to a log named <fo:inline font-family="monospace">ctlog.html</fo:inline> 
      in directory  <fo:inline font-family="monospace">ct_run.&lt;timestamp&gt;</fo:inline>. A link to this 
      file is available in the file named <fo:inline font-family="monospace">last_interactive.html</fo:inline> in the 
      directory from which you execute <fo:inline font-family="monospace">ct_run</fo:inline>. Specifying a different
      root directory for the logs than the current working directory
      is not supported.</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you wish to exit the interactive mode (for example, to start an automated 
      test run with <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:run_test/1</fo:inline></fo:inline>), 
      call function
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:stop_interactive/0</fo:inline></fo:inline>. 
      This shuts down the running <fo:inline font-family="monospace">ct</fo:inline> application. Associations between
      configuration names and data created with <fo:inline font-family="monospace">require</fo:inline> are 
      consequently deleted. Function
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:start_interactive/0</fo:inline></fo:inline> 
      takes you back into interactive mode, but the previous state is not restored.</fo:block>
  <fo:block id="idp2866768" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.8.7 
      Step-by-Step Execution of Test Cases with the Erlang Debugger</fo:block>
    
   
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Using <fo:inline font-family="monospace">ct_run -step [opts]</fo:inline>, or by passing option <fo:inline font-family="monospace">{step,Opts}</fo:inline> 
       to <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:run_test/1</fo:inline></fo:inline>, 
       the following is possible:</fo:block>
       <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Get the Erlang Debugger started automatically.</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Use its graphical interface to investigate the state of the current test case.</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Execute the test case step-by-step and/or set execution breakpoints.</fo:block></fo:list-item-body></fo:list-item>
     </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If no extra options are specified with flag/option <fo:inline font-family="monospace">step</fo:inline>,
       breakpoints are set automatically on the test cases that
       are to be executed by <fo:inline font-family="monospace">Common Test</fo:inline>, and those functions only. If
       step option <fo:inline font-family="monospace">config</fo:inline> is specified, breakpoints are also initially 
       set on the configuration functions in the suite, that is,
       <fo:inline font-family="monospace">init_per_suite/1</fo:inline>, <fo:inline font-family="monospace">end_per_suite/1</fo:inline>,
       <fo:inline font-family="monospace">init_per_group/2</fo:inline>, <fo:inline font-family="monospace">end_per_group/2</fo:inline>,
       <fo:inline font-family="monospace">init_per_testcase/2</fo:inline> and <fo:inline font-family="monospace">end_per_testcase/2</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Common Test</fo:inline> enables the Debugger auto-attach feature, which means
       that for every new interpreted test case function that starts to execute, 
       a new trace window automatically pops up (as each test 
       case executes on a dedicated Erlang process). Whenever a new test case starts,
       <fo:inline font-family="monospace">Common Test</fo:inline> attempts to close the inactive trace window of the previous 
       test case. However, if you prefer <fo:inline font-family="monospace">Common Test</fo:inline> to leave inactive trace 
       windows, use option <fo:inline font-family="monospace">keep_inactive</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The step functionality can be used together with flag/option <fo:inline font-family="monospace">suite</fo:inline> and 
       <fo:inline font-family="monospace">suite</fo:inline> + <fo:inline font-family="monospace">case/testcase</fo:inline>, but not together with <fo:inline font-family="monospace">dir</fo:inline>.</fo:block>       
  <fo:block id="idp2882176" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.8.8 
      Test Specifications</fo:block>
  
    
    <fo:block id="idp2882912" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">General Description</fo:block>
	
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The most flexible way to specify what to test, is to use a
	test specification, which is a sequence of
	Erlang terms. The terms are normally declared in one or more text files
	(see <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:run_test/1</fo:inline></fo:inline>), but
	can also be passed to <fo:inline font-family="monospace">Common Test</fo:inline> on the form of a list (see
	<fo:inline font-style="italic"><fo:inline font-family="monospace">ct:run_testspec/1</fo:inline></fo:inline>).
	There are two general types of terms: configuration terms and test
	specification terms.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">With configuration terms it is, for example, possible to do the following:</fo:block>
	<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Label the test run (similar to <fo:inline font-family="monospace">ct_run -label</fo:inline>).</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Evaluate any expressions before starting the test.</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Import configuration data (similar to <fo:inline font-family="monospace">ct_run -config/-userconfig</fo:inline>).</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Specify the top-level HTML log directory (similar to <fo:inline font-family="monospace">ct_run -logdir</fo:inline>).</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Enable code coverage analysis (similar to <fo:inline font-family="monospace">ct_run -cover</fo:inline>).</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Install <fo:inline font-family="monospace">Common Test Hooks</fo:inline> (similar to <fo:inline font-family="monospace">ct_run -ch_hooks</fo:inline>).</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Install <fo:inline font-family="monospace">event_handler</fo:inline> plugins (similar to <fo:inline font-family="monospace">ct_run -event_handler</fo:inline>).</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Specify include directories to be passed to the compiler for 
       automatic compilation (similar to <fo:inline font-family="monospace">ct_run -include</fo:inline>).</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Disable the auto-compilation feature (similar to <fo:inline font-family="monospace">ct_run -no_auto_compile</fo:inline>).</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Set verbosity levels (similar to <fo:inline font-family="monospace">ct_run -verbosity</fo:inline>).</fo:block></fo:list-item-body></fo:list-item>
     </fo:list-block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Configuration terms can be combined with <fo:inline font-family="monospace">ct_run</fo:inline> start flags
	or <fo:inline font-family="monospace">ct:run_test/1</fo:inline> options. The result is, for some flags/options
	and terms, that the values are merged (for example, configuration files,
	include directories, verbosity levels, and silent connections) and for
	others that the start flags/options override the test specification
	terms (for example, log directory, label, style sheet, and auto-compilation).</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">With test specification terms, it is possible to state exactly
	which tests to run and in which order. A test term specifies
	either one or more suites, one or more test case groups (possibly nested),
	or one or more test cases in a group (or in multiple groups) or in a suite.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Any number of test terms can be declared in sequence.
	<fo:inline font-family="monospace">Common Test</fo:inline> compiles by default the terms into one or more tests 
	to be performed in one resulting test run. A term that
	specifies a set of test cases "swallows" one that only
	specifies a subset of these cases. For example, the result of merging
	one term specifying that all cases in suite S are to be
	executed, with another term specifying only test case X and Y in
	S, is a test of all cases in S. However, if a term specifying
	test case X and Y in S is merged with a term specifying case Z
	in S, the result is a test of X, Y, and Z in S. To disable this
	behavior, that is, to instead perform each test sequentially in a 
	"script-like" manner, set term <fo:inline font-family="monospace">merge_tests</fo:inline> to <fo:inline font-family="monospace">false</fo:inline> 
	in the test specification.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A test term can also specify one or more test suites, groups,
	or test cases to be skipped. Skipped suites, groups, and cases
	are not executed and show up in the HTML log files as <fo:inline font-family="monospace">SKIPPED</fo:inline>.</fo:block>
    
    <fo:block id="idp2903520" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Using Multiple Test Specification Files</fo:block>
        
	
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When multiple test specification files are specified at startup (either
	with <fo:inline font-family="monospace">ct_run -spec file1 file2 ...</fo:inline> or 
	<fo:inline font-family="monospace">ct:run_test([{spec, [File1,File2,...]}])</fo:inline>), 
	<fo:inline font-family="monospace">Common Test</fo:inline> either executes one test run per specification file, 
	or joins the files and performs all tests within one single test run. 
	The first behavior is the default one. The latter requires that start
	flag/option <fo:inline font-family="monospace">join_specs</fo:inline> is provided, for example,
	<fo:inline font-family="monospace">run_test -spec ./my_tests1.ts ./my_tests2.ts -join_specs</fo:inline>.</fo:block>
	
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Joining a number of specifications, or running them separately, can
	also be accomplished with (and can be combined with) test specification
	file inclusion.</fo:block>
    
    <fo:block id="idp2908080" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Test Specification File Inclusion</fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">With the term <fo:inline font-family="monospace">specs</fo:inline>, a test specification can include 
	other specifications. An included specification can either be joined 
	with the source specification or used to produce a separate test run 
	(as with start flag/option <fo:inline font-family="monospace">join_specs</fo:inline> above).</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>

	<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 %% In specification file "a.spec"
 {specs, join, ["b.spec", "c.spec"]}.
 {specs, separate, ["d.spec", "e.spec"]}.
 %% Config and test terms follow
 ...</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this example, the test terms defined in files "b.spec" and "c.spec"
	are joined with the terms in source specification "a.spec"
	(if any). The inclusion of specifications "d.spec" and
	"e.spec" results in two separate, and independent, test runs
	(one for each included specification).</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Option <fo:inline font-family="monospace">join</fo:inline> does not imply that the test terms
	are merged, only that all tests are executed in one single test run.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Joined specifications share common configuration settings, such as
	the list of <fo:inline font-family="monospace">config</fo:inline> files or <fo:inline font-family="monospace">include</fo:inline> directories.
	For configurations that cannot be combined, such as settings for <fo:inline font-family="monospace">logdir</fo:inline>
	or <fo:inline font-family="monospace">verbosity</fo:inline>, it is up to the user to ensure there are no clashes
	when the test specifications are joined. Specifications included with
	option <fo:inline font-family="monospace">separate</fo:inline> do not share configuration settings with the
	source specification. This is useful, for example, if there are clashing
	configuration settings in included specifications, making it them impossible
	to join.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">{merge_tests,true}</fo:inline> is set in the source specification
	(which is the default setting), terms in joined specifications are
	merged with terms in the source specification (according to the
	description of <fo:inline font-family="monospace">merge_tests</fo:inline> earlier).</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that it is always the <fo:inline font-family="monospace">merge_tests</fo:inline> setting in the source
	specification that is used when joined with other specifications.
	Say, for example, that a source specification A, with tests TA1 and TA2, has
	<fo:inline font-family="monospace">{merge_tests,false}</fo:inline> set, and that it includes another specification,
	B, with tests TB1 and TB2, that has <fo:inline font-family="monospace">{merge_tests,true}</fo:inline> set.
	The result is that the test series <fo:inline font-family="monospace">TA1,TA2,merge(TB1,TB2)</fo:inline>
	is executed. The opposite <fo:inline font-family="monospace">merge_tests</fo:inline> settings would result in
	the test series <fo:inline font-family="monospace">merge(merge(TA1,TA2),TB1,TB2)</fo:inline>.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The term <fo:inline font-family="monospace">specs</fo:inline> can be used to nest specifications,
	that is, have one specification include other specifications, which in turn
	include others, and so no</fo:block>
    
      <fo:block id="idp2922544" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Test Case Groups</fo:block>
	

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a test case group is specified, the resulting test
	executes function <fo:inline font-family="monospace">init_per_group</fo:inline>, followed by all test
	cases and subgroups (including their configuration functions), and
	finally function <fo:inline font-family="monospace">end_per_group</fo:inline>. Also, if particular
	test cases in a group are specified, <fo:inline font-family="monospace">init_per_group</fo:inline>
	and <fo:inline font-family="monospace">end_per_group</fo:inline>, for the group in question, are
	called. If a group defined (in <fo:inline font-family="monospace">Suite:group/0</fo:inline>) as
	a subgroup of another group, is specified (or if particular test
	cases of a subgroup are), <fo:inline font-family="monospace">Common Test</fo:inline> calls the configuration
	functions for the top-level groups and for the subgroup
	in question (making it possible to pass configuration data all
	the way from <fo:inline font-family="monospace">init_per_suite</fo:inline> down to the test cases in the
	subgroup).</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The test specification uses the same mechanism for specifying
	test case groups through names and paths, as explained in section
	<fo:inline font-style="italic">Test Case Group Execution</fo:inline>,
	with the addition of element <fo:inline font-family="monospace">GroupSpec</fo:inline>.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Element <fo:inline font-family="monospace">GroupSpec</fo:inline> makes it possible to specify
	group execution properties that overrides those in the
	group definition (that is, in <fo:inline font-family="monospace">groups/0</fo:inline>). Execution properties for
	subgroups might be overridden as well. This feature makes it possible to
	change properties of groups at the time of execution,
	without having to edit the test suite. The same feature is available for 
	<fo:inline font-family="monospace">group</fo:inline> elements in the <fo:inline font-family="monospace">Suite:all/0</fo:inline> list. For details and examples,
	see section <fo:inline font-style="italic">
	Test Case Groups</fo:inline>.</fo:block>
      

      <fo:block id="idp2932640" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Test Specification Syntax</fo:block>
	

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Test specifications can be used to run tests both in a single 
	test host environment and in a distributed <fo:inline font-family="monospace">Common Test</fo:inline> environment 
	(Large Scale Testing). The node parameters in term <fo:inline font-family="monospace">init</fo:inline> are only
	relevant in the latter (see section
	<fo:inline font-style="italic">Test Specifications</fo:inline> 
	in Large Scale Testing). For details about the various terms, see the 
	corresponding sections in the User's Guide, for example, the following:
	</fo:block>
	<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_run</fo:inline>
	program</fo:inline> for an overview of available start flags
	(as most flags have a corresponding configuration term)</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">Logging</fo:inline>
	(for terms <fo:inline font-family="monospace">verbosity</fo:inline>, <fo:inline font-family="monospace">stylesheet</fo:inline>, <fo:inline font-family="monospace">basic_html</fo:inline> and <fo:inline font-family="monospace">esc_chars</fo:inline>)</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">External Configuration Data</fo:inline>
	(for terms <fo:inline font-family="monospace">config</fo:inline> and <fo:inline font-family="monospace">userconfig</fo:inline>)</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">Event
	Handling</fo:inline> (for the <fo:inline font-family="monospace">event_handler</fo:inline> term)</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">Common Test Hooks</fo:inline>
	(for term <fo:inline font-family="monospace">ct_hooks</fo:inline>)</fo:block></fo:list-item-body></fo:list-item>
	</fo:list-block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Configuration terms:</fo:inline></fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 {merge_tests, Bool}.

 {define, Constant, Value}.

 {specs, InclSpecsOption, TestSpecs}.

 {node, NodeAlias, Node}.

 {init, InitOptions}.
 {init, [NodeAlias], InitOptions}.

 {label, Label}.
 {label, NodeRefs, Label}.

 {verbosity, VerbosityLevels}.
 {verbosity, NodeRefs, VerbosityLevels}.

 {stylesheet, CSSFile}.
 {stylesheet, NodeRefs, CSSFile}.

 {silent_connections, ConnTypes}.
 {silent_connections, NodeRefs, ConnTypes}.

 {multiply_timetraps, N}.
 {multiply_timetraps, NodeRefs, N}.

 {scale_timetraps, Bool}.
 {scale_timetraps, NodeRefs, Bool}.

 {cover, CoverSpecFile}.
 {cover, NodeRefs, CoverSpecFile}.

 {cover_stop, Bool}.
 {cover_stop, NodeRefs, Bool}.

 {include, IncludeDirs}.
 {include, NodeRefs, IncludeDirs}.

 {auto_compile, Bool},
 {auto_compile, NodeRefs, Bool},

 {abort_if_missing_suites, Bool},
 {abort_if_missing_suites, NodeRefs, Bool},

 {config, ConfigFiles}.
 {config, ConfigDir, ConfigBaseNames}.
 {config, NodeRefs, ConfigFiles}.
 {config, NodeRefs, ConfigDir, ConfigBaseNames}.

 {userconfig, {CallbackModule, ConfigStrings}}.
 {userconfig, NodeRefs, {CallbackModule, ConfigStrings}}.

 {logdir, LogDir}.                                        
 {logdir, NodeRefs, LogDir}.

 {logopts, LogOpts}.
 {logopts, NodeRefs, LogOpts}.

 {create_priv_dir, PrivDirOption}.
 {create_priv_dir, NodeRefs, PrivDirOption}.

 {event_handler, EventHandlers}.
 {event_handler, NodeRefs, EventHandlers}.
 {event_handler, EventHandlers, InitArgs}.
 {event_handler, NodeRefs, EventHandlers, InitArgs}.

 {ct_hooks, CTHModules}.
 {ct_hooks, NodeRefs, CTHModules}.

 {enable_builtin_hooks, Bool}.

 {basic_html, Bool}.
 {basic_html, NodeRefs, Bool}.

 {esc_chars, Bool}.
 {esc_chars, NodeRefs, Bool}.

 {release_shell, Bool}.</fo:block>
	
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Test terms:</fo:inline></fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 {suites, Dir, Suites}.                                
 {suites, NodeRefs, Dir, Suites}.

 {groups, Dir, Suite, Groups}.
 {groups, NodeRefs, Dir, Suite, Groups}.

 {groups, Dir, Suite, Groups, {cases,Cases}}.
 {groups, NodeRefs, Dir, Suite, Groups, {cases,Cases}}.

 {cases, Dir, Suite, Cases}.                           
 {cases, NodeRefs, Dir, Suite, Cases}.

 {skip_suites, Dir, Suites, Comment}.
 {skip_suites, NodeRefs, Dir, Suites, Comment}.

 {skip_groups, Dir, Suite, GroupNames, Comment}.
 {skip_groups, NodeRefs, Dir, Suite, GroupNames, Comment}.

 {skip_cases, Dir, Suite, Cases, Comment}.
 {skip_cases, NodeRefs, Dir, Suite, Cases, Comment}.</fo:block>

	
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Types:</fo:inline></fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 Bool            = true | false
 Constant        = atom()
 Value           = term()
 InclSpecsOption = join | separate
 TestSpecs       = string() | [string()]
 NodeAlias       = atom()
 Node            = node()
 NodeRef         = NodeAlias | Node | master
 NodeRefs        = all_nodes | [NodeRef] | NodeRef
 InitOptions     = term()
 Label           = atom() | string()
 VerbosityLevels = integer() | [{Category,integer()}]
 Category        = atom()
 CSSFile         = string()
 ConnTypes       = all | [atom()]
 N               = integer()
 CoverSpecFile   = string()
 IncludeDirs     = string() | [string()]
 ConfigFiles     = string() | [string()]
 ConfigDir       = string()
 ConfigBaseNames = string() | [string()]
 CallbackModule  = atom()
 ConfigStrings   = string() | [string()]
 LogDir          = string()
 LogOpts         = [term()]
 PrivDirOption   = auto_per_run | auto_per_tc | manual_per_tc
 EventHandlers   = atom() | [atom()]
 InitArgs        = [term()]
 CTHModules      = [CTHModule |
		    {CTHModule, CTHInitArgs} |
		    {CTHModule, CTHInitArgs, CTHPriority}]
 CTHModule       = atom()
 CTHInitArgs     = term()
 Dir             = string()
 Suites          = atom() | [atom()] | all
 Suite           = atom()
 Groups          = GroupPath | [GroupPath] | GroupSpec | [GroupSpec] | all
 GroupPath       = [GroupName]
 GroupSpec       = GroupName | {GroupName,Properties} | {GroupName,Properties,GroupSpec}
 GroupName       = atom()
 GroupNames      = GroupName | [GroupName]
 Cases           = atom() | [atom()] | all
 Comment         = string() | ""</fo:block>
	
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The difference between the <fo:inline font-family="monospace">config</fo:inline> terms above is that with
	<fo:inline font-family="monospace">ConfigDir</fo:inline>, <fo:inline font-family="monospace">ConfigBaseNames</fo:inline> is a list of base names,
	that is, without directory paths. <fo:inline font-family="monospace">ConfigFiles</fo:inline> must be full names,
	including paths. For example, the following two terms have the same meaning:</fo:block>
	<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 {config, ["/home/testuser/tests/config/nodeA.cfg",
           "/home/testuser/tests/config/nodeB.cfg"]}.

 {config, "/home/testuser/tests/config", ["nodeA.cfg","nodeB.cfg"]}.</fo:block>

	  <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Any relative paths, specified in the test specification, are
	  relative to the directory containing the test specification file if
	  <fo:inline font-family="monospace">ct_run -spec TestSpecFile ...</fo:inline> or
	  <fo:inline font-family="monospace">ct:run:test([{spec,TestSpecFile},...])</fo:inline>
	  executes the test.</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The path is relative to the top-level log directory if
	  <fo:inline font-family="monospace">ct:run:testspec(TestSpec)</fo:inline> executes the test.</fo:block></fo:block>	  
	

	<fo:block id="idp2959008" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Constants</fo:block>
	  

	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The term <fo:inline font-family="monospace">define</fo:inline> introduces a constant that is used to
	  replace the name <fo:inline font-family="monospace">Constant</fo:inline> with <fo:inline font-family="monospace">Value</fo:inline>, wherever it is found in
	  the test specification. This replacement occurs during an initial iteration
	  through the test specification. Constants can be used anywhere in the test
	  specification, for example, in any lists and tuples, and even in strings
	  and inside the value part of other constant definitions. A constant can
	  also be part of a node name, but that is the only place where a constant
	  can be part of an atom.</fo:block>
	  
	  <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For the sake of readability, the name of the constant must always
	  begin with an uppercase letter, or a <fo:inline font-family="monospace">$</fo:inline>, <fo:inline font-family="monospace">?</fo:inline>, or <fo:inline font-family="monospace">_</fo:inline>.
	  This means that it must always be single quoted (as the constant name is 
	  an atom, not text).</fo:block></fo:block>
	  
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The main benefit of constants is that they can be used to reduce the size
	  (and avoid repetition) of long strings, such as file paths.</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Examples:</fo:inline></fo:block>
	  
	  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 %% 1a. no constant
 {config, "/home/testuser/tests/config", ["nodeA.cfg","nodeB.cfg"]}.
 {suites, "/home/testuser/tests/suites", all}.

 %% 1b. with constant
 {define, 'TESTDIR', "/home/testuser/tests"}.
 {config, "'TESTDIR'/config", ["nodeA.cfg","nodeB.cfg"]}.
 {suites, "'TESTDIR'/suites", all}.

 %% 2a. no constants
 {config, [testnode@host1, testnode@host2], "../config", ["nodeA.cfg","nodeB.cfg"]}.
 {suites, [testnode@host1, testnode@host2], "../suites", [x_SUITE, y_SUITE]}.

 %% 2b. with constants
 {define, 'NODE', testnode}.
 {define, 'NODES', ['NODE'@host1, 'NODE'@host2]}.
 {config, 'NODES', "../config", ["nodeA.cfg","nodeB.cfg"]}.
 {suites, 'NODES', "../suites", [x_SUITE, y_SUITE]}.</fo:block>

	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Constants make the test specification term <fo:inline font-family="monospace">alias</fo:inline>, in previous
	    versions of <fo:inline font-family="monospace">Common Test</fo:inline>, redundant. This term is deprecated but
	    remains supported in upcoming <fo:inline font-family="monospace">Common Test</fo:inline> releases. Replacing <fo:inline font-family="monospace">alias</fo:inline>
	    terms with <fo:inline font-family="monospace">define</fo:inline> is strongly recommended though. An example
	    of such replacement follows:</fo:block>
	    
	    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 %% using the old alias term
 {config, "/home/testuser/tests/config/nodeA.cfg"}.
 {alias, suite_dir, "/home/testuser/tests/suites"}.
 {groups, suite_dir, x_SUITE, group1}.

 %% replacing with constants
 {define, 'TestDir', "/home/testuser/tests"}.
 {define, 'CfgDir', "'TestDir'/config"}.
 {define, 'SuiteDir', "'TestDir'/suites"}.
 {config, 'CfgDir', "nodeA.cfg"}.
 {groups, 'SuiteDir', x_SUITE, group1}.</fo:block>
	      
	      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Constants can well replace term <fo:inline font-family="monospace">node</fo:inline> also, but
	      this still has a declarative value, mainly when used in combination
	      with <fo:inline font-family="monospace">NodeRefs == all_nodes</fo:inline> 
	      (see <fo:inline font-style="italic">Types</fo:inline>).</fo:block>
	

	<fo:block id="idp2972400" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Example</fo:block>
	  
	  
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here follows a simple test specification example:</fo:block>
	  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 {define, 'Top', "/home/test"}.
 {define, 'T1', "'Top'/t1"}.
 {define, 'T2', "'Top'/t2"}.
 {define, 'T3', "'Top'/t3"}.
 {define, 'CfgFile', "config.cfg"}.

 {logdir, "'Top'/logs"}.

 {config, ["'T1'/'CfgFile'", "'T2'/'CfgFile'", "'T3'/'CfgFile'"]}.

 {suites, 'T1', all}.
 {skip_suites, 'T1', [t1B_SUITE,t1D_SUITE], "Not implemented"}.
 {skip_cases, 'T1', t1A_SUITE, [test3,test4], "Irrelevant"}.
 {skip_cases, 'T1', t1C_SUITE, [test1], "Ignore"}.

 {suites, 'T2', [t2B_SUITE,t2C_SUITE]}.
 {cases, 'T2', t2A_SUITE, [test4,test1,test7]}.

 {skip_suites, 'T3', all, "Not implemented"}.</fo:block>
	  
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The example specifies the following:</fo:block>
	  <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The specified <fo:inline font-family="monospace">logdir</fo:inline> directory is used for storing 
	    the HTML log files (in subdirectories tagged with node name, 
	    date, and time).</fo:block></fo:list-item-body></fo:list-item>
	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The variables in the specified test system configuration files are
	    imported for the test.</fo:block></fo:list-item-body></fo:list-item>
	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The first test to run includes all suites for system <fo:inline font-family="monospace">t1</fo:inline>. 
	    Suites <fo:inline font-family="monospace">t1B</fo:inline> and <fo:inline font-family="monospace">t1D</fo:inline> are excluded from the test. Test cases 
	    <fo:inline font-family="monospace">test3</fo:inline> and <fo:inline font-family="monospace">test4</fo:inline> in <fo:inline font-family="monospace">t1A</fo:inline> and <fo:inline font-family="monospace">test1</fo:inline> case in <fo:inline font-family="monospace">t1C</fo:inline> 
	    are also excluded from the test.</fo:block></fo:list-item-body></fo:list-item>
	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The second test to run is for system <fo:inline font-family="monospace">t2</fo:inline>. The included suites are
	    <fo:inline font-family="monospace">t2B</fo:inline> and <fo:inline font-family="monospace">t2C</fo:inline>. Test cases <fo:inline font-family="monospace">test4</fo:inline>, <fo:inline font-family="monospace">test1</fo:inline>, and <fo:inline font-family="monospace">test7</fo:inline> in suite
	    <fo:inline font-family="monospace">t2A</fo:inline> are also included. The test cases are executed in the specified order.</fo:block></fo:list-item-body></fo:list-item>
	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The last test to run is for system <fo:inline font-family="monospace">t3</fo:inline>. Here, all suites are skipped and this
	    is explicitly noted in the log files.</fo:block></fo:list-item-body></fo:list-item>
	  </fo:list-block>
	

	<fo:block id="idp2986272" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">The init Term</fo:block>
	  
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">With term <fo:inline font-family="monospace">init</fo:inline> it is possible to specify initialization options
	  for nodes defined in the test specification. There are options
	  to start the node and to evaluate any function on the node.
	  For details, see section <fo:inline font-style="italic">Automatic Startup of
	  Test Target Nodes</fo:inline> in section Using Common Test for Large Scale Testing.</fo:block>
	
	<fo:block id="idp2989056" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">User-Specific Terms</fo:block>
	  
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The user can provide a test specification including (for <fo:inline font-family="monospace">Common Test</fo:inline>) 
	  unrecognizable terms. If this is desired, use flag <fo:inline font-family="monospace">-allow_user_terms</fo:inline> 
	  when starting tests with <fo:inline font-family="monospace">ct_run</fo:inline>. This forces <fo:inline font-family="monospace">Common Test</fo:inline> to ignore 
	  unrecognizable terms. In this mode, <fo:inline font-family="monospace">Common Test</fo:inline> is not able to check the 
	  specification for errors as efficiently as if the scanner runs in default mode. 
	  If <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:run_test/1</fo:inline></fo:inline> is used
	  for starting the tests, the relaxed scanner mode is enabled by tuple
	  <fo:inline font-family="monospace">{allow_user_terms,true}</fo:inline>.</fo:block>
	
	<fo:block id="idp2994240" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Reading Test Specification Terms</fo:block>
	  
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Terms in the current test specification
	  (that is, the specification that has been used to configure and run the current test)
	  can be looked up.
	  The function <fo:inline font-style="italic"><fo:inline font-family="monospace">get_testspec_terms()</fo:inline></fo:inline> 
	  returns a list of all test specification terms (both configuration terms and test terms), 
	  and <fo:inline font-family="monospace">get_testspec_terms(Tags)</fo:inline> returns the term (or a list of terms) matching the 
	  tag (or tags) in <fo:inline font-family="monospace">Tags</fo:inline>.</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For example, in the test specification:</fo:block>
	  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 ...
 {label, my_server_smoke_test}.
 {config, "../../my_server_setup.cfg"}.
 {config, "../../my_server_interface.cfg"}.
 ...</fo:block>	    
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">And in, for example, a test suite or a <fo:inline font-family="monospace">Common Test Hook</fo:inline> function:</fo:block>
	  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 ...
 [{label,[{_Node,TestType}]}, {config,CfgFiles}] =
     ct:get_testspec_terms([label,config]),

 [verify_my_server_cfg(TestType, CfgFile) || {Node,CfgFile} &lt;- CfgFiles,
					     Node == node()];
 ...</fo:block>
	
  <fo:block id="idp3000384" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.8.9 
      Running Tests from the Web-Based GUI</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The web-based GUI, Virtual Test Server (VTS), is started with the
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_run</fo:inline></fo:inline>
      program. From the GUI, you can load configuration files and select
      directories, suites, and cases to run. You can also state the
      configuration files, directories, suites, and cases on the command line
      when starting the web-based GUI.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Examples:</fo:inline></fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ct_run -vts</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ct_run -vts -config &lt;configfilename&gt;</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ct_run -vts -config &lt;configfilename&gt; -suite &lt;suitewithfullpath&gt;
	      -case &lt;casename&gt;</fo:inline></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">From the GUI you can run tests and view the result and the logs.
    </fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ct_run -vts</fo:inline> tries to open the <fo:inline font-family="monospace">Common Test</fo:inline> start
      page in an existing web browser window, or start the browser if it is
      not running. Which browser to start can be specified with
      the browser start command option:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ct_run -vts -browser &lt;browser_start_cmd&gt;</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">$ ct_run -vts -browser 'firefox&amp;'</fo:inline></fo:block>

      <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The browser must run as a separate OS process, otherwise VTS hangs.</fo:block></fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If no specific browser start command is specified, Firefox is
        the default browser on Unix platforms, and Internet Explorer on Windows.
	If <fo:inline font-family="monospace">Common Test</fo:inline> fails to start a browser automatically, or <fo:inline font-family="monospace">none</fo:inline> is
	specified as the value for <fo:inline font-family="monospace">-browser</fo:inline> (that is, <fo:inline font-family="monospace">-browser none</fo:inline>), start your
	favourite browser manually and type the URL that <fo:inline font-family="monospace">Common Test</fo:inline>
	displays in the shell.</fo:block>    
  <fo:block id="idp3013744" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.8.10 
      Log Files</fo:block>
    
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As the execution of the test suites proceed, events are logged in
      the following four different ways:</fo:block>
      
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Text to the operator console.</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Suite-related information is sent to the major log file.</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Case-related information is sent to the minor log file.</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The HTML overview log file is updated with test results.</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A link to all runs executed from a certain directory is written in
	  the log named <fo:inline font-family="monospace">all_runs.html</fo:inline> and direct links to all tests (the
	  latest results) are written to the top-level <fo:inline font-family="monospace">index.html</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Typically the operator, possibly running hundreds or thousands of
	test cases, does not want to fill the console with details
	about, or printouts from, specific test cases. By default, the 
	operator only sees the following:</fo:block>
      
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A confirmation that the test has started and information about how 
	  many test cases are executed in total.</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A small note about each failed test case.</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A summary of all the run test cases.</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A confirmation when the test run is complete.</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Some special information, such as error reports, progress
	  reports, and printouts written with <fo:inline font-family="monospace">erlang:display/1</fo:inline>, or <fo:inline font-family="monospace">io:format/3</fo:inline>
	  specifically addressed to a receiver other than <fo:inline font-family="monospace">standard_io</fo:inline>
	  (for example, the default group leader process <fo:inline font-family="monospace">user</fo:inline>).</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To dig deeper into the general results, or
        the result of a specific test case, the operator can do so by
	following the links in the HTML presentation and read the
	major or minor log files. The "all_runs.html" page is a good
	starting point. It is located in <fo:inline font-family="monospace">logdir</fo:inline> and contains
	a link to each test run, including a quick overview (with date and time,
	node name, number of tests, test names, and test result totals).</fo:block>
	
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An "index.html" page is written for each test run (that is, stored in
	the <fo:inline font-family="monospace">ct_run</fo:inline> directory tagged with node name, date, and time). This
	file provides an overview of all individual tests performed in the 
	same test run. The test names follow the following convention:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">TopLevelDir.TestDir</fo:inline> (all suites in <fo:inline font-family="monospace">TestDir</fo:inline> executed)</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">TopLevelDir.TestDir:suites</fo:inline> (specific suites executed)</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">TopLevelDir.TestDir.Suite</fo:inline> (all cases in <fo:inline font-family="monospace">Suite</fo:inline> executed)</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">TopLevelDir.TestDir.Suite:cases</fo:inline> (specific test cases executed)</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">TopLevelDir.TestDir.Suite.Case</fo:inline> (only <fo:inline font-family="monospace">Case</fo:inline> executed)</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The "test run index" page includes a link to the <fo:inline font-family="monospace">Common Test</fo:inline>
        Framework Log file in which information about imported
        configuration data and general test progress is written. This
        log file is useful to get snapshot information about the test
        run during execution. It can also be helpful when
        analyzing test results or debugging test suites.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The "test run index" page indicates if a test has missing
        suites (that is, suites that <fo:inline font-family="monospace">Common Test</fo:inline> failed to
        compile). Names of the missing suites can be found in the
        <fo:inline font-family="monospace">Common Test</fo:inline> Framework Log file.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The major log file shows a detailed report of the test run. It
        includes test suite and test case names, execution time, the 
	exact reason for failures, and so on. The information is available in both
	a file with textual and with HTML representation. The HTML file shows a 
	summary that gives a good overview of the test run. It also has links 
	to each individual test case log file for quick viewing with an HTML 
	browser.</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The minor log files contain full details of every single test
	case, each in a separate file. This way, it is
	straightforward	to compare the latest results to that of previous
	test runs, even if the set of test cases changes. If application SASL
	is running, its logs are also printed to the current minor log file by the
	<fo:inline font-style="italic">
	  cth_log_redirect built-in hook</fo:inline>.
      </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The full name of the minor log file (that is, the name of the file
	including the absolute directory path) can be read during execution
	of the test case. It comes as value in tuple
	<fo:inline font-family="monospace">{tc_logfile,LogFileName}</fo:inline> in the <fo:inline font-family="monospace">Config</fo:inline> list (which means it
	can also be read by a pre- or post <fo:inline font-family="monospace">Common Test Hook</fo:inline> function). Also,
	at the start of a test case, this data is sent with an event
	to any installed event handler.	For details, see section
	<fo:inline font-style="italic">Event Handling</fo:inline>.
      </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The log files are written continuously during a test run and links are
	always created initially when a test starts. Thevtest progress can therefore 
	be followed simply by refreshing pages in the HTML browser.
	Statistics totals are not presented until a test is complete however.</fo:block>

	<fo:block id="idp3042416" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Log Options</fo:block>
	  
	  
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">With start flag <fo:inline font-family="monospace">logopts</fo:inline> options that modify some aspects 
	  of the logging behavior can be specified.
	  The following options are available:</fo:block>
	  <fo:block space-after="0.25em" space-before="0.25em">
	    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">no_src</fo:inline></fo:block>
	    <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The HTML version of the test suite source code is not 
	    generated during the test run (and is consequently not available 
	    in the log file system).</fo:block></fo:block></fo:block-container>
	    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">no_nl</fo:inline></fo:block>
	    <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Common Test</fo:inline> does not add a newline character <fo:inline font-family="monospace">(\n)</fo:inline> 
	    to the end of an output string that it receives from a call to, for example, 
	    <fo:inline font-family="monospace">io:format/2</fo:inline>, and which it prints to the test case log.</fo:block></fo:block></fo:block-container>
	    </fo:block>

	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For example, if a test is started with:</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">$ ct_run -suite my_SUITE -logopts no_src</fo:inline></fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">then printouts during the test made by successive calls to <fo:inline font-family="monospace">io:format("x")</fo:inline>,
	  appears in the test case log as:</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">xxx</fo:inline></fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">instead of each <fo:inline font-family="monospace">x</fo:inline> printed on a new line, which is the default behavior.</fo:block>
	

	<fo:block id="idp3052608" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Sorting HTML Table Columns</fo:block>
	  
	  
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By clicking the name in the column header of any table 
	    (for example, "Ok", "Case", "Time", and so on), the table rows are sorted 
	    in whatever order makes sense for the type of value (for example,
	    numerical for "Ok" or "Time", and alphabetical for "Case"). The sorting is 
	    performed through JavaScript code, automatically inserted into the HTML 
	    log files. <fo:inline font-family="monospace">Common Test</fo:inline> uses the <fo:inline font-weight="bold"><fo:basic-link external-destination="href">jQuery</fo:basic-link></fo:inline> 
	    library and the
	    <fo:inline font-weight="bold"><fo:basic-link external-destination="href">tablesorter</fo:basic-link></fo:inline> plugin, 
	    with customized sorting functions, for this implementation.</fo:block>
	

	<fo:block id="idp3056304" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">The Unexpected I/O Log</fo:block>
	  
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The test suites overview page includes a link to the Unexpected I/O Log.
	  In this log, <fo:inline font-family="monospace">Common Test</fo:inline> saves printouts made with
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:log/1,2,3,4,5</fo:inline></fo:inline> and 
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:pal/1,2,3,4,5</fo:inline></fo:inline>, as well as captured system 
	  error- and progress reports, which cannot be associated with particular test cases and
	  therefore cannot be written to individual test case log files. This occurs,
	  for example, if a log printout is made from an external process (not a test 
	  case process), <fo:inline font-weight="bold">or</fo:inline> if an error- or progress report comes in, during a short 
	  interval while <fo:inline font-family="monospace">Common Test</fo:inline> is not executing a test case or configuration 
	  function, <fo:inline font-weight="bold">or</fo:inline> while <fo:inline font-family="monospace">Common Test</fo:inline> is currently executing a parallel 
	  test case group.</fo:block>
	

	<fo:block id="idp3062672" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">The Pre- and Post Test I/O Log</fo:block>
	  
	  
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Common Test</fo:inline> Framework Log page includes links to the
	  Pre- and Post Test I/O Log. In this log, <fo:inline font-family="monospace">Common Test</fo:inline> saves printouts made 
	  with <fo:inline font-family="monospace">ct:log/1,2,3,4,5</fo:inline> and <fo:inline font-family="monospace">ct:pal/1,2,3,4,5</fo:inline>, as well as captured system error-
	  and progress reports, which take place before, and after, the test run.
	  Examples of this are printouts from a CT hook init- or terminate function, or
	  progress reports generated when an OTP application is started from a CT hook
	  init function. Another example is an error report generated because of
	  a failure when an external application is stopped from a CT hook terminate function.
	  All information in these examples ends up in the Pre- and Post Test I/O Log.
	  For more information on how to synchronize test runs with external user
	  applications, see section
	  <fo:inline font-style="italic">Synchronizing</fo:inline>
	  in section Common Test Hooks.</fo:block>
	  <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Logging to file with <fo:inline font-family="monospace">ct:log/1,2,3,4,5</fo:inline> or <fo:inline font-family="monospace">ct:pal/1,2,3,4,5</fo:inline>
	  only works when <fo:inline font-family="monospace">Common Test</fo:inline> is running. Printouts with <fo:inline font-family="monospace">ct:pal/1,2,3,4,5</fo:inline>
	  are however always displayed on screen.</fo:block></fo:block>
	

	<fo:block id="idp3070240" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Delete Old Logs</fo:block>
	  
	  
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Common Test</fo:inline> can automatically delete old log. This
	    is specified with the <fo:inline font-family="monospace">keep_logs</fo:inline> option. The default
	    value for this option is <fo:inline font-family="monospace">all</fo:inline>, which means that no
	    logs are deleted. If the value is set to an
	    integer, <fo:inline font-family="monospace">N</fo:inline>, <fo:inline font-family="monospace">Common Test</fo:inline> deletes
	    all <fo:inline font-family="monospace">ct_run.&lt;timestamp&gt;</fo:inline> directories, except
	    the <fo:inline font-family="monospace">N</fo:inline> newest.</fo:block>
	
      <fo:block id="idp3075440" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.8.11 
      HTML Style Sheets</fo:block>
	
	
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Common Test</fo:inline> uses an HTML Style Sheet (CSS file) to control the look of
	  the HTML log files generated during test runs. If the log files are not 
	  displayed correctly in the browser of your choice, or you prefer a more 
	  primitive ("pre <fo:inline font-family="monospace">Common Test</fo:inline> v1.6") look of the logs, use the start 
	  flag/option:</fo:block>
	  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 basic_html</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This disables the use of style sheets and JavaScripts (see
	  <fo:inline font-style="italic">Sorting HTML Table Columns</fo:inline>).</fo:block>
	  
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Common Test</fo:inline> includes an <fo:inline font-weight="bold">optional</fo:inline> feature to allow
	  user HTML style sheets for customizing printouts. The
	  functions in <fo:inline font-family="monospace">ct</fo:inline> that print to a test case HTML log
	  file (<fo:inline font-family="monospace">log/3,4,5</fo:inline> and <fo:inline font-family="monospace">pal/3,4,5</fo:inline>) accept <fo:inline font-family="monospace">Category</fo:inline>
	  as first argument. With this argument a category can be specified 
	  that can be mapped to a named <fo:inline font-family="monospace">div</fo:inline> selector in a CSS rule-set.
	  This is useful, especially for coloring text
	  differently depending on the type of (or reason for) the
	  printout. Say you want one particular background color for test system
	  configuration information, a different one for test system
	  state information, and finally one for errors detected by the
	  test case functions. The corresponding style sheet can
	  look as follows:</fo:block>

	<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 div.sys_config  { background:blue }
 div.sys_state   { background:yellow }
 div.error       { background:red }</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Common Test prints the text from <fo:inline font-family="monospace">ct:log/3,4,5</fo:inline> or
	<fo:inline font-family="monospace">ct:pal/3,4,5</fo:inline> inside a <fo:inline font-family="monospace">pre</fo:inline> element
	nested under the named <fo:inline font-family="monospace">div</fo:inline> element. Since the <fo:inline font-family="monospace">pre</fo:inline> selector
	has a predefined CSS rule (in file <fo:inline font-family="monospace">ct_default.css</fo:inline>) for the attributes
	<fo:inline font-family="monospace">color</fo:inline>, <fo:inline font-family="monospace">font-family</fo:inline> and <fo:inline font-family="monospace">font-size</fo:inline>, if a user wants to
	change any of the predefined attribute settings, a new rule for <fo:inline font-family="monospace">pre</fo:inline>
	must be added to the user stylesheet. Example:</fo:block>

	<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
div.error pre { color:white }</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here, white text is used instead of the default black for <fo:inline font-family="monospace">div.error</fo:inline>
	printouts (and no other attribute settings for <fo:inline font-family="monospace">pre</fo:inline> are affected).</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To install the CSS file (<fo:inline font-family="monospace">Common Test</fo:inline> inlines the definition in the 
	  HTML code), the file name can be provided when executing <fo:inline font-family="monospace">ct_run</fo:inline>.</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>

	<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 $ ct_run -dir $TEST/prog -stylesheet $TEST/styles/test_categories.css</fo:block>

	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Categories in a CSS file installed with flag <fo:inline font-family="monospace">-stylesheet</fo:inline>
	    are on a global test level in the sense that they can be used in any 
	    suite that is part of the test run.</fo:block>

	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Style sheets can also be installed on a per suite and
	  per test case basis.</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>

	<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 -module(my_SUITE).
 ...
 suite() -&gt; [..., {stylesheet,"suite_categories.css"}, ...].
 ...
 my_testcase(_) -&gt;
     ...
     ct:log(sys_config, "Test node version: ~p", [VersionInfo]),
     ...
     ct:log(sys_state, "Connections: ~p", [ConnectionInfo]),
     ...
     ct:pal(error, "Error ~p detected! Info: ~p", [SomeFault,ErrorInfo]),
     ct:fail(SomeFault).</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the style sheet is installed as in this example, the categories are 
	  private to the suite in question. They can be used by all test cases in the 
	  suite, but cannot be used by other suites. A suite private style sheet, 
	  if specified, is used in favor of a global style sheet (one specified 
	  with flag <fo:inline font-family="monospace">-stylesheet</fo:inline>). A stylesheet tuple (as returned by <fo:inline font-family="monospace">suite/0</fo:inline> 
	  above) can also be returned from a test case information function. In this case the 
	  categories specified in the style sheet can only be used in that particular 
	  test case. A test case private style sheet is used in favor of a suite or 
	  global level style sheet.
	</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In a tuple <fo:inline font-family="monospace">{stylesheet,CSSFile}</fo:inline>, if <fo:inline font-family="monospace">CSSFile</fo:inline> is specified
	  with a path, for example, <fo:inline font-family="monospace">"$TEST/styles/categories.css"</fo:inline>, this full
	  name is used to locate the file. However, if only the file name is specified,
	  for example, <fo:inline font-family="monospace">categories.css</fo:inline>, the CSS file is assumed to be located
	  in the data directory, <fo:inline font-family="monospace">data_dir</fo:inline>, of the suite. The latter use is
	  recommended, as it is portable compared to hard coding path names in the 
	  suite.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Argument <fo:inline font-family="monospace">Category</fo:inline> in the previous example can have the
	  value (atom) <fo:inline font-family="monospace">sys_config</fo:inline> (blue background), <fo:inline font-family="monospace">sys_state</fo:inline>
	  (yellow background), or <fo:inline font-family="monospace">error</fo:inline> (white text on red background).</fo:block>
  <fo:block id="idp3104208" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.8.12 
      Repeating Tests</fo:block>
    
        
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">You can order <fo:inline font-family="monospace">Common Test</fo:inline> to repeat the tests you specify. You can choose
       to repeat tests a number of times, repeat tests for a specific period of time, 
       or repeat tests until a particular stop time is reached. If repetition is controlled by
       time, an action for <fo:inline font-family="monospace">Common Test</fo:inline> to take upon time-out can be specified. 
       Either <fo:inline font-family="monospace">Common Test</fo:inline> performs all tests in the current run 
       before stopping, or it stops when the current test job is finished. Repetition 
       can be activated by <fo:inline font-family="monospace">ct_run</fo:inline> start flags, or tuples in the <fo:inline font-family="monospace">ct:run:test/1</fo:inline>
       option list argument. The flags (options in parentheses) are the following:</fo:block>
       <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">-repeat N ({repeat,N})</fo:inline>, where <fo:inline font-family="monospace">N</fo:inline> is a positive integer</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">-duration DurTime ({duration,DurTime})</fo:inline>, where <fo:inline font-family="monospace">DurTime</fo:inline> is the duration</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">-until StopTime ({until,StopTime})</fo:inline>, where <fo:inline font-family="monospace">StopTime</fo:inline> is finish time</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">-force_stop ({force_stop,true})</fo:inline></fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">-force_stop skip_rest ({force_stop,skip_rest})</fo:inline></fo:block></fo:list-item-body></fo:list-item>
       </fo:list-block>
	  <fo:block space-after="0.25em" space-before="0.25em">
	    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">DurTime</fo:inline></fo:block>
	    <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The duration time is specified as <fo:inline font-family="monospace">HHMMSS</fo:inline>, for example, <fo:inline font-family="monospace">-duration 012030</fo:inline> 
	    or <fo:inline font-family="monospace">{duration,"012030"}</fo:inline></fo:block>, which means that the tests are executed and 
	    (if time allows) repeated until time-out occurs after 1 hour, 20 minutes, and 30 seconds.
	    </fo:block></fo:block-container>
	    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">StopTime</fo:inline></fo:block>
	    <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The finish time can be specified as <fo:inline font-family="monospace">HHMMSS</fo:inline> and is then interpreted as a 
	    time today (or possibly tomorrow), but can also be specified as <fo:inline font-family="monospace">YYMoMoDDHHMMSS</fo:inline>,
	    for example, <fo:inline font-family="monospace">-until 071001120000</fo:inline> or <fo:inline font-family="monospace">{until,"071001120000"}</fo:inline>. This means
	    that the tests are executed and (if time allows) repeated, until 12 o'clock on the 1st 
	    of October 2007.</fo:block>
	    </fo:block></fo:block-container>
	  </fo:block>

       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When time-out occurs, <fo:inline font-family="monospace">Common Test</fo:inline> never aborts the ongoing test case,
          as this can leave the SUT in an undefined, and possibly bad, state.
	  Instead <fo:inline font-family="monospace">Common Test</fo:inline>, by default, finishes the current test
	  run before stopping. If flag <fo:inline font-family="monospace">force_stop</fo:inline> is
	  specified, <fo:inline font-family="monospace">Common Test</fo:inline> stops when the current test job
	  is finished. If flag <fo:inline font-family="monospace">force_stop</fo:inline> is specified with
	  <fo:inline font-family="monospace">skip_rest</fo:inline>, <fo:inline font-family="monospace">Common Test</fo:inline> only completes the current
	  test case and skips the remaining tests in the test job.</fo:block>
	  <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As <fo:inline font-family="monospace">Common Test</fo:inline> always finishes at least the current test case,
	  the time specified with <fo:inline font-family="monospace">duration</fo:inline> or <fo:inline font-family="monospace">until</fo:inline> is never definitive.</fo:block></fo:block>

       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Log files from every repeated test run is saved in normal <fo:inline font-family="monospace">Common Test</fo:inline> 
       fashion (described earlier).</fo:block>
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Common Test</fo:inline> might later support an optional feature to only store the last (and possibly 
       the first) set of logs of repeated test runs, but for now the user must be careful not 
       to run out of disk space if tests are repeated during long periods of time.</fo:block>

       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For each test run that is part of a repeated session, information about the
          particular test run is printed in the <fo:inline font-family="monospace">Common Test</fo:inline> Framework Log. The information
	  includes the repetition number, remaining time, and so on.</fo:block>

       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example 1:</fo:inline></fo:block>
       <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 $ ct_run -dir $TEST_ROOT/to1 $TEST_ROOT/to2 -duration 001000 -force_stop</fo:block>

       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here, the suites in test directory <fo:inline font-family="monospace">to1</fo:inline>, followed by the suites in <fo:inline font-family="monospace">to2</fo:inline>, are 
          executed in one test run. A time-out event occurs after 10 minutes. As long as there is 
	  time left, <fo:inline font-family="monospace">Common Test</fo:inline> repeats the test run (that is, starting over with test <fo:inline font-family="monospace">to1</fo:inline>). 
	  After time-out, <fo:inline font-family="monospace">Common Test</fo:inline> stops when the current job is finished
	  (because of flag <fo:inline font-family="monospace">force_stop</fo:inline>). As a result, the specified test run can be 
	  aborted after test <fo:inline font-family="monospace">to1</fo:inline> and before test <fo:inline font-family="monospace">to2</fo:inline>.</fo:block>

       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example 2:</fo:inline></fo:block>
       <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 $ ct_run -dir $TEST_ROOT/to1 $TEST_ROOT/to2 -duration 001000 -forces_stop skip_rest</fo:block>

       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here, the same tests as in Example 1 are run, but with flag <fo:inline font-family="monospace">force_stop</fo:inline> set to 
       <fo:inline font-family="monospace">skip_rest</fo:inline>. If time-out occurs while executing tests in directory <fo:inline font-family="monospace">to1</fo:inline>, 
          the remaining test cases in <fo:inline font-family="monospace">to1</fo:inline> are skipped and the test is aborted without 
	  running the tests in <fo:inline font-family="monospace">to2</fo:inline> another time. If time-out occurs while executing 
	  tests in directory <fo:inline font-family="monospace">to2</fo:inline>, the remaining test cases in <fo:inline font-family="monospace">to2</fo:inline> are skipped and 
	  the test is aborted.</fo:block>

       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example 3:</fo:inline></fo:block>
       <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 $ date
 Fri Sep 28 15:00:00 MEST 2007

 $ ct_run -dir $TEST_ROOT/to1 $TEST_ROOT/to2 -until 160000</fo:block>

       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here, the same test run as in the previous examples are executed (and possibly repeated). 
          However, when the time-out occurs, after 1 hour, <fo:inline font-family="monospace">Common Test</fo:inline> finishes the entire 
	  test run before stopping (that is, both <fo:inline font-family="monospace">to1</fo:inline> and <fo:inline font-family="monospace">to2</fo:inline> are always executed in 
          the same test run).</fo:block>
       
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example 4:</fo:inline></fo:block>
       <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 $ ct_run -dir $TEST_ROOT/to1 $TEST_ROOT/to2 -repeat 5</fo:block>

       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here, the test run, including both the <fo:inline font-family="monospace">to1</fo:inline> and the <fo:inline font-family="monospace">to2</fo:inline> test, is repeated 
          five times.</fo:block>

       <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Do not confuse this feature with the <fo:inline font-family="monospace">repeat</fo:inline> property of a test
          case group. The options described here are used to repeat execution of entire test runs,
	  while the <fo:inline font-family="monospace">repeat</fo:inline> property of a test case group makes it possible to repeat
	  execution of sets of test cases within a suite. For more information about the latter,
	  see section <fo:inline font-style="italic">Test Case Groups </fo:inline>
	  in section Writing Test Suites.</fo:block></fo:block>
  <fo:block id="idp3148064" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.8.13 
      Silent Connections</fo:block>
    
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The protocol handling processes in <fo:inline font-family="monospace">Common Test</fo:inline>, implemented by <fo:inline font-family="monospace">ct_telnet</fo:inline>,
      <fo:inline font-family="monospace">ct_ssh</fo:inline>, <fo:inline font-family="monospace">ct_ftp</fo:inline>, and so on, do verbose printing to the test case logs. 
      This can be switched off with flag <fo:inline font-family="monospace">-silent_connections</fo:inline>:</fo:block>
      
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 ct_run -silent_connections [conn_types]</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here, <fo:inline font-family="monospace">conn_types</fo:inline> specifies SSH, Telnet, FTP, RPC, and/or SNMP.</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example 1:</fo:inline></fo:block>
      
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 ct_run ... -silent_connections ssh telnet</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This switches off logging for SSH and Telnet connections.</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example 2:</fo:inline></fo:block>
      
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 ct_run ... -silent_connections</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This switches off logging for all connection types.</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Fatal communication error and reconnection attempts are always printed, even if 
         logging has been suppressed for the connection type in question. However, operations
         such as sending and receiving data are performed silently.</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">silent_connections</fo:inline> can also be specified in a test suite. This is
	accomplished by returning a tuple, <fo:inline font-family="monospace">{silent_connections,ConnTypes}</fo:inline>, in the
	<fo:inline font-family="monospace">suite/0</fo:inline> or test case information list. If <fo:inline font-family="monospace">ConnTypes</fo:inline> is a list of atoms 
	(SSH, Telnet, FTP, RPC and/or SNMP), output for any corresponding connections 
	are suppressed. Full logging is by default enabled for any connection of type not 
	specified in <fo:inline font-family="monospace">ConnTypes</fo:inline>. Hence, if <fo:inline font-family="monospace">ConnTypes</fo:inline> is the empty list, logging 
	is enabled for all connections.</fo:block>
      
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example 3:</fo:inline></fo:block>
      
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 -module(my_SUITE).

 suite() -&gt; [..., {silent_connections,[telnet,ssh]}, ...].

 ...

 my_testcase1() -&gt;
     [{silent_connections,[ssh]}].

 my_testcase1(_) -&gt;
     ...

 my_testcase2(_) -&gt;
     ...</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this example, <fo:inline font-family="monospace">suite/0</fo:inline> tells <fo:inline font-family="monospace">Common Test</fo:inline> to suppress
	printouts from Telnet and SSH connections. This is valid for
	all test cases. However, <fo:inline font-family="monospace">my_testcase1/0</fo:inline> specifies that
	for this test case, only SSH is to be silent. The result is
	that <fo:inline font-family="monospace">my_testcase1</fo:inline> gets Telnet information (if any) printed
	in the log, but not SSH information. <fo:inline font-family="monospace">my_testcase2</fo:inline> gets no
	information from either connection printed.</fo:block>
      
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">silent_connections</fo:inline> can also be specified with a term
	in a test specification
	(see section <fo:inline font-style="italic">Test
	Specifications</fo:inline> in section Running Tests and Analyzing Results).
	Connections provided with start	flag/option <fo:inline font-family="monospace">silent_connections</fo:inline>
	are merged with any connections listed in the test specification.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Start flag/option <fo:inline font-family="monospace">silent_connections</fo:inline> and the test
	specification term override any settings made by the information functions
	inside the test suite.</fo:block>
      
      <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the current <fo:inline font-family="monospace">Common Test</fo:inline> version, the
	<fo:inline font-family="monospace">silent_connections</fo:inline> feature only works for Telnet
	and SSH connections. Support for other connection types can be added
	in future <fo:inline font-family="monospace">Common Test</fo:inline> versions.</fo:block></fo:block>
      
  <fo:block id="idp3173376" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.9  External Configuration Data</fo:marker>1.9  External Configuration Data</fo:block><fo:block id="idp3176624" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.9.1 
      General</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To avoid hard-coding data values related to the test and/or System
    Under Test (SUT) in the test suites, the data can instead be specified through
    configuration files or strings that <fo:inline font-family="monospace">Common Test</fo:inline> reads before
    the start of a test run. External configuration data makes it possible to
    change test properties without modifying the test suites
    using the data. Examples of configuration data follows:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Addresses to the test plant or other instruments</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>User login information</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Names of files needed by the test</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Names of programs to be executed during the test</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Any other variable needed by the test</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

  <fo:block id="idp3181840" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.9.2 
      Syntax</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A configuration file can contain any number of elements of the type:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 {CfgVarName,Value}.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">where</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 CfgVarName = atom()
 Value = term() | [{CfgVarName,Value}]</fo:block>

  <fo:block id="idp3184624" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.9.3 
      Requiring and Reading Configuration Data</fo:block>
    
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In a test suite, one must <fo:inline font-weight="bold">require</fo:inline> that a configuration 
    variable (<fo:inline font-family="monospace">CfgVarName</fo:inline> in the previous definition) exists before
    attempting to read the associated value in a test case or configuration function.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">require</fo:inline> is an assert statement, which can be part of the <fo:inline font-style="italic">Test Suite Information Function</fo:inline> or
    <fo:inline font-style="italic">Test Case Information
    Function</fo:inline>. If the required variable is unavailable, the
    test is skipped (unless a default value has been specified, see section
    <fo:inline font-style="italic">Test Case Information
    Function</fo:inline> for details). Also, function
    <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:require/1/2</fo:inline></fo:inline> can be called 
    from a test case to check if a specific variable is available. The return 
    value from this function must be checked explicitly and appropriate 
    action be taken depending on the result (for example, to skip the test case
    if the variable in question does not exist).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-family="monospace">require</fo:inline> statement in the test suite information case or test case 
    information-list is to look like
    <fo:inline font-family="monospace">{require,CfgVarName}</fo:inline> or <fo:inline font-family="monospace">{require,AliasName,CfgVarName}</fo:inline>.
    The arguments <fo:inline font-family="monospace">AliasName</fo:inline> and <fo:inline font-family="monospace">CfgVarName</fo:inline> are the same as the
    arguments to <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:require/1,2</fo:inline></fo:inline>. 
    <fo:inline font-family="monospace">AliasName</fo:inline> becomes an alias for the configuration variable,
    and can be used as reference to the configuration data value.
    The configuration variable can be associated with any
    number of alias names, but each name must be unique within
    the same test suite. The two main uses for alias names follows:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>To identify connections (described later).</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>To help adapt configuration data to a test suite 
        (or test case) and improve readability.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To read the value of a configuration variable, use function
    <fo:inline font-style="italic"><fo:inline font-family="monospace">get_config/1,2,3</fo:inline></fo:inline>.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 suite() -&gt; 
     [{require, domain, 'CONN_SPEC_DNS_SUFFIX'}].

 ...

 testcase(Config) -&gt;
     Domain = ct:get_config(domain),
     ...</fo:block>      
  <fo:block id="idp3200496" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.9.4 
      Using Configuration Variables Defined in Multiple Files</fo:block>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a configuration variable is defined in multiple files and you 
      want to access all possible values, use function
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:get_config/3</fo:inline></fo:inline>
      and specify <fo:inline font-family="monospace">all</fo:inline> in the options list. The values are then
      returned in a list and the order of the elements corresponds to the order 
      that the configuration files were specified at startup.</fo:block>
  <fo:block id="idp3203456" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.9.5 
      Encrypted Configuration Files</fo:block>
    
    
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Configuration files containing sensitive data can be encrypted 
      if they must be stored in open and shared directories.</fo:block> 
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To have <fo:inline font-family="monospace">Common Test</fo:inline> encrypt a
      specified file using function <fo:inline font-family="monospace">DES3</fo:inline> in application <fo:inline font-family="monospace">Crypto</fo:inline>,
      call <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:encrypt_config_file/2,3</fo:inline></fo:inline>
      The encrypted file can then be used as a regular configuration file
      in combination with other encrypted files or normal text files. However, the 
      key for decrypting the configuration file must be provided when running the test.
      This can be done with flag/option <fo:inline font-family="monospace">decrypt_key</fo:inline> or
      <fo:inline font-family="monospace">decrypt_file</fo:inline>, or a key file in a predefined location.</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Common Test</fo:inline> also provides decryption functions, 
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:decrypt_config_file/2,3</fo:inline></fo:inline>, 
      for recreating the original text files.</fo:block> 
  <fo:block id="idp3211072" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.9.6 
      Opening Connections Using Configuration Data</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Two different methods for opening a connection using the support functions 
       in, for example, <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_ssh</fo:inline></fo:inline>, 
       <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_ftp</fo:inline></fo:inline>, and 
    <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_telnet</fo:inline></fo:inline> follows:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Using a configuration target name (an alias) as reference.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Using the configuration variable as reference.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a target name is used for referencing the configuration data
      (that specifies the connection to be opened), the same name can be used 
      as connection identity in all subsequent calls related to the connection
      (also for closing it). Only one open connection per target name 
      is possible. If you attempt to open a new connection using a name
      already associated with an open connection, <fo:inline font-family="monospace">Common Test</fo:inline>
      returns the already existing handle so the previously opened connection
      is used. This feature makes it possible to
      call the function for opening a particular connection whenever 
      useful. An action like this does not necessarily open any new 
      connections unless it is required (which could be the case if, for example,
      the previous connection has been closed unexpectedly by the server).
      Using named connections also removes the need to pass handle references 
      around in the suite for these connections.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a configuration variable name is used as reference to the data
      specifying the connection, the handle returned as a result of opening
      the connection must be used in all subsequent calls (also for closing
      the connection). Repeated calls to the open function with the same
      variable name as reference results in multiple connections being opened. 
      This can be useful, for example, if a test case needs to open
      multiple connections to the same server on the target node (using the
      same configuration data for each connection).
    </fo:block>
  <fo:block id="idp3219616" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.9.7 
      User-Specific Configuration Data Formats</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The user can specify configuration data on a
      different format than key-value tuples in a text file, as described
      so far. The data can, for example, be read from any files, fetched from
      the web over HTTP, or requested from a user-specific process.
      To support this, <fo:inline font-family="monospace">Common Test</fo:inline> provides a callback module plugin
      mechanism to handle configuration data.</fo:block>

    <fo:block id="idp3221616" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Default Callback Modules for Handling Configuration Data</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Common Test</fo:inline> includes default callback modules
	for handling configuration data specified in standard configuration files
	(described earlier) and in XML files as follows:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:inline font-family="monospace">ct_config_plain</fo:inline> - for reading configuration files with
          key-value tuples (standard format). This handler is used to
          parse configuration files if no user callback is specified.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:inline font-family="monospace">ct_config_xml</fo:inline> - for reading configuration data from XML
          files.
        </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
    

    <fo:block id="idp3226176" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Using XML Configuration Files</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An example of an XML configuration file follows:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 
 &lt;config&gt;
    &lt;ftp_host&gt;
        &lt;ftp&gt;"targethost"&lt;/ftp&gt;
        &lt;username&gt;"tester"&lt;/username&gt;
        &lt;password&gt;"letmein"&lt;/password&gt;
    &lt;/ftp_host&gt;
    &lt;lm_directory&gt;"/test/loadmodules"&lt;/lm_directory&gt;
 &lt;/config&gt;</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Once read, this file produces the same configuration
      variables as the following text file:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 {ftp_host, [{ftp,"targethost"},
             {username,"tester"},
             {password,"letmein"}]}.

 {lm_directory, "/test/loadmodules"}.</fo:block>
    

    <fo:block id="idp3229328" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Implement a User-Specific Handler</fo:block>
      

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The user-specific handler can be written to handle special
	configuration file formats. The parameter can be either file
	names or configuration strings (the empty list is valid).</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The callback module implementing the handler is responsible for
	checking the correctness of configuration strings.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To validate the configuration strings, the callback module
	is to have function <fo:inline font-family="monospace">Callback:check_parameter/1</fo:inline> exported.</fo:block>

       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The input argument is passed from <fo:inline font-family="monospace">Common Test</fo:inline>, as defined in the test
	specification, or specified as an option to <fo:inline font-family="monospace">ct_run</fo:inline> or <fo:inline font-family="monospace">ct:run_test</fo:inline>.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The return value is to be any of the following values, indicating if the specified
	configuration parameter is valid:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:inline font-family="monospace">{ok, {file, FileName}}</fo:inline> - the parameter is a file name and
          the file exists.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:inline font-family="monospace">{ok, {config, ConfigString}}</fo:inline> - the parameter is a configuration string
          and it is correct.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:inline font-family="monospace">{error, {nofile, FileName}}</fo:inline> - there is no file with the specified
          name in the current directory.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:inline font-family="monospace">{error, {wrong_config, ConfigString}}</fo:inline> - the configuration string
          is wrong.
        </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function <fo:inline font-family="monospace">Callback:read_config/1</fo:inline> is to be exported from the 
         callback module to read configuration data, initially before the tests
         start, or as a result of data being reloaded during test execution.
         The input argument is the same as for function <fo:inline font-family="monospace">check_parameter/1</fo:inline>.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The return value is to be either of the following:</fo:block>

      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:inline font-family="monospace">{ok, Config}</fo:inline> - if the configuration variables are read successfully.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:inline font-family="monospace">{error, {Error, ErrorDetails}}</fo:inline> - if the callback module fails to
          proceed with the specified configuration parameters.
        </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Config</fo:inline> is the proper Erlang key-value list, with possible
	key-value sublists as values, like the earlier configuration file
	example:</fo:block>

      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 [{ftp_host, [{ftp, "targethost"}, {username, "tester"}, {password, "letmein"}]},
  {lm_directory, "/test/loadmodules"}]</fo:block>

    

  <fo:block id="idp3245648" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.9.8 
      Examples of Configuration Data Handling</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A configuration file for using the FTP client to access files on a remote
      host can look as follows:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 {ftp_host, [{ftp,"targethost"},
	     {username,"tester"},
	     {password,"letmein"}]}.

 {lm_directory, "/test/loadmodules"}.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The XML version shown earlier can also be used, but it is to be
    explicitly specified that the <fo:inline font-family="monospace">ct_config_xml</fo:inline> callback module is to be
    used by <fo:inline font-family="monospace">Common Test</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following is an example of how to assert that the configuration data is available
      and can be used for an FTP session:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 init_per_testcase(ftptest, Config) -&gt;
     {ok,_} = ct_ftp:open(ftp),
     Config.

 end_per_testcase(ftptest, _Config) -&gt;
     ct_ftp:close(ftp).

 ftptest() -&gt;
     [{require,ftp,ftp_host},
      {require,lm_directory}].

 ftptest(Config) -&gt;
     Remote = filename:join(ct:get_config(lm_directory), "loadmodX"),
     Local = filename:join(?config(priv_dir,Config), "loadmodule"),
     ok = ct_ftp:recv(ftp, Remote, Local),
     ...</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following is an example of how the functions in the previous example 
       can be rewritten if it is necessary to open multiple connections to the 
       FTP server:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 init_per_testcase(ftptest, Config) -&gt;
     {ok,Handle1} = ct_ftp:open(ftp_host),
     {ok,Handle2} = ct_ftp:open(ftp_host),
     [{ftp_handles,[Handle1,Handle2]} | Config].

 end_per_testcase(ftptest, Config) -&gt;
     lists:foreach(fun(Handle) -&gt; ct_ftp:close(Handle) end, 
                   ?config(ftp_handles,Config)).

 ftptest() -&gt;
     [{require,ftp_host},
      {require,lm_directory}].

 ftptest(Config) -&gt;
     Remote = filename:join(ct:get_config(lm_directory), "loadmodX"),
     Local = filename:join(?config(priv_dir,Config), "loadmodule"),
     [Handle | MoreHandles] = ?config(ftp_handles,Config),
     ok = ct_ftp:recv(Handle, Remote, Local),
     ...</fo:block>
      
  <fo:block id="idp3252240" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.9.9 
      Example of User-Specific Configuration Handler</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A simple configuration handling driver, asking an external server for
      configuration data, can be implemented as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 -module(config_driver).
 -export([read_config/1, check_parameter/1]).

 read_config(ServerName)-&gt;
     ServerModule = list_to_atom(ServerName),
     ServerModule:start(),
     ServerModule:get_config().

 check_parameter(ServerName)-&gt;
     ServerModule = list_to_atom(ServerName),
     case code:is_loaded(ServerModule) of
         {file, _}-&gt;
             {ok, {config, ServerName}};
         false-&gt;
             case code:load_file(ServerModule) of
                 {module, ServerModule}-&gt;
                     {ok, {config, ServerName}};
                 {error, nofile}-&gt;
                     {error, {wrong_config, "File not found: " ++ ServerName ++ ".beam"}}
             end
     end.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The configuration string for this driver can be <fo:inline font-family="monospace">config_server</fo:inline>, if the
      <fo:inline font-family="monospace">config_server.erl</fo:inline> module that follows is compiled and exists in the code path
      during test execution:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 -module(config_server).
 -export([start/0, stop/0, init/1, get_config/0, loop/0]).

 -define(REGISTERED_NAME, ct_test_config_server).

 start()-&gt;
     case whereis(?REGISTERED_NAME) of
         undefined-&gt;
             spawn(?MODULE, init, [?REGISTERED_NAME]),
             wait();
         _Pid-&gt;
         ok
     end,
     ?REGISTERED_NAME.

 init(Name)-&gt;
     register(Name, self()),
     loop().

 get_config()-&gt;
     call(self(), get_config).

 stop()-&gt;
     call(self(), stop).

 call(Client, Request)-&gt;
     case whereis(?REGISTERED_NAME) of
         undefined-&gt;
             {error, {not_started, Request}};
         Pid-&gt;
             Pid ! {Client, Request},
             receive
                 Reply-&gt;
                     {ok, Reply}
             after 4000-&gt;
                 {error, {timeout, Request}}
             end
     end.

 loop()-&gt;
     receive
         {Pid, stop}-&gt;
             Pid ! ok;
         {Pid, get_config}-&gt;
             {D,T} = erlang:localtime(),
             Pid !
                 [{localtime, [{date, D}, {time, T}]},
                  {node, erlang:node()},
                  {now, erlang:now()},
                  {config_server_pid, self()},
                  {config_server_vsn, ?vsn}],
             ?MODULE:loop()
     end.

 wait()-&gt;
     case whereis(?REGISTERED_NAME) of
         undefined-&gt;
             wait();
         _Pid-&gt;
             ok
     end.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here, the handler also provides for dynamically reloading of
      configuration variables. If 
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:reload_config(localtime)</fo:inline></fo:inline> is called from
      the test case function, all variables loaded with <fo:inline font-family="monospace">config_driver:read_config/1</fo:inline>
      are updated with their latest values, and the new value for variable
      <fo:inline font-family="monospace">localtime</fo:inline> is returned.</fo:block>
  <fo:block id="idp3264512" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.10  Code Coverage Analysis</fo:marker>1.10  Code Coverage Analysis</fo:block><fo:block id="idp3267728" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.10.1 
      General</fo:block>
    
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Although <fo:inline font-family="monospace">Common Test</fo:inline> was created primarily for
	black-box testing, nothing prevents it from working perfectly as
	a white-box testing tool as well. This is especially true when
	the application to test is written in Erlang. Then the test
	ports are easily realized with Erlang function calls.</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When white-box testing an Erlang application, it is useful to
	be able to measure the code coverage of the test. <fo:inline font-family="monospace">Common Test</fo:inline>
	provides simple access to the OTP Cover tool for this
	purpose. <fo:inline font-family="monospace">Common Test</fo:inline> handles all necessary communication with
	the Cover tool (starting, compiling, analysing, and so on).
	The <fo:inline font-family="monospace">Common Test</fo:inline> user only needs to specify the extent of the
	code coverage analysis.</fo:block>
  <fo:block id="idp3271856" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.10.2 
      Use</fo:block>
     
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To specify the modules to be included in the code coverage test, 
    provide a cover specification file. With this file you can point 
    out specific modules or specify directories containing modules to be
    included in the analysis. You can also specify modules to be excluded 
    from the analysis.</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you are testing a distributed Erlang application, it is
      likely that code you want included in the code coverage analysis
      gets executed on another Erlang node than the one <fo:inline font-family="monospace">Common Test</fo:inline>
      is running on. If so, you must specify these other nodes in the 
      cover specification file or add them dynamically to the code coverage 
      set of nodes. For details on the latter, see module 
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_cover</fo:inline></fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the cover specification file you can also specify your
      required level of the code coverage analysis; <fo:inline font-family="monospace">details</fo:inline> or
      <fo:inline font-family="monospace">overview</fo:inline>. In detailed mode, you get a coverage overview
      page, showing per module and total coverage percentages.
      You also get an HTML file printed for each module included in the
      analysis showing exactly what parts of the code have been
      executed during the test. In overview mode, only the code
      coverage overview page is printed.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">You can choose to export and import code coverage data between
      tests. If you specify the name of an export file in the cover
      specification file, <fo:inline font-family="monospace">Common Test</fo:inline> exports collected coverage
      data to this file at the end of the test. You can similarly
      specify previously exported data to be imported and
      included in the analysis for a test (multiple import files can be specified). 
      This way, the total code coverage can be analyzed without necessarily 
      running all tests at once.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To activate the code coverage support, specify the name of the cover 
      specification file as you start <fo:inline font-family="monospace">Common Test</fo:inline>.
      Do this by using flag <fo:inline font-family="monospace">-cover</fo:inline> with 
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_run</fo:inline></fo:inline>, 
      for example:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 $ ct_run -dir $TESTOBJS/db -cover $TESTOBJS/db/config/db.coverspec</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">You can also pass the cover specification file name in a
      call to <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:run_test/1</fo:inline></fo:inline>, 
      by adding a <fo:inline font-family="monospace">{cover,CoverSpec}</fo:inline> tuple to argument <fo:inline font-family="monospace">Opts</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">You can also enable code coverage in your test specifications (see section 
      <fo:inline font-style="italic">Test Specifications</fo:inline>
      in section Running Tests and Analyzing Results).</fo:block>
  <fo:block id="idp3285632" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.10.3 
      Stopping the Cover Tool When Tests Are Completed</fo:block>
  
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By default, the Cover tool is automatically stopped when the
      tests are completed. This causes the original (non-cover
      compiled) modules to be loaded back into the test node. If a
      process at this point still runs old code of any of the
      modules that are cover compiled, meaning that it has not done
      any fully qualified function call after the cover compilation,
      the process is killed. To avoid this, set the value of option 
      <fo:inline font-family="monospace">cover_stop</fo:inline> to <fo:inline font-family="monospace">false</fo:inline>. This means that the 
      modules stay cover compiled. Therefore, this is only recommended 
      if the Erlang nodes under test are terminated after the test is 
      completed, or if cover can be manually stopped.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The option can be set by using flag <fo:inline font-family="monospace">-cover_stop</fo:inline> with
      <fo:inline font-family="monospace">ct_run</fo:inline>, by adding <fo:inline font-family="monospace">{cover_stop,true|false}</fo:inline> to argument
      <fo:inline font-family="monospace">Opts</fo:inline> to 
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:run_test/1</fo:inline></fo:inline>, 
      or by adding a <fo:inline font-family="monospace">cover_stop</fo:inline> term in the test specification (see section
      <fo:inline font-style="italic">Test Specifications</fo:inline>
      in section Running Tests and Analyzing Results).</fo:block>

  <fo:block id="idp3292928" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.10.4 
      The Cover Specification File</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following terms are allowed in a cover specification file:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 %% List of Nodes on which cover will be active during test.
 %% Nodes = [atom()]
 {nodes, Nodes}.       

 %% Files with previously exported cover data to include in analysis.
 %% CoverDataFiles = [string()]
 {import, CoverDataFiles}.

 %% Cover data file to export from this session.
 %% CoverDataFile = string()
 {export, CoverDataFile}.

 %% Cover analysis level.
 %% Level = details | overview
 {level, Level}.       

 %% Directories to include in cover.
 %% Dirs = [string()]
 {incl_dirs, Dirs}.

 %% Directories, including subdirectories, to include.
 {incl_dirs_r, Dirs}.

 %% Specific modules to include in cover.
 %% Mods = [atom()]
 {incl_mods, Mods}.

 %% Directories to exclude in cover.
 {excl_dirs, Dirs}.

 %% Directories, including subdirectories, to exclude.
 {excl_dirs_r, Dirs}.

 %% Specific modules to exclude in cover.
 {excl_mods, Mods}.

 %% Cross cover compilation
 %% Tag = atom(), an identifier for a test run
 %% Mod = [atom()], modules to compile for accumulated analysis
 {cross,[{Tag,Mods}]}.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The terms <fo:inline font-family="monospace">incl_dirs_r</fo:inline> and <fo:inline font-family="monospace">excl_dirs_r</fo:inline> tell <fo:inline font-family="monospace">Common
      Test</fo:inline> to search the specified directories recursively and include 
      or exclude any module found during the search. The terms
      <fo:inline font-family="monospace">incl_dirs</fo:inline> and <fo:inline font-family="monospace">excl_dirs</fo:inline> result in a
      non-recursive search for modules (that is, only modules found in 
      the specified directories are included or excluded).</fo:block>
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Directories containing Erlang modules to be included in a code 
      coverage test must exist in the code server path. Otherwise, 
      the Cover tool fails to recompile the modules. It is not sufficient to 
      specify these directories in the cover specification file for 
      <fo:inline font-family="monospace">Common Test</fo:inline>.</fo:block></fo:block>
  <fo:block id="idp3300576" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.10.5 
      Cross Cover Analysis</fo:block>
  
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The cross cover mechanism allows cover analysis of modules
    across multiple tests. It is useful if some code, for example, a 
    library module, is used by many different tests and the accumulated 
    cover result is desirable.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This can also be achieved in a more customized way by
    using parameter <fo:inline font-family="monospace">export</fo:inline> in the cover specification and
    analysing the result off line. However, the cross cover mechanism is a
    built-in solution that also provides logging.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The mechanism is easiest explained by an example:</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Assume that there are two systems, <fo:inline font-family="monospace">s1</fo:inline> and <fo:inline font-family="monospace">s2</fo:inline>,
    that are tested in separate test runs. System <fo:inline font-family="monospace">s1</fo:inline> contains
    a library module <fo:inline font-family="monospace">m1</fo:inline> tested by test run <fo:inline font-family="monospace">s1</fo:inline> and 
    is included in the cover specification of <fo:inline font-family="monospace">s1</fo:inline> as follows:</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 s1.cover:
   {incl_mods,[m1]}.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When analysing code coverage, the result for <fo:inline font-family="monospace">m1</fo:inline> can be
    seen in the cover log in the <fo:inline font-family="monospace">s1</fo:inline> test result.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Now, imagine that as <fo:inline font-family="monospace">m1</fo:inline> is a library module, it
    is also often used by system <fo:inline font-family="monospace">s2</fo:inline>. Test run <fo:inline font-family="monospace">s2</fo:inline>
    does not specifically test <fo:inline font-family="monospace">m1</fo:inline>, but it can still be
    interesting to see which parts of <fo:inline font-family="monospace">m1</fo:inline> that are covered 
    by the <fo:inline font-family="monospace">s2</fo:inline> tests. To do this, <fo:inline font-family="monospace">m1</fo:inline> can be included also
    in the cover specification of <fo:inline font-family="monospace">s2</fo:inline> as follows:</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 s2.cover:
   {incl_mods,[m1]}.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This gives an entry for <fo:inline font-family="monospace">m1</fo:inline> also in the cover log
    for test run <fo:inline font-family="monospace">s2</fo:inline>. The problem is that this only
    reflects the coverage by <fo:inline font-family="monospace">s2</fo:inline> tests, not the accumulated
    result over <fo:inline font-family="monospace">s1</fo:inline> and <fo:inline font-family="monospace">s2</fo:inline>. This is where the cross
    cover mechanism comes in handy.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If instead the cover specification for <fo:inline font-family="monospace">s2</fo:inline> is like
    the following:</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 s2.cover:
   {cross,[{s1,[m1]}]}.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Then <fo:inline font-family="monospace">m1</fo:inline> is cover compiled in test run <fo:inline font-family="monospace">s2</fo:inline>,
    but not shown in the coverage log. Instead, if
    <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_cover:cross_cover_analyse/2</fo:inline></fo:inline> 
    is called after both <fo:inline font-family="monospace">s1</fo:inline> and <fo:inline font-family="monospace">s2</fo:inline> test runs are completed, 
    the accumulated result for <fo:inline font-family="monospace">m1</fo:inline> is available in the cross cover 
    log for test run <fo:inline font-family="monospace">s1</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The call to the analyze function must be as follows:</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 ct_cover:cross_cover_analyse(Level, [{s1,S1LogDir},{s2,S2LogDir}]).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here, <fo:inline font-family="monospace">S1LogDir</fo:inline> and <fo:inline font-family="monospace">S2LogDir</fo:inline> are the directories
    named <fo:inline font-family="monospace">&lt;TestName&gt;.logs</fo:inline> for each test respectively.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice the tags <fo:inline font-family="monospace">s1</fo:inline> and <fo:inline font-family="monospace">s2</fo:inline>, which are used in the
    cover specification file and in the call to
    <fo:inline font-family="monospace">ct_cover:cross_cover_analyse/2</fo:inline>. The purpose of these is only
    to map the modules specified in the cover specification to the log
    directory specified in the call to the analyze function. The tag name
    has no meaning beyond this.</fo:block>

  <fo:block id="idp3327888" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.10.6 
      Logging</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To view the result of a code coverage test, click the button
      labeled "COVER LOG" in the top-level index page for the test run.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Before Erlang/OTP 17.1, if your test run consisted of
      multiple tests, cover would be started and stopped for each test
      within the test run. Separate logs would be available through the
      "Coverage log" link on the test suite result pages. These links
      are still available, but now they all point to the same page as
      the button on the top-level index page. The log contains the
      accumulated results for the complete test run. For details about 
      this change, see the release notes.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The button takes you to the code coverage overview page. If you
      have successfully performed a detailed coverage analysis,
      links to each individual module coverage page are found here.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If cross cover analysis is performed, and there are
      accumulated coverage results for the current test, the link
      "Coverdata collected over all tests" takes you to these
      results.</fo:block>
  <fo:block id="idp3335456" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.11  Using Common Test for Large-Scale Testing</fo:marker>1.11  Using Common Test for Large-Scale Testing</fo:block><fo:block id="idp3338704" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.11.1 
      General</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Large-scale automated testing requires running multiple independent 
      test sessions in parallel. This is accomplished by running
      some <fo:inline font-family="monospace">Common Test</fo:inline> nodes on one or more hosts, testing
      different target systems. Configuring, starting, and controlling the
      test nodes independently can be a cumbersome operation. To aid
      this kind of automated large-scale testing, <fo:inline font-family="monospace">Common Test</fo:inline> offers a master 
      test node component, <fo:inline font-family="monospace">Common Test</fo:inline> Master, which handles central configuration and control
      in a system of distributed <fo:inline font-family="monospace">Common Test</fo:inline> nodes.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Common Test</fo:inline> Master server runs on one dedicated Erlang node and uses distributed
      Erlang to communicate with any number of <fo:inline font-family="monospace">Common Test</fo:inline> test nodes, each hosting a regular
      <fo:inline font-family="monospace">Common Test</fo:inline> server. Test specifications are used as input to specify what to test on which 
      test nodes, using what configuration.</fo:block> 

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Common Test</fo:inline> Master server writes progress information to HTML log files similarly 
      to the regular <fo:inline font-family="monospace">Common Test</fo:inline> server. The logs contain test statistics and links to the 
      log files written by each independent <fo:inline font-family="monospace">Common Test</fo:inline> server.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Common Test</fo:inline> Master API is exported by module 
    <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_master</fo:inline></fo:inline>.</fo:block>
  <fo:block id="idp3348048" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.11.2 
      Use</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Common Test</fo:inline> Master requires all test nodes to be on the same network and share a common 
      file system. <fo:inline font-family="monospace">Common Test</fo:inline> Master cannot start test nodes
      automatically. The nodes must be started in advance for <fo:inline font-family="monospace">Common Test</fo:inline> Master to be 
      able to start test sessions on them.</fo:block>
      
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tests are started by calling 
     <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_master:run(TestSpecs)</fo:inline></fo:inline> or 
     <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_master:run(TestSpecs, InclNodes, ExclNodes)</fo:inline></fo:inline></fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">TestSpecs</fo:inline> is either the name of a test specification file (string) or a list 
      of test specifications. If it is a list, the specifications are handled (and
      the corresponding tests executed) in sequence. An element in a <fo:inline font-family="monospace">TestSpecs</fo:inline> list 
      can also be list of test specifications. The specifications in such a list are 
      merged into one combined specification before test execution.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>  
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 ct_master:run(["ts1","ts2",["ts3","ts4"]])</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here, the tests specified by "ts1" run first, then the tests specified by "ts2",
      and finally the tests specified by both "ts3" and "ts4".</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">InclNodes</fo:inline> argument to <fo:inline font-family="monospace">run/3</fo:inline> is a list of node names. Function
      <fo:inline font-family="monospace">run/3</fo:inline> runs the tests in <fo:inline font-family="monospace">TestSpecs</fo:inline> just like <fo:inline font-family="monospace">run/1</fo:inline>, but also 
      takes any test in <fo:inline font-family="monospace">TestSpecs</fo:inline>, which is not explicitly tagged with a particular 
      node name, and execute it on the nodes listed in <fo:inline font-family="monospace">InclNodes</fo:inline>. By using <fo:inline font-family="monospace">run/3</fo:inline> 
      this way, any test specification can be used, with or without node information, 
      in a large-scale test environment.</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ExclNodes</fo:inline> is a list of nodes to be
      excluded from the test. That is, tests that are specified in the test specification 
      to run on a particular node are not performed if that node is 
      listed in <fo:inline font-family="monospace">ExclNodes</fo:inline> at runtime.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Common Test</fo:inline> Master fails initially to connect to any of the test nodes specified in a 
      test specification or in the <fo:inline font-family="monospace">InclNodes</fo:inline> list, the operator is prompted with 
      the option to either start over again (after manually checking the status of the 
      nodes in question), to run without the missing nodes, or to abort the operation.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When tests start, <fo:inline font-family="monospace">Common Test</fo:inline> Master displays information to console about the involved nodes.  
      <fo:inline font-family="monospace">Common Test</fo:inline> Master also reports when tests finish, successfully or unsuccessfully. If
      connection is lost to a node, the test on that node is considered finished. <fo:inline font-family="monospace">Common Test</fo:inline> Master 
      does not attempt to re-establish contact with the failing node.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">At any time, to get the current status of the test nodes, call function 
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_master:progress()</fo:inline></fo:inline>.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To stop one or more tests, use function
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_master:abort()</fo:inline></fo:inline> (to stop all) or
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_master:abort(Nodes)</fo:inline></fo:inline>.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details about the <fo:inline font-family="monospace">Common Test</fo:inline> Master API, see module
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_master</fo:inline></fo:inline>.</fo:block>
  <fo:block id="idp3371232" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.11.3 
      Test Specifications</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The test specifications used as input to <fo:inline font-family="monospace">Common Test</fo:inline> Master are fully compatible with the
    specifications used as input to the regular <fo:inline font-family="monospace">Common Test</fo:inline> server. The syntax is described in section 
    <fo:inline font-style="italic">Test Specifications</fo:inline>
    in section Running Tests and Analyzing Results.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All test specification terms can have a <fo:inline font-family="monospace">NodeRefs</fo:inline> element. This element
    specifies which node or nodes a configuration operation or a test is to be executed 
    on. <fo:inline font-family="monospace">NodeRefs</fo:inline> is defined as follows:</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">NodeRefs = all_nodes | [NodeRef] | NodeRef</fo:inline></fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">NodeRef = NodeAlias | node() | master</fo:inline></fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-family="monospace">NodeAlias</fo:inline> (<fo:inline font-family="monospace">atom()</fo:inline>) is used in a test specification as a 
    reference to a node name (so the node name only needs to be declared once,
    which also can be achieved using constants). 
    The alias is declared with a <fo:inline font-family="monospace">node</fo:inline> term as follows:</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{node, NodeAlias, NodeName}</fo:inline></fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">NodeRefs</fo:inline> has the value <fo:inline font-family="monospace">all_nodes</fo:inline>, the operation or test
    is performed on all specified test nodes. (Declaring a term without a <fo:inline font-family="monospace">NodeRefs</fo:inline> 
    element has the same effect). If <fo:inline font-family="monospace">NodeRefs</fo:inline> has the value 
    <fo:inline font-family="monospace">master</fo:inline>, the operation is only performed on the <fo:inline font-family="monospace">Common Test</fo:inline> Master node (namely set 
    the log directory or install an event handler).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Consider the example in section 
    <fo:inline font-style="italic">Test Specifications</fo:inline>
    in section Running Tests and Analysing Results,
     now extended with node information and intended to be executed by
    <fo:inline font-family="monospace">Common Test</fo:inline> Master:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 {define, 'Top', "/home/test"}.
 {define, 'T1', "'Top'/t1"}.
 {define, 'T2', "'Top'/t2"}.
 {define, 'T3', "'Top'/t3"}.
 {define, 'CfgFile', "config.cfg"}.
 {define, 'Node', ct_node}.

 {node, node1, 'Node@host_x'}.
 {node, node2, 'Node@host_y'}.

 {logdir, master, "'Top'/master_logs"}.
 {logdir, "'Top'/logs"}.

 {config, node1, "'T1'/'CfgFile'"}.
 {config, node2, "'T2'/'CfgFile'"}.
 {config, "'T3'/'CfgFile'"}.

 {suites, node1, 'T1', all}.
 {skip_suites, node1, 'T1', [t1B_SUITE,t1D_SUITE], "Not implemented"}.
 {skip_cases, node1, 'T1', t1A_SUITE, [test3,test4], "Irrelevant"}.
 {skip_cases, node1, 'T1', t1C_SUITE, [test1], "Ignore"}.

 {suites, node2, 'T2', [t2B_SUITE,t2C_SUITE]}.
 {cases, node2, 'T2', t2A_SUITE, [test4,test1,test7]}.

 {skip_suites, 'T3', all, "Not implemented"}.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This example specifies the same tests as the original example. But 
    now if started with a call to <fo:inline font-family="monospace">ct_master:run(TestSpecName)</fo:inline>, test 
    <fo:inline font-family="monospace">t1</fo:inline> is executed on node <fo:inline font-family="monospace">ct_node@host_x</fo:inline> (<fo:inline font-family="monospace">node1</fo:inline>), test
    <fo:inline font-family="monospace">t2</fo:inline> on <fo:inline font-family="monospace">ct_node@host_y</fo:inline> (<fo:inline font-family="monospace">node2</fo:inline>) and test <fo:inline font-family="monospace">t3</fo:inline>
    on both <fo:inline font-family="monospace">node1</fo:inline> and <fo:inline font-family="monospace">node2</fo:inline>. Configuration file <fo:inline font-family="monospace">t1</fo:inline> is only read on
    <fo:inline font-family="monospace">node1</fo:inline> and configuration file <fo:inline font-family="monospace">t2</fo:inline> only on <fo:inline font-family="monospace">node2</fo:inline>, while the 
    configuration file <fo:inline font-family="monospace">t3</fo:inline> is read on both <fo:inline font-family="monospace">node1</fo:inline> and <fo:inline font-family="monospace">node2</fo:inline>. 
    Both test nodes write log files to the same directory. (However, the <fo:inline font-family="monospace">Common Test</fo:inline> Master 
    node uses a different log directory than the test nodes.)</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the test session is instead started with a call to 
    <fo:inline font-family="monospace">ct_master:run(TestSpecName, [ct_node@host_z], [ct_node@host_x])</fo:inline>, 
    the result is that test <fo:inline font-family="monospace">t1</fo:inline> does not run on 
    <fo:inline font-family="monospace">ct_node@host_x</fo:inline> (or any other node) while test <fo:inline font-family="monospace">t3</fo:inline> runs on both
    <fo:inline font-family="monospace">ct_node@host_y</fo:inline> and <fo:inline font-family="monospace">ct_node@host_z</fo:inline>.</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A nice feature is that a test specification that includes node 
      information can still be used as input to the regular <fo:inline font-family="monospace">Common Test</fo:inline> server 
      (as described in section
    <fo:inline font-style="italic">Test Specifications</fo:inline>). 
    The result is that any test specified to run on a node with the same
    name as the <fo:inline font-family="monospace">Common Test</fo:inline> node in question (typically <fo:inline font-family="monospace">ct@somehost</fo:inline> if started
    with the <fo:inline font-family="monospace">ct_run</fo:inline> program), is performed. Tests without explicit
    node association are always performed too, of course.</fo:block>
  <fo:block id="idp3401280" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.11.4 
      Automatic Startup of Test Target Nodes</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Initial actions can be started and performed automatically on
      test target nodes using test specification term <fo:inline font-family="monospace">init</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Two subterms are supported, <fo:inline font-family="monospace">node_start</fo:inline> and <fo:inline font-family="monospace">eval</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 {node, node1, node1@host1}.
 {node, node2, node1@host2}.
 {node, node3, node2@host2}.
 {node, node4, node1@host3}.
 {init, node1, [{node_start, [{callback_module, my_slave_callback}]}]}.
 {init, [node2, node3], {node_start, [{username, "ct_user"}, {password, "ct_password"}]}}.
 {init, node4, {eval, {module, function, []}}}.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This test specification declares that <fo:inline font-family="monospace">node1@host1</fo:inline> is to be started using
      the user callback function <fo:inline font-family="monospace">callback_module:my_slave_callback/0</fo:inline>, and nodes
      <fo:inline font-family="monospace">node1@host2</fo:inline> and <fo:inline font-family="monospace">node2@host2</fo:inline> are to be started with the default callback
      module <fo:inline font-family="monospace">ct_slave</fo:inline>. The specified username and password are used to log on to remote
      host <fo:inline font-family="monospace">host2</fo:inline>. Also, function <fo:inline font-family="monospace">module:function/0</fo:inline> is evaluated on
      <fo:inline font-family="monospace">node1@host3</fo:inline>, and the result of this call is printed to the log.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default callback module <fo:inline font-style="italic">ct_slave</fo:inline>,
       has the following features:
    </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
     <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Starting Erlang target nodes on local or remote hosts
       (application <fo:inline font-family="monospace">SSH</fo:inline> is used for communication).
     </fo:block></fo:list-item-body></fo:list-item>
     <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Ability to start an Erlang emulator with more flags
       (any flags supported by <fo:inline font-family="monospace">erl</fo:inline> are supported).
     </fo:block></fo:list-item-body></fo:list-item>
     <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Supervision of a node being started using internal callback
        functions. Used to prevent hanging nodes. (Configurable.)
     </fo:block></fo:list-item-body></fo:list-item>
     <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Monitoring of the master node by the slaves. A slave node can be
        stopped if the master node terminates. (Configurable.)
     </fo:block></fo:list-item-body></fo:list-item>
     <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Execution of user functions after a slave node is started. Functions can 
     be specified as a list of <fo:inline font-family="monospace">{Module, Function, Arguments}</fo:inline> tuples.
     </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An <fo:inline font-family="monospace">eval</fo:inline> term for the node and
    <fo:inline font-family="monospace">startup_functions</fo:inline> in the <fo:inline font-family="monospace">node_start</fo:inline> options list can be specified. 
    In this case, the node is started first, then the <fo:inline font-family="monospace">startup_functions</fo:inline> are
    executed, and finally functions specified with <fo:inline font-family="monospace">eval</fo:inline> are called.
    </fo:block></fo:block>
  <fo:block id="idp3423568" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.12  Event Handling</fo:marker>1.12  Event Handling</fo:block><fo:block id="idp3426800" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.12.1 
      General</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The operator of a <fo:inline font-family="monospace">Common Test</fo:inline> system can receive
    event notifications continuously during a test run. For example, 
    <fo:inline font-family="monospace">Common Test</fo:inline> reports when a test case starts and stops, 
    the current count of successful, failed, and skipped cases, and so on. 
    This information can be used for different purposes such as logging progress 
    and results in another format than HTML, saving statistics to a database 
    for report generation, and test system supervision.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Common Test</fo:inline> has a framework for event handling based on
    the OTP event manager concept and <fo:inline font-family="monospace">gen_event</fo:inline> behavior. 
    When the <fo:inline font-family="monospace">Common Test</fo:inline> server starts, it spawns an event manager. 
    During test execution the manager gets a notification from the server 
    when something of potential interest happens. Any event handler plugged into 
    the event manager can match on events of interest, take action, or
    pass the information on. The event handlers are Erlang modules
    implemented by the <fo:inline font-family="monospace">Common Test</fo:inline> user according to the <fo:inline font-family="monospace">gen_event</fo:inline> 
    behavior (for details, see module
    <fo:inline font-style="italic"><fo:inline font-family="monospace">gen_event</fo:inline></fo:inline> and
    section
    <fo:inline font-style="italic"><fo:inline font-family="monospace">gen_event Behaviour</fo:inline></fo:inline>
    in OTP Design Principles in the System Documentation).
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-family="monospace">Common Test</fo:inline> server always starts an event manager. 
    The server also plugs in a default event handler, which only
    purpose is to relay notifications to a globally registered <fo:inline font-family="monospace">Common Test</fo:inline> 
    Master event manager (if a <fo:inline font-family="monospace">Common Test</fo:inline> Master server is running in the system). 
    The <fo:inline font-family="monospace">Common Test</fo:inline> Master also spawns an event manager at startup.
    Event handlers plugged into this manager receives the events from 
    all the test nodes, plus information from the <fo:inline font-family="monospace">Common Test</fo:inline> Master server.
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">User-specific event handlers can be plugged into a <fo:inline font-family="monospace">Common Test</fo:inline> event
    manager, either by telling <fo:inline font-family="monospace">Common Test</fo:inline> to install them before the test
    run (described later), or by adding the handlers dynamically during the test
    run using
    <fo:inline font-style="italic"><fo:inline font-family="monospace">gen_event:add_handler/3</fo:inline></fo:inline> or
    <fo:inline font-style="italic"><fo:inline font-family="monospace">gen_event:add_sup_handler/3</fo:inline></fo:inline>.
    In the latter scenario, the reference of the <fo:inline font-family="monospace">Common Test</fo:inline> event manager is
    required. To get it, call 
    <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:get_event_mgr_ref/0</fo:inline></fo:inline> 
    or (on the <fo:inline font-family="monospace">Common Test</fo:inline> Master node) 
    <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_master:get_event_mgr_ref/0</fo:inline></fo:inline>.</fo:block>
  <fo:block id="idp3443744" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.12.2 
      Use</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Event handlers can be installed by an <fo:inline font-family="monospace">event_handler</fo:inline> start flag 
    (<fo:inline font-style="italic"><fo:inline font-family="monospace">ct_run</fo:inline></fo:inline>) or option 
    <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:run_test/1</fo:inline></fo:inline>, where the
    argument specifies the names of one or more event handler modules.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">$ ct_run -suite test/my_SUITE -event_handler handlers/my_evh1 
    handlers/my_evh2 -pa $PWD/handlers</fo:inline></fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To pass start arguments to the event handler init function, use option 
    <fo:inline font-family="monospace">ct_run -event_handler_init</fo:inline>  instead of
    <fo:inline font-family="monospace">-event_handler</fo:inline>.</fo:block>

    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All event handler modules must have <fo:inline font-family="monospace">gen_event</fo:inline> behavior.
    These modules must be precompiled and their locations must be
    added explicitly to the Erlang code server search path (as in the previous
    example).</fo:block></fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An event_handler tuple in argument <fo:inline font-family="monospace">Opts</fo:inline> has the following definition 
    (see <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:run_test/1</fo:inline></fo:inline>):</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 {event_handler,EventHandlers}

 EventHandlers = EH | [EH]
 EH = atom() | {atom(),InitArgs} | {[atom()],InitArgs}
 InitArgs = [term()]</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the following example, two event handlers for the <fo:inline font-family="monospace">my_SUITE</fo:inline> test are installed:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 1&gt; ct:run_test([{suite,"test/my_SUITE"},{event_handler,[my_evh1,{my_evh2,[node()]}]}]).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Event handler <fo:inline font-family="monospace">my_evh1</fo:inline> is started with <fo:inline font-family="monospace">[]</fo:inline> as argument to the init function. 
    Event handler <fo:inline font-family="monospace">my_evh2</fo:inline> is started with the name of the current node in the init argument list.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Event handlers can also be plugged in using one of the following
    <fo:inline font-style="italic">test specification</fo:inline> 
    terms:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{event_handler, EventHandlers}</fo:inline></fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{event_handler, EventHandlers, InitArgs}</fo:inline></fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{event_handler, NodeRefs, EventHandlers}</fo:inline></fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{event_handler, NodeRefs, EventHandlers, InitArgs}</fo:inline></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">EventHandlers</fo:inline> is a list of module names. Before a test 
    session starts, the init function of each plugged in event handler 
    is called (with the <fo:inline font-family="monospace">InitArgs</fo:inline> list as argument or <fo:inline font-family="monospace">[]</fo:inline> if
    no start arguments are specified).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To plug in a handler to the <fo:inline font-family="monospace">Common Test</fo:inline> Master event manager, specify 
    <fo:inline font-family="monospace">master</fo:inline> as the node in <fo:inline font-family="monospace">NodeRefs</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To be able to match on events, the event handler module must
    include the header file <fo:inline font-family="monospace">ct_event.hrl</fo:inline>. An event is a record with the
    following definition:</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">#event{name, node, data}</fo:inline></fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">name</fo:inline></fo:block>
         <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Label (type) of the event.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">node</fo:inline></fo:block>
         <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Name of the node that the event originated from 
	 (only relevant for <fo:inline font-family="monospace">Common Test</fo:inline> Master event handlers).</fo:block></fo:block></fo:block-container>
       <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">data</fo:inline></fo:block>
         <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specific for the event.</fo:block></fo:block></fo:block-container>
    </fo:block>


    
    <fo:block id="idp3471296" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">General Events</fo:block>
      

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The general events are as follows:</fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">#event{name = start_logging, data = LogDir}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">LogDir = string()</fo:inline>, top-level log directory for the test run.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This event indicates that the logging process of <fo:inline font-family="monospace">Common Test</fo:inline>
	has started successfully and is ready to receive I/O
	messages.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">#event{name = stop_logging, data = []}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This event indicates that the logging process of <fo:inline font-family="monospace">Common Test</fo:inline>
	was shut down at the end of the test run.
	</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">#event{name = test_start, data = {StartTime,LogDir}}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">StartTime = {date(),time()}</fo:inline>, test run start date and time.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">LogDir = string()</fo:inline>, top-level log directory for the test run.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This event indicates that <fo:inline font-family="monospace">Common Test</fo:inline> has finished initial preparations
	and begins executing test cases.
	</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">#event{name = test_done, data = EndTime}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">EndTime = {date(),time()}</fo:inline>, date and time the test run finished.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This event indicates that the last test case has been executed and 
	<fo:inline font-family="monospace">Common Test</fo:inline> is shutting down.	
	</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">#event{name = start_info, data = {Tests,Suites,Cases}}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Tests = integer()</fo:inline>, number of tests.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Suites = integer()</fo:inline>, total number of suites.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Cases = integer() | unknown</fo:inline>, total number of test cases.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This event gives initial test run information that can be interpreted as: 
	"This test run will execute <fo:inline font-family="monospace">Tests</fo:inline> separate tests, in total containing
	<fo:inline font-family="monospace">Cases</fo:inline> number of test cases, in <fo:inline font-family="monospace">Suites</fo:inline> number of suites".
	However, if a test case group with a repeat property exists in any test, 
	the total number of test cases cannot be calculated (unknown).
	</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">#event{name = tc_start, data = {Suite,FuncOrGroup}}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Suite = atom()</fo:inline>, name of the test suite.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">FuncOrGroup = Func | {Conf,GroupName,GroupProperties}</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Func = atom()</fo:inline>, name of test case or configuration function.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Conf = init_per_group | end_per_group</fo:inline>, group configuration function.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">GroupName = atom()</fo:inline>, name of the group.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">GroupProperties = list()</fo:inline>, list of execution properties for the group.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This event informs about the start of a test case, or a group configuration
	function. The event is sent also for <fo:inline font-family="monospace">init_per_suite</fo:inline> and <fo:inline font-family="monospace">end_per_suite</fo:inline>,
	but not for <fo:inline font-family="monospace">init_per_testcase</fo:inline> and <fo:inline font-family="monospace">end_per_testcase</fo:inline>. If a group
	configuration function starts, the group name and execution properties
	are also specified.
	</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">#event{name = tc_logfile, data = {{Suite,Func},LogFileName}}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Suite = atom()</fo:inline>, name of the test suite.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Func = atom()</fo:inline>, name of test case or configuration function.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">LogFileName = string()</fo:inline>, full name of the test case log file.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This event is sent at the start of each test case (and configuration function
	  except <fo:inline font-family="monospace">init/end_per_testcase</fo:inline>) and carries information about the
	  full name (that is, the file name including the absolute directory path) of
	  the current test case log file.
	</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">#event{name = tc_done, data = {Suite,FuncOrGroup,Result}}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Suite = atom()</fo:inline>, name of the suite.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">FuncOrGroup = Func | {Conf,GroupName,GroupProperties}</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Func = atom()</fo:inline>, name of test case or configuration function.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Conf = init_per_group | end_per_group</fo:inline>, group configuration function.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">GroupName = unknown | atom()</fo:inline>, name of the group 
	      (unknown if init- or end function times out).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">GroupProperties = list()</fo:inline>, list of execution properties for the group.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Result = ok | {auto_skipped,SkipReason} | {skipped,SkipReason} | {failed,FailReason}</fo:inline>,
	  the result.</fo:block>
	
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">SkipReason = {require_failed,RequireInfo} | 
	                   {require_failed_in_suite0,RequireInfo} | 
	                   {failed,{Suite,init_per_testcase,FailInfo}} | 
                           UserTerm</fo:inline>, 
	      why the case was skipped.</fo:block>
	
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">FailReason = {error,FailInfo} | 
	                   {error,{RunTimeError,StackTrace}} | 
                           {timetrap_timeout,integer()} | 
			   {failed,{Suite,end_per_testcase,FailInfo}}</fo:inline>, reason for failure.</fo:block>	
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">RequireInfo = {not_available,atom() | tuple()}</fo:inline>, why require failed.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">FailInfo = {timetrap_timeout,integer()} | 
	                 {RunTimeError,StackTrace} | 
			 UserTerm</fo:inline>, 
	      error details.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">RunTimeError = term()</fo:inline>, a runtime error, for example, 
	<fo:inline font-family="monospace">badmatch</fo:inline> or <fo:inline font-family="monospace">undef</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">StackTrace = list()</fo:inline>, list of function calls preceding a runtime error.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">UserTerm = term()</fo:inline>, any data specified by user, or <fo:inline font-family="monospace">exit/1</fo:inline> information.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This event informs about the end of a test case or a configuration function (see event 
	<fo:inline font-family="monospace">tc_start</fo:inline> for details on element <fo:inline font-family="monospace">FuncOrGroup</fo:inline>). With this event 
	comes the final result of the function in question. It is possible to determine on the 
	top level of <fo:inline font-family="monospace">Result</fo:inline> if the function was successful, skipped (by the user), 
	or if it failed.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is also possible to dig deeper and, for example, perform pattern matching 
	on the various reasons for skipped or failed. Notice that <fo:inline font-family="monospace">{'EXIT',Reason}</fo:inline> tuples 
	are translated into <fo:inline font-family="monospace">{error,Reason}</fo:inline>. 
	Notice also that if a <fo:inline font-family="monospace">{failed,{Suite,end_per_testcase,FailInfo}</fo:inline>
	result is received, the test case was successful, but 
	<fo:inline font-family="monospace">end_per_testcase</fo:inline> for the case failed.
	</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">#event{name = tc_auto_skip, data = {Suite,TestName,Reason}}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Suite = atom()</fo:inline>, the name of the suite.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">TestName = init_per_suite | end_per_suite |
	                 {init_per_group,GroupName} | {end_per_group,GroupName} |
	                 {FuncName,GroupName} | FuncName</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">FuncName = atom()</fo:inline>, the name of the test case or configuration function.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">GroupName = atom()</fo:inline>, the name of the test case group.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Reason = {failed,FailReason} |
	               {require_failed_in_suite0,RequireInfo}</fo:inline>, 
	      reason for auto-skipping <fo:inline font-family="monospace">Func</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">FailReason = {Suite,ConfigFunc,FailInfo}} | 
	                   {Suite,FailedCaseInSequence}</fo:inline>, reason for failure.</fo:block>	
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">RequireInfo = {not_available,atom() | tuple()}</fo:inline>, why require failed.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ConfigFunc = init_per_suite | init_per_group</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">FailInfo = {timetrap_timeout,integer()} | 
	                 {RunTimeError,StackTrace} |
			 bad_return | UserTerm</fo:inline>, 
	      error details.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">FailedCaseInSequence = atom()</fo:inline>, the name of a case that failed in a sequence.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">RunTimeError = term()</fo:inline>, a runtime error, for example <fo:inline font-family="monospace">badmatch</fo:inline> or
	<fo:inline font-family="monospace">undef</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">StackTrace = list()</fo:inline>, list of function calls preceeding a runtime error.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">UserTerm = term()</fo:inline>, any data specified by user, or <fo:inline font-family="monospace">exit/1</fo:inline> information.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This event is sent for every test case or configuration function that <fo:inline font-family="monospace">Common Test</fo:inline>
	has skipped automatically because of either a failed <fo:inline font-family="monospace">init_per_suite</fo:inline> or 
	<fo:inline font-family="monospace">init_per_group</fo:inline>, a failed <fo:inline font-family="monospace">require</fo:inline> in <fo:inline font-family="monospace">suite/0</fo:inline>, or a failed test case
	in a sequence. Notice that this event is never received as a result of a test case getting
	skipped because of <fo:inline font-family="monospace">init_per_testcase</fo:inline> failing, as that information is carried with
	event <fo:inline font-family="monospace">tc_done</fo:inline>. If a failed test case belongs to a test case group, the second
	data element is a tuple <fo:inline font-family="monospace">{FuncName,GroupName}</fo:inline>, otherwise only the function name.
	</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">#event{name = tc_user_skip, data = {Suite,TestName,Comment}}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	  
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Suite = atom()</fo:inline>, the name of the suite.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">TestName = init_per_suite | end_per_suite |
	                 {init_per_group,GroupName} | {end_per_group,GroupName} |
	                 {FuncName,GroupName} | FuncName</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">FuncName = atom()</fo:inline>, the name of the test case or configuration function.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">GroupName = atom()</fo:inline>, the name of the test case group.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Comment = string()</fo:inline>, why the test case was skipped.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This event specifies that a test case was skipped by the user. 
	It is only received if the skip is declared in a test specification. 
	Otherwise, user skip information is received as a <fo:inline font-family="monospace">{skipped,SkipReason}</fo:inline> 
	result in event <fo:inline font-family="monospace">tc_done</fo:inline> for the test case. If a skipped test case belongs
	to a test case group, the second data element is a tuple <fo:inline font-family="monospace">{FuncName,GroupName}</fo:inline>,
	otherwise only the function name.
	</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">#event{name = test_stats, data = {Ok,Failed,Skipped}}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Ok = integer()</fo:inline>, current number of successful test cases.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Failed = integer()</fo:inline>, current number of failed test cases.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Skipped = {UserSkipped,AutoSkipped}</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">UserSkipped = integer()</fo:inline>, current number of user-skipped test cases.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">AutoSkipped = integer()</fo:inline>, current number of auto-skipped test cases.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is a statistics event with current count of successful, skipped, 
	and failed test cases so far. This event is sent after the end of each test case,
	immediately following event <fo:inline font-family="monospace">tc_done</fo:inline>.
	</fo:block></fo:block></fo:block-container>
      </fo:block>
  
    
     <fo:block id="idp3550784" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Internal Events</fo:block>
       

     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The internal events are as follows:</fo:block>

     <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">#event{name = start_make, data = Dir}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir = string()</fo:inline>, running make in this directory.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This internal event says that <fo:inline font-family="monospace">Common Test</fo:inline> starts compiling
	modules in directory <fo:inline font-family="monospace">Dir</fo:inline>.
	</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">#event{name = finished_make, data = Dir}</fo:inline></fo:block>	
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Dir = string()</fo:inline>, finished running make in this directory.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This internal event says that <fo:inline font-family="monospace">Common Test</fo:inline> is finished compiling
	modules in directory <fo:inline font-family="monospace">Dir</fo:inline>.
	</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">#event{name = start_write_file, data = FullNameFile}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">FullNameFile = string(), full name of the file.</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This internal event is used by the <fo:inline font-family="monospace">Common Test</fo:inline> Master process to 
	synchronize particular file operations.
	</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">#event{name = finished_write_file, data = FullNameFile}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">FullNameFile = string(), full name of the file.</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This internal event is used by the <fo:inline font-family="monospace">Common Test</fo:inline> Master process to 
	synchronize particular file operations.
	</fo:block></fo:block></fo:block-container>

     </fo:block>
     
     <fo:block id="idp3563600" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Notes</fo:block>
       
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The events are also documented in <fo:inline font-family="monospace">ct_event.erl</fo:inline>. This module
    can serve as an example of what an event handler for the <fo:inline font-family="monospace">Common Test</fo:inline> event 
    manager can look like.</fo:block>

    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To ensure that printouts to <fo:inline font-family="monospace">stdout</fo:inline> (or printouts made with
    <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:log/2,3</fo:inline></fo:inline> or 
    <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:pal,2,3</fo:inline></fo:inline>) get written to the test case log
    file, and not to the <fo:inline font-family="monospace">Common Test</fo:inline> framework log, you can synchronize
    with the <fo:inline font-family="monospace">Common Test</fo:inline> server by matching on evvents <fo:inline font-family="monospace">tc_start</fo:inline> and <fo:inline font-family="monospace">tc_done</fo:inline>.
    In the period between these events, all I/O is directed to the
    test case log file. These events are sent synchronously to avoid potential
    timing problems (for example, that the test case log file is closed just before
    an I/O message from an external process gets through). Knowing this, you
    need to be careful that your <fo:inline font-family="monospace">handle_event/2</fo:inline> callback function does not
    stall the test execution, possibly causing unexpected behavior as a result.</fo:block></fo:block>
     
<fo:block id="idp3575536" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.13  Dependencies between Test Cases and Suites</fo:marker>1.13  Dependencies between Test Cases and Suites</fo:block><fo:block id="idp3578240" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.13.1 
      General</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When creating test suites, it is strongly recommended to not
      create dependencies between test cases, that is, letting test cases
      depend on the result of previous test cases. There are various
      reasons for this, such as, the following:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>It makes it impossible to run test cases individually.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>It makes it impossible to run test cases in a different order.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>It makes debugging difficult (as a fault can be
	the result of a problem in a different test case than the one failing).</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>There are no good and explicit ways to declare dependencies, so 
	it can be difficult to see and understand these in test suite 
	code and in test logs.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Extending, restructuring, and maintaining test suites with 
	test case dependencies is difficult.</fo:block></fo:list-item-body></fo:list-item>      
    </fo:list-block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are often sufficient means to work around the need for test 
      case dependencies. Generally, the problem is related to the state of 
      the System Under Test (SUT). The action of one test case can change the 
      system state. For some other test case to run properly, this new state 
      must be known.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Instead of passing data between test cases, it is recommended
      that the test cases read the state from the SUT and perform assertions
      (that is, let the test case run if the state is as expected, otherwise reset or fail).
      It is also recommended to use the state to set variables necessary for the 
      test case to execute properly. Common actions can often be implemented as 
      library functions for test cases to call to set the SUT in a required state. 
      (Such common actions can also be separately tested, if necessary,
      to ensure that they work as expected). It is sometimes also possible, 
      but not always desirable, to group tests together in one test case, that is,
      let a test case perform a "scenario" test (a test consisting of subtests).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Consider, for example, a server application under test. The following 
      functionality is to be tested:</fo:block>
    
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Starting the server</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Configuring the server</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Connecting a client to the server</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Disconnecting a client from the server</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Stopping the server</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are obvious dependencies between the listed functions. The server cannot 
      be configured if it has not first been started, a client connot be connectd until 
      the server is properly configured, and so on. If we want to have one test 
      case for each function, we might be tempted to try to always run the
      test cases in the stated order and carry possible data (identities, handles,
      and so on) between the cases and therefore introduce dependencies between them.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To avoid this, we can consider starting and stopping the server for every test.
      We can thus implement the start and stop action as common functions to be 
      called from 
      <fo:inline font-style="italic"><fo:inline font-family="monospace">init_per_testcase</fo:inline></fo:inline> and 
      <fo:inline font-style="italic"><fo:inline font-family="monospace">end_per_testcase</fo:inline></fo:inline>. 
      (Remember to test the start and stop functionality separately.) 
      The configuration can also be implemented as a common function, maybe grouped 
      with the start function. Finally, the testing of connecting and disconnecting a 
      client can be grouped into one test case. The resulting suite can look as
      follows:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">      
 -module(my_server_SUITE).
 -compile(export_all).
 -include_lib("ct.hrl").

 %%% init and end functions...

 suite() -&gt; [{require,my_server_cfg}].

 init_per_testcase(start_and_stop, Config) -&gt;
     Config;

 init_per_testcase(config, Config) -&gt;
     [{server_pid,start_server()} | Config];

 init_per_testcase(_, Config) -&gt;
     ServerPid = start_server(),
     configure_server(),
     [{server_pid,ServerPid} | Config].

 end_per_testcase(start_and_stop, _) -&gt;
     ok;

 end_per_testcase(_, _) -&gt;
     ServerPid = ?config(server_pid),
     stop_server(ServerPid).

 %%% test cases...

 all() -&gt; [start_and_stop, config, connect_and_disconnect].

 %% test that starting and stopping works
 start_and_stop(_) -&gt;
     ServerPid = start_server(),
     stop_server(ServerPid).

 %% configuration test
 config(Config) -&gt;
     ServerPid = ?config(server_pid, Config),
     configure_server(ServerPid).

 %% test connecting and disconnecting client
 connect_and_disconnect(Config) -&gt;
     ServerPid = ?config(server_pid, Config),
     {ok,SessionId} = my_server:connect(ServerPid),
     ok = my_server:disconnect(ServerPid, SessionId).

 %%% common functions...

 start_server() -&gt;
     {ok,ServerPid} = my_server:start(),
     ServerPid.

 stop_server(ServerPid) -&gt;
     ok = my_server:stop(),
     ok.

 configure_server(ServerPid) -&gt;
     ServerCfgData = ct:get_config(my_server_cfg),
     ok = my_server:configure(ServerPid, ServerCfgData),
     ok.</fo:block>

    <fo:block id="idp3594752" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.13.2 
      Saving Configuration Data</fo:block>
    
      

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sometimes it is impossible, or infeasible, to
	implement independent test cases. Maybe it is not possible to read the 
	SUT state. Maybe resetting the SUT is impossible and it takes too long time
	to restart the system. In situations where test case dependency is necessary,
	CT offers a structured way to carry data from one test case to the next. The
	same mechanism can also be used to carry data from one test suite to the next.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The mechanism for passing data is called <fo:inline font-family="monospace">save_config</fo:inline>. The idea is that
	one test case (or suite) can save the current value of <fo:inline font-family="monospace">Config</fo:inline>, or any list of
	key-value tuples, so that the next executing test case (or test suite) can read it. 
	The configuration data is not saved permanently but can only be passed from one 
        case (or suite) to the next.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To save <fo:inline font-family="monospace">Config</fo:inline> data, return tuple <fo:inline font-family="monospace">{save_config,ConfigList}</fo:inline>
         from <fo:inline font-family="monospace">end_per_testcase</fo:inline> or from the main test case function.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To read data saved by a previous test case, use macro <fo:inline font-family="monospace">config</fo:inline> with a 
	<fo:inline font-family="monospace">saved_config</fo:inline> key as follows:</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{Saver,ConfigList} = ?config(saved_config, Config)</fo:inline></fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Saver</fo:inline> (<fo:inline font-family="monospace">atom()</fo:inline>) is the name of the previous test case (where the
	data was saved). The <fo:inline font-family="monospace">config</fo:inline> macro can be used to extract particular data
	also from the recalled <fo:inline font-family="monospace">ConfigList</fo:inline>. It is strongly recommended that 
	<fo:inline font-family="monospace">Saver</fo:inline> is always matched to the expected name of the saving test case. 
	This way, problems because of restructuring of the test suite can be avoided. 
	Also, it makes the dependency more explicit and the test suite easier to read 
        and maintain.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To pass data from one test suite to another, the same mechanism is used. The data
	is to be saved by finction
	<fo:inline font-style="italic"><fo:inline font-family="monospace">end_per_suite</fo:inline></fo:inline> 
	and read by function
	<fo:inline font-style="italic"><fo:inline font-family="monospace">init_per_suite</fo:inline></fo:inline>
	in the suite that follows. When passing data between suites, <fo:inline font-family="monospace">Saver</fo:inline> carries the 
	name of the test suite.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
      
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 -module(server_b_SUITE).
 -compile(export_all).
 -include_lib("ct.hrl").

 %%% init and end functions...

 init_per_suite(Config) -&gt;
     %% read config saved by previous test suite
     {server_a_SUITE,OldConfig} = ?config(saved_config, Config),
     %% extract server identity (comes from server_a_SUITE)
     ServerId = ?config(server_id, OldConfig),
     SessionId = connect_to_server(ServerId),
     [{ids,{ServerId,SessionId}} | Config].

 end_per_suite(Config) -&gt;
     %% save config for server_c_SUITE (session_id and server_id)
     {save_config,Config}

 %%% test cases...

 all() -&gt; [allocate, deallocate].

 allocate(Config) -&gt;
     {ServerId,SessionId} = ?config(ids, Config),
     {ok,Handle} = allocate_resource(ServerId, SessionId),
     %% save handle for deallocation test
     NewConfig = [{handle,Handle}],
     {save_config,NewConfig}.

 deallocate(Config) -&gt;
     {ServerId,SessionId} = ?config(ids, Config),
     {allocate,OldConfig} = ?config(saved_config, Config),
     Handle = ?config(handle, OldConfig),
     ok = deallocate_resource(ServerId, SessionId, Handle).</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To save <fo:inline font-family="monospace">Config</fo:inline> data from a test case that is to be
        skipped, return tuple 
      <fo:inline font-family="monospace">{skip_and_save,Reason,ConfigList}</fo:inline>.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The result is that the test case is skipped with <fo:inline font-family="monospace">Reason</fo:inline> printed to
      the log file (as described earlier) and <fo:inline font-family="monospace">ConfigList</fo:inline> is saved 
      for the next test case. <fo:inline font-family="monospace">ConfigList</fo:inline> can be read using 
      <fo:inline font-family="monospace">?config(saved_config, Config)</fo:inline>, as described earlier. <fo:inline font-family="monospace">skip_and_save</fo:inline>
      can also be returned from <fo:inline font-family="monospace">init_per_suite</fo:inline>. In this case, the saved data can
      be read by <fo:inline font-family="monospace">init_per_suite</fo:inline> in the suite that follows.</fo:block>
    <fo:block id="idp3615552" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.13.3 
      Sequences</fo:block>
    
      

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sometimes test cases depend on each other so that
	if one case fails, the following tests are not to be executed.
        Typically, if the <fo:inline font-family="monospace">save_config</fo:inline> facility is used and a test 
	case that is expected to save data crashes, the following 
	case cannot run. <fo:inline font-family="monospace">Common Test</fo:inline> offers a way to declare such dependencies, 
	called sequences.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A sequence of test cases is defined as a test case group
        with a <fo:inline font-family="monospace">sequence</fo:inline> property. Test case groups are defined
	through function <fo:inline font-family="monospace">groups/0</fo:inline> in the test suite (for details, see section
	<fo:inline font-style="italic">Test Case Groups</fo:inline>.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For example, to ensure that if <fo:inline font-family="monospace">allocate</fo:inline>
	in <fo:inline font-family="monospace">server_b_SUITE</fo:inline> crashes, <fo:inline font-family="monospace">deallocate</fo:inline> is skipped,
	the following sequence can be defined:</fo:block>
      
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 groups() -&gt; [{alloc_and_dealloc, [sequence], [alloc,dealloc]}].</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Assume that the suite contains the test case <fo:inline font-family="monospace">get_resource_status</fo:inline> 
	that is independent of the other two cases, then function <fo:inline font-family="monospace">all</fo:inline> can 
	look as follows:</fo:block>

      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 all() -&gt; [{group,alloc_and_dealloc}, get_resource_status].</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">alloc</fo:inline> succeeds, <fo:inline font-family="monospace">dealloc</fo:inline> is also executed. If <fo:inline font-family="monospace">alloc</fo:inline> fails
	however, <fo:inline font-family="monospace">dealloc</fo:inline> is not executed but marked as <fo:inline font-family="monospace">SKIPPED</fo:inline> in the HTML log. 
	<fo:inline font-family="monospace">get_resource_status</fo:inline> runs no matter what happens to the <fo:inline font-family="monospace">alloc_and_dealloc</fo:inline>
	cases.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Test cases in a sequence are executed in order until all succeed or 
	one fails. If one fails, all following cases in the sequence are skipped.
	The cases in the sequence that have succeeded up to that point are reported as 
	successful in the log. Any number of sequences can be specified.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>

      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 groups() -&gt; [{scenarioA, [sequence], [testA1, testA2]}, 
              {scenarioB, [sequence], [testB1, testB2, testB3]}].

 all() -&gt; [test1, 
           test2, 
           {group,scenarioA}, 
	   test3, 
           {group,scenarioB}, 
           test4].</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A sequence group can have subgroups. Such subgroups can have 
        any property, that is, they are not required to also be sequences. If you want the 
	status of the subgroup to affect the sequence on the level above, return 
	<fo:inline font-family="monospace">{return_group_result,Status}</fo:inline> from 
	<fo:inline font-style="italic"><fo:inline font-family="monospace">end_per_group/2</fo:inline></fo:inline>, 
	as described in section
	<fo:inline font-style="italic">Repeated Groups</fo:inline>
	in Writing Test Suites.
	A failed subgroup (<fo:inline font-family="monospace">Status == failed</fo:inline>) causes the execution of a 
	sequence to fail in the	same way a test case does.</fo:block>
    <fo:block id="idp3637344" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.14  Common Test Hooks</fo:marker>1.14  Common Test Hooks</fo:block><fo:block id="idp3640560" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.14.1 
      General</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The <fo:inline font-weight="bold">Common Test Hook (CTH)</fo:inline> framework allows 
      extensions of the default behavior of <fo:inline font-family="monospace">Common Test</fo:inline> using hooks 
      before and after all test suite calls. CTHs allow advanced <fo:inline font-family="monospace">Common Test</fo:inline>
      users to abstract out behavior that is common to multiple test suites
      without littering all test suites with library calls. This can be used
      for logging, starting, and monitoring external systems, 
      building C files needed by the tests, and so on.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In brief, CTH allows you to do the following:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Manipulate the runtime configuration before each suite 
      configuration call.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Manipulate the return of all suite configuration calls, and in 
      extension, the result of the tests themselves.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following sections describe how to use CTHs, when they are run,
      and how to manipulate the test results in a CTH.</fo:block>

    <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When executing within a CTH, all timetraps are shut off. So
	if your CTH never returns, the entire test run is stalled.</fo:block>
    </fo:block>

  <fo:block id="idp3647824" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.14.2 
      Installing a CTH</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A CTH can be installed in multiple ways in your test run. You can do it
      for all tests in a run, for specific test suites, and for specific groups 
      within a test suite. If you want a CTH to be present in all test suites 
      within your test run, there are three ways to accomplish that, as follows:
    </fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Add <fo:inline font-family="monospace">-ct_hooks</fo:inline> as an argument to 
      <fo:inline font-style="italic">ct_run</fo:inline>. 
      To add multiple CTHs using this method, append them to each other
      using the keyword <fo:inline font-family="monospace">and</fo:inline>, that is, 
      <fo:inline font-family="monospace">ct_run -ct_hooks cth1 [{debug,true}] and cth2 ...</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Add tag <fo:inline font-family="monospace">ct_hooks</fo:inline> to your 
      <fo:inline font-style="italic">
      Test Specification</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Add tag <fo:inline font-family="monospace">ct_hooks</fo:inline> to your call to 
      <fo:inline font-style="italic">ct:run_test/1</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">CTHs can also be added within a test suite. This is done by returning
    <fo:inline font-family="monospace">{ct_hooks,[CTH]}</fo:inline> in the configuration list from 
    <fo:inline font-style="italic">suite/0</fo:inline>,
    <fo:inline font-style="italic">
      init_per_suite/1</fo:inline>, or
      <fo:inline font-style="italic">
    init_per_group/2</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this case, <fo:inline font-family="monospace">CTH</fo:inline> can either be only the module name of the CTH 
    or a tuple with the module name and the initial arguments, and optionally 
    the hook priority of the CTH. For example, one of the following:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{ct_hooks,[my_cth_module]}</fo:inline></fo:block></fo:list-item-body></fo:list-item> 
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{ct_hooks,[{my_cth_module,[{debug,true}]}]}</fo:inline></fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{ct_hooks,[{my_cth_module,[{debug,true}],500}]}</fo:inline></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block id="idp3662736" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Overriding CTHs</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By default, each installation of a CTH causes a new instance of it
	to be activated. This can cause problems if you want to override 
	CTHs in test specifications while still having them in the
	suite information function. The 
	<fo:inline font-style="italic">id/1</fo:inline>
	callback exists to address this problem. By returning the same
	<fo:inline font-family="monospace">id</fo:inline> in both places, <fo:inline font-family="monospace">Common Test</fo:inline> knows that this CTH
	is already installed and does not try to install it again.</fo:block>
    
   
    <fo:block id="idp3666016" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">CTH Execution Order</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By default, each CTH installed is executed in the order that
      they are installed for init calls, and then reversed for end calls.
      This is not always desired, so <fo:inline font-family="monospace">Common Test</fo:inline> allows
      the user to specify a priority for each hook. The priority can either
      be specified in the CTH function 
      <fo:inline font-style="italic">init/2</fo:inline> or when 
      installing the hook. The priority specified at installation overrides the 
      priority returned by the CTH.</fo:block>
    
  <fo:block id="idp3669632" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.14.3 
      CTH Scope</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Once the CTH is installed into a certain test run it remains there until
      its scope is expired. The scope of a CTH depends on when it is 
      installed, see the following table.
      Function <fo:inline font-style="italic">init/2</fo:inline> is 
      called at the beginning of the scope and function
      <fo:inline font-style="italic">terminate/1</fo:inline> 
      is called when the scope ends.</fo:block>
    <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">CTH installed in</fo:inline></fo:block></fo:table-cell>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">CTH scope begins before</fo:inline></fo:block></fo:table-cell>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">CTH scope ends after</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-style="italic">ct_run</fo:inline></fo:block></fo:table-cell>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">the first test suite is to be run</fo:block></fo:table-cell>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">the last test suite has been run</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-style="italic">ct:run_test</fo:inline></fo:block></fo:table-cell>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">the first test suite is run</fo:block></fo:table-cell>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">the last test suite has been run</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-style="italic">
	  Test Specification</fo:inline></fo:block></fo:table-cell>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">the first test suite is run</fo:block></fo:table-cell>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">the last test suite has been run</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-style="italic">suite/0
	</fo:inline></fo:block></fo:table-cell>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-style="italic">
	    pre_init_per_suite/3</fo:inline> is called</fo:block></fo:table-cell>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-style="italic">
	  post_end_per_suite/4</fo:inline> has been called for that test suite</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-style="italic">
	  init_per_suite/1</fo:inline></fo:block></fo:table-cell>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-style="italic">
	    post_init_per_suite/4</fo:inline> is called</fo:block></fo:table-cell>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-style="italic">
	  post_end_per_suite/4</fo:inline> has been called for that test suite</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-style="italic">
	  init_per_group/2</fo:inline></fo:block></fo:table-cell>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-style="italic">
	    post_init_per_group/5</fo:inline> is called</fo:block></fo:table-cell>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-style="italic">
	  post_end_per_group/5</fo:inline> has been called for that group</fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        14.1:
         
        Scope of a CTH</fo:block>
    
    <fo:block id="idp3704208" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">CTH Processes and Tables</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">CTHs are run with the same process scoping as normal test suites,
	that is, a different process executes the <fo:inline font-family="monospace">init_per_suite</fo:inline> hooks then the
	<fo:inline font-family="monospace">init_per_group</fo:inline> or <fo:inline font-family="monospace">per_testcase</fo:inline> hooks. So if you want to spawn a 
	process in the CTH, you cannot link with the CTH process, as it exits 
	after the post hook ends. Also, if you for some reason need an ETS 
	table with your CTH, you must spawn a process that handles it.</fo:block>
    
    
    <fo:block id="idp3707232" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">External Configuration Data and Logging</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Configuration data values in the CTH can be read
	by calling 
	<fo:inline font-style="italic"><fo:inline font-family="monospace">ct:get_config/1,2,3</fo:inline></fo:inline> 
	(as explained in section
	<fo:inline font-style="italic">Requiring and Reading Configuration Data</fo:inline>).
	The configuration variables in question must, as always, first have been
	required by a suite-, group-, or test case information function,
	or by function <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:require/1/2</fo:inline></fo:inline>.
	The latter can also be used in CT hook functions.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The CT hook functions can call any logging function
	in the <fo:inline font-family="monospace">ct</fo:inline> interface to print information to the log files, or to
	add comments in the suite overview page.
      </fo:block>
        

  <fo:block id="idp3713056" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.14.4 
      Manipulating Tests</fo:block>
     
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Through CTHs the results of tests and configuration functions can be manipulated. 
    The main purpose to do this with CTHs is to allow common 
    patterns to be abstracted out from test suites and applied to
    multiple test suites without duplicating any code. All the callback
    functions for a CTH follow a common interface described hereafter.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Common Test</fo:inline> always calls all available hook functions, even pre- 
      and post hooks for configuration functions that are not implemented in the suite.
      For example, <fo:inline font-family="monospace">pre_init_per_suite(x_SUITE, ...)</fo:inline> and
      <fo:inline font-family="monospace">post_init_per_suite(x_SUITE, ...)</fo:inline> are called for test suite
      <fo:inline font-family="monospace">x_SUITE</fo:inline>, even if it does not export <fo:inline font-family="monospace">init_per_suite/1</fo:inline>. 
      With this feature hooks can be used as configuration fallbacks, and all
      configuration functions can be replaced with hook functions.</fo:block>

    <fo:block id="idp3718000" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Pre Hooks</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	In a CTH, the behavior can be hooked in before the following functions:</fo:block>

     <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic"><fo:inline font-family="monospace">init_per_suite</fo:inline></fo:inline></fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic"><fo:inline font-family="monospace">init_per_group</fo:inline></fo:inline></fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic"><fo:inline font-family="monospace">init_per_testcase</fo:inline></fo:inline></fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic"><fo:inline font-family="monospace">end_per_testcase</fo:inline></fo:inline></fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic"><fo:inline font-family="monospace">end_per_group</fo:inline></fo:inline></fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic"><fo:inline font-family="monospace">end_per_suite</fo:inline></fo:inline></fo:block></fo:list-item-body></fo:list-item>
     </fo:list-block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	This is done in the CTH functions called <fo:inline font-family="monospace">pre_&lt;name of function&gt;</fo:inline>.
	These functions take the arguments <fo:inline font-family="monospace">SuiteName</fo:inline>, <fo:inline font-family="monospace">Name</fo:inline> (group or test case name, if applicable), 
	<fo:inline font-family="monospace">Config</fo:inline>, and <fo:inline font-family="monospace">CTHState</fo:inline>. The return value of the CTH function
	is always a combination of a result for the suite/group/test and an 
	updated <fo:inline font-family="monospace">CTHState</fo:inline>.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To let the test suite continue on executing, return the configuration 
	list that you want the test to use as the result.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All pre hooks, except <fo:inline font-family="monospace">pre_end_per_testcase/4</fo:inline>, can
        skip or fail the test by returning a tuple with <fo:inline font-family="monospace">skip</fo:inline> or
        <fo:inline font-family="monospace">fail</fo:inline>, and a reason as the result.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
	<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 pre_init_per_suite(SuiteName, Config, CTHState) -&gt;
   case db:connect() of
     {error,_Reason} -&gt;
       {{fail, "Could not connect to DB"}, CTHState};
     {ok, Handle} -&gt;
       {[{db_handle, Handle} | Config], CTHState#state{ handle = Handle }}
   end.</fo:block>

  <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you use multiple CTHs, the first part of the return tuple is
  used as input for the next CTH. So in the previous example the next CTH can
  get <fo:inline font-family="monospace">{fail,Reason}</fo:inline> as the second parameter. If you have many CTHs
  interacting, do not let each CTH return <fo:inline font-family="monospace">fail</fo:inline> or <fo:inline font-family="monospace">skip</fo:inline>. 
  Instead, return that an action is to be taken through the <fo:inline font-family="monospace">Config</fo:inline> 
  list and implement a CTH that, at the end, takes the correct action.</fo:block></fo:block>
	
    
    
    <fo:block id="idp3736592" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Post Hooks</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In a CTH, behavior can be hooked in after the following functions:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic"><fo:inline font-family="monospace">init_per_suite</fo:inline></fo:inline></fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic"><fo:inline font-family="monospace">init_per_group</fo:inline></fo:inline></fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic"><fo:inline font-family="monospace">init_per_testcase</fo:inline></fo:inline></fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic"><fo:inline font-family="monospace">end_per_testcase</fo:inline></fo:inline></fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic"><fo:inline font-family="monospace">end_per_group</fo:inline></fo:inline></fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic"><fo:inline font-family="monospace">end_per_suite</fo:inline></fo:inline></fo:block></fo:list-item-body></fo:list-item>
     </fo:list-block>

     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      This is done in the CTH functions called <fo:inline font-family="monospace">post_&lt;name of function&gt;</fo:inline>. 
      These functions take the arguments <fo:inline font-family="monospace">SuiteName</fo:inline>, <fo:inline font-family="monospace">Name</fo:inline> (group or test case name, if applicable),
      <fo:inline font-family="monospace">Config</fo:inline>, <fo:inline font-family="monospace">Return</fo:inline>, and <fo:inline font-family="monospace">CTHState</fo:inline>. <fo:inline font-family="monospace">Config</fo:inline> in this
      case is the same <fo:inline font-family="monospace">Config</fo:inline> as the testcase is called with. 
      <fo:inline font-family="monospace">Return</fo:inline> is the value returned by the testcase. If the testcase 
      fails by crashing, <fo:inline font-family="monospace">Return</fo:inline> is
      <fo:inline font-family="monospace">{'EXIT',{{Error,Reason},Stacktrace}}</fo:inline>.</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The return value of the CTH function is always a combination of a
	result for the suite/group/test and an updated <fo:inline font-family="monospace">CTHState</fo:inline>. If
	you do not want the callback to affect the outcome of the test,
	return the <fo:inline font-family="monospace">Return</fo:inline> data as it is given to the CTH. You can also
	modify the test result. By returning the <fo:inline font-family="monospace">Config</fo:inline> list
	with element <fo:inline font-family="monospace">tc_status</fo:inline> removed, you can recover from a test 
	failure. As in all the pre hooks, it is also possible to fail/skip
	the test case in the post hook.</fo:block>
	
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
	<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 post_end_per_testcase(_Suite, _TC, Config, {'EXIT',{_,_}}, CTHState) -&gt;
   case db:check_consistency() of
     true -&gt;
       %% DB is good, pass the test.
       {proplists:delete(tc_status, Config), CTHState};
     false -&gt;
       %% DB is not good, mark as skipped instead of failing
       {{skip, "DB is inconsisten!"}, CTHState}
   end;
 post_end_per_testcase(_Suite, _TC, Config, Return, CTHState) -&gt;
   %% Do nothing if tc does not crash.
   {Return, CTHState}.</fo:block>

      <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Do recover from a testcase failure using CTHs only a last resort. 
      If used wrongly, it can be very difficult to determine which tests that 
      pass or fail in a test run.</fo:block></fo:block>
  
    

    <fo:block id="idp3755344" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Skip and Fail Hooks</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	After any post hook has been executed for all installed CTHs, 
	<fo:inline font-style="italic">on_tc_fail</fo:inline>
	or <fo:inline font-style="italic">on_tc_skip</fo:inline>
	is called if the testcase failed or was skipped, respectively. 
	You cannot affect the outcome of the tests any further at this point. 
      </fo:block>
    

  <fo:block id="idp3759056" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.14.5 
      Synchronizing External User Applications with Common Test</fo:block>
     
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">CTHs can be used to synchronize test runs with external user applications.
    The init function can, for example, start and/or communicate with an application that
    has the purpose of preparing the SUT for an upcoming test run, or 
    initialize a database for saving test data to during the test run. The
    terminate function can similarly order such an application to reset the SUT
    after the test run, and/or tell the application to finish active sessions
    and terminate.
    Any system error- or progress reports generated during the init- or
    termination stage are saved in the 
    <fo:inline font-style="italic">Pre- and Post Test I/O Log</fo:inline>. 
    (This is also true for any printouts made
    with <fo:inline font-family="monospace">ct:log/2</fo:inline> and <fo:inline font-family="monospace">ct:pal/2</fo:inline>).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To ensure that <fo:inline font-family="monospace">Common Test</fo:inline> does not start executing tests, or
    closes its log files and shuts down, before the external application
    is ready for it, <fo:inline font-family="monospace">Common Test</fo:inline> can be synchronized with the application. 
    During startup and shutdown, <fo:inline font-family="monospace">Common Test</fo:inline> can be suspended, simply by
    having a CTH evaluate a <fo:inline font-family="monospace">receive</fo:inline> expression in the init- or terminate
    function. The macros <fo:inline font-family="monospace">?CT_HOOK_INIT_PROCESS</fo:inline> (the process executing the hook
    init function) and <fo:inline font-family="monospace">?CT_HOOK_TERMINATE_PROCESS</fo:inline> (the process executing
    the hook terminate function) each specifies the name of the correct <fo:inline font-family="monospace">Common Test</fo:inline>
    process to send a message to. This is done to return from the <fo:inline font-family="monospace">receive</fo:inline>.
    These macros are defined in <fo:inline font-family="monospace">ct.hrl</fo:inline>.
    </fo:block>
  <fo:block id="idp3768256" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.14.6 
      Example CTH</fo:block>
    
     
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following CTH logs information about a test run into a format 
       parseable by <fo:inline font-style="italic">file:consult/1</fo:inline> 
       (in Kernel):
     </fo:block>
     <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 %%% @doc Common Test Example Common Test Hook module.
 -module(example_cth).

 %% Callbacks
 -export([id/1]).
 -export([init/2]).

 -export([pre_init_per_suite/3]).
 -export([post_init_per_suite/4]).
 -export([pre_end_per_suite/3]).
 -export([post_end_per_suite/4]).

 -export([pre_init_per_group/4]).
 -export([post_init_per_group/5]).
 -export([pre_end_per_group/4]).
 -export([post_end_per_group/5]).

 -export([pre_init_per_testcase/4]).
 -export([post_init_per_testcase/5]).
 -export([pre_end_per_testcase/4]).
 -export([post_end_per_testcase/5]).

 -export([on_tc_fail/4]).
 -export([on_tc_skip/4]).

 -export([terminate/1]).

 -record(state, { file_handle, total, suite_total, ts, tcs, data }).

 %% @doc Return a unique id for this CTH.
 id(Opts) -&gt;
   proplists:get_value(filename, Opts, "/tmp/file.log").

 %% @doc Always called before any other callback function. Use this to initiate
 %% any common state. 
 init(Id, Opts) -&gt;
     {ok,D} = file:open(Id,[write]),
     {ok, #state{ file_handle = D, total = 0, data = [] }}.

 %% @doc Called before init_per_suite is called. 
 pre_init_per_suite(Suite,Config,State) -&gt;
     {Config, State#state{ suite_total = 0, tcs = [] }}.

 %% @doc Called after init_per_suite.
 post_init_per_suite(Suite,Config,Return,State) -&gt;
     {Return, State}.

 %% @doc Called before end_per_suite. 
 pre_end_per_suite(Suite,Config,State) -&gt;
     {Config, State}.

 %% @doc Called after end_per_suite. 
 post_end_per_suite(Suite,Config,Return,State) -&gt;
     Data = {suites, Suite, State#state.suite_total, lists:reverse(State#state.tcs)},
     {Return, State#state{ data = [Data | State#state.data] ,
                           total = State#state.total + State#state.suite_total } }.

 %% @doc Called before each init_per_group.
 pre_init_per_group(Suite,Group,Config,State) -&gt;
     {Config, State}.

 %% @doc Called after each init_per_group.
 post_init_per_group(Suite,Group,Config,Return,State) -&gt;
     {Return, State}.

 %% @doc Called before each end_per_group. 
 pre_end_per_group(Suite,Group,Config,State) -&gt;
     {Config, State}.

 %% @doc Called after each end_per_group. 
 post_end_per_group(Suite,Group,Config,Return,State) -&gt;
     {Return, State}.

 %% @doc Called before each init_per_testcase.
 pre_init_per_testcase(Suite,TC,Config,State) -&gt;
     {Config, State#state{ ts = now(), total = State#state.suite_total + 1 } }.

 %% Called after each init_per_testcase (immediately before the test case).
 post_init_per_testcase(Suite,TC,Config,Return,State) -&gt;
     {Return, State}

%% @doc Called before each end_per_testcase (immediately after the test case).
 pre_end_per_testcase(Suite,TC,Config,State) -&gt;
     {Config, State}.

 %% @doc Called after each end_per_testcase.
 post_end_per_testcase(Suite,TC,Config,Return,State) -&gt;
     TCInfo = {testcase, Suite, TC, Return, timer:now_diff(now(), State#state.ts)},
     {Return, State#state{ ts = undefined, tcs = [TCInfo | State#state.tcs] } }.

 %% @doc Called after post_init_per_suite, post_end_per_suite, post_init_per_group,
 %% post_end_per_group and post_end_per_testcase if the suite, group or test case failed.
 on_tc_fail(Suite, TC, Reason, State) -&gt;
     State.

 %% @doc Called when a test case is skipped by either user action
 %% or due to an init function failing.  
 on_tc_skip(Suite, TC, Reason, State) -&gt;
     State.

 %% @doc Called when the scope of the CTH is done
 terminate(State) -&gt;
     io:format(State#state.file_handle, "~p.~n",
                [{test_run, State#state.total, State#state.data}]),
     file:close(State#state.file_handle),
     ok.</fo:block>
  <fo:block id="idp3775248" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.14.7 
      Built-In CTHs</fo:block>
     
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Common Test</fo:inline> is delivered with some general-purpose CTHs that
    can be enabled by the user to provide generic testing functionality.
    Some of these CTHs are enabled by default when <fo:inline font-family="monospace">common_test</fo:inline> is started to run.
    They can be disabled by setting <fo:inline font-family="monospace">enable_builtin_hooks</fo:inline> to
    <fo:inline font-family="monospace">false</fo:inline> on the command line or in the test specification. The following
    two CTHs are delivered with <fo:inline font-family="monospace">Common Test</fo:inline>:</fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
       <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">cth_log_redirect</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em">
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Built-in</fo:block>
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Captures all <fo:inline font-family="monospace">error_logger</fo:inline> and SASL logging
	events and prints them to the current test case log. If an event cannot be 
	associated with a test case, it is printed in the <fo:inline font-family="monospace">Common Test</fo:inline> framework log. 
	This happens for test cases running in parallel and events occuring
	in-between test cases. You can configure the level of
	<fo:inline font-style="italic">SASL</fo:inline> events report
	using the normal SASL mechanisms.</fo:block>
       </fo:block></fo:block-container>
       <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">cth_surefire</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em">
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Not built-in</fo:block>
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Captures all test results and outputs them as surefire
	XML into a file. The created file is by default
	called <fo:inline font-family="monospace">junit_report.xml</fo:inline>. The file name can be changed by
	setting option <fo:inline font-family="monospace">path</fo:inline> for this hook, for example:</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">-ct_hooks cth_surefire [{path,"/tmp/report.xml"}]</fo:inline></fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If option <fo:inline font-family="monospace">url_base</fo:inline> is set, an extra
	attribute named <fo:inline font-family="monospace">url</fo:inline> is added to each
	<fo:inline font-family="monospace">testsuite</fo:inline> and <fo:inline font-family="monospace">testcase</fo:inline> XML element. The value
	is constructed from <fo:inline font-family="monospace">url_base</fo:inline> and a relative path
	to the test suite or test case log, respectively, for example:</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">-ct_hooks cth_surefire [{url_base, "http://myserver.com/"}]</fo:inline></fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">gives an URL attribute value similar to</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">"http://myserver.com/ct_run.ct@myhost.2012-12-12_11.19.39/
x86_64-unknown-linux-gnu.my_test.logs/run.2012-12-12_11.19.39/suite.log.html"</fo:inline></fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Surefire XML can, for example, be used by Jenkins to display test
	results.</fo:block>
       </fo:block></fo:block-container>
     </fo:block>

  <fo:block id="idp3795824" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.15  Some Thoughts about Testing</fo:marker>1.15  Some Thoughts about Testing</fo:block><fo:block id="idp3798496" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.15.1 
      Goals</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is not possible to prove that a program is correct by
    testing. On the contrary, it has been formally proven that it is
    impossible to prove programs in general by testing. Theoretical
    program proofs or plain examination of code can be viable options
    for those wishing to certify that a program is correct. The test
    server, as it is based on testing, cannot be used for
    certification. Its intended use is instead to (cost effectively)
    <fo:inline font-weight="bold">find bugs</fo:inline>. A successful test suite is one that reveals a
    bug. If a test suite results in OK, then we know very little that
    we did not know before.</fo:block>

  <fo:block id="idp3800864" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.15.2 
      What to Test</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      There are many kinds of test suites. Some concentrate on
      calling every function or command (in the documented way) in 
      a certain interface.
      Some others do the same, but use all kinds of illegal
      parameters, and verify that the server stays alive and rejects
      the requests with reasonable error codes. Some test suites
      simulate an application (typically consisting of a few modules of
      an application), some try to do tricky requests in general, and some
      test suites even test internal functions with help of special
      Load Modules on target.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Another interesting category of test suites is the one
      checking that fixed bugs do not reoccur. When a bugfix is introduced,
      a test case that checks for that specific bug is written
      and submitted to the affected test suites.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Aim for finding bugs. Write whatever test that has the highest
      probability of finding a bug, now or in the future. Concentrate
      more on the critical parts. Bugs in critical subsystems are much
      more expensive than others.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Aim for functionality testing rather than implementation
      details. Implementation details change quite often, and the test
      suites are to be long lived. Implementation details often differ
      on different platforms and versions. If implementation details
      must be tested, try to factor them out into separate test
      cases. These test cases can later be rewritten or skipped.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Also, aim for testing everything once, no less, no more. It is
      not effective having every test case fail only because one
      function in the interface changed.</fo:block>

  <fo:block id="idp113776" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">2   
      Reference Manual</fo:block>
  <fo:block page-break-before="always" id="idp1844608" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">common_test</fo:marker>common_test</fo:block>Erlang module</fo:block>
  <fo:block/>
  common_test 
  <fo:block/>

  

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Common Test</fo:inline> framework is an environment for
      implementing and performing automatic and semi-automatic execution of
      test cases.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In brief, <fo:inline font-family="monospace">Common Test</fo:inline> supports:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Automated execution of test suites (sets of test cases)</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Logging of events during execution</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>HTML presentation of test suite results</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>HTML presentation of test suite code</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Support functions for test suite authors</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Step-by-step execution of test cases</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following section describes the mandatory and optional test suite
      functions that <fo:inline font-family="monospace">Common Test</fo:inline> calls during test execution.
      For more details, see section
      <fo:inline font-style="italic">Writing Test Suites</fo:inline>
      in the User's Guide.</fo:block>

  

  <fo:block id="idp325168" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Test Case Callback Functions</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following functions define the callback interface
      for a test suite.</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1589504">Module:all() -&gt; Tests | {skip,Reason} </fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Tests = [TestCase | {group,GroupName} | {group,GroupName,Properties} | {group,GroupName,Properties,SubGroups}]</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TestCase = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">GroupName = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Properties = [parallel | sequence | Shuffle | {RepeatType,N}] | default</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SubGroups = [{GroupName,Properties} | {GroupName,Properties,SubGroups}]</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Shuffle = shuffle | {shuffle,Seed}</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Seed = {integer(),integer(),integer()}</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">RepeatType = repeat | repeat_until_all_ok | repeat_until_all_fail | repeat_until_any_ok | repeat_until_any_fail</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">N = integer() | forever</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>	
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">MANDATORY</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the list of all test cases and test case groups in the
          test suite module to be executed. This list also specifies the
          order the cases and groups are executed by <fo:inline font-family="monospace">Common Test</fo:inline>.
          A test case is represented by an atom,
	  the name of the test case function. A test case group is
	  represented by a <fo:inline font-family="monospace">group</fo:inline> tuple, where <fo:inline font-family="monospace">GroupName</fo:inline>,
	  an atom, is the name of the group (defined in
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">groups/0</fo:inline></fo:inline>).
	  Execution properties for groups can also be specified, both
	  for a top-level group and for any of its subgroups.
	  Group execution properties specified here override
	  properties in the group definition (see
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">groups/0</fo:inline></fo:inline>).
	  (With value <fo:inline font-family="monospace">default</fo:inline>, the group definition properties
	  are used).</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">{skip,Reason}</fo:inline> is returned, all test cases
          in the module are skipped and <fo:inline font-family="monospace">Reason</fo:inline>
          is printed on the HTML result page.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details on groups, see section
	  <fo:inline font-style="italic">Test Case
	  Groups</fo:inline> in the User's Guide.</fo:block>

    </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1327744">Module:groups() -&gt; GroupDefs</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">GroupDefs = [Group]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Group = {GroupName,Properties,GroupsAndTestCases}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">GroupName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Properties = [parallel | sequence | Shuffle | {RepeatType,N}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">GroupsAndTestCases = [Group | {group,GroupName} | TestCase]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TestCase = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Shuffle = shuffle | {shuffle,Seed}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Seed = {integer(),integer(),integer()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">RepeatType = repeat | repeat_until_all_ok | repeat_until_all_fail | repeat_until_any_ok | repeat_until_any_fail</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">N = integer() | forever</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>	
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">OPTIONAL</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defines test case groups. For details, see section
	  <fo:inline font-style="italic">Test Case 
	  Groups</fo:inline> in the User's Guide.</fo:block>      
      </fo:block>

      <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp391360">Module:suite() -&gt; [Info] </fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Info = {timetrap,Time} | {require,Required} | {require,Name,Required} | {userdata,UserData} | {silent_connections,Conns} | {stylesheet,CSSFile} | {ct_hooks, CTHs}</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Time = TimeVal | TimeFunc</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TimeVal = MilliSec | {seconds,integer()} | {minutes,integer()} | {hours,integer()}</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TimeFunc = {Mod,Func,Args} | Fun</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MilliSec = integer()</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Mod = atom()</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Func = atom()</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Args = list()</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Fun = fun()</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Required = Key | {Key,SubKeys} | {Key,SubKey} | {Key,SubKey,SubKeys}</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = atom()</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SubKeys = SubKey | [SubKey]</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SubKey = atom()</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = atom()</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserData = term()</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Conns = [atom()]</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CSSFile = string()</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CTHs = [CTHModule |</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">        {CTHModule, CTHInitArgs} |</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">        {CTHModule, CTHInitArgs, CTHPriority}]</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CTHModule = atom()</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CTHInitArgs = term()</fo:block></fo:list-item-body></fo:list-item>
	</fo:list-block>	

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">OPTIONAL</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The test suite information function.	Returns a list of tagged
          tuples specifying various properties related to the execution of
          this test suite (common for all test cases in the suite).</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tag <fo:inline font-family="monospace">timetrap</fo:inline> sets the maximum time that each
	  test case is allowed to execute (including
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">init_per_testcase/2</fo:inline></fo:inline>
	  and
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">end_per_testcase/2</fo:inline></fo:inline>).
	  If the timetrap time is exceeded, the test case fails with reason
	  <fo:inline font-family="monospace">timetrap_timeout</fo:inline>. A <fo:inline font-family="monospace">TimeFunc</fo:inline> function can be used to
	  set a new timetrap by returning a <fo:inline font-family="monospace">TimeVal</fo:inline>. It can also be
	  used to trigger a timetrap time-out by, at some point, returning a
	  value other than a <fo:inline font-family="monospace">TimeVal</fo:inline>. For details, see section
	  <fo:inline font-style="italic">Timetrap Time-Outs</fo:inline>
	  in the User's Guide.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tag <fo:inline font-family="monospace">require</fo:inline> specifies configuration variables
	  required by test cases (or configuration functions)
	  in the suite. If the required configuration variables are not found
	  in any of the configuration files, all test cases are skipped.
	  For details about the <fo:inline font-family="monospace">require</fo:inline> functionality, see funtion
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:require/1,2</fo:inline></fo:inline>.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">With <fo:inline font-family="monospace">userdata</fo:inline>, the user can
	  specify any test suite-related information, which can be
	  read by calling
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:userdata/2</fo:inline></fo:inline>.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tag <fo:inline font-family="monospace">ct_hooks</fo:inline> specifies the
	  <fo:inline font-style="italic">Common Test Hooks</fo:inline>
	  to be run with this suite.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Other tuples than the ones defined are ignored.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details about the test suite information function, see section
	  <fo:inline font-style="italic">Test
	  Suite Information Function</fo:inline> in the User's Guide.</fo:block>
    </fo:block>

      <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp92608">Module:init_per_suite(Config) -&gt; NewConfig | {skip,Reason} |
	  {skip_and_save,Reason,SaveConfig}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Config = NewConfig = SaveConfig = [{Key,Value}]</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = atom()</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value = term()</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
	</fo:list-block>	

	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">OPTIONAL; if this function is defined, then <fo:inline font-style="italic"><fo:inline font-family="monospace">end_per_suite/1</fo:inline></fo:inline>
	  must also be defined.</fo:block>

	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This configuration function is called as the first function in the
	  suite. It typically contains initializations that are common for
	  all test cases in the suite, and that must only be done
	  once. Parameter <fo:inline font-family="monospace">Config</fo:inline> is the configuration data
	  that can be modified. Whatever is returned from this
	  function is specified as <fo:inline font-family="monospace">Config</fo:inline> to all configuration functions
	  and test cases in the suite.</fo:block>

	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">{skip,Reason}</fo:inline>
	  is returned, all test cases in the suite are skipped
	  and <fo:inline font-family="monospace">Reason</fo:inline> is printed in the overview log for the suite.</fo:block>

	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information on <fo:inline font-family="monospace">save_config</fo:inline> and <fo:inline font-family="monospace">skip_and_save</fo:inline>,
	  see section
	  <fo:inline font-style="italic">Saving
	  Configuration Data</fo:inline> in the User's Guide.</fo:block>
    </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp650704">Module:end_per_suite(Config) -&gt; term() | 
	{save_config,SaveConfig}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Config = SaveConfig = [{Key,Value}]</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>	
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">OPTIONAL; if this function is defined, then <fo:inline font-style="italic"><fo:inline font-family="monospace">init_per_suite/1</fo:inline></fo:inline>
	  must also be defined.</fo:block>
	
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is called as the last test case in the
	  suite. It is meant to be used for cleaning up after
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">init_per_suite/1</fo:inline></fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information on <fo:inline font-family="monospace">save_config</fo:inline>, see section
	  <fo:inline font-style="italic">Saving
	  Configuration Data</fo:inline> in the User's Guide.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4816400">Module:group(GroupName) -&gt; [Info] </fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Info = {timetrap,Time} | {require,Required} | {require,Name,Required} | {userdata,UserData} | {silent_connections,Conns} | {stylesheet,CSSFile} | {ct_hooks, CTHs}</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Time = TimeVal | TimeFunc</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TimeVal = MilliSec | {seconds,integer()} | {minutes,integer()} | {hours,integer()}</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TimeFunc = {Mod,Func,Args} | Fun</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MilliSec = integer()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Mod = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Func = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Args = list()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Fun = fun()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Required = Key | {Key,SubKeys} | {Key,Subkey} | {Key,Subkey,SubKeys}</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SubKeys = SubKey | [SubKey]</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SubKey = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserData = term()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Conns = [atom()]</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CSSFile = string()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CTHs = [CTHModule |</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">        {CTHModule, CTHInitArgs} |</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">        {CTHModule, CTHInitArgs, CTHPriority}]</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CTHModule = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CTHInitArgs = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>	

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">OPTIONAL</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The test case group information function. It is supposed to
	  return a list of tagged tuples that specify various properties
	  related to the execution of a test case group (that is, its test
	  cases and subgroups). Properties set by
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">group/1</fo:inline></fo:inline> override
	  properties with the same key that have been set previously by
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">suite/0</fo:inline></fo:inline>.</fo:block>
	  
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tag <fo:inline font-family="monospace">timetrap</fo:inline> sets the maximum time that each
	  test case is allowed to execute (including
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">init_per_testcase/2</fo:inline></fo:inline>
	  and
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">end_per_testcase/2</fo:inline></fo:inline>).
	  If the timetrap time is
	  exceeded, the test case fails with reason
	  <fo:inline font-family="monospace">timetrap_timeout</fo:inline>. A <fo:inline font-family="monospace">TimeFunc</fo:inline> function can be used to
	  set a new timetrap by returning a <fo:inline font-family="monospace">TimeVal</fo:inline>. It can also be
	  used to trigger a timetrap time-out by, at some point, returning a
	  value other than a <fo:inline font-family="monospace">TimeVal</fo:inline>. For details, see section
	  <fo:inline font-style="italic">Timetrap
	  Time-Outs</fo:inline> in the User's Guide.</fo:block>
	
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tag <fo:inline font-family="monospace">require</fo:inline> specifies configuration variables
	  required by test cases (or configuration functions)
	  in the suite. If the required configuration variables are not found
	  in any of the configuration files, all test cases in this group are
	  skipped. For details about the <fo:inline font-family="monospace">require</fo:inline> functionality, see
	  function
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:require/1,2</fo:inline></fo:inline>.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">With <fo:inline font-family="monospace">userdata</fo:inline>, the user can
	  specify any test case group related information that can be 
	  read by calling
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:userdata/2</fo:inline></fo:inline>.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tag <fo:inline font-family="monospace">ct_hooks</fo:inline> specifies the
	  <fo:inline font-style="italic">Common Test Hooks</fo:inline>
	  to be run with this suite.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Other tuples than the ones defined are ignored.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details about the test case group information function,
	  see section <fo:inline font-style="italic">Group
	  Information Function</fo:inline> in the User's Guide.</fo:block>
    </fo:block>

      <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4650192">Module:init_per_group(GroupName, Config) -&gt; NewConfig |
	  {skip,Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">GroupName = atom()</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Config = NewConfig = [{Key,Value}]</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = atom()</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value = term()</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
	</fo:list-block>	

	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">OPTIONAL; if this function is defined, then <fo:inline font-style="italic"><fo:inline font-family="monospace">end_per_group/2</fo:inline></fo:inline>
	    must also be defined.</fo:block>

	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This configuration function is called before execution of a
	    test case group. It typically contains initializations that are 
	    common for all test cases and subgroups in the group, and that
	    must only be performed once. <fo:inline font-family="monospace">GroupName</fo:inline> is the name of the
	    group, as specified in the group definition (see
	    <fo:inline font-style="italic"><fo:inline font-family="monospace">groups/0</fo:inline></fo:inline>).
	    Parameter <fo:inline font-family="monospace">Config</fo:inline> is the configuration data that can be
	    modified.
	    The return value of this function is given as <fo:inline font-family="monospace">Config</fo:inline>
	    to all test cases and subgroups in the group.</fo:block>

	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">{skip,Reason}</fo:inline>
	    is returned, all test cases in the group are skipped and
	    <fo:inline font-family="monospace">Reason</fo:inline> is printed in the overview log for the group.</fo:block>

	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information about test case groups, see section 
	    <fo:inline font-style="italic">Test Case 
	    Groups</fo:inline> in the User's Guide.</fo:block> 
    </fo:block>

      <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4661472">Module:end_per_group(GroupName, Config) -&gt; term() |
	  {return_group_result,Status}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">GroupName = atom()</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Config = [{Key,Value}]</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = atom()</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value = term()</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Status = ok | skipped | failed</fo:block></fo:list-item-body></fo:list-item>
	</fo:list-block>	
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">OPTIONAL; if this function is defined, then <fo:inline font-style="italic"><fo:inline font-family="monospace">init_per_group/2</fo:inline></fo:inline>
	    must also be defined.</fo:block>

	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is called after the execution of a test case group
	    is finished. It is meant to be used for cleaning up after
	    <fo:inline font-style="italic"><fo:inline font-family="monospace">init_per_group/2</fo:inline></fo:inline>.
	    A status value for a nested subgroup can be returned with
	    <fo:inline font-family="monospace">{return_group_result,Status}</fo:inline>. The status can be retrieved in
	    <fo:inline font-style="italic"><fo:inline font-family="monospace">end_per_group/2</fo:inline></fo:inline>
	    for the group on the level above. The status is also used by
	    <fo:inline font-family="monospace">Common Test</fo:inline> for deciding if execution of a group is to
	    proceed if property <fo:inline font-family="monospace">sequence</fo:inline> or <fo:inline font-family="monospace">repeat_until_*</fo:inline>
	    is set.</fo:block>

	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details about test case groups, see section 
	    <fo:inline font-style="italic">Test Case
	    Groups</fo:inline> in the User's Guide.</fo:block> 
       </fo:block>

      <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4445568">Module:init_per_testcase(TestCase, Config) -&gt; NewConfig | {fail,Reason} | {skip,Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> TestCase = atom()</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> Config = NewConfig = [{Key,Value}]</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> Key = atom()</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> Value = term()</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> Reason = term()</fo:block></fo:list-item-body></fo:list-item>
	</fo:list-block>

	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">OPTIONAL; if this function is defined,
	    then <fo:inline font-style="italic">
	      <fo:inline font-family="monospace">end_per_testcase/2</fo:inline></fo:inline> must also be
	    defined.</fo:block>

	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is called before each test case. Argument
	  <fo:inline font-family="monospace">TestCase</fo:inline> is the test case name, and
	  <fo:inline font-family="monospace">Config</fo:inline> (list of key-value tuples) is the configuration
	  data that can be modified. The <fo:inline font-family="monospace">NewConfig</fo:inline> list returned
	  from this function is given as <fo:inline font-family="monospace">Config</fo:inline> to the test case.
	  If <fo:inline font-family="monospace">{fail,Reason}</fo:inline> is returned, the test case is
	  marked as failed without being executed.</fo:block>

	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">{skip,Reason}</fo:inline> is returned, the test case is skipped
	    and <fo:inline font-family="monospace">Reason</fo:inline> is printed in the overview log for the suite.</fo:block>
    </fo:block>

      <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4455632">Module:end_per_testcase(TestCase, Config) -&gt; term() | {fail,Reason} | {save_config,SaveConfig}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TestCase = atom()</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Config = SaveConfig = [{Key,Value}]</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = atom()</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value = term()</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
	</fo:list-block>	

	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">OPTIONAL; if this function is defined,
	    then <fo:inline font-style="italic">
	      <fo:inline font-family="monospace">init_per_testcase/2</fo:inline></fo:inline> must also be
	    defined.</fo:block>

	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is called after each test case, and can be used
	    to clean up after
	    <fo:inline font-style="italic"><fo:inline font-family="monospace">init_per_testcase/2</fo:inline></fo:inline>
	    and the test case. Any return value (besides <fo:inline font-family="monospace">{fail,Reason}</fo:inline>
	    and <fo:inline font-family="monospace">{save_config,SaveConfig}</fo:inline>) is ignored. By returning
	    <fo:inline font-family="monospace">{fail,Reason}</fo:inline>, <fo:inline font-family="monospace">TestCase</fo:inline> is marked as faulty (even
	    though it was successful in the sense that it returned
	    a value instead of terminating).</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information on <fo:inline font-family="monospace">save_config</fo:inline>, see section
	  <fo:inline font-style="italic">Saving
	  Configuration Data</fo:inline> in the User's Guide.</fo:block>
	</fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4466736">Module:Testcase() -&gt; [Info] </fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Info = {timetrap,Time} | {require,Required} | {require,Name,Required} | {userdata,UserData} | {silent_connections,Conns}</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Time = TimeVal | TimeFunc</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TimeVal = MilliSec | {seconds,integer()} | {minutes,integer()} | {hours,integer()}</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TimeFunc = {Mod,Func,Args} | Fun</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MilliSec = integer()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Mod = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Func = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Args = list()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Fun = fun()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Required = Key | {Key,SubKeys} | {Key,Subkey} | {Key,Subkey,SubKeys}</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SubKeys = SubKey | [SubKey]</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SubKey = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserData = term()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Conns = [atom()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">OPTIONAL</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The test case information function. It is supposed to
	  return a list of tagged tuples that specify various properties
	  related to the execution of this particular test case.
	  Properties set by
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">Testcase/0</fo:inline></fo:inline>
	  override properties set previously for the test case by
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">group/1</fo:inline></fo:inline> or
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">suite/0</fo:inline></fo:inline>.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tag <fo:inline font-family="monospace">timetrap</fo:inline> sets the maximum time that the
	  test case is allowed to execute. If the timetrap time is
	  exceeded, the test case fails with reason <fo:inline font-family="monospace">timetrap_timeout</fo:inline>.
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">init_per_testcase/2</fo:inline></fo:inline>
	  and
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">end_per_testcase/2</fo:inline></fo:inline>
	  are included in the timetrap time.
	  A <fo:inline font-family="monospace">TimeFunc</fo:inline> function can be used to
	  set a new timetrap by returning a <fo:inline font-family="monospace">TimeVal</fo:inline>. It can also be
	  used to trigger a timetrap time-out by, at some point, returning a
	  value other than a <fo:inline font-family="monospace">TimeVal</fo:inline>. For details, see section
	  <fo:inline font-style="italic">Timetrap
	  Time-Outs</fo:inline> in the User's Guide.</fo:block>
	
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tag <fo:inline font-family="monospace">require</fo:inline> specifies configuration variables
	  that are required by the test case (or <fo:inline font-family="monospace">init_per_testcase/2</fo:inline>
	  or <fo:inline font-family="monospace">end_per_testcase/2</fo:inline>).
	  If the required configuration variables are not found in any of the
	  configuration files, the test case is skipped. For details about
	  the <fo:inline font-family="monospace">require</fo:inline> functionality, see function
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:require/1,2</fo:inline></fo:inline>.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">timetrap</fo:inline> or <fo:inline font-family="monospace">require</fo:inline> is not set, the
	  default values specified by
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">suite/0</fo:inline></fo:inline> (or
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">group/1</fo:inline></fo:inline>) are used.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">With <fo:inline font-family="monospace">userdata</fo:inline>, the user can specify any test case-related
	  information that can be read by calling
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:userdata/3</fo:inline></fo:inline>.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Other tuples than the ones defined are ignored.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details about the test case information function, see section
	  <fo:inline font-style="italic">Test
	  Case Information Function</fo:inline> in the User's Guide.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4495008">Module:Testcase(Config) -&gt;  term() | {skip,Reason} | {comment,Comment} | {save_config,SaveConfig} | {skip_and_save,Reason,SaveConfig} | exit() </fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Config = SaveConfig = [{Key,Value}]</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value = term()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Comment = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>	  
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">MANDATORY</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The implementation of a test case. Call the functions to test and
	  check the result. If something fails, ensure the
	  function causes a runtime error or call
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:fail/1,2</fo:inline></fo:inline>
	  (which also causes the test case process to terminate).</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Elements from the <fo:inline font-family="monospace">Config</fo:inline> list can, for example, be read
	  with <fo:inline font-family="monospace">proplists:get_value/2</fo:inline> in STDLIB
	  (or the macro <fo:inline font-family="monospace">?config</fo:inline> defined in <fo:inline font-family="monospace">ct.hrl</fo:inline>).</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you decide not to run the test case after all, return
	  <fo:inline font-family="monospace">{skip,Reason}</fo:inline>. <fo:inline font-family="monospace">Reason</fo:inline> is then
	  printed in field <fo:inline font-family="monospace">Comment</fo:inline> on the HTML result page.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To print some information in field <fo:inline font-family="monospace">Comment</fo:inline> on the HTML
	  result page, return <fo:inline font-family="monospace">{comment,Comment}</fo:inline>.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the function returns anything else, the test case is
	  considered successful. The return value always gets printed
	  in the test case log file.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details about test case implementation, see section
	  <fo:inline font-style="italic">Test Cases</fo:inline>
	  in the User's Guide.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information on <fo:inline font-family="monospace">save_config</fo:inline> and <fo:inline font-family="monospace">skip_and_save</fo:inline>,
	  see section
	  <fo:inline font-style="italic">Saving
	  Configuration Data</fo:inline> in the User's Guide.</fo:block>
      </fo:block>

  

<fo:block page-break-before="always" id="idp4703488" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">ct_run</fo:marker>ct_run</fo:block>Command</fo:block>
  <fo:block/>
  ct_run
  Program used for starting Common Test from the
    OS command line.

  
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">ct_run</fo:inline> program is automatically installed with Erlang/OTP
    and the <fo:inline font-family="monospace">Common Test</fo:inline> application (for more information, see
    section <fo:inline font-style="italic">Installation</fo:inline>
    in the User's Guide). The program accepts different start flags.
    Some flags trigger <fo:inline font-family="monospace">ct_run</fo:inline> to start <fo:inline font-family="monospace">Common Test</fo:inline> and
    pass on data to it. Some flags start an Erlang node prepared for
    running <fo:inline font-family="monospace">Common Test</fo:inline> in a particular mode.</fo:block>

  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The interface function
    <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:run_test/1</fo:inline></fo:inline>,
    corresponding to the <fo:inline font-family="monospace">ct_run</fo:inline> program, is used for starting
    <fo:inline font-family="monospace">Common Test</fo:inline> from the Erlang shell (or an Erlang program).
    For details, see the <fo:inline font-style="italic"><fo:inline font-family="monospace">ct</fo:inline></fo:inline>
    manual page.</fo:block>

  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ct_run</fo:inline> also accepts Erlang emulator flags. These are used
    when <fo:inline font-family="monospace">ct_run</fo:inline> calls <fo:inline font-family="monospace">erl</fo:inline> to start the Erlang node (this
    makes it possible to add directories to the code server path,
    change the cookie on the node, start more applications, and so on).</fo:block>

  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">With the optional flag <fo:inline font-family="monospace">-erl_args</fo:inline>, options on the <fo:inline font-family="monospace">ct_run</fo:inline>
    command line can be divided into two groups:</fo:block>

  <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>One group that <fo:inline font-family="monospace">Common Test</fo:inline> is to process (those
      preceding <fo:inline font-family="monospace">-erl_args</fo:inline>).</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>One group that <fo:inline font-family="monospace">Common Test</fo:inline> is to ignore and pass on
      directly to the emulator (those following <fo:inline font-family="monospace">-erl_args</fo:inline>).</fo:block></fo:list-item-body></fo:list-item>
  </fo:list-block>

  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Options preceding <fo:inline font-family="monospace">-erl_args</fo:inline> that <fo:inline font-family="monospace">Common Test</fo:inline>
    does not recognize are also passed on to the emulator untouched.
    By <fo:inline font-family="monospace">-erl_args</fo:inline> the user can specify flags with the same name, but
    with different destinations, on the <fo:inline font-family="monospace">ct_run</fo:inline> command line.</fo:block>

  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If flags <fo:inline font-family="monospace">-pa</fo:inline> or <fo:inline font-family="monospace">-pz</fo:inline> are specified in the
    <fo:inline font-family="monospace">Common Test</fo:inline> group of options (preceding <fo:inline font-family="monospace">-erl_args</fo:inline>),
    relative directories are converted to absolute and reinserted into
    the code path by <fo:inline font-family="monospace">Common Test</fo:inline>. This is to avoid problems
    loading user modules when <fo:inline font-family="monospace">Common Test</fo:inline> changes working directory
    during test runs. However, <fo:inline font-family="monospace">Common Test</fo:inline> ignores flags <fo:inline font-family="monospace">-pa</fo:inline>
    and <fo:inline font-family="monospace">-pz</fo:inline> following <fo:inline font-family="monospace">-erl_args</fo:inline> on the command line. These
    directories are added to the code path normally (that is, on specified
    form).</fo:block>

  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Exit status is set before the program ends. Value <fo:inline font-family="monospace">0</fo:inline> indicates
    a successful test result, <fo:inline font-family="monospace">1</fo:inline> indicates one or more failed or
    auto-skipped test cases, and <fo:inline font-family="monospace">2</fo:inline> indicates test execution failure.</fo:block>

  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">ct_run</fo:inline> is called with option <fo:inline font-family="monospace">-help</fo:inline>, it prints all
    valid start flags to <fo:inline font-family="monospace">stdout</fo:inline>.</fo:block>
  

  <fo:block id="idp4730192" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Run Tests from Command Line</fo:block>
  
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 ct_run -dir TestDir1 TestDir2 .. TestDirN |
  [-dir TestDir] -suite Suite1 Suite2 .. SuiteN
  [-group Groups1 Groups2 .. GroupsN] [-case Case1 Case2 .. CaseN]
  [-step [config | keep_inactive]]
  [-config ConfigFile1 ConfigFile2 .. ConfigFileN]
  [-userconfig CallbackModule1 ConfigString1 and CallbackModule2
   ConfigString2 and .. CallbackModuleN ConfigStringN]
  [-decrypt_key Key] | [-decrypt_file KeyFile]
  [-label Label]
  [-logdir LogDir]
  [-logopts LogOpts]
  [-verbosity GenVLevel | [Category1 VLevel1 and
   Category2 VLevel2 and .. CategoryN VLevelN]]
  [-silent_connections [ConnType1 ConnType2 .. ConnTypeN]]
  [-stylesheet CSSFile]
  [-cover CoverCfgFile]
  [-cover_stop Bool]
  [-event_handler EvHandler1 EvHandler2 .. EvHandlerN] |
  [-event_handler_init EvHandler1 InitArg1 and
   EvHandler2 InitArg2 and .. EvHandlerN InitArgN]
  [-include InclDir1 InclDir2 .. InclDirN]
  [-no_auto_compile]
  [-abort_if_missing_suites]
  [-muliply_timetraps Multiplier]
  [-scale_timetraps]
  [-create_priv_dir auto_per_run | auto_per_tc | manual_per_tc]
  [-repeat N] |
  [-duration HHMMSS [-force_stop [skip_rest]]] |
  [-until [YYMoMoDD]HHMMSS [-force_stop [skip_rest]]]
  [-basic_html]
  [-no_esc_chars]
  [-keep_logs all | NLogs]
  [-ct_hooks CTHModule1 CTHOpts1 and CTHModule2 CTHOpts2 and ..
   CTHModuleN CTHOptsN]
  [-exit_status ignore_config]
  [-help]</fo:block>
  

  <fo:block id="idp4732912" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Run Tests using Test Specification</fo:block>
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 ct_run -spec TestSpec1 TestSpec2 .. TestSpecN
  [-join_specs]
  [-config ConfigFile1 ConfigFile2 .. ConfigFileN]
  [-userconfig CallbackModule1 ConfigString1 and CallbackModule2
   ConfigString2 and .. and CallbackModuleN ConfigStringN]
  [-decrypt_key Key] | [-decrypt_file KeyFile]
  [-label Label]
  [-logdir LogDir]
  [-logopts LogOpts]
  [-verbosity GenVLevel | [Category1 VLevel1 and
   Category2 VLevel2 and .. CategoryN VLevelN]]
  [-allow_user_terms]
  [-silent_connections [ConnType1 ConnType2 .. ConnTypeN]]
  [-stylesheet CSSFile]
  [-cover CoverCfgFile]
  [-cover_stop Bool]
  [-event_handler EvHandler1 EvHandler2 .. EvHandlerN] |
  [-event_handler_init EvHandler1 InitArg1 and
   EvHandler2 InitArg2 and .. EvHandlerN InitArgN]
  [-include InclDir1 InclDir2 .. InclDirN]
  [-no_auto_compile]
  [-abort_if_missing_suites]
  [-muliply_timetraps Multiplier]
  [-scale_timetraps]
  [-create_priv_dir auto_per_run | auto_per_tc | manual_per_tc]
  [-repeat N] |
  [-duration HHMMSS [-force_stop [skip_rest]]] |
  [-until [YYMoMoDD]HHMMSS [-force_stop [skip_rest]]]
  [-basic_html]
  [-no_esc_chars]
  [-keep_logs all | NLogs]
  [-ct_hooks CTHModule1 CTHOpts1 and CTHModule2 CTHOpts2 and ..
   CTHModuleN CTHOptsN]
  [-exit_status ignore_config]</fo:block>
  

  <fo:block id="idp4735504" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Run Tests in Web-Based GUI</fo:block>
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 ct_run -vts [-browser Browser]
  [-dir TestDir1 TestDir2 .. TestDirN] |
  [[dir TestDir] -suite Suite [[-group Group] [-case Case]]]
  [-config ConfigFile1 ConfigFile2 .. ConfigFileN]
  [-userconfig CallbackModule1 ConfigString1 and CallbackModule2
    ConfigString2 and .. and CallbackModuleN ConfigStringN]
  [-logopts LogOpts]
  [-verbosity GenVLevel | [Category1 VLevel1 and
   Category2 VLevel2 and .. CategoryN VLevelN]]
  [-decrypt_key Key] | [-decrypt_file KeyFile]
  [-include InclDir1 InclDir2 .. InclDirN]
  [-no_auto_compile]
  [-abort_if_missing_suites]
  [-muliply_timetraps Multiplier]
  [-scale_timetraps]
  [-create_priv_dir auto_per_run | auto_per_tc | manual_per_tc]
  [-basic_html]
  [-no_esc_chars]
  [-keep_logs all | NLogs]</fo:block>
  

  <fo:block id="idp4737600" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Refresh HTML Index Files</fo:block>
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 ct_run -refresh_logs [-logdir LogDir] [-basic_html]
  [-keep_logs all | NLogs]</fo:block>
  

  <fo:block id="idp4738928" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Run Common Test in Interactive Mode</fo:block>
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 ct_run -shell
  [-config ConfigFile1 ConfigFile2 ... ConfigFileN]
  [-userconfig CallbackModule1 ConfigString1 and CallbackModule2
   ConfigString2 and .. and CallbackModuleN ConfigStringN]
  [-decrypt_key Key] | [-decrypt_file KeyFile]</fo:block>
  

  <fo:block id="idp4740512" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Start a Common Test Master Node</fo:block>
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 ct_run -ctmaster</fo:block>
  

  <fo:block id="idp4741872" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">See Also</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information about the start flags, see section
      <fo:inline font-style="italic">Running Tests and Analyzing
      Results</fo:inline> in the User's Guide.</fo:block>
  

<fo:block page-break-before="always" id="idp4751168" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">ct</fo:marker>ct</fo:block>Erlang module</fo:block>
  <fo:block/>
  ct
  <fo:block/>

  

     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Main user interface for the <fo:inline font-family="monospace">Common Test</fo:inline> framework.</fo:block>

     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module implements the command-line interface for running
       tests and basic functions for <fo:inline font-family="monospace">Common Test</fo:inline> case issues, such as
       configuration and logging.</fo:block>

     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Test Suite Support Macros</fo:inline></fo:block> 

     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">config</fo:inline> macro is defined in <fo:inline font-family="monospace">ct.hrl</fo:inline>. This macro is
       to be used to retrieve information from the <fo:inline font-family="monospace">Config</fo:inline> variable sent
       to all test cases. It is used with two arguments; the first is the name
       of the configuration variable to retrieve, the second is the
       <fo:inline font-family="monospace">Config</fo:inline> variable supplied to the test case.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Possible configuration variables include:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">data_dir</fo:inline> - Data file directory</fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">priv_dir</fo:inline> - Scratch file directory</fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Whatever added by
      <fo:inline font-style="italic"><fo:inline font-family="monospace">init_per_suite/1</fo:inline></fo:inline>
      or
      <fo:inline font-style="italic"><fo:inline font-family="monospace">init_per_testcase/2</fo:inline></fo:inline>
      in the test suite.</fo:block></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

  

  <fo:block id="idp4763088" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Data Types</fo:block>
    
    
    <fo:block space-after="0.25em" space-before="0.25em">

      <fo:block keep-with-next.within-page="always">
	
	<fo:inline font-family="monospace">handle() = pid()</fo:inline>
      </fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The identity (handle) of a connection.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
	
	<fo:inline font-family="monospace">config_key() = atom()</fo:inline>
      </fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A configuration key which exists in a configuration file</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
	<fo:inline font-family="monospace">target_name() = atom()</fo:inline>
      </fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A name and association to configuration data introduced
          through a require statement, or a call to
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:require/2</fo:inline></fo:inline>,
          for example,
          <fo:inline font-family="monospace">ct:require(mynodename,{node,[telnet]})</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
	
	<fo:inline font-family="monospace">key_or_name() = config_key() | target_name()</fo:inline>
      </fo:block>
      <fo:block-container><fo:block start-indent="2em"/></fo:block-container>

      <fo:block keep-with-next.within-page="always">
	
	<fo:inline font-family="monospace">conn_log_options() = [conn_log_option()]</fo:inline>
      </fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Options that can be given to the <fo:inline font-family="monospace">cth_conn_log</fo:inline> hook,
	  which is used for logging of NETCONF and Telnet
	  connections. See
	  <fo:inline font-style="italic">ct_netconfc</fo:inline>
	  or <fo:inline font-style="italic">ct_telnet</fo:inline>
	  for description and examples of how to use this hook.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always">
	
	<fo:inline font-family="monospace">conn_log_option() = {log_type,conn_log_type()} | {hosts,[key_or_name()]}</fo:inline>
      </fo:block>
      <fo:block-container><fo:block start-indent="2em"/></fo:block-container>

      <fo:block keep-with-next.within-page="always">
	
	<fo:inline font-family="monospace">conn_log_type() = raw | pretty | html | silent</fo:inline>
      </fo:block>
      <fo:block-container><fo:block start-indent="2em"/></fo:block-container>

      <fo:block keep-with-next.within-page="always">
	
	<fo:inline font-family="monospace">conn_log_mod() = ct_netconfc | ct_telnet</fo:inline>
      </fo:block>
      <fo:block-container><fo:block start-indent="2em"/></fo:block-container>

    </fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4785008">abort_current_testcase(Reason) -&gt; ok | {error, ErrorReason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ErrorReason = no_testcase_running | parallel_group</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Aborts the currently executing test case. The user must know with
          certainty which test case is currently executing. The function is
          therefore only safe to call from a function that has been called
          (or synchronously invoked) by the test case.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Reason</fo:inline>, the reason for aborting the test case, is printed
          in the test case log.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4790080">add_config(Callback, Config) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Callback = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Config = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Loads configuration variables using the specified callback module and
          configuration string. The callback module is to be either loaded or
          present in the code part. Loaded configuration variables can later
          be removed using function
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:remove_config/2</fo:inline></fo:inline>.
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4795728">break(Comment) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Comment = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = {multiple_cases_running, TestCases} | 'enable break with release_shell option'</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TestCases = [atom()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Cancels any active timetrap and pauses the execution of the
          current test case until the user calls function <fo:inline font-family="monospace">continue/0</fo:inline>.
          The user can then interact with the Erlang node running the tests,
          for example, for debugging purposes or for manually executing a
          part of the test case. If a parallel group is executing,
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:break/2</fo:inline></fo:inline> is to be
          called instead.</fo:block>
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A cancelled timetrap is not automatically reactivated after the
         break, but must be started exlicitly with
         <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:timetrap/1</fo:inline></fo:inline>.</fo:block>
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In order for the break/continue functionality to work, <fo:inline font-family="monospace">Common
         Test</fo:inline> must release the shell process controlling <fo:inline font-family="monospace">stdin</fo:inline>.
         This is done by setting start option <fo:inline font-family="monospace">release_shell</fo:inline>
         to <fo:inline font-family="monospace">true</fo:inline>. For details, see section
         <fo:inline font-style="italic">Running
         Tests from the Erlang Shell or from an Erlang Program</fo:inline>
         in the User's Guide.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4806448">break(TestCase, Comment) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TestCase = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Comment = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = 'test case not running' | 'enable break with release_shell option'</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Works the same way as
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:break/1</fo:inline></fo:inline>, only
          argument <fo:inline font-family="monospace">TestCase</fo:inline> makes it possible to pause a test case
          executing in a parallel group. Function
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:continue/1</fo:inline></fo:inline> is to
          be used to resume execution of <fo:inline font-family="monospace">TestCase</fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:break/1</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4815040">capture_get() -&gt; ListOfStrings</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ListOfStrings = [string()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to
          <fo:inline font-style="italic">ct:capture_get([default])</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5025440">capture_get(ExclCategories) -&gt; ListOfStrings</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ExclCategories = [atom()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ListOfStrings = [string()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns and purges the list of text strings buffered during the
          latest session of capturing printouts to <fo:inline font-family="monospace">stdout</fo:inline>. Log
          categories that are to be ignored in <fo:inline font-family="monospace">ListOfStrings</fo:inline> can be
          specified with <fo:inline font-family="monospace">ExclCategories</fo:inline>.
          If <fo:inline font-family="monospace">ExclCategories = []</fo:inline>, no filtering takes place.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:capture_start/0</fo:inline></fo:inline>,
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:capture_stop/0</fo:inline></fo:inline>,
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:log/3</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5034512">capture_start() -&gt; ok</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts capturing all text strings printed to <fo:inline font-family="monospace">stdout</fo:inline>
          during execution of the test case.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:capture_get/1</fo:inline></fo:inline>,
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:capture_stop/0</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5039888">capture_stop() -&gt; ok</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stops capturing text strings (a session started with
          <fo:inline font-family="monospace">capture_start/0</fo:inline>).</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:capture_get/1</fo:inline></fo:inline>,
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:capture_start/0</fo:inline></fo:inline>.</fo:block>
       </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5045232">comment(Comment) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Comment = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Prints the specified <fo:inline font-family="monospace">Comment</fo:inline> in the comment field in the
          table on the test suite result page.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If called several times, only the last comment is printed. The
          test case return value <fo:inline font-family="monospace">{comment,Comment}</fo:inline> overwrites the
          string set by this function.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5050368">comment(Format, Args) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Format = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Args = list()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Prints the formatted string in the comment field in the table
          on the test suite result page.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Arguments <fo:inline font-family="monospace">Format</fo:inline> and <fo:inline font-family="monospace">Args</fo:inline> are used in a call to
          <fo:inline font-family="monospace">io_lib:format/2</fo:inline> to create the comment string. The behavior
          of <fo:inline font-family="monospace">comment/2</fo:inline> is otherwise the same as function
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:comment/1</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5057712">continue() -&gt; ok</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function must be called to continue after a test case
          (not executing in a parallel group) has called function
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:break/1</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5061424">continue(TestCase) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TestCase = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function must be called to continue after a test case has
          called <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:break/2</fo:inline></fo:inline>.
          If the paused test case, <fo:inline font-family="monospace">TestCase</fo:inline>, executes in a parallel
          group, this function, rather than <fo:inline font-family="monospace">continue/0</fo:inline>, must be used
          to let the test case proceed.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5066944">decrypt_config_file(EncryptFileName, TargetFileName) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EncryptFileName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TargetFileName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decrypts <fo:inline font-family="monospace">EncryptFileName</fo:inline>, previously generated with
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:encrypt_config_file/2,3</fo:inline></fo:inline>.
          The original file contents is saved in the target file. The
          encryption key, a string, must be available in a text file named
          <fo:inline font-family="monospace">.ct_config.crypt</fo:inline>, either in the current directory, or the
          home directory of the user (it is searched for in that order).</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5073552">decrypt_config_file(EncryptFileName, TargetFileName, KeyOrFile) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EncryptFileName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TargetFileName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">KeyOrFile = {key, string()} | {file, string()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decrypts <fo:inline font-family="monospace">EncryptFileName</fo:inline>, previously generated with
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:encrypt_config_file/2,3</fo:inline></fo:inline>.
          The original file contents is saved in the target file. The key
          must have the same value as that used for encryption.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5080080">encrypt_config_file(SrcFileName, EncryptFileName) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SrcFileName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EncryptFileName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encrypts the source configuration file with DES3 and saves the result
          in file <fo:inline font-family="monospace">EncryptFileName</fo:inline>. The key, a string, must be
          available in a text file named <fo:inline font-family="monospace">.ct_config.crypt</fo:inline>, either
          in the current directory, or the home directory of the user (it
          is searched for in that order).</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information about using encrypted configuration files when
          running tests, see section
          <fo:inline font-style="italic">Encrypted
          Configuration Files</fo:inline> in the User's Guide.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details on DES3 encryption/decryption, see application
          <fo:inline font-style="italic"><fo:inline font-family="monospace">Crypto</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5088464">encrypt_config_file(SrcFileName, EncryptFileName, KeyOrFile) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SrcFileName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EncryptFileName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">KeyOrFile = {key, string()} | {file, string()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encrypts the source configuration file with DES3 and saves the result
          in the target file <fo:inline font-family="monospace">EncryptFileName</fo:inline>. The encryption key
          to use is either the value in <fo:inline font-family="monospace">{key,Key}</fo:inline> or the value
          stored in the file specified by <fo:inline font-family="monospace">{file,File}</fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information about using encrypted configuration files when
          running tests, see section
          <fo:inline font-style="italic">Encrypted
          Configuration Files</fo:inline> in the User's Guide.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details on DES3 encryption/decryption, see application
          <fo:inline font-style="italic"><fo:inline font-family="monospace">Crypto</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5097728">fail(Reason) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Terminates a test case with the specified error <fo:inline font-family="monospace">Reason</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5101792">fail(Format, Args) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Format = string()</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Args = list()</fo:block></fo:list-item-body></fo:list-item>
       </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Terminates a test case with an error message specified by a
          format string and a list of values (used as arguments to
          <fo:inline font-family="monospace">io_lib:format/2</fo:inline>).</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5106496">get_config(Required) -&gt; Value</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:get_config(Required,
          undefined, [])</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5110064">get_config(Required, Default) -&gt; Value</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:get_config(Required,
          Default, [])</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5113632">get_config(Required, Default, Opts) -&gt; ValueOrElement</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Required = KeyOrName | {KeyOrName, SubKey} | {KeyOrName, SubKey, SubKey}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">KeyOrName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SubKey = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Default = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opts = [Opt] | []</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opt = element | all</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ValueOrElement = term() | Default</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Reads configuration data values.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the matching values or configuration elements, given a
          configuration variable key or its associated name (if one has been
          specified with
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:require/2</fo:inline></fo:inline>
          or a <fo:inline font-family="monospace">require</fo:inline> statement).</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Given the following configuration file:</fo:block>

        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 {unix,[{telnet,IpAddr},
        {user,[{username,Username},
               {password,Password}]}]}.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Then:</fo:block>

        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 ct:get_config(unix,Default) -&gt; [{telnet,IpAddr}, 
  {user, [{username,Username}, {password,Password}]}]
 ct:get_config({unix,telnet},Default) -&gt; IpAddr
 ct:get_config({unix,user,username},Default) -&gt; Username
 ct:get_config({unix,ftp},Default) -&gt; Default
 ct:get_config(unknownkey,Default) -&gt; Default</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a configuration variable key has been associated with a name (by
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:require/2</fo:inline></fo:inline>
          or a <fo:inline font-family="monospace">require</fo:inline> statement), the name can be used instead
          of the key to read the value:</fo:block>

        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 ct:require(myuser,{unix,user}) -&gt; ok.
 ct:get_config(myuser,Default) -&gt; [{username,Username}, {password,Password}]</fo:block>
  
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a configuration variable is defined in multiple files, use option
         <fo:inline font-family="monospace">all</fo:inline> to access all possible values. The values are returned
          in a list. The order of the elements corresponds to the order
          that the configuration files were specified at startup.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If configuration elements (key-value tuples) are to be returned as
          result instead of values, use option <fo:inline font-family="monospace">element</fo:inline>. The
          returned elements are then on the form <fo:inline font-family="monospace">{Required,Value}</fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:get_config/1</fo:inline></fo:inline>,
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:get_config/2</fo:inline></fo:inline>,
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:require/1</fo:inline></fo:inline>,
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:require/2</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5133520">get_event_mgr_ref() -&gt; EvMgrRef</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EvMgrRef = atom()</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gets a reference to the <fo:inline font-family="monospace">Common Test</fo:inline> event manager.
            The reference can be used to, for example, add a user-specific
            event handler while tests are running.</fo:block>

          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>

          <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 gen_event:add_handler(ct:get_event_mgr_ref(), my_ev_h, [])</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5139200">get_status() -&gt; TestStatus | {error, Reason} | no_tests_running</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TestStatus = [StatusElem]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">StatusElem = {current, TestCaseInfo} | {successful, Successful} | {failed, Failed} | {skipped, Skipped} | {total, Total}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TestCaseInfo = {Suite, TestCase} | [{Suite, TestCase}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Suite = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TestCase = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Successful = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Failed = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Skipped = {UserSkipped, AutoSkipped}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserSkipped = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AutoSkipped = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Total = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns status of ongoing test. The returned list contains
          information about which test case is executing (a list of cases
          when a parallel test case group is executing), as well as
          counters for successful, failed, skipped, and total test cases
          so far.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5148176">get_target_name(Handle) -&gt; {ok, TargetName} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Handle = handle()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TargetName = target_name()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the name of the target that the specified connection
          belongs to.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5152352">get_testspec_terms() -&gt; TestSpecTerms | undefined</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TestSpecTerms = [{Tag, Value}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value = [term()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gets a list of all test specification terms used to configure
          and run this test.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5156544">get_testspec_terms(Tags) -&gt; TestSpecTerms | undefined</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Tags = [Tag] | Tag</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Tag = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TestSpecTerms = [{Tag, Value}] | {Tag, Value}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value = [{Node, term()}] | [term()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Node = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Reads one or more terms from the test specification used to
          configure and run this test. <fo:inline font-family="monospace">Tag</fo:inline> is any valid test
          specification tag, for example, <fo:inline font-family="monospace">label</fo:inline>, <fo:inline font-family="monospace">config</fo:inline>, or
          <fo:inline font-family="monospace">logdir</fo:inline>. User-specific terms are also available to read if
          option <fo:inline font-family="monospace">allow_user_terms</fo:inline> is set.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All value tuples returned, except user terms, have the node
          name as first element.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To read test terms, use <fo:inline font-family="monospace">Tag = tests</fo:inline> (rather than
          <fo:inline font-family="monospace">suites</fo:inline>, <fo:inline font-family="monospace">groups</fo:inline>, or <fo:inline font-family="monospace">cases</fo:inline>). <fo:inline font-family="monospace">Value</fo:inline> is
          then the list of <fo:inline font-weight="bold">all</fo:inline> tests on the form
          <fo:inline font-family="monospace">[{Node,Dir,[{TestSpec,GroupsAndCases1},...]},...]</fo:inline>, where
          <fo:inline font-family="monospace">GroupsAndCases = [{Group,[Case]}] | [Case]</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5169136">get_timetrap_info() -&gt; {Time, {Scaling,ScaleVal}}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Time = integer() | infinity</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Scaling = true | false</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ScaleVal = integer()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Reads information about the timetrap set for the current test
          case. <fo:inline font-family="monospace">Scaling</fo:inline> indicates if <fo:inline font-family="monospace">Common Test</fo:inline> will attempt
          to compensate timetraps automatically for runtime delays
          introduced by, for example, tools like cover. <fo:inline font-family="monospace">ScaleVal</fo:inline> is
	  the value of the current scaling multipler (always 1 if scaling is
	  disabled). Note the <fo:inline font-family="monospace">Time</fo:inline> is not the scaled result.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5175760">get_verbosity(Category) -&gt; Level | undefined</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Category = default | atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Level = integer()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function returns the verbosity level for the specified logging
	category. See the <fo:inline font-style="italic">
	User's Guide</fo:inline> for details. Use the value <fo:inline font-family="monospace">default</fo:inline> to read
	the general verbosity level.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5181104">install(Opts) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opts = [Opt]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opt = {config, ConfigFiles} | {event_handler, Modules} | {decrypt, KeyOrFile}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConfigFiles = [ConfigFile]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConfigFile = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Modules = [atom()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">KeyOrFile = {key, Key} | {file, KeyFile}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">KeyFile = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Installs configuration files and event handlers.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Run this function once before the first test.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>

        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 install([{config,["config_node.ctc","config_user.ctc"]}])</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is automatically run by program <fo:inline font-family="monospace">ct_run</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5190448">listenv(Telnet) -&gt; [Env]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Telnet = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Env = {Key, Value}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Performs command <fo:inline font-family="monospace">listenv</fo:inline> on the specified Telnet connection
          and returns the result as a list of key-value pairs.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5195984">log(Format) -&gt; ok</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:log(default, 50, Format, [], [])</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5199536">log(X1, X2) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">X1 = Category | Importance | Format</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">X2 = Format | FormatArgs</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:log(Category,
          Importance, Format, FormatArgs, [])</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5204512">log(X1, X2, X3) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">X1 = Category | Importance</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">X2 = Importance | Format</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">X3 = Format | FormatArgs | Opts</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:log(Category,
          Importance, Format, FormatArgs, Opts)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5209952">log(X1, X2, X3, X4) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">X1 = Category | Importance</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">X2 = Importance | Format</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">X3 = Format | FormatArgs</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">X4 = FormatArgs | Opts</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:log(Category,
          Importance, Format, FormatArgs, Opts)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5215856">log(Category, Importance, Format, FormatArgs, Opts) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Category = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Importance = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Format = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FormatArgs = list()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opts = [Opt]</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opt = {heading,string()} | no_css | esc_chars</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Prints from a test case to the log file.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is meant for printing a string directly from a
          test case to the test case log file.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default <fo:inline font-family="monospace">Category</fo:inline> is <fo:inline font-family="monospace">default</fo:inline>,
          default <fo:inline font-family="monospace">Importance</fo:inline> is <fo:inline font-family="monospace">?STD_IMPORTANCE</fo:inline>,
          and default value for <fo:inline font-family="monospace">FormatArgs</fo:inline> is <fo:inline font-family="monospace">[]</fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details on <fo:inline font-family="monospace">Category</fo:inline>, <fo:inline font-family="monospace">Importance</fo:inline> and the <fo:inline font-family="monospace">no_css</fo:inline>
	option, see section <fo:inline font-style="italic">
	Logging - Categories and Verbosity Levels</fo:inline> in the User's Guide.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Common Test will not escape special HTML characters (&lt;, &gt; and &amp;)
	   in the text printed with this function, unless the <fo:inline font-family="monospace">esc_chars</fo:inline>
	   option is used.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5229040">make_priv_dir() -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the test is started with option <fo:inline font-family="monospace">create_priv_dir</fo:inline>
          set to <fo:inline font-family="monospace">manual_per_tc</fo:inline>, in order for the test case to use
          the private directory, it must first create it by calling this
          function.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5233808">notify(Name, Data) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Data = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends an asynchronous notification of type <fo:inline font-family="monospace">Name</fo:inline> with
          <fo:inline font-family="monospace">Data</fo:inline>to the Common Test event manager. This can later be
          caught by any installed event manager.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also
          <fo:inline font-style="italic"><fo:inline font-family="monospace">gen_event(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5240624">pal(Format) -&gt; ok</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:pal(default, 50, Format,
            [], [])</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5244192">pal(X1, X2) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">X1 = Category | Importance | Format</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">X2 = Format | FormatArgs</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:pal(Category,
          Importance, Format, FormatArgs, [])</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5249168">pal(X1, X2, X3) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">X1 = Category | Importance</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">X2 = Importance | Format</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">X3 = Format | FormatArgs | Opts</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:pal(Category,
          Importance, Format, FormatArgs, Opts)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5254608">pal(X1, X2, X3, X4) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">X1 = Category | Importance</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">X2 = Importance | Format</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">X3 = Format | FormatArgs</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">X4 = FormatArgs | Opts</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:pal(Category,
          Importance, Format, FormatArgs, Opts)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5260512">pal(Category, Importance, Format, FormatArgs, Opts) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Category = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Importance = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Format = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FormatArgs = list()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opts = [Opt]</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opt = {heading,string()} | no_css</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Prints and logs from a test case.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is meant for printing a string from a test case,
          both to the test case log file and to the console.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default <fo:inline font-family="monospace">Category</fo:inline> is <fo:inline font-family="monospace">default</fo:inline>,
          default <fo:inline font-family="monospace">Importance</fo:inline> is <fo:inline font-family="monospace">?STD_IMPORTANCE</fo:inline>,
          and default value for <fo:inline font-family="monospace">FormatArgs</fo:inline> is <fo:inline font-family="monospace">[]</fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details on <fo:inline font-family="monospace">Category</fo:inline> and <fo:inline font-family="monospace">Importance</fo:inline>, see section
          <fo:inline font-style="italic">Logging - Categories
          and Verbosity Levels</fo:inline> in the User's Guide.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that special characters in the text (&lt;, &gt; and &amp;) will
	   be escaped by Common Test before the text is printed to the log
	   file.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5272800">parse_table(Data) -&gt; {Heading, Table}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Data = [string()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Heading = tuple()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Table = [tuple()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parses the printout from an SQL table and returns a list of
          tuples.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The printout to parse is typically the result of a <fo:inline font-family="monospace">select</fo:inline>
          command in SQL. The returned <fo:inline font-family="monospace">Table</fo:inline> is a list of tuples,
          where each tuple is a row in the table.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Heading</fo:inline> is a tuple of strings representing the headings
          of each column in the table.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5279632">print(Format) -&gt; ok</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:print(default,
        50, Format, [], [])</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5283184">print(X1, X2) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">X1 = Category | Importance | Format</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">X2 = Format | FormatArgs</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:print(Category,
          Importance, Format, FormatArgs, [])</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5288160">print(X1, X2, X3) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">X1 = Category | Importance</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">X2 = Importance | Format</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">X3 = Format | FormatArgs | Opts</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:print(Category,
          Importance, Format, FormatArgs, Opts)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5293600">print(X1, X2, X3, X4) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">X1 = Category | Importance</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">X2 = Importance | Format</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">X3 = Format | FormatArgs</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">X4 = FormatArgs | Opts</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:print(Category,
          Importance, Format, FormatArgs, Opts)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5299504">print(Category, Importance, Format, FormatArgs, Opts) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Category = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Importance = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Format = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FormatArgs = list()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opts = [Opt]</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opt = {heading,string()}</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Prints from a test case to the console.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is meant for printing a string from a test case to
          the console.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default <fo:inline font-family="monospace">Category</fo:inline> is <fo:inline font-family="monospace">default</fo:inline>,
          default <fo:inline font-family="monospace">Importance</fo:inline> is <fo:inline font-family="monospace">?STD_IMPORTANCE</fo:inline>,
          and default value for <fo:inline font-family="monospace">FormatArgs</fo:inline> is <fo:inline font-family="monospace">[]</fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details on <fo:inline font-family="monospace">Category</fo:inline> and <fo:inline font-family="monospace">Importance</fo:inline>, see section
          <fo:inline font-style="italic">Logging - Categories
          and Verbosity Levels</fo:inline> in the User's Guide.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5311168">reload_config(Required) -&gt; ValueOrElement | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Required = KeyOrName | {KeyOrName, SubKey} | {KeyOrName, SubKey, SubKey}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">KeyOrName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SubKey = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ValueOrElement = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Reloads configuration file containing specified configuration key.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function updates the configuration data from which the
          specified configuration variable was read, and returns the (possibly)
          new value of this variable.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If some variables were present in the configuration, but are
          not loaded using this function, they are removed from the
          configuration table together with their aliases.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5317504">remove_config(Callback, Config) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Callback = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Config = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Removes configuration variables (together wih their aliases)
          that were loaded with specified callback module and configuration
          string.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5322224">require(Required) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Required = Key | {Key, SubKeys} | {Key, SubKey, SubKeys}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SubKeys = SubKey | [SubKey]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SubKey = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Checks if the required configuration is available. Arbitrarily
          deep tuples can be specified as <fo:inline font-family="monospace">Required</fo:inline>. Only the last
          element of the tuple can be a list of <fo:inline font-family="monospace">SubKey</fo:inline>s.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example 1.</fo:inline> Require the variable <fo:inline font-family="monospace">myvar</fo:inline>:</fo:block>

        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 ok = ct:require(myvar).</fo:block>
 
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this case the configuration file must at least contain:</fo:block>

        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 {myvar,Value}.</fo:block>
  
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example 2.</fo:inline> Require key <fo:inline font-family="monospace">myvar</fo:inline> with subkeys
          <fo:inline font-family="monospace">sub1</fo:inline> and <fo:inline font-family="monospace">sub2</fo:inline>:</fo:block>

        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 ok = ct:require({myvar,[sub1,sub2]}).</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this case the configuration file must at least contain:</fo:block>

        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 {myvar,[{sub1,Value},{sub2,Value}]}.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example 3.</fo:inline> Require key <fo:inline font-family="monospace">myvar</fo:inline> with subkey
          <fo:inline font-family="monospace">sub1</fo:inline> with <fo:inline font-family="monospace">subsub1</fo:inline>:</fo:block>

        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 ok = ct:require({myvar,sub1,sub2}).</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this case the configuration file must at least contain:</fo:block>

        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 {myvar,[{sub1,[{sub2,Value}]}]}.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:get_config/1</fo:inline></fo:inline>,
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:get_config/2</fo:inline></fo:inline>,
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:get_config/3</fo:inline></fo:inline>,
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:require/2</fo:inline></fo:inline>.</fo:block>
        </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5341728">require(Name, Required) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Required = Key | {Key, SubKey} | {Key, SubKey, SubKey}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SubKey = Key</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Checks if the required configuration is available and gives it a
          name. The semantics for <fo:inline font-family="monospace">Required</fo:inline> is the same as in
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:require/1</fo:inline></fo:inline> except
          that a list of <fo:inline font-family="monospace">SubKey</fo:inline>s cannot be specified.</fo:block>

       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the requested data is available, the subentry is associated
         with <fo:inline font-family="monospace">Name</fo:inline> so that the value of the element can be read with
         <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:get_config/1,2</fo:inline></fo:inline>
         provided <fo:inline font-family="monospace">Name</fo:inline> is used instead of the whole <fo:inline font-family="monospace">Required</fo:inline>
         term.</fo:block>

       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>

       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Require one node with a Telnet connection and an FTP connection.
         Name the node <fo:inline font-family="monospace">a</fo:inline>:</fo:block>

       <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 ok = ct:require(a,{machine,node}).</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All references to this node can then use the node name. For
          example, a file over FTP is fetched like follows:</fo:block>

        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 ok = ct:ftp_get(a,RemoteFile,LocalFile).</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For this to work, the configuration file must at least contain:</fo:block>

        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 {machine,[{node,[{telnet,IpAddr},{ftp,IpAddr}]}]}.</fo:block>

        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The behavior of this function changed radically in
          <fo:inline font-family="monospace">Common Test</fo:inline> 1.6.2. To keep some backwards compatability,
          it is still possible to do:<fo:block/>
          <fo:inline font-family="monospace">ct:require(a,{node,[telnet,ftp]}).</fo:inline><fo:block/>
          This associates the name <fo:inline font-family="monospace">a</fo:inline> with the top-level <fo:inline font-family="monospace">node</fo:inline>
          entry. For this to work, the configuration file must at least
          contain:<fo:block/>
          <fo:inline font-family="monospace">{node,[{telnet,IpAddr},{ftp,IpAddr}]}.</fo:inline></fo:block>
        </fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:get_config/1</fo:inline></fo:inline>,
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:get_config/2</fo:inline></fo:inline>,
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:get_config/3</fo:inline></fo:inline>,
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:require/1</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5362976">run(TestDirs) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TestDirs = TestDir | [TestDir]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Runs all test cases in all suites in the specified directories.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:run/3</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5367920">run(TestDir, Suite) -&gt; Result</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Runs all test cases in the specified suite.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:run/3</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5371936">run(TestDir, Suite, Cases) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TestDir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Suite = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Cases = atom() | [atom()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = [TestResult] | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Runs the specified test cases.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Requires that
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:install/1</fo:inline></fo:inline> has been
            run first.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Suites (<fo:inline font-family="monospace">*_SUITE.erl</fo:inline>) files must be stored in <fo:inline font-family="monospace">TestDir</fo:inline>
          or <fo:inline font-family="monospace">TestDir/test</fo:inline>. All suites are compiled when the test is
          run.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5380080">run_test(Opts) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opts = [OptTuples]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OptTuples = {dir, TestDirs} | {suite, Suites} | {group, Groups} | {testcase, Cases} | {spec, TestSpecs} | {join_specs, Bool} | {label, Label} | {config, CfgFiles} | {userconfig, UserConfig} | {allow_user_terms, Bool} | {logdir, LogDir} | {silent_connections, Conns} | {stylesheet, CSSFile} | {cover, CoverSpecFile} | {cover_stop, Bool} | {step, StepOpts} | {event_handler, EventHandlers} | {include, InclDirs} | {auto_compile, Bool} | {abort_if_missing_suites, Bool} | {create_priv_dir, CreatePrivDir} | {multiply_timetraps, M} | {scale_timetraps, Bool} | {repeat, N} | {duration, DurTime} | {until, StopTime} | {force_stop, ForceStop} | {decrypt, DecryptKeyOrFile} | {refresh_logs, LogDir} | {logopts, LogOpts} | {verbosity, VLevels} | {basic_html, Bool} | {esc_chars, Bool} | {keep_logs,KeepSpec} | {ct_hooks, CTHs} | {enable_builtin_hooks, Bool} | {release_shell, Bool}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TestDirs = [string()] | string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Suites = [string()] | [atom()] | string() | atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Cases = [atom()] | atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Groups = GroupNameOrPath | [GroupNameOrPath]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">GroupNameOrPath = [atom()] | atom() | all</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TestSpecs = [string()] | string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Label = string() | atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CfgFiles = [string()] | string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserConfig = [{CallbackMod, CfgStrings}] | {CallbackMod, CfgStrings}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CallbackMod = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CfgStrings = [string()] | string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LogDir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Conns = all | [atom()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CSSFile = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CoverSpecFile = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">StepOpts = [StepOpt] | []</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">StepOpt = config | keep_inactive</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EventHandlers = EH | [EH]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EH = atom() | {atom(), InitArgs} | {[atom()], InitArgs}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">InitArgs = [term()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">InclDirs = [string()] | string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CreatePrivDir = auto_per_run | auto_per_tc | manual_per_tc</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">M = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">N = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DurTime = string(HHMMSS)</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">StopTime = string(YYMoMoDDHHMMSS) | string(HHMMSS)</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ForceStop = skip_rest | Bool</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DecryptKeyOrFile = {key, DecryptKey} | {file, DecryptFile}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DecryptKey = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DecryptFile = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LogOpts = [LogOpt]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LogOpt = no_nl | no_src</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">VLevels = VLevel | [{Category, VLevel}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">VLevel = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Category = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">KeepSpec = all | pos_integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CTHs = [CTHModule | {CTHModule, CTHInitArgs}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CTHModule = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CTHInitArgs = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = {Ok, Failed, {UserSkipped, AutoSkipped}} | TestRunnerPid | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Ok = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Failed = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserSkipped = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AutoSkipped = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TestRunnerPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Runs tests as specified by the combination of options in
          <fo:inline font-family="monospace">Opts</fo:inline>. The options are the same as those used with program
          <fo:inline font-family="monospace">ct_run</fo:inline>, see <fo:inline font-style="italic">Run Tests from
          Command Line</fo:inline> in the <fo:inline font-family="monospace">ct_run</fo:inline> manual page.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here a <fo:inline font-family="monospace">TestDir</fo:inline> can be used to point out the path to a
          <fo:inline font-family="monospace">Suite</fo:inline>. Option <fo:inline font-family="monospace">testcase</fo:inline> corresponds to option
          <fo:inline font-family="monospace">-case</fo:inline> in program <fo:inline font-family="monospace">ct_run</fo:inline>. Configuration files
          specified in <fo:inline font-family="monospace">Opts</fo:inline> are installed automatically at startup.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">TestRunnerPid</fo:inline> is returned if <fo:inline font-family="monospace">release_shell == true</fo:inline>.
          For details, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:break/1</fo:inline></fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Reason</fo:inline> indicates the type of error encountered.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5414480">run_testspec(TestSpec) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TestSpec = [term()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = {Ok, Failed, {UserSkipped, AutoSkipped}} | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Ok = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Failed = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UserSkipped = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AutoSkipped = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Runs a test specified by <fo:inline font-family="monospace">TestSpec</fo:inline>. The same terms are used
          as in test specification files.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Reason</fo:inline> indicates the type of error encountered.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5422064">set_verbosity(Category, Level) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Category = default | atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Level = integer()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Use this function to set, or modify, the verbosity level for a logging
	category. See the <fo:inline font-style="italic">
	User's Guide</fo:inline> for details. Use the value <fo:inline font-family="monospace">default</fo:inline> to set the
	general verbosity level.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5427408">sleep(Time) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Time = {hours, Hours} | {minutes, Mins} | {seconds, Secs} | Millisecs | infinity</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Hours = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Mins = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Secs = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Millisecs = integer() | float()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function, similar to <fo:inline font-family="monospace">timer:sleep/1</fo:inline> in STDLIB,
          suspends the test case for a specified time.
          However, this function also multiplies <fo:inline font-family="monospace">Time</fo:inline> with the
          <fo:inline font-family="monospace">multiply_timetraps</fo:inline> value (if set) and under certain
          circumstances also scales up the time automatically if
          <fo:inline font-family="monospace">scale_timetraps</fo:inline> is set to <fo:inline font-family="monospace">true</fo:inline> (default is
          <fo:inline font-family="monospace">false</fo:inline>).</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5435792">start_interactive() -&gt; ok</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts <fo:inline font-family="monospace">Common Test</fo:inline> in interactive mode.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">From this mode, all test case support functions can be executed
          directly from the Erlang shell. The interactive mode can also be
          started from the OS command line with <fo:inline font-family="monospace">ct_run -shell
          [-config File...]</fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If any functions (for example, Telnet or FTP) using
          "required configuration data" are to be called from the Erlang shell,
          configuration data must first be required with
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:require/2</fo:inline></fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>

        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 &gt; ct:require(unix_telnet, unix).
 ok
 &gt; ct_telnet:open(unix_telnet).
 {ok,&lt;0.105.0&gt;}
 &gt; ct_telnet:cmd(unix_telnet, "ls .").
 {ok,["ls","file1  ...",...]}</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5443088">step(TestDir, Suite, Case) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Case = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Steps through a test case with the debugger.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:run/3</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5448000">step(TestDir, Suite, Case, Opts) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Case = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opts = [Opt] | []</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opt = config | keep_inactive</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Steps through a test case with the debugger. If option
          <fo:inline font-family="monospace">config</fo:inline> has been specifed, breakpoints are also set on
          the configuration functions in <fo:inline font-family="monospace">Suite</fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:run/3</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5454832">stop_interactive() -&gt; ok</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Exits the interactive mode.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:start_interactive/0</fo:inline></fo:inline>.
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5458816">sync_notify(Name, Data) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Data = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends a synchronous notification of type <fo:inline font-family="monospace">Name</fo:inline> with
          <fo:inline font-family="monospace">Data</fo:inline> to the <fo:inline font-family="monospace">Common Test</fo:inline> event manager. This can later be
          caught by any installed event manager.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also
          <fo:inline font-style="italic"><fo:inline font-family="monospace">gen_event(3)</fo:inline></fo:inline>.
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5466048">testcases(TestDir, Suite) -&gt; Testcases | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TestDir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Suite = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Testcases = list()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns all test cases in the specified suite.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5471040">timetrap(Time) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Time = {hours, Hours} | {minutes, Mins} | {seconds, Secs} | Millisecs | infinity | Func</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Hours = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Mins = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Secs = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Millisecs = integer() | float()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Func = {M, F, A} | function()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">M = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">F = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">A = list()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets a new timetrap for the running test case.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the argument is <fo:inline font-family="monospace">Func</fo:inline>, the timetrap is triggered when
          this function returns. <fo:inline font-family="monospace">Func</fo:inline> can also return a new
          <fo:inline font-family="monospace">Time</fo:inline> value, which in that case is the value for the new
          timetrap.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5480224">userdata(TestDir, Suite) -&gt; SuiteUserData | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TestDir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Suite = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SuiteUserData = [term()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns any data specified with tag <fo:inline font-family="monospace">userdata</fo:inline> in the list
          of tuples returned from
          <fo:inline font-style="italic"><fo:inline font-family="monospace">suite/0</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5486624">userdata(TestDir, Suite, Case::GroupOrCase) -&gt; TCUserData | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TestDir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Suite = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">GroupOrCase = {group, GroupName} | atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">GroupName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TCUserData = [term()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns any data specified with tag <fo:inline font-family="monospace">userdata</fo:inline> in the list
          of tuples returned from <fo:inline font-family="monospace">Suite:group(GroupName)</fo:inline> or
          <fo:inline font-family="monospace">Suite:Case()</fo:inline>.</fo:block>
      </fo:block>
  

<fo:block page-break-before="always" id="idp5501312" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">ct_master</fo:marker>ct_master</fo:block>Erlang module</fo:block>
  <fo:block/>
  ct_master
  <fo:block/>



    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Distributed test execution control for <fo:inline font-family="monospace">Common Test</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module exports functions for running <fo:inline font-family="monospace">Common Test</fo:inline> nodes on
      multiple hosts in parallel.</fo:block>



  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5505136">abort() -&gt; ok</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stops all running tests.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5507808">abort(Nodes) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Nodes = atom() | [atom()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stops tests on specified nodes.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5511392">basic_html(Bool) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Bool = true | false</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If set to <fo:inline font-family="monospace">true</fo:inline>, the <fo:inline font-family="monospace">ct_master logs</fo:inline> are written on a
          primitive HTML format, not using the <fo:inline font-family="monospace">Common Test</fo:inline> CSS style
          sheet.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5516864">get_event_mgr_ref() -&gt; MasterEvMgrRef</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MasterEvMgrRef = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gets a reference to the <fo:inline font-family="monospace">Common Test</fo:inline> master event manager.
          The reference can be used to, for example, add a user-specific
          event handler while tests are running.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>

        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 gen_event:add_handler(ct_master:get_event_mgr_ref(), my_ev_h, [])</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5522560">progress() -&gt; [{Node, Status}]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Node = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Status = finished_ok | ongoing | aborted | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns test progress. If <fo:inline font-family="monospace">Status</fo:inline> is <fo:inline font-family="monospace">ongoing</fo:inline>, tests
          are running on the node and are not yet finished.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5528016">run(TestSpecs) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TestSpecs = string() | [SeparateOrMerged]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_master:run(TestSpecs,
          false, [], [])</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5532496">run(TestSpecs, InclNodes, ExclNodes) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TestSpecs = string() | [SeparateOrMerged]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SeparateOrMerged = string() | [string()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">InclNodes = [atom()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ExclNodes = [atom()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_master:run(TestSpecs,
          false, InclNodes, ExclNodes)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

     <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5538416">run(TestSpecs, AllowUserTerms, InclNodes, ExclNodes) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
         <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TestSpecs = string() | [SeparateOrMerged]</fo:block></fo:list-item-body></fo:list-item>
         <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SeparateOrMerged = string() | [string()]</fo:block></fo:list-item-body></fo:list-item>
         <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AllowUserTerms = bool()</fo:block></fo:list-item-body></fo:list-item>
         <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">InclNodes = [atom()]</fo:block></fo:list-item-body></fo:list-item>
         <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ExclNodes = [atom()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tests are spawned on the nodes as specified in <fo:inline font-family="monospace">TestSpecs</fo:inline>.
          Each specification in <fo:inline font-family="monospace">TestSpec</fo:inline> is handled separately.
          However, it is also possible to specify a list of specifications to
          be merged into one specification before the tests are executed. Any
          test without a particular node specification is also executed on
          the nodes in <fo:inline font-family="monospace">InclNodes</fo:inline>. Nodes in the <fo:inline font-family="monospace">ExclNodes</fo:inline> list
          are excluded from the test.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5546032">run_on_node(TestSpecs, Node) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TestSpecs = string() | [SeparateOrMerged]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SeparateOrMerged = string() | [string()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Node = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_master:run_on_node(TestSpecs,
          false, Node)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5551472">run_on_node(TestSpecs, AllowUserTerms, Node) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TestSpecs = string() | [SeparateOrMerged]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SeparateOrMerged = string() | [string()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AllowUserTerms = bool()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Node = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tests are spawned on <fo:inline font-family="monospace">Node</fo:inline> according to <fo:inline font-family="monospace">TestSpecs</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5557376">run_test(Node, Opts) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Node = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opts = [OptTuples]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OptTuples = {config, CfgFiles} | {dir, TestDirs} | {suite, Suites} | {testcase, Cases} | {spec, TestSpecs} | {allow_user_terms, Bool} | {logdir, LogDir} | {event_handler, EventHandlers} | {silent_connections, Conns} | {cover, CoverSpecFile} | {cover_stop, Bool} | {userconfig, UserCfgFiles}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CfgFiles = string() | [string()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TestDirs = string() | [string()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Suites = atom() | [atom()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Cases = atom() | [atom()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TestSpecs = string() | [string()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LogDir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EventHandlers = EH | [EH]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EH = atom() | {atom(), InitArgs} | {[atom()], InitArgs}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">InitArgs = [term()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Conns = all | [atom()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tests are spawned on <fo:inline font-family="monospace">Node</fo:inline> using
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:run_test/1</fo:inline></fo:inline></fo:block>
      </fo:block>
  

<fo:block page-break-before="always" id="idp5575184" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">ct_cover</fo:marker>ct_cover</fo:block>Erlang module</fo:block>
  <fo:block/>
  ct_cover
  <fo:block/>



    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Common Test</fo:inline> framework code coverage support module.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module exports help functions for performing code coverage
      analysis.</fo:block>



  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5578416">add_nodes(Nodes) -&gt; {ok, StartedNodes} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Nodes = [atom()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">StartedNodes = [atom()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = cover_not_running | not_main_node</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Adds nodes to current cover test. Notice that this only works if
          cover support is active.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To have effect, this function is to be called from
          <fo:inline font-family="monospace">init_per_suite/1</fo:inline> (see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">common_test</fo:inline></fo:inline>)
          before any tests are performed.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5584896">cross_cover_analyse(Level, Tests) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Level = overview | details</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Tests = [{Tag, Dir}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Tag = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Accumulates cover results over multiple tests. See section
          <fo:inline font-style="italic">Cross Cover
          Analysis</fo:inline> in the Users's Guide.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5590640">remove_nodes(Nodes) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Nodes = [atom()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = cover_not_running | not_main_node</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Removes nodes from the current cover test.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Call this function to stop cover test on nodes previously
          added with
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_cover:add_nodes/1</fo:inline></fo:inline>.
          Results on the remote node are transferred to the <fo:inline font-family="monospace">Common Test</fo:inline>
          node.</fo:block>
      </fo:block>
  

<fo:block page-break-before="always" id="idp5603936" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">ct_ftp</fo:marker>ct_ftp</fo:block>Erlang module</fo:block>
  <fo:block/>
  ct_ftp
  <fo:block/>

  

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">FTP client module (based on the FTP support of the <fo:inline font-family="monospace">Inets</fo:inline>
      application).</fo:block>

  

  <fo:block id="idp5606560" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Data Types</fo:block>
    
    
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">connection() = handle() | target_name()</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For <fo:inline font-family="monospace">target_name</fo:inline>, see module
            <fo:inline font-style="italic"><fo:inline font-family="monospace">ct</fo:inline></fo:inline>.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">handle() = handle()</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Handle for a specific FTP connection, see module
            <fo:inline font-style="italic"><fo:inline font-family="monospace">ct</fo:inline></fo:inline>.</fo:block></fo:block></fo:block-container>
    </fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5614400">cd(Connection, Dir) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Connection = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Changes directory on remote host.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5618464">close(Connection) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Connection = connection()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Closes the FTP connection.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5622080">delete(Connection, File) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Connection = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">File = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Deletes a file on remote host.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5626144">get(KeyOrName, RemoteFile, LocalFile) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">KeyOrName = Key | Name</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = target_name()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">RemoteFile = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LocalFile = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Opens an FTP connection and fetches a file from the remote
          host.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">RemoteFile</fo:inline> and <fo:inline font-family="monospace">LocalFile</fo:inline> must be absolute paths.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The configuration file must be as for
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_ftp:put/3</fo:inline></fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For <fo:inline font-family="monospace">target_name</fo:inline>, see module
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct</fo:inline></fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:require/2</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5637216">ls(Connection, Dir) -&gt; {ok, Listing} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Connection = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Listing = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Lists directory <fo:inline font-family="monospace">Dir</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5642144">open(KeyOrName) -&gt; {ok, Handle} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">KeyOrName = Key | Name</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = target_name()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Handle = handle()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Opens an FTP connection to the specified node.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">You can open a connection for a particular <fo:inline font-family="monospace">Name</fo:inline> and use the
          same name as reference for all following subsequent operations.
          If you want
          the connection to be associated with <fo:inline font-family="monospace">Handle</fo:inline> instead (if you,
          for example, need to open multiple connections to a host), use
          <fo:inline font-family="monospace">Key</fo:inline>, the configuration variable name, to specify the target.
          A connection without an associated target name can only be closed
          with the handle value.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information on how to create a new <fo:inline font-family="monospace">Name</fo:inline>, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:require/2</fo:inline></fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For <fo:inline font-family="monospace">target_name</fo:inline>, see module
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5652816">put(KeyOrName, LocalFile, RemoteFile) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">KeyOrName = Key | Name</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = target_name()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LocalFile = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">RemoteFile = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Opens an FTP connection and sends a file to the remote host.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">LocalFile</fo:inline> and <fo:inline font-family="monospace">RemoteFile</fo:inline> must be absolute paths.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For <fo:inline font-family="monospace">target_name</fo:inline>, see module
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct</fo:inline></fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the target host is a "special" node, the FTP address must be
          specified in the configuration file as follows:</fo:block>

        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 {node,[{ftp,IpAddr}]}.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the target host is something else, for example, a UNIX host,
          the configuration file must also include the username and password
          (both strings):</fo:block>

        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 {unix,[{ftp,IpAddr},
        {username,Username},
        {password,Password}]}.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:require/2</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5664656">recv(Connection, RemoteFile) -&gt; ok | {error, Reason}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Fetches a file over FTP.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file gets the same name on the local host.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_ftp:recv/3</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5669136">recv(Connection, RemoteFile, LocalFile) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Connection = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">RemoteFile = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LocalFile = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Fetches a file over FTP.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file is named <fo:inline font-family="monospace">LocalFile</fo:inline> on the local host.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5674560">send(Connection, LocalFile) -&gt; ok | {error, Reason}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends a file over FTP.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file gets the same name on the remote host.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_ftp:send/3</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5679008">send(Connection, LocalFile, RemoteFile) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Connection = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LocalFile = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">RemoteFile = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends a file over FTP.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file is named <fo:inline font-family="monospace">RemoteFile</fo:inline> on the remote host.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5684400">type(Connection, Type) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Connection = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Type = ascii | binary</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Changes the file transfer type.</fo:block>
      </fo:block>
  

<fo:block page-break-before="always" id="idp5695776" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">ct_ssh</fo:marker>ct_ssh</fo:block>Erlang module</fo:block>
  <fo:block/>
  ct_ssh
  <fo:block/>



    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">SSH/SFTP client module.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module uses application <fo:inline font-family="monospace">SSH</fo:inline>, which provides detailed
      information about, for example, functions, types, and options.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Argument <fo:inline font-family="monospace">Server</fo:inline> in the SFTP functions is only to be used for
      SFTP sessions that have been started on existing SSH connections
      (that is, when the original connection type is <fo:inline font-family="monospace">ssh</fo:inline>). Whenever
      the connection type is <fo:inline font-family="monospace">sftp</fo:inline>, use the SSH connection reference
      only.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following options are valid for specifying an SSH/SFTP
      connection (that is, can be used as configuration elements):</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 [{ConnType, Addr},
  {port, Port},
  {user, UserName}
  {password, Pwd}
  {user_dir, String}
  {public_key_alg, PubKeyAlg}
  {connect_timeout, Timeout}
  {key_cb, KeyCallbackMod}]</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ConnType = ssh | sftp</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For other types, see
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh(3)</fo:inline></fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All time-out parameters in <fo:inline font-family="monospace">ct_ssh</fo:inline> functions are values in
      milliseconds.</fo:block>

  

  <fo:block id="idp5705024" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Data Types</fo:block>
    
    
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">connection() = handle() | target_name()</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For <fo:inline font-family="monospace">target_name</fo:inline>, see module
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct</fo:inline></fo:inline>.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">handle() = handle()</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Handle for a specific SSH/SFTP connection, see module
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct</fo:inline></fo:inline>.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ssh_sftp_return() = term()</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Return value from an
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp</fo:inline></fo:inline>
            function.</fo:block></fo:block></fo:block-container>
    </fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5715440">apread(SSH, Handle, Position, Length) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5720848">apread(SSH, Server, Handle, Position, Length) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5726256">apwrite(SSH, Handle, Position, Data) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5731664">apwrite(SSH, Server, Handle, Position, Data) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5737072">aread(SSH, Handle, Len) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5742464">aread(SSH, Server, Handle, Len) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5747872">awrite(SSH, Handle, Data) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5753264">awrite(SSH, Server, Handle, Data) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5758672">close(SSH, Handle) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5764064">close(SSH, Server, Handle) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5769456">connect(KeyOrName) -&gt; {ok, Handle} | {error, Reason}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_ssh:connect(KeyOrName, host,
          [])</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5773056">connect(KeyOrName, ConnType) -&gt; {ok, Handle} | {error, Reason}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_ssh:connect(KeyOrName, ConnType,
          [])</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5776672">connect(KeyOrName, ConnType, ExtraOpts) -&gt; {ok, Handle} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">KeyOrName = Key | Name</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = target_name()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConnType = ssh | sftp | host</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ExtraOpts = ssh_connect_options()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Handle = handle()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Opens an SSH or SFTP connection using the information associated
          with <fo:inline font-family="monospace">KeyOrName</fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Name</fo:inline> (an alias name for <fo:inline font-family="monospace">Key</fo:inline>) is used to identify
          the connection, this name can be used as connection reference for
          subsequent calls. Only one open connection at a time associated
          with <fo:inline font-family="monospace">Name</fo:inline> is possible. If <fo:inline font-family="monospace">Key</fo:inline> is used, the returned
          handle must be used for subsequent calls (multiple connections can
          be opened using the configuration data specified by <fo:inline font-family="monospace">Key</fo:inline>).</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information on how to create a new <fo:inline font-family="monospace">Name</fo:inline>, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:require/2</fo:inline></fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For <fo:inline font-family="monospace">target_name</fo:inline>, see module
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct</fo:inline></fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ConnType</fo:inline> always overrides the type specified in the
          address tuple in the configuration data (and in <fo:inline font-family="monospace">ExtraOpts</fo:inline>).
          So it is possible to, for example, open an SFTP connection
          directly using data originally specifying an SSH connection. Value
          <fo:inline font-family="monospace">host</fo:inline> means that the connection type specified by the host
          option (either in the configuration data or in <fo:inline font-family="monospace">ExtraOpts</fo:inline>)
          is used.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ExtraOpts</fo:inline> (optional) are extra SSH options to be added to
          the configuration data for <fo:inline font-family="monospace">KeyOrName</fo:inline>. The extra options
          override any existing options with the same key in the
          configuration data. For details on valid SSH options, see
          application <fo:inline font-style="italic"><fo:inline font-family="monospace">SSH</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5794752">del_dir(SSH, Name) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5800144">del_dir(SSH, Server, Name) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5805536">delete(SSH, Name) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5810928">delete(SSH, Server, Name) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5816320">disconnect(SSH) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Closes an SSH/SFTP connection.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5820352">exec(SSH, Command) -&gt; {ok, Data} | {error, Reason}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_ssh:exec(SSH, Command,
          DefaultTimeout)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5823952">exec(SSH, Command, Timeout) -&gt; {ok, Data} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Command = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Data = list()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Requests server to perform <fo:inline font-family="monospace">Command</fo:inline>. A session channel is
          opened automatically for the request. <fo:inline font-family="monospace">Data</fo:inline> is received from
          the server as a result of the command.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5830352">exec(SSH, ChannelId, Command, Timeout) -&gt; {ok, Data} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelId = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Command = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Data = list()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Requests server to perform <fo:inline font-family="monospace">Command</fo:inline>. A previously opened
          session channel is used for the request. <fo:inline font-family="monospace">Data</fo:inline> is received
          from the server as a result of the command.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5837216">get_file_info(SSH, Handle) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5842608">get_file_info(SSH, Server, Handle) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5848016">list_dir(SSH, Path) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5853408">list_dir(SSH, Server, Path) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5858800">make_dir(SSH, Name) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5864192">make_dir(SSH, Server, Name) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5869584">make_symlink(SSH, Name, Target) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5874992">make_symlink(SSH, Server, Name, Target) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5880400">open(SSH, File, Mode) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5885792">open(SSH, Server, File, Mode) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5891184">opendir(SSH, Path) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5896576">opendir(SSH, Server, Path) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5901968">position(SSH, Handle, Location) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5907376">position(SSH, Server, Handle, Location) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5912784">pread(SSH, Handle, Position, Length) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5918192">pread(SSH, Server, Handle, Position, Length) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5923600">pwrite(SSH, Handle, Position, Data) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5929008">pwrite(SSH, Server, Handle, Position, Data) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5934416">read(SSH, Handle, Len) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5939808">read(SSH, Server, Handle, Len) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5945216">read_file(SSH, File) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5950608">read_file(SSH, Server, File) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5956000">read_file_info(SSH, Name) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5961392">read_file_info(SSH, Server, Name) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5966800">read_link(SSH, Name) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5972192">read_link(SSH, Server, Name) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5977584">read_link_info(SSH, Name) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5982976">read_link_info(SSH, Server, Name) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5988384">receive_response(SSH, ChannelId) -&gt; {ok, Data} | {error, Reason}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_ssh:receive_response(SSH,
ChannelId, close)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

     <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5992016">receive_response(SSH, ChannelId, End) -&gt; {ok, Data} | {error, Reason}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_ssh:receive_response(SSH,
ChannelId, End, DefaultTimeout)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp5995680">receive_response(SSH, ChannelId, End, Timeout) -&gt; {ok, Data} | {timeout, Data} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelId = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">End = Fun | close | timeout</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Data = list()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Receives expected data from server on the specified session
          channel.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">End == close</fo:inline>, data is returned to the caller when the
          channel is closed by the server. If a time-out occurs before this
          happens, the function returns <fo:inline font-family="monospace">{timeout,Data}</fo:inline> (where
          <fo:inline font-family="monospace">Data</fo:inline> is the data received so far).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">End == timeout</fo:inline>, a time-out is expected and
          <fo:inline font-family="monospace">{ok,Data}</fo:inline> is returned both in the case of a time-out and
          when the channel is closed.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">End</fo:inline> is a fun, this fun is called with one argument, the
          data value in a received <fo:inline font-family="monospace">ssh_cm</fo:inline> message (see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_connection(3)</fo:inline></fo:inline>.
          The fun is to return either <fo:inline font-family="monospace">true</fo:inline> to end the receiving
          operation (and have the so far collected data returned) or
          <fo:inline font-family="monospace">false</fo:inline> to wait for more data from the server. Even if a fun
          is supplied, the function returns immediately if the server closes
          the channel).</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6008496">rename(SSH, OldName, NewName) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6013888">rename(SSH, Server, OldName, NewName) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6019296">send(SSH, ChannelId, Data) -&gt; ok | {error, Reason}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_ssh:send(SSH,
          ChannelId, 0, Data, DefaultTimeout)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6022912">send(SSH, ChannelId, Data, Timeout) -&gt; ok | {error, Reason}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_ssh:send(SSH,
          ChannelId, 0, Data, Timeout)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6026512">send(SSH, ChannelId, Type, Data, Timeout) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelId = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Type = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Data = list()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends data to server on specified session channel.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6032400">send_and_receive(SSH, ChannelId, Data) -&gt; {ok, Data} | {error, Reason}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_ssh:send_and_receive(SSH,
            ChannelId, Data, close)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6036048">send_and_receive(SSH, ChannelId, Data, End) -&gt; {ok, Data} | {error, Reason}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_ssh;send_and_receive(SSH,
ChannelId, 0, Data, End, DefaultTimeout)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6039728">send_and_receive(SSH, ChannelId, Data, End, Timeout) -&gt; {ok, Data} | {error, Reason}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_ssh:send_and_receive(SSH,
ChannelId, 0, Data, End, Timeout)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6043408">send_and_receive(SSH, ChannelId, Type, Data, End, Timeout) -&gt; {ok, Data} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelId = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Type = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Data = list()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">End = Fun | close | timeout</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends data to server on specified session channel and waits to
          receive the server response.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details on argument <fo:inline font-family="monospace">End</fo:inline>, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_ssh:receive_response/4</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6051664">session_close(SSH, ChannelId) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelId = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Closes an SSH session channel.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6056160">session_open(SSH) -&gt; {ok, ChannelId} | {error, Reason}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_ssh:session_open(SSH,
          DefaultTimeout)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6059760">session_open(SSH, Timeout) -&gt; {ok, ChannelId} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelId = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Opens a channel for an SSH session.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6064720">sftp_connect(SSH) -&gt; {ok, Server} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Server = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts an SFTP session on an already existing SSH connection.
          <fo:inline font-family="monospace">Server</fo:inline> identifies the new session and must be specified
          whenever SFTP requests are to be sent.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6069824">shell(SSH, ChannelId) -&gt; ok | {error, Reason}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_ssh:shell(SSH, ChannelId,
            DefaultTimeout)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6073440">shell(SSH, ChannelId, Timeout) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelId = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Requests that the user default shell (typically defined in
          <fo:inline font-family="monospace">/etc/passwd</fo:inline> in Unix systems) is executed at the
          server end.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6078960">subsystem(SSH, ChannelId, Subsystem) -&gt; Status | {error, Reason}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_ssh:subsystem(SSH, ChannelId,
            Subsystem, DefaultTimeout)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6082624">subsystem(SSH, ChannelId, Subsystem, Timeout) -&gt; Status | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ChannelId = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Subsystem = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Status = success | failure</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends a request to execute a predefined subsystem.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6088544">write(SSH, Handle, Data) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6093936">write(SSH, Server, Handle, Data) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6099344">write_file(SSH, File, Iolist) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6104736">write_file(SSH, Server, File, Iolist) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6110144">write_file_info(SSH, Name, Info) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6115552">write_file_info(SSH, Server, Name, Info) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SSH = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ssh_sftp_return() | {error, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information and other types, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh_sftp(3)</fo:inline></fo:inline>.</fo:block>
      </fo:block>
  

<fo:block page-break-before="always" id="idp6128272" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">ct_netconfc</fo:marker>ct_netconfc</fo:block>Erlang module</fo:block>
  <fo:block/>
  ct_netconfc
  <fo:block/>

  

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">NETCONF client module.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The NETCONF client is compliant with RFC 4741 NETCONF Configuration
      Protocol and RFC 4742 Using the NETCONF Configuration Protocol over
      Secure SHell (SSH).</fo:block>

    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Connecting to a NETCONF server</fo:inline></fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">NETCONF sessions can either be opened by a single call
      to <fo:inline font-style="italic"><fo:inline font-family="monospace">open/1,2</fo:inline></fo:inline> or by a call
      to <fo:inline font-style="italic"><fo:inline font-family="monospace">connect/1,2</fo:inline></fo:inline> followed
      by one or more calls to
      <fo:inline font-style="italic"><fo:inline font-family="monospace">session/1,2,3</fo:inline></fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The properties of the sessions will be exactly the same, except
      that when
      using <fo:inline font-style="italic"><fo:inline font-family="monospace">connect/1,2</fo:inline></fo:inline>, you
      may start multiple sessions over the same SSH connection. Each
      session is implemented as an SSH channel.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic"><fo:inline font-family="monospace">open/1,2</fo:inline></fo:inline> will establish one
      SSH connection with one SSH channel implementing one NETCONF
      session. You may start mutiple sessions by
      calling <fo:inline font-style="italic"><fo:inline font-family="monospace">open/1,2</fo:inline></fo:inline> multiple
      times, but then a new SSH connection will be established for each
      session.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For each server to test against, the following entry can be added to a
      configuration file:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 {server_id(),options()}.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-style="italic"><fo:inline font-family="monospace">server_id()</fo:inline></fo:inline>
      or an associated
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:target_name()</fo:inline></fo:inline>
      must then be used in calls to
      <fo:inline font-style="italic"><fo:inline font-family="monospace">connect/2</fo:inline></fo:inline>
      or <fo:inline font-style="italic"><fo:inline font-family="monospace">open/2</fo:inline></fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If no configuration exists for a server,
      use <fo:inline font-style="italic"><fo:inline font-family="monospace">connect/1</fo:inline></fo:inline>
      or <fo:inline font-style="italic"><fo:inline font-family="monospace">open/1</fo:inline></fo:inline> instead,
      and specify all necessary options in the <fo:inline font-family="monospace">Options</fo:inline> parameter.</fo:block>

    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Logging</fo:inline></fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The NETCONF server uses <fo:inline font-family="monospace">error_logger</fo:inline> for logging of NETCONF
      traffic. A special purpose error handler is implemented in
      <fo:inline font-family="monospace">ct_conn_log_h</fo:inline>. To use this error handler, add the
      <fo:inline font-family="monospace">cth_conn_log</fo:inline> hook in the test suite, for example:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 suite() -&gt;
    [{ct_hooks, [{cth_conn_log, [{<fo:inline font-style="italic"><fo:inline font-family="monospace">ct:conn_log_mod()</fo:inline></fo:inline>,<fo:inline font-style="italic"><fo:inline font-family="monospace">ct:conn_log_options()</fo:inline></fo:inline>}]}]}].</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">conn_log_mod()</fo:inline> is the name of the <fo:inline font-family="monospace">Common Test</fo:inline> module
      implementing the connection protocol, for example, <fo:inline font-family="monospace">ct_netconfc</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Hook option <fo:inline font-family="monospace">log_type</fo:inline> specifies the type of logging:</fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">raw</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The sent and received NETCONF data is logged to a separate
        text file "as is" without any formatting. A link to the file is
        added to the test case HTML log.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">pretty</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The sent and received NETCONF data is logged to a separate
        text file with XML data nicely indented. A link to the file is
        added to the test case HTML log.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">html (default)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The sent and received NETCONF traffic is pretty printed
        directly in the test case HTML log.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">silent</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">NETCONF traffic is not logged.</fo:block></fo:block></fo:block-container>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By default, all NETCONF traffic is logged in one single log file.
      However, different connections can be logged in separate files.
      To do this, use hook option <fo:inline font-family="monospace">hosts</fo:inline> and list the names of the
      servers/connections to be used in the suite. The connections
      must be named for this to work, that is, they must be opened with
      <fo:inline font-style="italic"><fo:inline font-family="monospace">open/2</fo:inline></fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Option <fo:inline font-family="monospace">hosts</fo:inline> has no effect if <fo:inline font-family="monospace">log_type</fo:inline> is set to
      <fo:inline font-family="monospace">html</fo:inline> or <fo:inline font-family="monospace">silent</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The hook options can also be specified in a configuration file with
      configuration variable <fo:inline font-family="monospace">ct_conn_log</fo:inline>:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 {ct_conn_log,[{<fo:inline font-style="italic"><fo:inline font-family="monospace">ct:conn_log_mod()</fo:inline></fo:inline>,<fo:inline font-style="italic"><fo:inline font-family="monospace">ct:conn_log_options()</fo:inline></fo:inline>}]}.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For example:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 {ct_conn_log,[{ct_netconfc,[{log_type,pretty},
                             {hosts,[<fo:inline font-style="italic"><fo:inline font-family="monospace">ct:key_or_name()</fo:inline></fo:inline>]}]}]}</fo:block>

    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Hook options specified in a configuration file overwrite the
        hard-coded hook options in the test suite.</fo:block>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Logging Example 1:</fo:inline></fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following <fo:inline font-family="monospace">ct_hooks</fo:inline> statement causes pretty printing of
      NETCONF traffic to separate logs for the connections named
      <fo:inline font-family="monospace">nc_server1</fo:inline> and <fo:inline font-family="monospace">nc_server2</fo:inline>. Any other connections are
      logged to default NETCONF log.</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 suite() -&gt;
    [{ct_hooks, [{cth_conn_log, [{ct_netconfc,[{log_type,pretty}},
                                               {hosts,[nc_server1,nc_server2]}]}
                                ]}]}].</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Connections must be opened as follows:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 open(nc_server1,[...]),
 open(nc_server2,[...]).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Logging Example 2:</fo:inline></fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following configuration file causes raw logging of all NETCONF 
      traffic in to one single text file:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 {ct_conn_log,[{ct_netconfc,[{log_type,raw}]}]}.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">ct_hooks</fo:inline> statement must look as follows:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 suite() -&gt;
    [{ct_hooks, [{cth_conn_log, []}]}].</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The same <fo:inline font-family="monospace">ct_hooks</fo:inline> statement without the configuration file
      would cause HTML logging of all NETCONF connections in to the test
      case HTML log.</fo:block>

    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Notifications</fo:inline></fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The NETCONF client is also compliant with RFC 5277 NETCONF Event
      Notifications, which defines a mechanism for an asynchronous message 
      notification delivery service for the NETCONF protocol.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specific functions to support this are
      <fo:inline font-style="italic"><fo:inline font-family="monospace">create_subscription/1-6</fo:inline></fo:inline>
      and
      <fo:inline font-style="italic"><fo:inline font-family="monospace">get_event_streams/1-3</fo:inline></fo:inline>.</fo:block>

    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Default Timeout</fo:inline></fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Most of the functions in this module have one variant with
      a <fo:inline font-family="monospace">Timeout</fo:inline> parameter, and one without. If nothing else is
      specified, the default value <fo:inline font-family="monospace">infinity</fo:inline> is used when
      the <fo:inline font-family="monospace">Timeout</fo:inline> parameter is not given.</fo:block>

  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Data Types</fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">client() = <fo:inline font-style="italic">handle()</fo:inline> | <fo:inline font-style="italic">server_id()</fo:inline> | <fo:inline font-style="italic">ct:target_name()</fo:inline></fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">error_reason() = term()</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">event_time() = {eventTime, <fo:inline font-style="italic">xml_attributes()</fo:inline>, [<fo:inline font-style="italic">xs_datetime()</fo:inline>]}</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">handle()</fo:block></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Opaque reference for a connection to a NETCONF server or a
	  NETCONF session.</fo:block>
      
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">host() = <fo:inline font-style="italic">inet:hostname()</fo:inline> | <fo:inline font-style="italic">inet:ip_address()</fo:inline></fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">netconf_db() = running | startup | candidate</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">notification() = <fo:block/>    {notification, <fo:inline font-style="italic">xml_attributes()</fo:inline>, <fo:inline font-style="italic">notification_content()</fo:inline>}</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">notification_content() = [<fo:inline font-style="italic">event_time()</fo:inline> | <fo:inline font-style="italic">simple_xml()</fo:inline>]</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">option() = <fo:block/>    {ssh, <fo:inline font-style="italic">host()</fo:inline>} |<fo:block/>    {port, <fo:inline font-style="italic">inet:port_number()</fo:inline>} |<fo:block/>    {user, string()} |<fo:block/>    {password, string()} |<fo:block/>    {user_dir, string()} |<fo:block/>    {timeout, timeout()}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">SshConnectOption</fo:inline> is any valid option to
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ssh:connect/3,4</fo:inline></fo:inline>.
	  Common options used are <fo:inline font-family="monospace">user</fo:inline>, <fo:inline font-family="monospace">password</fo:inline>
	  and <fo:inline font-family="monospace">user_dir</fo:inline>. The <fo:inline font-family="monospace">SshConnectOptions</fo:inline> are
	  verfied by the SSH application.</fo:block>
      
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">options() = [<fo:inline font-style="italic">option()</fo:inline>]</fo:block></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Options used for setting up an SSH connection to a NETCONF
          server.</fo:block>
      
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">server_id() = atom()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The identity of a server, specified in a configuration
          file.</fo:block>
      
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">simple_xml() = <fo:block/>    {<fo:inline font-style="italic">xml_tag()</fo:inline>, <fo:inline font-style="italic">xml_attributes()</fo:inline>, <fo:inline font-style="italic">xml_content()</fo:inline>} |<fo:block/>    {<fo:inline font-style="italic">xml_tag()</fo:inline>, <fo:inline font-style="italic">xml_content()</fo:inline>} |<fo:block/>    <fo:inline font-style="italic">xml_tag()</fo:inline></fo:block></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This type is further described in application
          <fo:inline font-style="italic"><fo:inline font-family="monospace">xmerl</fo:inline></fo:inline>.</fo:block>
      
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">stream_data() = <fo:block/>    {description, string()} |<fo:block/>    {replaySupport, string()} |<fo:block/>    {replayLogCreationTime, string()} |<fo:block/>    {replayLogAgedTime, string()}</fo:block></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details about the data format for the string values, see
          "XML Schema for Event Notifications" in RFC 5277.</fo:block>
      
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">stream_name() = string()</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">streams() = [{<fo:inline font-style="italic">stream_name()</fo:inline>, [<fo:inline font-style="italic">stream_data()</fo:inline>]}]</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">xml_attribute_tag() = atom()</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">xml_attribute_value() = string()</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">xml_attributes() = <fo:block/>    [{<fo:inline font-style="italic">xml_attribute_tag()</fo:inline>, <fo:inline font-style="italic">xml_attribute_value()</fo:inline>}]</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">xml_content() = [<fo:inline font-style="italic">simple_xml()</fo:inline> | iolist()]</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">xml_tag() = atom()</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">xpath() = {xpath, string()}</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">xs_datetime() = string()</fo:block></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This date and time identifier has the same format as the XML type
          <fo:inline font-family="monospace">dateTime</fo:inline> and is compliant with RFC 3339 Date and Time on
          the Internet Timestamps. The format is as follows:</fo:block>
	<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 [-]CCYY-MM-DDThh:mm:ss[.s][Z|(+|-)hh:mm]</fo:block>
      
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp6220624"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">action(Client, Action) -&gt; Result</fo:block></fo:block><fo:block id="idp6221456"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">action(Client, Action, Timeout) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Client = <fo:inline font-style="italic">client()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Action = <fo:inline font-style="italic">simple_xml()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Result = ok | {ok, [<fo:inline font-style="italic">simple_xml()</fo:inline>]} | {error, <fo:inline font-style="italic">error_reason()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Executes an action. If the return type is void, <fo:inline font-family="monospace">ok</fo:inline> is
          returned instead of <fo:inline font-family="monospace">{ok,[simple_xml()]}</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp6225024"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">close_session(Client) -&gt; Result</fo:block></fo:block><fo:block id="idp6225856"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">close_session(Client, Timeout) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Client = <fo:inline font-style="italic">client()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Result = ok | {error, <fo:inline font-style="italic">error_reason()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Requests graceful termination of the session associated with the
          client.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a NETCONF server receives a <fo:inline font-family="monospace">close-session</fo:inline> request, it
          gracefully closes the session.  The server releases any locks and
          resources associated with the session and gracefully closes any
          associated connections. Any NETCONF requests received after a
          <fo:inline font-family="monospace">close-session</fo:inline> request are ignored.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp6230192"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">connect(Options) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Options = <fo:inline font-style="italic">options()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Result = {ok, <fo:inline font-style="italic">handle()</fo:inline>} | {error, <fo:inline font-style="italic">error_reason()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Opens an SSH connection to a NETCONF server.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the server options are specified in a configuration file, use
          <fo:inline font-style="italic"><fo:inline font-family="monospace">connect/2</fo:inline></fo:inline>
          instead.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The opaque <fo:inline font-style="italic"><fo:inline font-family="monospace">handle()</fo:inline></fo:inline>
	  reference returned from this
          function is required as connection identifier when opening
          sessions over this connection, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">session/1,2,3</fo:inline></fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Option <fo:inline font-family="monospace">timeout</fo:inline> (milliseconds) is used when setting up the
          SSH connection. It is not used for any other purposes during the
          lifetime of the connection.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp6237568"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">connect(KeyOrName, ExtraOptions) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">KeyOrName = <fo:inline font-style="italic">ct:key_or_name()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ExtraOptions = <fo:inline font-style="italic">options()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Result = {ok, <fo:inline font-style="italic">handle()</fo:inline>} | {error, <fo:inline font-style="italic">error_reason()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Open an SSH connection to a named NETCONF server.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">KeyOrName</fo:inline> is a
          configured <fo:inline font-family="monospace">server_id()</fo:inline> or a
          <fo:inline font-family="monospace">target_name()</fo:inline> associated with such an Id, then the options
          for this server are fetched from the configuration file.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Argument <fo:inline font-family="monospace">ExtraOptions</fo:inline> is added to the
          options found in the configuration file. If the same options
          are specified, the values from the configuration file
          overwrite <fo:inline font-family="monospace">ExtraOptions</fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the server is not specified in a configuration file, use
          <fo:inline font-style="italic"><fo:inline font-family="monospace">connect/1</fo:inline></fo:inline>
          instead.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The opaque <fo:inline font-style="italic"><fo:inline font-family="monospace">handle()</fo:inline></fo:inline>
	  reference returned from this
          function can be used as connection identifier when opening
          sessions over this connection, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">session/1,2,3</fo:inline></fo:inline>.
          However, if <fo:inline font-family="monospace">KeyOrName</fo:inline> is a
          <fo:inline font-family="monospace">target_name()</fo:inline>, that is, if the server is named through a
          call to <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:require/2</fo:inline></fo:inline>
          or a <fo:inline font-family="monospace">require</fo:inline> statement in the test suite, then this name can
          be used instead of
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">handle()</fo:inline></fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Option <fo:inline font-family="monospace">timeout</fo:inline> (milliseconds) is used when setting up the
          SSH connection. It is not used for any other purposes during the
          lifetime of the connection.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp6252016"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">copy_config(Client, Target, Source) -&gt; Result</fo:block></fo:block><fo:block id="idp6252848"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">copy_config(Client, Target, Source, Timeout) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Client = <fo:inline font-style="italic">client()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Target = Source = <fo:inline font-style="italic">netconf_db()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Result = ok | {error, <fo:inline font-style="italic">error_reason()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Copies configuration data.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Which source and target options that can be issued depends on the
          capabilities supported by the server. That is, <fo:inline font-family="monospace">:candidate</fo:inline>
          and/or <fo:inline font-family="monospace">:startup</fo:inline> are required.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6256960">create_subscription(Client) -&gt; Result</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6257424">create_subscription(Client, Stream) -&gt; Result</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6257904">create_subscription(Client, Stream, Filter) -&gt; Result</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6258384">create_subscription(Client, Stream, Filter, Timeout) -&gt; Result</fo:block></fo:block><fo:block id="idp6258880"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">create_subscription(Client, Stream, Filter, StartTime, StopTime) -&gt;<fo:block/>                       Result</fo:block></fo:block><fo:block id="idp6259984"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">create_subscription(Client,<fo:block/>                    Stream,<fo:block/>                    Filter,<fo:block/>                    StartTime,<fo:block/>                    StopTime,<fo:block/>                    Timeout) -&gt;<fo:block/>                       Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Client = <fo:inline font-style="italic">client()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Stream = <fo:inline font-style="italic">stream_name()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filter = <fo:inline font-style="italic">simple_xml()</fo:inline> | [<fo:inline font-style="italic">simple_xml()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">StartTime = StopTime = <fo:inline font-style="italic">xs_datetime()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"/></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Result = ok | {error, <fo:inline font-style="italic">error_reason()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a subscription for event notifications.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function sets up a subscription for NETCONF event
          notifications of the specified stream type, matching the specified
          filter. The calling process receives notifications as messages of
          type <fo:inline font-style="italic"><fo:inline font-family="monospace">notification()</fo:inline></fo:inline>.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Only a subset of the function clauses are show above. The
	  full set of valid combinations of input parameters is as
	  follows:</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">create_subscription(Client)

create_subscription(Client, Timeout)
create_subscription(Client, Stream)
create_subscription(Client, Filter)

create_subscription(Client, Stream, Timeout)
create_subscription(Client, Filter, Timeout)
create_subscription(Client, Stream, Filter)
create_subscription(Client, StartTime, StopTime)

create_subscription(Client, Stream, Filter, Timeout)
create_subscription(Client, StartTime, StopTime, Timeout)
create_subscription(Client, Stream, StartTime, StopTime)
create_subscription(Client, Filter, StartTime, StopTime)

create_subscription(Client, Stream, StartTime, StopTime, Timeout)
create_subscription(Client, Stream, Filter, StartTime, StopTime)
create_subscription(Client, Stream, Filter, StartTime, StopTime, Timeout)</fo:block>

        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Stream</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Optional parameter that indicates which stream of event
            is of interest. If not present, events in the default NETCONF
            stream are sent.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Filter</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Optional parameter that indicates which subset of all
            possible events is of interest. The parameter format is the
            same as that of the filter parameter in the NETCONF protocol
            operations. If not present, all events not precluded by other
            parameters are sent.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">StartTime</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Optional parameter used to trigger the replay feature and
              indicate that the replay is to start at the time specified.
              If <fo:inline font-family="monospace">StartTime</fo:inline> is not present, this is not a
	      replay subscription.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is not valid to specify start times that are later than
              the current time. If <fo:inline font-family="monospace">StartTime</fo:inline> is specified
	      earlier than the log can support, the replay begins with the
	      earliest available notification.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This parameter is of type <fo:inline font-family="monospace">dateTime</fo:inline> and compliant to
              RFC 3339. Implementations must support time zones.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">StopTime</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Optional parameter used with the optional replay feature
              to indicate the newest notifications of interest. If
              <fo:inline font-family="monospace">StopTime</fo:inline> is not present, the notifications
	      continues until the subscription is terminated.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Must be used with and be later than <fo:inline font-family="monospace">StartTime</fo:inline>. Values
              of <fo:inline font-family="monospace">StopTime</fo:inline> in the future are valid. This
	      parameter is of type <fo:inline font-family="monospace">dateTime</fo:inline> and compliant to RFC 3339.
              Implementations must support time zones.</fo:block></fo:block></fo:block-container>
        </fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more details about the event notification mechanism, see
          RFC 5277.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp6278224"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">delete_config(Client, Target) -&gt; Result</fo:block></fo:block><fo:block id="idp6279056"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">delete_config(Client, Target, Timeout) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Client = <fo:inline font-style="italic">client()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Target = startup | candidate</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Result = ok | {error, <fo:inline font-style="italic">error_reason()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Deletes configuration data.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The running configuration cannot be deleted and <fo:inline font-family="monospace">:candidate</fo:inline>
          or <fo:inline font-family="monospace">:startup</fo:inline> must be advertised by the server.</fo:block>
      </fo:block>

     <fo:block space-before="1.5em"><fo:block id="idp6283104"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">disconnect(Conn) -&gt; ok | {error, <fo:inline font-style="italic">error_reason()</fo:inline>}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Conn = <fo:inline font-style="italic">handle()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Closes the given SSH connection.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If there are open NETCONF sessions on the connection, these
	  will be brutally aborted. To avoid this, close each session
	  with <fo:inline font-style="italic"><fo:inline font-family="monospace">close_session/1,2</fo:inline></fo:inline></fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp6287008"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">edit_config(Client, Target, Config) -&gt; Result</fo:block></fo:block><fo:block id="idp6287840"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">edit_config(Client, Target, Config, OptParams) -&gt; Result</fo:block></fo:block><fo:block id="idp6288944"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">edit_config(Client, Target, Config, Timeout) -&gt; Result</fo:block></fo:block><fo:block id="idp6290048"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">edit_config(Client, Target, Config, OptParams, Timeout) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Client = <fo:inline font-style="italic">client()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Target = <fo:inline font-style="italic">netconf_db()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Config = <fo:inline font-style="italic">simple_xml()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">OptParams = [<fo:inline font-style="italic">simple_xml()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Result = ok | {error, <fo:inline font-style="italic">error_reason()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Edits configuration data.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By default only the running target is available, unless the server
          includes <fo:inline font-family="monospace">:candidate</fo:inline> or <fo:inline font-family="monospace">:startup</fo:inline> in its list of
          capabilities.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">OptParams</fo:inline> can be used for specifying optional parameters
          (<fo:inline font-family="monospace">default-operation</fo:inline>, <fo:inline font-family="monospace">test-option</fo:inline>, or
          <fo:inline font-family="monospace">error-option</fo:inline>) to be added to the <fo:inline font-family="monospace">edit-config</fo:inline>
          request. The value must be a list containing valid simple XML,
          for example:</fo:block>

        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 [{'default-operation', ["none"]},
  {'error-option', ["rollback-on-error"]}]</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">OptParams</fo:inline> is not given, the default
	  value <fo:inline font-family="monospace">[]</fo:inline> is used.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp6298784"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get(Client, Filter) -&gt; Result</fo:block></fo:block><fo:block id="idp6299616"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get(Client, Filter, Timeout) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Client = <fo:inline font-style="italic">client()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filter = <fo:inline font-style="italic">simple_xml()</fo:inline> | <fo:inline font-style="italic">xpath()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Result = {ok, [<fo:inline font-style="italic">simple_xml()</fo:inline>]} | {error, <fo:inline font-style="italic">error_reason()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gets data.</fo:block>
 
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This operation returns both configuration and state data from the
          server.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Filter type <fo:inline font-family="monospace">xpath</fo:inline> can be used only if the server supports
          <fo:inline font-family="monospace">:xpath</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp6304128"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_capabilities(Client) -&gt; Result</fo:block></fo:block><fo:block id="idp6304960"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_capabilities(Client, Timeout) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Client = <fo:inline font-style="italic">client()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Result = [string()] | {error, <fo:inline font-style="italic">error_reason()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the server side capabilities.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following capability identifiers, defined in RFC 4741 NETCONF
          Configuration Protocol, can be returned:</fo:block>

        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">"urn:ietf:params:netconf:base:1.0"</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">"urn:ietf:params:netconf:capability:writable-running:1.0"</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">"urn:ietf:params:netconf:capability:candidate:1.0"</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">"urn:ietf:params:netconf:capability:confirmed-commit:1.0"</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">"urn:ietf:params:netconf:capability:rollback-on-error:1.0"</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">"urn:ietf:params:netconf:capability:startup:1.0"</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">"urn:ietf:params:netconf:capability:url:1.0"</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">"urn:ietf:params:netconf:capability:xpath:1.0"</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
 
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">More identifiers can exist, for example, server-side namespace.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp6315296"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_config(Client, Source, Filter) -&gt; Result</fo:block></fo:block><fo:block id="idp6316128"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_config(Client, Source, Filter, Timeout) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Client = <fo:inline font-style="italic">client()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Source = <fo:inline font-style="italic">netconf_db()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filter = <fo:inline font-style="italic">simple_xml()</fo:inline> | <fo:inline font-style="italic">xpath()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Result = {ok, [<fo:inline font-style="italic">simple_xml()</fo:inline>]} | {error, <fo:inline font-style="italic">error_reason()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gets configuration data.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To be able to access another source than <fo:inline font-family="monospace">running</fo:inline>, the
          server must advertise <fo:inline font-family="monospace">:candidate</fo:inline> and/or <fo:inline font-family="monospace">:startup</fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Filter type <fo:inline font-family="monospace">xpath</fo:inline> can be used only if the server supports
          <fo:inline font-family="monospace">:xpath</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp6322000"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_event_streams(Client) -&gt; Result</fo:block></fo:block><fo:block id="idp6322832"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_event_streams(Client, Timeout) -&gt; Result</fo:block></fo:block><fo:block id="idp6323936"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_event_streams(Client, Streams) -&gt; Result</fo:block></fo:block><fo:block id="idp6325040"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_event_streams(Client, Streams, Timeout) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Client = <fo:inline font-style="italic">client()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Streams = [<fo:inline font-style="italic">stream_name()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Result = {ok, <fo:inline font-style="italic">streams()</fo:inline>} | {error, <fo:inline font-style="italic">error_reason()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends a request to get the specified event streams.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Streams</fo:inline> is a list of stream names. The following filter is
          sent to the NETCONF server in a <fo:inline font-family="monospace">get</fo:inline> request:</fo:block>

        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 &lt;netconf xmlns="urn:ietf:params:xml:ns:netmod:notification"&gt;
   &lt;streams&gt;
     &lt;stream&gt;
       &lt;name&gt;StreamName1&lt;/name&gt;
     &lt;/stream&gt;
     &lt;stream&gt;
       &lt;name&gt;StreamName2&lt;/name&gt;
     &lt;/stream&gt;
     ...
   &lt;/streams&gt;
 &lt;/netconf&gt;</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Streams</fo:inline> is an empty list, <fo:inline font-weight="bold">all</fo:inline> streams are
          requested by sending the following filter:</fo:block>

        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 &lt;netconf xmlns="urn:ietf:params:xml:ns:netmod:notification"&gt;
   &lt;streams/&gt;
 &lt;/netconf&gt;</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If more complex filtering is needed, use
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_netconfc:get/2,3</fo:inline></fo:inline> and
          specify the exact filter according to "XML Schema for Event
          Notifications" in RFC 5277.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp6333008"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_session_id(Client) -&gt; Result</fo:block></fo:block><fo:block id="idp6333840"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">get_session_id(Client, Timeout) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Client = <fo:inline font-style="italic">client()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Result = integer() &gt;= 1 | {error, <fo:inline font-style="italic">error_reason()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the session Id associated with the specified client.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp6336560"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">hello(Client) -&gt; Result</fo:block></fo:block><fo:block id="idp6337392"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">hello(Client, Timeout) -&gt; Result</fo:block></fo:block><fo:block id="idp6338224"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">hello(Client, Options, Timeout) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Client = <fo:inline font-style="italic">handle()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Options = [{capability, [string()]}]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Result = ok | {error, <fo:inline font-style="italic">error_reason()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Exchanges <fo:inline font-family="monospace">hello</fo:inline> messages with the server.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Adds optional capabilities and sends a <fo:inline font-family="monospace">hello</fo:inline> message to the
          server and waits for the return.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp6342304"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">kill_session(Client, SessionId) -&gt; Result</fo:block></fo:block><fo:block id="idp6343136"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">kill_session(Client, SessionId, Timeout) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Client = <fo:inline font-style="italic">client()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">SessionId = integer() &gt;= 1</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Result = ok | {error, <fo:inline font-style="italic">error_reason()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Forces termination of the session associated with the supplied
          session Id.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The server side must abort any ongoing operations, release any
          locks and resources associated with the session, and close any
          associated connections.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Only if the server is in the confirmed commit phase, the
          configuration is restored to its state before entering the confirmed
          commit phase. Otherwise, no configuration rollback is performed.</fo:block>

         <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the specified <fo:inline font-family="monospace">SessionId</fo:inline> is equal to the current session
           Id, an error is returned.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp6348080"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">lock(Client, Target) -&gt; Result</fo:block></fo:block><fo:block id="idp6348912"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">lock(Client, Target, Timeout) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Client = <fo:inline font-style="italic">client()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Target = <fo:inline font-style="italic">netconf_db()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Result = ok | {error, <fo:inline font-style="italic">error_reason()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Locks the configuration target.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Which target parameters that can be used depends on if
          <fo:inline font-family="monospace">:candidate</fo:inline> and/or <fo:inline font-family="monospace">:startup</fo:inline> are supported by the
          server. If successfull, the configuration system of the device is
          unavailable to other clients (NETCONF, CORBA, SNMP, and so on).
          Locks are intended to be short-lived.</fo:block>

         <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Operation
           <fo:inline font-style="italic"><fo:inline font-family="monospace">kill_session/2,3</fo:inline></fo:inline>
           can be used to force the release of a lock owned by another NETCONF
           session. How this is achieved by the server side is
           implementation-specific.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp6354624"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">only_open(Options) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Options = <fo:inline font-style="italic">options()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Result = {ok, <fo:inline font-style="italic">handle()</fo:inline>} | {error, <fo:inline font-style="italic">error_reason()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Opens a NETCONF session, but does not send <fo:inline font-family="monospace">hello</fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As <fo:inline font-style="italic"><fo:inline font-family="monospace">open/1</fo:inline></fo:inline>, but
          does not send a <fo:inline font-family="monospace">hello</fo:inline> message.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp6359520"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">only_open(KeyOrName, ExtraOptions) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">KeyOrName = <fo:inline font-style="italic">ct:key_or_name()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ExtraOptions = <fo:inline font-style="italic">options()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Result = {ok, <fo:inline font-style="italic">handle()</fo:inline>} | {error, <fo:inline font-style="italic">error_reason()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Opens a named NETCONF session, but does not send <fo:inline font-family="monospace">hello</fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As <fo:inline font-style="italic"><fo:inline font-family="monospace">open/2</fo:inline></fo:inline>, but
          does not send a <fo:inline font-family="monospace">hello</fo:inline> message.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp6364416"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">open(Options) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Options = <fo:inline font-style="italic">options()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Result = {ok, <fo:inline font-style="italic">handle()</fo:inline>} | {error, <fo:inline font-style="italic">error_reason()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Opens a NETCONF session and exchanges <fo:inline font-family="monospace">hello</fo:inline> messages.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the server options are specified in a configuration file,
          or if a named client is needed for logging purposes (see section
          <fo:inline font-style="italic">Logging</fo:inline> in this module), use
          <fo:inline font-style="italic"><fo:inline font-family="monospace">open/2</fo:inline></fo:inline>
          instead.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The opaque <fo:inline font-style="italic"><fo:inline font-family="monospace">handle()</fo:inline></fo:inline>
	  reference returned from this
          function is required as client identifier when calling any other
          function in this module.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Option <fo:inline font-family="monospace">timeout</fo:inline> (milliseconds) is used when setting up the
          SSH connection and when waiting for the <fo:inline font-family="monospace">hello</fo:inline> message from
          the server. It is not used for any other purposes during the
          lifetime of the connection.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp6372656"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">open(KeyOrName, ExtraOptions) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">KeyOrName = <fo:inline font-style="italic">ct:key_or_name()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ExtraOptions = <fo:inline font-style="italic">options()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Result = {ok, <fo:inline font-style="italic">handle()</fo:inline>} | {error, <fo:inline font-style="italic">error_reason()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Opens a named NETCONF session and exchanges <fo:inline font-family="monospace">hello</fo:inline>
          messages.</fo:block>

         <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">KeyOrName</fo:inline> is a
           configured <fo:inline font-family="monospace">server_id()</fo:inline> or a
           <fo:inline font-family="monospace">target_name()</fo:inline> associated with such an Id, then the options
           for this server are fetched from the configuration file.</fo:block>

         <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Argument <fo:inline font-family="monospace">ExtraOptions</fo:inline> is added to the
           options found in the configuration file. If the same
           options are specified, the values from the configuration
           file overwrite <fo:inline font-family="monospace">ExtraOptions</fo:inline>.</fo:block>

         <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the server is not specified in a configuration file, use
           <fo:inline font-style="italic"><fo:inline font-family="monospace">open/1</fo:inline></fo:inline>
           instead.</fo:block>

         <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The opaque <fo:inline font-style="italic"><fo:inline font-family="monospace">handle()</fo:inline></fo:inline>
	   reference returned from this
           function can be used as client identifier when calling any other
           function in this module. However, if <fo:inline font-family="monospace">KeyOrName</fo:inline> is a
           <fo:inline font-family="monospace">target_name()</fo:inline>, that is, if the server is named through a
           call to <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:require/2</fo:inline></fo:inline>
           or a <fo:inline font-family="monospace">require</fo:inline> statement in the test suite, then this name can
           be used instead of
	   <fo:inline font-style="italic"><fo:inline font-family="monospace">handle()</fo:inline></fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Option <fo:inline font-family="monospace">timeout</fo:inline> (milliseconds) is used when setting up the
          SSH connection and when waiting for the <fo:inline font-family="monospace">hello</fo:inline> message from
          the server. It is not used for any other purposes during the
          lifetime of the connection.</fo:block>

         <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also
           <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:require/2</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp6388496"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">send(Client, SimpleXml) -&gt; Result</fo:block></fo:block><fo:block id="idp6389328"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">send(Client, SimpleXml, Timeout) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Client = <fo:inline font-style="italic">client()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">SimpleXml = <fo:inline font-style="italic">simple_xml()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Result = <fo:inline font-style="italic">simple_xml()</fo:inline> | {error, <fo:inline font-style="italic">error_reason()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends an XML document to the server.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The specified XML document is sent "as is" to the server. This
          function can be used for sending XML documents that cannot be
          expressed by other interface functions in this module.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp6392608"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">send_rpc(Client, SimpleXml) -&gt; Result</fo:block></fo:block><fo:block id="idp6393440"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">send_rpc(Client, SimpleXml, Timeout) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Client = <fo:inline font-style="italic">client()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">SimpleXml = <fo:inline font-style="italic">simple_xml()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Result = [<fo:inline font-style="italic">simple_xml()</fo:inline>] | {error, <fo:inline font-style="italic">error_reason()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends a NETCONF <fo:inline font-family="monospace">rpc</fo:inline> request to the server.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The specified XML document is wrapped in a valid NETCONF <fo:inline font-family="monospace">rpc</fo:inline>
          request and sent to the server. The <fo:inline font-family="monospace">message-id</fo:inline> and namespace
          attributes are added to element <fo:inline font-family="monospace">rpc</fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function can be used for sending <fo:inline font-family="monospace">rpc</fo:inline> requests that
          cannot be expressed by other interface functions in this module.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp6399456"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">session(Conn) -&gt; Result</fo:block></fo:block><fo:block id="idp6400288"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">session(Conn, Options) -&gt; Result</fo:block></fo:block><fo:block id="idp6401392"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">session(KeyOrName, Conn) -&gt; Result</fo:block></fo:block><fo:block id="idp6402496"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">session(KeyOrName, Conn, Options) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Conn = <fo:inline font-style="italic">handle()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Options = <fo:inline font-style="italic">session_options()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">KeyOrName = <fo:inline font-style="italic">ct:key_or_name()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Result = {ok, <fo:inline font-style="italic">handle()</fo:inline>} | {error, <fo:inline font-style="italic">error_reason()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">session_options() = [<fo:inline font-style="italic">session_option()</fo:inline>]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">session_option() = {timeout, timeout()}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Opens a NETCONF session as a channel on the given SSH
          connection, and exchanges hello messages with the server.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The opaque <fo:inline font-style="italic"><fo:inline font-family="monospace">handle()</fo:inline></fo:inline>
	  reference returned from this
          function can be used as client identifier when calling any
          other function in this module. However, if <fo:inline font-family="monospace">KeyOrName</fo:inline>
          is used and it is a <fo:inline font-family="monospace">target_name()</fo:inline>, that is, if the
          server is named through a call
          to <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:require/2</fo:inline></fo:inline>
          or a <fo:inline font-family="monospace">require</fo:inline> statement in the test suite, then this
          name can be used instead of
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">handle()</fo:inline></fo:inline>.</fo:block>

      </fo:block>

    <fo:block space-before="1.5em"><fo:block id="idp6411200"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">unlock(Client, Target) -&gt; Result</fo:block></fo:block><fo:block id="idp6412032"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">unlock(Client, Target, Timeout) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Client = <fo:inline font-style="italic">client()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Target = <fo:inline font-style="italic">netconf_db()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Timeout = timeout()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Result = ok | {error, <fo:inline font-style="italic">error_reason()</fo:inline>}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Unlocks the configuration target.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the client earlier has acquired a lock through
          <fo:inline font-style="italic"><fo:inline font-family="monospace">lock/2,3</fo:inline></fo:inline>, this
          operation releases the associated lock. To access another target
          than <fo:inline font-family="monospace">running</fo:inline>, the server must support <fo:inline font-family="monospace">:candidate</fo:inline>
          and/or <fo:inline font-family="monospace">:startup</fo:inline>.</fo:block>
      </fo:block>
  

<fo:block page-break-before="always" id="idp6424784" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">ct_rpc</fo:marker>ct_rpc</fo:block>Erlang module</fo:block>
  <fo:block/>
  ct_rpc
  <fo:block/>

  

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Common Test</fo:inline> specific layer on Erlang/OTP <fo:inline font-family="monospace">rpc</fo:inline>.</fo:block>

  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6427936">app_node(App, Candidates) -&gt; NodeName</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">App = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Candidates = [NodeName]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NodeName = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">From a set of candidate nodes determines which of them is running
          the application <fo:inline font-family="monospace">App</fo:inline>. If none of the candidate nodes is
          running <fo:inline font-family="monospace">App</fo:inline>, the function makes the test case calling
          this function to fail. This function is the same as calling
          <fo:inline font-family="monospace">app_node(App, Candidates, true)</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6434048">app_node(App, Candidates, FailOnBadRPC) -&gt; NodeName</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">App = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Candidates = [NodeName]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NodeName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FailOnBadRPC = true | false</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_rpc:app_node/2</fo:inline></fo:inline>,
          except that argument <fo:inline font-family="monospace">FailOnBadRPC</fo:inline> determines if the search
          for a candidate node is to stop if <fo:inline font-family="monospace">badrpc</fo:inline> is received at
          some point.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6440944">app_node(App, Candidates, FailOnBadRPC, Cookie) -&gt; NodeName</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">App = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Candidates = [NodeName]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NodeName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FailOnBadRPC = true | false</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Cookie = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_rpc:app_node/2</fo:inline></fo:inline>,
          except that argument <fo:inline font-family="monospace">FailOnBadRPC</fo:inline> determines if the search
          for a candidate node is to stop if <fo:inline font-family="monospace">badrpc</fo:inline> is received at
          some point.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The cookie on the client node is set to <fo:inline font-family="monospace">Cookie</fo:inline> for this
          <fo:inline font-family="monospace">rpc</fo:inline> operation (used to match the server node cookie).</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6449712">call(Node, Module, Function, Args) -&gt; term() | {badrpc, Reason}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-family="monospace">call(Node, Module, Function, Args, infinity)</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6452912">call(Node, Module, Function, Args, TimeOut) -&gt; term() | {badrpc, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Node = NodeName | {Fun, FunArgs}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Fun = function()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FunArgs = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NodeName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Function = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Args = [term()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = timeout | term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Evaluates <fo:inline font-family="monospace">apply(Module, Function, Args)</fo:inline> on the node
          <fo:inline font-family="monospace">Node</fo:inline>. Returns either whatever <fo:inline font-family="monospace">Function</fo:inline> returns, or
          <fo:inline font-family="monospace">{badrpc, Reason}</fo:inline> if the remote procedure call fails. If
          <fo:inline font-family="monospace">Node</fo:inline> is <fo:inline font-family="monospace">{Fun, FunArgs}</fo:inline>, applying <fo:inline font-family="monospace">Fun</fo:inline> to
          <fo:inline font-family="monospace">FunArgs</fo:inline> is to return a node name.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6463392">call(Node, Module, Function, Args, TimeOut, Cookie) -&gt; term() | {badrpc, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Node = NodeName | {Fun, FunArgs}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Fun = function()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FunArgs = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NodeName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Function = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Args = [term()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = timeout | term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Cookie = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Evaluates <fo:inline font-family="monospace">apply(Module, Function, Args)</fo:inline> on the node
          <fo:inline font-family="monospace">Node</fo:inline>. Returns either whatever <fo:inline font-family="monospace">Function</fo:inline> returns, or
          <fo:inline font-family="monospace">{badrpc, Reason}</fo:inline> if the remote procedure call fails. If
          <fo:inline font-family="monospace">Node</fo:inline> is <fo:inline font-family="monospace">{Fun, FunArgs}</fo:inline>, applying <fo:inline font-family="monospace">Fun</fo:inline> to
          <fo:inline font-family="monospace">FunArgs</fo:inline> is to return a node name.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The cookie on the client node is set to <fo:inline font-family="monospace">Cookie</fo:inline> for this
          <fo:inline font-family="monospace">rpc</fo:inline> operation (used to match the server node cookie).</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6475728">cast(Node, Module, Function, Args) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Node = NodeName | {Fun, FunArgs}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Fun = function()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FunArgs = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NodeName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Function = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Args = [term()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = timeout | term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Evaluates <fo:inline font-family="monospace">apply(Module, Function, Args)</fo:inline> on the node
          <fo:inline font-family="monospace">Node</fo:inline>. No response is delivered and the process that makes
          the call is not suspended until the evaluation is completed as in
          the case of <fo:inline font-family="monospace">call/3,4</fo:inline>. If <fo:inline font-family="monospace">Node</fo:inline> is
          <fo:inline font-family="monospace">{Fun, FunArgs}</fo:inline>, applying <fo:inline font-family="monospace">Fun</fo:inline> to <fo:inline font-family="monospace">FunArgs</fo:inline> is to
          return a node name.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6485824">cast(Node, Module, Function, Args, Cookie) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Node = NodeName | {Fun, FunArgs}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Fun = function()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FunArgs = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NodeName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Function = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Args = [term()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = timeout | term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Cookie = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Evaluates <fo:inline font-family="monospace">apply(Module, Function, Args)</fo:inline> on the node
          <fo:inline font-family="monospace">Node</fo:inline>. No response is delivered and the process that makes
          the call is not suspended until the evaluation is completed as in
          the case of <fo:inline font-family="monospace">call/3,4</fo:inline>. If <fo:inline font-family="monospace">Node</fo:inline> is
          <fo:inline font-family="monospace">{Fun, FunArgs}</fo:inline>, applying <fo:inline font-family="monospace">Fun</fo:inline> to <fo:inline font-family="monospace">FunArgs</fo:inline> is to
          return a node name.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The cookie on the client node is set to <fo:inline font-family="monospace">Cookie</fo:inline> for this
          <fo:inline font-family="monospace">rpc</fo:inline> operation (used to match the server node cookie).</fo:block>
      </fo:block>
  

<fo:block page-break-before="always" id="idp6505088" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">ct_snmp</fo:marker>ct_snmp</fo:block>Erlang module</fo:block>
  <fo:block/>
  ct_snmp
  <fo:block/>

  

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Common Test</fo:inline> user interface module for the <fo:inline font-family="monospace">SNMP</fo:inline>
      application.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The purpose of this module is to simplify SNMP configuration for the
      test case writer. Many test cases can use default values for common
      operations and then no SNMP configuration files need to be supplied.
      When it is necessary to change particular configuration parameters, a
      subset of the relevant SNMP configuration files can be passed to
      <fo:inline font-family="monospace">ct_snmp</fo:inline> by <fo:inline font-family="monospace">Common Test</fo:inline> configuration files. For more
      specialized configuration parameters, a simple SNMP configuration file
      can be placed in the test suite data directory. To simplify the test
      suite, <fo:inline font-family="monospace">Common Test</fo:inline> keeps track of some of the SNMP manager
      information. This way the test suite does not have to handle as many
      input parameters as if it had to interface wthe OTP SNMP manager
      directly.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Configurable SNMP Manager and Agent Parameters:</fo:inline></fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Manager configuration:</fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">[{start_manager, boolean()}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Optional. Default is <fo:inline font-family="monospace">true</fo:inline>.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{users, [{user_name(), [call_back_module(), user_data()]}]}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Optional.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{usm_users, [{usm_user_name(), [usm_config()]}]}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Optional. SNMPv3 only.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{managed_agents,[{agent_name(), [user_name(), agent_ip(), agent_port(), [agent_config()]]}]}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">managed_agents</fo:inline> is optional.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{max_msg_size, integer()}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Optional. Default is <fo:inline font-family="monospace">484</fo:inline>.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{mgr_port, integer()}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Optional. Default is <fo:inline font-family="monospace">5000</fo:inline>.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{engine _id, string()}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Optional. Default is <fo:inline font-family="monospace">"mgrEngine"</fo:inline>.</fo:block></fo:block></fo:block-container>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Agent configuration:</fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{start_agent, boolean()}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Optional. Default is <fo:inline font-family="monospace">false</fo:inline>.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{agent_sysname, string()}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Optional. Default is <fo:inline font-family="monospace">"ct_test"</fo:inline>.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{agent_manager_ip, manager_ip()}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Optional. Default is <fo:inline font-family="monospace">localhost</fo:inline>.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{agent_vsns, list()}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Optional. Default is <fo:inline font-family="monospace">[v2]</fo:inline>.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{agent_trap_udp, integer()}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Optional. Default is <fo:inline font-family="monospace">5000</fo:inline>.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{agent_udp, integer()}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Optional. Default is <fo:inline font-family="monospace">4000</fo:inline>.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{agent_notify_type, atom()}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Optional. Default is <fo:inline font-family="monospace">trap</fo:inline>.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{agent_sec_type, sec_type()}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Optional. Default is <fo:inline font-family="monospace">none</fo:inline>.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{agent_passwd, string()}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Optional. Default is <fo:inline font-family="monospace">""</fo:inline>.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{agent_engine_id, string()}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Optional. Default is <fo:inline font-family="monospace">"agentEngine"</fo:inline>.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{agent_max_msg_size, string()}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Optional. Default is <fo:inline font-family="monospace">484</fo:inline>.</fo:block></fo:block></fo:block-container>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following parameters represents the SNMP configuration files
      <fo:inline font-family="monospace">context.conf</fo:inline>, <fo:inline font-family="monospace">standard.conf</fo:inline>, <fo:inline font-family="monospace">community.conf</fo:inline>,
      <fo:inline font-family="monospace">vacm.conf</fo:inline>, <fo:inline font-family="monospace">usm.conf</fo:inline>, <fo:inline font-family="monospace">notify.conf</fo:inline>,
      <fo:inline font-family="monospace">target_addr.conf</fo:inline>, and <fo:inline font-family="monospace">target_params.conf</fo:inline>. Notice that
      all values in <fo:inline font-family="monospace">agent.conf</fo:inline> can be modified by the parameters
      listed above. All these configuration files have default values set by
      the <fo:inline font-family="monospace">SNMP</fo:inline> application. These values can be overridden by suppling
      a list of valid configuration values or a file located in the test
      suites data directory, which can produce a list of valid configuration
      values if you apply function <fo:inline font-family="monospace">file:consult/1</fo:inline> to the file.</fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{agent_contexts, [term()] | {data_dir_file, rel_path()}}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Optional.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{agent_community, [term()] | {data_dir_file, rel_path()}}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Optional.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{agent_sysinfo,  [term()] | {data_dir_file, rel_path()}}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Optional.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{agent_vacm, [term()] | {data_dir_file, rel_path()}}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Optional.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{agent_usm, [term()] | {data_dir_file, rel_path()}}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Optional.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{agent_notify_def, [term()] | {data_dir_file, rel_path()}}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Optional.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{agent_target_address_def, [term()] | {data_dir_file, rel_path()}}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Optional.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{agent_target_param_def, [term()] | {data_dir_file, rel_path()}}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Optional.</fo:block></fo:block></fo:block-container>
      </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parameter <fo:inline font-family="monospace">MgrAgentConfName</fo:inline> in the functions is to be a name
      you allocate in your test suite using a <fo:inline font-family="monospace">require</fo:inline> statement.
      Example (where <fo:inline font-family="monospace">MgrAgentConfName = snmp_mgr_agent</fo:inline>):</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 suite() -&gt; [{require, snmp_mgr_agent, snmp}].</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">or</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 ct:require(snmp_mgr_agent, snmp).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that USM users are needed for SNMPv3 configuration and are
      not to be confused with users.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">SNMP traps, inform, and report messages are handled by the user
      callback module. For details, see the
      <fo:inline font-style="italic"><fo:inline font-family="monospace">SNMP</fo:inline></fo:inline> application.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is recommended to use the <fo:inline font-family="monospace">.hrl</fo:inline> files created by the
      Erlang/OTP MIB compiler to define the Object Identifiers (OIDs).
      For example, to get the Erlang node name from <fo:inline font-family="monospace">erlNodeTable</fo:inline>
      in the OTP-MIB:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 Oid = ?erlNodeEntry ++ [?erlNodeName, 1]</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Furthermore, values can be set for <fo:inline font-family="monospace">SNMP</fo:inline> application configuration
      parameters, <fo:inline font-family="monospace">config</fo:inline>, <fo:inline font-family="monospace">server</fo:inline>, <fo:inline font-family="monospace">net_if</fo:inline>, and so on (for
      a list of valid parameters and types, see the  <fo:inline font-style="italic"><fo:inline font-family="monospace">User's Guide for the SNMP application</fo:inline></fo:inline>). This is
      done by defining a configuration data variable on the following form:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 {snmp_app, [{manager, [snmp_app_manager_params()]},
             {agent, [snmp_app_agent_params()]}]}.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A name for the data must be allocated in the suite using
      <fo:inline font-family="monospace">require</fo:inline> (see the example above). Pass this name as argument
      <fo:inline font-family="monospace">SnmpAppConfName</fo:inline> to
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_snmp:start/3</fo:inline></fo:inline>.
      <fo:inline font-family="monospace">ct_snmp</fo:inline> specifies default values for some <fo:inline font-family="monospace">SNMP</fo:inline> application
      configuration parameters (such as <fo:inline font-family="monospace">{verbosity,trace}</fo:inline> for parameter
      <fo:inline font-family="monospace">config</fo:inline>). This set of defaults is merged with the parameters
      specified by the user. The user values override <fo:inline font-family="monospace">ct_snmp</fo:inline>
      defaults.</fo:block>

  

  <fo:block id="idp6572400" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Data Types</fo:block>
    
    
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">agent_config() = {Item, Value}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"> </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">agent_ip() = ip()</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"> </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">agent_name() = atom()</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"> </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">agent_port() = integer()</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"> </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">call_back_module() = atom()</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"> </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">error_index() = integer()</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"> </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">error_status() = noError | atom()</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"> </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ip() = string() | {integer(), integer(), integer(), integer()}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"> </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">manager_ip() = ip()</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"> </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">oid() = [byte()]</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"> </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">oids() = [oid()]</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"> </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">rel_path() = string()</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"> </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sec_type() = none | minimum | semi</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"> </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">snmp_app_agent_params() = term()</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"> </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">snmp_app_manager_params() = term()</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"> </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">snmpreply() = {error_status(), error_index(), varbinds()}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"> </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">user_data() = term()</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"> </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">user_name() = atom()</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"> </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">usm_config() = {Item, Value}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"> </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">usm_user_name() = string()</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"> </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">value_type() = o('OBJECT IDENTIFIER') | i('INTEGER') | u('Unsigned32') | g('Unsigned32') | s('OCTET STRING')</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"> </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">var_and_val() = {oid(), value_type(), value()}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"> </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">varbind() = term()</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"> </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">varbinds() = [varbind()]</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"> </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">varsandvals() = [var_and_val()]</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"> </fo:block></fo:block-container>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These data types are described in the documentation for
      the <fo:inline font-style="italic"><fo:inline font-family="monospace">SNMP</fo:inline></fo:inline> application.</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6611984">get_next_values(Agent, Oids, MgrAgentConfName) -&gt; SnmpReply</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Agent = agent_name()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Oids = oids()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MgrAgentConfName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SnmpReply = snmpreply()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Issues a synchronous SNMP <fo:inline font-family="monospace">get next</fo:inline> request.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6617424">get_values(Agent, Oids, MgrAgentConfName) -&gt; SnmpReply</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Agent = agent_name()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Oids = oids()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MgrAgentConfName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SnmpReply = snmpreply()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Issues a synchronous SNMP <fo:inline font-family="monospace">get</fo:inline> request.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6622832">load_mibs(Mibs) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Mibs = [MibName]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MibName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Loads the MIBs into agent <fo:inline font-family="monospace">snmp_master_agent</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6627776">register_agents(MgrAgentConfName, ManagedAgents) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MgrAgentConfName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ManagedAgents = [agent()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Explicitly instructs the manager to handle this agent. Corresponds
          to making an entry in <fo:inline font-family="monospace">agents.conf</fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function tries to register the specified managed agents, without
          checking if any of them exist. To change a registered managed agent,
          the agent must first be unregistered.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6633504">register_users(MgrAgentConfName, Users) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MgrAgentConfName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Users = [user()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Registers the manager entity (=user) responsible for specific
          agent(s). Corresponds to making an entry in <fo:inline font-family="monospace">users.conf</fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function tries to register the specified users, without checking
          if any of them exist. To change a registered user, the user must
          first be unregistered.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6639216">register_usm_users(MgrAgentConfName, UsmUsers) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MgrAgentConfName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UsmUsers = [usm_user()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Explicitly instructs the manager to handle this USM user.
          Corresponds to making an entry in <fo:inline font-family="monospace">usm.conf</fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function tries to register the specified users, without checking
          if any of them exist. To change a registered user, the user must
          first be unregistered.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6644896">set_info(Config) -&gt; [{Agent, OldVarsAndVals, NewVarsAndVals}]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Config = [{Key, Value}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Agent = agent_name()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OldVarsAndVals = varsandvals()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NewVarsAndVals = varsandvals()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of all successful <fo:inline font-family="monospace">set</fo:inline> requests performed in
          the test case in reverse order. The list contains the involved user
          and agent, the value before <fo:inline font-family="monospace">set</fo:inline>, and the new value. This is
          intended to simplify the cleanup in function <fo:inline font-family="monospace">end_per_testcase</fo:inline>,
          that is, the undoing of the <fo:inline font-family="monospace">set</fo:inline> requests and their possible
          side-effects.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6652000">set_values(Agent, VarsAndVals, MgrAgentConfName, Config) -&gt; SnmpReply</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Agent = agent_name()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Oids = oids()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MgrAgentConfName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Config = [{Key, Value}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SnmpReply = snmpreply()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Issues a synchronous SNMP <fo:inline font-family="monospace">set</fo:inline> request.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6657872">start(Config, MgrAgentConfName) -&gt; ok</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_snmp:start(Config, MgrAgentConfName,
          undefined)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6661488">start(Config, MgrAgentConfName, SnmpAppConfName) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Config = [{Key, Value}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MgrAgentConfName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SnmpConfName = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts an SNMP manager and/or agent. In the manager case,
          registrations of users and agents, as specified by the configuration
          <fo:inline font-family="monospace">MgrAgentConfName</fo:inline>, are performed. When using SNMPv3, called
          USM users are also registered. Users, <fo:inline font-family="monospace">usm_users</fo:inline>, and
          managed agents can also be registered later using
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_snmp:register_users/2</fo:inline></fo:inline>,
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_snmp:register_agents/2</fo:inline></fo:inline>,
          and
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_snmp:register_usm_users/2</fo:inline></fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The agent started is called <fo:inline font-family="monospace">snmp_master_agent</fo:inline>. Use
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_snmp:load_mibs/1</fo:inline></fo:inline>
          to load MIBs into the agent.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">With <fo:inline font-family="monospace">SnmpAppConfName</fo:inline> SNMP applications can be configured
          with parameters <fo:inline font-family="monospace">config</fo:inline>, <fo:inline font-family="monospace">mibs</fo:inline>, <fo:inline font-family="monospace">net_if</fo:inline>, and so on.
          The values are merged with (and possibly override) default values
          set by <fo:inline font-family="monospace">ct_snmp</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6675264">stop(Config) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Config = [{Key, Value}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stops the SNMP manager and/or agent, and removes all files
          created.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6679824">unload_mibs(Mibs) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Mibs = [MibName]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MibName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Unloads the MIBs from agent <fo:inline font-family="monospace">snmp_master_agent</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6684784">unregister_agents(MgrAgentConfName) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MgrAgentConfName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Unregisters all managed agents.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6688848">unregister_agents(MgrAgentConfName, ManagedAgents) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MgrAgentConfName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ManagedAgents = [agent_name()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Unregisters the specified managed agents.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6693424">unregister_users(MgrAgentConfName) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MgrAgentConfName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
     </fo:list-block>
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Unregisters all users.</fo:block>
     </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6697456">unregister_users(MgrAgentConfName, Users) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MgrAgentConfName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Users = [user_name()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Unregisters the specified users.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6701968">unregister_usm_users(MgrAgentConfName) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MgrAgentConfName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Unregisters all USM users.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6706032">unregister_usm_users(MgrAgentConfName, UsmUsers) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MgrAgentConfName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">UsmUsers = [usm_user_name()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Unregisters the specified USM users.</fo:block>
      </fo:block>
  

<fo:block page-break-before="always" id="idp6717872" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">ct_telnet</fo:marker>ct_telnet</fo:block>Erlang module</fo:block>
  <fo:block/>
  ct_telnet
  <fo:block/>

  

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Common Test</fo:inline> specific layer on top of Telnet client
      <fo:inline font-family="monospace">ct_telnet_client.erl</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Use this module to set up Telnet connections, send commands, and
      perform string matching on the result. For information about how to use
      <fo:inline font-family="monospace">ct_telnet</fo:inline> and configure connections, specifically for UNIX hosts,
      see the
      <fo:inline font-style="italic"><fo:inline font-family="monospace">unix_telnet</fo:inline></fo:inline> manual page.
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default values defined in <fo:inline font-family="monospace">ct_telnet</fo:inline>:</fo:block>
    

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Connection timeout (time to wait for connection) = 10
        seconds</fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Command timeout (time to wait for a command to return) =
        10 seconds</fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Max number of reconnection attempts = 3</fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Reconnection interval (time to wait in between
        reconnection attempts) = 5 seconds</fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Keep alive (sends NOP to the server every 8 sec if
        connection is idle) = <fo:inline font-family="monospace">true</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Polling limit (max number of times to poll to get a
        remaining string terminated) = 0</fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Polling interval (sleep time between polls) = 1 second</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The TCP_NODELAY option for the telnet socket
        is disabled (set to <fo:inline font-family="monospace">false</fo:inline>) per default</fo:block></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These parameters can be modified by the user with the following
      configuration term:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 {telnet_settings, [{connect_timeout,Millisec},
                    {command_timeout,Millisec},
                    {reconnection_attempts,N},
                    {reconnection_interval,Millisec},
                    {keep_alive,Bool},
                    {poll_limit,N},
                    {poll_interval,Millisec},
                    {tcp_nodelay,Bool}]}.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Millisec = integer(), N = integer()</fo:inline></fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Enter the <fo:inline font-family="monospace">telnet_settings</fo:inline> term in a configuration file included
      in the test and <fo:inline font-family="monospace">ct_telnet</fo:inline> retrieves the information
      automatically.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">keep_alive</fo:inline> can be specified per connection, if necessary. For
      details, see
      <fo:inline font-style="italic"><fo:inline font-family="monospace">unix_telnet</fo:inline></fo:inline>.</fo:block>

  

  <fo:block id="idp6735840" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Logging</fo:block>
    
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default logging behavior of <fo:inline font-family="monospace">ct_telnet</fo:inline> is to print information
      about performed operations, commands, and their corresponding results to
      the test case HTML log. The following is not printed to the HTML
      log: text strings sent from the Telnet server that are not explicitly
      received by a <fo:inline font-family="monospace">ct_telnet</fo:inline> function, such as <fo:inline font-family="monospace">expect/3</fo:inline>.
      However, <fo:inline font-family="monospace">ct_telnet</fo:inline> can be configured to use a special purpose
      event handler, implemented in <fo:inline font-family="monospace">ct_conn_log_h</fo:inline>, for logging
      <fo:inline font-weight="bold">all</fo:inline> Telnet traffic. To use this handler, install a <fo:inline font-family="monospace">Common
      Test</fo:inline> hook named <fo:inline font-family="monospace">cth_conn_log</fo:inline>. Example (using the test suite
      information function):</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 suite() -&gt;
     [{ct_hooks, [{cth_conn_log, [{conn_mod(),hook_options()}]}]}].</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">conn_mod()</fo:inline> is the name of the <fo:inline font-family="monospace">Common Test</fo:inline> module
      implementing the connection protocol, that is, <fo:inline font-family="monospace">ct_telnet</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">cth_conn_log</fo:inline> hook performs unformatted logging of Telnet
      data to a separate text file. All Telnet communication is captured and
      printed, including any data sent from the server. The link to
      this text file is located at the top of the test case HTML log.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By default, data for all Telnet connections is logged in one common
      file (named <fo:inline font-family="monospace">default</fo:inline>), which can get messy, for example, if
      multiple Telnet sessions are running in parallel. Therefore a separate
      log file can be created for each connection. To configure this, use hook
      option <fo:inline font-family="monospace">hosts</fo:inline> and list the names of the servers/connections
      to be used in the suite. The connections must be named for this to
      work (see
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_telnet:open/1,2,3,4</fo:inline></fo:inline>).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Hook option <fo:inline font-family="monospace">log_type</fo:inline> can be used to change the
      <fo:inline font-family="monospace">cth_conn_log</fo:inline> behavior. The default value of this option is
      <fo:inline font-family="monospace">raw</fo:inline>, which results in the behavior described above. If the value
      is set to <fo:inline font-family="monospace">html</fo:inline>, all Telnet communication is printed to the test
      case HTML log instead.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All <fo:inline font-family="monospace">cth_conn_log</fo:inline> hook options described can also be
      specified in a configuration file with configuration variable
      <fo:inline font-family="monospace">ct_conn_log</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
 
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 {ct_conn_log, [{ct_telnet,[{log_type,raw},
                            {hosts,[key_or_name()]}]}]}</fo:block>

    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Hook options specified in a configuration file overwrite any
        hard-coded hook options in the test suite.</fo:block>
    </fo:block>

    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Logging Example:</fo:inline></fo:block>
 
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following <fo:inline font-family="monospace">ct_hooks</fo:inline> statement causes printing of Telnet
      traffic to separate logs for the connections <fo:inline font-family="monospace">server1</fo:inline> and
      <fo:inline font-family="monospace">server2</fo:inline>. Traffic for any other connections is logged in the
      default Telnet log.</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 suite() -&gt;
     [{ct_hooks,
       [{cth_conn_log, [{ct_telnet,[{hosts,[server1,server2]}]}]}]}].</fo:block>
 
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As previously explained, this specification can also be provided by an
      entry like the following in a configuration file:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 {ct_conn_log, [{ct_telnet,[{hosts,[server1,server2]}]}]}.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this case the <fo:inline font-family="monospace">ct_hooks</fo:inline> statement in the test suite can look
      as follows:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 suite() -&gt;
     [{ct_hooks, [{cth_conn_log, []}]}].</fo:block>
  

  <fo:block id="idp6759664" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Data Types</fo:block>
    
    
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">connection() = handle() | {target_name(), connection_type()} | target_name()</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For <fo:inline font-family="monospace">target_name()</fo:inline>, see module
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct</fo:inline></fo:inline>.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">connection_type() = telnet | ts1 | ts2</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"> </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">handle() = handle()</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Handle for a specific Telnet connection, see module
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct</fo:inline></fo:inline>.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">prompt_regexp() = string()</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Regular expression matching all possible prompts for a specific
          target type. <fo:inline font-family="monospace">regexp</fo:inline> must not have any groups, that is, when
          matching, <fo:inline font-family="monospace">re:run/3</fo:inline> (in STDLIB) must return a list with
          one single element.</fo:block></fo:block></fo:block-container>
    </fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6771760">close(Connection) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Connection = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Closes the Telnet connection and stops the process managing it.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A connection can be associated with a target name and/or a handle.
          If <fo:inline font-family="monospace">Connection</fo:inline> has no associated target name, it can only
          be closed with the handle value (see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_telnet:open/4</fo:inline></fo:inline>).</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6777776">cmd(Connection, Cmd) -&gt; {ok, Data} | {error, Reason}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_telnet:cmd(Connection, Cmd,
          [])</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6781360">cmd(Connection, Cmd, Opts) -&gt; {ok, Data} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Connection = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Cmd = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opts = [Opt]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opt = {timeout, timeout()} | {newline, boolean()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Data = [string()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends a command through Telnet and waits for prompt.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By default, this function adds a new line to the end of the
          specified command. If this is not desired, use option
          <fo:inline font-family="monospace">{newline,false}</fo:inline>. This is necessary, for example, when
          sending Telnet command sequences prefixed with character
          Interprete As Command (IAC).</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Option <fo:inline font-family="monospace">timeout</fo:inline> specifies how long the client must wait
          for prompt. If the time expires, the function returns
          <fo:inline font-family="monospace">{error,timeout}</fo:inline>. For information about the default value
          for the command timeout, see the
          <fo:inline font-style="italic">list of default values</fo:inline>
          in the beginning of this module.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6790704">cmdf(Connection, CmdFormat, Args) -&gt; {ok, Data} | {error, Reason}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_telnet:cmdf(Connection, CmdFormat,
          Args, [])</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6794336">cmdf(Connection, CmdFormat, Args, Opts) -&gt; {ok, Data} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Connection = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CmdFormat = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Args = list()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opts = [Opt]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opt = {timeout, timeout()} | {newline, boolean()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Data = [string()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends a Telnet command and waits for prompt (uses a format string
          and a list of arguments to build the command).</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_telnet:cmd/3</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6802192">expect(Connection, Patterns) -&gt; term()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_telnet:expect(Connections,
          Patterns, [])</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6805776">expect(Connection, Patterns, Opts) -&gt; {ok, Match} | {ok, MatchList, HaltReason} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Connection = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Patterns = Pattern | [Pattern]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Pattern = string() | {Tag, string()} | prompt | {prompt, Prompt}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Prompt = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Tag = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opts = [Opt]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opt = {idle_timeout, IdleTimeout} | {total_timeout, TotalTimeout} | repeat | {repeat, N} | sequence | {halt, HaltPatterns} | ignore_prompt | no_prompt_check | wait_for_prompt | {wait_for_prompt, Prompt}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">IdleTimeout = infinity | integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TotalTimeout = infinity | integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">N = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">HaltPatterns = Patterns</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MatchList = [Match]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Match = RxMatch | {Tag, RxMatch} | {prompt, Prompt}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">RxMatch = [string()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">HaltReason = done | Match</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = timeout | {prompt, Prompt}</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gets data from Telnet and waits for the expected pattern.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Pattern</fo:inline> can be a POSIX regular expression. The function
          returns when a pattern is successfully matched (at least one, in
          the case of multiple patterns).</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">RxMatch</fo:inline> is a list of matched strings. It looks as
          follows <fo:inline font-family="monospace">[FullMatch, SubMatch1, SubMatch2, ...]</fo:inline>, where
          <fo:inline font-family="monospace">FullMatch</fo:inline> is the string matched by the whole regular
          expression, and <fo:inline font-family="monospace">SubMatchN</fo:inline> is the string that matched
          subexpression number <fo:inline font-family="monospace">N</fo:inline>. Subexpressions are denoted with
          <fo:inline font-family="monospace">'(' ')'</fo:inline> in the regular expression.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a <fo:inline font-family="monospace">Tag</fo:inline> is speciifed, the returned <fo:inline font-family="monospace">Match</fo:inline> also
          includes the matched <fo:inline font-family="monospace">Tag</fo:inline>. Otherwise, only <fo:inline font-family="monospace">RxMatch</fo:inline>
          is returned.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Options:</fo:inline></fo:block>

        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">idle_timeout</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Indicates that the function must return if the Telnet
            client is idle (that is, if no data is received) for more than
            <fo:inline font-family="monospace">IdleTimeout</fo:inline> milliseconds. Default time-out is 10
            seconds.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">total_timeout</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets a time limit for the complete <fo:inline font-family="monospace">expect</fo:inline> operation.
            After <fo:inline font-family="monospace">TotalTimeout</fo:inline> milliseconds, <fo:inline font-family="monospace">{error,timeout}</fo:inline>
            is returned. Default is <fo:inline font-family="monospace">infinity</fo:inline> (that is, no time
            limit).</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ignore_prompt | no_prompt_check</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">&gt;The function returns when a prompt is received, even if
            no pattern has yet been matched, and 
            <fo:inline font-family="monospace">{error,{prompt,Prompt}}</fo:inline> is returned. However, this
            behavior can be modified with option <fo:inline font-family="monospace">ignore_prompt</fo:inline> or
            option <fo:inline font-family="monospace">no_prompt_check</fo:inline>, which tells <fo:inline font-family="monospace">expect</fo:inline> to
            return only when a match is found or after a time-out.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ignore_prompt</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ct_telnet</fo:inline> ignores any prompt found. This option is
            useful if data sent by the server can include a pattern
            matching prompt <fo:inline font-family="monospace">regexp</fo:inline> (as returned by
            <fo:inline font-family="monospace">TargedMod:get_prompt_regexp/0</fo:inline>), but is not to not cause
            the function to return.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">no_prompt_check</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ct_telnet</fo:inline> does not search for a prompt at all. This
            is useful if, for example, <fo:inline font-family="monospace">Pattern</fo:inline> itself matches the
            prompt.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">wait_for_prompt</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Forces <fo:inline font-family="monospace">ct_telnet</fo:inline> to wait until the prompt string
            is received before returning (even if a pattern has already been
            matched). This is equal to calling
            <fo:inline font-family="monospace">expect(Conn, Patterns++[{prompt,Prompt}], [sequence|Opts])</fo:inline>.
            Notice that option <fo:inline font-family="monospace">idle_timeout</fo:inline> and <fo:inline font-family="monospace">total_timeout</fo:inline>
            can abort the operation of waiting for prompt.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">repeat | repeat, N</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The pattern(s) must be matched multiple times. If <fo:inline font-family="monospace">N</fo:inline>
            is speciified, the pattern(s) are matched <fo:inline font-family="monospace">N</fo:inline> times, and
            the function returns <fo:inline font-family="monospace">HaltReason = done</fo:inline>. This option can be
            interrupted by one or more <fo:inline font-family="monospace">HaltPatterns</fo:inline>. <fo:inline font-family="monospace">MatchList</fo:inline>
            is always returned, that is, a list of <fo:inline font-family="monospace">Match</fo:inline> instead of
            only one <fo:inline font-family="monospace">Match</fo:inline>. Also <fo:inline font-family="monospace">HaltReason</fo:inline> is returned.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sequence</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All patterns must be matched in a sequence. A match is not
            concluded until all patterns are matched. This option can be
            interrupted by one or more <fo:inline font-family="monospace">HaltPatterns</fo:inline>. <fo:inline font-family="monospace">MatchList</fo:inline>
            is always returned, that is, a list of <fo:inline font-family="monospace">Match</fo:inline> instead of
            only one <fo:inline font-family="monospace">Match</fo:inline>. Also <fo:inline font-family="monospace">HaltReason</fo:inline> is returned.</fo:block> 
          </fo:block></fo:block-container>
        </fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example 1:</fo:inline></fo:block>

        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 expect(Connection,[{abc,"ABC"},{xyz,"XYZ"}],[sequence,{halt,[{nnn,"NNN"}]}])</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">First this tries to match <fo:inline font-family="monospace">"ABC"</fo:inline>, and then <fo:inline font-family="monospace">"XYZ"</fo:inline>, but
          if <fo:inline font-family="monospace">"NNN"</fo:inline> appears,  the function returns
          <fo:inline font-family="monospace">{error,{nnn,["NNN"]}}</fo:inline>. If both <fo:inline font-family="monospace">"ABC"</fo:inline> and <fo:inline font-family="monospace">"XYZ"</fo:inline>
          are matched, the function returns <fo:inline font-family="monospace">{ok,[AbcMatch,XyzMatch]}</fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example 2:</fo:inline></fo:block>

        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 expect(Connection,[{abc,"ABC"},{xyz,"XYZ"}],[{repeat,2},{halt,[{nnn,"NNN"}]}])</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This tries to match <fo:inline font-family="monospace">"ABC"</fo:inline> or <fo:inline font-family="monospace">"XYZ"</fo:inline> twice. If
          <fo:inline font-family="monospace">"NNN"</fo:inline> appears, the function returns
          <fo:inline font-family="monospace">HaltReason = {nnn,["NNN"]}</fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Options <fo:inline font-family="monospace">repeat</fo:inline> and <fo:inline font-family="monospace">sequence</fo:inline> can be combined to
          match a sequence multiple times.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6858000">get_data(Connection) -&gt; {ok, Data} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Connection = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Data = [string()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gets all data received by the Telnet client since the last
          command was sent. Only newline-terminated strings are returned.
          If the last received string has not yet been terminated, the
          connection can be polled automatically until the string is
          complete.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The polling feature is controlled by the configuration values
          <fo:inline font-family="monospace">poll_limit</fo:inline> and <fo:inline font-family="monospace">poll_interval</fo:inline> and is by default
          disabled. This means that the function immediately returns all
          complete strings received and saves a remaining non-terminated
          string for a later <fo:inline font-family="monospace">get_data</fo:inline> call.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6864848">open(Name) -&gt; {ok, Handle} | {error, Reason}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_telnet:open(Name,
          telnet)</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6868416">open(Name, ConnType) -&gt; {ok, Handle} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = target_name()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConnType = connection_type()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Handle = handle()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Opens a Telnet connection to the specified target host.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6873424">open(KeyOrName, ConnType, TargetMod) -&gt; {ok, Handle} | {error, Reason}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_telnet:ct_telnet:open(KeyOrName,
          ConnType, TargetMod, [])</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6877056">open(KeyOrName, ConnType, TargetMod, Extra) -&gt; {ok, Handle} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">KeyOrName = Key | Name</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = target_name()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConnType = connection_type()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TargetMod = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Extra = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Handle = handle()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Opens a Telnet connection to the specified target host.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The target data must exist in a configuration file. The connection
          can be associated with <fo:inline font-family="monospace">Name</fo:inline> and/or the returned <fo:inline font-family="monospace">Handle</fo:inline>.
          To allocate a name for the target, use one of the following
          alternatives:</fo:block>

        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic"><fo:inline font-family="monospace">ct:require/2</fo:inline></fo:inline>
             in a test case</fo:block></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-family="monospace">require</fo:inline> statement in the suite information
            function (<fo:inline font-family="monospace">suite/0</fo:inline>)</fo:block></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-family="monospace">require</fo:inline> statement in a test case information
            function</fo:block></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you want the connection to be associated with <fo:inline font-family="monospace">Handle</fo:inline> only
          (if you, for example, need to open multiple connections to a host),
          use <fo:inline font-family="monospace">Key</fo:inline>, the configuration variable name, to specify the
          target. Notice that a connection without an associated target name
          can only be closed with the <fo:inline font-family="monospace">Handle</fo:inline> value.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">TargetMod</fo:inline> is a module that exports the functions
          <fo:inline font-family="monospace">connect(Ip, Port, KeepAlive, Extra)</fo:inline> and
          <fo:inline font-family="monospace">get_prompt_regexp()</fo:inline> for the specified <fo:inline font-family="monospace">TargetType</fo:inline>
          (for example, <fo:inline font-family="monospace">unix_telnet</fo:inline>).</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For <fo:inline font-family="monospace">target_name()</fo:inline>, see module
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct</fo:inline></fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct:require/2</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6897664">send(Connection, Cmd) -&gt; ok | {error, Reason}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_telnet:send(Connection, Cmd,
          [])</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6901264">send(Connection, Cmd, Opts) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Connection = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Cmd = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opts = [Opt]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opt = {newline, boolean()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends a Telnet command and returns immediately.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By default, this function adds a newline to the end of the
          specified command. If this is not desired, option
          <fo:inline font-family="monospace">{newline,false}</fo:inline> can be used. This is necessary, for example,
          when sending Telnet command sequences prefixed with character   
          Interprete As Command (IAC).</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The resulting output from the command can be read with
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_telnet:get_data/2</fo:inline></fo:inline> or
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_telnet:expect/2,3</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6910064">sendf(Connection, CmdFormat, Args) -&gt; ok | {error, Reason}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_telnet:sendf(Connection, CmdFormat,
          Args, [])</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6913696">sendf(Connection, CmdFormat, Args, Opts) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Connection = connection()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CmdFormat = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Args = list()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opts = [Opt]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opt = {newline, boolean()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends a Telnet command and returns immediately (uses a format
          string and a list of arguments to build the command).</fo:block>
      </fo:block>
  

  <fo:block id="idp6919936" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">See Also</fo:block>
    
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic"><fo:inline font-family="monospace">unix_telnet</fo:inline></fo:inline></fo:block>
  

<fo:block page-break-before="always" id="idp6928960" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">unix_telnet</fo:marker>unix_telnet</fo:block>Erlang module</fo:block>
  <fo:block/>
  unix_telnet
  <fo:block/>

  

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Callback module for
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_telnet</fo:inline></fo:inline>,
      for connecting to a Telnet server on a UNIX host.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It requires the following entry in the configuration file:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 {unix,[{telnet,HostNameOrIpAddress},
        {port,PortNum},                 % optional
        {username,UserName},
        {password,Password},
        {keep_alive,Bool}]}.            % optional</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To communicate through Telnet to the host specified by
      <fo:inline font-family="monospace">HostNameOrIpAddress</fo:inline>, use the interface functions in
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_telnet</fo:inline></fo:inline>, for example,
      <fo:inline font-family="monospace">open(Name)</fo:inline> and <fo:inline font-family="monospace">cmd(Name,Cmd)</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Name</fo:inline> is the name you allocated to the Unix host in your
      <fo:inline font-family="monospace">require</fo:inline> statement, for example:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 suite() -&gt; [{require,Name,{unix,[telnet]}}].</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">or</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 ct:require(Name,{unix,[telnet]}).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The "keep alive" activity (that is, that <fo:inline font-family="monospace">Common Test</fo:inline> sends NOP
      to the server every 10 seconds if the connection is idle) can be
      enabled or disabled for one particular connection as described here.
      It can be disabled for all connections using <fo:inline font-family="monospace">telnet_settings</fo:inline>
      (see <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_telnet</fo:inline></fo:inline>).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">{port,PortNum}</fo:inline> tuple is optional and if omitted, default 
      Telnet port 23 is used. Also the <fo:inline font-family="monospace">keep_alive</fo:inline> tuple is optional,
      and the value defauls to <fo:inline font-family="monospace">true</fo:inline> (enabled).</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6943072">connect(ConnName, Ip, Port, Timeout, KeepAlive, TCPNoDelay, Extra) -&gt; {ok, Handle} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConnName = target_name()</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Ip = string() | {integer(), integer(), integer(), integer()}</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Port = integer()</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = integer()</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">KeepAlive = bool()</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TCPNoDelay = bool()</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Extra = target_name() | {Username, Password}</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Username = string()</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Password = string()</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Handle = handle()</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Callback for <fo:inline font-family="monospace">ct_telnet.erl</fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Setup Telnet connection to a Unix host.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For <fo:inline font-family="monospace">target_name()</fo:inline>, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct</fo:inline></fo:inline>. For <fo:inline font-family="monospace">handle()</fo:inline>, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_telnet</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6955232">get_prompt_regexp() -&gt; PromptRegexp</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PromptRegexp = prompt_regexp()</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Callback for <fo:inline font-family="monospace">ct_telnet.erl</fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a suitable <fo:inline font-family="monospace">regexp</fo:inline> string matching common prompts
          for users on Unix hosts.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For <fo:inline font-family="monospace">prompt_regexp()</fo:inline>, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_telnet</fo:inline></fo:inline>.</fo:block>
      </fo:block>
   

  <fo:block id="idp6962112" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">See Also</fo:block>
    
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic"><fo:inline font-family="monospace">ct</fo:inline></fo:inline>,
        <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_telnet</fo:inline></fo:inline></fo:block>
  

<fo:block page-break-before="always" id="idp6971984" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">ct_slave</fo:marker>ct_slave</fo:block>Erlang module</fo:block>
  <fo:block/>
  ct_slave
  <fo:block/>

  

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Common Test</fo:inline> framework functions for starting and stopping nodes
      for Large-Scale Testing.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module exports functions used by the <fo:inline font-family="monospace">Common Test</fo:inline>
      Master to start and stop "slave" nodes. It is the default callback
      module for the <fo:inline font-family="monospace">{init, node_start}</fo:inline> term in the Test
      Specification.</fo:block>

  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6976256">start(Node) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Node = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = {ok, NodeName} | {error, Reason, NodeName}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = already_started | started_not_connected | boot_timeout | init_timeout | startup_timeout | not_alive</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NodeName = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts an Erlang node with name <fo:inline font-family="monospace">Node</fo:inline> on the local host.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_slave:start/3</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6983072">start(HostOrNode, NodeOrOpts) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">HostOrNode = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NodeOrOpts = atom() | list()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = {ok, NodeName} | {error, Reason, NodeName}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = already_started | started_not_connected | boot_timeout | init_timeout | startup_timeout | not_alive</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NodeName = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts an Erlang node with default options on a specified host, or
          on the local host with specified options. That is, the call is
          interpreted as <fo:inline font-family="monospace">start(Host, Node)</fo:inline> when the second argument is
          atom-valued and <fo:inline font-family="monospace">start(Node, Opts)</fo:inline> when it is list-valued.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_slave:start/3</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp6991040">start(Host, Node, Opts) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Node = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Host = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opts = [OptTuples]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OptTuples = {username, Username} | {password, Password} | {boot_timeout, BootTimeout} | {init_timeout, InitTimeout} | {startup_timeout, StartupTimeout} | {startup_functions, StartupFunctions} | {monitor_master, Monitor} | {kill_if_fail, KillIfFail} | {erl_flags, ErlangFlags} | {env, [{EnvVar, Value}]}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Username = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Password = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">BootTimeout = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">InitTimeout = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">StartupTimeout = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">StartupFunctions = [StartupFunctionSpec]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">StartupFunctionSpec = {Module, Function, Arguments}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Function = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Arguments = [term]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Monitor = bool()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">KillIfFail = bool()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ErlangFlags = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EnvVar = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = {ok, NodeName} | {error, Reason, NodeName}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = already_started | started_not_connected | boot_timeout | init_timeout | startup_timeout | not_alive</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NodeName = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts an Erlang node with name <fo:inline font-family="monospace">Node</fo:inline> on host <fo:inline font-family="monospace">Host</fo:inline> as
          specified by the combination of options in <fo:inline font-family="monospace">Opts</fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Options <fo:inline font-family="monospace">Username</fo:inline> and <fo:inline font-family="monospace">Password</fo:inline> are used to log on to the
          remote host <fo:inline font-family="monospace">Host</fo:inline>. <fo:inline font-family="monospace">Username</fo:inline>, if omitted, defaults to
          the current username. <fo:inline font-family="monospace">Password</fo:inline> is empty by default.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A list of functions specified in option <fo:inline font-family="monospace">Startup</fo:inline> are
          executed after startup of the node. Notice that all used modules
          are to be present in the code path on <fo:inline font-family="monospace">Host</fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The time-outs are applied as follows:</fo:block>

        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">BootTimeout</fo:inline></fo:block>
            <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The time to start the Erlang node, in seconds. Defaults to
              3 seconds. If the node is not pingable within this time, the result
              <fo:inline font-family="monospace">{error, boot_timeout, NodeName}</fo:inline> is returned.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">InitTimeout</fo:inline></fo:block>
            <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The time to wait for the node until it calls the internal
             callback function informing master about a successful startup.
             Defaults to 1 second. In case of a timed out message, the result
             <fo:inline font-family="monospace">{error, init_timeout, NodeName}</fo:inline> is returned.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">StartupTimeout</fo:inline></fo:block>
            <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The time to wait until the node stops to run
              <fo:inline font-family="monospace">StartupFunctions</fo:inline>. Defaults to 1 second. If this time-out
              occurs, the result <fo:inline font-family="monospace">{error, startup_timeout, NodeName}</fo:inline> is
              returned.</fo:block></fo:block></fo:block-container>
        </fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Options:</fo:inline></fo:block>

        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">monitor_master</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies if the slave node is to be stopped if the
            master node stops. Defaults to <fo:inline font-family="monospace">false</fo:inline>.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">kill_if_fail</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies if the slave node is to be killed if a time-out
            occurs during initialization or startup. Defaults to <fo:inline font-family="monospace">true</fo:inline>.
            Notice that the node can also be still alive it the boot time-out
            occurred, but it is not killed in this case.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">erlang_flags</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies which flags are added to the parameters of the
            executable <fo:inline font-family="monospace">erl</fo:inline>.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">env</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies a list of environment variables that will extend
            the environment.</fo:block></fo:block></fo:block-container>
        </fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Special return values:</fo:inline></fo:block>

        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{error, already_started, NodeName}</fo:inline> if the node
            with the specified name is already started on a specified
            host.</fo:block></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{error, started_not_connected, NodeName}</fo:inline> if the
            node is started, but not connected to the master node.</fo:block></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{error, not_alive, NodeName}</fo:inline> if the node on which
            <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_slave:start/3</fo:inline></fo:inline> is
            called, is not alive. Notice that <fo:inline font-family="monospace">NodeName</fo:inline> is the name of
            the current node in this case.</fo:block></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7029856">stop(Node) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Node = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = {ok, NodeName} | {error, Reason, NodeName}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = not_started | not_connected | stop_timeout</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stops the running Erlang node with name <fo:inline font-family="monospace">Node</fo:inline> on the local
          host.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7034896">stop(Host, Node) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Host = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Node = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = {ok, NodeName} | {error, Reason, NodeName}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = not_started | not_connected | stop_timeout</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NodeName = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stops the running Erlang node with name <fo:inline font-family="monospace">Node</fo:inline> on host
          <fo:inline font-family="monospace">Host</fo:inline>.</fo:block>
      </fo:block>
  

<fo:block page-break-before="always" id="idp7049072" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">ct_hooks</fo:marker>ct_hooks</fo:block>Erlang module</fo:block>
  <fo:block/>
  ct_hooks 
  <fo:block/>

  

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-weight="bold">Common Test Hook (CTH)</fo:inline> framework allows extensions of the
      default behavior of <fo:inline font-family="monospace">Common Test</fo:inline> by callbacks before and after all
      test suite calls. It is intended for advanced users of <fo:inline font-family="monospace">Common Test</fo:inline>
      who want to abstract out behavior that is common to multiple test suites.
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In brief, CTH allows you to:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Manipulate the runtime configuration before each suite
        configuration call.</fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Manipulate the return of all suite configuration calls and by
        extension the result of the test themselves.</fo:block></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following sections describe the mandatory and optional CTH
      functions that <fo:inline font-family="monospace">Common Test</fo:inline> calls during test execution.
      For more details, see section
      <fo:inline font-style="italic">Common Test Hooks</fo:inline> in the
      User's Guide.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information about how to add a CTH to your suite, see section
      <fo:inline font-style="italic">Installing a CTH</fo:inline>
      in the User's Guide.</fo:block>

    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For a minimal example of a CTH, see section
      <fo:inline font-style="italic">Example CTH</fo:inline>
      in the User's Guide.</fo:block></fo:block>

  

  <fo:block id="idp7059600" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Callback Functions</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following functions define the callback interface for a CTH.</fo:block>
  
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7061280">Module:init(Id, Opts) -&gt; {ok, State} | {ok, State, Priority}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Id = reference() | term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opts = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">State = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Priority = integer()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>	
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">MANDATORY</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is always called before any other callback function.
          Use it to initiate any common state. It is to return a state for
          this CTH.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Id</fo:inline> is either the return value of
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_hooks:id/1</fo:inline></fo:inline>,
          or a <fo:inline font-family="monospace">reference</fo:inline> (created using
          <fo:inline font-style="italic">erlang:make_ref/0</fo:inline>
          in ERTS) if
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ct_hooks:id/1</fo:inline></fo:inline>
          is not implemented.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Priority</fo:inline> is the relative priority of this hook. Hooks with a
          lower priority are executed first. If no priority is specified, it 
          is set to <fo:inline font-family="monospace">0</fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details about when <fo:inline font-family="monospace">init</fo:inline> is called, see section
          <fo:inline font-style="italic">CTH Scope</fo:inline>
          in the User's Guide.</fo:block>    
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7073072">Module:pre_init_per_suite(SuiteName, InitData, CTHState) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SuiteName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">InitData = Config | SkipOrFail</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Config = NewConfig = [{Key,Value}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CTHState = NewCTHState = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = {Return, NewCTHState}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Return = NewConfig | SkipOrFail</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SkipOrFail = {fail, Reason} | {skip, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>	
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">OPTIONAL</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is called before
          <fo:inline font-style="italic"><fo:inline font-family="monospace">init_per_suite</fo:inline></fo:inline>
          if it exists. It typically contains initialization/logging that must
          be done before <fo:inline font-family="monospace">init_per_suite</fo:inline> is called. If
          <fo:inline font-family="monospace">{skip,Reason}</fo:inline> or <fo:inline font-family="monospace">{fail,Reason}</fo:inline> is returned,
          <fo:inline font-family="monospace">init_per_suite</fo:inline> and all test cases of the suite are skipped
          and <fo:inline font-family="monospace">Reason</fo:inline> printed in the overview log of the suite.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">SuiteName</fo:inline> is the name of the suite to be run.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">InitData</fo:inline> is the original configuration list of the test
          suite, or a <fo:inline font-family="monospace">SkipOrFail</fo:inline> tuple if a previous CTH has returned
          this.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">CTHState</fo:inline> is the current internal state of the CTH.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Return</fo:inline> is the result of the <fo:inline font-family="monospace">init_per_suite</fo:inline> function.
          If it is <fo:inline font-family="monospace">{skip,Reason}</fo:inline> or <fo:inline font-family="monospace">{fail,Reason}</fo:inline>, 
          <fo:inline font-style="italic"><fo:inline font-family="monospace">init_per_suite</fo:inline></fo:inline>
          is never called, instead the initiation is considered to be
          skipped or failed, respectively. If a <fo:inline font-family="monospace">NewConfig</fo:inline> list is
          returned,
          <fo:inline font-style="italic"><fo:inline font-family="monospace">init_per_suite</fo:inline></fo:inline>
          is called with that <fo:inline font-family="monospace">NewConfig</fo:inline> list. For more details, see
          section <fo:inline font-style="italic">Pre Hooks</fo:inline>
          in the User's Guide.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is called only if the CTH is added before
          <fo:inline font-family="monospace">init_per_suite is run</fo:inline>. For details, see section
          <fo:inline font-style="italic">CTH Scope</fo:inline>
          in the User's Guide.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7094304">Module:post_init_per_suite(SuiteName, Config, Return, CTHState) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SuiteName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Config = [{Key,Value}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Return = NewReturn = Config | SkipOrFail | term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SkipOrFail = {fail, Reason} | {skip, Reason} | term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CTHState = NewCTHState = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = {NewReturn, NewCTHState}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>	
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">OPTIONAL</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is called after
          <fo:inline font-style="italic"><fo:inline font-family="monospace">init_per_suite</fo:inline></fo:inline>
          if it exists. It typically contains extra checks to ensure that all
          the correct dependencies are started correctly.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Return</fo:inline> is what
          <fo:inline font-style="italic"><fo:inline font-family="monospace">init_per_suite</fo:inline></fo:inline>
          returned, that is, <fo:inline font-family="monospace">{fail,Reason}</fo:inline>, <fo:inline font-family="monospace">{skip,Reason}</fo:inline>, a
          <fo:inline font-family="monospace">Config</fo:inline> list, or a term describing how
          <fo:inline font-style="italic"><fo:inline font-family="monospace">init_per_suite</fo:inline></fo:inline>
          failed.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">NewReturn</fo:inline> is the possibly modified return value of
          <fo:inline font-style="italic"><fo:inline font-family="monospace">init_per_suite</fo:inline></fo:inline>.
          To recover from a failure in
          <fo:inline font-style="italic"><fo:inline font-family="monospace">init_per_suite</fo:inline></fo:inline>,
          return <fo:inline font-family="monospace">ConfigList</fo:inline> with the <fo:inline font-family="monospace">tc_status</fo:inline> element removed.
          For more details, see
          <fo:inline font-style="italic"> Post Hooks</fo:inline> in
          section "Manipulating Tests" in the User's Guide.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">CTHState</fo:inline> is the current internal state of the CTH.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is called only if the CTH is added before or in
          <fo:inline font-family="monospace">init_per_suite</fo:inline>. For details, see section
          <fo:inline font-style="italic">CTH Scope</fo:inline>
          in the User's Guide.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7113248">Module:pre_init_per_group(SuiteName, GroupName, InitData, CTHState) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SuiteName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">GroupName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">InitData = Config | SkipOrFail</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Config = NewConfig = [{Key,Value}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CTHState = NewCTHState = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = {NewConfig | SkipOrFail, NewCTHState}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SkipOrFail = {fail,Reason} | {skip, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>	
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">OPTIONAL</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is called before
          <fo:inline font-style="italic"><fo:inline font-family="monospace">init_per_group</fo:inline></fo:inline>
          if it exists. It behaves the same way as
          <fo:inline font-style="italic"><fo:inline font-family="monospace">pre_init_per_suite</fo:inline></fo:inline>,
          but for function
          <fo:inline font-style="italic"><fo:inline font-family="monospace">init_per_group</fo:inline></fo:inline>
          instead.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Module:pre_init_per_group/4</fo:inline> is not exported, common_test
	  will attempt to call <fo:inline font-family="monospace">Module:pre_init_per_group(GroupName,
	  InitData, CTHState)</fo:inline> instead. This is for backwards
	  compatibility.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7125216">Module:post_init_per_group(SuiteName, GroupName, Config, Return, CTHState) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SuiteName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">GroupName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Config = [{Key,Value}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Return = NewReturn = Config | SkipOrFail | term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SkipOrFail = {fail,Reason} | {skip, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CTHState = NewCTHState = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = {NewReturn, NewCTHState}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>	
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">OPTIONAL</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is called after
          <fo:inline font-style="italic"><fo:inline font-family="monospace">init_per_group</fo:inline></fo:inline>
          if it exists. It behaves the same way as
          <fo:inline font-style="italic"><fo:inline font-family="monospace">post_init_per_suite</fo:inline></fo:inline>,
          but for function
          <fo:inline font-style="italic"><fo:inline font-family="monospace">init_per_group</fo:inline></fo:inline>
          instead.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Module:post_init_per_group/5</fo:inline> is not exported, common_test
	  will attempt to call <fo:inline font-family="monospace">Module:post_init_per_group(GroupName,
	  Config, Return, CTHState)</fo:inline> instead. This is for backwards
	  compatibility.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7137168">Module:pre_init_per_testcase(SuiteName, TestcaseName, InitData, CTHState) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SuiteName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TestcaseName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">InitData = Config | SkipOrFail</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Config = NewConfig = [{Key,Value}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CTHState = NewCTHState = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = {NewConfig | SkipOrFail, NewCTHState}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SkipOrFail = {fail,Reason} | {skip, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>	
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">OPTIONAL</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is called before
          <fo:inline font-style="italic"><fo:inline font-family="monospace">init_per_testcase</fo:inline></fo:inline>
          if it exists. It behaves the same way as
          <fo:inline font-style="italic"><fo:inline font-family="monospace">pre_init_per_suite</fo:inline></fo:inline>,
          but for function
          <fo:inline font-style="italic"><fo:inline font-family="monospace">init_per_testcase</fo:inline></fo:inline>
          instead.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Module:pre_init_per_testcase/4</fo:inline> is not exported, common_test
	  will attempt to call <fo:inline font-family="monospace">Module:pre_init_per_testcase(TestcaseName,
	  InitData, CTHState)</fo:inline> instead. This is for backwards
	  compatibility.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">CTHs cannot be added here right now. That feature may be added in
          a later release, but it would right now break backwards
          compatibility.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7149728">Module:post_init_per_testcase(SuiteName, TestcaseName, Config, Return, CTHState) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SuiteName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TestcaseName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Config = [{Key,Value}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Return = NewReturn = Config | SkipOrFail | term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SkipOrFail = {fail,Reason} | {skip, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CTHState = NewCTHState = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = {NewReturn, NewCTHState}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>	
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">OPTIONAL</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is called after
          <fo:inline font-style="italic"><fo:inline font-family="monospace">init_per_testcase</fo:inline></fo:inline>
          if it exists. It behaves the same way as
          <fo:inline font-style="italic"><fo:inline font-family="monospace">post_init_per_suite</fo:inline></fo:inline>,
          but for function
          <fo:inline font-style="italic"><fo:inline font-family="monospace">init_per_testcase</fo:inline></fo:inline>
          instead.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Module:post_init_per_testcase/5</fo:inline> is not exported, common_test
	  will attempt to call <fo:inline font-family="monospace">Module:post_init_per_testcase(TestcaseName,
	  Config, Return, CTHState)</fo:inline> instead. This is for backwards
	  compatibility.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7161712">Module:pre_end_per_testcase(SuiteName, TestcaseName, EndData, CTHState) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SuiteName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TestcaseName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EndData = Config</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Config = NewConfig = [{Key,Value}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CTHState = NewCTHState = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = {NewConfig, NewCTHState}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>	
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">OPTIONAL</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is called before
          <fo:inline font-style="italic"><fo:inline font-family="monospace">end_per_testcase</fo:inline></fo:inline>
          if it exists. It behaves the same way as
          <fo:inline font-style="italic"><fo:inline font-family="monospace">pre_end_per_suite</fo:inline></fo:inline>,
          but for function
          <fo:inline font-style="italic"><fo:inline font-family="monospace">end_per_testcase</fo:inline></fo:inline>
          instead.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function can not change the result of the test case by returning skip or fail
	tuples, but it may insert items in <fo:inline font-family="monospace">Config</fo:inline> that can be read in
	<fo:inline font-family="monospace">end_per_testcase/2</fo:inline> or in <fo:inline font-family="monospace">post_end_per_testcase/5</fo:inline>.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Module:pre_end_per_testcase/4</fo:inline> is not exported, common_test
	  will attempt to call <fo:inline font-family="monospace">Module:pre_end_per_testcase(TestcaseName,
	  EndData, CTHState)</fo:inline> instead. This is for backwards
	  compatibility.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7175056">Module:post_end_per_testcase(SuiteName, TestcaseName, Config, Return, CTHState) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SuiteName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TestcaseName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Config = [{Key,Value}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Return = NewReturn = Config | SkipOrFail | term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SkipOrFail = {fail,Reason} | {skip, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CTHState = NewCTHState = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = {NewReturn, NewCTHState}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>	
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">OPTIONAL</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is called after
          <fo:inline font-style="italic"><fo:inline font-family="monospace">end_per_testcase</fo:inline></fo:inline>
          if it exists. It behaves the same way as
          <fo:inline font-style="italic"><fo:inline font-family="monospace">post_end_per_suite</fo:inline></fo:inline>,
          but for function
          <fo:inline font-style="italic"><fo:inline font-family="monospace">end_per_testcase</fo:inline></fo:inline>
          instead.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Module:post_end_per_testcase/5</fo:inline> is not exported, common_test
	  will attempt to call <fo:inline font-family="monospace">Module:post_end_per_testcase(TestcaseName,
	  Config, Return, CTHState)</fo:inline> instead. This is for backwards
	  compatibility.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7187024">Module:pre_end_per_group(SuiteName, GroupName, EndData, CTHState) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SuiteName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">GroupName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EndData = Config | SkipOrFail</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Config = NewConfig = [{Key,Value}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CTHState = NewCTHState = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = {NewConfig | SkipOrFail, NewCTHState}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SkipOrFail = {fail,Reason} | {skip, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>	
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">OPTIONAL</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is called before
          <fo:inline font-style="italic"><fo:inline font-family="monospace">end_per_group</fo:inline></fo:inline>
          if it exists. It behaves the same way as
          <fo:inline font-style="italic"><fo:inline font-family="monospace">pre_init_per_suite</fo:inline></fo:inline>,
          but for function
          <fo:inline font-style="italic"><fo:inline font-family="monospace">end_per_group</fo:inline></fo:inline>
          instead.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Module:pre_end_per_group/4</fo:inline> is not exported, common_test
	  will attempt to call <fo:inline font-family="monospace">Module:pre_end_per_group(GroupName,
	  EndData, CTHState)</fo:inline> instead. This is for backwards
	  compatibility.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7198992">Module:post_end_per_group(SuiteName, GroupName, Config, Return, CTHState) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SuiteName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">GroupName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Config = [{Key,Value}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Return = NewReturn = Config | SkipOrFail | term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SkipOrFail = {fail,Reason} | {skip, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CTHState = NewCTHState = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = {NewReturn, NewCTHState}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>	
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">OPTIONAL</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is called after
          <fo:inline font-style="italic"><fo:inline font-family="monospace">end_per_group</fo:inline></fo:inline>
          if it exists. It behaves the same way as
          <fo:inline font-style="italic"><fo:inline font-family="monospace">post_init_per_suite</fo:inline></fo:inline>,
          but for function
          <fo:inline font-style="italic">end_per_group</fo:inline>
          instead.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Module:post_end_per_group/5</fo:inline> is not exported, common_test
	  will attempt to call <fo:inline font-family="monospace">Module:post_end_per_group(GroupName,
	  Config, Return, CTHState)</fo:inline> instead. This is for backwards
	  compatibility.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7210816">Module:pre_end_per_suite(SuiteName, EndData, CTHState) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SuiteName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EndData = Config | SkipOrFail</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Config = NewConfig = [{Key,Value}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CTHState = NewCTHState = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = {NewConfig | SkipOrFail, NewCTHState}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SkipOrFail = {fail,Reason} | {skip, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>	
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">OPTIONAL</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is called before
          <fo:inline font-style="italic"><fo:inline font-family="monospace">end_per_suite</fo:inline></fo:inline>
          if it exists. It behaves the same way as
          <fo:inline font-style="italic"><fo:inline font-family="monospace">pre_init_per_suite</fo:inline></fo:inline>,
          but for function
          <fo:inline font-style="italic"><fo:inline font-family="monospace">end_per_suite</fo:inline></fo:inline>
          instead.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7220848">Module:post_end_per_suite(SuiteName, Config, Return, CTHState) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SuiteName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Config = [{Key,Value}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Return = NewReturn = Config | SkipOrFail | term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SkipOrFail = {fail,Reason} | {skip, Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CTHState = NewCTHState = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = {NewReturn, NewCTHState}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>	
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">OPTIONAL</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is called after
          <fo:inline font-style="italic"><fo:inline font-family="monospace">end_per_suite</fo:inline></fo:inline>
          if it exists. It behaves the same way as
          <fo:inline font-style="italic"><fo:inline font-family="monospace">post_init_per_suite</fo:inline></fo:inline>,
          but for function
          <fo:inline font-style="italic"><fo:inline font-family="monospace">end_per_suite</fo:inline></fo:inline>
          instead.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7230880">Module:on_tc_fail(SuiteName, TestName, Reason, CTHState) -&gt; NewCTHState</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SuiteName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TestName = init_per_suite | end_per_suite | {init_per_group,GroupName} | {end_per_group,GroupName} | {FuncName,GroupName} | FuncName</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FuncName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">GroupName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CTHState = NewCTHState = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>	
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">OPTIONAL</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is called whenever a test case (or configuration
          function) fails. It is called after the post function is called
          for the failed test case, that is:</fo:block>

        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">init_per_suite</fo:inline> fails, this function is called after
            <fo:inline font-style="italic"><fo:inline font-family="monospace">post_init_per_suite</fo:inline></fo:inline>.</fo:block></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a test case fails, this funcion is called after
          <fo:inline font-style="italic"><fo:inline font-family="monospace">post_end_per_testcase</fo:inline></fo:inline>.</fo:block></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>

         <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the failed test case belongs to a test case group, the first
          argument is a tuple <fo:inline font-family="monospace">{FuncName,GroupName}</fo:inline>, otherwise only
          the function name.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The data that comes with <fo:inline font-family="monospace">Reason</fo:inline> follows the same format as
          <fo:inline font-style="italic"><fo:inline font-family="monospace">FailReason</fo:inline></fo:inline>
          in event
          <fo:inline font-style="italic"><fo:inline font-family="monospace">tc_done</fo:inline></fo:inline>.
          For details, see section
          <fo:inline font-style="italic">Event Handling</fo:inline>
          in the User's Guide.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Module:on_tc_fail/4</fo:inline> is not exported, common_test
	  will attempt to call <fo:inline font-family="monospace">Module:on_tc_fail(TestName, Reason,
	  CTHState)</fo:inline> instead. This is for backwards
	  compatibility.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7247088">Module:on_tc_skip(SuiteName, TestName, Reason, CTHState) -&gt; NewCTHState</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SuiteName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TestName = init_per_suite | end_per_suite | {init_per_group,GroupName} | {end_per_group,GroupName} | {FuncName,GroupName} | FuncName</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FuncName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">GroupName = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = {tc_auto_skip | tc_user_skip, term()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CTHState = NewCTHState = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>	
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">OPTIONAL</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is called whenever a test case (or configuration
          function) is skipped. It is called after the post function is called
          for the skipped test case, that is:</fo:block>

        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">init_per_group</fo:inline> is skipped, this function is
            called after 
            <fo:inline font-style="italic"><fo:inline font-family="monospace">post_init_per_group</fo:inline></fo:inline>.</fo:block></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a test case is skipped, this function is called after
          <fo:inline font-style="italic"><fo:inline font-family="monospace">post_end_per_testcase</fo:inline></fo:inline>.</fo:block></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the skipped test case belongs to a test case group, the first
          argument is a tuple <fo:inline font-family="monospace">{FuncName,GroupName}</fo:inline>, otherwise only
          the function name.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The data that comes with <fo:inline font-family="monospace">Reason</fo:inline> follows the same format as
          events
          <fo:inline font-style="italic"><fo:inline font-family="monospace">tc_auto_skip</fo:inline></fo:inline>
          and
          <fo:inline font-style="italic"><fo:inline font-family="monospace">tc_user_skip</fo:inline></fo:inline>
          For details, see section
          <fo:inline font-style="italic">Event Handling</fo:inline>
          in the User's Guide.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Module:on_tc_skip/4</fo:inline> is not exported, common_test
	  will attempt to call <fo:inline font-family="monospace">Module:on_tc_skip(TestName, Reason,
	  CTHState)</fo:inline> instead. This is for backwards
	  compatibility.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7263376">Module:terminate(CTHState)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CTHState = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>	
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">OPTIONAL</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is called at the end of a CTH
          <fo:inline font-style="italic">scope</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7267744">Module:id(Opts) -&gt; Id</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opts = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Id = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">OPTIONAL</fo:block>
	
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Id</fo:inline> identifies a CTH instance uniquely. If two CTHs return
         the same <fo:inline font-family="monospace">Id</fo:inline>, the second CTH is ignored and subsequent calls to
         the CTH are only made to the first instance. For details, see section
         <fo:inline font-style="italic">Installing a CTH</fo:inline>
         in the User's Guide.</fo:block>

       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is <fo:inline font-weight="bold">not</fo:inline> to have any side effects, as it can 
         be called multiple times by <fo:inline font-family="monospace">Common Test</fo:inline>.</fo:block>

       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If not implemented, the CTH acts as if this function returned a call
         to <fo:inline font-family="monospace">make_ref/0</fo:inline>.</fo:block>
       </fo:block>
  

<fo:block page-break-before="always" id="idp7283328" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">ct_property_test</fo:marker>ct_property_test</fo:block>Erlang module</fo:block>
  <fo:block/>
  ct_property_test
  <fo:block/>

  

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">EXPERIMENTAL support in <fo:inline font-family="monospace">Common Test</fo:inline> for calling property-based
      tests.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module is a first step to run property-based tests in the
      <fo:inline font-family="monospace">Common Test</fo:inline> framework. A property testing tool like QuickCheck
      or PropEr is assumed to be installed.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The idea is to have a <fo:inline font-family="monospace">Common Test</fo:inline> test suite calling a property
      testing tool with special property test suites as defined by that tool.
      The usual Erlang application directory structure is assumed. The tests
      are collected in the <fo:inline font-family="monospace">test</fo:inline> directory of the application. The
      <fo:inline font-family="monospace">test</fo:inline> directory has a subdirectory <fo:inline font-family="monospace">property_test</fo:inline>, where
      everything needed for the property tests is collected.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A typical <fo:inline font-family="monospace">Common Test</fo:inline> test suite using <fo:inline font-family="monospace">ct_property_test</fo:inline>
      is organized as follows:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 -include_lib("common_test/include/ct.hrl").

 all() -&gt; [prop_ftp_case].

 init_per_suite(Config) -&gt;
     ct_property_test:init_per_suite(Config).

 %%%---- test case
 prop_ftp_case(Config) -&gt;
     ct_property_test:quickcheck(
       ftp_simple_client_server:prop_ftp(Config),
       Config
      ).</fo:block>

    <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is experimental code that can be changed or removed anytime
        without any warning.</fo:block>
    </fo:block>

  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7292880">init_per_suite(Config) -&gt; Config | {skip, Reason}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Initializes <fo:inline font-family="monospace">Config</fo:inline> for property testing.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function investigates if support is available for either
          Quickcheck, PropEr, or Triq. The options
          <fo:inline font-family="monospace">{property_dir,AbsPath}</fo:inline> and <fo:inline font-family="monospace">{property_test_tool,Tool}</fo:inline>
          are set in the <fo:inline font-family="monospace">Config</fo:inline> returned.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function is intended to be called in function
          <fo:inline font-family="monospace">init_per_suite</fo:inline> in the test suite.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The property tests are assumed to be in subdirectory
          <fo:inline font-family="monospace">property_test</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7299856">quickcheck(Property, Config) -&gt; true | {fail, Reason}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calls quickcheck and returns the result in a form suitable for
          <fo:inline font-family="monospace">Common Test</fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is intended to be called in the test cases in the
          test suite.</fo:block>
      </fo:block>
  

<fo:block page-break-before="always" id="idp7310640" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">ct_testspec</fo:marker>ct_testspec</fo:block>Erlang module</fo:block>
  <fo:block/>
  ct_testspec
  <fo:block/>



    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parsing of test specifications for <fo:inline font-family="monospace">Common Test</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module exports help functions for parsing of test specifications.</fo:block>



  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp7314000">get_tests(SpecsIn) -&gt; {ok, [{Specs,Tests}]} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SpecsIn = [string()] | [[string()]]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Specs = [string()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Test = [{Node,Run,Skip}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Node = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Run = {Dir,Suites,Cases}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Skip = {Dir,Suites,Comment} | {Dir,Suites,Cases,Comment}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Suites = atom | [atom()] | all</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Cases = atom | [atom()] | all</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Comment = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parse the given test specification files and return the
        tests to run and skip.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">SpecsIn=[Spec1,Spec2,...]</fo:inline>, separate tests will be
        created per specification. If
        <fo:inline font-family="monospace">SpecsIn=[[Spec1,Spec2,...]]</fo:inline>, all specifications will be
        merge into one test.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For each test, a <fo:inline font-family="monospace">{Specs,Tests}</fo:inline> element is returned,
        where <fo:inline font-family="monospace">Specs</fo:inline> is a list of all included test
        specifications, and <fo:inline font-family="monospace">Tests</fo:inline> specifies actual tests to
        run/skip per node.</fo:block>
      </fo:block>

  

</fo:flow>
  </fo:page-sequence>
</fo:root>
