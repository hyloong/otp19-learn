<module name="digraph_utils">
<spec>
  <name>arborescence_root</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>arborescence_root(Digraph) -&gt; no | {yes, Root}</head>
      <guard>
        <subtype><typename>Digraph</typename><string>Digraph = <seealso marker="digraph#type-graph">digraph:graph()</seealso></string></subtype>
        <subtype><typename>Root</typename><string>Root = <seealso marker="digraph#type-vertex">digraph:vertex()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Digraph</anno>
  <anno>Root</anno>
</spec>
<spec>
  <name>components</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>components(Digraph) -&gt; [Component]</head>
      <guard>
        <subtype><typename>Digraph</typename><string>Digraph = <seealso marker="digraph#type-graph">digraph:graph()</seealso></string></subtype>
        <subtype><typename>Component</typename><string>Component = [<seealso marker="digraph#type-vertex">digraph:vertex()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Component</anno>
  <anno>Digraph</anno>
</spec>
<spec>
  <name>condensation</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>condensation(Digraph) -&gt; CondensedDigraph</head>
      <guard>
        <subtype><typename>Digraph</typename><string>Digraph = CondensedDigraph = <seealso marker="digraph#type-graph">digraph:graph()</seealso></string></subtype>
        <subtype><typename>CondensedDigraph</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>CondensedDigraph</anno>
  <anno>Digraph</anno>
</spec>
<spec>
  <name>cyclic_strong_components</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>cyclic_strong_components(Digraph) -&gt; [StrongComponent]</head>
      <guard>
        <subtype><typename>Digraph</typename><string>Digraph = <seealso marker="digraph#type-graph">digraph:graph()</seealso></string></subtype>
        <subtype><typename>StrongComponent</typename><string>StrongComponent = [<seealso marker="digraph#type-vertex">digraph:vertex()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Digraph</anno>
  <anno>StrongComponent</anno>
</spec>
<spec>
  <name>is_acyclic</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_acyclic(Digraph) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Digraph</typename><string>Digraph = <seealso marker="digraph#type-graph">digraph:graph()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Digraph</anno>
</spec>
<spec>
  <name>is_arborescence</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_arborescence(Digraph) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Digraph</typename><string>Digraph = <seealso marker="digraph#type-graph">digraph:graph()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Digraph</anno>
</spec>
<spec>
  <name>is_tree</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_tree(Digraph) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Digraph</typename><string>Digraph = <seealso marker="digraph#type-graph">digraph:graph()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Digraph</anno>
</spec>
<spec>
  <name>loop_vertices</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>loop_vertices(Digraph) -&gt; Vertices</head>
      <guard>
        <subtype><typename>Digraph</typename><string>Digraph = <seealso marker="digraph#type-graph">digraph:graph()</seealso></string></subtype>
        <subtype><typename>Vertices</typename><string>Vertices = [<seealso marker="digraph#type-vertex">digraph:vertex()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Digraph</anno>
  <anno>Vertices</anno>
</spec>
<spec>
  <name>postorder</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>postorder(Digraph) -&gt; Vertices</head>
      <guard>
        <subtype><typename>Digraph</typename><string>Digraph = <seealso marker="digraph#type-graph">digraph:graph()</seealso></string></subtype>
        <subtype><typename>Vertices</typename><string>Vertices = [<seealso marker="digraph#type-vertex">digraph:vertex()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Digraph</anno>
  <anno>Vertices</anno>
</spec>
<spec>
  <name>preorder</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>preorder(Digraph) -&gt; Vertices</head>
      <guard>
        <subtype><typename>Digraph</typename><string>Digraph = <seealso marker="digraph#type-graph">digraph:graph()</seealso></string></subtype>
        <subtype><typename>Vertices</typename><string>Vertices = [<seealso marker="digraph#type-vertex">digraph:vertex()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Digraph</anno>
  <anno>Vertices</anno>
</spec>
<spec>
  <name>reachable</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>reachable(Vertices, Digraph) -&gt; Reachable</head>
      <guard>
        <subtype><typename>Digraph</typename><string>Digraph = <seealso marker="digraph#type-graph">digraph:graph()</seealso></string></subtype>
        <subtype><typename>Vertices</typename><string>Vertices = Reachable = [<seealso marker="digraph#type-vertex">digraph:vertex()</seealso>]</string></subtype>
        <subtype><typename>Reachable</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Digraph</anno>
  <anno>Reachable</anno>
  <anno>Vertices</anno>
</spec>
<spec>
  <name>reachable_neighbours</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>reachable_neighbours(Vertices, Digraph) -&gt; Reachable</head>
      <guard>
        <subtype><typename>Digraph</typename><string>Digraph = <seealso marker="digraph#type-graph">digraph:graph()</seealso></string></subtype>
        <subtype><typename>Vertices</typename><string>Vertices = Reachable = [<seealso marker="digraph#type-vertex">digraph:vertex()</seealso>]</string></subtype>
        <subtype><typename>Reachable</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Digraph</anno>
  <anno>Reachable</anno>
  <anno>Vertices</anno>
</spec>
<spec>
  <name>reaching</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>reaching(Vertices, Digraph) -&gt; Reaching</head>
      <guard>
        <subtype><typename>Digraph</typename><string>Digraph = <seealso marker="digraph#type-graph">digraph:graph()</seealso></string></subtype>
        <subtype><typename>Vertices</typename><string>Vertices = Reaching = [<seealso marker="digraph#type-vertex">digraph:vertex()</seealso>]</string></subtype>
        <subtype><typename>Reaching</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Digraph</anno>
  <anno>Reaching</anno>
  <anno>Vertices</anno>
</spec>
<spec>
  <name>reaching_neighbours</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>reaching_neighbours(Vertices, Digraph) -&gt; Reaching</head>
      <guard>
        <subtype><typename>Digraph</typename><string>Digraph = <seealso marker="digraph#type-graph">digraph:graph()</seealso></string></subtype>
        <subtype><typename>Vertices</typename><string>Vertices = Reaching = [<seealso marker="digraph#type-vertex">digraph:vertex()</seealso>]</string></subtype>
        <subtype><typename>Reaching</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Digraph</anno>
  <anno>Reaching</anno>
  <anno>Vertices</anno>
</spec>
<spec>
  <name>strong_components</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>strong_components(Digraph) -&gt; [StrongComponent]</head>
      <guard>
        <subtype><typename>Digraph</typename><string>Digraph = <seealso marker="digraph#type-graph">digraph:graph()</seealso></string></subtype>
        <subtype><typename>StrongComponent</typename><string>StrongComponent = [<seealso marker="digraph#type-vertex">digraph:vertex()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Digraph</anno>
  <anno>StrongComponent</anno>
</spec>
<spec>
  <name>subgraph</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>subgraph(Digraph, Vertices) -&gt; SubGraph</head>
      <guard>
        <subtype><typename>Digraph</typename><string>Digraph = <seealso marker="digraph#type-graph">digraph:graph()</seealso></string></subtype>
        <subtype><typename>Vertices</typename><string>Vertices = [<seealso marker="digraph#type-vertex">digraph:vertex()</seealso>]</string></subtype>
        <subtype><typename>SubGraph</typename><string>SubGraph = <seealso marker="digraph#type-graph">digraph:graph()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Digraph</anno>
  <anno>SubGraph</anno>
  <anno>Vertices</anno>
</spec>
<spec>
  <name>subgraph</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>subgraph(Digraph, Vertices, Options) -&gt; SubGraph</head>
      <guard>
        <subtype><typename>Digraph</typename><string>Digraph = SubGraph = <seealso marker="digraph#type-graph">digraph:graph()</seealso></string></subtype>
        <subtype><typename>SubGraph</typename><string/></subtype>
        <subtype><typename>Vertices</typename><string>Vertices = [<seealso marker="digraph#type-vertex">digraph:vertex()</seealso>]</string></subtype>
        <subtype><typename>Options</typename><string>Options = [{type, SubgraphType} | {keep_labels, boolean()}]</string></subtype>
        <subtype><typename>SubgraphType</typename><string>SubgraphType = inherit | [<seealso marker="digraph#type-d_type">digraph:d_type()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Digraph</anno>
  <anno>Options</anno>
  <anno>SubGraph</anno>
  <anno>SubgraphType</anno>
  <anno>Vertices</anno>
</spec>
<spec>
  <name>topsort</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>topsort(Digraph) -&gt; Vertices | false</head>
      <guard>
        <subtype><typename>Digraph</typename><string>Digraph = <seealso marker="digraph#type-graph">digraph:graph()</seealso></string></subtype>
        <subtype><typename>Vertices</typename><string>Vertices = [<seealso marker="digraph#type-vertex">digraph:vertex()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Digraph</anno>
  <anno>Vertices</anno>
</spec>
<timestamp>Generated by EDoc, Jul 12 2017, 20:27:13.</timestamp>
</module>