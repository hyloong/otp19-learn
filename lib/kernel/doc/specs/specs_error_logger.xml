<module name="error_logger">
<type>
  <name>open_error</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-open_error">open_error()</marker> = <seealso marker="file#type-posix">file:posix()</seealso> | badarg | system_limit</typehead></typedecl>
</type>
<type>
  <name>report</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-report">report()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[{Tag :: term(), Data :: term()} | term()] | string() | term()</typehead></typedecl>
  <anno>Data</anno>
  <anno>Tag</anno>
</type>
<type>
  <name>state</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-state">state()</marker> = {integer() &gt;= 0, integer() &gt;= 0, [term()]}</typehead></typedecl>
</type>
<type>
  <name>swap_handler_type</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-swap_handler_type">swap_handler_type()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>false | silent | tty | {logfile, string()}</typehead></typedecl>
</type>
<spec>
  <name>add_report_handler</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>add_report_handler(Handler) -&gt; any()</head>
      <guard>
        <subtype><typename>Handler</typename><string>Handler = module()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Handler</anno>
</spec>
<spec>
  <name>add_report_handler</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>add_report_handler(Handler, Args) -&gt; Result</head>
      <guard>
        <subtype><typename>Handler</typename><string>Handler = module()</string></subtype>
        <subtype><typename>Args</typename><string>Args = <seealso marker="gen_event#type-handler_args">gen_event:handler_args()</seealso></string></subtype>
        <subtype><typename>Result</typename><string>Result = <seealso marker="gen_event#type-add_handler_ret">gen_event:add_handler_ret()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Handler</anno>
  <anno>Result</anno>
</spec>
<spec>
  <name>delete_report_handler</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>delete_report_handler(Handler) -&gt; Result</head>
      <guard>
        <subtype><typename>Handler</typename><string>Handler = module()</string></subtype>
        <subtype><typename>Result</typename><string>Result = <seealso marker="gen_event#type-del_handler_ret">gen_event:del_handler_ret()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Handler</anno>
  <anno>Result</anno>
</spec>
<spec>
  <name>error_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>error_info(Error :: any()) -&gt; ok</head></clause>
  </contract>
  <anno>Error</anno>
</spec>
<spec>
  <name>error_msg</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>error_msg(Format) -&gt; ok</head>
      <guard>
        <subtype><typename>Format</typename><string>Format = string()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Format</anno>
</spec>
<spec>
  <name>error_msg</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>error_msg(Format, Data) -&gt; ok</head>
      <guard>
        <subtype><typename>Format</typename><string>Format = string()</string></subtype>
        <subtype><typename>Data</typename><string>Data = list()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Format</anno>
</spec>
<spec>
  <name>error_report</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>error_report(Report) -&gt; ok</head>
      <guard>
        <subtype><typename>Report</typename><string>Report = <seealso marker="#type-report">report()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Report</anno>
</spec>
<spec>
  <name>error_report</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>error_report(Type, Report) -&gt; ok</head>
      <guard>
        <subtype><typename>Type</typename><string>Type = term()</string></subtype>
        <subtype><typename>Report</typename><string>Report = <seealso marker="#type-report">report()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Report</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>format</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>format(Format, Data) -&gt; ok</head>
      <guard>
        <subtype><typename>Format</typename><string>Format = string()</string></subtype>
        <subtype><typename>Data</typename><string>Data = list()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Format</anno>
</spec>
<spec>
  <name>get_format_depth</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>get_format_depth() -&gt; unlimited | integer() &gt;= 1</head></clause>
  </contract>
</spec>
<spec>
  <name>handle_call</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>handle_call(Query :: term(), State :: <seealso marker="#type-state">state()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, {error, bad_query}, <seealso marker="#type-state">state()</seealso>}</head></clause>
  </contract>
  <anno>Query</anno>
  <anno>State</anno>
</spec>
<spec>
  <name>handle_event</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>handle_event(Event :: term(), State :: <seealso marker="#type-state">state()</seealso>) -&gt; {ok, <seealso marker="#type-state">state()</seealso>}</head></clause>
  </contract>
  <anno>Event</anno>
  <anno>State</anno>
</spec>
<spec>
  <name>handle_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>handle_info(X1 :: term(), State :: <seealso marker="#type-state">state()</seealso>) -&gt; {ok, <seealso marker="#type-state">state()</seealso>}</head></clause>
  </contract>
  <anno>State</anno>
  <anno>X1</anno>
</spec>
<spec>
  <name>info_msg</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>info_msg(Format) -&gt; ok</head>
      <guard>
        <subtype><typename>Format</typename><string>Format = string()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Format</anno>
</spec>
<spec>
  <name>info_msg</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>info_msg(Format, Data) -&gt; ok</head>
      <guard>
        <subtype><typename>Format</typename><string>Format = string()</string></subtype>
        <subtype><typename>Data</typename><string>Data = list()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Format</anno>
</spec>
<spec>
  <name>info_report</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>info_report(Report) -&gt; ok</head>
      <guard>
        <subtype><typename>Report</typename><string>Report = <seealso marker="#type-report">report()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Report</anno>
</spec>
<spec>
  <name>info_report</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>info_report(Type, Report) -&gt; ok</head>
      <guard>
        <subtype><typename>Type</typename><string>Type = any()</string></subtype>
        <subtype><typename>Report</typename><string>Report = <seealso marker="#type-report">report()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Report</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>init</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>init(Max :: term()) -&gt; {ok, <seealso marker="#type-state">state()</seealso> | []}</head></clause>
  </contract>
  <anno>Max</anno>
</spec>
<spec>
  <name>limit_term</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>limit_term(Term :: term()) -&gt; term()</head></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>logfile</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>logfile(Request :: {open, Filename}) -&gt; ok | {error, OpenReason}</head>
      <guard>
        <subtype><typename>Filename</typename><string>Filename = <seealso marker="file#type-name">file:name()</seealso></string></subtype>
        <subtype><typename>OpenReason</typename><string>OpenReason = allready_have_logfile | <seealso marker="#type-open_error">open_error()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Filename</anno>
  <anno>OpenReason</anno>
  <anno>Request</anno>
</spec>
<spec>
  <name>logfile</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>logfile(Request :: close) -&gt; ok | {error, CloseReason}</head>
      <guard>
        <subtype><typename>CloseReason</typename><string>CloseReason = module_not_found</string></subtype>
      </guard></clause>
  </contract>
  <anno>CloseReason</anno>
  <anno>Request</anno>
</spec>
<spec>
  <name>logfile</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>logfile(Request :: filename) -&gt; Filename | {error, FilenameReason}</head>
      <guard>
        <subtype><typename>Filename</typename><string>Filename = <seealso marker="file#type-name">file:name()</seealso></string></subtype>
        <subtype><typename>FilenameReason</typename><string>FilenameReason = no_log_file</string></subtype>
      </guard></clause>
  </contract>
  <anno>Filename</anno>
  <anno>FilenameReason</anno>
  <anno>Request</anno>
</spec>
<spec>
  <name>start</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>start() -&gt; {ok, pid()} | {error, any()}</head></clause>
  </contract>
</spec>
<spec>
  <name>start_link</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>start_link() -&gt; {ok, pid()} | {error, any()}</head></clause>
  </contract>
</spec>
<spec>
  <name>swap_handler</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>swap_handler(Type :: <seealso marker="#type-swap_handler_type">swap_handler_type()</seealso>) -&gt; any()</head></clause>
  </contract>
  <anno>Type</anno>
</spec>
<spec>
  <name>terminate</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>terminate(X1 :: term(), X2 :: <seealso marker="#type-state">state()</seealso>) -&gt; {error_logger, [term()]}</head></clause>
  </contract>
  <anno>X1</anno>
  <anno>X2</anno>
</spec>
<spec>
  <name>tty</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>tty(Flag) -&gt; ok</head>
      <guard>
        <subtype><typename>Flag</typename><string>Flag = boolean()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
</spec>
<spec>
  <name>warning_map</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>warning_map() -&gt; Tag</head>
      <guard>
        <subtype><typename>Tag</typename><string>Tag = error | warning | info</string></subtype>
      </guard></clause>
  </contract>
  <anno>Tag</anno>
</spec>
<spec>
  <name>warning_msg</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>warning_msg(Format) -&gt; ok</head>
      <guard>
        <subtype><typename>Format</typename><string>Format = string()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Format</anno>
</spec>
<spec>
  <name>warning_msg</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>warning_msg(Format, Data) -&gt; ok</head>
      <guard>
        <subtype><typename>Format</typename><string>Format = string()</string></subtype>
        <subtype><typename>Data</typename><string>Data = list()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Format</anno>
</spec>
<spec>
  <name>warning_report</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>warning_report(Report) -&gt; ok</head>
      <guard>
        <subtype><typename>Report</typename><string>Report = <seealso marker="#type-report">report()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Report</anno>
</spec>
<spec>
  <name>warning_report</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>warning_report(Type, Report) -&gt; ok</head>
      <guard>
        <subtype><typename>Type</typename><string>Type = any()</string></subtype>
        <subtype><typename>Report</typename><string>Report = <seealso marker="#type-report">report()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Report</anno>
  <anno>Type</anno>
</spec>
<timestamp>Generated by EDoc, Jul 12 2017, 20:27:40.</timestamp>
</module>