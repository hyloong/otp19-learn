<module name="net_adm">
<type>
  <name>verbosity</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-verbosity">verbosity()</marker> = silent | verbose</typehead></typedecl>
</type>
<spec>
  <name>dns_hostname</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>dns_hostname(Host) -&gt; {ok, Name} | {error, Host}</head>
      <guard>
        <subtype><typename>Host</typename><string>Host = atom() | string()</string></subtype>
        <subtype><typename>Name</typename><string>Name = string()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Host</anno>
  <anno>Name</anno>
</spec>
<spec>
  <name>host_file</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>host_file() -&gt; Hosts | {error, Reason}</head>
      <guard>
        <subtype><typename>Hosts</typename><string>Hosts = [Host :: atom()]</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="file#type-posix">file:posix()</seealso> |<br/><nbsp/><nbsp/><nbsp/><nbsp/>badarg |<br/><nbsp/><nbsp/><nbsp/><nbsp/>terminated |<br/><nbsp/><nbsp/><nbsp/><nbsp/>system_limit |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{Line :: integer(), Mod :: module(), Term :: term()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Host</anno>
  <anno>Hosts</anno>
  <anno>Line</anno>
  <anno>Mod</anno>
  <anno>Reason</anno>
  <anno>Term</anno>
</spec>
<spec>
  <name>localhost</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>localhost() -&gt; Name</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = string()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
</spec>
<spec>
  <name>names</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>names() -&gt; {ok, [{Name, Port}]} | {error, Reason}</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = string()</string></subtype>
        <subtype><typename>Port</typename><string>Port = integer() &gt;= 0</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = address | <seealso marker="file#type-posix">file:posix()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Name</anno>
  <anno>Port</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>names</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>names(Host) -&gt; {ok, [{Name, Port}]} | {error, Reason}</head>
      <guard>
        <subtype><typename>Host</typename><string>Host = atom() | string() | <seealso marker="inet#type-ip_address">inet:ip_address()</seealso></string></subtype>
        <subtype><typename>Name</typename><string>Name = string()</string></subtype>
        <subtype><typename>Port</typename><string>Port = integer() &gt;= 0</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = address | <seealso marker="file#type-posix">file:posix()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Host</anno>
  <anno>Name</anno>
  <anno>Port</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>ping</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>ping(Node) -&gt; pong | pang</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = atom()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>ping_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>ping_list(Nodelist :: [atom()]) -&gt; [atom()]</head></clause>
  </contract>
  <anno>Nodelist</anno>
</spec>
<spec>
  <name>world</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>world() -&gt; [node()]</head></clause>
  </contract>
</spec>
<spec>
  <name>world</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>world(Arg) -&gt; [node()]</head>
      <guard>
        <subtype><typename>Arg</typename><string>Arg = <seealso marker="#type-verbosity">verbosity()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Arg</anno>
</spec>
<spec>
  <name>world_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>world_list(Hosts) -&gt; [node()]</head>
      <guard>
        <subtype><typename>Hosts</typename><string>Hosts = [atom()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Hosts</anno>
</spec>
<spec>
  <name>world_list</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>world_list(Hosts, Arg) -&gt; [node()]</head>
      <guard>
        <subtype><typename>Hosts</typename><string>Hosts = [atom()]</string></subtype>
        <subtype><typename>Arg</typename><string>Arg = <seealso marker="#type-verbosity">verbosity()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Arg</anno>
  <anno>Hosts</anno>
</spec>
<timestamp>Generated by EDoc, Jul 12 2017, 20:27:43.</timestamp>
</module>