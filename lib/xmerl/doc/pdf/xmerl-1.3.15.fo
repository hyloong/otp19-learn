<?xml version="1.0"?>
<fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format">
  <fo:layout-master-set>
    <fo:simple-page-master master-name="cover" margin="25mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin="0mm"/>
    </fo:simple-page-master>
    <fo:simple-page-master master-name="left-page" margin-top="25mm" margin-bottom="15mm" margin-left="20mm" margin-right="25mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin-top="15mm" margin-bottom="20mm"/>
      <fo:region-before region-name="left-header" extent="10mm"/>
      <fo:region-after region-name="left-footer" extent="10mm"/>
    </fo:simple-page-master>
    <fo:simple-page-master master-name="right-page" margin-top="25mm" margin-bottom="15mm" margin-left="25mm" margin-right="20mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin-top="15mm" margin-bottom="20mm"/>
      <fo:region-before region-name="right-header" extent="10mm"/>
      <fo:region-after region-name="right-footer" extent="10mm"/>
    </fo:simple-page-master>
    <fo:page-sequence-master master-name="document">
      <fo:repeatable-page-master-alternatives>
        <fo:conditional-page-master-reference master-reference="left-page" odd-or-even="even"/>
        <fo:conditional-page-master-reference master-reference="right-page" odd-or-even="odd"/>
      </fo:repeatable-page-master-alternatives>
    </fo:page-sequence-master>
  </fo:layout-master-set>
  <fo:bookmark-tree>
    <fo:bookmark internal-destination="cover-page" starting-state="show">
      <fo:bookmark-title>xmerl</fo:bookmark-title>
      <fo:bookmark internal-destination="idp602352" starting-state="hide">
        <fo:bookmark-title>xmerl User's Guide</fo:bookmark-title>
        <fo:bookmark internal-destination="idp591952" starting-state="hide">
          <fo:bookmark-title>xmerl</fo:bookmark-title>
          <fo:bookmark internal-destination="idp588736" starting-state="hide">
            <fo:bookmark-title>Introduction</fo:bookmark-title>
            <fo:bookmark internal-destination="idp587920" starting-state="hide">
              <fo:bookmark-title>Features</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp586480" starting-state="hide">
              <fo:bookmark-title>Overview</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp570256" starting-state="hide">
            <fo:bookmark-title>xmerl User Interface Data Structure</fo:bookmark-title>
            <fo:bookmark internal-destination="idp498832" starting-state="hide">
              <fo:bookmark-title>Errors</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp494144" starting-state="hide">
            <fo:bookmark-title>Getting Started</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp416464" starting-state="hide">
            <fo:bookmark-title>Example: Extracting Data From XML Content</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idm23040" starting-state="hide">
            <fo:bookmark-title>Example: Create XML Out Of Arbitrary Data</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp427472" starting-state="hide">
            <fo:bookmark-title>Example: Transforming XML To HTML</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
      </fo:bookmark>
      <fo:bookmark internal-destination="idp35520" starting-state="hide">
        <fo:bookmark-title>Reference Manual</fo:bookmark-title>
        <fo:bookmark internal-destination="idp1188944" starting-state="hide">
          <fo:bookmark-title>xmerl_scan</fo:bookmark-title>
          <fo:bookmark internal-destination="idp967872" starting-state="hide">
            <fo:bookmark-title>accumulate_whitespace/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp964944" starting-state="hide">
            <fo:bookmark-title>cont_state/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp959888" starting-state="hide">
            <fo:bookmark-title>cont_state/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp956816" starting-state="hide">
            <fo:bookmark-title>event_state/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp952768" starting-state="hide">
            <fo:bookmark-title>event_state/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp949536" starting-state="hide">
            <fo:bookmark-title>fetch_state/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp944848" starting-state="hide">
            <fo:bookmark-title>fetch_state/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp940672" starting-state="hide">
            <fo:bookmark-title>file/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1128016" starting-state="hide">
            <fo:bookmark-title>file/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1124272" starting-state="hide">
            <fo:bookmark-title>hook_state/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp395584" starting-state="hide">
            <fo:bookmark-title>hook_state/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp391840" starting-state="hide">
            <fo:bookmark-title>rules_state/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp648032" starting-state="hide">
            <fo:bookmark-title>rules_state/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp648160" starting-state="hide">
            <fo:bookmark-title>string/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp315600" starting-state="hide">
            <fo:bookmark-title>string/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp698304" starting-state="hide">
            <fo:bookmark-title>user_state/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp375872" starting-state="hide">
            <fo:bookmark-title>user_state/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp351376" starting-state="hide">
          <fo:bookmark-title>xmerl</fo:bookmark-title>
          <fo:bookmark internal-destination="idp736672" starting-state="hide">
            <fo:bookmark-title>callbacks/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp378960" starting-state="hide">
            <fo:bookmark-title>export/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp334400" starting-state="hide">
            <fo:bookmark-title>export/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1209328" starting-state="hide">
            <fo:bookmark-title>export_content/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1011232" starting-state="hide">
            <fo:bookmark-title>export_element/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1013504" starting-state="hide">
            <fo:bookmark-title>export_element/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1015776" starting-state="hide">
            <fo:bookmark-title>export_simple/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1018704" starting-state="hide">
            <fo:bookmark-title>export_simple/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1147616" starting-state="hide">
            <fo:bookmark-title>export_simple_content/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1149888" starting-state="hide">
            <fo:bookmark-title>export_simple_element/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp1234496" starting-state="hide">
          <fo:bookmark-title>xmerl_xs</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1239744" starting-state="hide">
            <fo:bookmark-title>built_in_rules/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1242656" starting-state="hide">
            <fo:bookmark-title>select/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1246320" starting-state="hide">
            <fo:bookmark-title>value_of/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1251472" starting-state="hide">
            <fo:bookmark-title>xslapply/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp701440" starting-state="hide">
          <fo:bookmark-title>xmerl_eventp</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1269248" starting-state="hide">
            <fo:bookmark-title>file_sax/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1272576" starting-state="hide">
            <fo:bookmark-title>stream/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1278208" starting-state="hide">
            <fo:bookmark-title>stream_sax/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1285632" starting-state="hide">
            <fo:bookmark-title>string_sax/4</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp1293952" starting-state="hide">
          <fo:bookmark-title>xmerl_xpath</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1312592" starting-state="hide">
            <fo:bookmark-title>string/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1316528" starting-state="hide">
            <fo:bookmark-title>string/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1320512" starting-state="hide">
            <fo:bookmark-title>string/5</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp1334416" starting-state="hide">
          <fo:bookmark-title>xmerl_xsd</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1352464" starting-state="hide">
            <fo:bookmark-title>file2state/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1357264" starting-state="hide">
            <fo:bookmark-title>format_error/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1360880" starting-state="hide">
            <fo:bookmark-title>process_schema/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1364144" starting-state="hide">
            <fo:bookmark-title>process_schema/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1370384" starting-state="hide">
            <fo:bookmark-title>process_schemas/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1373648" starting-state="hide">
            <fo:bookmark-title>process_schemas/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1379072" starting-state="hide">
            <fo:bookmark-title>process_validate/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1382352" starting-state="hide">
            <fo:bookmark-title>process_validate/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1390864" starting-state="hide">
            <fo:bookmark-title>state2file/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1394368" starting-state="hide">
            <fo:bookmark-title>state2file/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1399120" starting-state="hide">
            <fo:bookmark-title>validate/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1402384" starting-state="hide">
            <fo:bookmark-title>validate/3</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp1421680" starting-state="hide">
          <fo:bookmark-title>xmerl_sax_parser</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1503792" starting-state="hide">
            <fo:bookmark-title>file/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1512144" starting-state="hide">
            <fo:bookmark-title>stream/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1522416" starting-state="hide">
            <fo:bookmark-title>ContinuationFun/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1526688" starting-state="hide">
            <fo:bookmark-title>EventFun/3</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
      </fo:bookmark>
    </fo:bookmark>
  </fo:bookmark-tree>
  <fo:page-sequence font-family="sans-serif" force-page-count="even" master-reference="cover" font-size="10pt">
    <fo:flow flow-name="xsl-region-body">
      <fo:block space-before="130mm" space-before.conditionality="retain" text-align="end">
        <fo:external-graphic src="/root/download/otp_src_20.0/bootstrap/lib/erl_docgen/priv/images/erlang-logo.gif"/>
      </fo:block>
      <fo:block id="cover-page" border-before-style="solid" border-before-width="10pt" border-color="#960003" font-size="2.3em" padding-before="0.5em" text-align="end">xmerl</fo:block>
      <fo:block font-size="0.9em" text-align="end">Copyright © 2004-2017 Ericsson AB. All Rights Reserved.</fo:block>
      <fo:block font-size="0.9em" text-align="end">xmerl 1.3.15</fo:block>
      <fo:block font-size="0.9em" text-align="end">July 12, 2017</fo:block>
      <fo:block padding-before="2.5em" font-size="1.33em" font-weight="bold" color="#C00" text-align="end"/>
      <fo:block break-before="page" border-before-style="solid" border-before-width="1pt" border-color="#960003" font-weight="bold" padding-before="0.5em" space-before="200mm" space-before.conditionality="retain">Copyright © 2004-2017 Ericsson AB. All Rights Reserved.</fo:block>
      <fo:block font-size="0.9em">
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
 
          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
    
    Ericsson AB. All Rights Reserved..
        </fo:block>
      <fo:block font-size="0.9em" font-weight="bold" space-before="2em">July 12, 2017</fo:block>
    </fo:flow>
  </fo:page-sequence>
  <fo:page-sequence font-family="serif" master-reference="document" initial-page-number="1" font-size="10pt">
    <fo:static-content flow-name="left-header">
      <fo:block text-align="start" border-after-style="solid" border-after-width="2pt" border-color="#960003" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">
        <fo:retrieve-marker retrieve-boundary="page-sequence" retrieve-class-name="chapter-title" retrieve-position="first-including-carryover"/>
      </fo:block>
    </fo:static-content>
    <fo:static-content flow-name="right-header">
      <fo:block text-align="end" border-after-style="solid" border-after-width="2pt" border-color="#960003" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">
        <fo:retrieve-marker retrieve-boundary="page-sequence" retrieve-class-name="chapter-title" retrieve-position="first-including-carryover"/>
      </fo:block>
    </fo:static-content>
    <fo:static-content flow-name="left-footer">
      <fo:block text-align="start" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold"><fo:page-number/> | Ericsson AB. All Rights Reserved.:
            xmerl</fo:block>
    </fo:static-content>
    <fo:static-content flow-name="right-footer">
      <fo:block text-align="end" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">Ericsson AB. All Rights Reserved.:
            xmerl | <fo:page-number/></fo:block>
    </fo:static-content>
    <fo:flow flow-name="xsl-region-body"><fo:block/><fo:block id="idp602352" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">1   
      xmerl User's Guide</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-weight="bold">xmerl</fo:inline> application 
      contains modules with support for processing of xml files compliant to XML 1.0.
      </fo:block>
  <fo:block id="idp591952" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.1  xmerl</fo:marker>1.1  xmerl</fo:block><fo:block id="idp588736" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.1 
      Introduction</fo:block>
    

    <fo:block id="idp587920" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Features</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-weight="bold">xmerl</fo:inline> XML parser is able to parse XML documents
        according to the XML 1.0 standard. As default it performs
        well-formed parsing, (syntax checks and checks of well-formed
        constraints). Optionally one can also use xmerl as a validating
        parser, (validate according to referenced DTD and validating
        constraints). By means of for example the xmerl_xs module it is
        possible to transform the parsed result to other formats,
        e.g. text, HTML, XML etc.</fo:block>
    

    <fo:block id="idp586480" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Overview</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This document does not give an introduction to XML. There
        are a lot of books available that describe XML from
        different views. At the <fo:inline font-weight="bold"><fo:basic-link external-destination="href">www.W3.org</fo:basic-link></fo:inline> site you will find
        the <fo:inline font-weight="bold"><fo:basic-link external-destination="href">XML 1.0 specification</fo:basic-link></fo:inline> and other related specs. One site were
        you can find tutorials on XML and related specs is <fo:inline font-weight="bold"><fo:basic-link external-destination="href">ZVON.org</fo:basic-link></fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">However, here you will find some examples of how to use
        and to what you can use xmerl. A detailed description of the
        user interface can be found in the reference manual.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are two known shortcomings in xmerl:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>It cannot retrieve external entities on the Internet
         by a URL reference, only resources in the local file
         system.</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>xmerl can parse Unicode encoded data. But, it fails
         on tag names, attribute names and other mark-up names that
         are encoded Unicode characters not mapping on ASCII.</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By parsing an XML document you will get a record,
        displaying the structure of the document, as return
        value. The record also holds the data of the document. xmerl
        is convenient to use in for instance the following scenarios:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">You need to retrieve data from XML documents. Your
        Erlang software can handle information from the XML document
        by extracting data from the data structure received by
        parsing.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is also possible to do further processing of parsed
        XML with xmerl. If you want to change format of the XML
        document to for instance HTML, text or other XML format you
        can transform it. There is support for such transformations
        in xmerl.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">One may also convert arbitrary data to XML. So it for
        instance is easy to make it readable by humans. In this case
        you first create xmerl data structures out of your data, then
        transform it to XML. </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">You can find examples of these three examples of usage
        below.</fo:block>
    
  <fo:block id="idp570256" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.2 
      xmerl User Interface Data Structure</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following records used by xmerl to save the parsed
      data are defined in <fo:inline font-family="monospace">xmerl.hrl</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The result of a successful parsing is a tuple
      <fo:inline font-family="monospace">{DataStructure,M}</fo:inline>. <fo:inline font-family="monospace">M</fo:inline> is the XML production Misc,
      which is the mark-up that comes after the element of the
      document. It is returned "as is". <fo:inline font-family="monospace">DataStructure</fo:inline> is an
      <fo:inline font-family="monospace">xmlElement</fo:inline> record, that among others have the fields
      <fo:inline font-family="monospace">name</fo:inline>, <fo:inline font-family="monospace">parents</fo:inline>, <fo:inline font-family="monospace">attributes</fo:inline> and
      <fo:inline font-family="monospace">content</fo:inline> like:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#xmlElement{name=Name,
            ...
            parents=Parents,
            ...
            attributes=Attrs,
            content=Content,
            ...}    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The name of the element is found in the <fo:inline font-family="monospace">name</fo:inline>
      field. In the <fo:inline font-family="monospace">parents</fo:inline> field is the names of the parent
      elements saved. Parents is a list of tuples where the first
      element in each tuple is the name of the parent element. The
      list is in reverse order.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The record <fo:inline font-family="monospace">xmlAttribute</fo:inline> holds the name and value of
      an attribute in the fields <fo:inline font-family="monospace">name</fo:inline> and <fo:inline font-family="monospace">value</fo:inline>. All
      attributes of an element is a list of xmlAttribute in the
      field <fo:inline font-family="monospace">attributes</fo:inline> of the xmlElement record.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">content</fo:inline> field of the top element is a list of
      records that shows the structure and data of the document. If
      it is a simple document like: </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&lt;?xml version="1.0"?&gt;
&lt;dog&gt;
Grand Danois
&lt;/dog&gt;    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The parse result will be:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#xmlElement{name = dog,
            ...
            parents = [],
            ...
            attributes = [],
            content = [{xmlText,[{dog,1}],1,[],"\
Grand Danois\
",text}],
            ...
            }    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Where the content of the top element is:
      <fo:inline font-family="monospace">[{xmlText,[{dog,1}],1,[],"\ Grand Danois\ ",text}]</fo:inline>. Text will be returned in <fo:inline font-family="monospace">xmlText</fo:inline> records. Though,
      usually documents are more complex, and the content of the top
      element will in that case be a nested structure with
      xmlElement records that in turn may have complex content. All of
      this reflects the structure of the XML document.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Space characters between mark-up as <fo:inline font-family="monospace">space</fo:inline>,
      <fo:inline font-family="monospace">tab</fo:inline> and <fo:inline font-family="monospace">line feed</fo:inline> are normalized and returned as
      xmlText records.</fo:block>

    <fo:block id="idp498832" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Errors</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An unsuccessful parse results in an error, which may be a
        tuple <fo:inline font-family="monospace">{error,Reason}</fo:inline> or an exit:
        <fo:inline font-family="monospace">{'EXIT',Reason}</fo:inline>. According to the XML 1.0 standard
        there are <fo:inline font-family="monospace">fatal error</fo:inline> and <fo:inline font-family="monospace">error</fo:inline> situations. The
        fatal errors <fo:inline font-weight="bold">must</fo:inline> be detected by a conforming parser
        while an error <fo:inline font-weight="bold">may</fo:inline> be detected. Both categories of
        errors are reported as fatal errors by this version of xmerl,
        most often as an exit.</fo:block>
    
  <fo:block id="idp494144" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.3 
      Getting Started</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the following examples we use the XML file
      "motorcycles.xml" and the corresponding DTD
      "motorcycles.dtd". motorcycles.xml looks like:
            
</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;!DOCTYPE motorcycles SYSTEM "motorcycles.dtd"&gt;
&lt;motorcycles&gt;
  &lt;bike year="2000" color="black"&gt;
    &lt;name&gt;
      &lt;manufacturer&gt;Suzuki&lt;/manufacturer&gt;
      &lt;brandName&gt;Suzuki VL 1500&lt;/brandName&gt;
      &lt;additionalName&gt;Intruder&lt;/additionalName&gt;
    &lt;/name&gt;
    &lt;engine&gt;V-engine, 2-cylinders, 1500 cc&lt;/engine&gt;
    &lt;kind&gt;custom&lt;/kind&gt;
    &lt;drive&gt;cardan&lt;/drive&gt;
    &lt;accessories&gt;Sissy bar, luggage carrier,V&amp;amp;H exhaust pipes&lt;/accessories&gt;
  &lt;/bike&gt;
  &lt;date&gt;2004.08.25&lt;/date&gt;
  &lt;bike year="1983" color="read pearl"&gt;
    &lt;name&gt;
      &lt;manufacturer&gt;Yamaha&lt;/manufacturer&gt;
      &lt;brandName&gt;XJ 400&lt;/brandName&gt;
    &lt;/name&gt;
    &lt;engine&gt;4 cylinder, 400 cc&lt;/engine&gt;
    &lt;kind&gt;alround&lt;/kind&gt;
    &lt;drive&gt;chain&lt;/drive&gt;
    &lt;comment&gt;Good shape!&lt;/comment&gt;
  &lt;/bike&gt;
&lt;/motorcycles&gt;
</fo:block>    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">and motorcycles.dtd looks like: </fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;!ELEMENT motorcycles (bike,date?)+ &gt;
&lt;!ELEMENT bike        (name,engine,kind,drive, accessories?,comment?) &gt;
&lt;!ELEMENT name        (manufacturer,brandName,additionalName?) &gt;
&lt;!ELEMENT manufacturer       (#PCDATA)&gt;
&lt;!ELEMENT brandName         (#PCDATA)&gt;
&lt;!ELEMENT additionalName    (#PCDATA)&gt;
&lt;!ELEMENT engine             (#PCDATA)&gt;
&lt;!ELEMENT kind               (#PCDATA)&gt;
&lt;!ELEMENT drive              (#PCDATA)&gt;
&lt;!ELEMENT comment            (#PCDATA)&gt;
&lt;!ELEMENT accessories        (#PCDATA)&gt;

&lt;!-- Date of the format yyyy.mm.dd --&gt;
&lt;!ELEMENT date              (#PCDATA)&gt;
&lt;!ATTLIST  bike year NMTOKEN #REQUIRED
                color NMTOKENS #REQUIRED
                condition (useless | bad | serviceable | moderate | good |
                           excellent | new | outstanding) "excellent" &gt;
</fo:block>    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you want to parse the XML file motorcycles.xml you run
      it in the Erlang shell like:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
3&gt; {ParsResult,Misc}=xmerl_scan:file("motorcycles.xml"). 
{{xmlElement,motorcycles,
             motorcycles,
             [],
             {xmlNamespace,[],[]},
             [],
             1,
             [],
             [{xmlText,[{motorcycles,1}],1,[],"\
  ",text},
              {xmlElement,bike,
                          bike,
                          [],
                          {xmlNamespace,[],[]},
                          [{motorcycles,1}],
                          2,
                          [{xmlAttribute,year,[],[],[],[]|...},
                           {xmlAttribute,color,[],[],[]|...}],
                          [{xmlText,[{bike,2},{motorcycles|...}],
                                    1,
                                    []|...},
                           {xmlElement,name,name,[]|...},
                           {xmlText,[{...}|...],3|...},
                           {xmlElement,engine|...},
                           {xmlText|...},
                           {...}|...],
                          [],
                          ".",
                          undeclared},
              ...
              ],
             [],
             ".",
             undeclared},
 []}
4&gt;     </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you instead receives the XML doc as a string you can
      parse it by <fo:inline font-family="monospace">xmerl_scan:string/1</fo:inline>. Both file/2 and string/2
      exists where the second argument is a list of options to the
      parser, see the <fo:inline font-style="italic">reference manual</fo:inline>.</fo:block>
  <fo:block id="idp416464" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.4 
      Example: Extracting Data From XML Content</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this example consider the situation where you want to
      examine a particular data in the XML file. For instance, you
      want to check for how long each motorcycle have been recorded.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Take a look at the DTD and observe that the structure of an
      XML document that is conformant to this DTD must have one
      motorcycles element (the root element). The motorcycles element
      must have at least one bike element. After each bike element it
      may be a date element. The content of the date element is
      #PCDATA (Parsed Character DATA), i.e. raw text. Observe that if
      #PCDATA must have a <fo:inline font-family="monospace">"&lt;"</fo:inline> or a <fo:inline font-family="monospace">"&amp;"</fo:inline> character it must
      be written as <fo:inline font-family="monospace">"&amp;lt;"</fo:inline> and <fo:inline font-family="monospace">"&amp;amp;"</fo:inline>
      respectively. Also other character entities exists similar to
      the ones in HTML and SGML.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you successfully parse the XML file with the validation
      on as in:
      <fo:inline font-family="monospace">xmerl_scan:file('motorcycles.xml',[{validation,true}])</fo:inline>
      you know that the XML document is valid and has the structure
      according to the DTD.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Thus, knowing the allowed structure it is easy to write a
      program that traverses the data structure and picks the
      information in the xmlElements records with name date.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Observe that white space: each space, tab or line feed,
      between mark-up results in an xmlText record.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
  <fo:block id="idm23040" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.5 
      Example: Create XML Out Of Arbitrary Data</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For this task there are more than one way to go. The "brute
      force" method is to create the records you need and feed your
      data in the content and attribute fields of the appropriate
      element.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There is support for this in xmerl by the "simple-form"
      format. You can put your data in a simple-form data structure
      and feed it into
      <fo:inline font-family="monospace">xmerl:export_simple(Content,Callback,RootAttributes)</fo:inline>. Content
      may be a mixture of simple-form and xmerl records as xmlElement
      and xmlText.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Types are:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Content = [Element]</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Callback = atom()</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>RootAttributes = [Attributes]</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Element is any of:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>{Tag, Attributes, Content}</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>{Tag, Content}</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Tag</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>IOString</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>#xmlText{}</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>#xmlElement{}</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>#xmlPI{}</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>#xmlComment{}</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>#xmlDecl{}</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The simple-form structure is any of <fo:inline font-family="monospace">{Tag, Attributes, Content}</fo:inline>, <fo:inline font-family="monospace">{Tag, Content}</fo:inline> or <fo:inline font-family="monospace">Tag</fo:inline> where:</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Tag = atom()</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Attributes = [{Name, Value}| #xmlAttribute{}]</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Name = atom()</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Value = IOString | atom() | integer()</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also reference manual for 
      <fo:inline font-style="italic">xmerl</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you want to add the information about a black Harley
      Davidsson 1200 cc Sportster motorcycle from 2003 that is in
      shape as new in the motorcycles.xml document you can put the
      data in a simple-form data structure like:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Data =
  {bike,
     [{year,"2003"},{color,"black"},{condition,"new"}],
     [{name,
         [{manufacturer,["Harley Davidsson"]},
          {brandName,["XL1200C"]},
          {additionalName,["Sportster"]}]},
      {engine,
         ["V-engine, 2-cylinders, 1200 cc"]},
      {kind,["custom"]},
      {drive,["belt"]}]}    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In order to append this data to the end of the
      motorcycles.xml document you have to parse the file and add Data
      to the end of the root element content.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
    {RootEl,Misc}=xmerl_scan:file('motorcycles.xml'),
    #xmlElement{content=Content} = RootEl,
    NewContent=Content++lists:flatten([Data]),
    NewRootEl=RootEl#xmlElement{content=NewContent},    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Then you can run it through the export_simple/2 function: </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
    {ok,IOF}=file:open('new_motorcycles.xml',[write]),
    Export=xmerl:export_simple([NewRootEl],xmerl_xml),
    io:format(IOF,"~s~n",[lists:flatten(Export)]),    </fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The result would be: </fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

&lt;?xml version="1.0"?&gt;&lt;motorcycles&gt;
  &lt;bike year="2000" color="black"&gt;
    &lt;name&gt;
      &lt;manufacturer&gt;Suzuki&lt;/manufacturer&gt;
      &lt;brandName&gt;Suzuki VL 1500&lt;/brandName&gt;
      &lt;additionalName&gt;Intruder&lt;/additionalName&gt;
    &lt;/name&gt;
    &lt;engine&gt;V-engine, 2-cylinders, 1500 cc&lt;/engine&gt;
    &lt;kind&gt;custom&lt;/kind&gt;
    &lt;drive&gt;cardan&lt;/drive&gt;
    &lt;accessories&gt;Sissy bar, luggage carrier,V&amp;amp;H exhaust pipes&lt;/accessories&gt;
  &lt;/bike&gt;
  &lt;date&gt;2004.08.25&lt;/date&gt;
  &lt;bike year="1983" color="read pearl"&gt;
    &lt;name&gt;
      &lt;manufacturer&gt;Yamaha&lt;/manufacturer&gt;
      &lt;brandName&gt;XJ 400&lt;/brandName&gt;
    &lt;/name&gt;
    &lt;engine&gt;4 cylinder, 400 cc&lt;/engine&gt;
    &lt;kind&gt;alround&lt;/kind&gt;
    &lt;drive&gt;chain&lt;/drive&gt;
    &lt;comment&gt;Good shape!&lt;/comment&gt;
  &lt;/bike&gt;
&lt;bike year="2003" color="black" condition="new"&gt;&lt;name&gt;&lt;manufacturer&gt;Harley Davidsson&lt;/manufacturer&gt;&lt;brandName&gt;XL1200C&lt;/brandName&gt;&lt;additionalName&gt;Sportster&lt;/additionalName&gt;&lt;/name&gt;&lt;engine&gt;V-engine, 2-cylinders, 1200 cc&lt;/engine&gt;&lt;kind&gt;custom&lt;/kind&gt;&lt;drive&gt;belt&lt;/drive&gt;&lt;/bike&gt;&lt;/motorcycles&gt;
</fo:block>    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If it is important to get similar indentation and newlines
      as in the original document you have to add #xmlText{} records
      with space and newline values in appropriate places. It may also
      be necessary to keep the original prolog where the DTD is
      referenced. If so, it is possible to pass a RootAttribute
      <fo:inline font-family="monospace">{prolog,Value}</fo:inline> to <fo:inline font-family="monospace">export_simple/3</fo:inline>. The following
      example code fixes those changes in the previous example:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
    Data =
      [#xmlText{value="  "},
       {bike,[{year,"2003"},{color,"black"},{condition,"new"}],
             [#xmlText{value="\
    "},
              {name,[#xmlText{value="\
      "},
                     {manufacturer,["Harley Davidsson"]},
                     #xmlText{value="\
      "},
                     {brandName,["XL1200C"]},
                     #xmlText{value="\
      "},
                     {additionalName,["Sportster"]},
                     #xmlText{value="\
    "}]},
              {engine,["V-engine, 2-cylinders, 1200 cc"]},
              #xmlText{value="\
    "},
              {kind,["custom"]},
              #xmlText{value="\
    "},
              {drive,["belt"]},
              #xmlText{value="\
  "}]},
       #xmlText{value="\
"}],
    ...
    NewContent=Content++lists:flatten([Data]),
    NewRootEl=RootEl#xmlElement{content=NewContent},
    ...
    Prolog = ["&lt;?xml version=\\"1.0\\" encoding=\\"utf-8\\" ?&gt;
&lt;!DOCTYPE motorcycles SYSTEM \\"motorcycles.dtd\\"&gt;\
"],
    Export=xmerl:export_simple([NewRootEl],xmerl_xml,[{prolog,Prolog}]),
    ...    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The result will be: </fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;!DOCTYPE motorcycles SYSTEM "motorcycles.dtd"&gt;
&lt;motorcycles&gt;
  &lt;bike year="2000" color="black"&gt;
    &lt;name&gt;
      &lt;manufacturer&gt;Suzuki&lt;/manufacturer&gt;
      &lt;brandName&gt;Suzuki VL 1500&lt;/brandName&gt;
      &lt;additionalName&gt;Intruder&lt;/additionalName&gt;
    &lt;/name&gt;
    &lt;engine&gt;V-engine, 2-cylinders, 1500 cc&lt;/engine&gt;
    &lt;kind&gt;custom&lt;/kind&gt;
    &lt;drive&gt;cardan&lt;/drive&gt;
    &lt;accessories&gt;Sissy bar, luggage carrier,V&amp;amp;H exhaust pipes&lt;/accessories&gt;
  &lt;/bike&gt;
  &lt;date&gt;2004.08.25&lt;/date&gt;
  &lt;bike year="1983" color="read pearl"&gt;
    &lt;name&gt;
      &lt;manufacturer&gt;Yamaha&lt;/manufacturer&gt;
      &lt;brandName&gt;XJ 400&lt;/brandName&gt;
    &lt;/name&gt;
    &lt;engine&gt;4 cylinder, 400 cc&lt;/engine&gt;
    &lt;kind&gt;alround&lt;/kind&gt;
    &lt;drive&gt;chain&lt;/drive&gt;
    &lt;comment&gt;Good shape!&lt;/comment&gt;
  &lt;/bike&gt;
  &lt;bike year="2003" color="black" condition="new"&gt;
    &lt;name&gt;
      &lt;manufacturer&gt;Harley Davidsson&lt;/manufacturer&gt;
      &lt;brandName&gt;XL1200C&lt;/brandName&gt;
      &lt;additionalName&gt;Sportster&lt;/additionalName&gt;
    &lt;/name&gt;&lt;engine&gt;V-engine, 2-cylinders, 1200 cc&lt;/engine&gt;
    &lt;kind&gt;custom&lt;/kind&gt;
    &lt;drive&gt;belt&lt;/drive&gt;
  &lt;/bike&gt;
&lt;/motorcycles&gt;
</fo:block>  <fo:block id="idp427472" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.6 
      Example: Transforming XML To HTML</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Assume that you want to transform the <fo:inline font-style="italic">motorcycles.xml</fo:inline> document to
      HTML. If you want the same structure and tags of the resulting
      HTML document as of the XML document then you can use the
      <fo:inline font-family="monospace">xmerl:export/2</fo:inline> function. The following:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
2&gt; {Doc,Misc}=xmerl_scan:file('motorcycles.xml').
{{xmlElement,motorcycles,
             motorcycles,
             [],
             {xmlNamespace,[],[]},
             [],
             1,
             [],
             [{xmlText,[{motorcycles,1}],1,[],"\
  ",text},
              {xmlElement,bike,
...
3&gt; DocHtml=xmerl:export([Doc],xmerl_html).
["&lt;!DOCTYPE HTML PUBLIC \\"",
 "-//W3C//DTD HTML 4.01 Transitional//EN",
 "\\"",
 [],
 "&gt;\
",
 [[["&lt;","motorcycles","&gt;"],
   ["\
  ",
    [["&lt;",
      "bike",
      [[" ","year","=\\"","2000","\\""],[" ","color","=\\"","black","\\""]],
      "&gt;"],
...    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Will give the result <fo:inline font-weight="bold"><fo:basic-link external-destination="href">result_export.html</fo:basic-link></fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Perhaps you want to do something more arranged for human
      reading. Suppose that you want to list all different brands in
      the beginning with links to each group of motorcycles. You also
      want all motorcycles sorted by brand, then some flashy colors
      on top of it. Thus you rearrange the order of the elements and
      put in arbitrary HTML tags. This is possible to do by means of
      the <fo:inline font-weight="bold"><fo:basic-link external-destination="href">XSL Transformation (XSLT)</fo:basic-link></fo:inline> like functionality in xmerl. </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Even though the following example shows one way to transform data
      from XML to HTML it also applies to transformations to other
      formats.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">xmerl_xs</fo:inline> does not implement the entire XSLT
      specification but the basic functionality. For all details see
      the <fo:inline font-style="italic">reference manual</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">First, some words about the xmerl_xs functionality:</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">You need to write template functions to be able to control
      what kind of output you want. Thus if you want to encapsulate a
      <fo:inline font-family="monospace">bike</fo:inline> element in &lt;p&gt; tags you simply write a
      function:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
template(E = #xmlElement{name='bike'}) -&gt;
    ["&lt;p&gt;",xslapply(fun template/1,E),"&lt;/p&gt;"];    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">With <fo:inline font-family="monospace">xslapply</fo:inline> you tell the XSLT processor in which
      order it should traverse the XML structure. By default it goes
      in preorder traversal, but with the following we make a
      deliberate choice to break that order:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
template(E = #xmlElement{name='bike'}) -&gt;
    ["&lt;p&gt;",xslapply(fun template/1,select("bike/name/manufacturer")),"&lt;/p&gt;"];    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you want to output the content of an XML element or an attribute you will get the value as a string by the <fo:inline font-family="monospace">value_of</fo:inline> function:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
template(E = #xmlElement{name='motorcycles'}) -&gt;
    ["&lt;p&gt;",value_of(select("bike/name/manufacturer",E),"&lt;/p&gt;"];    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the xmerl_xs functions you can provide a select(String)
      call, which is an <fo:inline font-weight="bold"><fo:basic-link external-destination="href">XPath</fo:basic-link></fo:inline>
      functionality. For more details see the xmerl_xs <fo:inline font-weight="bold"><fo:basic-link external-destination="href">tutorial</fo:basic-link></fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Now, back to the example where we wanted to make the output
      more arranged. With the template:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
template(E = #xmlElement{name='motorcycles'}) -&gt;
    [    "&lt;head&gt;\
&lt;title&gt;motorcycles&lt;/title&gt;\
&lt;/head&gt;\
",
         "&lt;body&gt;\
",
\011 "&lt;h1&gt;Used Motorcycles&lt;/h1&gt;\
",
\011 "&lt;ul&gt;\
",
\011 remove_duplicates(value_of(select("bike/name/manufacturer",E))),
\011 "\
&lt;/ul&gt;\
",
\011 sort_by_manufacturer(xslapply(fun template/1, E)),
         "&lt;/body&gt;\
",
\011 "&lt;/html&gt;\
"];    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">We match on the top element and embed the inner parts in an
      HTML body. Then we extract the string values of all motorcycle
      brands, sort them and removes duplicates by
      <fo:inline font-family="monospace">remove_duplicates(value_of(select("bike/name/manufacturer", E)))</fo:inline>. We also process the substructure of the top element
      and pass it to a function that sorts all motorcycle information
      by brand according to the task formulation in the beginning of
      this example.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The next template matches on the <fo:inline font-family="monospace">bike</fo:inline> element:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
template(E = #xmlElement{name='bike'}) -&gt;
    {value_of(select("name/manufacturer",E)),["&lt;dt&gt;",xslapply(fun template/1,select("name",E)),"&lt;/dt&gt;",
    "&lt;dd&gt;&lt;ul&gt;\
",
    "&lt;li style="color:green"&gt;Manufacturing year: ",xslapply(fun template/1,select("@year",E)),"&lt;/li&gt;\
",
    "&lt;li style="color:red"&gt;Color: ",xslapply(fun template/1,select("@color",E)),"&lt;/li&gt;\
",
    "&lt;li style="color:blue"&gt;Shape : ",xslapply(fun template/1,select("@condition",E)),"&lt;/li&gt;\
",
    "&lt;/ul&gt;&lt;/dd&gt;\
"]};    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This creates a tuple with the brand of the motorcycle and
      the output format. We use the brand name only for sorting
      purpose. We have to end the template function with the "built
      in clause" <fo:inline font-family="monospace">template(E) -&gt; built_in_rules(fun template/1, E).</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The entire program is motorcycles2html.erl:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

%%%-------------------------------------------------------------------
%%% File    : motorcycles2html.erl
%%% Author  : Bertil Karlsson &lt;bertil@localhost.localdomain&gt;
%%% Description : 
%%%
%%% Created :  2 Sep 2004 by Bertil Karlsson &lt;bertil@localhost.localdomain&gt;
%%%-------------------------------------------------------------------
-module(motorcycles2html).

-include_lib("xmerl/include/xmerl.hrl").

-import(xmerl_xs, 
	[ xslapply/2, value_of/1, select/2, built_in_rules/2 ]).

-export([process_xml/1,process_to_file/2,process_to_file/1]).

process_xml(Doc) -&gt;
    template(Doc).

process_to_file(FileName) -&gt;
    process_to_file(FileName,'motorcycles.xml').

process_to_file(FileName,XMLDoc) -&gt;
    case file:open(FileName,[write]) of
	{ok,IOF} -&gt;
	    {XMLContent,_} = xmerl_scan:file(XMLDoc),
	    TransformedXML=process_xml(XMLContent),
	    io:format(IOF,"~s",[TransformedXML]),
	    file:close(IOF);
	{error,Reason} -&gt;
	    io:format("could not open file due to ~p.~n",[Reason])
    end.

%%% templates
template(E = #xmlElement{name='motorcycles'}) -&gt;
    [    "&lt;head&gt;\n&lt;title&gt;motorcycles&lt;/title&gt;\n&lt;/head&gt;\n",
         "&lt;body&gt;\n",
	 "&lt;h1&gt;Used Motorcycles&lt;/h1&gt;\n",
	 "&lt;ul&gt;\n",
	 remove_duplicates(value_of(select("bike/name/manufacturer",E))),
	 "\n&lt;/ul&gt;\n",
	 sort_by_manufacturer(xslapply(fun template/1, E)),
         "&lt;/body&gt;\n",
	 "&lt;/html&gt;\n"];
template(E = #xmlElement{name='bike'}) -&gt;
    {value_of(select("name/manufacturer",E)),["&lt;dt&gt;",xslapply(fun template/1,select("name",E)),"&lt;/dt&gt;",
    "&lt;dd&gt;&lt;ul&gt;\n",
    "&lt;li style=\"color:green\"&gt;Manufacturing year: ",xslapply(fun template/1,select("@year",E)),"&lt;/li&gt;\n",
    "&lt;li style=\"color:red\"&gt;Color: ",xslapply(fun template/1,select("@color",E)),"&lt;/li&gt;\n",
    "&lt;li style=\"color:blue\"&gt;Shape : ",xslapply(fun template/1,select("@condition",E)),"&lt;/li&gt;\n",
    "&lt;/ul&gt;&lt;/dd&gt;\n"]};
template(E) -&gt; built_in_rules(fun template/1, E).


%%%%%%%%%%% helper routines  

%% sorts on the bike name element, unwraps the bike information and
%% inserts a line feed and indentation on each bike element.
sort_by_manufacturer(L) -&gt;
    Tuples=[X1||X1={_,_} &lt;- L],
    SortedTS = lists:keysort(1,Tuples),
    InsertRefName_UnWrap=
	fun([{[Name],V}|Rest],Name,F)-&gt;
		[V|F(Rest,Name,F)];
	   ([{[Name],V}|Rest],_PreviousName,F) -&gt;
		[["&lt;a name=\"",Name,"\"&gt;&lt;/&gt;"],V|F(Rest,Name,F)];
	   ([],_,_) -&gt; []
	end,
    SortedRefed=InsertRefName_UnWrap(SortedTS,no_name,InsertRefName_UnWrap),
%    SortedTs=[Y||{X,Y}&lt;-lists:keysort(1,Tuples)],
    WS = "\n    ",
    Fun=fun([H|T],Acc,F)-&gt;
		F(T,[H,WS|Acc],F);
	   ([],Acc,_F)-&gt;
		lists:reverse([WS|Acc])
	end,
    if length(SortedRefed) &gt; 0 -&gt;
	    Fun(SortedRefed,[],Fun);
       true -&gt; []
    end.

    
%% removes all but the first of an element in L and inserts a html
%% reference for each list element.
remove_duplicates(L) -&gt;
    remove_duplicates(L,[]).

remove_duplicates([],Acc) -&gt; 
    make_ref(lists:sort(lists:reverse(Acc)));
remove_duplicates([A|L],Acc) -&gt; 
    case lists:delete(A,L) of
	L -&gt;
	    remove_duplicates(L,[A|Acc]);
	L1 -&gt; 
	    remove_duplicates([A|L1],[Acc])
    end.

make_ref([]) -&gt; [];
make_ref([H]) when is_atom(H) -&gt;
    "&lt;ul&gt;&lt;a href=\"#"++atom_to_list(H)++"\"&gt;"++atom_to_list(H)++"&lt;/a&gt;&lt;/ul&gt;";
make_ref([H]) when is_list(H) -&gt;
    "&lt;ul&gt;&lt;a href=\"#"++H++"\"&gt;\s"++H++"&lt;/a&gt;&lt;/ul&gt;";
make_ref([H|T]) when is_atom(H) -&gt;
    ["&lt;ul&gt;&lt;a href=\"#"++atom_to_list(H)++"\"&gt;\s"++atom_to_list(H)++",\n&lt;/a&gt;&lt;/ul&gt;"
     |make_ref(T)];
make_ref([H|T]) when is_list(H) -&gt;
    ["&lt;ul&gt;&lt;a href=\"#"++H++"\"&gt;\s"++H++",\n&lt;/a&gt;&lt;/ul&gt;"|make_ref(T)].
</fo:block>    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If we run it like this:
      <fo:inline font-family="monospace">motorcycles2html:process_to_file('result_xs.html', 'motorcycles2.xml').</fo:inline> The result will be <fo:inline font-weight="bold"><fo:basic-link external-destination="href">result_xs.html</fo:basic-link></fo:inline>. When the
      input file is of the same structure as the previous
      "motorcycles" XML files but it has a little more 'bike'
      elements and the 'manufacturer' elements are not in order.</fo:block>
  <fo:block id="idp35520" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">2   
      Reference Manual</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-weight="bold">xmerl</fo:inline> application 
      contains modules with support for processing of xml files compliant to XML 1.0.</fo:block>
  <fo:block page-break-before="always" id="idp1188944" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">xmerl_scan</fo:marker>xmerl_scan</fo:block>Erlang module</fo:block>
<fo:block/>
xmerl_scan
<fo:block/>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module is the interface to the XML parser, it handles XML 1.0.
      The XML parser is activated through
      <fo:inline font-family="monospace">xmerl_scan:string/[1,2]</fo:inline> or
      <fo:inline font-family="monospace">xmerl_scan:file/[1,2]</fo:inline>.
      It returns records of the type defined in xmerl.hrl.
  See also <fo:inline font-weight="bold"><fo:basic-link external-destination="href">tutorial</fo:basic-link></fo:inline> on customization
  functions.</fo:block>
<fo:block id="idp1185360" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">DATA TYPES</fo:block>

<fo:block space-after="0.25em" space-before="0.25em">
<fo:block keep-with-next.within-page="always">document() = <fo:inline font-style="italic">xmlElement()</fo:inline> | <fo:inline font-style="italic">xmlDocument()</fo:inline></fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  The document returned by <fo:inline font-family="monospace">xmerl_scan:string/[1,2]</fo:inline> and
  <fo:inline font-family="monospace">xmerl_scan:file/[1,2]</fo:inline>. The type of the returned record depends on
  the value of the document option passed to the function.
  </fo:block>
</fo:block></fo:block-container>
<fo:block keep-with-next.within-page="always">global_state()</fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  The global state of the scanner, represented by the #xmerl_scanner{} record.
  </fo:block>
</fo:block></fo:block-container>
<fo:block keep-with-next.within-page="always">option_list()</fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Options allow to customize the behaviour of the
      scanner.
  See also <fo:inline font-weight="bold"><fo:basic-link external-destination="href">tutorial</fo:basic-link></fo:inline> on customization
  functions.
  </fo:block>
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  Possible options are:
  </fo:block>
  <fo:block space-after="0.25em" space-before="0.25em">
   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{acc_fun, Fun}</fo:inline></fo:block>
     <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Call back function to accumulate contents of entity.</fo:block></fo:block></fo:block-container>
   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{continuation_fun, Fun} |
             {continuation_fun, Fun, ContinuationState}</fo:inline></fo:block>
     <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Call back function to decide what to do if the scanner runs into EOF
      before the document is complete.</fo:block></fo:block></fo:block-container>
   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{event_fun, Fun} |
             {event_fun, Fun, EventState}</fo:inline></fo:block>
     <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Call back function to handle scanner events.</fo:block></fo:block></fo:block-container>
   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{fetch_fun, Fun} |
             {fetch_fun, Fun, FetchState}</fo:inline></fo:block>
     <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Call back function to fetch an external resource.</fo:block></fo:block></fo:block-container>
   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{hook_fun, Fun} |
             {hook_fun, Fun, HookState}</fo:inline></fo:block>
     <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Call back function to process the document entities once
      identified.</fo:block></fo:block></fo:block-container>
   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{close_fun, Fun}</fo:inline></fo:block>
     <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Called when document has been completely parsed.</fo:block></fo:block></fo:block-container>
   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{rules, ReadFun, WriteFun, RulesState} |
             {rules, Rules}</fo:inline></fo:block>
     <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Handles storing of scanner information when parsing.</fo:block></fo:block></fo:block-container>
   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{user_state, UserState}</fo:inline></fo:block>
     <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Global state variable accessible from all customization functions</fo:block></fo:block></fo:block-container>
 
   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{fetch_path, PathList}</fo:inline></fo:block>
     <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">PathList is a list of
      directories to search when fetching files. If the file in question
      is not in the fetch_path, the URI will be used as a file
      name.</fo:block></fo:block></fo:block-container>
   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{space, Flag}</fo:inline></fo:block>
     <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">'preserve' (default) to preserve spaces, 'normalize' to
     accumulate consecutive whitespace and replace it with one space.</fo:block></fo:block></fo:block-container>
   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{line, Line}</fo:inline></fo:block>
     <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To specify starting line for scanning in document which contains
     fragments of XML.</fo:block></fo:block></fo:block-container>
   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{namespace_conformant, Flag}</fo:inline></fo:block>
     <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Controls whether to behave as a namespace conformant XML parser,
     'false' (default) to not otherwise 'true'.</fo:block></fo:block></fo:block-container>
   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{validation, Flag}</fo:inline></fo:block>
     <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Controls whether to process as a validating XML parser:
     'off' (default) no validation, or validation 'dtd' by DTD or 'schema'
     by XML Schema. 'false' and 'true' options are obsolete
     (i.e. they may be removed in a future release), if used 'false'
     equals 'off' and 'true' equals 'dtd'.</fo:block></fo:block></fo:block-container>
   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{schemaLocation, [{Namespace,Link}|...]}</fo:inline></fo:block>
     <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tells explicitly which XML Schema documents to use to validate
     the XML document. Used together with the
     <fo:inline font-family="monospace">{validation,schema}</fo:inline> option.</fo:block></fo:block></fo:block-container>
   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{quiet, Flag}</fo:inline></fo:block>
     <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Set to 'true' if xmerl should behave quietly and not output any
     information to standard output (default 'false').</fo:block></fo:block></fo:block-container>
   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{doctype_DTD, DTD}</fo:inline></fo:block>
     <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allows to specify DTD name when it isn't available in the XML
     document. This option has effect only together with
     <fo:inline font-family="monospace">{validation,'dtd'</fo:inline> option.</fo:block></fo:block></fo:block-container>
   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{xmlbase, Dir}</fo:inline></fo:block>
     <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">XML Base directory. If using string/1 default is current directory.
     If using file/1 default is directory of given file.</fo:block></fo:block></fo:block-container>
   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{encoding, Enc}</fo:inline></fo:block>
     <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Set default character set used (default UTF-8).
     This character set is used only if not explicitly given by the XML
     declaration. </fo:block></fo:block></fo:block-container>
   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{document, Flag}</fo:inline></fo:block>
     <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Set to 'true' if xmerl should return a complete XML document
     as an xmlDocument record (default 'false').</fo:block></fo:block></fo:block-container>
   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{comments, Flag}</fo:inline></fo:block>
     <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Set to 'false' if xmerl should skip comments otherwise they will
     be returned as xmlComment records (default 'true').</fo:block></fo:block></fo:block-container>
   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{default_attrs, Flag}</fo:inline></fo:block>
     <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Set to 'true' if xmerl should add to elements missing attributes
     with a defined default value (default 'false').</fo:block></fo:block></fo:block-container>
  </fo:block>
</fo:block></fo:block-container>
<fo:block keep-with-next.within-page="always">xmlDocument() = #xmlDocument{}</fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The record definition is found in xmerl.hrl.</fo:block>
</fo:block></fo:block-container>
<fo:block keep-with-next.within-page="always">xmlElement() = #xmlElement{}</fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The record definition is found in xmerl.hrl.</fo:block>
</fo:block></fo:block-container>
</fo:block>
<fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp967872">accumulate_whitespace(T::string(), S::global_state(), X3::atom(), Acc::string()) -&gt; {Acc, T1, S1}</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Function to accumulate and normalize whitespace.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp964944">cont_state(S::global_state()) -&gt; global_state()</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">cont_state(ContinuationState, S)</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp959888">cont_state(X::ContinuationState, S::global_state()) -&gt; global_state()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For controlling the ContinuationState, to be used in a continuation
   function, and called when the parser encounters the end of the byte stream.
   See <fo:inline font-weight="bold"><fo:basic-link external-destination="href">tutorial</fo:basic-link></fo:inline> on customization functions.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp956816">event_state(S::global_state()) -&gt; global_state()</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">event_state(EventState, S)</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp952768">event_state(X::EventState, S::global_state()) -&gt; global_state()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For controlling the EventState, to be used in an event
   function, and called at the beginning and at the end of a parsed entity.
   See <fo:inline font-weight="bold"><fo:basic-link external-destination="href">tutorial</fo:basic-link></fo:inline> on customization functions.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp949536">fetch_state(S::global_state()) -&gt; global_state()</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">fetch_state(FetchState, S)</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp944848">fetch_state(X::FetchState, S::global_state()) -&gt; global_state()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For controlling the FetchState, to be used in a fetch
   function, and called when the parser fetch an external resource (eg. a DTD).
   See <fo:inline font-weight="bold"><fo:basic-link external-destination="href">tutorial</fo:basic-link></fo:inline> on customization functions.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp940672">file(Filename::string()) -&gt; {xmlElement(), Rest}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Rest = list()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">file(Filename, [])</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1128016">file(Filename::string(), Options::option_list()) -&gt; {document(), Rest}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Rest = list()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parse file containing an XML document</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1124272">hook_state(S::global_state()) -&gt; global_state()</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">hook_state(HookState, S)</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp395584">hook_state(X::HookState, S::global_state()) -&gt; global_state()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For controlling the HookState, to be used in a hook
   function, and called when the parser has parsed a complete entity.
   See <fo:inline font-weight="bold"><fo:basic-link external-destination="href">tutorial</fo:basic-link></fo:inline> on customization functions.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp391840">rules_state(S::global_state()) -&gt; global_state()</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">rules_state(RulesState, S)</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp648032">rules_state(X::RulesState, S::global_state()) -&gt; global_state()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For controlling the RulesState, to be used in a rules
   function, and called when the parser store scanner information in a rules
   database.
   See <fo:inline font-weight="bold"><fo:basic-link external-destination="href">tutorial</fo:basic-link></fo:inline> on customization functions.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp648160">string(Text::list()) -&gt; {xmlElement(), Rest}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Rest = list()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">string(Test, [])</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp315600">string(Text::list(), Options::option_list()) -&gt; {document(), Rest}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Rest = list()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parse string containing an XML document</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp698304">user_state(S::global_state()) -&gt; global_state()</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">user_state(UserState, S)</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp375872">user_state(X::UserState, S::global_state()) -&gt; global_state()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For controlling the UserState, to be used in a user function.
   See <fo:inline font-weight="bold"><fo:basic-link external-destination="href">tutorial</fo:basic-link></fo:inline> on customization functions.</fo:block>
</fo:block>


 
 <fo:block page-break-before="always" id="idp351376" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">xmerl</fo:marker>xmerl</fo:block>Erlang module</fo:block>
<fo:block/>
xmerl
<fo:block/>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Functions for exporting XML data to an external format.
 </fo:block>
<fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp736672">callbacks(Module) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = [atom()]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Find the list of inherited callback modules for a given module.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp378960">export(Content, Callback) -&gt; ExportedFormat</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">export(Data, Callback, [])</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp334400">export(Content, Callback, RootAttributes) -&gt; ExportedFormat</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Content = [Element]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Callback = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">RootAttributes = [XmlAttributes]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Exports normal, well-formed XML content, using the specified
  callback-module.
  </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Element</fo:inline> is any of:</fo:block>
  <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
  	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">#xmlText{}</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
 	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">#xmlElement{}</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
 	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">#xmlPI{}</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
 	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">#xmlComment{}</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
 	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">#xmlDecl{}</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
  </fo:list-block>
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">(See <fo:inline font-family="monospace">xmerl.hrl</fo:inline> for the record definitions.)
  Text in <fo:inline font-family="monospace">#xmlText{}</fo:inline> elements can be deep lists of
  characters and/or binaries.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">RootAttributes</fo:inline> is a list of
  <fo:inline font-family="monospace">#xmlAttribute{}</fo:inline> attributes for the <fo:inline font-family="monospace">#root#</fo:inline>
  element, which implicitly becomes the parent of the given
  <fo:inline font-family="monospace">Content</fo:inline>. The tag-handler function for
  <fo:inline font-family="monospace">#root#</fo:inline> is thus called with the complete exported data of
  <fo:inline font-family="monospace">Content</fo:inline>. Root attributes can be used to specify
  e.g. encoding or other metadata of an XML or HTML document.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Callback</fo:inline> module should contain hook functions for
  all tags present in the data structure. A hook function must have the
  following format:</fo:block>
  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">    Tag(Data, Attributes, Parents, E)</fo:block>
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">where <fo:inline font-family="monospace">E</fo:inline> is the corresponding <fo:inline font-family="monospace">#xmlElement{}</fo:inline>,
  <fo:inline font-family="monospace">Data</fo:inline> is the already-exported contents of <fo:inline font-family="monospace">E</fo:inline>
  and <fo:inline font-family="monospace">Attributes</fo:inline> is the list of
  <fo:inline font-family="monospace">#xmlAttribute{}</fo:inline> records of <fo:inline font-family="monospace">E</fo:inline>. Finally,
  <fo:inline font-family="monospace">Parents</fo:inline> is the list of parent nodes of <fo:inline font-family="monospace">E</fo:inline>,
  on the form <fo:inline font-family="monospace">[{ParentTag::atom(),
  ParentPosition::integer()}]</fo:inline>.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The hook function should return either the data to be exported, or
  a tuple <fo:inline font-family="monospace">{'#xml-alias#', NewTag::atom()}</fo:inline>, or a tuple
  <fo:inline font-family="monospace">{'#xml-redefine#', Content}</fo:inline>, where <fo:inline font-family="monospace">Content</fo:inline>
  is a content list (which can be on simple-form; see
  <fo:inline font-family="monospace">export_simple/2</fo:inline> for details).</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A callback module can inherit definitions from other callback
  modules, through the required function <fo:inline font-family="monospace">'#xml-interitance#() -&gt;
  [ModuleName::atom()]</fo:inline>.</fo:block>
 
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">export/2</fo:inline>, <fo:inline font-style="italic">export_simple/3</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1209328">export_content(Es::Content, Callbacks) -&gt; term()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Content = [Element]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Callback = [atom()]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Exports normal XML content directly, without further context.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1011232">export_element(E, CB) -&gt; term()
</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Exports a normal XML element directly, without further context.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1013504">export_element(E, CallbackModule, CallbackState) -&gt; ExportedFormat</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For on-the-fly exporting during parsing (SAX style) of the XML
  document.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1015776">export_simple(Content, Callback) -&gt; ExportedFormat</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">export_simple(Content, Callback, [])</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1018704">export_simple(Content, Callback, RootAttrs::RootAttributes) -&gt; ExportedFormat</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Content = [Element]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Callback = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">RootAttributes = [XmlAttributes]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Exports "simple-form" XML content, using the specified
  callback-module.
  </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Element</fo:inline> is any of:</fo:block>
  <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
 	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{Tag, Attributes, Content}</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
 	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{Tag, Content}</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
 	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Tag</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
 	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">IOString</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
  	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">#xmlText{}</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
 	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">#xmlElement{}</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
 	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">#xmlPI{}</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
 	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">#xmlComment{}</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
 	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">#xmlDecl{}</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
  </fo:list-block>
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">where</fo:block>
  <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
 	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Tag = atom()</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
 	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Attributes = [{Name, Value}]</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
 	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Name = atom()</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
 	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Value = IOString | atom() | integer()</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
  </fo:list-block>
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Normal-form XML elements can thus be included in the simple-form
  representation. Note that content lists must be flat. An
  <fo:inline font-family="monospace">IOString</fo:inline> is a (possibly deep) list of characters and/or
  binaries.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">RootAttributes</fo:inline> is a list of:</fo:block>
  <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
 	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">XmlAttributes = #xmlAttribute{}</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
 </fo:list-block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See <fo:inline font-family="monospace">export/3</fo:inline> for details on the callback module and
  the root attributes. The XML-data is always converted to normal form
  before being passed to the callback module.</fo:block>
 
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">export/3</fo:inline>, <fo:inline font-style="italic">export_simple/2</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1147616">export_simple_content(Content, Callback) -&gt; term()
</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Exports simple XML content directly, without further context.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1149888">export_simple_element(Content, Callback) -&gt; term()
</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Exports a simple XML element directly, without further context.</fo:block>
</fo:block>


 
 <fo:block page-break-before="always" id="idp1234496" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">xmerl_xs</fo:marker>xmerl_xs</fo:block>Erlang module</fo:block>
<fo:block/>
xmerl_xs
<fo:block/>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
       Erlang has similarities to XSLT since both languages
 	have a functional programming approach. Using <fo:inline font-family="monospace">xmerl_xpath</fo:inline>	 
it is possible to write XSLT like transforms in Erlang.</fo:block>

     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">XSLT stylesheets are often used when transforming XML
       documents, to other XML documents or (X)HTML for presentation.
       XSLT contains quite many
       functions and learning them all may take some effort.
       This document assumes a basic level of
       understanding of XSLT.
     </fo:block>
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Since XSLT is based on a functional programming approach
       with pattern matching and recursion it is possible to write
       similar style sheets in Erlang. At least for basic
       transforms. This
       document describes how to use the XPath implementation together
       with Erlangs pattern matching and a couple of functions to write
       XSLT like transforms.</fo:block>
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This approach is probably easier for an Erlanger but
       if you need to use real XSLT stylesheets in order to "comply to
       the standard" there is an adapter available to the Sablotron
       XSLT package which is written i C++.
 See also the <fo:inline font-weight="bold"><fo:basic-link external-destination="href">Tutorial</fo:basic-link></fo:inline>.
     </fo:block>
<fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1239744">built_in_rules(Fun, E) -&gt; List</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default fallback behaviour. Template funs should end with:
  <fo:block/><fo:inline font-family="monospace">template(E) -&gt; built_in_rules(fun template/1, E)</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1242656">select(String::string(), E) -&gt; E</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Extracts the nodes from the xml tree according to XPath.</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">See also:</fo:inline> <fo:inline font-style="italic">value_of/1</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1246320">value_of(E) -&gt; List</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">E = term()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Concatenates all text nodes within the tree.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block><fo:block/><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
  &lt;xsl:template match="title"&gt;
    &lt;div align="center"&gt;
      &lt;h1&gt;&lt;xsl:value-of select="." /&gt;&lt;/h1&gt;
    &lt;/div&gt;
  &lt;/xsl:template&gt;
  </fo:block>
 
   <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">becomes:</fo:block><fo:block/> <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
   template(E = #xmlElement{name='title'}) -&gt;
     ["&lt;div align="center"&gt;&lt;h1&gt;",
       value_of(select(".", E)), "&lt;/h1&gt;&lt;/div&gt;"]
  </fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1251472">xslapply(Fun::Function, EList::list()) -&gt; List</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Function = () -&gt; list()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">xslapply is a wrapper to make things look similar to  
xsl:apply-templates.</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example, original XSLT:</fo:block><fo:block/><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
  &lt;xsl:template match="doc/title"&gt;
    &lt;h1&gt;
      &lt;xsl:apply-templates/&gt;
    &lt;/h1&gt;
  &lt;/xsl:template&gt;
  </fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">becomes in Erlang:</fo:block><fo:block/><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
  template(E = #xmlElement{ parents=[{'doc',_}|_], name='title'}) -&gt;
    ["&lt;h1&gt;",
     xslapply(fun template/1, E),
     "&lt;/h1&gt;"];
  </fo:block>
</fo:block>


 
 <fo:block page-break-before="always" id="idp701440" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">xmerl_eventp</fo:marker>xmerl_eventp</fo:block>Erlang module</fo:block>
<fo:block/>
xmerl_eventp
<fo:block/>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Simple event-based front-ends to xmerl_scan for processing
  of XML documents in streams and for parsing in SAX style.
  Each contain more elaborate settings of xmerl_scan that makes usage of
  the customization functions.
 </fo:block>
<fo:block id="idp700672" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">DATA TYPES</fo:block>

<fo:block space-after="0.25em" space-before="0.25em">
<fo:block keep-with-next.within-page="always">option_list()</fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Options allow to customize the behaviour of the
      scanner.
  See also <fo:inline font-weight="bold"><fo:basic-link external-destination="href">tutorial</fo:basic-link></fo:inline> on customization
  functions.
  </fo:block>
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  Possible options are:
  </fo:block>
  <fo:block space-after="0.25em" space-before="0.25em">
   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{acc_fun, Fun}</fo:inline></fo:block>
     <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Call back function to accumulate contents of entity.</fo:block></fo:block></fo:block-container>
   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{continuation_fun, Fun} |
             {continuation_fun, Fun, ContinuationState}</fo:inline></fo:block>
     <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Call back function to decide what to do if the scanner runs into EOF
      before the document is complete.</fo:block></fo:block></fo:block-container>
   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{event_fun, Fun} |
             {event_fun, Fun, EventState}</fo:inline></fo:block>
     <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Call back function to handle scanner events.</fo:block></fo:block></fo:block-container>
   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{fetch_fun, Fun} |
             {fetch_fun, Fun, FetchState}</fo:inline></fo:block>
     <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Call back function to fetch an external resource.</fo:block></fo:block></fo:block-container>
   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{hook_fun, Fun} |
             {hook_fun, Fun, HookState}</fo:inline></fo:block>
     <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Call back function to process the document entities once
      identified.</fo:block></fo:block></fo:block-container>
   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{close_fun, Fun}</fo:inline></fo:block>
     <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Called when document has been completely parsed.</fo:block></fo:block></fo:block-container>
   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{rules, ReadFun, WriteFun, RulesState} |
             {rules, Rules}</fo:inline></fo:block>
     <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Handles storing of scanner information when parsing.</fo:block></fo:block></fo:block-container>
   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{user_state, UserState}</fo:inline></fo:block>
     <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Global state variable accessible from all customization functions</fo:block></fo:block></fo:block-container>
 
   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{fetch_path, PathList}</fo:inline></fo:block>
     <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">PathList is a list of
      directories to search when fetching files. If the file in question
      is not in the fetch_path, the URI will be used as a file
      name.</fo:block></fo:block></fo:block-container>
   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{space, Flag}</fo:inline></fo:block>
     <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">'preserve' (default) to preserve spaces, 'normalize' to
     accumulate consecutive whitespace and replace it with one space.</fo:block></fo:block></fo:block-container>
   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{line, Line}</fo:inline></fo:block>
     <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To specify starting line for scanning in document which contains
     fragments of XML.</fo:block></fo:block></fo:block-container>
   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{namespace_conformant, Flag}</fo:inline></fo:block>
     <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Controls whether to behave as a namespace conformant XML parser,
     'false' (default) to not otherwise 'true'.</fo:block></fo:block></fo:block-container>
   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{validation, Flag}</fo:inline></fo:block>
     <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Controls whether to process as a validating XML parser:
     'off' (default) no validation, or validation 'dtd' by DTD or 'schema'
     by XML Schema. 'false' and 'true' options are obsolete
     (i.e. they may be removed in a future release), if used 'false'
     equals 'off' and 'true' equals 'dtd'.</fo:block></fo:block></fo:block-container>
   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{schemaLocation, [{Namespace,Link}|...]}</fo:inline></fo:block>
     <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tells explicitly which XML Schema documents to use to validate
     the XML document. Used together with the
     <fo:inline font-family="monospace">{validation,schema}</fo:inline> option.</fo:block></fo:block></fo:block-container>
   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{quiet, Flag}</fo:inline></fo:block>
     <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Set to 'true' if xmerl should behave quietly and not output any
     information to standard output (default 'false').</fo:block></fo:block></fo:block-container>
   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{doctype_DTD, DTD}</fo:inline></fo:block>
     <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allows to specify DTD name when it isn't available in the XML
     document. This option has effect only together with
     <fo:inline font-family="monospace">{validation,'dtd'</fo:inline> option.</fo:block></fo:block></fo:block-container>
   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{xmlbase, Dir}</fo:inline></fo:block>
     <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">XML Base directory. If using string/1 default is current directory.
     If using file/1 default is directory of given file.</fo:block></fo:block></fo:block-container>
   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{encoding, Enc}</fo:inline></fo:block>
     <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Set default character set used (default UTF-8).
     This character set is used only if not explicitly given by the XML
     declaration. </fo:block></fo:block></fo:block-container>
   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{document, Flag}</fo:inline></fo:block>
     <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Set to 'true' if xmerl should return a complete XML document
     as an xmlDocument record (default 'false').</fo:block></fo:block></fo:block-container>
   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{comments, Flag}</fo:inline></fo:block>
     <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Set to 'false' if xmerl should skip comments otherwise they will
     be returned as xmlComment records (default 'true').</fo:block></fo:block></fo:block-container>
   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{default_attrs, Flag}</fo:inline></fo:block>
     <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Set to 'true' if xmerl should add to elements missing attributes
     with a defined default value (default 'false').</fo:block></fo:block></fo:block-container>
  </fo:block>
 
</fo:block></fo:block-container>
<fo:block keep-with-next.within-page="always">xmlElement() = #xmlElement{}</fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/> </fo:block></fo:block-container>
</fo:block>
<fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1269248">file_sax(Fname::string(), CallBackModule::atom(), UserState, Options::option_list()) -&gt; NewUserState</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parse file containing an XML document, SAX style.
  Wrapper for a call to the XML parser <fo:inline font-family="monospace">xmerl_scan</fo:inline> with a
  <fo:inline font-family="monospace">hook_fun</fo:inline> for using xmerl export functionality directly after
  an entity is parsed.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1272576">stream(Fname::string(), Options::option_list()) -&gt; xmlElement()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parse file containing an XML document as a stream, DOM style.
  Wrapper for a call to the XML parser <fo:inline font-family="monospace">xmerl_scan</fo:inline> with a
  <fo:inline font-family="monospace">continuation_fun</fo:inline> for handling streams of XML data.
  Note that the <fo:inline font-family="monospace">continuation_fun</fo:inline>, <fo:inline font-family="monospace">acc_fun</fo:inline>,
  <fo:inline font-family="monospace">fetch_fun</fo:inline>, <fo:inline font-family="monospace">rules</fo:inline> and <fo:inline font-family="monospace">close_fun</fo:inline>
  options cannot be user defined using this parser.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1278208">stream_sax(Fname, CallBack::CallBackModule, UserState, Options) -&gt; xmlElement()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Fname = string()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CallBackModule = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = <fo:inline font-style="italic">option_list()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parse file containing an XML document as a stream, SAX style.
  Wrapper for a call to the XML parser <fo:inline font-family="monospace">xmerl_scan</fo:inline> with a
  <fo:inline font-family="monospace">continuation_fun</fo:inline> for handling streams of XML data.
  Note that the <fo:inline font-family="monospace">continuation_fun</fo:inline>, <fo:inline font-family="monospace">acc_fun</fo:inline>,
  <fo:inline font-family="monospace">fetch_fun</fo:inline>, <fo:inline font-family="monospace">rules</fo:inline>, <fo:inline font-family="monospace">hook_fun</fo:inline>,
  <fo:inline font-family="monospace">close_fun</fo:inline> and <fo:inline font-family="monospace">user_state</fo:inline> options cannot be user
  defined using this parser.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1285632">string_sax(String::list(), CallBackModule::atom(), UserState, Options::option_list()) -&gt; xmlElement()</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parse file containing an XML document, SAX style.
  Wrapper for a call to the XML parser <fo:inline font-family="monospace">xmerl_scan</fo:inline> with a
  <fo:inline font-family="monospace">hook_fun</fo:inline> for using xmerl export functionality directly after
  an entity is parsed.</fo:block>
</fo:block>


 
 <fo:block page-break-before="always" id="idp1293952" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">xmerl_xpath</fo:marker>xmerl_xpath</fo:block>Erlang module</fo:block>
<fo:block/>
xmerl_xpath
<fo:block/>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The xmerl_xpath module handles the entire XPath 1.0 spec.
  XPath expressions typically occur in XML attributes and are used to address
  parts of an XML document.
     The grammar is defined in <fo:inline font-family="monospace">xmerl_xpath_parse.yrl</fo:inline>.
     The core functions are defined in <fo:inline font-family="monospace">xmerl_xpath_pred.erl</fo:inline>.</fo:block>

     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Some useful shell commands for debugging the XPath parser</fo:block>
 <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 c(xmerl_xpath_scan).
 yecc:yecc("xmerl_xpath_parse.yrl", "xmerl_xpath_parse", true, []).
 c(xmerl_xpath_parse).

 xmerl_xpath_parse:parse(xmerl_xpath_scan:tokens("position() &gt; -1")).
 xmerl_xpath_parse:parse(xmerl_xpath_scan:tokens("5 * 6 div 2")).
 xmerl_xpath_parse:parse(xmerl_xpath_scan:tokens("5 + 6 mod 2")).
 xmerl_xpath_parse:parse(xmerl_xpath_scan:tokens("5 * 6")).
 xmerl_xpath_parse:parse(xmerl_xpath_scan:tokens("-----6")).
 xmerl_xpath_parse:parse(xmerl_xpath_scan:tokens("parent::node()")).
 xmerl_xpath_parse:parse(xmerl_xpath_scan:tokens("descendant-or-self::node()")).
 xmerl_xpath_parse:parse(xmerl_xpath_scan:tokens("parent::processing-instruction('foo')")).
  </fo:block>
 
<fo:block id="idp1298064" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">DATA TYPES</fo:block>

<fo:block space-after="0.25em" space-before="0.25em">
<fo:block keep-with-next.within-page="always">docEntity() = #xmlDocument{} | [<fo:inline font-style="italic">docNodes()</fo:inline>]</fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/> </fo:block></fo:block-container>
<fo:block keep-with-next.within-page="always">docNodes() = #xmlElement{} | #xmlAttribute{} | #xmlText{} | #xmlPI{} | #xmlComment{} | #xmlNsNode{}</fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/> </fo:block></fo:block-container>
<fo:block keep-with-next.within-page="always">nodeEntity() = #xmlElement{} | #xmlAttribute{} | #xmlText{} | #xmlPI{} | #xmlComment{} | #xmlNsNode{} | #xmlDocument{}</fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/> </fo:block></fo:block-container>
<fo:block keep-with-next.within-page="always">option_list()</fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Options allows to customize the behaviour of the
      XPath scanner.
  </fo:block>
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  Possible options are:
  </fo:block>
  <fo:block space-after="0.25em" space-before="0.25em">
   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{namespace, #xmlNamespace}</fo:inline></fo:block>
     <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Set namespace nodes, from XmlNamspace, in xmlContext</fo:block></fo:block></fo:block-container>
   <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{namespace, Nodes}</fo:inline></fo:block>
     <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Set namespace nodes in xmlContext.</fo:block></fo:block></fo:block-container>
  </fo:block>
</fo:block></fo:block-container>
<fo:block keep-with-next.within-page="always">parentList() = [{atom(), integer()}]</fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/> </fo:block></fo:block-container>
<fo:block keep-with-next.within-page="always">xPathString() = string()</fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/> </fo:block></fo:block-container>
</fo:block>
<fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1312592">string(Str, Doc) -&gt; [docEntity()] | Scalar</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">string(Str, Doc, [])</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1316528">string(Str, Doc, Options) -&gt; [docEntity()] | Scalar</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">string(Str, Doc, [], Doc, Options)</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1320512">string(Str, Node, Parents, Doc, Options) -&gt; [docEntity()] | Scalar</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Str = <fo:inline font-style="italic">xPathString()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Node = <fo:inline font-style="italic">nodeEntity()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Parents = <fo:inline font-style="italic">parentList()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Doc = <fo:inline font-style="italic">nodeEntity()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = <fo:inline font-style="italic">option_list()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Scalar = #xmlObj{}</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Extracts the nodes from the parsed XML tree according to XPath.
    xmlObj is a record with fields type and value,
    where type is boolean | number | string</fo:block>
</fo:block>


 
 <fo:block page-break-before="always" id="idp1334416" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">xmerl_xsd</fo:marker>xmerl_xsd</fo:block>Erlang module</fo:block>
<fo:block/>
xmerl_xsd
<fo:block/>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Interface module for XML Schema vlidation.
  It handles the W3.org
  <fo:inline font-weight="bold"><fo:basic-link external-destination="href">specifications</fo:basic-link></fo:inline>
  of XML Schema second edition 28 october 2004. For an introduction to
  XML Schema study <fo:inline font-weight="bold"><fo:basic-link external-destination="href">part 0.</fo:basic-link></fo:inline>
  An XML structure is validated by xmerl_xsd:validate/[2,3].</fo:block>
<fo:block id="idp1337856" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">DATA TYPES</fo:block>

<fo:block space-after="0.25em" space-before="0.25em">
<fo:block keep-with-next.within-page="always">filename() = string()</fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/> </fo:block></fo:block-container>
<fo:block keep-with-next.within-page="always">global_state()</fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The global state of the validator. It is
  representated by the <fo:inline font-family="monospace">#xsd_state{}</fo:inline> record.
  </fo:block>
</fo:block></fo:block-container>
<fo:block keep-with-next.within-page="always">option_list()</fo:block>
<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Options allow to customize the behaviour of the
  validation.
  </fo:block>
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  Possible options are :
  </fo:block>
  <fo:block space-after="0.25em" space-before="0.25em">
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{tab2file,boolean()}</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Enables saving of abstract structure on file for debugging
          purpose.</fo:block></fo:block></fo:block-container>
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{xsdbase,filename()}</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">XSD Base directory.</fo:block></fo:block></fo:block-container>
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{fetch_fun,FetchFun}</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Call back function to fetch an external resource.</fo:block></fo:block></fo:block-container>
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{fetch_path,PathList}</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">PathList is a list of directories to search when fetching files.
           If the file in question is not in the fetch_path, the URI will
           be used as a file name.</fo:block></fo:block></fo:block-container>
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{state,State}</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is possible by this option to provide a state with process
           information from an earlier validation.</fo:block></fo:block></fo:block-container>
  </fo:block>
</fo:block></fo:block-container>
</fo:block>
<fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1352464">file2state(FileName) -&gt; {ok, State} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">State = <fo:inline font-style="italic">global_state()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FileName = string()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Reads the schema state with all information of the processed
  schema from a file created with <fo:inline font-family="monospace">state2file/[1,2]</fo:inline>.  The
  format of this file is internal. The state can then be used
  validating an XML document.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1357264">format_error(L::Errors) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Errors = tuple() | [tuple()]</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = string() | [string()]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Formats error descriptions to human readable strings.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1360880">process_schema(Schema) -&gt; Result</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">process_schema(Schema, [])</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1364144">process_schema(Schema, Options) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Schema = string()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = {ok, State} | {error, Reason}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">State = <fo:inline font-style="italic">global_state()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = [ErrorReason] | ErrorReason</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = <fo:inline font-style="italic">option_list()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Reads the referenced XML schema and checks that it is valid.
  Returns the <fo:inline font-family="monospace">global_state()</fo:inline> with schema info or an
  error reason. The error reason may be a list of several errors
  or a single error encountered during the processing.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1370384">process_schemas(Schemas) -&gt; Result</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">process_schema(Schemas, [])</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1373648">process_schemas(Schemas, Options) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Schemas = [{NameSpace, string()} | Schemas] | []</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = {ok, State} | {error, Reason}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = [ErrorReason] | ErrorReason</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = <fo:inline font-style="italic">option_list()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Reads the referenced XML schemas and controls they are valid.
  Returns the <fo:inline font-family="monospace">global_state()</fo:inline> with schema info or an
  error reason. The error reason may be a list of several errors
  or a single error encountered during the processing.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1379072">process_validate(Schema, Xml::Element) -&gt; Result</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">process_validate(Schema, Xml, [])</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1382352">process_validate(Schema, Xml::Element, Opts::Options) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Schema = string()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Element = XmlElement</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = <fo:inline font-style="italic">option_list()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = {ValidXmlElement, State} | {error, Reason}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = [ErrorReason] | ErrorReason</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Validates a parsed well-formed XML element towards an XML
  schema.  </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"> Validates in two steps. First it processes the schema,
  saves the type and structure info in an ets table and then
  validates the element towards the schema.</fo:block>
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"> Usage example:</fo:block>
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  <fo:inline font-family="monospace">1&gt;{E,_} = xmerl_scan:file("my_XML_document.xml").</fo:inline><fo:block/>
  <fo:inline font-family="monospace">2&gt;{E2,_} = xmerl_xsd:validate("my_XML_Schema.xsd",E).</fo:inline>
  </fo:block>
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"> Observe that E2 may differ from E if for instance there are default
  values defined in <fo:inline font-family="monospace">my_XML_Schema.xsd</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1390864">state2file(S::State) -&gt; ok | {error, Reason}</fo:block></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as state2file(State,SchemaName)</fo:block>
 
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The name of the saved file is the same as the name of the
  schema, but with <fo:inline font-family="monospace">.xss</fo:inline> extension.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1394368">state2file(S::State, FileName) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">State = <fo:inline font-style="italic">global_state()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FileName = string()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Saves the schema state with all information of the processed
  schema in a file. You can provide the file name for the saved
  state. FileName is saved with the <fo:inline font-family="monospace">.xss</fo:inline> extension
  added.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1399120">validate(Xml::Element, State) -&gt; Result</fo:block></fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-style="italic">validate(Element, State, [])</fo:inline>.</fo:block>
</fo:block>
<fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1402384">validate(Xml::Element, State, Opts::Options) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Element = XmlElement</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = <fo:inline font-style="italic">option_list()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = {ValidElement, <fo:inline font-style="italic">global_state()</fo:inline>} | {error, Reasons}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ValidElement = XmlElement</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">State = <fo:inline font-style="italic">global_state()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reasons = [ErrorReason] | ErrorReason</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Validates a parsed well-formed XML element (Element).
  </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A call to validate/2 or validate/3 must provide a well formed
  parsed XML element <fo:inline font-family="monospace">#xmlElement{}</fo:inline> and a State,
  <fo:inline font-family="monospace">global_state()</fo:inline>, which holds necessary information from
  an already processed schema.
  Thus validate enables reuse of the schema information and
  therefore if one shall validate several times towards the same
  schema it reduces time consumption.</fo:block>
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The result, ValidElement, is the valid element that conforms to the
  post-schema-validation infoset. When the validator finds an error it
  tries to continue and reports a list of all errors found. In those cases
  an unexpected error is found it may cause a single error reason.
  </fo:block>
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"> Usage example:</fo:block>
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
  <fo:inline font-family="monospace">1&gt;{E,_} = xmerl_scan:file("my_XML_document.xml").</fo:inline><fo:block/>
  <fo:inline font-family="monospace">2&gt;{ok,S} = xmerl_xsd:process_schema("my_XML_Schema.xsd").</fo:inline><fo:block/>
  <fo:inline font-family="monospace">3&gt;{E2,_} = xmerl_xsd:validate(E,S).</fo:inline>
  </fo:block>
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"> Observe that E2 may differ from E if for instance there are default
  values defined in <fo:inline font-family="monospace">my_XML_Schema.xsd</fo:inline>.</fo:block>
</fo:block>


 
 <fo:block page-break-before="always" id="idp1421680" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">xmerl_sax_parser</fo:marker>xmerl_sax_parser</fo:block>Erlang module</fo:block>
  <fo:block/>

  xmerl_sax_parser
  <fo:block/>

  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      A SAX parser for XML that sends the events through a callback interface.
     SAX is the <fo:inline font-weight="bold">Simple API for XML</fo:inline>, originally a Java-only API. SAX was the first widely adopted API for 
     XML in Java, and is a <fo:inline font-weight="bold">de facto</fo:inline> standard where there are versions for several programming language 
     environments other than Java.
    </fo:block>
  

  <fo:block id="idp1424912" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">DATA TYPES</fo:block>
    

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">option()</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em">
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
         Options used to customize the behaviour of the parser.
         Possible options are:
       </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
       <fo:block space-after="0.25em" space-before="0.25em">
         <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{continuation_fun, ContinuationFun}</fo:inline></fo:block>
         <fo:block-container><fo:block start-indent="2em">
           <fo:inline font-style="italic">ContinuationFun</fo:inline> is a call back function to decide what to do if 
           the parser runs into EOF before the document is complete. 
         </fo:block></fo:block-container>
         <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{continuation_state, term()}</fo:inline></fo:block>
         <fo:block-container><fo:block start-indent="2em">
           State that is accessible in the continuation call back function. 
         </fo:block></fo:block-container>
         <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{event_fun, EventFun}</fo:inline></fo:block>
         <fo:block-container><fo:block start-indent="2em">
           <fo:inline font-style="italic">EventFun</fo:inline> is the call back function for parser events. 
         </fo:block></fo:block-container>
         <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{event_state, term()}</fo:inline></fo:block>
         <fo:block-container><fo:block start-indent="2em">
           State that is accessible in the event call back function. 
         </fo:block></fo:block-container>
         <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{file_type, FileType}</fo:inline></fo:block>
         <fo:block-container><fo:block start-indent="2em">
           Flag that tells the parser if it's parsing a DTD or a normal XML file (default normal).
           <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
             <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">FileType = normal | dtd</fo:inline></fo:block></fo:list-item-body></fo:list-item>
           </fo:list-block>
         </fo:block></fo:block-container>
         <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{encoding, Encoding}</fo:inline></fo:block>
         <fo:block-container><fo:block start-indent="2em">
           Set default character set used (default UTF-8). This character set is used only if not explicitly 
           given by the XML document.
           <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
             <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Encoding = utf8 | {utf16,big} | {utf16,little} | latin1 | list</fo:inline></fo:block></fo:list-item-body></fo:list-item>
           </fo:list-block>
         </fo:block></fo:block-container>
         <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">skip_external_dtd</fo:inline></fo:block>
         <fo:block-container><fo:block start-indent="2em">
           Skips the external DTD during parsing.
         </fo:block></fo:block-container>
       </fo:block>
       </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"/>
 <fo:block-container><fo:block start-indent="2em">
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
       </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">event()</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em">
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
         The SAX events that are sent to the user via the callback.
       </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
       <fo:block space-after="0.25em" space-before="0.25em">

         <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">startDocument</fo:inline></fo:block>
         <fo:block-container><fo:block start-indent="2em">
           Receive notification of the beginning of a document. The SAX parser will send this event only once 
           before any other event callbacks.
         </fo:block></fo:block-container>

         <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">endDocument</fo:inline></fo:block>
         <fo:block-container><fo:block start-indent="2em">
            Receive notification of the end of a document. The SAX parser will send this event only once, and it will 
            be the last event during the parse. 
         </fo:block></fo:block-container>

         <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{startPrefixMapping, Prefix, Uri}</fo:inline></fo:block>
         <fo:block-container><fo:block start-indent="2em">
           Begin the scope of a prefix-URI Namespace mapping.
           Note that start/endPrefixMapping events are not guaranteed to be properly nested relative to each other: 
           all startPrefixMapping events will occur immediately before the corresponding startElement event, and all 
           endPrefixMapping  events will occur immediately after the corresponding endElement event, but their 
           order is not otherwise guaranteed.
           There will not be start/endPrefixMapping events for the "xml" prefix, since it is predeclared and immutable.
           <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
             <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Prefix = string()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
             <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Uri = string()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
           </fo:list-block>
         </fo:block></fo:block-container>

         <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{endPrefixMapping, Prefix}</fo:inline></fo:block>
         <fo:block-container><fo:block start-indent="2em">
           End the scope of a prefix-URI mapping.
           <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
             <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Prefix = string()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
           </fo:list-block>
         </fo:block></fo:block-container>

         <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{startElement, Uri, LocalName, QualifiedName, Attributes}</fo:inline></fo:block>
         <fo:block-container><fo:block start-indent="2em">
          Receive notification of the beginning of an element.

          The Parser will send this event at the beginning of every element in the XML document; 
          there will be a corresponding endElement event for every startElement event (even when the element is empty). 
          All of the element's content will be reported, in order, before the corresponding endElement event.
            <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
             <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Uri = string()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
             <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">LocalName = string()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
             <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">QualifiedName = {Prefix, LocalName}</fo:inline></fo:block></fo:list-item-body></fo:list-item>
             <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Prefix = string()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
             <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Attributes = [{Uri, Prefix, AttributeName, Value}]</fo:inline></fo:block></fo:list-item-body></fo:list-item>
             <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">AttributeName = string()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
             <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Value = string()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
           </fo:list-block>
        </fo:block></fo:block-container>

         <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{endElement, Uri, LocalName, QualifiedName}</fo:inline></fo:block>
         <fo:block-container><fo:block start-indent="2em">
          Receive notification of the end of an element.

          The SAX parser will send this event at the end of every element in the XML document;
          there will be a corresponding startElement event for every endElement event (even when the element is empty).
            <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
             <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Uri = string()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
             <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">LocalName = string()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
             <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">QualifiedName = {Prefix, LocalName}</fo:inline></fo:block></fo:list-item-body></fo:list-item>
             <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Prefix = string()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            </fo:list-block>
         </fo:block></fo:block-container>

         <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{characters, string()}</fo:inline></fo:block>
         <fo:block-container><fo:block start-indent="2em">
          Receive notification of character data. 
         </fo:block></fo:block-container>

         <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{ignorableWhitespace, string()}</fo:inline></fo:block>
         <fo:block-container><fo:block start-indent="2em">
           Receive notification of ignorable whitespace in element content.
         </fo:block></fo:block-container>

         <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{processingInstruction, Target, Data}</fo:inline></fo:block>
         <fo:block-container><fo:block start-indent="2em">
           Receive notification of a processing instruction.

           The Parser will send this event once for each processing instruction found: 
           note that processing instructions may occur before or after the main document element.
            <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
             <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Target = string()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
             <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Data = string()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            </fo:list-block>
         </fo:block></fo:block-container>

         <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{comment, string()}</fo:inline></fo:block>
         <fo:block-container><fo:block start-indent="2em">
           Report an XML comment anywhere in the document (both inside and outside of the document element).
         </fo:block></fo:block-container>

         <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">startCDATA</fo:inline></fo:block>
         <fo:block-container><fo:block start-indent="2em">
           Report the start of a CDATA section. The contents of the CDATA section will be reported 
           through the regular characters event.
         </fo:block></fo:block-container>

         <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">endCDATA</fo:inline></fo:block>
         <fo:block-container><fo:block start-indent="2em">
           Report the end of a CDATA section.
         </fo:block></fo:block-container>

         <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{startDTD, Name, PublicId, SystemId}</fo:inline></fo:block>
         <fo:block-container><fo:block start-indent="2em">
           Report the start of DTD declarations, it's reporting the start of the DOCTYPE declaration.
           If the document has no DOCTYPE declaration, this event will not be sent.
            <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
             <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Name = string()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
             <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">PublicId = string()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
             <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">SystemId = string()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            </fo:list-block>
         </fo:block></fo:block-container>

         <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">endDTD</fo:inline></fo:block>
         <fo:block-container><fo:block start-indent="2em">
          Report the end of DTD declarations, it's reporting the end of the DOCTYPE declaration.
         </fo:block></fo:block-container>

         <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{startEntity, SysId}</fo:inline></fo:block>
         <fo:block-container><fo:block start-indent="2em"> 
           Report the beginning of some internal and external XML entities. ???
         </fo:block></fo:block-container>

         <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{endEntity, SysId}</fo:inline></fo:block>
         <fo:block-container><fo:block start-indent="2em">
           Report the end of an entity. ???
         </fo:block></fo:block-container>

         <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{elementDecl, Name, Model}</fo:inline></fo:block>
         <fo:block-container><fo:block start-indent="2em">
           Report an element type declaration.   
           The content model will consist of the string "EMPTY", the string "ANY", or a parenthesised group, 
           optionally followed by an occurrence indicator. The model will be normalized so that all parameter 
           entities are fully resolved and all whitespace is removed,and will include the enclosing parentheses. 
           Other normalization (such as removing redundant parentheses or simplifying occurrence indicators) 
           is at the discretion of the parser.
            <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
             <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Name = string()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
             <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Model = string()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            </fo:list-block>
         </fo:block></fo:block-container>

         <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{attributeDecl, ElementName, AttributeName, Type, Mode, Value}</fo:inline></fo:block>
         <fo:block-container><fo:block start-indent="2em">
           Report an attribute type declaration.
            <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
             <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ElementName = string()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
             <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">AttributeName = string()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
             <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Type = string()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
             <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Mode = string()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
             <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Value = string()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            </fo:list-block>
         </fo:block></fo:block-container>

         <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{internalEntityDecl, Name, Value}</fo:inline></fo:block>
         <fo:block-container><fo:block start-indent="2em">
          Report an internal entity declaration.
            <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
             <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Name = string()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
             <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Value = string()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            </fo:list-block>
         </fo:block></fo:block-container>

         <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{externalEntityDecl, Name, PublicId, SystemId}</fo:inline></fo:block>
         <fo:block-container><fo:block start-indent="2em">
          Report a parsed external entity declaration.
            <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
             <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Name = string()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
             <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">PublicId = string()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
             <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">SystemId = string()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            </fo:list-block>
         </fo:block></fo:block-container>

         <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{unparsedEntityDecl, Name, PublicId, SystemId, Ndata}</fo:inline></fo:block>
         <fo:block-container><fo:block start-indent="2em">
           Receive notification of an unparsed entity declaration event.
            <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
             <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Name = string()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
             <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">PublicId = string()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
             <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">SystemId = string()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
             <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Ndata = string()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            </fo:list-block>
         </fo:block></fo:block-container>

         <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{notationDecl, Name, PublicId, SystemId}</fo:inline></fo:block>
         <fo:block-container><fo:block start-indent="2em">
           Receive notification of a notation declaration event.
            <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
             <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Name = string()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
             <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">PublicId = string()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
             <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">SystemId = string()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            </fo:list-block>
         </fo:block></fo:block-container>

       </fo:block>
       </fo:block></fo:block-container>

       <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">unicode_char()</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em">
         Integer representing valid unicode codepoint.
       </fo:block></fo:block-container>

       <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">unicode_binary()</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em">
         Binary with characters encoded in UTF-8 or UTF-16.
       </fo:block></fo:block-container>

       <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">latin1_binary()</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em">
         Binary with characters encoded in iso-latin-1.
       </fo:block></fo:block-container>

    </fo:block>

  


  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1503792">file(Filename, Options) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Filename = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = [option()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = {ok, EventState, Rest} |</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">   {Tag, Location, Reason, EndTags, EventState}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Rest = unicode_binary() | latin1_binary()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Tag = atom() (fatal_error, or user defined tag)</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Location = {CurrentLocation, EntityName, LineNo}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CurrentLocation = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EntityName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LineNo = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EventState = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parse file containing an XML document. This functions uses a default continuation function to read the file in blocks.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1512144">stream(Xml, Options) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Xml = unicode_binary() | latin1_binary() | [unicode_char()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = [option()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = {ok, EventState, Rest} |</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">   {Tag, Location, Reason, EndTags, EventState}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Rest =  unicode_binary() | latin1_binary() | [unicode_char()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Tag = atom() (fatal_error or user defined tag)</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Location = {CurrentLocation, EntityName, LineNo}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CurrentLocation = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EntityName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LineNo = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">EventState = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parse a stream containing an XML document.</fo:block>
      </fo:block>

   

  <fo:block id="idp1520672" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">CALLBACK FUNCTIONS</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The callback interface is based on that the user sends a fun with the 
      correct signature to the parser.
   </fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1522416">ContinuationFun(State) -&gt; {NewBytes, NewState}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">State = NewState = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NewBytes = binary() | list() (should be same as start input in stream/2)</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
          This function is called whenever the parser runs out of input data.
          If the function can't get hold of more input an empty list or binary 
          (depends on start input in stream/2) is returned.

          Other types of errors is handled through exceptions. Use throw/1 to send the 
          following tuple {Tag = atom(), Reason = string()} if the continuation function encounters a fatal error. 
          Tag is an atom that identifies the functional entity that sends the exception 
          and Reason is a string that describes the problem.
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1526688">EventFun(Event, Location, State) -&gt; NewState</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Event = event()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Location = {CurrentLocation, Entityname, LineNo}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CurrentLocation = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Entityname = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LineNo = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">State = NewState = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
          This function is called for every event sent by the parser. 

          The error handling is done through exceptions. Use throw/1 to send the 
          following tuple {Tag = atom(), Reason = string()} if the application encounters a fatal error. 
          Tag is an atom that identifies the functional entity that sends the exception 
          and Reason is a string that describes the problem.
        </fo:block>
      </fo:block>

  



</fo:flow>
  </fo:page-sequence>
</fo:root>
