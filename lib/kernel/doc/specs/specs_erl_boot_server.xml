<module name="erl_boot_server">
<type>
  <name>ip4_address</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-ip4_address">ip4_address()</marker> = {0..255, 0..255, 0..255, 0..255}</typehead></typedecl>
</type>
<type>
  <name>state</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-state">state()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#state{priority = any(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>version = string(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>udp_sock = any(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>udp_port = any(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>listen_sock = any(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>listen_port = any(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>slaves = any(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>bootp = pid(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>prim_state = any()}</typehead></typedecl>
</type>
<spec>
  <name>add_slave</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>add_slave(Slave) -&gt; ok | {error, What}</head>
      <guard>
        <subtype><typename>Slave</typename><string>Slave = Host</string></subtype>
        <subtype><typename>Host</typename><string>Host = atom()</string></subtype>
        <subtype><typename>What</typename><string>What = any()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Host</anno>
  <anno>Slave</anno>
  <anno>What</anno>
</spec>
<spec>
  <name>add_subnet</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>add_subnet(Mask :: <seealso marker="#type-ip4_address">ip4_address()</seealso>, Addr :: <seealso marker="#type-ip4_address">ip4_address()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok | {error, any()}</head></clause>
  </contract>
  <anno>Addr</anno>
  <anno>Mask</anno>
</spec>
<spec>
  <name>boot_accept</name>
  <arity>3</arity>
  <contract/>
</spec>
<spec>
  <name>boot_init</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>boot_init(Tag :: reference()) -&gt; no_return()</head></clause>
  </contract>
  <anno>Tag</anno>
</spec>
<spec>
  <name>code_change</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>code_change(Vsn :: term(), State :: <seealso marker="#type-state">state()</seealso>, Extra :: term()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, <seealso marker="#type-state">state()</seealso>}</head></clause>
  </contract>
  <anno>Extra</anno>
  <anno>State</anno>
  <anno>Vsn</anno>
</spec>
<spec>
  <name>delete_slave</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>delete_slave(Slave) -&gt; ok | {error, What}</head>
      <guard>
        <subtype><typename>Slave</typename><string>Slave = Host</string></subtype>
        <subtype><typename>Host</typename><string>Host = atom()</string></subtype>
        <subtype><typename>What</typename><string>What = any()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Host</anno>
  <anno>Slave</anno>
  <anno>What</anno>
</spec>
<spec>
  <name>delete_subnet</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>delete_subnet(Mask :: <seealso marker="#type-ip4_address">ip4_address()</seealso>, Addr :: <seealso marker="#type-ip4_address">ip4_address()</seealso>) -&gt; ok</head></clause>
  </contract>
  <anno>Addr</anno>
  <anno>Mask</anno>
</spec>
<spec>
  <name>handle_call</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>handle_call(X1 :: which | {add, atom()} | {delete, atom()},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>X2 :: term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>S0 :: <seealso marker="#type-state">state()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{reply, ok | [atom()], <seealso marker="#type-state">state()</seealso>}</head></clause>
  </contract>
  <anno>S0</anno>
  <anno>X1</anno>
  <anno>X2</anno>
</spec>
<spec>
  <name>handle_cast</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>handle_cast(X1 :: term(), Slaves :: [atom()]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{noreply, [atom()]}</head></clause>
  </contract>
  <anno>Slaves</anno>
  <anno>X1</anno>
</spec>
<spec>
  <name>handle_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>handle_info(Info :: term(), S0 :: <seealso marker="#type-state">state()</seealso>) -&gt; {noreply, <seealso marker="#type-state">state()</seealso>}</head></clause>
  </contract>
  <anno>Info</anno>
  <anno>S0</anno>
</spec>
<spec>
  <name>init</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>init(Slaves :: [atom()]) -&gt; {ok, <seealso marker="#type-state">state()</seealso>}</head></clause>
  </contract>
  <anno>Slaves</anno>
</spec>
<spec>
  <name>start</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>start(Slaves) -&gt; {ok, Pid} | {error, What}</head>
      <guard>
        <subtype><typename>Slaves</typename><string>Slaves = [Host]</string></subtype>
        <subtype><typename>Host</typename><string>Host = atom()</string></subtype>
        <subtype><typename>Pid</typename><string>Pid = pid()</string></subtype>
        <subtype><typename>What</typename><string>What = any()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Host</anno>
  <anno>Pid</anno>
  <anno>Slaves</anno>
  <anno>What</anno>
</spec>
<spec>
  <name>start_link</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>start_link(Slaves) -&gt; {ok, Pid} | {error, What}</head>
      <guard>
        <subtype><typename>Slaves</typename><string>Slaves = [Host]</string></subtype>
        <subtype><typename>Host</typename><string>Host = atom()</string></subtype>
        <subtype><typename>Pid</typename><string>Pid = pid()</string></subtype>
        <subtype><typename>What</typename><string>What = any()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Host</anno>
  <anno>Pid</anno>
  <anno>Slaves</anno>
  <anno>What</anno>
</spec>
<spec>
  <name>terminate</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>terminate(Reason :: term(), S0 :: <seealso marker="#type-state">state()</seealso>) -&gt; ok</head></clause>
  </contract>
  <anno>Reason</anno>
  <anno>S0</anno>
</spec>
<spec>
  <name>which_slaves</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>which_slaves() -&gt; Slaves</head>
      <guard>
        <subtype><typename>Slaves</typename><string>Slaves = [Host]</string></subtype>
        <subtype><typename>Host</typename><string>Host = atom()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Host</anno>
  <anno>Slaves</anno>
</spec>
<spec>
  <name>would_be_booted</name>
  <arity>1</arity>
  <contract/>
</spec>
<timestamp>Generated by EDoc, Jul 12 2017, 20:27:39.</timestamp>
</module>