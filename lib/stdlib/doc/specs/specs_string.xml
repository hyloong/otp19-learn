<module name="string">
<type>
  <name>direction</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-direction">direction()</marker> = leading | trailing</typehead></typedecl>
</type>
<type>
  <name>grapheme_cluster</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-grapheme_cluster">grapheme_cluster()</marker> = char() | [char()]</typehead></typedecl>
</type>
<spec>
  <name>casefold</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>casefold(String :: <seealso marker="unicode#type-chardata">unicode:chardata()</seealso>) -&gt; <seealso marker="unicode#type-chardata">unicode:chardata()</seealso></head></clause>
  </contract>
  <anno>String</anno>
</spec>
<spec>
  <name>centre</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>centre(String, Number) -&gt; Centered</head>
      <guard>
        <subtype><typename>String</typename><string>String = Centered = string()</string></subtype>
        <subtype><typename>Centered</typename><string/></subtype>
        <subtype><typename>Number</typename><string>Number = integer() &gt;= 0</string></subtype>
      </guard></clause>
  </contract>
  <anno>Centered</anno>
  <anno>Number</anno>
  <anno>String</anno>
</spec>
<spec>
  <name>centre</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>centre(String, Number, Character) -&gt; Centered</head>
      <guard>
        <subtype><typename>String</typename><string>String = Centered = string()</string></subtype>
        <subtype><typename>Centered</typename><string/></subtype>
        <subtype><typename>Number</typename><string>Number = integer() &gt;= 0</string></subtype>
        <subtype><typename>Character</typename><string>Character = char()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Centered</anno>
  <anno>Character</anno>
  <anno>Number</anno>
  <anno>String</anno>
</spec>
<spec>
  <name>chars</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>chars(Character, Number) -&gt; String</head>
      <guard>
        <subtype><typename>Character</typename><string>Character = char()</string></subtype>
        <subtype><typename>Number</typename><string>Number = integer() &gt;= 0</string></subtype>
        <subtype><typename>String</typename><string>String = string()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Character</anno>
  <anno>Number</anno>
  <anno>String</anno>
</spec>
<spec>
  <name>chars</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>chars(Character, Number, Tail) -&gt; String</head>
      <guard>
        <subtype><typename>Character</typename><string>Character = char()</string></subtype>
        <subtype><typename>Number</typename><string>Number = integer() &gt;= 0</string></subtype>
        <subtype><typename>Tail</typename><string>Tail = String = string()</string></subtype>
        <subtype><typename>String</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Character</anno>
  <anno>Number</anno>
  <anno>String</anno>
  <anno>Tail</anno>
</spec>
<spec>
  <name>chomp</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>chomp(String :: <seealso marker="unicode#type-chardata">unicode:chardata()</seealso>) -&gt; <seealso marker="unicode#type-chardata">unicode:chardata()</seealso></head></clause>
  </contract>
  <anno>String</anno>
</spec>
<spec>
  <name>chr</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>chr(String, Character) -&gt; Index</head>
      <guard>
        <subtype><typename>String</typename><string>String = string()</string></subtype>
        <subtype><typename>Character</typename><string>Character = char()</string></subtype>
        <subtype><typename>Index</typename><string>Index = integer() &gt;= 0</string></subtype>
      </guard></clause>
  </contract>
  <anno>Character</anno>
  <anno>Index</anno>
  <anno>String</anno>
</spec>
<spec>
  <name>concat</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>concat(String1, String2) -&gt; String3</head>
      <guard>
        <subtype><typename>String1</typename><string>String1 = String2 = String3 = string()</string></subtype>
        <subtype><typename>String2</typename><string></string></subtype>
        <subtype><typename>String3</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>String1</anno>
  <anno>String2</anno>
  <anno>String3</anno>
</spec>
<spec>
  <name>copies</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>copies(String, Number) -&gt; Copies</head>
      <guard>
        <subtype><typename>String</typename><string>String = Copies = string()</string></subtype>
        <subtype><typename>Copies</typename><string/></subtype>
        <subtype><typename>Number</typename><string>Number = integer() &gt;= 0</string></subtype>
      </guard></clause>
  </contract>
  <anno>Copies</anno>
  <anno>Number</anno>
  <anno>String</anno>
</spec>
<spec>
  <name>cspan</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>cspan(String, Chars) -&gt; Length</head>
      <guard>
        <subtype><typename>String</typename><string>String = Chars = string()</string></subtype>
        <subtype><typename>Chars</typename><string/></subtype>
        <subtype><typename>Length</typename><string>Length = integer() &gt;= 0</string></subtype>
      </guard></clause>
  </contract>
  <anno>Chars</anno>
  <anno>Length</anno>
  <anno>String</anno>
</spec>
<spec>
  <name>equal</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>equal(A, B) -&gt; boolean()</head>
      <guard>
        <subtype><typename>A</typename><string>A = B = <seealso marker="unicode#type-chardata">unicode:chardata()</seealso></string></subtype>
        <subtype><typename>B</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>A</anno>
  <anno>B</anno>
</spec>
<spec>
  <name>equal</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>equal(A, B, IgnoreCase) -&gt; boolean()</head>
      <guard>
        <subtype><typename>A</typename><string>A = B = <seealso marker="unicode#type-chardata">unicode:chardata()</seealso></string></subtype>
        <subtype><typename>B</typename><string/></subtype>
        <subtype><typename>IgnoreCase</typename><string>IgnoreCase = boolean()</string></subtype>
      </guard></clause>
  </contract>
  <anno>A</anno>
  <anno>B</anno>
  <anno>IgnoreCase</anno>
</spec>
<spec>
  <name>equal</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>equal(A, B, IgnoreCase, Norm) -&gt; boolean()</head>
      <guard>
        <subtype><typename>A</typename><string>A = B = <seealso marker="unicode#type-chardata">unicode:chardata()</seealso></string></subtype>
        <subtype><typename>B</typename><string/></subtype>
        <subtype><typename>IgnoreCase</typename><string>IgnoreCase = boolean()</string></subtype>
        <subtype><typename>Norm</typename><string>Norm = none | nfc | nfd | nfkc | nfkd</string></subtype>
      </guard></clause>
  </contract>
  <anno>A</anno>
  <anno>B</anno>
  <anno>IgnoreCase</anno>
  <anno>Norm</anno>
</spec>
<spec>
  <name>find</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>find(String, SearchPattern) -&gt; <seealso marker="unicode#type-chardata">unicode:chardata()</seealso> | nomatch</head>
      <guard>
        <subtype><typename>String</typename><string>String = SearchPattern = <seealso marker="unicode#type-chardata">unicode:chardata()</seealso></string></subtype>
        <subtype><typename>SearchPattern</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>SearchPattern</anno>
  <anno>String</anno>
</spec>
<spec>
  <name>find</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>find(String, SearchPattern, Dir) -&gt; <seealso marker="unicode#type-chardata">unicode:chardata()</seealso> | nomatch</head>
      <guard>
        <subtype><typename>String</typename><string>String = SearchPattern = <seealso marker="unicode#type-chardata">unicode:chardata()</seealso></string></subtype>
        <subtype><typename>SearchPattern</typename><string/></subtype>
        <subtype><typename>Dir</typename><string>Dir = <seealso marker="#type-direction">direction()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Dir</anno>
  <anno>SearchPattern</anno>
  <anno>String</anno>
</spec>
<spec>
  <name>is_empty</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_empty(String :: <seealso marker="unicode#type-chardata">unicode:chardata()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>String</anno>
</spec>
<spec>
  <name>join</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>join(StringList, Separator) -&gt; String</head>
      <guard>
        <subtype><typename>StringList</typename><string>StringList = [string()]</string></subtype>
        <subtype><typename>Separator</typename><string>Separator = String = string()</string></subtype>
        <subtype><typename>String</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Separator</anno>
  <anno>String</anno>
  <anno>StringList</anno>
</spec>
<spec>
  <name>left</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>left(String, Number) -&gt; Left</head>
      <guard>
        <subtype><typename>String</typename><string>String = Left = string()</string></subtype>
        <subtype><typename>Left</typename><string/></subtype>
        <subtype><typename>Number</typename><string>Number = integer() &gt;= 0</string></subtype>
      </guard></clause>
  </contract>
  <anno>Left</anno>
  <anno>Number</anno>
  <anno>String</anno>
</spec>
<spec>
  <name>left</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>left(String, Number, Character) -&gt; Left</head>
      <guard>
        <subtype><typename>String</typename><string>String = Left = string()</string></subtype>
        <subtype><typename>Left</typename><string/></subtype>
        <subtype><typename>Number</typename><string>Number = integer() &gt;= 0</string></subtype>
        <subtype><typename>Character</typename><string>Character = char()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Character</anno>
  <anno>Left</anno>
  <anno>Number</anno>
  <anno>String</anno>
</spec>
<spec>
  <name>len</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>len(String) -&gt; Length</head>
      <guard>
        <subtype><typename>String</typename><string>String = string()</string></subtype>
        <subtype><typename>Length</typename><string>Length = integer() &gt;= 0</string></subtype>
      </guard></clause>
  </contract>
  <anno>Length</anno>
  <anno>String</anno>
</spec>
<spec>
  <name>length</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>length(String :: <seealso marker="unicode#type-chardata">unicode:chardata()</seealso>) -&gt; integer() &gt;= 0</head></clause>
  </contract>
  <anno>String</anno>
</spec>
<spec>
  <name>lexemes</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>lexemes(String :: <seealso marker="unicode#type-chardata">unicode:chardata()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>SeparatorList :: [<seealso marker="#type-grapheme_cluster">grapheme_cluster()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[<seealso marker="unicode#type-chardata">unicode:chardata()</seealso>]</head></clause>
  </contract>
  <anno>SeparatorList</anno>
  <anno>String</anno>
</spec>
<spec>
  <name>list_to_float</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>list_to_float(String) -&gt; {Float, Rest} | {error, Reason}</head>
      <guard>
        <subtype><typename>String</typename><string>String = string()</string></subtype>
        <subtype><typename>Float</typename><string>Float = float()</string></subtype>
        <subtype><typename>Rest</typename><string>Rest = string()</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = no_float | not_a_list</string></subtype>
      </guard></clause>
  </contract>
  <anno>Float</anno>
  <anno>Reason</anno>
  <anno>Rest</anno>
  <anno>String</anno>
</spec>
<spec>
  <name>list_to_integer</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>list_to_integer(String) -&gt; {Int, Rest} | {error, Reason}</head>
      <guard>
        <subtype><typename>String</typename><string>String = string()</string></subtype>
        <subtype><typename>Int</typename><string>Int = integer()</string></subtype>
        <subtype><typename>Rest</typename><string>Rest = string()</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = no_integer | not_a_list</string></subtype>
      </guard></clause>
  </contract>
  <anno>Int</anno>
  <anno>Reason</anno>
  <anno>Rest</anno>
  <anno>String</anno>
</spec>
<spec>
  <name>lowercase</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>lowercase(String :: <seealso marker="unicode#type-chardata">unicode:chardata()</seealso>) -&gt; <seealso marker="unicode#type-chardata">unicode:chardata()</seealso></head></clause>
  </contract>
  <anno>String</anno>
</spec>
<spec>
  <name>next_codepoint</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>next_codepoint(String :: <seealso marker="unicode#type-chardata">unicode:chardata()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>maybe_improper_list(char(), <seealso marker="unicode#type-chardata">unicode:chardata()</seealso>) |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, <seealso marker="unicode#type-chardata">unicode:chardata()</seealso>}</head></clause>
  </contract>
  <anno>String</anno>
</spec>
<spec>
  <name>next_grapheme</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>next_grapheme(String :: <seealso marker="unicode#type-chardata">unicode:chardata()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>maybe_improper_list(<seealso marker="#type-grapheme_cluster">grapheme_cluster()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="unicode#type-chardata">unicode:chardata()</seealso>) |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, <seealso marker="unicode#type-chardata">unicode:chardata()</seealso>}</head></clause>
  </contract>
  <anno>String</anno>
</spec>
<spec>
  <name>nth_lexeme</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>nth_lexeme(String, N, SeparatorList) -&gt; <seealso marker="unicode#type-chardata">unicode:chardata()</seealso></head>
      <guard>
        <subtype><typename>String</typename><string>String = <seealso marker="unicode#type-chardata">unicode:chardata()</seealso></string></subtype>
        <subtype><typename>N</typename><string>N = integer() &gt;= 0</string></subtype>
        <subtype><typename>SeparatorList</typename><string>SeparatorList = [<seealso marker="#type-grapheme_cluster">grapheme_cluster()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>N</anno>
  <anno>SeparatorList</anno>
  <anno>String</anno>
</spec>
<spec>
  <name>pad</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>pad(String, Length) -&gt; <seealso marker="unicode#type-charlist">unicode:charlist()</seealso></head>
      <guard>
        <subtype><typename>String</typename><string>String = <seealso marker="unicode#type-chardata">unicode:chardata()</seealso></string></subtype>
        <subtype><typename>Length</typename><string>Length = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Length</anno>
  <anno>String</anno>
</spec>
<spec>
  <name>pad</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>pad(String, Length, Dir) -&gt; <seealso marker="unicode#type-charlist">unicode:charlist()</seealso></head>
      <guard>
        <subtype><typename>String</typename><string>String = <seealso marker="unicode#type-chardata">unicode:chardata()</seealso></string></subtype>
        <subtype><typename>Length</typename><string>Length = integer()</string></subtype>
        <subtype><typename>Dir</typename><string>Dir = <seealso marker="#type-direction">direction()</seealso> | both</string></subtype>
      </guard></clause>
  </contract>
  <anno>Dir</anno>
  <anno>Length</anno>
  <anno>String</anno>
</spec>
<spec>
  <name>pad</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>pad(String, Length, Dir, Char) -&gt; <seealso marker="unicode#type-charlist">unicode:charlist()</seealso></head>
      <guard>
        <subtype><typename>String</typename><string>String = <seealso marker="unicode#type-chardata">unicode:chardata()</seealso></string></subtype>
        <subtype><typename>Length</typename><string>Length = integer()</string></subtype>
        <subtype><typename>Dir</typename><string>Dir = <seealso marker="#type-direction">direction()</seealso> | both</string></subtype>
        <subtype><typename>Char</typename><string>Char = <seealso marker="#type-grapheme_cluster">grapheme_cluster()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Char</anno>
  <anno>Dir</anno>
  <anno>Length</anno>
  <anno>String</anno>
</spec>
<spec>
  <name>prefix</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>prefix(String :: <seealso marker="unicode#type-chardata">unicode:chardata()</seealso>, Prefix :: <seealso marker="unicode#type-chardata">unicode:chardata()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>nomatch | <seealso marker="unicode#type-chardata">unicode:chardata()</seealso></head></clause>
  </contract>
  <anno>Prefix</anno>
  <anno>String</anno>
</spec>
<spec>
  <name>rchr</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>rchr(String, Character) -&gt; Index</head>
      <guard>
        <subtype><typename>String</typename><string>String = string()</string></subtype>
        <subtype><typename>Character</typename><string>Character = char()</string></subtype>
        <subtype><typename>Index</typename><string>Index = integer() &gt;= 0</string></subtype>
      </guard></clause>
  </contract>
  <anno>Character</anno>
  <anno>Index</anno>
  <anno>String</anno>
</spec>
<spec>
  <name>replace</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>replace(String, SearchPattern, Replacement) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[<seealso marker="unicode#type-chardata">unicode:chardata()</seealso>]</head>
      <guard>
        <subtype><typename>String</typename><string>String = SearchPattern = Replacement = <seealso marker="unicode#type-chardata">unicode:chardata()</seealso></string></subtype>
        <subtype><typename>SearchPattern</typename><string></string></subtype>
        <subtype><typename>Replacement</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Replacement</anno>
  <anno>SearchPattern</anno>
  <anno>String</anno>
</spec>
<spec>
  <name>replace</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>replace(String, SearchPattern, Replacement, Where) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[<seealso marker="unicode#type-chardata">unicode:chardata()</seealso>]</head>
      <guard>
        <subtype><typename>String</typename><string>String = SearchPattern = Replacement = <seealso marker="unicode#type-chardata">unicode:chardata()</seealso></string></subtype>
        <subtype><typename>SearchPattern</typename><string/></subtype>
        <subtype><typename>Replacement</typename><string/></subtype>
        <subtype><typename>Where</typename><string>Where = <seealso marker="#type-direction">direction()</seealso> | all</string></subtype>
      </guard></clause>
  </contract>
  <anno>Replacement</anno>
  <anno>SearchPattern</anno>
  <anno>String</anno>
  <anno>Where</anno>
</spec>
<spec>
  <name>reverse</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>reverse(String :: <seealso marker="unicode#type-chardata">unicode:chardata()</seealso>) -&gt; [<seealso marker="#type-grapheme_cluster">grapheme_cluster()</seealso>]</head></clause>
  </contract>
  <anno>String</anno>
</spec>
<spec>
  <name>right</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>right(String, Number) -&gt; Right</head>
      <guard>
        <subtype><typename>String</typename><string>String = Right = string()</string></subtype>
        <subtype><typename>Right</typename><string/></subtype>
        <subtype><typename>Number</typename><string>Number = integer() &gt;= 0</string></subtype>
      </guard></clause>
  </contract>
  <anno>Number</anno>
  <anno>Right</anno>
  <anno>String</anno>
</spec>
<spec>
  <name>right</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>right(String, Number, Character) -&gt; Right</head>
      <guard>
        <subtype><typename>String</typename><string>String = Right = string()</string></subtype>
        <subtype><typename>Right</typename><string/></subtype>
        <subtype><typename>Number</typename><string>Number = integer() &gt;= 0</string></subtype>
        <subtype><typename>Character</typename><string>Character = char()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Character</anno>
  <anno>Number</anno>
  <anno>Right</anno>
  <anno>String</anno>
</spec>
<spec>
  <name>rstr</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>rstr(String, SubString) -&gt; Index</head>
      <guard>
        <subtype><typename>String</typename><string>String = SubString = string()</string></subtype>
        <subtype><typename>SubString</typename><string/></subtype>
        <subtype><typename>Index</typename><string>Index = integer() &gt;= 0</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>String</anno>
  <anno>SubString</anno>
</spec>
<spec>
  <name>slice</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>slice(String, Start) -&gt; Slice</head>
      <guard>
        <subtype><typename>String</typename><string>String = <seealso marker="unicode#type-chardata">unicode:chardata()</seealso></string></subtype>
        <subtype><typename>Start</typename><string>Start = integer() &gt;= 0</string></subtype>
        <subtype><typename>Slice</typename><string>Slice = <seealso marker="unicode#type-chardata">unicode:chardata()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Slice</anno>
  <anno>Start</anno>
  <anno>String</anno>
</spec>
<spec>
  <name>slice</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>slice(String, Start, Length) -&gt; Slice</head>
      <guard>
        <subtype><typename>String</typename><string>String = <seealso marker="unicode#type-chardata">unicode:chardata()</seealso></string></subtype>
        <subtype><typename>Start</typename><string>Start = integer() &gt;= 0</string></subtype>
        <subtype><typename>Length</typename><string>Length = infinity | integer() &gt;= 0</string></subtype>
        <subtype><typename>Slice</typename><string>Slice = <seealso marker="unicode#type-chardata">unicode:chardata()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Length</anno>
  <anno>Slice</anno>
  <anno>Start</anno>
  <anno>String</anno>
</spec>
<spec>
  <name>span</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>span(String, Chars) -&gt; Length</head>
      <guard>
        <subtype><typename>String</typename><string>String = Chars = string()</string></subtype>
        <subtype><typename>Chars</typename><string/></subtype>
        <subtype><typename>Length</typename><string>Length = integer() &gt;= 0</string></subtype>
      </guard></clause>
  </contract>
  <anno>Chars</anno>
  <anno>Length</anno>
  <anno>String</anno>
</spec>
<spec>
  <name>split</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>split(String, SearchPattern) -&gt; [<seealso marker="unicode#type-chardata">unicode:chardata()</seealso>]</head>
      <guard>
        <subtype><typename>String</typename><string>String = SearchPattern = <seealso marker="unicode#type-chardata">unicode:chardata()</seealso></string></subtype>
        <subtype><typename>SearchPattern</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>SearchPattern</anno>
  <anno>String</anno>
</spec>
<spec>
  <name>split</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>split(String, SearchPattern, Where) -&gt; [<seealso marker="unicode#type-chardata">unicode:chardata()</seealso>]</head>
      <guard>
        <subtype><typename>String</typename><string>String = SearchPattern = <seealso marker="unicode#type-chardata">unicode:chardata()</seealso></string></subtype>
        <subtype><typename>SearchPattern</typename><string/></subtype>
        <subtype><typename>Where</typename><string>Where = <seealso marker="#type-direction">direction()</seealso> | all</string></subtype>
      </guard></clause>
  </contract>
  <anno>SearchPattern</anno>
  <anno>String</anno>
  <anno>Where</anno>
</spec>
<spec>
  <name>str</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>str(String, SubString) -&gt; Index</head>
      <guard>
        <subtype><typename>String</typename><string>String = SubString = string()</string></subtype>
        <subtype><typename>SubString</typename><string/></subtype>
        <subtype><typename>Index</typename><string>Index = integer() &gt;= 0</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>String</anno>
  <anno>SubString</anno>
</spec>
<spec>
  <name>strip</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>strip(String :: string()) -&gt; string()</head></clause>
  </contract>
  <anno>String</anno>
</spec>
<spec>
  <name>strip</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>strip(String, Direction) -&gt; Stripped</head>
      <guard>
        <subtype><typename>String</typename><string>String = Stripped = string()</string></subtype>
        <subtype><typename>Stripped</typename><string/></subtype>
        <subtype><typename>Direction</typename><string>Direction = left | right | both</string></subtype>
      </guard></clause>
  </contract>
  <anno>Direction</anno>
  <anno>String</anno>
  <anno>Stripped</anno>
</spec>
<spec>
  <name>strip</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>strip(String, Direction, Character) -&gt; Stripped</head>
      <guard>
        <subtype><typename>String</typename><string>String = Stripped = string()</string></subtype>
        <subtype><typename>Stripped</typename><string/></subtype>
        <subtype><typename>Direction</typename><string>Direction = left | right | both</string></subtype>
        <subtype><typename>Character</typename><string>Character = char()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Character</anno>
  <anno>Direction</anno>
  <anno>String</anno>
  <anno>Stripped</anno>
</spec>
<spec>
  <name>sub_string</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>sub_string(String, Start) -&gt; SubString</head>
      <guard>
        <subtype><typename>String</typename><string>String = SubString = string()</string></subtype>
        <subtype><typename>SubString</typename><string/></subtype>
        <subtype><typename>Start</typename><string>Start = integer() &gt;= 1</string></subtype>
      </guard></clause>
  </contract>
  <anno>Start</anno>
  <anno>String</anno>
  <anno>SubString</anno>
</spec>
<spec>
  <name>sub_string</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>sub_string(String, Start, Stop) -&gt; SubString</head>
      <guard>
        <subtype><typename>String</typename><string>String = SubString = string()</string></subtype>
        <subtype><typename>SubString</typename><string/></subtype>
        <subtype><typename>Start</typename><string>Start = Stop = integer() &gt;= 1</string></subtype>
        <subtype><typename>Stop</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Start</anno>
  <anno>Stop</anno>
  <anno>String</anno>
  <anno>SubString</anno>
</spec>
<spec>
  <name>sub_word</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>sub_word(String, Number) -&gt; Word</head>
      <guard>
        <subtype><typename>String</typename><string>String = Word = string()</string></subtype>
        <subtype><typename>Word</typename><string/></subtype>
        <subtype><typename>Number</typename><string>Number = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Number</anno>
  <anno>String</anno>
  <anno>Word</anno>
</spec>
<spec>
  <name>sub_word</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>sub_word(String, Number, Character) -&gt; Word</head>
      <guard>
        <subtype><typename>String</typename><string>String = Word = string()</string></subtype>
        <subtype><typename>Word</typename><string/></subtype>
        <subtype><typename>Number</typename><string>Number = integer()</string></subtype>
        <subtype><typename>Character</typename><string>Character = char()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Character</anno>
  <anno>Number</anno>
  <anno>String</anno>
  <anno>Word</anno>
</spec>
<spec>
  <name>substr</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>substr(String, Start) -&gt; SubString</head>
      <guard>
        <subtype><typename>String</typename><string>String = SubString = string()</string></subtype>
        <subtype><typename>SubString</typename><string/></subtype>
        <subtype><typename>Start</typename><string>Start = integer() &gt;= 1</string></subtype>
      </guard></clause>
  </contract>
  <anno>Start</anno>
  <anno>String</anno>
  <anno>SubString</anno>
</spec>
<spec>
  <name>substr</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>substr(String, Start, Length) -&gt; SubString</head>
      <guard>
        <subtype><typename>String</typename><string>String = SubString = string()</string></subtype>
        <subtype><typename>SubString</typename><string/></subtype>
        <subtype><typename>Start</typename><string>Start = integer() &gt;= 1</string></subtype>
        <subtype><typename>Length</typename><string>Length = integer() &gt;= 0</string></subtype>
      </guard></clause>
  </contract>
  <anno>Length</anno>
  <anno>Start</anno>
  <anno>String</anno>
  <anno>SubString</anno>
</spec>
<spec>
  <name>take</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>take(String, Characters) -&gt; {Leading, Trailing}</head>
      <guard>
        <subtype><typename>String</typename><string>String = <seealso marker="unicode#type-chardata">unicode:chardata()</seealso></string></subtype>
        <subtype><typename>Characters</typename><string>Characters = [<seealso marker="#type-grapheme_cluster">grapheme_cluster()</seealso>]</string></subtype>
        <subtype><typename>Leading</typename><string>Leading = Trailing = <seealso marker="unicode#type-chardata">unicode:chardata()</seealso></string></subtype>
        <subtype><typename>Trailing</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Characters</anno>
  <anno>Leading</anno>
  <anno>String</anno>
  <anno>Trailing</anno>
</spec>
<spec>
  <name>take</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>take(String, Characters, Complement) -&gt; {Leading, Trailing}</head>
      <guard>
        <subtype><typename>String</typename><string>String = <seealso marker="unicode#type-chardata">unicode:chardata()</seealso></string></subtype>
        <subtype><typename>Characters</typename><string>Characters = [<seealso marker="#type-grapheme_cluster">grapheme_cluster()</seealso>]</string></subtype>
        <subtype><typename>Complement</typename><string>Complement = boolean()</string></subtype>
        <subtype><typename>Leading</typename><string>Leading = Trailing = <seealso marker="unicode#type-chardata">unicode:chardata()</seealso></string></subtype>
        <subtype><typename>Trailing</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Characters</anno>
  <anno>Complement</anno>
  <anno>Leading</anno>
  <anno>String</anno>
  <anno>Trailing</anno>
</spec>
<spec>
  <name>take</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>take(String, Characters, Complement, Dir) -&gt; {Leading, Trailing}</head>
      <guard>
        <subtype><typename>String</typename><string>String = <seealso marker="unicode#type-chardata">unicode:chardata()</seealso></string></subtype>
        <subtype><typename>Characters</typename><string>Characters = [<seealso marker="#type-grapheme_cluster">grapheme_cluster()</seealso>]</string></subtype>
        <subtype><typename>Complement</typename><string>Complement = boolean()</string></subtype>
        <subtype><typename>Dir</typename><string>Dir = <seealso marker="#type-direction">direction()</seealso></string></subtype>
        <subtype><typename>Leading</typename><string>Leading = Trailing = <seealso marker="unicode#type-chardata">unicode:chardata()</seealso></string></subtype>
        <subtype><typename>Trailing</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Characters</anno>
  <anno>Complement</anno>
  <anno>Dir</anno>
  <anno>Leading</anno>
  <anno>String</anno>
  <anno>Trailing</anno>
</spec>
<spec>
  <name>titlecase</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>titlecase(String :: <seealso marker="unicode#type-chardata">unicode:chardata()</seealso>) -&gt; <seealso marker="unicode#type-chardata">unicode:chardata()</seealso></head></clause>
  </contract>
  <anno>String</anno>
</spec>
<spec>
  <name>to_float</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>to_float(String) -&gt; {Float, Rest} | {error, Reason}</head>
      <guard>
        <subtype><typename>String</typename><string>String = <seealso marker="unicode#type-chardata">unicode:chardata()</seealso></string></subtype>
        <subtype><typename>Float</typename><string>Float = float()</string></subtype>
        <subtype><typename>Rest</typename><string>Rest = <seealso marker="unicode#type-chardata">unicode:chardata()</seealso></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = no_float | badarg</string></subtype>
      </guard></clause>
  </contract>
  <anno>Float</anno>
  <anno>Reason</anno>
  <anno>Rest</anno>
  <anno>String</anno>
</spec>
<spec>
  <name>to_graphemes</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>to_graphemes(String :: <seealso marker="unicode#type-chardata">unicode:chardata()</seealso>) -&gt; [<seealso marker="#type-grapheme_cluster">grapheme_cluster()</seealso>]</head></clause>
  </contract>
  <anno>String</anno>
</spec>
<spec>
  <name>to_integer</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>to_integer(String) -&gt; {Int, Rest} | {error, Reason}</head>
      <guard>
        <subtype><typename>String</typename><string>String = <seealso marker="unicode#type-chardata">unicode:chardata()</seealso></string></subtype>
        <subtype><typename>Int</typename><string>Int = integer()</string></subtype>
        <subtype><typename>Rest</typename><string>Rest = <seealso marker="unicode#type-chardata">unicode:chardata()</seealso></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = no_integer | badarg</string></subtype>
      </guard></clause>
  </contract>
  <anno>Int</anno>
  <anno>Reason</anno>
  <anno>Rest</anno>
  <anno>String</anno>
</spec>
<spec>
  <name>to_lower</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>to_lower(String) -&gt; Result</head>
      <guard>
        <subtype><typename>String</typename><string>String = Result = <seealso marker="io_lib#type-latin1_string">io_lib:latin1_string()</seealso></string></subtype>
        <subtype><typename>Result</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Result</anno>
  <anno>String</anno>
</spec>
<spec>
  <name>to_lower</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>to_lower(Char) -&gt; CharResult</head>
      <guard>
        <subtype><typename>Char</typename><string>Char = CharResult = char()</string></subtype>
        <subtype><typename>CharResult</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Char</anno>
  <anno>CharResult</anno>
</spec>
<spec>
  <name>to_upper</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>to_upper(String) -&gt; Result</head>
      <guard>
        <subtype><typename>String</typename><string>String = Result = <seealso marker="io_lib#type-latin1_string">io_lib:latin1_string()</seealso></string></subtype>
        <subtype><typename>Result</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Result</anno>
  <anno>String</anno>
</spec>
<spec>
  <name>to_upper</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>to_upper(Char) -&gt; CharResult</head>
      <guard>
        <subtype><typename>Char</typename><string>Char = CharResult = char()</string></subtype>
        <subtype><typename>CharResult</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Char</anno>
  <anno>CharResult</anno>
</spec>
<spec>
  <name>tokens</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>tokens(String, SeparatorList) -&gt; Tokens</head>
      <guard>
        <subtype><typename>String</typename><string>String = SeparatorList = string()</string></subtype>
        <subtype><typename>SeparatorList</typename><string/></subtype>
        <subtype><typename>Tokens</typename><string>Tokens = [Token :: nonempty_string()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>SeparatorList</anno>
  <anno>String</anno>
  <anno>Token</anno>
  <anno>Tokens</anno>
</spec>
<spec>
  <name>trim</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>trim(String) -&gt; <seealso marker="unicode#type-chardata">unicode:chardata()</seealso></head>
      <guard>
        <subtype><typename>String</typename><string>String = <seealso marker="unicode#type-chardata">unicode:chardata()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>String</anno>
</spec>
<spec>
  <name>trim</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>trim(String, Dir) -&gt; <seealso marker="unicode#type-chardata">unicode:chardata()</seealso></head>
      <guard>
        <subtype><typename>String</typename><string>String = <seealso marker="unicode#type-chardata">unicode:chardata()</seealso></string></subtype>
        <subtype><typename>Dir</typename><string>Dir = <seealso marker="#type-direction">direction()</seealso> | both</string></subtype>
      </guard></clause>
  </contract>
  <anno>Dir</anno>
  <anno>String</anno>
</spec>
<spec>
  <name>trim</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>trim(String, Dir, Characters) -&gt; <seealso marker="unicode#type-chardata">unicode:chardata()</seealso></head>
      <guard>
        <subtype><typename>String</typename><string>String = <seealso marker="unicode#type-chardata">unicode:chardata()</seealso></string></subtype>
        <subtype><typename>Dir</typename><string>Dir = <seealso marker="#type-direction">direction()</seealso> | both</string></subtype>
        <subtype><typename>Characters</typename><string>Characters = [<seealso marker="#type-grapheme_cluster">grapheme_cluster()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Characters</anno>
  <anno>Dir</anno>
  <anno>String</anno>
</spec>
<spec>
  <name>uppercase</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>uppercase(String :: <seealso marker="unicode#type-chardata">unicode:chardata()</seealso>) -&gt; <seealso marker="unicode#type-chardata">unicode:chardata()</seealso></head></clause>
  </contract>
  <anno>String</anno>
</spec>
<spec>
  <name>words</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>words(String) -&gt; Count</head>
      <guard>
        <subtype><typename>String</typename><string>String = string()</string></subtype>
        <subtype><typename>Count</typename><string>Count = integer() &gt;= 1</string></subtype>
      </guard></clause>
  </contract>
  <anno>Count</anno>
  <anno>String</anno>
</spec>
<spec>
  <name>words</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>words(String, Character) -&gt; Count</head>
      <guard>
        <subtype><typename>String</typename><string>String = string()</string></subtype>
        <subtype><typename>Character</typename><string>Character = char()</string></subtype>
        <subtype><typename>Count</typename><string>Count = integer() &gt;= 1</string></subtype>
      </guard></clause>
  </contract>
  <anno>Character</anno>
  <anno>Count</anno>
  <anno>String</anno>
</spec>
<timestamp>Generated by EDoc, Jul 12 2017, 20:27:27.</timestamp>
</module>