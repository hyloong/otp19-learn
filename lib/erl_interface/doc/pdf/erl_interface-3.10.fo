<?xml version="1.0"?>
<fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format">
  <fo:layout-master-set>
    <fo:simple-page-master master-name="cover" margin="25mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin="0mm"/>
    </fo:simple-page-master>
    <fo:simple-page-master master-name="left-page" margin-top="25mm" margin-bottom="15mm" margin-left="20mm" margin-right="25mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin-top="15mm" margin-bottom="20mm"/>
      <fo:region-before region-name="left-header" extent="10mm"/>
      <fo:region-after region-name="left-footer" extent="10mm"/>
    </fo:simple-page-master>
    <fo:simple-page-master master-name="right-page" margin-top="25mm" margin-bottom="15mm" margin-left="25mm" margin-right="20mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin-top="15mm" margin-bottom="20mm"/>
      <fo:region-before region-name="right-header" extent="10mm"/>
      <fo:region-after region-name="right-footer" extent="10mm"/>
    </fo:simple-page-master>
    <fo:page-sequence-master master-name="document">
      <fo:repeatable-page-master-alternatives>
        <fo:conditional-page-master-reference master-reference="left-page" odd-or-even="even"/>
        <fo:conditional-page-master-reference master-reference="right-page" odd-or-even="odd"/>
      </fo:repeatable-page-master-alternatives>
    </fo:page-sequence-master>
  </fo:layout-master-set>
  <fo:bookmark-tree>
    <fo:bookmark internal-destination="cover-page" starting-state="show">
      <fo:bookmark-title>Erl_Interface</fo:bookmark-title>
      <fo:bookmark internal-destination="idp1531840" starting-state="hide">
        <fo:bookmark-title>Erl_Interface User's Guide</fo:bookmark-title>
        <fo:bookmark internal-destination="idp1524576" starting-state="hide">
          <fo:bookmark-title>Erl_Interface User's Guide</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1520336" starting-state="hide">
            <fo:bookmark-title>Introduction</fo:bookmark-title>
            <fo:bookmark internal-destination="idp1510368" starting-state="hide">
              <fo:bookmark-title>Scope</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1501424" starting-state="hide">
              <fo:bookmark-title>Prerequisites</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1498320" starting-state="hide">
            <fo:bookmark-title>Compiling and Linking Your Code</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1475168" starting-state="hide">
            <fo:bookmark-title>Initializing the Erl_Interface Library</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1471424" starting-state="hide">
            <fo:bookmark-title>Encoding, Decoding, and Sending Erlang Terms</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1461632" starting-state="hide">
            <fo:bookmark-title>Building Terms and Patterns</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1449472" starting-state="hide">
            <fo:bookmark-title>Pattern Matching</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1434064" starting-state="hide">
            <fo:bookmark-title>Connecting to a Distributed Erlang Node</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1425968" starting-state="hide">
            <fo:bookmark-title>Using EPMD</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1414256" starting-state="hide">
            <fo:bookmark-title>Sending and Receiving Erlang Messages</fo:bookmark-title>
            <fo:bookmark internal-destination="idp874400" starting-state="hide">
              <fo:bookmark-title>Example of Sending Messages</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp869360" starting-state="hide">
              <fo:bookmark-title>Example of Receiving Messages</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp858944" starting-state="hide">
            <fo:bookmark-title>Remote Procedure Calls</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1337776" starting-state="hide">
            <fo:bookmark-title>Using Global Names</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp843152" starting-state="hide">
            <fo:bookmark-title>Using the Registry</fo:bookmark-title>
            <fo:bookmark internal-destination="idp832080" starting-state="hide">
              <fo:bookmark-title>Backing Up the Registry to Mnesia</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp821248" starting-state="hide">
              <fo:bookmark-title>Storing Strings and Binaries</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
        </fo:bookmark>
      </fo:bookmark>
      <fo:bookmark internal-destination="idp1324000" starting-state="hide">
        <fo:bookmark-title>Reference Manual</fo:bookmark-title>
        <fo:bookmark internal-destination="idp2902768" starting-state="hide">
          <fo:bookmark-title>ei</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1628384" starting-state="hide">
            <fo:bookmark-title>ei_decode_atom()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1624352" starting-state="hide">
            <fo:bookmark-title>ei_decode_atom_as()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1838128" starting-state="hide">
            <fo:bookmark-title>ei_decode_bignum()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1834800" starting-state="hide">
            <fo:bookmark-title>ei_decode_binary()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2953184" starting-state="hide">
            <fo:bookmark-title>ei_decode_boolean()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1712208" starting-state="hide">
            <fo:bookmark-title>ei_decode_char()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2955040" starting-state="hide">
            <fo:bookmark-title>ei_decode_double()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1676272" starting-state="hide">
            <fo:bookmark-title>ei_decode_ei_term()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1708176" starting-state="hide">
            <fo:bookmark-title>ei_decode_fun()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1866640" starting-state="hide">
            <fo:bookmark-title>free_fun()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1186352" starting-state="hide">
            <fo:bookmark-title>ei_decode_list_header()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1139984" starting-state="hide">
            <fo:bookmark-title>ei_decode_long()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2623568" starting-state="hide">
            <fo:bookmark-title>ei_decode_longlong()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1165152" starting-state="hide">
            <fo:bookmark-title>ei_decode_map_header()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1755584" starting-state="hide">
            <fo:bookmark-title>ei_decode_pid()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1674192" starting-state="hide">
            <fo:bookmark-title>ei_decode_port()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1636416" starting-state="hide">
            <fo:bookmark-title>ei_decode_ref()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1680832" starting-state="hide">
            <fo:bookmark-title>ei_decode_string()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1641776" starting-state="hide">
            <fo:bookmark-title>ei_decode_term()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2920192" starting-state="hide">
            <fo:bookmark-title>ei_decode_trace()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1690288" starting-state="hide">
            <fo:bookmark-title>ei_decode_tuple_header()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1604864" starting-state="hide">
            <fo:bookmark-title>ei_decode_ulong()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1780992" starting-state="hide">
            <fo:bookmark-title>ei_decode_ulonglong()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1165904" starting-state="hide">
            <fo:bookmark-title>ei_decode_version()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1602560" starting-state="hide">
            <fo:bookmark-title>ei_encode_atom()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1632368" starting-state="hide">
            <fo:bookmark-title>ei_encode_atom_len()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1633280" starting-state="hide">
            <fo:bookmark-title>ei_x_encode_atom()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1634176" starting-state="hide">
            <fo:bookmark-title>ei_x_encode_atom_len()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp970096" starting-state="hide">
            <fo:bookmark-title>ei_encode_atom_as()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1868096" starting-state="hide">
            <fo:bookmark-title>ei_encode_atom_len_as()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1869072" starting-state="hide">
            <fo:bookmark-title>ei_x_encode_atom_as()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1870032" starting-state="hide">
            <fo:bookmark-title>ei_x_encode_atom_len_as()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1678784" starting-state="hide">
            <fo:bookmark-title>ei_encode_bignum()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1679680" starting-state="hide">
            <fo:bookmark-title>ei_x_encode_bignum()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1640320" starting-state="hide">
            <fo:bookmark-title>ei_encode_binary()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1564320" starting-state="hide">
            <fo:bookmark-title>ei_x_encode_binary()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1567968" starting-state="hide">
            <fo:bookmark-title>ei_encode_boolean()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3253872" starting-state="hide">
            <fo:bookmark-title>ei_x_encode_boolean()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3258320" starting-state="hide">
            <fo:bookmark-title>ei_encode_char()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3259216" starting-state="hide">
            <fo:bookmark-title>ei_x_encode_char()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3263408" starting-state="hide">
            <fo:bookmark-title>ei_encode_double()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3264304" starting-state="hide">
            <fo:bookmark-title>ei_x_encode_double()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3341472" starting-state="hide">
            <fo:bookmark-title>ei_encode_empty_list()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3342240" starting-state="hide">
            <fo:bookmark-title>ei_x_encode_empty_list()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3344928" starting-state="hide">
            <fo:bookmark-title>ei_encode_fun()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3345696" starting-state="hide">
            <fo:bookmark-title>ei_x_encode_fun()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3349984" starting-state="hide">
            <fo:bookmark-title>ei_encode_list_header()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3350880" starting-state="hide">
            <fo:bookmark-title>ei_x_encode_list_header()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3359328" starting-state="hide">
            <fo:bookmark-title>ei_encode_long()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3360224" starting-state="hide">
            <fo:bookmark-title>ei_x_encode_long()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3363888" starting-state="hide">
            <fo:bookmark-title>ei_encode_longlong()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3364784" starting-state="hide">
            <fo:bookmark-title>ei_x_encode_longlong()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3368464" starting-state="hide">
            <fo:bookmark-title>ei_encode_map_header()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3369360" starting-state="hide">
            <fo:bookmark-title>ei_x_encode_map_header()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3375104" starting-state="hide">
            <fo:bookmark-title>ei_encode_pid()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3376016" starting-state="hide">
            <fo:bookmark-title>ei_x_encode_pid()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3380176" starting-state="hide">
            <fo:bookmark-title>ei_encode_port()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3381088" starting-state="hide">
            <fo:bookmark-title>ei_x_encode_port()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3385232" starting-state="hide">
            <fo:bookmark-title>ei_encode_ref()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3386144" starting-state="hide">
            <fo:bookmark-title>ei_x_encode_ref()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3390288" starting-state="hide">
            <fo:bookmark-title>ei_encode_string()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3391184" starting-state="hide">
            <fo:bookmark-title>ei_encode_string_len()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3392096" starting-state="hide">
            <fo:bookmark-title>ei_x_encode_string()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3392992" starting-state="hide">
            <fo:bookmark-title>ei_x_encode_string_len()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3396784" starting-state="hide">
            <fo:bookmark-title>ei_encode_term()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3397680" starting-state="hide">
            <fo:bookmark-title>ei_x_encode_term()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3403104" starting-state="hide">
            <fo:bookmark-title>ei_encode_trace()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3404016" starting-state="hide">
            <fo:bookmark-title>ei_x_encode_trace()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3408160" starting-state="hide">
            <fo:bookmark-title>ei_encode_tuple_header()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3409072" starting-state="hide">
            <fo:bookmark-title>ei_x_encode_tuple_header()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3413920" starting-state="hide">
            <fo:bookmark-title>ei_encode_ulong()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3414816" starting-state="hide">
            <fo:bookmark-title>ei_x_encode_ulong()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3418512" starting-state="hide">
            <fo:bookmark-title>ei_encode_ulonglong()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3419424" starting-state="hide">
            <fo:bookmark-title>ei_x_encode_ulonglong()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3423136" starting-state="hide">
            <fo:bookmark-title>ei_encode_version()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3424032" starting-state="hide">
            <fo:bookmark-title>ei_x_encode_version()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3426800" starting-state="hide">
            <fo:bookmark-title>ei_get_type()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3433328" starting-state="hide">
            <fo:bookmark-title>ei_print_term()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3434224" starting-state="hide">
            <fo:bookmark-title>ei_s_print_term()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3444672" starting-state="hide">
            <fo:bookmark-title>ei_set_compat_rel()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3455904" starting-state="hide">
            <fo:bookmark-title>ei_skip_term()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3462672" starting-state="hide">
            <fo:bookmark-title>ei_x_append()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3463568" starting-state="hide">
            <fo:bookmark-title>ei_x_append_buf()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3466736" starting-state="hide">
            <fo:bookmark-title>ei_x_format()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3467632" starting-state="hide">
            <fo:bookmark-title>ei_x_format_wo_ver()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3473952" starting-state="hide">
            <fo:bookmark-title>ei_x_free()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3477104" starting-state="hide">
            <fo:bookmark-title>ei_x_new()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3477968" starting-state="hide">
            <fo:bookmark-title>ei_x_new_with_version()
               </fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3495872" starting-state="hide">
          <fo:bookmark-title>ei_connect</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3514528" starting-state="hide">
            <fo:bookmark-title>*ei_gethostbyaddr()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3515424" starting-state="hide">
            <fo:bookmark-title>*ei_gethostbyaddr_r()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3516400" starting-state="hide">
            <fo:bookmark-title>*ei_gethostbyname()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3517280" starting-state="hide">
            <fo:bookmark-title>*ei_gethostbyname_r()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3520080" starting-state="hide">
            <fo:bookmark-title>ei_accept()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3531312" starting-state="hide">
            <fo:bookmark-title>ei_accept_tmo()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3534640" starting-state="hide">
            <fo:bookmark-title>ei_connect()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3535536" starting-state="hide">
            <fo:bookmark-title>ei_xconnect()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3552144" starting-state="hide">
            <fo:bookmark-title>ei_connect_init()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3553088" starting-state="hide">
            <fo:bookmark-title>ei_connect_xinit()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3574864" starting-state="hide">
            <fo:bookmark-title>ei_connect_tmo()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3575776" starting-state="hide">
            <fo:bookmark-title>ei_xconnect_tmo()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3579568" starting-state="hide">
            <fo:bookmark-title>ei_get_tracelevel()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3580432" starting-state="hide">
            <fo:bookmark-title>ei_set_tracelevel()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3584464" starting-state="hide">
            <fo:bookmark-title>ei_publish()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3598480" starting-state="hide">
            <fo:bookmark-title>ei_publish_tmo()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3601776" starting-state="hide">
            <fo:bookmark-title>ei_receive()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3617808" starting-state="hide">
            <fo:bookmark-title>ei_receive_encoded()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3628960" starting-state="hide">
            <fo:bookmark-title>ei_receive_encoded_tmo()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3632320" starting-state="hide">
            <fo:bookmark-title>ei_receive_msg()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3633216" starting-state="hide">
            <fo:bookmark-title>ei_xreceive_msg()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3656624" starting-state="hide">
            <fo:bookmark-title>ei_receive_msg_tmo()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3657552" starting-state="hide">
            <fo:bookmark-title>ei_xreceive_msg_tmo()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3661296" starting-state="hide">
            <fo:bookmark-title>ei_receive_tmo()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3664608" starting-state="hide">
            <fo:bookmark-title>ei_reg_send()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3675840" starting-state="hide">
            <fo:bookmark-title>ei_reg_send_tmo()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3679184" starting-state="hide">
            <fo:bookmark-title>ei_rpc()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3680128" starting-state="hide">
            <fo:bookmark-title>ei_rpc_to()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3681072" starting-state="hide">
            <fo:bookmark-title>ei_rpc_from()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3713008" starting-state="hide">
            <fo:bookmark-title>ei_self()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3717664" starting-state="hide">
            <fo:bookmark-title>ei_send()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3726480" starting-state="hide">
            <fo:bookmark-title>ei_send_encoded()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3730208" starting-state="hide">
            <fo:bookmark-title>ei_send_encoded_tmo()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3733536" starting-state="hide">
            <fo:bookmark-title>ei_send_reg_encoded()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3740656" starting-state="hide">
            <fo:bookmark-title>ei_send_reg_encoded_tmo()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3744016" starting-state="hide">
            <fo:bookmark-title>ei_send_tmo()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3747312" starting-state="hide">
            <fo:bookmark-title>ei_thisnodename()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3748192" starting-state="hide">
            <fo:bookmark-title>ei_thishostname()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3749072" starting-state="hide">
            <fo:bookmark-title>ei_thisalivename()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3753808" starting-state="hide">
            <fo:bookmark-title>ei_unpublish()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3762144" starting-state="hide">
            <fo:bookmark-title>ei_unpublish_tmo()
               </fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3783968" starting-state="hide">
          <fo:bookmark-title>registry</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3788112" starting-state="hide">
            <fo:bookmark-title>ei_reg_close()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3793856" starting-state="hide">
            <fo:bookmark-title>ei_reg_delete()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3804480" starting-state="hide">
            <fo:bookmark-title>ei_reg_dump()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3820544" starting-state="hide">
            <fo:bookmark-title>ei_reg_getfval()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3829872" starting-state="hide">
            <fo:bookmark-title>ei_reg_getival()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3839168" starting-state="hide">
            <fo:bookmark-title>ei_reg_getpval()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3850208" starting-state="hide">
            <fo:bookmark-title>ei_reg_getsval()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3859472" starting-state="hide">
            <fo:bookmark-title>ei_reg_getval()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3880960" starting-state="hide">
            <fo:bookmark-title>ei_reg_markdirty()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3889584" starting-state="hide">
            <fo:bookmark-title>ei_reg_open()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3896272" starting-state="hide">
            <fo:bookmark-title>ei_reg_purge()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3904032" starting-state="hide">
            <fo:bookmark-title>ei_reg_resize()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3910352" starting-state="hide">
            <fo:bookmark-title>ei_reg_restore()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3922688" starting-state="hide">
            <fo:bookmark-title>ei_reg_setfval()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3933504" starting-state="hide">
            <fo:bookmark-title>ei_reg_setival()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3944304" starting-state="hide">
            <fo:bookmark-title>ei_reg_setpval()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3957440" starting-state="hide">
            <fo:bookmark-title>ei_reg_setsval()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3969312" starting-state="hide">
            <fo:bookmark-title>ei_reg_setval()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3990736" starting-state="hide">
            <fo:bookmark-title>ei_reg_stat()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4009504" starting-state="hide">
            <fo:bookmark-title>ei_reg_tabstat()
               </fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp4031088" starting-state="hide">
          <fo:bookmark-title>erl_connect</fo:bookmark-title>
          <fo:bookmark internal-destination="idp4036416" starting-state="hide">
            <fo:bookmark-title>erl_accept()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4046848" starting-state="hide">
            <fo:bookmark-title>erl_close_connection()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4053184" starting-state="hide">
            <fo:bookmark-title>erl_connect()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4054048" starting-state="hide">
            <fo:bookmark-title>erl_xconnect()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4071872" starting-state="hide">
            <fo:bookmark-title>erl_connect_init()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4072768" starting-state="hide">
            <fo:bookmark-title>erl_connect_xinit()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4107168" starting-state="hide">
            <fo:bookmark-title>erl_publish()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4118992" starting-state="hide">
            <fo:bookmark-title>erl_receive()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4134080" starting-state="hide">
            <fo:bookmark-title>erl_receive_msg()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4170688" starting-state="hide">
            <fo:bookmark-title>erl_reg_send()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4182592" starting-state="hide">
            <fo:bookmark-title>erl_rpc()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4183472" starting-state="hide">
            <fo:bookmark-title>erl_rpc_from()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4184352" starting-state="hide">
            <fo:bookmark-title>erl_rpc_to()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4215440" starting-state="hide">
            <fo:bookmark-title>erl_send()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4228496" starting-state="hide">
            <fo:bookmark-title>erl_thisalivename()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4229360" starting-state="hide">
            <fo:bookmark-title>erl_thiscookie()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4230224" starting-state="hide">
            <fo:bookmark-title>erl_thiscreation()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4231088" starting-state="hide">
            <fo:bookmark-title>erl_thishostname()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4231952" starting-state="hide">
            <fo:bookmark-title>erl_thisnodename()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4235584" starting-state="hide">
            <fo:bookmark-title>erl_unpublish()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4245360" starting-state="hide">
            <fo:bookmark-title>erl_xreceive_msg()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4258272" starting-state="hide">
            <fo:bookmark-title>*erl_gethostbyaddr()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4259152" starting-state="hide">
            <fo:bookmark-title>*erl_gethostbyaddr_r()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4260080" starting-state="hide">
            <fo:bookmark-title>*erl_gethostbyname()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4260960" starting-state="hide">
            <fo:bookmark-title>*erl_gethostbyname_r()
               </fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp4280016" starting-state="hide">
          <fo:bookmark-title>erl_error</fo:bookmark-title>
          <fo:bookmark internal-destination="idp4284448" starting-state="hide">
            <fo:bookmark-title>erl_err_msg()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4288576" starting-state="hide">
            <fo:bookmark-title>erl_err_quit()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4292816" starting-state="hide">
            <fo:bookmark-title>erl_err_ret()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4296544" starting-state="hide">
            <fo:bookmark-title>erl_err_sys()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4304160" starting-state="hide">
            <fo:bookmark-title>erl_errno()
                </fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp4322096" starting-state="hide">
          <fo:bookmark-title>erl_eterm</fo:bookmark-title>
          <fo:bookmark internal-destination="idp4382688" starting-state="hide">
            <fo:bookmark-title>erl_cons()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4395968" starting-state="hide">
            <fo:bookmark-title>erl_copy_term()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4400032" starting-state="hide">
            <fo:bookmark-title>erl_element()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4409200" starting-state="hide">
            <fo:bookmark-title>erl_hd()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4414960" starting-state="hide">
            <fo:bookmark-title>erl_init()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4419984" starting-state="hide">
            <fo:bookmark-title>erl_iolist_length()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4427616" starting-state="hide">
            <fo:bookmark-title>erl_iolist_to_binary()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4434816" starting-state="hide">
            <fo:bookmark-title>erl_iolist_to_string()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4444112" starting-state="hide">
            <fo:bookmark-title>erl_length()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4449952" starting-state="hide">
            <fo:bookmark-title>erl_mk_atom()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4459824" starting-state="hide">
            <fo:bookmark-title>erl_mk_binary()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4468320" starting-state="hide">
            <fo:bookmark-title>erl_mk_empty_list()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4471552" starting-state="hide">
            <fo:bookmark-title>erl_mk_estring()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4479760" starting-state="hide">
            <fo:bookmark-title>erl_mk_float()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4486736" starting-state="hide">
            <fo:bookmark-title>erl_mk_int()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4492832" starting-state="hide">
            <fo:bookmark-title>erl_mk_list()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4501120" starting-state="hide">
            <fo:bookmark-title>erl_mk_long_ref()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4514112" starting-state="hide">
            <fo:bookmark-title>erl_mk_pid()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4525056" starting-state="hide">
            <fo:bookmark-title>erl_mk_port()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4534512" starting-state="hide">
            <fo:bookmark-title>erl_mk_ref()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4546096" starting-state="hide">
            <fo:bookmark-title>erl_mk_string()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4551824" starting-state="hide">
            <fo:bookmark-title>erl_mk_tuple()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4562576" starting-state="hide">
            <fo:bookmark-title>erl_mk_uint()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4568704" starting-state="hide">
            <fo:bookmark-title>erl_mk_var()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4574064" starting-state="hide">
            <fo:bookmark-title>erl_print_term()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4580912" starting-state="hide">
            <fo:bookmark-title>erl_set_compat_rel()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4591424" starting-state="hide">
            <fo:bookmark-title>erl_size()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4597712" starting-state="hide">
            <fo:bookmark-title>erl_tl()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4603472" starting-state="hide">
            <fo:bookmark-title>erl_var_content()
               </fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp4621424" starting-state="hide">
          <fo:bookmark-title>erl_format</fo:bookmark-title>
          <fo:bookmark internal-destination="idp4624336" starting-state="hide">
            <fo:bookmark-title>erl_format()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4639264" starting-state="hide">
            <fo:bookmark-title>erl_match()
               </fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp4662096" starting-state="hide">
          <fo:bookmark-title>erl_global</fo:bookmark-title>
          <fo:bookmark internal-destination="idp4666992" starting-state="hide">
            <fo:bookmark-title>erl_global_names()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4679120" starting-state="hide">
            <fo:bookmark-title>erl_global_register()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4690272" starting-state="hide">
            <fo:bookmark-title>erl_global_unregister()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4698832" starting-state="hide">
            <fo:bookmark-title>erl_global_whereis()
               </fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp4718944" starting-state="hide">
          <fo:bookmark-title>erl_malloc</fo:bookmark-title>
          <fo:bookmark internal-destination="idp4721808" starting-state="hide">
            <fo:bookmark-title>erl_alloc_eterm()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4739616" starting-state="hide">
            <fo:bookmark-title>erl_eterm_release()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4743248" starting-state="hide">
            <fo:bookmark-title>erl_eterm_statistics()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4753600" starting-state="hide">
            <fo:bookmark-title>erl_free()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4757616" starting-state="hide">
            <fo:bookmark-title>erl_free_array()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4763904" starting-state="hide">
            <fo:bookmark-title>erl_free_compound()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4770448" starting-state="hide">
            <fo:bookmark-title>erl_free_term()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4774016" starting-state="hide">
            <fo:bookmark-title>erl_malloc()
               </fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp4785728" starting-state="hide">
          <fo:bookmark-title>erl_marshal</fo:bookmark-title>
          <fo:bookmark internal-destination="idp4788656" starting-state="hide">
            <fo:bookmark-title>erl_compare_ext()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4798160" starting-state="hide">
            <fo:bookmark-title>erl_decode()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4799024" starting-state="hide">
            <fo:bookmark-title>erl_decode_buf()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4812384" starting-state="hide">
            <fo:bookmark-title>erl_encode()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4813248" starting-state="hide">
            <fo:bookmark-title>erl_encode_buf()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4838192" starting-state="hide">
            <fo:bookmark-title>erl_ext_size()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4841792" starting-state="hide">
            <fo:bookmark-title>erl_ext_type()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4855680" starting-state="hide">
            <fo:bookmark-title>erl_peek_ext()
               </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4864048" starting-state="hide">
            <fo:bookmark-title>erl_term_len()
               </fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp4876768" starting-state="hide">
          <fo:bookmark-title>erl_call</fo:bookmark-title>
        </fo:bookmark>
      </fo:bookmark>
    </fo:bookmark>
  </fo:bookmark-tree>
  <fo:page-sequence font-family="sans-serif" force-page-count="even" master-reference="cover" font-size="10pt">
    <fo:flow flow-name="xsl-region-body">
      <fo:block space-before="130mm" space-before.conditionality="retain" text-align="end">
        <fo:external-graphic src="/root/download/otp_src_20.0/bootstrap/lib/erl_docgen/priv/images/erlang-logo.gif"/>
      </fo:block>
      <fo:block id="cover-page" border-before-style="solid" border-before-width="10pt" border-color="#960003" font-size="2.3em" padding-before="0.5em" text-align="end">Erl_Interface</fo:block>
      <fo:block font-size="0.9em" text-align="end">Copyright © 1998-2017 Ericsson AB. All Rights Reserved.</fo:block>
      <fo:block font-size="0.9em" text-align="end">Erl_Interface 3.10</fo:block>
      <fo:block font-size="0.9em" text-align="end">July 12, 2017</fo:block>
      <fo:block padding-before="2.5em" font-size="1.33em" font-weight="bold" color="#C00" text-align="end"/>
      <fo:block break-before="page" border-before-style="solid" border-before-width="1pt" border-color="#960003" font-weight="bold" padding-before="0.5em" space-before="200mm" space-before.conditionality="retain">Copyright © 1998-2017 Ericsson AB. All Rights Reserved.</fo:block>
      <fo:block font-size="0.9em">
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.

    Ericsson AB. All Rights Reserved..
        </fo:block>
      <fo:block font-size="0.9em" font-weight="bold" space-before="2em">July 12, 2017</fo:block>
    </fo:flow>
  </fo:page-sequence>
  <fo:page-sequence font-family="serif" master-reference="document" initial-page-number="1" font-size="10pt">
    <fo:static-content flow-name="left-header">
      <fo:block text-align="start" border-after-style="solid" border-after-width="2pt" border-color="#960003" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">
        <fo:retrieve-marker retrieve-boundary="page-sequence" retrieve-class-name="chapter-title" retrieve-position="first-including-carryover"/>
      </fo:block>
    </fo:static-content>
    <fo:static-content flow-name="right-header">
      <fo:block text-align="end" border-after-style="solid" border-after-width="2pt" border-color="#960003" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">
        <fo:retrieve-marker retrieve-boundary="page-sequence" retrieve-class-name="chapter-title" retrieve-position="first-including-carryover"/>
      </fo:block>
    </fo:static-content>
    <fo:static-content flow-name="left-footer">
      <fo:block text-align="start" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold"><fo:page-number/> | Ericsson AB. All Rights Reserved.:
            Erl_Interface</fo:block>
    </fo:static-content>
    <fo:static-content flow-name="right-footer">
      <fo:block text-align="end" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">Ericsson AB. All Rights Reserved.:
            Erl_Interface | <fo:page-number/></fo:block>
    </fo:static-content>
    <fo:flow flow-name="xsl-region-body"><fo:block/><fo:block id="idp1531840" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">1   
      Erl_Interface User's Guide</fo:block><fo:block id="idp1524576" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.1  Erl_Interface User's Guide</fo:marker>1.1  Erl_Interface User's Guide</fo:block><fo:block id="idp1520336" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.1 
      Introduction</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Erl_Interface</fo:inline> library contains functions that help you
      integrate programs written in C and Erlang. The functions in
      <fo:inline font-family="monospace">Erl_Interface</fo:inline> support the following:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Manipulation of data represented as Erlang data types</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Conversion of data between C and Erlang formats</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Encoding and decoding of Erlang data types for transmission or
        storage</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Communication between C nodes and Erlang processes</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Backup and restore of C node state to and from
        <fo:inline font-style="italic">Mnesia</fo:inline></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By default, the <fo:inline font-family="monospace">Erl_Interface</fo:inline> libraries are only guaranteed
        to be compatible with other Erlang/OTP components from the same
        release as the libraries themselves. For information about how to
        communicate with Erlang/OTP components from earlier releases, see
        function <fo:inline font-style="italic">
        <fo:inline font-family="monospace">ei:ei_set_compat_rel</fo:inline></fo:inline> and
        <fo:inline font-style="italic">
        <fo:inline font-family="monospace">erl_eterm:erl_set_compat_rel</fo:inline></fo:inline>.</fo:block>
    </fo:block>

    <fo:block id="idp1510368" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Scope</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the following sections, these topics are described:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Compiling your code for use with <fo:inline font-family="monospace">Erl_Interface</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Initializing <fo:inline font-family="monospace">Erl_Interface</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Encoding, decoding, and sending Erlang terms</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Building terms and patterns</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Pattern matching</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Connecting to a distributed Erlang node</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Using the Erlang Port Mapper Daemon (EPMD)</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Sending and receiving Erlang messages</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Remote procedure calls</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Using global names</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Using the registry</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
    

    <fo:block id="idp1501424" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Prerequisites</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is assumed that the reader is familiar with the Erlang programming
        language.</fo:block>
    
  <fo:block id="idp1498320" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.2 
      Compiling and Linking Your Code</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To use any of the <fo:inline font-family="monospace">Erl_Interface</fo:inline> functions, include the
      following lines in your code:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#include "erl_interface.h"
#include "ei.h"    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Determine where the top directory of your OTP installation is.
      To find this, start Erlang and enter the following
      command at the Eshell prompt:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Eshell V4.7.4  (abort with ^G)
1&gt; code:root_dir().
/usr/local/otp    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To compile your code, ensure that your C compiler knows where
      to find <fo:inline font-family="monospace">erl_interface.h</fo:inline> by specifying an appropriate
      <fo:inline font-family="monospace">-I</fo:inline> argument on the command line, or add it to
      the <fo:inline font-family="monospace">CFLAGS</fo:inline> definition in your
      <fo:inline font-family="monospace">Makefile</fo:inline>. The correct value for this path is
      <fo:inline font-family="monospace">$OTPROOT/lib/erl_interface-$EIVSN/include</fo:inline>,
      where:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">$OTPROOT</fo:inline> is the path reported by
          <fo:inline font-family="monospace">code:root_dir/0</fo:inline> in the example above.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">$EIVSN</fo:inline> is the version of the <fo:inline font-family="monospace">Erl_Interface</fo:inline> application,
          for example, <fo:inline font-family="monospace">erl_interface-3.2.3</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Compiling the code:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ cc -c -I/usr/local/otp/lib/erl_interface-3.2.3/include myprog.c    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When linking:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Specify the path to <fo:inline font-family="monospace">liberl_interface.a</fo:inline> and
        <fo:inline font-family="monospace">libei.a</fo:inline> with
        <fo:inline font-family="monospace">-L$OTPROOT/lib/erl_interface-3.2.3/lib</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Specify the name of the libraries with
        <fo:inline font-family="monospace">-lerl_interface -lei</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Do this on the command line or add the flags to the
      <fo:inline font-family="monospace">LDFLAGS</fo:inline> definition in your
      <fo:inline font-family="monospace">Makefile</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Linking the code:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ ld -L/usr/local/otp/lib/erl_interface-3.2.3/
                            lib myprog.o -lerl_interface -lei -o myprog    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On some systems it can be necessary to link with some more
      libraries (for example, <fo:inline font-family="monospace">libnsl.a</fo:inline> and
      <fo:inline font-family="monospace">libsocket.a</fo:inline> on Solaris, or
      <fo:inline font-family="monospace">wsock32.lib</fo:inline> on Windows) to use the
      communication facilities of <fo:inline font-family="monospace">Erl_Interface</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you use the <fo:inline font-family="monospace">Erl_Interface</fo:inline> functions in a threaded
      application based on POSIX threads or Solaris threads, then
      <fo:inline font-family="monospace">Erl_Interface</fo:inline> needs access to some of the synchronization
      facilities in your threads package. You must specify extra
      compiler flags to indicate which of the packages you use. Define
      <fo:inline font-family="monospace">_REENTRANT</fo:inline> and either <fo:inline font-family="monospace">STHREADS</fo:inline> or
      <fo:inline font-family="monospace">PTHREADS</fo:inline>. The default is to use POSIX threads if
      <fo:inline font-family="monospace">_REENTRANT</fo:inline> is specified.</fo:block>
  <fo:block id="idp1475168" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.3 
      Initializing the Erl_Interface Library</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Before calling any of the other <fo:inline font-family="monospace">Erl_Interface</fo:inline> functions, call
      <fo:inline font-family="monospace">erl_init()</fo:inline> exactly once to initialize the library.
      <fo:inline font-family="monospace">erl_init()</fo:inline> takes two arguments. However, the arguments
      are no longer used by <fo:inline font-family="monospace">Erl_Interface</fo:inline> and are therefore to be
      specified as <fo:inline font-family="monospace">erl_init(NULL,0)</fo:inline>.</fo:block>
  <fo:block id="idp1471424" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.4 
      Encoding, Decoding, and Sending Erlang Terms</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Data sent between distributed Erlang nodes is encoded in the
      Erlang external format. You must therefore encode and decode
      Erlang terms into byte streams if you want to use the distribution
      protocol to communicate between a C program and Erlang.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Erl_Interface</fo:inline> library supports this activity. It has
      several C functions that create and manipulate Erlang data
      structures. The library also contains an encode and a decode function.
      The following example shows how to create and encode an Erlang tuple
      <fo:inline font-family="monospace">{tobbe,3928}</fo:inline>:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
ETERM *arr[2], *tuple;
char buf[BUFSIZ];
int i;
  
arr[0] = erl_mk_atom("tobbe");
arr[1] = erl_mk_integer(3928);
tuple  = erl_mk_tuple(arr, 2);
i = erl_encode(tuple, buf);    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Alternatively, you can use <fo:inline font-family="monospace">erl_send()</fo:inline> and
      <fo:inline font-family="monospace">erl_receive_msg</fo:inline>, which handle the encoding and
      decoding of messages transparently.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For a complete description, see the following modules:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic"><fo:inline font-family="monospace">erl_eterm</fo:inline></fo:inline>
        for creating Erlang terms</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic"><fo:inline font-family="monospace">erl_marshal</fo:inline></fo:inline>
        for encoding and decoding routines</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp1461632" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.5 
      Building Terms and Patterns</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The previous example can be simplified by using the
      <fo:inline font-style="italic"><fo:inline font-family="monospace">erl_format</fo:inline></fo:inline> module
      to create an Erlang term:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
ETERM *ep;
ep = erl_format("{~a,~i}", "tobbe", 3928);    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For a complete description of the different format directives, see
      the <fo:inline font-style="italic"><fo:inline font-family="monospace">erl_format</fo:inline></fo:inline> module.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following example is more complex:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
ETERM *ep;
ep = erl_format("[{name,~a},{age,~i},{data,~w}]",
                 "madonna", 
                 21, 
                 erl_format("[{adr,~s,~i}]", "E-street", 42));
erl_free_compound(ep);      </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As in the previous examples, it is your responsibility to free the
      memory allocated for Erlang terms. In this example,
      <fo:inline font-family="monospace">erl_free_compound()</fo:inline> ensures that the complete term
      pointed to by <fo:inline font-family="monospace">ep</fo:inline> is released. This is necessary
      because the pointer from the second call to <fo:inline font-family="monospace">erl_format</fo:inline> is lost.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following example shows a slightly different solution:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
ETERM *ep,*ep2;
ep2 = erl_format("[{adr,~s,~i}]","E-street",42);
ep  = erl_format("[{name,~a},{age,~i},{data,~w}]",
                 "madonna", 21, ep2);
erl_free_term(ep);  
erl_free_term(ep2);      </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this case, you free the two terms independently. The order in
      which you free the terms <fo:inline font-family="monospace">ep</fo:inline> and <fo:inline font-family="monospace">ep2</fo:inline>
      is not important,
      because the <fo:inline font-family="monospace">Erl_Interface</fo:inline> library uses reference counting to
      determine when it is safe to remove objects.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you are unsure whether you have freed the terms properly, you
      can use the following function to see the status of the fixed term
      allocator:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
long allocated, freed;

erl_eterm_statistics(&amp;allocated,&amp;freed);
printf("currently allocated blocks: %ld\n",allocated);
printf("length of freelist: %ld\n",freed);

/* really free the freelist */
erl_eterm_release();
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more information, see the
      <fo:inline font-style="italic"><fo:inline font-family="monospace">erl_malloc</fo:inline></fo:inline> module.</fo:block>
  <fo:block id="idp1449472" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.6 
      Pattern Matching</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An Erlang pattern is a term that can contain unbound variables or
      <fo:inline font-family="monospace">"do not care"</fo:inline> symbols. Such a pattern can be matched
      against a
      term and, if the match is successful, any unbound variables in the
      pattern will be bound as a side effect. The content of a bound
      variable can then be retrieved:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
ETERM *pattern;
pattern = erl_format("{madonna,Age,_}");    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-style="italic">
      <fo:inline font-family="monospace">erl_format:erl_match</fo:inline></fo:inline> function
      performs pattern matching. It takes a
      pattern and a term and tries to match them. As a side effect any unbound
      variables in the pattern will be bound. In the following example, a
      pattern is created with a variable <fo:inline font-family="monospace">Age</fo:inline>, which is included at two
      positions in the tuple. The pattern match is performed as follows:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl_match</fo:inline> binds the contents of <fo:inline font-family="monospace">Age</fo:inline> to <fo:inline font-family="monospace">21</fo:inline>
          the first time it reaches the variable.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The second occurrence of <fo:inline font-family="monospace">Age</fo:inline> causes a test for
          equality between the terms, as <fo:inline font-family="monospace">Age</fo:inline> is already bound to
          <fo:inline font-family="monospace">21</fo:inline>. As <fo:inline font-family="monospace">Age</fo:inline> is bound to <fo:inline font-family="monospace">21</fo:inline>, the equality test
          succeeds and the match continues until the end of the pattern.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the end of the pattern is reached, the match succeeds and you
          can retrieve the contents of the variable.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
ETERM *pattern,*term;
pattern = erl_format("{madonna,Age,Age}");
term    = erl_format("{madonna,21,21}");
if (erl_match(pattern, term)) {
  fprintf(stderr, "Yes, they matched: Age = ");
  ep = erl_var_content(pattern, "Age"); 
  erl_print_term(stderr, ep);
  fprintf(stderr,"\n");
  erl_free_term(ep);
}
erl_free_term(pattern);
erl_free_term(term);    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more information, see the
      <fo:inline font-style="italic">
      <fo:inline font-family="monospace">erl_format:erl_match</fo:inline></fo:inline> function.</fo:block>
  <fo:block id="idp1434064" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.7 
      Connecting to a Distributed Erlang Node</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To connect to a distributed Erlang node, you must first
      initialize the connection routine with
      <fo:inline font-style="italic">
      <fo:inline font-family="monospace">erl_connect:erl_connect_init</fo:inline></fo:inline>,
      which stores information, such as the hostname, node name, and IP
      address for later use:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
int identification_number = 99;
int creation=1;
char *cookie="a secret cookie string"; /* An example */
erl_connect_init(identification_number, cookie, creation);    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more information, see the
      <fo:inline font-style="italic"><fo:inline font-family="monospace">erl_connect</fo:inline></fo:inline> module.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">After initialization, you set up the connection to the Erlang node.
      To specify the Erlang node you want to connect to, use
      <fo:inline font-family="monospace">erl_connect()</fo:inline>. The following example sets up the
      connection and is to result in a valid socket file descriptor:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
int sockfd;
char *nodename="xyz@chivas.du.etx.ericsson.se"; /* An example */
if ((sockfd = erl_connect(nodename)) &lt; 0)
  erl_err_quit("ERROR: erl_connect failed");    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl_err_quit()</fo:inline> prints the specified string and
      terminates the program. For more information, see the
      <fo:inline font-style="italic"><fo:inline font-family="monospace">erl_error</fo:inline></fo:inline> module.</fo:block>
  <fo:block id="idp1425968" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.8 
      Using EPMD</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic"><fo:inline font-family="monospace">erts:epmd</fo:inline></fo:inline>
      is the Erlang Port Mapper Daemon. Distributed
      Erlang nodes register with <fo:inline font-family="monospace">epmd</fo:inline> on the local host to
      indicate to other nodes that they exist and can accept connections.
      <fo:inline font-family="monospace">epmd</fo:inline> maintains a register of
      node and port number information, and when a node wishes to connect to
      another node, it first contacts <fo:inline font-family="monospace">epmd</fo:inline> to find the
      correct port number to connect to.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When you use
      <fo:inline font-style="italic"><fo:inline font-family="monospace">erl_connect</fo:inline></fo:inline>
      to connect to an Erlang node, a connection is first made to
      <fo:inline font-family="monospace">epmd</fo:inline> and, if the node is known, a
      connection is then made to the Erlang node.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">C nodes can also register themselves with <fo:inline font-family="monospace">epmd</fo:inline>
      if they want other
      nodes in the system to be able to find and connect to them.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Before registering with <fo:inline font-family="monospace">epmd</fo:inline>, you must first
      create a listen socket and bind it to a port. Then:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
int pub;

pub = erl_publish(port);    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">pub</fo:inline> is a file descriptor now connected to
      <fo:inline font-family="monospace">epmd</fo:inline>. <fo:inline font-family="monospace">epmd</fo:inline>
      monitors the other end of the connection. If it detects that the
      connection has been closed, the node becomes unregistered. So, if you
      explicitly close the descriptor or if your node fails, it becomes
      unregistered from <fo:inline font-family="monospace">epmd</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that on some systems (such as VxWorks), a failed node is
      not detected by this mechanism, as the operating system does not
      automatically close descriptors that were left open when the node
      failed. If a node has failed in this way, <fo:inline font-family="monospace">epmd</fo:inline>
      prevents you from
      registering a new node with the old name, as it thinks that the old
      name is still in use. In this case, you must unregister the name
      explicitly:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
erl_unpublish(node);    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This causes <fo:inline font-family="monospace">epmd</fo:inline> to close the connection from the
      far end. Notice
      that if the name was in fact still in use by a node, the results of
      this operation are unpredictable. Also, doing this does not cause the
      local end of the connection to close, so resources can be consumed.</fo:block>
  <fo:block id="idp1414256" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.9 
      Sending and Receiving Erlang Messages</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Use one of the following two functions to send messages:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">
        <fo:inline font-family="monospace">erl_connect:erl_send</fo:inline></fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">
        <fo:inline font-family="monospace">erl_connect:erl_reg_send</fo:inline></fo:inline></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As in Erlang, messages can be sent to a
      pid or to a registered name. It is easier to send a
      message to a registered name, as it avoids the problem of finding
      a suitable pid.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Use one of the following two functions to receive messages:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">
        <fo:inline font-family="monospace">erl_connect:erl_receive</fo:inline></fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">
        <fo:inline font-family="monospace">erl_connect:erl_receive_msg</fo:inline></fo:inline></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl_receive()</fo:inline> receives the message into a buffer,
      while <fo:inline font-family="monospace">erl_receive_msg()</fo:inline> decodes the message into an
      Erlang term.</fo:block>

    <fo:block id="idp874400" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Example of Sending Messages</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the following example, <fo:inline font-family="monospace">{Pid, hello_world}</fo:inline> is
        sent to a registered process <fo:inline font-family="monospace">my_server</fo:inline>. The message
        is encoded by <fo:inline font-family="monospace">erl_send()</fo:inline>:</fo:block>

      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
extern const char *erl_thisnodename(void);
extern short erl_thiscreation(void);
#define SELF(fd) erl_mk_pid(erl_thisnodename(),fd,0,erl_thiscreation())
ETERM *arr[2], *emsg;
int sockfd, creation=1;
  
arr[0] = SELF(sockfd);
arr[1] = erl_mk_atom("Hello world");
emsg   = erl_mk_tuple(arr, 2);
  
erl_reg_send(sockfd, "my_server", emsg);
erl_free_term(emsg);      </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The first element of the tuple that is sent is your own
        pid. This enables <fo:inline font-family="monospace">my_server</fo:inline> to reply.
        For more information about the primitives, see the
        <fo:inline font-style="italic"><fo:inline font-family="monospace">erl_connect</fo:inline></fo:inline> module.</fo:block>
    

    <fo:block id="idp869360" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Example of Receiving Messages</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this example, <fo:inline font-family="monospace">{Pid, Something}</fo:inline> is received. The
        received pid is then used to return
        <fo:inline font-family="monospace">{goodbye,Pid}</fo:inline>.</fo:block>

      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
ETERM *arr[2], *answer;
int sockfd,rc;
char buf[BUFSIZE];
ErlMessage emsg;
  
if ((rc = erl_receive_msg(sockfd , buf, BUFSIZE, &amp;emsg)) == ERL_MSG) {
   arr[0] = erl_mk_atom("goodbye");
   arr[1] = erl_element(1, emsg.msg); 
   answer = erl_mk_tuple(arr, 2);
   erl_send(sockfd, arr[1], answer);
   erl_free_term(answer);
   erl_free_term(emsg.msg);
   erl_free_term(emsg.to);
}      </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To provide robustness, a distributed Erlang node
        occasionally polls all its connected neighbors in an attempt to
        detect failed nodes or communication links. A node that receives such
        a message is expected to respond immediately with an
        <fo:inline font-family="monospace">ERL_TICK</fo:inline> message. This is done automatically by
        <fo:inline font-family="monospace">erl_receive()</fo:inline>. However, when this has occurred,
        <fo:inline font-family="monospace">erl_receive</fo:inline> returns <fo:inline font-family="monospace">ERL_TICK</fo:inline> to
        the caller without storing a message into the
        <fo:inline font-family="monospace">ErlMessage</fo:inline> structure.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a message has been received, it is the caller's responsibility
        to free the received message <fo:inline font-family="monospace">emsg.msg</fo:inline> and
        <fo:inline font-family="monospace">emsg.to</fo:inline> or <fo:inline font-family="monospace">emsg.from</fo:inline>,
        depending on the type of message received.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more information, see the
        <fo:inline font-style="italic"><fo:inline font-family="monospace">erl_connect</fo:inline></fo:inline> and
        <fo:inline font-style="italic"><fo:inline font-family="monospace">erl_eterm</fo:inline></fo:inline> modules.</fo:block>
    
  <fo:block id="idp858944" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.10 
      Remote Procedure Calls</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An Erlang node acting as a client to another Erlang node
      typically sends a request and waits for a reply. Such a request is
      included in a function call at a remote node and is called a remote
      procedure call.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following example shows how the
      <fo:inline font-family="monospace">Erl_Interface</fo:inline> library supports remote procedure calls:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
char modname[]=THE_MODNAME;
ETERM *reply,*ep;
ep = erl_format("[~a,[]]", modname);
if (!(reply = erl_rpc(fd, "c", "c", ep)))
  erl_err_msg("&lt;ERROR&gt; when compiling file: %s.erl !\n", modname);
erl_free_term(ep);
ep = erl_format("{ok,_}");
if (!erl_match(ep, reply))
  erl_err_msg("&lt;ERROR&gt; compiler errors !\n");
erl_free_term(ep);
erl_free_term(reply);    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">c:c/1</fo:inline> is called to compile the specified module on
      the remote node. <fo:inline font-family="monospace">erl_match()</fo:inline> checks that the
      compilation was
      successful by testing for the expected <fo:inline font-family="monospace">ok</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more information about <fo:inline font-family="monospace">erl_rpc()</fo:inline> and its
      companions <fo:inline font-family="monospace">erl_rpc_to()</fo:inline> and
      <fo:inline font-family="monospace">erl_rpc_from()</fo:inline>, see the
      <fo:inline font-style="italic"><fo:inline font-family="monospace">erl_connect</fo:inline></fo:inline> module.</fo:block>
  <fo:block id="idp1337776" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.11 
      Using Global Names</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A C node has access to names registered through the
      <fo:inline font-style="italic"><fo:inline font-family="monospace">global</fo:inline></fo:inline>
      module in Kernel. Names can be looked up, allowing the C node to send messages
      to named Erlang services. C nodes can also register global names,
      allowing them to provide named services to Erlang processes or other C
      nodes.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Erl_Interface</fo:inline> does not provide a native implementation of the
      global service. Instead it uses the global services provided by a "nearby"
      Erlang node. To use the services described in this section,
      it is necessary to first open a connection to an Erlang node.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To see what names there are:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
char **names;
int count;
int i;

names = erl_global_names(fd,&amp;count);

if (names) 
  for (i=0; i&lt;count; i++) 
    printf("%s\n",names[i]);

free(names);    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">
      <fo:inline font-family="monospace">erl_global:erl_global_names</fo:inline></fo:inline>
      allocates and returns a buffer containing
      all the names known to the <fo:inline font-family="monospace">global</fo:inline> module in <fo:inline font-family="monospace">Kernel</fo:inline>.
      <fo:inline font-family="monospace">count</fo:inline> is initialized to
      indicate the number of names in the array. The array of strings in names
      is terminated by a <fo:inline font-family="monospace">NULL</fo:inline> pointer, so it is not necessary to use
      <fo:inline font-family="monospace">count</fo:inline> to determine when the last name is reached.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is the caller's responsibility to free the array.
      <fo:inline font-family="monospace">erl_global_names</fo:inline> allocates the array and all the strings
      using a single call to <fo:inline font-family="monospace">malloc()</fo:inline>, so
      <fo:inline font-family="monospace">free(names)</fo:inline> is all that is necessary.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To look up one of the names:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
ETERM *pid;
char node[256];

pid = erl_global_whereis(fd,"schedule",node);    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">"schedule"</fo:inline> is known to the
      <fo:inline font-family="monospace">global</fo:inline> module in <fo:inline font-family="monospace">Kernel</fo:inline>, an Erlang pid is
      returned that can be used to send messages to the schedule service.
      Also, <fo:inline font-family="monospace">node</fo:inline> is initialized to contain the name of
      the node where the service is registered, so that you can make a
      connection to it by simply passing the variable to
      <fo:inline font-style="italic"><fo:inline font-family="monospace">erl_connect</fo:inline></fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Before registering a name, you should already have registered your
      port number with <fo:inline font-family="monospace">epmd</fo:inline>. This is not strictly necessary,
      but if you
      neglect to do so, then other nodes wishing to communicate with your
      service cannot find or connect to your process.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Create a pid that Erlang processes can use to communicate with your
      service:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
ETERM *pid;

pid = erl_mk_pid(thisnode,14,0,0);
erl_global_register(fd,servicename,pid);    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">After registering the name, use
        <fo:inline font-style="italic">
        <fo:inline font-family="monospace">erl_connect:erl_accept</fo:inline></fo:inline>
        to wait for incoming connections.</fo:block>

    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Remember to free <fo:inline font-family="monospace">pid</fo:inline> later with
        <fo:inline font-style="italic">
        <fo:inline font-family="monospace">erl_malloc:erl_free_term</fo:inline></fo:inline>.</fo:block>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To unregister a name:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
erl_global_unregister(fd,servicename);    </fo:block>
  <fo:block id="idp843152" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.12 
      Using the Registry</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section describes the use of the registry, a simple mechanism
      for storing key-value pairs in a C-node, as well as backing them up or
      restoring them from an <fo:inline font-family="monospace">Mnesia</fo:inline> table on an Erlang node. For more
      detailed information about the individual API functions, see the
      <fo:inline font-style="italic"><fo:inline font-family="monospace">registry</fo:inline></fo:inline> module.</fo:block>

   <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Keys are strings, that is, <fo:inline font-family="monospace">NULL</fo:inline>-terminated arrays of characters, and
      values are arbitrary objects. Although integers and floating point numbers
      are treated specially by the registry, you can store strings or binary
      objects of any type as pointers.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To start, open a registry:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
ei_reg *reg;

reg = ei_reg_open(45);    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The number <fo:inline font-family="monospace">45</fo:inline> in the example indicates the approximate number of
      objects that you expect to store in the registry. Internally the
      registry uses hash tables with collision chaining, so there is no
      absolute upper limit on the number of objects that the registry can
      contain, but if performance or memory usage is important, then you
      are to choose a number accordingly. The registry can be resized later.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">You can open as many registries as you like (if memory permits).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Objects are stored and retrieved through set and get functions.
      The following example shows how to store integers, floats, strings,
      and arbitrary binary objects:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
struct bonk *b = malloc(sizeof(*b));
char *name = malloc(7);

ei_reg_setival(reg,"age",29); 
ei_reg_setfval(reg,"height",1.85);

strcpy(name,"Martin");
ei_reg_setsval(reg,"name",name); 

b-&gt;l = 42;
b-&gt;m = 12;
ei_reg_setpval(reg,"jox",b,sizeof(*b));    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you try to store an object in the registry and there is an
      existing object with the same key, the new value replaces the old
      one. This is done regardless of whether the new object and the old one
      have the same type, so you can, for example, replace a string with an
      integer. If the existing value is a string or binary, it is freed
      before the new value is assigned.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stored values are retrieved from the registry as follows:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
long i;
double f;
char *s;
struct bonk *b;
int size;

i = ei_reg_getival(reg,"age");
f = ei_reg_getfval(reg,"height");
s = ei_reg_getsval(reg,"name");
b = ei_reg_getpval(reg,"jox",&amp;size);    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In all the above examples, the object must exist and it must be of
      the right type for the specified operation. If you do not know the
      type of an object, you can ask:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
struct ei_reg_stat buf;

ei_reg_stat(reg,"name",&amp;buf);    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Buf is initialized to contain object attributes.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Objects can be removed from the registry:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
ei_reg_delete(reg,"name");    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When you are finished with a registry, close it to remove all the
      objects and free the memory back to the system:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
ei_reg_close(reg);    </fo:block>

    <fo:block id="idp832080" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Backing Up the Registry to Mnesia</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The contents of a registry can be backed up to
        <fo:inline font-style="italic"><fo:inline font-family="monospace">Mnesia</fo:inline></fo:inline> on a "nearby" Erlang
        node. You must provide an open connection to the Erlang node
        (see <fo:inline font-style="italic"><fo:inline font-family="monospace">erl_connect</fo:inline></fo:inline>).
        Also, <fo:inline font-family="monospace">Mnesia</fo:inline> 3.0 or later must be running
        on the Erlang node before the backup is initiated:</fo:block>

      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
ei_reg_dump(fd, reg, "mtab", dumpflags);      </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This example back up the contents of the registry to the
        specified <fo:inline font-family="monospace">Mnesia</fo:inline> table <fo:inline font-family="monospace">"mtab"</fo:inline>.
        Once a registry has been backed
        up to <fo:inline font-family="monospace">Mnesia</fo:inline> like this, more backups only affect
        objects that have been modified since the most recent backup, that is,
        objects that have been created, changed, or deleted. The backup
        operation is done as a single atomic transaction, so that either the
        entire backup is performed or none of it.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Likewise, a registry can be restored from a <fo:inline font-family="monospace">Mnesia</fo:inline> table:</fo:block>

      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
ei_reg_restore(fd, reg, "mtab");      </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This reads the entire contents of <fo:inline font-family="monospace">"mtab"</fo:inline> into the
        specified registry. After the restore, all the objects in the registry
        are marked as unmodified, so a later backup only affects
        objects that you have modified since the restore.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that if you restore to a non-empty registry, objects in the
        table overwrite objects in the registry with the same keys. Also,
        the <fo:inline font-weight="bold">entire</fo:inline> contents of the registry is marked as unmodified
        after the restore, including any modified objects that were not
        overwritten by the restore operation. This may not be your
        intention.</fo:block>
    

    <fo:block id="idp821248" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Storing Strings and Binaries</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When string or binary objects are stored in the registry it is
        important that some simple guidelines are followed.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Most importantly, the object must have been created with a single call
        to <fo:inline font-family="monospace">malloc()</fo:inline> (or similar), so that it can later be
        removed by a single call to <fo:inline font-family="monospace">free()</fo:inline>.
        Objects are freed by the registry
        when it is closed, or when you assign a new value to an object that
        previously contained a string or binary.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that if you store binary objects that are context-dependent
        (for example, containing pointers or open file descriptors),
        they lose their meaning if they are backed up to a <fo:inline font-family="monospace">Mnesia</fo:inline> table
        and later restored in a different context.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When you retrieve a stored string or binary value from the registry,
        the registry maintains a pointer to the object and you are passed a
        copy of that pointer. You should never free an object retrieved in
        this manner because when the registry later attempts to free it, a
        runtime error occurs that likely causes the C-node to crash.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">You are free to modify the contents of an object retrieved this way.
        However, when you do so, the registry is not aware of your changes,
        possibly causing it to be missed the next time you make an
        <fo:inline font-family="monospace">Mnesia</fo:inline> backup of the registry contents. This can be avoided if
        you mark the object as dirty after any such changes with
        <fo:inline font-style="italic">
        <fo:inline font-family="monospace">registry:ei_reg_markdirty</fo:inline></fo:inline>, or pass appropriate flags to
        <fo:inline font-style="italic">
        <fo:inline font-family="monospace">registry:ei_reg_dump</fo:inline></fo:inline>.</fo:block>
    
  <fo:block id="idp1324000" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">2   
      Reference Manual</fo:block>
  <fo:block page-break-before="always" id="idp2902768" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">ei</fo:marker>ei</fo:block>C Library</fo:block>
  <fo:block/>
  ei
  Routines for handling the Erlang binary term format.
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The library <fo:inline font-family="monospace">ei</fo:inline> contains macros and functions to encode
      and decode the Erlang binary term format.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ei</fo:inline> allows you to convert atoms, lists, numbers, and
      binaries to and from the binary format. This is useful when
      writing port programs and drivers. <fo:inline font-family="monospace">ei</fo:inline> uses a given
      buffer, no dynamic memory (except
      <fo:inline font-family="monospace">ei_decode_fun()</fo:inline>) and is often quite fast.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ei</fo:inline> also handles C-nodes, C-programs that talks Erlang
      distribution with Erlang nodes (or other C-nodes) using the
      Erlang distribution format. The difference between <fo:inline font-family="monospace">ei</fo:inline>
      and <fo:inline font-family="monospace">erl_interface</fo:inline> is that <fo:inline font-family="monospace">ei</fo:inline> uses
      the binary format directly when sending and receiving terms. It is also
      thread safe, and using threads, one process can handle multiple
      C-nodes. The <fo:inline font-family="monospace">erl_interface</fo:inline> library is built on top of
      <fo:inline font-family="monospace">ei</fo:inline>, but of legacy reasons, it does not allow for
      multiple C-nodes. In general, <fo:inline font-family="monospace">ei</fo:inline> is the preferred way
      of doing C-nodes.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The decode and encode functions use a buffer and an index into the
      buffer, which points at the point where to encode and
      decode. The index is updated to point right after the term
      encoded/decoded. No checking is done whether the term fits in
      the buffer or not. If encoding goes outside the buffer, the
      program can crash.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All functions take two parameters:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">buf</fo:inline> is a pointer to
        the buffer where the binary data is or will be.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">index</fo:inline> is a pointer to an index into the
        buffer. This parameter is incremented with the size of the term
        decoded/encoded.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The data is thus at <fo:inline font-family="monospace">buf[*index]</fo:inline> when an
      <fo:inline font-family="monospace">ei</fo:inline> function is called.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All encode functions assume that the <fo:inline font-family="monospace">buf</fo:inline> and
      <fo:inline font-family="monospace">index</fo:inline> parameters point to a buffer large enough for
      the data. To get the size of an encoded term, without encoding it,
      pass <fo:inline font-family="monospace">NULL</fo:inline> instead of a buffer pointer. Parameter
      <fo:inline font-family="monospace">index</fo:inline> is incremented, but nothing will be encoded. This
      is the way in <fo:inline font-family="monospace">ei</fo:inline> to "preflight" term encoding.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are also encode functions that use a dynamic buffer. It
      is often more convenient to use these to encode data. All encode
      functions comes in two versions; those starting with
      <fo:inline font-family="monospace">ei_x</fo:inline> use a dynamic buffer.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All functions return <fo:inline font-family="monospace">0</fo:inline> if successful, otherwise
      <fo:inline font-family="monospace">-1</fo:inline> (for example, if a term is not of the expected
      type, or the data to decode is an invalid Erlang term).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Some of the decode functions need a pre-allocated buffer. This
      buffer must be allocated large enough, and for non-compound types
      the <fo:inline font-family="monospace">ei_get_type()</fo:inline>
      function returns the size required (notice that for strings an
      extra byte is needed for the <fo:inline font-family="monospace">NULL</fo:inline>-terminator).</fo:block>
  

  <fo:block id="idp1606752" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Data Types</fo:block>
    
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always">erlang_char_encoding</fo:block>
       <fo:block-container><fo:block start-indent="2em">
	 <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
typedef enum {
    ERLANG_ASCII = 1,
    ERLANG_LATIN1 = 2,
    ERLANG_UTF8 = 4
} erlang_char_encoding;</fo:block>
         <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The character encodings used for atoms. <fo:inline font-family="monospace">ERLANG_ASCII</fo:inline>
           represents 7-bit ASCII. Latin-1 and UTF-8 are different extensions
           of 7-bit ASCII. All 7-bit ASCII characters are valid Latin-1 and
           UTF-8 characters. ASCII and Latin-1 both represent each character
           by one byte. An UTF-8 character can consist of 1-4 bytes.
           Notice that these constants are bit-flags and can be combined with
           bitwise OR.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
      <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1628384">int ei_decode_atom(const char *buf, int *index, char *p)</fo:block></fo:block>
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decodes an atom from the binary format. The <fo:inline font-family="monospace">NULL</fo:inline>-terminated
                  name of the atom is placed at <fo:inline font-family="monospace">p</fo:inline>. At most
                  <fo:inline font-family="monospace">MAXATOMLEN</fo:inline> bytes can be placed in the buffer.</fo:block>
          </fo:block>

      <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1624352">int ei_decode_atom_as(const char *buf, int *index, char *p, int plen, erlang_char_encoding want, erlang_char_encoding* was, erlang_char_encoding* result)</fo:block></fo:block>
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decodes an atom from the binary format. The <fo:inline font-family="monospace">NULL</fo:inline>-terminated
                  name of the atom is placed in buffer at <fo:inline font-family="monospace">p</fo:inline> of length <fo:inline font-family="monospace">plen</fo:inline>
                  bytes.</fo:block>
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The wanted string encoding is specified by
                  <fo:inline font-style="italic"><fo:inline font-family="monospace">want</fo:inline></fo:inline>.
                  The original encoding used in the binary format (Latin-1 or UTF-8) can
                  be obtained from <fo:inline font-family="monospace">*was</fo:inline>. The encoding of the resulting string
                  (7-bit ASCII, Latin-1, or UTF-8) can be obtained from <fo:inline font-family="monospace">*result</fo:inline>.
                  Both <fo:inline font-family="monospace">was</fo:inline> and <fo:inline font-family="monospace">result</fo:inline> can be <fo:inline font-family="monospace">NULL</fo:inline>. <fo:inline font-family="monospace">*result</fo:inline>
                  can differ from <fo:inline font-family="monospace">want</fo:inline> if <fo:inline font-family="monospace">want</fo:inline> is a bitwise OR'd
                  combination like <fo:inline font-family="monospace">ERLANG_LATIN1|ERLANG_UTF8</fo:inline> or if
                  <fo:inline font-family="monospace">*result</fo:inline> turns out to be pure 7-bit ASCII
                  (compatible with both Latin-1 and UTF-8).</fo:block>
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function fails if the atom is too long for the buffer
                  or if it cannot be represented with encoding <fo:inline font-family="monospace">want</fo:inline>.</fo:block>
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function was introduced in Erlang/OTP R16 as part of a first
                  step to support UTF-8 atoms.</fo:block>
          </fo:block>

      <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1838128">int ei_decode_bignum(const char *buf, int *index, mpz_t obj)</fo:block></fo:block>
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decodes an integer in the binary format to a GMP
                  <fo:inline font-family="monospace">mpz_t</fo:inline> integer. To use this function, the <fo:inline font-family="monospace">ei</fo:inline>
                  library must be configured and compiled to use the GMP library.</fo:block>
          </fo:block>

      <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1834800">int ei_decode_binary(const char *buf, int *index, void *p, long *len)</fo:block></fo:block>
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decodes a binary from the binary format. Parameter
                  <fo:inline font-family="monospace">len</fo:inline> is set to the actual size of the
                  binary. Notice that <fo:inline font-family="monospace">ei_decode_binary()</fo:inline> assumes that
                  there is enough room for the binary. The size required can be
                  fetched by <fo:inline font-family="monospace">ei_get_type()</fo:inline>.</fo:block>
          </fo:block>

      <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2953184">int ei_decode_boolean(const char *buf, int *index, int *p)</fo:block></fo:block>
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decodes a boolean value from the binary format.
                  A boolean is actually an atom, <fo:inline font-family="monospace">true</fo:inline> decodes 1
                  and <fo:inline font-family="monospace">false</fo:inline> decodes 0.</fo:block>
          </fo:block>

      <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1712208">int ei_decode_char(const char *buf, int *index, char *p)</fo:block></fo:block>
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decodes a char (8-bit) integer between 0-255 from the binary format.
                  For historical reasons the returned integer is of
                  type <fo:inline font-family="monospace">char</fo:inline>. Your C code is to  consider the
                  returned value to be of type <fo:inline font-family="monospace">unsigned char</fo:inline> even if
                  the C compilers and system can define <fo:inline font-family="monospace">char</fo:inline> to be
                  signed.</fo:block>
          </fo:block>

      <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2955040">int ei_decode_double(const char *buf, int *index, double *p)</fo:block></fo:block>
              <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decodes a double-precision (64-bit) floating
                  point number from the binary format.</fo:block>
          </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1676272">int ei_decode_ei_term(const char* buf, int* index, ei_term* term)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decodes any term, or at least tries to. If the term
          pointed at by <fo:inline font-family="monospace">*index</fo:inline> in <fo:inline font-family="monospace">buf</fo:inline> fits
          in the <fo:inline font-family="monospace">term</fo:inline> union, it is decoded, and the
          appropriate field in <fo:inline font-family="monospace">term-&gt;value</fo:inline> is set, and
          <fo:inline font-family="monospace">*index</fo:inline> is incremented by the term size.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function returns <fo:inline font-family="monospace">1</fo:inline> on successful decoding, <fo:inline font-family="monospace">-1</fo:inline> on
          error, and <fo:inline font-family="monospace">0</fo:inline> if the term seems alright, but does not fit in the
          <fo:inline font-family="monospace">term</fo:inline> structure. If <fo:inline font-family="monospace">1</fo:inline> is returned, the
          <fo:inline font-family="monospace">index</fo:inline> is incremented, and <fo:inline font-family="monospace">term</fo:inline>
          contains the decoded term.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">term</fo:inline> structure contains the arity for a tuple
          or list, size for a binary, string, or atom. It contains
          a term if it is any of the following: integer, float, atom,
          pid, port, or ref.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1708176">int ei_decode_fun(const char *buf, int *index, erlang_fun *p)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1866640">void free_fun(erlang_fun* f)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decodes a fun from the binary format. Parameter
          <fo:inline font-family="monospace">p</fo:inline> is to be <fo:inline font-family="monospace">NULL</fo:inline> or point to an
          <fo:inline font-family="monospace">erlang_fun</fo:inline> structure. This is the only decode
          function that allocates memory. When the <fo:inline font-family="monospace">erlang_fun</fo:inline>
          is no longer needed, it is to be freed with
          <fo:inline font-family="monospace">free_fun</fo:inline>. (This has to do with the arbitrary size
          of the environment for a fun.)</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1186352">int ei_decode_list_header(const char *buf, int *index, int *arity)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decodes a list header from the binary
          format. The number of elements is returned in
          <fo:inline font-family="monospace">arity</fo:inline>. The <fo:inline font-family="monospace">arity+1</fo:inline> elements
          follow (the last one is the tail of the list, normally an empty list).
          If <fo:inline font-family="monospace">arity</fo:inline> is <fo:inline font-family="monospace">0</fo:inline>, it is an empty
          list.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that lists are encoded as strings if they consist
          entirely of integers in the range 0..255. This function do
          not decode such strings, use <fo:inline font-family="monospace">ei_decode_string()</fo:inline>
          instead.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1139984">int ei_decode_long(const char *buf, int *index, long *p)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decodes a long integer from the binary format.
          If the code is 64 bits, the function <fo:inline font-family="monospace">ei_decode_long()</fo:inline> is
          the same as <fo:inline font-family="monospace">ei_decode_longlong()</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2623568">int ei_decode_longlong(const char *buf, int *index, long long *p)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decodes a GCC <fo:inline font-family="monospace">long long</fo:inline> or Visual C++
          <fo:inline font-family="monospace">__int64</fo:inline>
          (64-bit) integer from the binary format. This
          function is missing in the VxWorks port.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1165152">int ei_decode_map_header(const char *buf, int *index, int *arity)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decodes a map header from the binary
          format. The number of key-value pairs is returned in
          <fo:inline font-family="monospace">*arity</fo:inline>. Keys and values follow in this order:
	  <fo:inline font-family="monospace">K1, V1, K2, V2, ..., Kn, Vn</fo:inline>. This makes a total of
	  <fo:inline font-family="monospace">arity*2</fo:inline> terms. If <fo:inline font-family="monospace">arity</fo:inline> is zero, it is an empty map.
	  A correctly encoded map does not have duplicate keys.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1755584">int ei_decode_pid(const char *buf, int *index, erlang_pid *p)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decodes a process identifier (pid) from the binary format.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1674192">int ei_decode_port(const char *buf, int *index, erlang_port *p)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decodes a port identifier from the binary format.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1636416">int ei_decode_ref(const char *buf, int *index, erlang_ref *p)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decodes a reference from the binary format.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1680832">int ei_decode_string(const char *buf, int *index, char *p)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decodes a string from the binary format. A
          string in Erlang is a list of integers between 0 and
          255. Notice that as the string is just a list, sometimes
          lists are encoded as strings by <fo:inline font-family="monospace">term_to_binary/1</fo:inline>,
          even if it was not intended.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The string is copied to <fo:inline font-family="monospace">p</fo:inline>, and enough space must
          be allocated. The returned string is <fo:inline font-family="monospace">NULL</fo:inline>-terminated, so you
          must add an extra byte to the memory requirement.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1641776">int ei_decode_term(const char *buf, int *index, void *t)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decodes a term from the binary format. The term
          is return in <fo:inline font-family="monospace">t</fo:inline> as a <fo:inline font-family="monospace">ETERM*</fo:inline>, so
          <fo:inline font-family="monospace">t</fo:inline> is actually an <fo:inline font-family="monospace">ETERM**</fo:inline> (see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">erl_eterm</fo:inline></fo:inline>).
          The term is later to be deallocated.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that this function is located in the <fo:inline font-family="monospace">Erl_Interface</fo:inline>
          library.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2920192">int ei_decode_trace(const char *buf, int *index, erlang_trace *p)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decodes an Erlang trace token from the binary format.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1690288">int ei_decode_tuple_header(const char *buf, int *index, int *arity)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decodes a tuple header, the number of elements
          is returned in <fo:inline font-family="monospace">arity</fo:inline>. The tuple elements follow
          in order in the buffer.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1604864">int ei_decode_ulong(const char *buf, int *index, unsigned long *p)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decodes an unsigned long integer from the binary format.
          If the code is 64 bits, the function <fo:inline font-family="monospace">ei_decode_ulong()</fo:inline> is
          the same as <fo:inline font-family="monospace">ei_decode_ulonglong()</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1780992">int ei_decode_ulonglong(const char *buf, int *index, unsigned long long *p)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decodes a GCC <fo:inline font-family="monospace">unsigned long long</fo:inline> or Visual C++
          <fo:inline font-family="monospace">unsigned __int64</fo:inline> (64-bit) integer from the binary
          format. This function is missing in the VxWorks port.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1165904">int ei_decode_version(const char *buf, int *index, int *version)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decodes the version magic number for the
          Erlang binary term format. It must be the first token in a
          binary term.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1602560">int ei_encode_atom(char *buf, int *index, const char *p)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1632368">int ei_encode_atom_len(char *buf, int *index, const char *p, int len)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1633280">int ei_x_encode_atom(ei_x_buff* x, const char *p)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1634176">int ei_x_encode_atom_len(ei_x_buff* x, const char *p, int len)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encodes an atom in the binary format. Parameter <fo:inline font-family="monospace">p</fo:inline>
          is the name of the atom in Latin-1 encoding. Only up to
          <fo:inline font-family="monospace">MAXATOMLEN-1</fo:inline> bytes
          are encoded. The name is to be <fo:inline font-family="monospace">NULL</fo:inline>-terminated, except for
          the <fo:inline font-family="monospace">ei_x_encode_atom_len()</fo:inline> function.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp970096">int ei_encode_atom_as(char *buf, int *index, const char *p, erlang_char_encoding from_enc, erlang_char_encoding to_enc)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1868096">int ei_encode_atom_len_as(char *buf, int *index, const char *p, int len, erlang_char_encoding from_enc, erlang_char_encoding to_enc)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1869072">int ei_x_encode_atom_as(ei_x_buff* x, const char *p, erlang_char_encoding from_enc, erlang_char_encoding to_enc)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1870032">int ei_x_encode_atom_len_as(ei_x_buff* x, const char *p, int len, erlang_char_encoding from_enc, erlang_char_encoding to_enc)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encodes an atom in the binary format. Parameter <fo:inline font-family="monospace">p</fo:inline> is the name of the atom with
          character encoding
          <fo:inline font-style="italic"><fo:inline font-family="monospace">from_enc</fo:inline></fo:inline>
          (ASCII, Latin-1, or UTF-8). The name must either be <fo:inline font-family="monospace">NULL</fo:inline>-terminated or
          a function variant with a <fo:inline font-family="monospace">len</fo:inline> parameter must be used.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The encoding fails if <fo:inline font-family="monospace">p</fo:inline> is not a valid string in encoding
          <fo:inline font-family="monospace">from_enc</fo:inline>.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Argument <fo:inline font-family="monospace">to_enc</fo:inline> is ignored. As from Erlang/OTP 20 the encoding is always
	  done in UTF-8 which is readable by nodes as old as Erlang/OTP R16.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1678784">int ei_encode_bignum(char *buf, int *index, mpz_t obj)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1679680">int ei_x_encode_bignum(ei_x_buff *x, mpz_t obj)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encodes a GMP <fo:inline font-family="monospace">mpz_t</fo:inline> integer to binary format.
          To use this function, the <fo:inline font-family="monospace">ei</fo:inline> library must be configured and
          compiled to use the GMP library.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1640320">int ei_encode_binary(char *buf, int *index, const void *p, long len)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1564320">int ei_x_encode_binary(ei_x_buff* x, const void *p, long len)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encodes a binary in the binary format. The data is at
          <fo:inline font-family="monospace">p</fo:inline>, of <fo:inline font-family="monospace">len</fo:inline> bytes length.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1567968">int ei_encode_boolean(char *buf, int *index, int p)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3253872">int ei_x_encode_boolean(ei_x_buff* x, int p)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encodes a boolean value as the atom <fo:inline font-family="monospace">true</fo:inline> if
          <fo:inline font-family="monospace">p</fo:inline> is not zero, or <fo:inline font-family="monospace">false</fo:inline> if <fo:inline font-family="monospace">p</fo:inline> is
          zero.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3258320">int ei_encode_char(char *buf, int *index, char p)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3259216">int ei_x_encode_char(ei_x_buff* x, char p)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encodes a char (8-bit) as an integer between 0-255 in the binary
          format. For historical reasons the integer argument is of
          type <fo:inline font-family="monospace">char</fo:inline>. Your C code is to consider the specified
          argument to be of type <fo:inline font-family="monospace">unsigned char</fo:inline> even if
          the C compilers and system may define <fo:inline font-family="monospace">char</fo:inline> to be
          signed.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3263408">int ei_encode_double(char *buf, int *index, double p)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3264304">int ei_x_encode_double(ei_x_buff* x, double p)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encodes a double-precision (64-bit) floating point number in
          the binary format.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">-1</fo:inline> if the floating point
          number is not finite.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3341472">int ei_encode_empty_list(char* buf, int* index)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3342240">int ei_x_encode_empty_list(ei_x_buff* x)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encodes an empty list. It is often used at the tail of a list.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3344928">int ei_encode_fun(char *buf, int *index, const erlang_fun *p)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3345696">int ei_x_encode_fun(ei_x_buff* x, const erlang_fun* fun)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encodes a fun in the binary format. Parameter <fo:inline font-family="monospace">p</fo:inline>
          points to an <fo:inline font-family="monospace">erlang_fun</fo:inline> structure. The
          <fo:inline font-family="monospace">erlang_fun</fo:inline> is not freed automatically, the
          <fo:inline font-family="monospace">free_fun</fo:inline> is to be called if the fun is not needed
          after encoding.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3349984">int ei_encode_list_header(char *buf, int *index, int arity)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3350880">int ei_x_encode_list_header(ei_x_buff* x, int arity)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encodes a list header, with a specified
          arity. The next <fo:inline font-family="monospace">arity+1</fo:inline> terms are the elements
          (actually its <fo:inline font-family="monospace">arity</fo:inline> cons cells) and the tail of the
          list. Lists and tuples are encoded recursively, so that a
          list can contain another list or tuple.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For example, to encode the list
          <fo:inline font-family="monospace">[c, d, [e | f]]</fo:inline>:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
ei_encode_list_header(buf, &amp;i, 3);
ei_encode_atom(buf, &amp;i, "c");
ei_encode_atom(buf, &amp;i, "d");
ei_encode_list_header(buf, &amp;i, 1);
ei_encode_atom(buf, &amp;i, "e");
ei_encode_atom(buf, &amp;i, "f");
ei_encode_empty_list(buf, &amp;i);</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It may seem that there is no way to create a list without
            knowing the number of elements in advance. But indeed
            there is a way. Notice that the list <fo:inline font-family="monospace">[a, b, c]</fo:inline>
            can be written as <fo:inline font-family="monospace">[a | [b | [c]]]</fo:inline>.
            Using this, a list can be written as conses.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To encode a list, without knowing the arity in advance:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
while (something()) {
    ei_x_encode_list_header(&amp;x, 1);
    ei_x_encode_ulong(&amp;x, i); /* just an example */
}
ei_x_encode_empty_list(&amp;x);</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3359328">int ei_encode_long(char *buf, int *index, long p)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3360224">int ei_x_encode_long(ei_x_buff* x, long p)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encodes a long integer in the binary format.
          If the code is 64 bits, the function <fo:inline font-family="monospace">ei_encode_long()</fo:inline> is
          the same as <fo:inline font-family="monospace">ei_encode_longlong()</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3363888">int ei_encode_longlong(char *buf, int *index, long long p)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3364784">int ei_x_encode_longlong(ei_x_buff* x, long long p)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encodes a GCC <fo:inline font-family="monospace">long long</fo:inline> or Visual C++
          <fo:inline font-family="monospace">__int64</fo:inline> (64-bit) integer in the binary format.
          This function is missing in the VxWorks port.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3368464">int ei_encode_map_header(char *buf, int *index, int arity)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3369360">int ei_x_encode_map_header(ei_x_buff* x, int arity)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encodes a map header, with a specified arity. The next
	   <fo:inline font-family="monospace">arity*2</fo:inline> terms encoded will be the keys and values of the map
	   encoded in the following order: <fo:inline font-family="monospace">K1, V1, K2, V2, ..., Kn, Vn</fo:inline>.
	</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For example, to encode the map <fo:inline font-family="monospace">#{a =&gt; "Apple", b =&gt;
          "Banana"}</fo:inline>:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
ei_x_encode_map_header(&amp;x, 2);
ei_x_encode_atom(&amp;x, "a");
ei_x_encode_string(&amp;x, "Apple");
ei_x_encode_atom(&amp;x, "b");
ei_x_encode_string(&amp;x, "Banana");</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A correctly encoded map cannot have duplicate keys.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3375104">int ei_encode_pid(char *buf, int *index, const erlang_pid *p)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3376016">int ei_x_encode_pid(ei_x_buff* x, const erlang_pid *p)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encodes an Erlang process identifier (pid) in the binary
          format. Parameter <fo:inline font-family="monospace">p</fo:inline> points to an
          <fo:inline font-family="monospace">erlang_pid</fo:inline> structure (which should have been
          obtained earlier with <fo:inline font-family="monospace">ei_decode_pid()</fo:inline>).</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3380176">int ei_encode_port(char *buf, int *index, const erlang_port *p)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3381088">int ei_x_encode_port(ei_x_buff* x, const erlang_port *p)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encodes an Erlang port in the binary format. Parameter
          <fo:inline font-family="monospace">p</fo:inline> points to a <fo:inline font-family="monospace">erlang_port</fo:inline>
          structure (which should have been obtained earlier with
          <fo:inline font-family="monospace">ei_decode_port()</fo:inline>).</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3385232">int ei_encode_ref(char *buf, int *index, const erlang_ref *p)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3386144">int ei_x_encode_ref(ei_x_buff* x, const erlang_ref *p)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encodes an Erlang reference in the binary format. Parameter
          <fo:inline font-family="monospace">p</fo:inline> points to a <fo:inline font-family="monospace">erlang_ref</fo:inline>
          structure (which should have been obtained earlier with
          <fo:inline font-family="monospace">ei_decode_ref()</fo:inline>).</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3390288">int ei_encode_string(char *buf, int *index, const char *p)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3391184">int ei_encode_string_len(char *buf, int *index, const char *p, int len)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3392096">int ei_x_encode_string(ei_x_buff* x, const char *p)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3392992">int ei_x_encode_string_len(ei_x_buff* x, const char* s, int len)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encodes a string in the binary format. (A string in Erlang
          is a list, but is encoded as a character array in the binary
          format.) The string is to be <fo:inline font-family="monospace">NULL</fo:inline>-terminated, except for
          the <fo:inline font-family="monospace">ei_x_encode_string_len()</fo:inline> function.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3396784">int ei_encode_term(char *buf, int *index, void *t)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3397680">int ei_x_encode_term(ei_x_buff* x, void *t)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encodes an <fo:inline font-family="monospace">ETERM</fo:inline>, as obtained from
          <fo:inline font-family="monospace">erl_interface</fo:inline>. Parameter <fo:inline font-family="monospace">t</fo:inline> is
          actually an <fo:inline font-family="monospace">ETERM</fo:inline> pointer. This function
          does not free the <fo:inline font-family="monospace">ETERM</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3403104">int ei_encode_trace(char *buf, int *index, const erlang_trace *p)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3404016">int ei_x_encode_trace(ei_x_buff* x, const erlang_trace *p)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encodes an Erlang trace token in the binary format.
          Parameter <fo:inline font-family="monospace">p</fo:inline> points to a
          <fo:inline font-family="monospace">erlang_trace</fo:inline> structure (which should have been
          obtained earlier with <fo:inline font-family="monospace">ei_decode_trace()</fo:inline>).</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3408160">int ei_encode_tuple_header(char *buf, int *index, int arity)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3409072">int ei_x_encode_tuple_header(ei_x_buff* x, int arity)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encodes a tuple header, with a specified
          arity. The next <fo:inline font-family="monospace">arity</fo:inline> terms encoded will be the
          elements of the tuple. Tuples and lists are encoded
          recursively, so that a tuple can contain another tuple or list.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For example, to encode the tuple <fo:inline font-family="monospace">{a, {b, {}}}</fo:inline>:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
ei_encode_tuple_header(buf, &amp;i, 2);
ei_encode_atom(buf, &amp;i, "a");
ei_encode_tuple_header(buf, &amp;i, 2);
ei_encode_atom(buf, &amp;i, "b");
ei_encode_tuple_header(buf, &amp;i, 0);</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3413920">int ei_encode_ulong(char *buf, int *index, unsigned long p)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3414816">int ei_x_encode_ulong(ei_x_buff* x, unsigned long p)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encodes an unsigned long integer in the binary format.
          If the code is 64 bits, the function <fo:inline font-family="monospace">ei_encode_ulong()</fo:inline> is
          the same as <fo:inline font-family="monospace">ei_encode_ulonglong()</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3418512">int ei_encode_ulonglong(char *buf, int *index, unsigned long long p)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3419424">int ei_x_encode_ulonglong(ei_x_buff* x, unsigned long long p)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encodes a GCC <fo:inline font-family="monospace">unsigned long long</fo:inline> or Visual C++
          <fo:inline font-family="monospace">unsigned __int64</fo:inline> (64-bit) integer in the binary
          format. This function is missing in the VxWorks port.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3423136">int ei_encode_version(char *buf, int *index)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3424032">int ei_x_encode_version(ei_x_buff* x)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encodes a version magic number for the binary format. Must
          be the first token in a binary term.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3426800">int ei_get_type(const char *buf, const int *index, int *type, int *size)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the type in <fo:inline font-family="monospace">type</fo:inline> and size in
          <fo:inline font-family="monospace">size</fo:inline> of the encoded term. For strings and atoms,
          size is the number of characters <fo:inline font-weight="bold">not</fo:inline> including the
          terminating <fo:inline font-family="monospace">NULL</fo:inline>. For binaries, <fo:inline font-family="monospace">size</fo:inline> is the number of
          bytes. For lists and tuples, <fo:inline font-family="monospace">size</fo:inline> is the arity of
          the object. For other types, <fo:inline font-family="monospace">size</fo:inline> is 0. In all
          cases, <fo:inline font-family="monospace">index</fo:inline> is left unchanged.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3433328">int ei_print_term(FILE* fp, const char* buf, int* index)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3434224">int ei_s_print_term(char** s, const char* buf, int* index)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Prints a term, in clear text, to the file
          specified by <fo:inline font-family="monospace">fp</fo:inline>, or the buffer pointed to by
          <fo:inline font-family="monospace">s</fo:inline>. It
          tries to resemble the term printing in the Erlang shell.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In <fo:inline font-family="monospace">ei_s_print_term()</fo:inline>, parameter
          <fo:inline font-family="monospace">s</fo:inline> is to
          point to a dynamically (malloc) allocated string of
          <fo:inline font-family="monospace">BUFSIZ</fo:inline> bytes or a <fo:inline font-family="monospace">NULL</fo:inline> pointer. The string
          can be reallocated (and <fo:inline font-family="monospace">*s</fo:inline> can be updated) by this
          function if the result is more than <fo:inline font-family="monospace">BUFSIZ</fo:inline>
          characters. The string returned is <fo:inline font-family="monospace">NULL</fo:inline>-terminated.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The return value is the number of characters written to the file
          or string, or <fo:inline font-family="monospace">-1</fo:inline> if <fo:inline font-family="monospace">buf[index]</fo:inline> does not
          contain a valid term.
          Unfortunately, I/O errors on <fo:inline font-family="monospace">fp</fo:inline> is not checked.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Argument <fo:inline font-family="monospace">index</fo:inline> is updated, that is, this function
          can be viewed as a decode function that decodes a term into a
          human-readable format.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3444672">void ei_set_compat_rel(release_number)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">unsigned release_number;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By default, the <fo:inline font-family="monospace">ei</fo:inline> library is only guaranteed
          to be compatible with other Erlang/OTP components from the same
          release as the <fo:inline font-family="monospace">ei</fo:inline> library itself. For example,
          <fo:inline font-family="monospace">ei</fo:inline> from
          Erlang/OTP R10 is not compatible with an Erlang emulator
          from Erlang/OTP R9 by default.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A call to <fo:inline font-family="monospace">ei_set_compat_rel(release_number)</fo:inline> sets
          the <fo:inline font-family="monospace">ei</fo:inline> library in compatibility mode of release
          <fo:inline font-family="monospace">release_number</fo:inline>. Valid range of
          <fo:inline font-family="monospace">release_number</fo:inline>
          is <fo:inline font-family="monospace">[7, current release]</fo:inline>. This makes it possible to
          communicate with Erlang/OTP components from earlier releases.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If this function is called, it can only be called once
            and must be called before any other functions in the
            <fo:inline font-family="monospace">ei</fo:inline> library are called.</fo:block>
        </fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">You can run into trouble if this feature is used
            carelessly. Always ensure that all communicating
            components are either from the same Erlang/OTP release, or
            from release X and release Y where all components
            from release Y are in compatibility mode of release X.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3455904">int ei_skip_term(const char* buf, int* index)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Skips a term in the specified buffer;
          recursively skips elements of lists and tuples, so that a
          full term is skipped. This is a way to get the size of an
          Erlang term.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">buf</fo:inline> is the buffer.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">index</fo:inline> is updated to point right after the term
          in the buffer.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This can be useful when you want to hold arbitrary
            terms: skip them and copy the binary term data to some
            buffer.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">0</fo:inline> on success, otherwise
          <fo:inline font-family="monospace">-1</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3462672">int ei_x_append(ei_x_buff* x, const ei_x_buff* x2)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3463568">int ei_x_append_buf(ei_x_buff* x, const char* buf, int len)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Appends data at the end of buffer <fo:inline font-family="monospace">x</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3466736">int ei_x_format(ei_x_buff* x, const char* fmt, ...)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3467632">int ei_x_format_wo_ver(ei_x_buff* x, const char *fmt, ... )</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Formats a term, given as a string, to a buffer.
          Works like a sprintf for Erlang terms.
          <fo:inline font-family="monospace">fmt</fo:inline> contains a format string, with arguments like
          <fo:inline font-family="monospace">~d</fo:inline>, to insert terms from variables. The following
          formats are supported (with the C types given):</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
~a  An atom, char*
~c  A character, char
~s  A string, char*
~i  An integer, int
~l  A long integer, long int
~u  A unsigned long integer, unsigned long int
~f  A float, float
~d  A double float, double float
~p  An Erlang pid, erlang_pid*</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For example, to encode a tuple with some stuff:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
ei_x_format("{~a,~i,~d}", "numbers", 12, 3.14159)
encodes the tuple {numbers,12,3.14159}</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ei_x_format_wo_ver()</fo:inline> formats into a buffer,
          without the initial version byte.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3473952">int ei_x_free(ei_x_buff* x)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Frees an <fo:inline font-family="monospace">ei_x_buff</fo:inline> buffer.
          The memory used by the buffer is returned to the OS.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3477104">int ei_x_new(ei_x_buff* x)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3477968">int ei_x_new_with_version(ei_x_buff* x)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allocates a new <fo:inline font-family="monospace">ei_x_buff</fo:inline> buffer. The
          fields of the structure pointed to by parameter <fo:inline font-family="monospace">x</fo:inline>
          is filled in, and a default buffer is allocated.
          <fo:inline font-family="monospace">ei_x_new_with_version()</fo:inline> also puts an initial
          version byte, which is used in the binary format (so that
          <fo:inline font-family="monospace">ei_x_encode_version()</fo:inline> will not be needed.)</fo:block>
      </fo:block>
  

  <fo:block id="idp3482352" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Debug Information</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Some tips on what to check when the emulator does not seem to
      receive the terms that you send:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Be careful with the version header, use
        <fo:inline font-family="monospace">ei_x_new_with_version()</fo:inline> when appropriate.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Turn on distribution tracing on the Erlang node.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Check the result codes from <fo:inline font-family="monospace">ei_decode_-calls</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  

  <fo:block id="idp3486816" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">See Also</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic"><fo:inline font-family="monospace">erl_eterm</fo:inline></fo:inline></fo:block>
  
<fo:block page-break-before="always" id="idp3495872" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">ei_connect</fo:marker>ei_connect</fo:block>C Library</fo:block>
  <fo:block/>
  ei_connect
  Communicate with distributed Erlang.
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module enables C-programs to communicate with Erlang nodes,
      using the Erlang distribution over TCP/IP.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A C-node appears to Erlang as a <fo:inline font-weight="bold">hidden node</fo:inline>.
      That is, Erlang processes that know the name of the
      C-node can communicate with it in a normal manner, but
      the node name is not shown in the listing provided by
      <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:nodes/0</fo:inline></fo:inline>
      in <fo:inline font-family="monospace">ERTS</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The environment variable <fo:inline font-family="monospace">ERL_EPMD_PORT</fo:inline> can be used
      to indicate which logical cluster a C-node belongs to.</fo:block>
  

  <fo:block id="idp3501424" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Time-Out Functions</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Most functions appear in a version with the suffix
      <fo:inline font-family="monospace">_tmo</fo:inline> appended to the function name. Those functions
      take an extra argument, a time-out in <fo:inline font-weight="bold">milliseconds</fo:inline>. The
      semantics is this: for each communication primitive involved in
      the operation, if the primitive does not complete within the time
      specified, the function returns an error and
      <fo:inline font-family="monospace">erl_errno</fo:inline> is set to <fo:inline font-family="monospace">ETIMEDOUT</fo:inline>.
      With communication primitive is meant an operation on the socket, like
      <fo:inline font-family="monospace">connect</fo:inline>, <fo:inline font-family="monospace">accept</fo:inline>,
      <fo:inline font-family="monospace">recv</fo:inline>, or <fo:inline font-family="monospace">send</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Clearly the time-outs are for implementing fault tolerance,
      not to keep hard real-time promises. The <fo:inline font-family="monospace">_tmo</fo:inline> functions
      are for detecting non-responsive peers and to avoid blocking on
      socket operations.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A time-out value of <fo:inline font-family="monospace">0</fo:inline> (zero) means that time-outs are
      disabled. Calling a <fo:inline font-family="monospace">_tmo</fo:inline> function with the last
      argument as <fo:inline font-family="monospace">0</fo:inline> is therefore the same thing as calling
      the function without the <fo:inline font-family="monospace">_tmo</fo:inline> suffix.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As with all other functions starting with <fo:inline font-family="monospace">ei_</fo:inline>,
      you are <fo:inline font-weight="bold">not</fo:inline> expected
      to put the socket in non-blocking mode yourself in the program. Every
      use of non-blocking mode is embedded inside the time-out
      functions. The socket will always be back in blocking mode after
      the operations are completed (regardless of the result). To
      avoid problems, leave the socket options alone. <fo:inline font-family="monospace">ei</fo:inline> handles
      any socket options that need modification.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In all other senses, the <fo:inline font-family="monospace">_tmo</fo:inline> functions inherit all
      the return values and the semantics from the functions without
      the <fo:inline font-family="monospace">_tmo</fo:inline> suffix.</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3514528">struct hostent *ei_gethostbyaddr(const char *addr, int len, int type)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3515424">struct hostent *ei_gethostbyaddr_r(const char *addr, int length,  int type,  struct hostent *hostp, char *buffer,   int buflen,  int *h_errnop)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3516400">struct hostent *ei_gethostbyname(const char *name)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3517280">struct hostent *ei_gethostbyname_r(const char *name,  struct hostent *hostp,  char *buffer,  int buflen,  int *h_errnop)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Convenience functions for some common name lookup functions.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3520080">int ei_accept(ei_cnode *ec, int listensock, ErlConnect *conp)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Used by a server process to accept a
          connection from a client process.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ec</fo:inline> is the C-node structure.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">listensock</fo:inline> is an open socket descriptor on
              which <fo:inline font-family="monospace">listen()</fo:inline> has previously been called.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">conp</fo:inline> is a pointer to an
              <fo:inline font-family="monospace">ErlConnect</fo:inline> struct, described as follows:</fo:block>
            <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
typedef struct {
  char ipadr[4];             
  char nodename[MAXNODELEN];
} ErlConnect;
        </fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On success, <fo:inline font-family="monospace">conp</fo:inline> is filled in with the address and
          node name of the connecting client and a file descriptor is
          returned. On failure, <fo:inline font-family="monospace">ERL_ERROR</fo:inline> is returned and
          <fo:inline font-family="monospace">erl_errno</fo:inline> is set to <fo:inline font-family="monospace">EIO</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3531312">int ei_accept_tmo(ei_cnode *ec, int listensock, ErlConnect *conp, unsigned timeout_ms)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to
          <fo:inline font-family="monospace">ei_accept</fo:inline> with an optional time-out argument,
          see the description at the beginning of this manual page.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3534640">int ei_connect(ei_cnode* ec, char *nodename)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3535536">int ei_xconnect(ei_cnode* ec, Erl_IpAddr adr, char *alivename)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets up a connection to an Erlang node.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ei_xconnect()</fo:inline> requires the IP address of the
          remote host and the alive name of the remote node to be
          specified. <fo:inline font-family="monospace">ei_connect()</fo:inline> provides an alternative
          interface and determines the information from the node name
          provided.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">addr</fo:inline> is the 32-bit IP address of the remote
            host.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">alive</fo:inline> is the alivename of the remote node.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">node</fo:inline> is the name of the remote node.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These functions return an open file descriptor on success, or
          a negative value indicating that an error occurred. In the latter
          case they set <fo:inline font-family="monospace">erl_errno</fo:inline> to one of the
          following:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">EHOSTUNREACH</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The remote host <fo:inline font-family="monospace">node</fo:inline> is unreachable.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ENOMEM</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">No more memory is available.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">EIO</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">I/O error.</fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Also, <fo:inline font-family="monospace">errno</fo:inline> values from
          <fo:inline font-family="monospace">socket</fo:inline><fo:inline font-weight="bold">(2)</fo:inline> and
          <fo:inline font-family="monospace">connect</fo:inline><fo:inline font-weight="bold">(2)</fo:inline>
          system calls may be propagated into <fo:inline font-family="monospace">erl_errno</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#define NODE   "madonna@chivas.du.etx.ericsson.se"
#define ALIVE  "madonna"
#define IP_ADDR "150.236.14.75"

/*** Variant 1 ***/
int fd = ei_connect(&amp;ec, NODE);

/*** Variant 2 ***/
struct in_addr addr;
addr.s_addr = inet_addr(IP_ADDR);
fd = ei_xconnect(&amp;ec, &amp;addr, ALIVE);
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3552144">int ei_connect_init(ei_cnode* ec, const char* this_node_name, const char *cookie, short creation)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3553088">int ei_connect_xinit(ei_cnode* ec, const char *thishostname, const char *thisalivename, const char *thisnodename, Erl_IpAddr thisipaddr, const char *cookie, short creation)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Initializes the <fo:inline font-family="monospace">ec</fo:inline> structure, to
          identify the node name and cookie of the server. One of them
          must be called before other functions that works on the
          <fo:inline font-family="monospace">ei_cnode</fo:inline> type or a file descriptor associated with
          a connection to another node is used.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ec</fo:inline> is a structure containing information about
              the C-node. It is used in other <fo:inline font-family="monospace">ei</fo:inline> functions
              for connecting and receiving data.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">this_node_name</fo:inline> is the registered name of the
              process (the name before '@').</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">cookie</fo:inline> is the cookie for the node.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">creation</fo:inline> identifies a specific instance of a
              C-node. It can help prevent the node from receiving messages
              sent to an earlier process with the same registered name.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">thishostname</fo:inline> is the name of the machine we are
              running on. If long names are to be used, they are to be fully
              qualified (that is, <fo:inline font-family="monospace">durin.erix.ericsson.se</fo:inline>
              instead of <fo:inline font-family="monospace">durin</fo:inline>).</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">thisalivename</fo:inline> is the registered name of the
              process.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">thisnodename</fo:inline> is the full name of the node,
              that is, <fo:inline font-family="monospace">einode@durin</fo:inline>.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">thispaddr</fo:inline> if the IP address of the host.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A C-node acting as a server is assigned a creation
          number when it calls <fo:inline font-family="monospace">ei_publish()</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A connection is closed by simply closing the socket.
          For information about how to close the socket gracefully (when
          there are outgoing packets before close), see the relevant system
          documentation.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These functions return a negative value indicating that an error
          occurred.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example 1:</fo:inline></fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
int n = 0;
struct in_addr addr;
ei_cnode ec;
addr.s_addr = inet_addr("150.236.14.75");
if (ei_connect_xinit(&amp;ec,
                     "chivas",
                     "madonna",
                     "madonna@chivas.du.etx.ericsson.se",
                     &amp;addr;
                     "cookie...",
                     n++) &lt; 0) {
    fprintf(stderr,"ERROR when initializing: %d",erl_errno);
    exit(-1);
}
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example 2:</fo:inline></fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
if (ei_connect_init(&amp;ec, "madonna", "cookie...", n++) &lt; 0) {
    fprintf(stderr,"ERROR when initializing: %d",erl_errno);
    exit(-1);
}
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3574864">int ei_connect_tmo(ei_cnode* ec, char *nodename, unsigned timeout_ms)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3575776">int ei_xconnect_tmo(ei_cnode* ec, Erl_IpAddr adr, char *alivename, unsigned timeout_ms)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to
          <fo:inline font-family="monospace">ei_connect</fo:inline> and <fo:inline font-family="monospace">ei_xconnect</fo:inline> with an optional time-out
          argument, see the description at the beginning of this manual
          page.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3579568">int ei_get_tracelevel(void)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3580432">void ei_set_tracelevel(int level)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Used to set tracing on the distribution. The levels are different
          verbosity levels. A higher level means more information. See also
          section <fo:inline font-style="italic">
          Debug Information</fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These functions are not thread safe.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3584464">int ei_publish(ei_cnode *ec, int port)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Used by a server process to register
          with the local name server EPMD, thereby allowing
          other processes to send messages by using the registered name.
          Before calling either of these functions, the process should
          have called <fo:inline font-family="monospace">bind()</fo:inline> and <fo:inline font-family="monospace">listen()</fo:inline>
          on an open socket.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ec</fo:inline> is the C-node structure.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">port</fo:inline> is the local name to register, and is to
              be the same as the port number that was previously bound to the
              socket.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">addr</fo:inline> is the 32-bit IP address of the local
              host.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To unregister with EPMD, simply close the returned descriptor. Do
          not use <fo:inline font-family="monospace">ei_unpublish()</fo:inline>, which is deprecated
          anyway.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On success, the function returns a descriptor connecting the
          calling process to EPMD. On failure, <fo:inline font-family="monospace">-1</fo:inline> is returned and
          <fo:inline font-family="monospace">erl_errno</fo:inline> is set to <fo:inline font-family="monospace">EIO</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Also, <fo:inline font-family="monospace">errno</fo:inline> values from
          <fo:inline font-family="monospace">socket</fo:inline><fo:inline font-weight="bold">(2)</fo:inline> and
          <fo:inline font-family="monospace">connect</fo:inline><fo:inline font-weight="bold">(2)</fo:inline> system calls may be propagated
          into <fo:inline font-family="monospace">erl_errno</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3598480">int ei_publish_tmo(ei_cnode *ec, int port, unsigned timeout_ms)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to
          <fo:inline font-family="monospace">ei_publish</fo:inline> with an optional time-out argument,
          see the description at the beginning of this manual page.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3601776">int ei_receive(int fd, unsigned char* bufp, int bufsize)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Receives a message consisting of a sequence
          of bytes in the Erlang external format.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">fd</fo:inline> is an open descriptor to an Erlang
              connection. It is obtained from a previous
              <fo:inline font-family="monospace">ei_connect</fo:inline> or <fo:inline font-family="monospace">ei_accept</fo:inline>.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">bufp</fo:inline> is a buffer large enough to hold the
              expected message.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">bufsize</fo:inline> indicates the size of
              <fo:inline font-family="monospace">bufp</fo:inline>.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a <fo:inline font-weight="bold">tick</fo:inline> occurs, that is, the Erlang node on the
          other end of the connection has polled this node to see if it
          is still alive, the function returns <fo:inline font-family="monospace">ERL_TICK</fo:inline> and
          no message is placed in the buffer. Also,
          <fo:inline font-family="monospace">erl_errno</fo:inline> is set to <fo:inline font-family="monospace">EAGAIN</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On success, the message is placed in the specified buffer
          and the function returns the number of bytes actually read. On
          failure, the function returns <fo:inline font-family="monospace">ERL_ERROR</fo:inline> and sets
          <fo:inline font-family="monospace">erl_errno</fo:inline> to one of the following:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">EAGAIN</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Temporary error: Try again.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">EMSGSIZE</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Buffer is too small.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">EIO</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">I/O error.</fo:block></fo:block-container>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3617808">int ei_receive_encoded(int fd, char **mbufp, int *bufsz,  erlang_msg *msg, int *msglen)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is retained for compatibility with code
          generated by the interface compiler and with code following
          examples in the same application.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In essence, the function performs the same operation as
          <fo:inline font-family="monospace">ei_xreceive_msg</fo:inline>, but instead of using an
          <fo:inline font-family="monospace">ei_x_buff</fo:inline>, the function expects a pointer to a character
          pointer (<fo:inline font-family="monospace">mbufp</fo:inline>), where the character pointer
          is to point to a memory area allocated by <fo:inline font-family="monospace">malloc</fo:inline>.
          Argument <fo:inline font-family="monospace">bufsz</fo:inline> is to be a pointer to an integer
          containing the exact size (in bytes) of the memory area. The function
          may reallocate the memory area and will in such cases put the new
          size in <fo:inline font-family="monospace">*bufsz</fo:inline> and update
          <fo:inline font-family="monospace">*mbufp</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns either <fo:inline font-family="monospace">ERL_TICK</fo:inline> or the
          <fo:inline font-family="monospace">msgtype</fo:inline> field of the
          <fo:inline font-family="monospace">erlang_msg *msg</fo:inline>. The length
          of the message is put in <fo:inline font-family="monospace">*msglen</fo:inline>. On error
          a value <fo:inline font-family="monospace">&lt; 0</fo:inline> is returned.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is recommended to use <fo:inline font-family="monospace">ei_xreceive_msg</fo:inline> instead when
          possible, for the sake of readability. However, the function will
          be retained in the interface for compatibility and
          will <fo:inline font-weight="bold">not</fo:inline> be removed in future releases without prior
          notice.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3628960">int ei_receive_encoded_tmo(int fd, char **mbufp, int *bufsz,  erlang_msg *msg, int *msglen, unsigned timeout_ms)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to
          <fo:inline font-family="monospace">ei_receive_encoded</fo:inline> with an optional time-out argument,
          see the description at the beginning of this manual page.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3632320">int ei_receive_msg(int fd, erlang_msg* msg, ei_x_buff* x)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3633216">int ei_xreceive_msg(int fd, erlang_msg* msg, ei_x_buff* x)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Receives a message to the buffer in <fo:inline font-family="monospace">x</fo:inline>.
          <fo:inline font-family="monospace">ei_xreceive_msg</fo:inline> allows the buffer in
          <fo:inline font-family="monospace">x</fo:inline> to grow, but <fo:inline font-family="monospace">ei_receive_msg</fo:inline>
          fails if the message is larger than the pre-allocated buffer in
          <fo:inline font-family="monospace">x</fo:inline>.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">fd</fo:inline> is an open descriptor to an Erlang
            connection.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">msg</fo:inline> is a pointer to an
            <fo:inline font-family="monospace">erlang_msg</fo:inline> structure
            and contains information on the message received.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">x</fo:inline> is buffer obtained from
            <fo:inline font-family="monospace">ei_x_new</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On success, the functions return <fo:inline font-family="monospace">ERL_MSG</fo:inline> and the
          <fo:inline font-family="monospace">msg</fo:inline> struct is initialized.
          <fo:inline font-family="monospace">erlang_msg</fo:inline> is defined as follows:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
typedef struct {
    long msgtype;
    erlang_pid from;
    erlang_pid to;
    char toname[MAXATOMLEN+1];
    char cookie[MAXATOMLEN+1];
    erlang_trace token;
} erlang_msg;
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">msgtype</fo:inline> identifies the type of message, and is
          one of the following:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_SEND</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Indicates that an ordinary send operation has occurred.
              <fo:inline font-family="monospace">msg-&gt;to</fo:inline> contains the pid of the recipient (the
              C-node).</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_REG_SEND</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A registered send operation occurred.
              <fo:inline font-family="monospace">msg-&gt;from</fo:inline> contains the pid of the sender.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_LINK</fo:inline> or
            <fo:inline font-family="monospace">ERL_UNLINK</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">msg-&gt;to</fo:inline> and
              <fo:inline font-family="monospace">msg-&gt;from</fo:inline> contain the pids of the
              sender and recipient of the link or unlink.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_EXIT</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Indicates a broken link. <fo:inline font-family="monospace">msg-&gt;to</fo:inline> and
              <fo:inline font-family="monospace">msg-&gt;from</fo:inline> contain the pids of the linked
               processes.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The return value is the same as for
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ei_receive</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3656624">int ei_receive_msg_tmo(int fd, erlang_msg* msg, ei_x_buff* x, unsigned imeout_ms)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3657552">int ei_xreceive_msg_tmo(int fd, erlang_msg* msg, ei_x_buff* x, unsigned timeout_ms)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-family="monospace">ei_receive_msg</fo:inline> and <fo:inline font-family="monospace">ei_xreceive_msg</fo:inline>
          with an optional time-out argument,
          see the description at the beginning of this manual page.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3661296">int ei_receive_tmo(int fd, unsigned char* bufp, int bufsize, unsigned timeout_ms)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to
          <fo:inline font-family="monospace">ei_receive</fo:inline> with an optional time-out argument,
          see the description at the beginning of this manual page.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3664608">int ei_reg_send(ei_cnode* ec, int fd, char* server_name, char* buf, int len)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends an Erlang term to a registered process.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">fd</fo:inline> is an open descriptor to an Erlang
              connection.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">server_name</fo:inline> is the registered name of the
            intended recipient.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">buf</fo:inline> is the buffer containing the term in
            binary format.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">len</fo:inline> is the length of the message in bytes.
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">0</fo:inline> if successful, otherwise <fo:inline font-family="monospace">-1</fo:inline>. In
          the latter case it sets <fo:inline font-family="monospace">erl_errno</fo:inline> to
          <fo:inline font-family="monospace">EIO</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Send the atom "ok" to the process "worker":</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
ei_x_buff x;
ei_x_new_with_version(&amp;x);
ei_x_encode_atom(&amp;x, "ok");
if (ei_reg_send(&amp;ec, fd, x.buff, x.index) &lt; 0)
    handle_error();
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3675840">int ei_reg_send_tmo(ei_cnode* ec, int fd, char* server_name, char* buf, int len, unsigned timeout_ms)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to
          <fo:inline font-family="monospace">ei_reg_send</fo:inline> with an optional time-out argument,
          see the description at the beginning of this manual page.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3679184">int ei_rpc(ei_cnode *ec, int fd, char *mod, char *fun, const char *argbuf, int argbuflen, ei_x_buff *x)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3680128">int ei_rpc_to(ei_cnode *ec, int fd, char *mod, char *fun, const char *argbuf, int argbuflen)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3681072">int ei_rpc_from(ei_cnode *ec, int fd, int timeout, erlang_msg *msg, ei_x_buff *x)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Supports calling Erlang functions on remote nodes.
          <fo:inline font-family="monospace">ei_rpc_to()</fo:inline> sends an RPC request to a remote node
          and <fo:inline font-family="monospace">ei_rpc_from()</fo:inline> receives the results of such a
          call. <fo:inline font-family="monospace">ei_rpc()</fo:inline> combines the functionality of these
          two functions by sending an RPC request and waiting for the results.
          See also <fo:inline font-style="italic">
          <fo:inline font-family="monospace">rpc:call/4</fo:inline></fo:inline> in Kernel.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ec</fo:inline> is the C-node structure previously
              initiated by a call to <fo:inline font-family="monospace">ei_connect_init()</fo:inline> or
              <fo:inline font-family="monospace">ei_connect_xinit()</fo:inline>.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">fd</fo:inline> is an open descriptor to an Erlang
              connection.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">timeout</fo:inline> is the maximum time (in milliseconds)
              to wait for results. Specify <fo:inline font-family="monospace">ERL_NO_TIMEOUT</fo:inline> to
              wait forever.
              <fo:inline font-family="monospace">ei_rpc()</fo:inline> waits infinitely for the answer,
              that is, the call will never time out.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">mod</fo:inline> is the name of the module containing the
              function to be run on the remote node.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">fun</fo:inline> is the name of the function to run.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">argbuf</fo:inline> is a pointer to a buffer with an
              encoded Erlang list, without a version magic number, containing
              the arguments to be passed to the function.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">argbuflen</fo:inline> is the length of the buffer
              containing the encoded Erlang list.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">msg</fo:inline> is structure of type
              <fo:inline font-family="monospace">erlang_msg</fo:inline> and contains information on the
              message
              received. For a description of the <fo:inline font-family="monospace">erlang_msg</fo:inline>
              format, see <fo:inline font-style="italic">
              <fo:inline font-family="monospace">ei_receive_msg</fo:inline></fo:inline>.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">x</fo:inline> points to the dynamic buffer that receives
              the result. For <fo:inline font-family="monospace">ei_rpc()</fo:inline> this is the result
              without the version magic number. For
              <fo:inline font-family="monospace">ei_rpc_from()</fo:inline> the result returns a version
              magic number and a 2-tuple <fo:inline font-family="monospace">{rex,Reply}</fo:inline>.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ei_rpc()</fo:inline> returns the number of bytes in the
          result on success and <fo:inline font-family="monospace">-1</fo:inline> on failure.
          <fo:inline font-family="monospace">ei_rpc_from()</fo:inline> returns the
          number of bytes, otherwise one of <fo:inline font-family="monospace">ERL_TICK</fo:inline>,
          <fo:inline font-family="monospace">ERL_TIMEOUT</fo:inline>,
          and <fo:inline font-family="monospace">ERL_ERROR</fo:inline>. When failing, all three
          functions set <fo:inline font-family="monospace">erl_errno</fo:inline> to one of the
          following:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">EIO</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">I/O error.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ETIMEDOUT</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Time-out expired.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">EAGAIN</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Temporary error: Try again.</fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Check to see if an Erlang process is alive:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
int index = 0, is_alive;
ei_x_buff args, result;

ei_x_new(&amp;result);
ei_x_new(&amp;args);
ei_x_encode_list_header(&amp;args, 1);
ei_x_encode_pid(&amp;args, &amp;check_pid);
ei_x_encode_empty_list(&amp;args);

if (ei_rpc(&amp;ec, fd, "erlang", "is_process_alive",
           args.buff, args.index, &amp;result) &lt; 0)
    handle_error();

if (ei_decode_version(result.buff, &amp;index) &lt; 0
    || ei_decode_bool(result.buff, &amp;index, &amp;is_alive) &lt; 0)
    handle_error();
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3713008">erlang_pid *ei_self(ei_cnode *ec)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Retrieves the pid of the C-node. Every C-node
          has a (pseudo) pid used in <fo:inline font-family="monospace">ei_send_reg</fo:inline>,
          <fo:inline font-family="monospace">ei_rpc</fo:inline>,
          and others. This is contained in a field in the <fo:inline font-family="monospace">ec</fo:inline>
          structure. It will be safe for a long time to fetch this
          field directly from the <fo:inline font-family="monospace">ei_cnode</fo:inline> structure.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3717664">int ei_send(int fd, erlang_pid* to, char* buf, int len)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends an Erlang term to a process.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">fd</fo:inline> is an open descriptor to an Erlang
            connection.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">to</fo:inline> is the pid of the intended recipient of
            the message.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">buf</fo:inline> is the buffer containing the term in
            binary format.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">len</fo:inline> is the length of the message in bytes.
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">0</fo:inline> if successful, otherwise <fo:inline font-family="monospace">-1</fo:inline>. In
          the latter case it sets <fo:inline font-family="monospace">erl_errno</fo:inline> to
          <fo:inline font-family="monospace">EIO</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3726480">int ei_send_encoded(int fd, erlang_pid* to, char* buf, int len)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Works exactly as <fo:inline font-family="monospace">ei_send</fo:inline>, the alternative name is retained for
          backward compatibility. The function will <fo:inline font-weight="bold">not</fo:inline> be
          removed without prior notice.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3730208">int ei_send_encoded_tmo(int fd, erlang_pid* to, char* buf, int len, unsigned timeout_ms)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to
          <fo:inline font-family="monospace">ei_send_encoded</fo:inline> with an optional time-out argument,
          see the description at the beginning of this manual page.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3733536">int ei_send_reg_encoded(int fd, const erlang_pid *from, const char *to, const char *buf, int len)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is retained for compatibility with code
          generated by the interface compiler and with code following
          examples in the same application.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function works as <fo:inline font-family="monospace">ei_reg_send</fo:inline> with one
          exception. Instead of taking <fo:inline font-family="monospace">ei_cnode</fo:inline> as first
          argument, it takes a second argument, an
          <fo:inline font-family="monospace">erlang_pid</fo:inline>,
          which is to be the process identifier of the sending process
          (in the Erlang distribution protocol).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A suitable <fo:inline font-family="monospace">erlang_pid</fo:inline> can be constructed from the
          <fo:inline font-family="monospace">ei_cnode</fo:inline> structure by the following example
          code:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
ei_cnode ec;
erlang_pid *self;
int fd; /* the connection fd */
...
self = ei_self(&amp;ec);
self-&gt;num = fd;
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3740656">int ei_send_reg_encoded_tmo(int fd, const erlang_pid *from, const char *to, const char *buf, int len)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to
          <fo:inline font-family="monospace">ei_send_reg_encoded</fo:inline> with an optional time-out argument,
          see the description at the beginning of this manual page.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3744016">int ei_send_tmo(int fd, erlang_pid* to, char* buf, int len, unsigned timeout_ms)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to
          <fo:inline font-family="monospace">ei_send</fo:inline> with an optional time-out argument,
          see the description at the beginning of this manual page.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3747312">const char *ei_thisnodename(ei_cnode *ec)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3748192">const char *ei_thishostname(ei_cnode *ec)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3749072">const char *ei_thisalivename(ei_cnode *ec)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Can be used to retrieve information about
          the C-node. These values are initially set with
          <fo:inline font-family="monospace">ei_connect_init()</fo:inline> or
          <fo:inline font-family="monospace">ei_connect_xinit()</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These function simply fetch the appropriate field from the
          <fo:inline font-family="monospace">ec</fo:inline>
          structure. Read the field directly will probably be safe for
          a long time, so these functions are not really needed.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3753808">int ei_unpublish(ei_cnode *ec)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Can be called by a process to unregister a
          specified node from EPMD on the local host. This is, however, usually
	  not allowed, unless EPMD was started with flag
          <fo:inline font-family="monospace">-relaxed_command_check</fo:inline>, which it normally is not.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To unregister a node you have published, you should
	  close the descriptor that was returned by
	  <fo:inline font-family="monospace">ei_publish()</fo:inline>.</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is deprecated and will be removed in a future
	  release.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ec</fo:inline> is the node structure of the node to
          unregister.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the node was successfully unregistered from EPMD, the
          function returns <fo:inline font-family="monospace">0</fo:inline>. Otherwise, <fo:inline font-family="monospace">-1</fo:inline> is returned and
          <fo:inline font-family="monospace">erl_errno</fo:inline> is set to <fo:inline font-family="monospace">EIO</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3762144">int ei_unpublish_tmo(ei_cnode *ec, unsigned timeout_ms)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to
          <fo:inline font-family="monospace">ei_unpublish</fo:inline> with an optional time-out argument,
          see the description at the beginning of this manual page.</fo:block>
      </fo:block>
  

  <fo:block id="idp3765728" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Debug Information</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a connection attempt fails, the following can be checked:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">erl_errno</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>That the correct cookie was used</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>That EPMD is running</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>That the remote Erlang node on the other side is running the
        same version of Erlang as the <fo:inline font-family="monospace">ei</fo:inline> library</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>That environment variable <fo:inline font-family="monospace">ERL_EPMD_PORT</fo:inline>
        is set correctly</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The connection attempt can be traced by setting a trace level by either
      using <fo:inline font-family="monospace">ei_set_tracelevel</fo:inline> or by setting environment
      variable <fo:inline font-family="monospace">EI_TRACELEVEL</fo:inline>.
      The trace levels have the following messages:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>1: Verbose error messages</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>2: Above messages and verbose warning messages</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>3: Above messages and progress reports for connection handling
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>4: Above messages and progress reports for communication</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>5: Above messages and progress reports for data conversion</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  

<fo:block page-break-before="always" id="idp3783968" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">registry</fo:marker>registry</fo:block>C Library</fo:block>
  <fo:block/>
  registry
  Store and back up key-value pairs.
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module provides support for storing key-value
      pairs in a table known as a registry, backing up registries to
      <fo:inline font-style="italic">Mnesia</fo:inline>
      in an atomic manner, and later restoring the contents of a
      registry from <fo:inline font-family="monospace">Mnesia</fo:inline>.</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3788112">int ei_reg_close(reg)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ei_reg *reg;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A registry that has previously been created with
          <fo:inline font-family="monospace">ei_reg_open()</fo:inline> is closed, and all the objects it
          contains are freed.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">reg</fo:inline> is the registry to close.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">0</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3793856">int ei_reg_delete(reg,key)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ei_reg *reg;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">const char *key;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Deletes an object from the registry. The object is not
          removed from the registry, it is only marked for later
          removal so that on later backups to <fo:inline font-family="monospace">Mnesia</fo:inline>, the
          corresponding object can be removed from the <fo:inline font-family="monospace">Mnesia</fo:inline> table as
          well. If another object is later created with the same key, the
          object will be reused. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The object is removed from the registry after a call to
          <fo:inline font-family="monospace">ei_reg_dump()</fo:inline> or <fo:inline font-family="monospace">ei_reg_purge()</fo:inline>.
        </fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">reg</fo:inline> is the registry containing
            <fo:inline font-family="monospace">key</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">key</fo:inline> is the object to remove.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">0</fo:inline> on success, otherwise <fo:inline font-family="monospace">-1</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3804480">int ei_reg_dump(fd,reg,mntab,flags)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">int fd;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ei_reg *reg;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">const char *mntab;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">int flags;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Dumps the contents of a registry to a <fo:inline font-family="monospace">Mnesia</fo:inline> table in an
          atomic manner, that is, either all data or no data is updated.
          If any errors are encountered while backing up
          the data, the entire operation is aborted.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">fd</fo:inline> is an open connection to Erlang.
            <fo:inline font-family="monospace">Mnesia</fo:inline> 3.0 or later must be running on the Erlang node.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">reg</fo:inline> is the registry to back up.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">mntab</fo:inline> is the name of the <fo:inline font-family="monospace">Mnesia</fo:inline> table
            where the backed up data is to be placed. If the table does not
            exist, it is created automatically using configurable defaults.
            For information about configuring this behavior, see
            <fo:inline font-style="italic"><fo:inline font-family="monospace">Mnesia</fo:inline></fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">flags</fo:inline> is <fo:inline font-family="monospace">0</fo:inline>, the backup includes only
          those objects that have been created, modified, or deleted since the
          last backup or restore (that is, an incremental backup). After the
          backup, any objects that were marked dirty are now clean, and any
          objects that had been marked for deletion are deleted.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Alternatively, setting flags to <fo:inline font-family="monospace">EI_FORCE</fo:inline> causes a full
          backup to be done, and <fo:inline font-family="monospace">EI_NOPURGE</fo:inline> causes the deleted objects
          to be left in the registry afterwards. These can be bitwise OR'ed
          together if both behaviors are desired. If <fo:inline font-family="monospace">EI_NOPURGE</fo:inline> was
          specified, <fo:inline font-family="monospace">ei_reg_purge()</fo:inline> can be used to
          explicitly remove the deleted items from the registry later.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">0</fo:inline> on success, otherwise <fo:inline font-family="monospace">-1</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3820544">double ei_reg_getfval(reg,key)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ei_reg *reg;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">const char *key;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gets the value associated with <fo:inline font-family="monospace">key</fo:inline> in the
          registry. The value must be a floating point type.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">reg</fo:inline> is the registry where the object will be
            looked up.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">key</fo:inline> is the name of the object to look up.
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On success, the function returns the value associated with
          <fo:inline font-family="monospace">key</fo:inline>.
          If the object is not found or if it is not a floating point
          object, <fo:inline font-family="monospace">-1.0</fo:inline> is returned. To avoid problems with in-band error
          reporting (that is, if you cannot distinguish between <fo:inline font-family="monospace">-1.0</fo:inline> and
          a valid result), use the more general function
          <fo:inline font-family="monospace">ei_reg_getval()</fo:inline> instead.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3829872">int ei_reg_getival(reg,key)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ei_reg *reg;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">const char *key;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gets the value associated with <fo:inline font-family="monospace">key</fo:inline> in the
          registry. The value must be an integer.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">reg</fo:inline> is the registry where the object will be
            looked up.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">key</fo:inline> is the name of the object to look up.
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On success, the function returns the value associated with
          <fo:inline font-family="monospace">key</fo:inline>.
          If the object is not found or if it is not an integer
          object, <fo:inline font-family="monospace">-1</fo:inline> is returned. To avoid problems with in-band error
          reporting (that is, if you cannot distinguish between <fo:inline font-family="monospace">-1</fo:inline> and a
          valid result), use the more general function
          <fo:inline font-family="monospace">ei_reg_getval()</fo:inline> instead.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3839168">const void *ei_reg_getpval(reg,key,size)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ei_reg *reg;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">const char *key;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">int size;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gets the value associated with <fo:inline font-family="monospace">key</fo:inline> in the
          registry. The value must be a binary (pointer) type.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">reg</fo:inline> is the registry where the object will be
            looked up.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">key</fo:inline> is the name of the object to look up.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">size</fo:inline> is initialized to contain the length in
            bytes of the object, if it is found.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On success, the function returns the value associated with
          <fo:inline font-family="monospace">key</fo:inline> and indicates its length in
          <fo:inline font-family="monospace">size</fo:inline>.
          If the object is not found or if it is not a binary object,
          <fo:inline font-family="monospace">NULL</fo:inline> is returned. To avoid problems with in-band error
          reporting (that is, if you cannot distinguish between <fo:inline font-family="monospace">NULL</fo:inline> and
          a valid result), use the more general function
          <fo:inline font-family="monospace">ei_reg_getval()</fo:inline> instead.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3850208">const char *ei_reg_getsval(reg,key)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ei_reg *reg;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">const char *key;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gets the value associated with <fo:inline font-family="monospace">key</fo:inline> in the
          registry. The value must be a string.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">reg</fo:inline> is the registry where the object will be
            looked up.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">key</fo:inline> is the name of the object to look up.
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On success, the function returns the value associated with
          <fo:inline font-family="monospace">key</fo:inline>. If the object is not found or if it is not a
          string, <fo:inline font-family="monospace">NULL</fo:inline> is returned. To avoid problems with in-band error
          reporting (that is, if you cannot distinguish between <fo:inline font-family="monospace">NULL</fo:inline> and
          a valid result), use the more general function
          <fo:inline font-family="monospace">ei_reg_getval()</fo:inline> instead.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3859472">int ei_reg_getval(reg,key,flags,v,...)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ei_reg *reg;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">const char *key;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">int flags;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">void *v (see below)</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A general function for retrieving any kind of
          object from the registry.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">reg</fo:inline> is the registry where the object will be
              looked up.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">key</fo:inline> is the name of the object to look up.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">flags</fo:inline> indicates the type of object that you
              are looking for. If <fo:inline font-family="monospace">flags</fo:inline> is <fo:inline font-family="monospace">0</fo:inline>, any
              kind of object is returned.
              If <fo:inline font-family="monospace">flags</fo:inline> is <fo:inline font-family="monospace">EI_INT</fo:inline>, <fo:inline font-family="monospace">EI_FLT</fo:inline>,
              <fo:inline font-family="monospace">EI_STR</fo:inline>, or <fo:inline font-family="monospace">EI_BIN</fo:inline>, then only values of
              that kind are returned.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The buffer pointed to by <fo:inline font-family="monospace">v</fo:inline>
              must be large enough to hold the return data, that is, it must be
              a pointer to one of <fo:inline font-family="monospace">int</fo:inline>,
              <fo:inline font-family="monospace">double</fo:inline>, <fo:inline font-family="monospace">char*</fo:inline>, or
              <fo:inline font-family="monospace">void*</fo:inline>, respectively.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">flags</fo:inline> is <fo:inline font-family="monospace">EI_BIN</fo:inline>, a fifth argument
              <fo:inline font-family="monospace">int *size</fo:inline> is required, so that the size of the
              object can be returned.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On success, <fo:inline font-family="monospace">v</fo:inline> (and <fo:inline font-family="monospace">size</fo:inline> if the
          object is binary) is initialized with the value associated
          with <fo:inline font-family="monospace">key</fo:inline>, and the function returns <fo:inline font-family="monospace">EI_INT</fo:inline>,
          <fo:inline font-family="monospace">EI_FLT</fo:inline>, <fo:inline font-family="monospace">EI_STR</fo:inline>, or <fo:inline font-family="monospace">EI_BIN</fo:inline>, indicating the type
          of object. On failure, <fo:inline font-family="monospace">-1</fo:inline> is returned and the
          arguments are not updated.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3880960">int ei_reg_markdirty(reg,key)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ei_reg *reg;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">const char *key;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Marks a registry object as dirty. This ensures that
          it is included in the next backup to <fo:inline font-family="monospace">Mnesia</fo:inline>. Normally this
          operation is not necessary, as all of the normal registry
          'set' functions do this automatically. However, if you have
          retrieved the value of a string or binary object from the
          registry and modified the contents, then the change is
          invisible to the registry and the object is assumed to be
          unmodified. This function allows you to make such modifications
          and then let the registry know about them.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">reg</fo:inline> is the registry containing the object.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">key</fo:inline> is the name of the object to mark.
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">0</fo:inline> on success, otherwise <fo:inline font-family="monospace">-1</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3889584">ei_reg *ei_reg_open(size)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">int size;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Opens (creates) a registry, which initially is empty. To
          close the registry later, use <fo:inline font-family="monospace">ei_reg_close()</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">size</fo:inline> is the approximate number of objects you
          intend to store in the registry. As the registry uses a hash table
          with collision chaining, no absolute upper limit exists on the
          number of objects that can be stored in it. However, for reasons
          of efficiency, it is a good idea to choose a number that is
          appropriate for your needs. To change the size later, use
          <fo:inline font-family="monospace">ei_reg_resize()</fo:inline>. Notice that the number
          you provide is increased to the nearest larger prime number.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns an empty registry on success, otherwise <fo:inline font-family="monospace">NULL</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3896272">int ei_reg_purge(reg)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ei_reg *reg;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Removes all objects marked for deletion. When objects
          are deleted with <fo:inline font-family="monospace">ei_reg_delete()</fo:inline> they are not
          removed from the registry, only marked for later removal.
          On a later backup to <fo:inline font-family="monospace">Mnesia</fo:inline>, the
          objects can also be removed from the <fo:inline font-family="monospace">Mnesia</fo:inline> table. If you are
          not backing up to <fo:inline font-family="monospace">Mnesia</fo:inline>, you may wish to remove the objects
          manually with this function.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">reg</fo:inline> is a registry containing objects marked for
          deletion.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">0</fo:inline> on success, otherwise <fo:inline font-family="monospace">-1</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3904032">int ei_reg_resize(reg,newsize)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ei_reg *reg;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">int newsize;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Changes the size of a registry.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">newsize</fo:inline> is the new size to make the registry. The
          number is increased to the nearest larger prime number.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On success, the registry is resized, all contents
          rehashed, and <fo:inline font-family="monospace">0</fo:inline> is returned. On failure, the
          registry is left unchanged and <fo:inline font-family="monospace">-1</fo:inline> is returned.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3910352">int ei_reg_restore(fd,reg,mntab)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">int fd;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ei_reg *reg;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">const char *mntab;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The contents of a <fo:inline font-family="monospace">Mnesia</fo:inline> table are read into the registry.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">fd</fo:inline> is an open connection to Erlang.
            <fo:inline font-family="monospace">Mnesia</fo:inline> 3.0 or later must be running on the Erlang node.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">reg</fo:inline> is the registry where the data is to be
            placed.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">mntab</fo:inline> is the name of the <fo:inline font-family="monospace">Mnesia</fo:inline> table
            to read data from.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that only tables of a certain format can be
          restored, that is, those that have been created and backed up to
          with <fo:inline font-family="monospace">ei_reg_dump()</fo:inline>. If the registry was not empty
          before the operation, the contents of the table are added to the
          contents of the registry. If the table contains objects with the
          same keys as those already in the registry, the registry objects
          are overwritten with the new values. If the registry
          contains objects that were not in the table, they are
          unchanged by this operation.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">After the restore operation, the entire contents of the
          registry is marked as unmodified. Notice that this includes any
          objects that were modified before the restore and not
          overwritten by the restore.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">0</fo:inline> on success, otherwise <fo:inline font-family="monospace">-1</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3922688">int ei_reg_setfval(reg,key,f)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ei_reg *reg;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">const char *key;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">double f;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a key-value pair with the specified <fo:inline font-family="monospace">key</fo:inline>
          and floating point value <fo:inline font-family="monospace">f</fo:inline>. If an object already
          exists with the same <fo:inline font-family="monospace">key</fo:inline>, the new value replaces
          the old one. If the previous value was a binary or string, it is
          freed with <fo:inline font-family="monospace">free()</fo:inline>.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">reg</fo:inline> is the registry where the object is to be
            placed.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">key</fo:inline> is the object name.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">f</fo:inline> is the floating point value to assign.
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">0</fo:inline> on success, otherwise <fo:inline font-family="monospace">-1</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3933504">int ei_reg_setival(reg,key,i)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ei_reg *reg;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">const char *key;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">int i;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a key-value pair with the specified <fo:inline font-family="monospace">key</fo:inline>
          and integer value <fo:inline font-family="monospace">i</fo:inline>. If an object already exists
          with the same <fo:inline font-family="monospace">key</fo:inline>, the new value replaces the old
          one. If the previous value was a binary or string, it is freed with
          <fo:inline font-family="monospace">free()</fo:inline>.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">reg</fo:inline> is the registry where the object is to be
            placed.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">key</fo:inline> is the object name.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">i</fo:inline> is the integer value to assign.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">0</fo:inline> on success, otherwise <fo:inline font-family="monospace">-1</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3944304">int ei_reg_setpval(reg,key,p,size)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ei_reg *reg;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">const char *key;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">const void *p;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">int size;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a key-value pair with the specified <fo:inline font-family="monospace">key</fo:inline>
          whose "value" is the binary object pointed to by <fo:inline font-family="monospace">p</fo:inline>.
          If an object already exists with the same <fo:inline font-family="monospace">key</fo:inline>,
          the new value replaces the old one. If the previous value was a
          binary or string, it is freed with <fo:inline font-family="monospace">free()</fo:inline>.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">reg</fo:inline> is the registry where the object is to be
            placed.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">key</fo:inline> is the object name.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">p</fo:inline> is a pointer to the binary object. The
            object itself must have been created through a single call to
            <fo:inline font-family="monospace">malloc()</fo:inline> or a similar function, so that the
            registry can later delete it if necessary by calling
            <fo:inline font-family="monospace">free()</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">size</fo:inline> is the length in bytes of the binary
            object.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">0</fo:inline> on success, otherwise <fo:inline font-family="monospace">-1</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3957440">int ei_reg_setsval(reg,key,s)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ei_reg *reg;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">const char *key;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">const char *s;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a key-value pair with the specified <fo:inline font-family="monospace">key</fo:inline>
          whose "value" is the specified string <fo:inline font-family="monospace">s</fo:inline>. If an
          object already exists with the same <fo:inline font-family="monospace">key</fo:inline>, the new
          value replaces the old one. If the previous value was a binary or
          string, it is freed with <fo:inline font-family="monospace">free()</fo:inline>.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">reg</fo:inline> is the registry where the object is to be
            placed.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">key</fo:inline> is the object name.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">s</fo:inline> is the string to assign. The string itself
            must have been created through a single call to
            <fo:inline font-family="monospace">malloc()</fo:inline> or similar a function,
            so that the registry can later delete it if
            necessary by calling <fo:inline font-family="monospace">free()</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">0</fo:inline> on success, otherwise <fo:inline font-family="monospace">-1</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3969312">int ei_reg_setval(reg,key,flags,v,...)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ei_reg *reg;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">const char *key;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">int flags;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">v (see below)</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a key-value pair with the specified <fo:inline font-family="monospace">key</fo:inline>
          whose value is specified by <fo:inline font-family="monospace">v</fo:inline>. If an object already
          exists with the same <fo:inline font-family="monospace">key</fo:inline>, the new value replaces
          the old one. If the previous value was a binary or string, it is freed
          with <fo:inline font-family="monospace">free()</fo:inline>.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">reg</fo:inline> is the registry where the object is to be
              placed.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">key</fo:inline> is the object name.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">flags</fo:inline> indicates the type of the object
              specified by <fo:inline font-family="monospace">v</fo:inline>. Flags must be one of
              <fo:inline font-family="monospace">EI_INT</fo:inline>, <fo:inline font-family="monospace">EI_FLT</fo:inline>, <fo:inline font-family="monospace">EI_STR</fo:inline>, and <fo:inline font-family="monospace">EI_BIN</fo:inline>,
              indicating whether
              <fo:inline font-family="monospace">v</fo:inline> is <fo:inline font-family="monospace">int</fo:inline>,
              <fo:inline font-family="monospace">double</fo:inline>, <fo:inline font-family="monospace">char*</fo:inline>, or
              <fo:inline font-family="monospace">void*</fo:inline>.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">flags</fo:inline> is <fo:inline font-family="monospace">EI_BIN</fo:inline>, a fifth argument
              <fo:inline font-family="monospace">size</fo:inline> is required, indicating the size
              in bytes of the object pointed to by <fo:inline font-family="monospace">v</fo:inline>.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you wish to store an arbitrary pointer in the registry,
          specify a <fo:inline font-family="monospace">size</fo:inline> of <fo:inline font-family="monospace">0</fo:inline>. In this case, the
          object itself is not transferred by an
          <fo:inline font-family="monospace">ei_reg_dump()</fo:inline> operation, only the pointer
          value.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">0</fo:inline> on success, otherwise <fo:inline font-family="monospace">-1</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp3990736">int ei_reg_stat(reg,key,obuf)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ei_reg *reg;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">const char *key;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">struct ei_reg_stat *obuf;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns information about an object.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">reg</fo:inline> is the registry containing the object.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">key</fo:inline> is the object name.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">obuf</fo:inline> is a pointer to an
            <fo:inline font-family="monospace">ei_reg_stat</fo:inline> structure, defined as follows:</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
struct ei_reg_stat {
  int attr;
  int size;
};
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In <fo:inline font-family="monospace">attr</fo:inline> the attributes of the object are stored
          as the logical <fo:inline font-weight="bold">OR</fo:inline> of its type (one of <fo:inline font-family="monospace">EI_INT</fo:inline>,
          <fo:inline font-family="monospace">EI_FLT</fo:inline>, <fo:inline font-family="monospace">EI_BIN</fo:inline>, and <fo:inline font-family="monospace">EI_STR</fo:inline>),
          whether it is marked for deletion (<fo:inline font-family="monospace">EI_DELET</fo:inline>), and whether it
          has been modified since the last backup to <fo:inline font-family="monospace">Mnesia</fo:inline>
          (<fo:inline font-family="monospace">EI_DIRTY</fo:inline>).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Field <fo:inline font-family="monospace">size</fo:inline> indicates the size in bytes required
          to store <fo:inline font-family="monospace">EI_STR</fo:inline> (including the terminating <fo:inline font-family="monospace">0</fo:inline>) and
          <fo:inline font-family="monospace">EI_BIN</fo:inline> objects, or <fo:inline font-family="monospace">0</fo:inline> for <fo:inline font-family="monospace">EI_INT</fo:inline> and
          <fo:inline font-family="monospace">EI_FLT</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">0</fo:inline> and initializes <fo:inline font-family="monospace">obuf</fo:inline> on success,
          otherwise <fo:inline font-family="monospace">-1</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4009504">int ei_reg_tabstat(reg,obuf)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ei_reg *reg;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">struct ei_reg_tabstat *obuf;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns information about a registry. Using information
          returned by this function, you can see whether the size of the
          registry is suitable for the amount of data it contains.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">reg</fo:inline> is the registry to return information
            about.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">obuf</fo:inline> is a pointer to an
            <fo:inline font-family="monospace">ei_reg_tabstat</fo:inline> structure, defined as follows:
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
struct ei_reg_tabstat {
  int size;  
  int nelem; 
  int npos;  
  int collisions; 
};
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Field <fo:inline font-family="monospace">size</fo:inline> indicates the number of hash positions
          in the registry. This is the number you provided when you
          created or last resized the registry, rounded up to the nearest
          prime number.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">nelem</fo:inline> indicates the number of elements stored
            in the registry. It includes objects that are deleted but not
            purged.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">npos</fo:inline> indicates the number of unique positions
            that are occupied in the registry.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">collisions</fo:inline> indicates how many elements are
            sharing positions in the registry.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On success, <fo:inline font-family="monospace">0</fo:inline> is returned and
          <fo:inline font-family="monospace">obuf</fo:inline> is initialized to contain table statistics,
          otherwise <fo:inline font-family="monospace">-1</fo:inline> is returned.</fo:block>
      </fo:block>
  
<fo:block page-break-before="always" id="idp4031088" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">erl_connect</fo:marker>erl_connect</fo:block>C Library</fo:block>
  <fo:block/>
  erl_connect
  Communicate with distributed Erlang.
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module provides support for communication between distributed
      Erlang nodes and C-nodes, in a manner that is transparent to Erlang
      processes.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A C-node appears to Erlang as a <fo:inline font-weight="bold">hidden node</fo:inline>.
      That is, Erlang processes that know the name of the
      C-node can communicate with it in a normal manner, but
      the node name does not appear in the listing provided by
      <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:nodes/0</fo:inline></fo:inline>
      in <fo:inline font-family="monospace">ERTS</fo:inline>.</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4036416">int erl_accept(listensock, conp)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">int listensock;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ErlConnect *conp;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is used by a server process to accept a
          connection from a client process.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">listensock</fo:inline> is an open socket descriptor on
            which <fo:inline font-family="monospace">listen()</fo:inline> has previously been called.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">conp</fo:inline> is a pointer to an
            <fo:inline font-family="monospace">ErlConnect</fo:inline> struct, described as follows:</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
typedef struct {
  char ipadr[4];
  char nodename[MAXNODELEN];
} ErlConnect;
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On success, <fo:inline font-family="monospace">conp</fo:inline> is filled in with the address and
          node name of the connecting client and a file descriptor is
          returned. On failure, <fo:inline font-family="monospace">ERL_ERROR</fo:inline> is returned and
          <fo:inline font-family="monospace">erl_errno</fo:inline> is set to <fo:inline font-family="monospace">EIO</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4046848">int erl_close_connection(fd)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">int fd;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Closes an open connection to an Erlang node.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Fd</fo:inline> is a file descriptor obtained from
          <fo:inline font-family="monospace">erl_connect()</fo:inline> or
          <fo:inline font-family="monospace">erl_xconnect()</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">0</fo:inline> on success. If the call fails, a non-zero value
          is returned, and the reason for the error can be obtained with the
          appropriate platform-dependent call.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4053184">int erl_connect(node)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4054048">int erl_xconnect(addr, alive)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">char *node, *alive;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">struct in_addr *addr;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets up a connection to an Erlang node.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl_xconnect()</fo:inline> requires the IP address of the
          remote host and the alivename of the remote node to be
          specified. <fo:inline font-family="monospace">erl_connect()</fo:inline> provides an alternative
          interface, and determines the information from the node name
          provided.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">addr</fo:inline> is the 32-bit IP address of the remote
            host.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">alive</fo:inline> is the alivename of the remote node.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">node</fo:inline> is the name of the remote node.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns an open file descriptor on success, otherwise a negative
          value. In the latter case <fo:inline font-family="monospace">erl_errno</fo:inline> is set to one
          of:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">EHOSTUNREACH</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The remote host <fo:inline font-family="monospace">node</fo:inline> is unreachable.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ENOMEM</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">No more memory is available.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">EIO</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">I/O error.</fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Also, <fo:inline font-family="monospace">errno</fo:inline> values from
          <fo:inline font-family="monospace">socket</fo:inline><fo:inline font-weight="bold">(2)</fo:inline> and
          <fo:inline font-family="monospace">connect</fo:inline><fo:inline font-weight="bold">(2)</fo:inline>
          system calls can be propagated into <fo:inline font-family="monospace">erl_errno</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#define NODE   "madonna@chivas.du.etx.ericsson.se"
#define ALIVE  "madonna"
#define IP_ADDR "150.236.14.75"

/*** Variant 1 ***/
erl_connect( NODE );

/*** Variant 2 ***/
struct in_addr addr;
addr = inet_addr(IP_ADDR);
erl_xconnect( &amp;addr , ALIVE );
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4071872">int erl_connect_init(number, cookie, creation)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4072768">int erl_connect_xinit(host, alive, node, addr, cookie, creation)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">int number;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">char *cookie;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">short creation;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">char *host,*alive,*node;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">struct in_addr *addr;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Initializes the <fo:inline font-family="monospace">erl_connect</fo:inline> module.
          In particular, these functions are used to identify the name of the
          C-node from which they are called. One of these functions must
          be called before any of the other functions in the <fo:inline font-family="monospace">erl_connect</fo:inline>
          module are used.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl_connect_xinit()</fo:inline> stores for later use
          information about:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Hostname of the node, <fo:inline font-family="monospace">host</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Alivename, <fo:inline font-family="monospace">alive</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Node name, <fo:inline font-family="monospace">node</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>IP address, <fo:inline font-family="monospace">addr</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Cookie, <fo:inline font-family="monospace">cookie</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Creation number, <fo:inline font-family="monospace">creation</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl_connect_init()</fo:inline>
          provides an alternative interface that does not require as much
          information from the caller. Instead,
          <fo:inline font-family="monospace">erl_connect_init()</fo:inline>
          uses <fo:inline font-family="monospace">gethostbyname()</fo:inline> to obtain default values.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you use <fo:inline font-family="monospace">erl_connect_init()</fo:inline>, your node will
          have a short name, that is, it will not be fully qualified. If you
          need to use fully qualified (long) names, use
          <fo:inline font-family="monospace">erl_connect_xinit()</fo:inline> instead.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">host</fo:inline> is the name of the host on which the node
              is running.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">alive</fo:inline> is the alivename of the node.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">node</fo:inline> is the node name. It is to
                be of the form <fo:inline font-weight="bold">alivename@hostname</fo:inline>.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">addr</fo:inline> is the 32-bit IP address of
              <fo:inline font-family="monospace">host</fo:inline>.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">cookie</fo:inline> is the authorization string required
              for access to the remote node. If <fo:inline font-family="monospace">NULL</fo:inline>, the user
              <fo:inline font-family="monospace">HOME</fo:inline> directory is searched for a cookie file
              <fo:inline font-family="monospace">.erlang.cookie</fo:inline>. The path to
              the home directory is retrieved from environment variable
              <fo:inline font-family="monospace">HOME</fo:inline> on Unix and from the
              <fo:inline font-family="monospace">HOMEDRIVE</fo:inline> and
              <fo:inline font-family="monospace">HOMEPATH</fo:inline> variables on Windows. For more
              details, see the <fo:inline font-style="italic">
              <fo:inline font-family="monospace">auth</fo:inline></fo:inline> module in Kernel.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">creation</fo:inline> helps identifying a particular
              instance of a C-node. In particular, it can help prevent us from
              receiving messages sent to an earlier process with the same
              registered name.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A C-node acting as a server is assigned a creation number
          when it calls <fo:inline font-family="monospace">erl_publish()</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">number</fo:inline> is used by
          <fo:inline font-family="monospace">erl_connect_init()</fo:inline> to
          construct the actual node name. In Example 2
          below, <fo:inline font-weight="bold">"c17@a.DNS.name"</fo:inline> is the resulting node name.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example 1:</fo:inline></fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
struct in_addr addr;
addr = inet_addr("150.236.14.75");
if (!erl_connect_xinit("chivas",
                       "madonna",
                       "madonna@chivas.du.etx.ericsson.se",
                       &amp;addr;
                       "samplecookiestring..."),
                       0)
  erl_err_quit("&lt;ERROR&gt; when initializing !");
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example 2:</fo:inline></fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
if (!erl_connect_init(17, "samplecookiestring...", 0))
  erl_err_quit("&lt;ERROR&gt; when initializing !");
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4107168">int erl_publish(port)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">int port;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is used by a server process to register
          with the local name server EPMD, thereby allowing
          other processes to send messages by using the registered name.
          Before calling this function, the process should
          have called <fo:inline font-family="monospace">bind()</fo:inline> and <fo:inline font-family="monospace">listen()</fo:inline>
          on an open socket.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">port</fo:inline> is the local name to register, and is to be
          the same as the port number that was previously bound to the
          socket.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To unregister with EPMD, simply close the returned descriptor.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On success, a descriptor connecting the calling process to EPMD is
          returned. On failure, <fo:inline font-family="monospace">-1</fo:inline> is returned and
          <fo:inline font-family="monospace">erl_errno</fo:inline> is set to:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">EIO</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">I/O error.</fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Also, <fo:inline font-family="monospace">errno</fo:inline> values from
          <fo:inline font-family="monospace">socket</fo:inline><fo:inline font-weight="bold">(2)</fo:inline>
          and <fo:inline font-family="monospace">connect</fo:inline><fo:inline font-weight="bold">(2)</fo:inline> system calls can be
          propagated into <fo:inline font-family="monospace">erl_errno</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4118992">int erl_receive(fd, bufp, bufsize)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">int fd;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">char *bufp;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">int bufsize;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Receives a message consisting of a sequence
          of bytes in the Erlang external format.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">fd</fo:inline> is an open descriptor to an Erlang
            connection.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">bufp</fo:inline> is a buffer large enough to hold the
            expected message.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">bufsize</fo:inline> indicates the size of
            <fo:inline font-family="monospace">bufp</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a <fo:inline font-weight="bold">tick</fo:inline> occurs, that is, the Erlang node on the
          other end of the connection has polled this node to see if it
          is still alive, the function returns <fo:inline font-family="monospace">ERL_TICK</fo:inline> and
          no message is placed in the buffer. Also,
          <fo:inline font-family="monospace">erl_errno</fo:inline> is set to <fo:inline font-family="monospace">EAGAIN</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On success, the message is placed in the specified buffer
          and the function returns the number of bytes actually read. On
          failure, the function returns a negative value and sets
          <fo:inline font-family="monospace">erl_errno</fo:inline> to one of:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">EAGAIN</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Temporary error: Try again.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">EMSGSIZE</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Buffer is too small.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">EIO</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">I/O error.</fo:block></fo:block-container>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4134080">int erl_receive_msg(fd, bufp, bufsize, emsg)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">int fd;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">unsigned char *bufp;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">int bufsize;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ErlMessage *emsg;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Receives the message into the specified buffer
          and decodes into <fo:inline font-family="monospace">(ErlMessage *) emsg</fo:inline>.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">fd</fo:inline> is an open descriptor to an Erlang
            connection.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">bufp</fo:inline> is a buffer large enough to hold the
            expected message.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">bufsize</fo:inline> indicates the size of
            <fo:inline font-family="monospace">bufp</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>&gt;<fo:inline font-family="monospace">emsg</fo:inline> is a pointer to an
            <fo:inline font-family="monospace">ErlMessage</fo:inline> structure
            into which the message will be decoded.
            <fo:inline font-family="monospace">ErlMessage</fo:inline> is defined as follows:</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
typedef struct {
  int type;
  ETERM *msg;
  ETERM *to;
  ETERM *from;
  char to_name[MAXREGLEN];
} ErlMessage;
        </fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The definition of <fo:inline font-family="monospace">ErlMessage</fo:inline> has changed since
            earlier versions of <fo:inline font-family="monospace">Erl_Interface</fo:inline>.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">type</fo:inline> identifies the type of message, one of the
          following:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_SEND</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An ordinary send operation has occurred and
              <fo:inline font-family="monospace">emsg-&gt;to</fo:inline> contains the pid of the recipient.
              The message is in <fo:inline font-family="monospace">emsg-&gt;msg</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_REG_SEND</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A registered send operation has occurred and
              <fo:inline font-family="monospace">emsg-&gt;from</fo:inline> contains the pid of the sender.
              The message is in <fo:inline font-family="monospace">emsg-&gt;msg</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_LINK</fo:inline> or <fo:inline font-family="monospace">ERL_UNLINK</fo:inline>
          </fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">emsg-&gt;to</fo:inline> and <fo:inline font-family="monospace">emsg-&gt;from</fo:inline>
              contain the pids of the sender and recipient of the link or
              unlink. <fo:inline font-family="monospace">emsg-&gt;msg</fo:inline> is not used.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_EXIT</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A link is broken. <fo:inline font-family="monospace">emsg-&gt;to</fo:inline> and
              <fo:inline font-family="monospace">emsg-&gt;from</fo:inline> contain the pids of the linked
              processes, and <fo:inline font-family="monospace">emsg-&gt;msg</fo:inline> contains the reason
              for the exit.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is the caller's responsibility to release the
            memory pointed to by <fo:inline font-family="monospace">emsg-&gt;msg</fo:inline>,
            <fo:inline font-family="monospace">emsg-&gt;to</fo:inline>, and
            <fo:inline font-family="monospace">emsg-&gt;from</fo:inline>.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a <fo:inline font-weight="bold">tick</fo:inline> occurs, that is, the Erlang node on the
          other end of the connection has polled this node to see if it
          is still alive, the function returns <fo:inline font-family="monospace">ERL_TICK</fo:inline>
          indicating that the tick has been received and responded to,
          but no message is placed in the buffer. In this case you
          are to call <fo:inline font-family="monospace">erl_receive_msg()</fo:inline> again.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On success, the function returns <fo:inline font-family="monospace">ERL_MSG</fo:inline> and the
          <fo:inline font-family="monospace">Emsg</fo:inline> struct is initialized as described above, or
          <fo:inline font-family="monospace">ERL_TICK</fo:inline>, in which case no message is returned. On
          failure, the function returns <fo:inline font-family="monospace">ERL_ERROR</fo:inline> and sets
          <fo:inline font-family="monospace">erl_errno</fo:inline> to one of:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">EMSGSIZE</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Buffer is too small.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ENOMEM</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">No more memory is available.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">EIO</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">I/O error.</fo:block></fo:block-container>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4170688">int erl_reg_send(fd, to, msg)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">int fd;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">char *to;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ETERM *msg;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends an Erlang term to a registered process.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">fd</fo:inline> is an open descriptor to an Erlang
            connection.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">to</fo:inline> is a string containing the registered name
            of the intended recipient of the message.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">msg</fo:inline> is the Erlang term to be sent.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">1</fo:inline> on success, otherwise <fo:inline font-family="monospace">0</fo:inline>. In
          the latter case <fo:inline font-family="monospace">erl_errno</fo:inline> is set to one of:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ENOMEM</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">No more memory is available.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">EIO</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">I/O error.</fo:block></fo:block-container>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4182592">ETERM *erl_rpc(fd, mod, fun, args)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4183472">int erl_rpc_from(fd, timeout, emsg)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4184352">int erl_rpc_to(fd, mod, fun, args)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">int fd, timeout;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">char *mod, *fun;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ETERM *args;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ErlMessage *emsg;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Supports calling Erlang functions on remote nodes.
          <fo:inline font-family="monospace">erl_rpc_to()</fo:inline> sends an RPC request to a remote node
          and <fo:inline font-family="monospace">erl_rpc_from()</fo:inline> receives the results of such a
          call. <fo:inline font-family="monospace">erl_rpc()</fo:inline> combines the functionality of
          these two functions by sending an RPC request and waiting for the
          results. See also <fo:inline font-style="italic">
          <fo:inline font-family="monospace">rpc:call/4</fo:inline></fo:inline> in <fo:inline font-family="monospace">Kernel</fo:inline>.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">fd</fo:inline> is an open descriptor to an Erlang
            connection.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">timeout</fo:inline> is the maximum time (in milliseconds)
            to wait for
            results. To wait forever, specify <fo:inline font-family="monospace">ERL_NO_TIMEOUT</fo:inline>.
            When <fo:inline font-family="monospace">erl_rpc()</fo:inline> calls <fo:inline font-family="monospace">erl_rpc_from()</fo:inline>, the call will
            never timeout.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">mod</fo:inline> is the name of the module containing the
            function to be run on the remote node.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">fun</fo:inline> is the name of the function to run.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">args</fo:inline> is an Erlang list, containing the
            arguments to be passed to the function.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">emsg</fo:inline> is a message containing the result of
            the function call.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The actual message returned by the RPC server
          is a 2-tuple <fo:inline font-family="monospace">{rex,Reply}</fo:inline>. If you use
          <fo:inline font-family="monospace">erl_rpc_from()</fo:inline> in your code, this is the message
          you will need to parse. If you use <fo:inline font-family="monospace">erl_rpc()</fo:inline>, the
          tuple itself is parsed for you, and the message returned to your
          program is the Erlang term containing <fo:inline font-family="monospace">Reply</fo:inline> only.
          Replies to RPC requests are always <fo:inline font-family="monospace">ERL_SEND</fo:inline> messages.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is the caller's responsibility to free the returned
            <fo:inline font-family="monospace">ETERM</fo:inline> structure and the memory pointed to by
            <fo:inline font-family="monospace">emsg-&gt;msg</fo:inline> and <fo:inline font-family="monospace">emsg-&gt;to</fo:inline>.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl_rpc()</fo:inline> returns the remote function's return
          value on success, otherwise <fo:inline font-family="monospace">NULL</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl_rpc_to()</fo:inline> returns <fo:inline font-family="monospace">0</fo:inline> on
          success, otherwise a negative number.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl_rcp_from()</fo:inline> returns <fo:inline font-family="monospace">ERL_MSG</fo:inline>
          on success (with <fo:inline font-family="monospace">Emsg</fo:inline> now
          containing the reply tuple), otherwise one of
          <fo:inline font-family="monospace">ERL_TICK</fo:inline>, <fo:inline font-family="monospace">ERL_TIMEOUT</fo:inline>, or
          <fo:inline font-family="monospace">ERL_ERROR</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When failing,
          all three functions set <fo:inline font-family="monospace">erl_errno</fo:inline> to one of:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ENOMEM</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">No more memory is available.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">EIO</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">I/O error.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ETIMEDOUT</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Timeout has expired.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">EAGAIN</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Temporary error: Try again.</fo:block></fo:block-container>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4215440">int erl_send(fd, to, msg)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">int fd;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ETERM *to, *msg;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends an Erlang term to a process.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">fd</fo:inline> is an open descriptor to an Erlang
            connection.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">to</fo:inline> is an Erlang term containing the pid of
            the intended recipient of the message.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>&gt;<fo:inline font-family="monospace">msg</fo:inline> is the Erlang term to be sent.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">1</fo:inline> on success, otherwise <fo:inline font-family="monospace">0</fo:inline>. In
          the latter case <fo:inline font-family="monospace">erl_errno</fo:inline> is set to one of:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">EINVAL</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Invalid argument: <fo:inline font-family="monospace">to</fo:inline> is not a valid Erlang
            pid.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ENOMEM</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">No more memory is available.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">EIO</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">I/O error.</fo:block></fo:block-container>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4228496">const char *erl_thisalivename()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4229360">const char *erl_thiscookie()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4230224">short erl_thiscreation()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4231088">const char *erl_thishostname()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4231952">const char *erl_thisnodename()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Retrieves information about
          the C-node. These values are initially set with
          <fo:inline font-family="monospace">erl_connect_init()</fo:inline> or
          <fo:inline font-family="monospace">erl_connect_xinit()</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4235584">int erl_unpublish(alive)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">char *alive;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function can be called by a process to unregister a
          specified node from EPMD on the local host. This is, however, usually
          not allowed, unless EPMD was started with flag
          <fo:inline font-family="monospace">-relaxed_command_check</fo:inline>, which it normally is not.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To unregister a node you have published, you should instead
          close the descriptor that was returned by
          <fo:inline font-family="monospace">ei_publish()</fo:inline>.</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is deprecated and will be removed in a future
            release.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">alive</fo:inline> is the name of the node to unregister, that
          is, the first component of the node name, without
          <fo:inline font-family="monospace">@hostname</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the node was successfully unregistered from EPMD, <fo:inline font-family="monospace">0</fo:inline> is
          returned, otherwise <fo:inline font-family="monospace">-1</fo:inline> is returned and
          <fo:inline font-family="monospace">erl_errno</fo:inline> is set to <fo:inline font-family="monospace">EIO</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4245360">int erl_xreceive_msg(fd, bufpp, bufsizep, emsg)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">int fd;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">unsigned char **bufpp;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">int *bufsizep;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ErlMessage *emsg;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Similar to <fo:inline font-family="monospace">erl_receive_msg</fo:inline>. The difference is
          that <fo:inline font-family="monospace">erl_xreceive_msg</fo:inline> expects the buffer to
          have been allocated by <fo:inline font-family="monospace">malloc</fo:inline>, and reallocates it
          if the received
          message does not fit into the original buffer. Therefore
          both buffer and buffer length are given as pointers; their values
          can change by the call.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On success, the function returns <fo:inline font-family="monospace">ERL_MSG</fo:inline> and the
          <fo:inline font-family="monospace">Emsg</fo:inline> struct is initialized as described above, or
          <fo:inline font-family="monospace">ERL_TICK</fo:inline>, in which case no message is returned. On
          failure, the function returns <fo:inline font-family="monospace">ERL_ERROR</fo:inline> and sets
          <fo:inline font-family="monospace">erl_errno</fo:inline> to one of:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">EMSGSIZE</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Buffer is too small.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ENOMEM</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">No more memory is available.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">EIO</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">I/O error.</fo:block></fo:block-container>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4258272">struct hostent *erl_gethostbyaddr(addr, length, type)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4259152">struct hostent *erl_gethostbyaddr_r(addr, length, type, hostp, buffer, buflen, h_errnop)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4260080">struct hostent *erl_gethostbyname(name)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4260960">struct hostent *erl_gethostbyname_r(name, hostp, buffer, buflen, h_errnop)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">const char *name;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">const char *addr;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">int length;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">int type;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">struct hostent *hostp;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">char *buffer;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">int buflen;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">int *h_errnop;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Convenience functions for some common name lookup functions.</fo:block>
      </fo:block>
  

  <fo:block id="idp4267488" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Debug Information</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a connection attempt fails, the following can be checked:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">erl_errno</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>That the correct cookie was used</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>That EPMD is running</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>That the remote Erlang node on the other side is running the same
        version of Erlang as the <fo:inline font-family="monospace">erl_interface</fo:inline> library</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  
<fo:block page-break-before="always" id="idp4280016" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">erl_error</fo:marker>erl_error</fo:block>C Library</fo:block>
  <fo:block/>
  erl_error
  Error print routines.
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module contains some error printing routines taken
      from "Advanced Programming in the UNIX Environment"
      by W. Richard Stevens.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These functions are all called in the same manner as
      <fo:inline font-family="monospace">printf()</fo:inline>, that is, with a string containing format
      specifiers followed by a list of corresponding arguments. All output from
      these functions is to <fo:inline font-family="monospace">stderr</fo:inline>.</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4284448">void erl_err_msg(FormatStr, ... )</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">const char *FormatStr;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The message provided by the caller is printed. This
          function is simply a wrapper for <fo:inline font-family="monospace">fprintf()</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4288576">void erl_err_quit(FormatStr, ... )</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">const char *FormatStr;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Use this function when a fatal error has occurred that
          is not because of a system call. The message provided by the
          caller is printed and the process terminates with exit
          value <fo:inline font-family="monospace">1</fo:inline>. This function does not return.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4292816">void erl_err_ret(FormatStr, ... )</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">const char *FormatStr;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Use this function after a failed system call. The message
          provided by the caller is printed followed by a string
          describing the reason for failure.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4296544">void erl_err_sys(FormatStr, ... )</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">const char *FormatStr;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Use this function after a failed system call. The message
          provided by the caller is printed followed by a string
          describing the reason for failure, and the process
          terminates with exit value <fo:inline font-family="monospace">1</fo:inline>. This function does not
          return.</fo:block>
      </fo:block>
  

  <fo:block id="idp4300560" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Error Reporting</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Most functions in <fo:inline font-family="monospace">Erl_Interface</fo:inline> report failures to the caller by
      returning some otherwise meaningless value (typically
      <fo:inline font-family="monospace">NULL</fo:inline>
      or a negative number). As this only tells you that things did not
      go well, examine the error code in <fo:inline font-family="monospace">erl_errno</fo:inline> if you
      want to find out more about the failure.</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4304160">volatile int erl_errno</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl_errno</fo:inline> is initially (at program startup) zero
          and is then set by many <fo:inline font-family="monospace">Erl_Interface</fo:inline> functions on failure to
          a non-zero error code to indicate what kind of error it
          encountered. A successful function call can change
          <fo:inline font-family="monospace">erl_errno</fo:inline> (by calling some other function that
          fails), but no function does never set it to zero. This means
          that you cannot use <fo:inline font-family="monospace">erl_errno</fo:inline> to see <fo:inline font-weight="bold">if</fo:inline> a
          function call failed. Instead, each function reports failure
          in its own way (usually by returning a negative number or
          <fo:inline font-family="monospace">NULL</fo:inline>), in which case you can examine
          <fo:inline font-family="monospace">erl_errno</fo:inline> for details.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl_errno</fo:inline> uses the error codes defined in your
          system's <fo:inline font-family="monospace">&lt;errno.h&gt;</fo:inline>.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl_errno</fo:inline> is a "modifiable lvalue" (just
            like ISO C defines <fo:inline font-family="monospace">errno</fo:inline> to be) rather than a
            variable. This means it can be implemented as a macro
            (expanding to, for example, <fo:inline font-family="monospace">*_erl_errno()</fo:inline>).
            For reasons of thread safety (or task safety), this is exactly what
            we do on most platforms.</fo:block>
        </fo:block>
      </fo:block>
  
<fo:block page-break-before="always" id="idp4322096" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">erl_eterm</fo:marker>erl_eterm</fo:block>C Library</fo:block>
  <fo:block/>
  erl_eterm
  Functions for Erlang term construction.
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module provides functions for creating and manipulating
      Erlang terms.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An Erlang term is represented by a C structure of type
      <fo:inline font-family="monospace">ETERM</fo:inline>. Applications should not reference any fields
      in this structure directly, as it can be changed in future releases
      to provide faster and more compact term storage. Instead,
      applications should use the macros and functions provided.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each of the following macros takes a single <fo:inline font-family="monospace">ETERM</fo:inline> pointer as an
      argument. The macros return a non-zero value if the test is true,
      otherwise <fo:inline font-family="monospace">0</fo:inline>.</fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_IS_INTEGER(t)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">True if <fo:inline font-family="monospace">t</fo:inline> is an integer.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_IS_UNSIGNED_INTEGER(t)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">True if <fo:inline font-family="monospace">t</fo:inline> is an integer.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_IS_FLOAT(t)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">True if <fo:inline font-family="monospace">t</fo:inline> is a floating point number.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_IS_ATOM(t)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">True if <fo:inline font-family="monospace">t</fo:inline> is an atom.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_IS_PID(t)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">True if <fo:inline font-family="monospace">t</fo:inline> is a pid (process identifier).</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_IS_PORT(t)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">True if <fo:inline font-family="monospace">t</fo:inline> is a port.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_IS_REF(t)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">True if <fo:inline font-family="monospace">t</fo:inline> is a reference.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_IS_TUPLE(t)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">True if <fo:inline font-family="monospace">t</fo:inline> is a tuple.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_IS_BINARY(t)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">True if <fo:inline font-family="monospace">t</fo:inline> is a binary.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_IS_LIST(t)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">True if <fo:inline font-family="monospace">t</fo:inline> is a list with zero or more
        elements.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_IS_EMPTY_LIST(t)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">True if <fo:inline font-family="monospace">t</fo:inline> is an empty list.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ERL_IS_CONS(t)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">True if <fo:inline font-family="monospace">t</fo:inline> is a list with at least one
        element.</fo:block></fo:block-container>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following macros can be used for retrieving parts of Erlang
      terms. None of these do any type checking. Results are undefined
      if you pass an <fo:inline font-family="monospace">ETERM*</fo:inline> containing the wrong type. For example,
      passing a tuple to <fo:inline font-family="monospace">ERL_ATOM_PTR()</fo:inline> likely results in garbage.</fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">char *ERL_ATOM_PTR(t)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"/></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">char *ERL_ATOM_PTR_UTF8(t)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">A string representing atom <fo:inline font-family="monospace">t</fo:inline>.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">int ERL_ATOM_SIZE(t)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"/></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">int ERL_ATOM_SIZE_UTF8(t)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">The length (in bytes) of atom <fo:inline font-family="monospace">t</fo:inline>.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">void *ERL_BIN_PTR(t)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">A pointer to the contents of <fo:inline font-family="monospace">t</fo:inline>.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">int ERL_BIN_SIZE(t)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">The length (in bytes) of binary object <fo:inline font-family="monospace">t</fo:inline>.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">int ERL_INT_VALUE(t)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">The integer of <fo:inline font-family="monospace">t</fo:inline>.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">unsigned int ERL_INT_UVALUE(t)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">The unsigned integer value of <fo:inline font-family="monospace">t</fo:inline>.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">double ERL_FLOAT_VALUE(t)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">The floating point value of <fo:inline font-family="monospace">t</fo:inline>.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ETERM *ERL_PID_NODE(t)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"/></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ETERM *ERL_PID_NODE_UTF8(t)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">The node in pid <fo:inline font-family="monospace">t</fo:inline>.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">int ERL_PID_NUMBER(t)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">The sequence number in pid <fo:inline font-family="monospace">t</fo:inline>.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">int ERL_PID_SERIAL(t)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">The serial number in pid <fo:inline font-family="monospace">t</fo:inline>.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">int ERL_PID_CREATION(t)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">The creation number in pid <fo:inline font-family="monospace">t</fo:inline>.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">int ERL_PORT_NUMBER(t)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">The sequence number in port <fo:inline font-family="monospace">t</fo:inline>.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">int ERL_PORT_CREATION(t)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">The creation number in port <fo:inline font-family="monospace">t</fo:inline>.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ETERM *ERL_PORT_NODE(t)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"/></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ETERM *ERL_PORT_NODE_UTF8(t)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">The node in port <fo:inline font-family="monospace">t</fo:inline>.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">int ERL_REF_NUMBER(t)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">The first part of the reference number in ref <fo:inline font-family="monospace">t</fo:inline>.
        Use only for compatibility.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">int ERL_REF_NUMBERS(t)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Pointer to the array of reference numbers in ref
        <fo:inline font-family="monospace">t</fo:inline>.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">int ERL_REF_LEN(t)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">The number of used reference numbers in ref
        <fo:inline font-family="monospace">t</fo:inline>.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">int ERL_REF_CREATION(t)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">The creation number in ref <fo:inline font-family="monospace">t</fo:inline>.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">int ERL_TUPLE_SIZE(t)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">The number of elements in tuple <fo:inline font-family="monospace">t</fo:inline>.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ETERM *ERL_CONS_HEAD(t)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">The head element of list <fo:inline font-family="monospace">t</fo:inline>.</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ETERM *ERL_CONS_TAIL(t)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">A list representing the tail elements of list
        <fo:inline font-family="monospace">t</fo:inline>.</fo:block></fo:block-container>
    </fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4382688">ETERM *erl_cons(head, tail)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ETERM *head;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ETERM *tail;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Concatenates two Erlang terms, prepending <fo:inline font-family="monospace">head</fo:inline>
          onto <fo:inline font-family="monospace">tail</fo:inline> and thereby creating a
          <fo:inline font-family="monospace">cons</fo:inline> cell.
          To make a proper list, <fo:inline font-family="monospace">tail</fo:inline> is always to be a list
          or an empty list. Notice that <fo:inline font-family="monospace">NULL</fo:inline> is not a valid list.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">head</fo:inline> is the new term to be added.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">tail</fo:inline> is the existing list to which
            <fo:inline font-family="monospace">head</fo:inline> is concatenated.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function returns a new list.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ERL_CONS_HEAD(list)</fo:inline> and
          <fo:inline font-family="monospace">ERL_CONS_TAIL(list)</fo:inline>
          can be used to retrieve the head and tail components
          from the list. <fo:inline font-family="monospace">erl_hd(list)</fo:inline> and
          <fo:inline font-family="monospace">erl_tl(list)</fo:inline> do
          the same thing, but check that the argument really is a list.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
ETERM *list,*anAtom,*anInt;
anAtom = erl_mk_atom("madonna");
anInt  = erl_mk_int(21);
list   = erl_mk_empty_list();
list   = erl_cons(anAtom, list);
list   = erl_cons(anInt, list);
 ... /* do some work */
erl_free_compound(list);
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4395968">ETERM *erl_copy_term(term)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ETERM *term;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates and returns a copy of the Erlang term
          <fo:inline font-family="monospace">term</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4400032">ETERM *erl_element(position, tuple)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">int position;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ETERM *tuple;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Extracts a specified element from an Erlang tuple.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">position</fo:inline> specifies which element to retrieve
            from <fo:inline font-family="monospace">tuple</fo:inline>. The elements are numbered starting
            from 1.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">tuple</fo:inline> is an Erlang term containing at least
            <fo:inline font-family="monospace">position</fo:inline> elements.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a new Erlang term corresponding to the requested element, or
          <fo:inline font-family="monospace">NULL</fo:inline> if <fo:inline font-family="monospace">position</fo:inline> was greater
          than the arity of <fo:inline font-family="monospace">tuple</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4409200">ETERM *erl_hd(list)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ETERM *list;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Extracts the first element from a list.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">list</fo:inline> is an Erlang term containing a list.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns an Erlang term corresponding to the head
          head element in the list, or a <fo:inline font-family="monospace">NULL</fo:inline> pointer if
          <fo:inline font-family="monospace">list</fo:inline> was not a list.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4414960">void erl_init(NULL, 0)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">void *NULL;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">int 0;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function must be called before any of the others in the
          <fo:inline font-family="monospace">Erl_Interface</fo:inline> library to initialize the
          library functions. The arguments must be specified as
          <fo:inline font-family="monospace">erl_init(NULL,0)</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4419984">int erl_iolist_length(list)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ETERM *list;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the length of an I/O list.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">list</fo:inline> is an Erlang term containing an I/O list.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the length of <fo:inline font-family="monospace">list</fo:inline>, or
          <fo:inline font-family="monospace">-1</fo:inline> if <fo:inline font-family="monospace">list</fo:inline> is not an I/O list.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For the definition of an I/O list, see
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_iolist_to_binary</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4427616">ETERM *erl_iolist_to_binary(term)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ETERM *list;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Converts an I/O list to a binary term.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">list</fo:inline> is an Erlang term containing a list.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns an Erlang binary term, or <fo:inline font-family="monospace">NULL</fo:inline> if
          <fo:inline font-family="monospace">list</fo:inline> was not an I/O list.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Informally, an I/O list is a deep list of characters and
          binaries that can be sent to an Erlang port. In BNF, an I/O
          list is formally defined as follows:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
iolist ::= []
        |   Binary
        |   [iohead | iolist]
        ;
iohead ::= Binary
        |   Byte (integer in the range [0..255])
        |   iolist
        ;
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4434816">char *erl_iolist_to_string(list)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ETERM *list;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Converts an I/O list to a <fo:inline font-family="monospace">NULL</fo:inline>-terminated C string.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">list</fo:inline> is an Erlang term containing an I/O list.
          The I/O list must not contain the integer 0, as C strings may not
          contain this value except as a terminating marker.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a pointer to a dynamically allocated
          buffer containing a string. If <fo:inline font-family="monospace">list</fo:inline> is not an I/O
          list, or if <fo:inline font-family="monospace">list</fo:inline> contains the integer 0,
          <fo:inline font-family="monospace">NULL</fo:inline> is returned. It
          is the caller's responsibility to free the allocated buffer
          with <fo:inline font-family="monospace">erl_free()</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For the definition of an I/O list, see
          <fo:inline font-style="italic">
          <fo:inline font-family="monospace">erl_iolist_to_binary</fo:inline></fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4444112">int erl_length(list)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ETERM *list;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Determines the length of a proper list.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">list</fo:inline> is an Erlang term containing a proper list.
          In a proper list, all tails except the last point to another list
          cell, and the last tail points to an empty list.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">-1</fo:inline> if <fo:inline font-family="monospace">list</fo:inline> is not a proper
          list.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4449952">ETERM *erl_mk_atom(string)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">const char *string;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an atom.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">string</fo:inline> is the sequence of characters that will be
          used to create the atom.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns an Erlang term containing an atom. Notice that it is
          the caller's responsibility to ensure that <fo:inline font-family="monospace">string</fo:inline>
          contains a valid name for an atom.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ERL_ATOM_PTR(atom)</fo:inline> and
          <fo:inline font-family="monospace">ERL_ATOM_PTR_UTF8(atom)</fo:inline>
          can be used to retrieve the atom name (as a <fo:inline font-family="monospace">NULL</fo:inline>-terminated string).
          <fo:inline font-family="monospace">ERL_ATOM_SIZE(atom)</fo:inline>
	  and <fo:inline font-family="monospace">ERL_ATOM_SIZE_UTF8(atom)</fo:inline> return the length
          of the atom name.</fo:block>
	<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The UTF-8 variants were introduced in Erlang/OTP R16 and the
	    string returned by <fo:inline font-family="monospace">ERL_ATOM_PTR(atom)</fo:inline> was not
        <fo:inline font-family="monospace">NULL</fo:inline>-terminated on older releases.</fo:block>
	</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4459824">ETERM *erl_mk_binary(bptr, size)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">char *bptr;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">int size;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Produces an Erlang binary object from a
          buffer containing a sequence of bytes.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">bptr</fo:inline> is a pointer to a buffer containing
            data to be converted.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">size</fo:inline> indicates the length of
            <fo:inline font-family="monospace">bptr</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns an Erlang binary object.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ERL_BIN_PTR(bin)</fo:inline> retrieves a pointer to
          the binary data. <fo:inline font-family="monospace">ERL_BIN_SIZE(bin)</fo:inline> retrieves the
          size.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4468320">ETERM *erl_mk_empty_list()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates and returns an empty Erlang list.
          Notice that <fo:inline font-family="monospace">NULL</fo:inline> is not used to represent an empty list;
          Use this function instead.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4471552">ETERM *erl_mk_estring(string, len)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">char *string;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">int len;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a list from a sequence of bytes.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">string</fo:inline> is a buffer containing a sequence of
              bytes. The buffer does not need to be <fo:inline font-family="monospace">NULL</fo:inline>-terminated.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">len</fo:inline> is the length of
            <fo:inline font-family="monospace">string</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns an Erlang list object corresponding to
          the character sequence in <fo:inline font-family="monospace">string</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4479760">ETERM *erl_mk_float(f)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">double f;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an Erlang float.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">f</fo:inline> is a value to be converted to an Erlang
          float.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns an Erlang float object with the value
          specified in <fo:inline font-family="monospace">f</fo:inline> or <fo:inline font-family="monospace">NULL</fo:inline> if
          <fo:inline font-family="monospace">f</fo:inline> is not finite.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ERL_FLOAT_VALUE(t)</fo:inline> can be used to retrieve the
          value from an Erlang float.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4486736">ETERM *erl_mk_int(n)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">int n;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an Erlang integer.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">n</fo:inline> is a value to be converted to an Erlang
          integer.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns an Erlang integer object with the
          value specified in <fo:inline font-family="monospace">n</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ERL_INT_VALUE(t)</fo:inline> can be used to retrieve the
          value from an Erlang integer.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4492832">ETERM *erl_mk_list(array, arrsize)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ETERM **array;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">int arrsize;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an Erlang list from an array of Erlang terms, such
          that each element in the list corresponds to one element in
          the array.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">array</fo:inline> is an array of Erlang terms.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">arrsize</fo:inline> is the number of elements in
            <fo:inline font-family="monospace">array</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function creates an Erlang list object, whose length
          <fo:inline font-family="monospace">arrsize</fo:inline> and whose elements are taken from the
          terms in <fo:inline font-family="monospace">array</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4501120">ETERM *erl_mk_long_ref(node, n1, n2, n3, creation)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">const char *node;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">unsigned int n1, n2, n3;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">unsigned int creation;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an Erlang reference, with 82 bits.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">node</fo:inline> is the name of the C-node.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">n1</fo:inline>, <fo:inline font-family="monospace">n2</fo:inline>, and
            <fo:inline font-family="monospace">n3</fo:inline> can be seen as one big number
            <fo:inline font-family="monospace">n1*2^64+n2*2^32+n3</fo:inline>, which is to be chosen
            uniquely for each reference created for a given C-node.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">creation</fo:inline> is an arbitrary number.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that <fo:inline font-family="monospace">n3</fo:inline> and <fo:inline font-family="monospace">creation</fo:inline>
          are limited in precision, so only the low 18 and 2 bits of these
          numbers are used.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns an Erlang reference object.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ERL_REF_NODE(ref)</fo:inline>,
          <fo:inline font-family="monospace">ERL_REF_NUMBERS(ref)</fo:inline>,
          <fo:inline font-family="monospace">ERL_REF_LEN(ref)</fo:inline>, and
          <fo:inline font-family="monospace">ERL_REF_CREATION(ref)</fo:inline> can be used to retrieve the
            values used to create the reference.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4514112">ETERM *erl_mk_pid(node, number, serial, creation)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">const char *node;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">unsigned int number;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">unsigned int serial;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">unsigned int creation;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an Erlang process identifier (pid). The
          resulting pid can be used by Erlang processes wishing to
          communicate with the C-node.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">node</fo:inline> is the name of the C-node.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">number</fo:inline>, <fo:inline font-family="monospace">serial</fo:inline>, and
            <fo:inline font-family="monospace">creation</fo:inline> are
            arbitrary numbers. Notice that these are limited in
            precision, so only the low 15, 3, and 2 bits of these numbers
            are used.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns an Erlang pid object.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ERL_PID_NODE(pid)</fo:inline>,
          <fo:inline font-family="monospace">ERL_PID_NUMBER(pid)</fo:inline>,
          <fo:inline font-family="monospace">ERL_PID_SERIAL(pid)</fo:inline>, and
          <fo:inline font-family="monospace">ERL_PID_CREATION(pid)</fo:inline>
          can be used to retrieve the four values used to create the pid.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4525056">ETERM *erl_mk_port(node, number, creation)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">const char *node;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">unsigned int number;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">unsigned int creation;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an Erlang port identifier.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">node</fo:inline> is the name of the C-node.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">number</fo:inline> and <fo:inline font-family="monospace">creation</fo:inline> are
            arbitrary numbers. Notice that these are limited in
            precision, so only the low 18 and 2 bits of these numbers
            are used.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns an Erlang port object.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ERL_PORT_NODE(port)</fo:inline>,
          <fo:inline font-family="monospace">ERL_PORT_NUMBER(port)</fo:inline>,
          and <fo:inline font-family="monospace">ERL_PORT_CREATION</fo:inline> can be used to retrieve the
          three values used to create the port.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4534512">ETERM *erl_mk_ref(node, number, creation)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">const char *node;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">unsigned int number;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">unsigned int creation;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an old Erlang reference, with
          only 18 bits - use <fo:inline font-family="monospace">erl_mk_long_ref</fo:inline> instead.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">node</fo:inline> is the name of the C-node.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">number</fo:inline> is to be chosen uniquely for each
            reference created for a given C-node.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">creation</fo:inline> is an arbitrary number.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that <fo:inline font-family="monospace">number</fo:inline> and <fo:inline font-family="monospace">creation</fo:inline>
          are limited in precision, so only the low 18 and 2 bits of these
          numbers are used.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns an Erlang reference object.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ERL_REF_NODE(ref)</fo:inline>,
          <fo:inline font-family="monospace">ERL_REF_NUMBER(ref)</fo:inline>, and
          <fo:inline font-family="monospace">ERL_REF_CREATION(ref)</fo:inline> can be used to retrieve the
          three values used to create the reference.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4546096">ETERM *erl_mk_string(string)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">char *string;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a list from a <fo:inline font-family="monospace">NULL</fo:inline>-terminated string.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">string</fo:inline> is a <fo:inline font-family="monospace">NULL</fo:inline>-terminated sequence of
          characters
          (that is, a C string) from which the list will be created.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns an Erlang list.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4551824">ETERM *erl_mk_tuple(array, arrsize)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ETERM **array;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">int arrsize;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an Erlang tuple from an array of Erlang terms.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">array</fo:inline> is an array of Erlang terms.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">arrsize</fo:inline> is the number of elements in
            <fo:inline font-family="monospace">array</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function creates an Erlang tuple, whose arity is
          <fo:inline font-family="monospace">size</fo:inline> and whose elements are taken from the terms
          in <fo:inline font-family="monospace">array</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To retrieve the size of a tuple, either use function
          <fo:inline font-family="monospace">erl_size</fo:inline> (which checks the type of the
          checked term and works for a binary as well as for a tuple) or
          <fo:inline font-family="monospace">ERL_TUPLE_SIZE(tuple)</fo:inline> returns the arity of a tuple.
          <fo:inline font-family="monospace">erl_size()</fo:inline> does the same thing, but it checks
          that the argument is a tuple.
          <fo:inline font-family="monospace">erl_element(index,tuple)</fo:inline> returns the element
          corresponding to a given position in the tuple.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4562576">ETERM *erl_mk_uint(n)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">unsigned int n;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an Erlang unsigned integer.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">n</fo:inline> is a value to be converted to an Erlang
          unsigned integer.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns an Erlang unsigned integer object with
          the value specified in <fo:inline font-family="monospace">n</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ERL_INT_UVALUE(t)</fo:inline> can be used to retrieve the
          value from an Erlang unsigned integer.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4568704">ETERM *erl_mk_var(name)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">char *name;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an unbound Erlang variable. The variable can later be bound
          through pattern matching or assignment.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">name</fo:inline> specifies a name for the variable.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns an Erlang variable object with the
          name <fo:inline font-family="monospace">name</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4574064">int erl_print_term(stream, term)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FILE *stream;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ETERM *term;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Prints the specified Erlang term to the specified output stream.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">stream</fo:inline> indicates where the function is to
            send its output.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">term</fo:inline> is the Erlang term to print.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the number of characters written on success, otherwise a
          negative value.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4580912">void erl_set_compat_rel(release_number)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">unsigned release_number;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By default, the <fo:inline font-family="monospace">Erl_Interface</fo:inline> library is only
          guaranteed to be compatible with other Erlang/OTP components from the
          same release as the <fo:inline font-family="monospace">Erl_Interface</fo:inline> library itself.
          For example, <fo:inline font-family="monospace">Erl_Interface</fo:inline> from Erlang/OTP R10
          is not compatible
          with an Erlang emulator from Erlang/OTP R9 by default.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A call to <fo:inline font-family="monospace">erl_set_compat_rel(release_number)</fo:inline> sets
          the <fo:inline font-family="monospace">Erl_Interface</fo:inline> library in compatibility mode of
          release <fo:inline font-family="monospace">release_number</fo:inline>. Valid range of
          <fo:inline font-family="monospace">release_number</fo:inline>
          is [7, current release]. This makes it possible to
          communicate with Erlang/OTP components from earlier releases.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If this function is called, it may only be called once
            directly after the call to function
            <fo:inline font-style="italic">erl_init()</fo:inline>.</fo:block>
        </fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">You may run into trouble if this feature is used
            carelessly. Always ensure that all communicating
            components are either from the same Erlang/OTP release, or
            from release X and release Y where all components
            from release Y are in compatibility mode of release X.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4591424">int erl_size(term)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ETERM *term;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns either the arity of an Erlang tuple or the
          number of bytes in an Erlang binary object.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">term</fo:inline> is an Erlang tuple or an Erlang binary
          object.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the size of <fo:inline font-family="monospace">term</fo:inline> as described
          above, or <fo:inline font-family="monospace">-1</fo:inline> if <fo:inline font-family="monospace">term</fo:inline> is not one of the two
          supported types.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4597712">ETERM *erl_tl(list)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ETERM *list;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Extracts the tail from a list.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">list</fo:inline> is an Erlang term containing a list.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns an Erlang list corresponding to the
          original list minus the first element, or <fo:inline font-family="monospace">NULL</fo:inline> pointer if
          <fo:inline font-family="monospace">list</fo:inline> was not a list.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4603472">ETERM *erl_var_content(term, name)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ETERM *term;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">char *name;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the contents of the specified variable in an Erlang term.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">term</fo:inline> is an Erlang term. In order for this
            function to succeed,
            <fo:inline font-family="monospace">term</fo:inline> must either be an Erlang variable with
            the specified name, or it must be an Erlang list or tuple
            containing a variable with the specified name. Other Erlang
            types cannot contain variables.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">name</fo:inline> is the name of an Erlang variable.
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the Erlang object corresponding to the value of
          <fo:inline font-family="monospace">name</fo:inline> in <fo:inline font-family="monospace">term</fo:inline>. If no variable
          with the name <fo:inline font-family="monospace">name</fo:inline> is found in
          <fo:inline font-family="monospace">term</fo:inline>, or if <fo:inline font-family="monospace">term</fo:inline> is
          not a valid Erlang term, <fo:inline font-family="monospace">NULL</fo:inline> is returned.</fo:block>
      </fo:block>
  
<fo:block page-break-before="always" id="idp4621424" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">erl_format</fo:marker>erl_format</fo:block>C Library</fo:block>
  <fo:block/>
  erl_format
  Create and match Erlang terms.
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module contains two routines: one general function for
      creating Erlang terms and one for pattern matching Erlang terms.</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4624336">ETERM *erl_format(FormatStr, ...)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">char *FormatStr;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A general function for creating Erlang terms using
          a format specifier and a corresponding set of arguments, much
          in the way <fo:inline font-family="monospace">printf()</fo:inline> works.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">FormatStr</fo:inline> is a format specification string.
          The valid format specifiers are as follows:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">~i</fo:inline> - Integer</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">~f</fo:inline> - Floating point</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">~a</fo:inline> - Atom</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">~s</fo:inline> - String</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">~w</fo:inline> - Arbitrary Erlang term</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For each format specifier included in <fo:inline font-family="monospace">FormatStr</fo:inline>,
          there must be a corresponding argument following
          <fo:inline font-family="monospace">FormatStr</fo:inline>. An Erlang term is built according to
          <fo:inline font-family="monospace">FormatStr</fo:inline> with values and Erlang terms substituted
          from the corresponding arguments, and according to the individual
          format specifiers. For example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
erl_format("[{name,~a},{age,~i},{data,~w}]",
           "madonna",
           21,
           erl_format("[{adr,~s,~i}]","E-street",42));
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This creates an <fo:inline font-family="monospace">(ETERM *)</fo:inline> structure corresponding
          to the Erlang term
          <fo:inline font-family="monospace">[{name,madonna},{age,21},{data,[{adr,"E-street",42}]}]</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function returns an Erlang term, or <fo:inline font-family="monospace">NULL</fo:inline> if
          <fo:inline font-family="monospace">FormatStr</fo:inline> does not describe a valid Erlang
          term.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4639264">int erl_match(Pattern, Term)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ETERM *Pattern,*Term;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is used to perform pattern matching similar
          to that done in Erlang. For matching rules and more examples, see
          section <fo:inline font-style="italic">
          Pattern Matching</fo:inline> in the Erlang Reference Manual.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Pattern</fo:inline> is an Erlang term, possibly
            containing unbound variables.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Term</fo:inline> is an Erlang term that we wish to match
            against <fo:inline font-family="monospace">Pattern</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Term</fo:inline> and <fo:inline font-family="monospace">Pattern</fo:inline> are compared
          and any unbound variables in <fo:inline font-family="monospace">Pattern</fo:inline> are bound to
          corresponding values in <fo:inline font-family="monospace">Term</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Term</fo:inline> and <fo:inline font-family="monospace">Pattern</fo:inline> can be
          matched, the function returns a non-zero value and binds any unbound
          variables in <fo:inline font-family="monospace">Pattern</fo:inline>. If <fo:inline font-family="monospace">Term</fo:inline>
          and <fo:inline font-family="monospace">Pattern</fo:inline> do
          not match, <fo:inline font-family="monospace">0</fo:inline> is returned. For example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
ETERM *term, *pattern, *pattern2;
term1    = erl_format("{14,21}");
term2    = erl_format("{19,19}");
pattern1 = erl_format("{A,B}");
pattern2 = erl_format("{F,F}");
if (erl_match(pattern1, term1)) {
  /* match succeeds:
   * A gets bound to 14, 
   * B gets bound to 21 
   */
  ...  
}
if (erl_match(pattern2, term1)) {
  /* match fails because F cannot be 
   * bound to two separate values, 14 and 21
   */
  ...
}
if (erl_match(pattern2, term2)) {
  /* match succeeds and F gets bound to 19 */
  ...
}
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl_var_content()</fo:inline> can be used to retrieve the
          content of any variables bound as a result of a call to
          <fo:inline font-family="monospace">erl_match()</fo:inline>.</fo:block>
      </fo:block>
  
<fo:block page-break-before="always" id="idp4662096" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">erl_global</fo:marker>erl_global</fo:block>C Library</fo:block>
  <fo:block/>
  erl_global
  Access globally registered names.
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module provides support for registering, looking
      up, and unregistering names in the <fo:inline font-family="monospace">global</fo:inline> module.
      For more information, see
      <fo:inline font-style="italic"><fo:inline font-family="monospace">kernel:global</fo:inline></fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that the functions below perform an RPC using an open file
      descriptor provided by the caller. This file descriptor must
      not be used for other traffic during the global operation, as the
      function can then receive unexpected data and fail.</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4666992">char **erl_global_names(fd,count)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">int fd;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">int *count;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Retrieves a list of all known global names.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">fd</fo:inline> is an open descriptor to an Erlang
            connection.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">count</fo:inline> is the address of an integer, or
            <fo:inline font-family="monospace">NULL</fo:inline>. If <fo:inline font-family="monospace">count</fo:inline> is not <fo:inline font-family="monospace">NULL</fo:inline>, it is
            set by the function to the number of names found.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On success, the function returns an array of strings, each
          containing a single registered name, and sets
          <fo:inline font-family="monospace">count</fo:inline> to
          the number of names found. The array is terminated
          by a single <fo:inline font-family="monospace">NULL</fo:inline> pointer. On failure, the function returns
          <fo:inline font-family="monospace">NULL</fo:inline> and <fo:inline font-family="monospace">count</fo:inline> is not modified.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is the caller's responsibility to free the array
            afterwards. It has been allocated by the function with a
            single call to <fo:inline font-family="monospace">malloc()</fo:inline>, so a single
            <fo:inline font-family="monospace">free()</fo:inline> is all that is necessary.</fo:block>
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4679120">int erl_global_register(fd,name,pid)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">int fd;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">const char *name;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ETERM *pid;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Registers a name in <fo:inline font-family="monospace">global</fo:inline>.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">fd</fo:inline> is an open descriptor to an Erlang
            connection.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">name</fo:inline> is the name to register in
            <fo:inline font-family="monospace">global</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">pid</fo:inline> is the pid that is to be associated with
            <fo:inline font-family="monospace">name</fo:inline>. This value is returned by <fo:inline font-family="monospace">global</fo:inline>
            when processes request the location of <fo:inline font-family="monospace">name</fo:inline>.
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">0</fo:inline> on success, otherwise <fo:inline font-family="monospace">-1</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4690272">int erl_global_unregister(fd,name)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">int fd;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">const char *name;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Unregisters a name from <fo:inline font-family="monospace">global</fo:inline>.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">fd</fo:inline> is an open descriptor to an Erlang
            connection.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">name</fo:inline> is the name to unregister from
            <fo:inline font-family="monospace">global</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">0</fo:inline> on success, otherwise <fo:inline font-family="monospace">-1</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4698832">ETERM *erl_global_whereis(fd,name,node)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">int fd;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">const char *name;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">char *node;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Looks up a name in <fo:inline font-family="monospace">global</fo:inline>.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">fd</fo:inline> is an open descriptor to an Erlang
            connection.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">name</fo:inline> is the name that is to be looked up in
            <fo:inline font-family="monospace">global</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">node</fo:inline> is not <fo:inline font-family="monospace">NULL</fo:inline>, it is a pointer to a
          buffer where the function can fill in the name of the node where
          <fo:inline font-family="monospace">name</fo:inline> is found. <fo:inline font-family="monospace">node</fo:inline> can be
          passed directly to <fo:inline font-family="monospace">erl_connect()</fo:inline> if necessary.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On success, the function returns an Erlang pid containing the address
          of the specified name, and the node is initialized to
          the node name where <fo:inline font-family="monospace">name</fo:inline> is found. On failure,
          <fo:inline font-family="monospace">NULL</fo:inline> is returned and <fo:inline font-family="monospace">node</fo:inline> is not
          modified.</fo:block>
      </fo:block>
  
<fo:block page-break-before="always" id="idp4718944" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">erl_malloc</fo:marker>erl_malloc</fo:block>C Library</fo:block>
  <fo:block/>
  erl_malloc
  Memory allocation functions.
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module provides functions for allocating and deallocating
      memory.</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4721808">ETERM *erl_alloc_eterm(etype)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">unsigned char etype;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allocates an <fo:inline font-family="monospace">(ETERM)</fo:inline> structure.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specify <fo:inline font-family="monospace">etype</fo:inline> as one of the following
          constants:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ERL_INTEGER</fo:inline>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ERL_U_INTEGER</fo:inline> (unsigned integer)
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ERL_ATOM</fo:inline>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ERL_PID</fo:inline> (Erlang process identifier)
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ERL_PORT</fo:inline>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ERL_REF</fo:inline> (Erlang reference)
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ERL_LIST</fo:inline>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ERL_EMPTY_LIST</fo:inline>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ERL_TUPLE</fo:inline>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ERL_BINARY</fo:inline>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ERL_FLOAT</fo:inline>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ERL_VARIABLE</fo:inline>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ERL_SMALL_BIG</fo:inline> (bignum)
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ERL_U_SMALL_BIG</fo:inline> (bignum)
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ERL_SMALL_BIG</fo:inline> and
          <fo:inline font-family="monospace">ERL_U_SMALL_BIG</fo:inline> are for
          creating Erlang <fo:inline font-family="monospace">bignums</fo:inline>, which can contain integers
          of any size. The size of an integer in Erlang is machine-dependent,
          but any integer &gt; 2^28 requires a bignum.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4739616">void erl_eterm_release(void)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Clears the freelist, where blocks are placed when they are
          released by <fo:inline font-family="monospace">erl_free_term()</fo:inline> and
          <fo:inline font-family="monospace">erl_free_compound()</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4743248">void erl_eterm_statistics(allocated, freed)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">long *allocated;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">long *freed;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Reports term allocation statistics.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">allocated</fo:inline> and <fo:inline font-family="monospace">freed</fo:inline> are
          initialized to
          contain information about the fix-allocator used to allocate
          <fo:inline font-family="monospace">ETERM</fo:inline> components.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">allocated</fo:inline> is the number of blocks currently
              allocated to <fo:inline font-family="monospace">ETERM</fo:inline> objects.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">freed</fo:inline> is the length of the freelist, where
              blocks are placed when they are
              released by <fo:inline font-family="monospace">erl_free_term()</fo:inline> and
              <fo:inline font-family="monospace">erl_free_compound()</fo:inline>.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4753600">void erl_free(ptr)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">void *ptr;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calls the standard
          <fo:inline font-family="monospace">free()</fo:inline> function.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4757616">void erl_free_array(array, size)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ETERM **array;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">int size;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Frees an array of Erlang terms.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">array</fo:inline> is an array of ETERM* objects.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">size</fo:inline> is the number of terms in the array.
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4763904">void erl_free_compound(t)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ETERM *t;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Normally it is the programmer's responsibility to free each
          Erlang term that has been returned from any of the
          <fo:inline font-family="monospace">Erl_Interface</fo:inline> functions. However, as many of the
          functions that build new Erlang terms in fact share objects
          with other existing terms, it can be difficult for the
          programmer to maintain pointers to all such terms to
          free them individually.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl_free_compound()</fo:inline> recursively frees all of the
          subterms associated with a specified Erlang term, regardless of
          whether we are still holding pointers to the subterms.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For an example, see section
            <fo:inline font-style="italic">Building Terms and Patterns</fo:inline>
            in the User's Guide.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4770448">void erl_free_term(t)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ETERM *t;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Frees an Erlang term.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4774016">void erl_malloc(size)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">long size;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calls the standard
          <fo:inline font-family="monospace">malloc()</fo:inline> function.</fo:block>
      </fo:block>
  
<fo:block page-break-before="always" id="idp4785728" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">erl_marshal</fo:marker>erl_marshal</fo:block>C Library</fo:block>
  <fo:block/>
  erl_marshal
  Encoding and decoding of Erlang terms.
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module contains functions for encoding Erlang terms into
      a sequence of bytes, and for decoding Erlang terms from a
      sequence of bytes.</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4788656">int erl_compare_ext(bufp1, bufp2)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">unsigned char *bufp1,*bufp2;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Compares two encoded terms.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">bufp1</fo:inline> is a buffer containing an encoded
            Erlang term term1.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">bufp2</fo:inline> is a buffer containing an encoded
            Erlang term term2.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">0</fo:inline> if the terms are equal, <fo:inline font-family="monospace">-1</fo:inline> if
          <fo:inline font-family="monospace">term1</fo:inline> &lt; <fo:inline font-family="monospace">term2</fo:inline>, or <fo:inline font-family="monospace">1</fo:inline> if <fo:inline font-family="monospace">term2</fo:inline> &lt;
          <fo:inline font-family="monospace">term1</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4798160">ETERM *erl_decode(bufp)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4799024">ETERM *erl_decode_buf(bufpp)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">unsigned char *bufp;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">unsigned char **bufpp;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl_decode()</fo:inline> and
          <fo:inline font-family="monospace">erl_decode_buf()</fo:inline> decode
          the contents of a buffer and return the corresponding
          Erlang term. <fo:inline font-family="monospace">erl_decode_buf()</fo:inline> provides a simple
          mechanism for dealing with several encoded terms stored
          consecutively in the buffer.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">bufp</fo:inline> is a pointer to a buffer containing one
              or more encoded Erlang terms.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">bufpp</fo:inline> is the address of a buffer pointer. The
              buffer contains one or more consecutively encoded Erlang terms.
              Following a successful call to
              <fo:inline font-family="monospace">erl_decode_buf()</fo:inline>, <fo:inline font-family="monospace">bufpp</fo:inline> is
              updated so that it points to the next encoded term.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl_decode()</fo:inline> returns an Erlang term
          corresponding to the contents of <fo:inline font-family="monospace">bufp</fo:inline> on success,
          otherwise <fo:inline font-family="monospace">NULL</fo:inline>. <fo:inline font-family="monospace">erl_decode_buf()</fo:inline>
          returns an Erlang
          term corresponding to the first of the consecutive terms in
          <fo:inline font-family="monospace">bufpp</fo:inline> and moves <fo:inline font-family="monospace">bufpp</fo:inline> forward
          to point to the
          next term in the buffer. On failure, each of the functions
          return <fo:inline font-family="monospace">NULL</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4812384">int erl_encode(term, bufp)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4813248">int erl_encode_buf(term, bufpp)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ETERM *term;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">unsigned char *bufp;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">unsigned char **bufpp;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl_encode()</fo:inline> and
          <fo:inline font-family="monospace">erl_encode_buf()</fo:inline> encode
          Erlang terms into external format for storage or transmission.
          <fo:inline font-family="monospace">erl_encode_buf()</fo:inline> provides a simple mechanism for
          encoding several terms consecutively in the same buffer.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">term</fo:inline> is an Erlang term to be encoded.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">bufp</fo:inline> is a pointer to a buffer containing one or
              more encoded Erlang terms.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">bufpp</fo:inline> is a pointer to a pointer to a buffer
              containing one or more consecutively encoded Erlang terms.
              Following a successful call to
              <fo:inline font-family="monospace">erl_encode_buf()</fo:inline>, <fo:inline font-family="monospace">bufpp</fo:inline> is updated so
              that it points to the
              position for the next encoded term.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These functions return the number of bytes written to buffer
	  on success, otherwise <fo:inline font-family="monospace">0</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that no bounds checking is done on the buffer. It is
          the caller's responsibility to ensure that the buffer is
          large enough to hold the encoded terms. You can either use a
          static buffer that is large enough to hold the terms you expect
          to need in your program, or use <fo:inline font-family="monospace">erl_term_len()</fo:inline>
          to determine the exact requirements for a given term.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following can help you estimate the buffer
          requirements for a term. Notice that this information is
          implementation-specific, and can change in future versions.
          If you are unsure, use <fo:inline font-family="monospace">erl_term_len()</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Erlang terms are encoded with a 1 byte tag that
          identifies the type of object, a 2- or 4-byte length field,
          and then the data itself. Specifically:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Tuples</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Need 5 bytes, plus the space for each element.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Lists</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Need 5 bytes, plus the space for each element, and 1
            more byte for the empty list at the end.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Strings and atoms</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Need 3 bytes, plus 1 byte for each character (the
            terminating 0 is not encoded). Really long strings (more
            than 64k characters) are encoded as lists. Atoms cannot
            contain more than 256 characters.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Integers</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Need 5 bytes.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Characters</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">(Integers &lt; 256) need 2 bytes.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Floating point numbers</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Need 32 bytes.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Pids</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Need 10 bytes, plus the space for the node name, which
            is an atom.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Ports and Refs</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Need 6 bytes, plus the space for the node name, which
            is an atom.</fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The total space required is the result calculated
          from the information above, plus 1 more byte for a 
          version identifier.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4838192">int erl_ext_size(bufp)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">unsigned char *bufp;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the number of elements in an encoded term.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4841792">unsigned char erl_ext_type(bufp)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">unsigned char *bufp;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Identifies and returns the type of Erlang term encoded
          in a buffer. It skips a trailing <fo:inline font-weight="bold">magic</fo:inline> identifier.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">0</fo:inline> if the type cannot be determined or
          one of:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ERL_INTEGER</fo:inline>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ERL_ATOM</fo:inline>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ERL_PID</fo:inline> (Erlang process identifier)
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ERL_PORT</fo:inline>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ERL_REF</fo:inline> (Erlang reference)
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ERL_EMPTY_LIST</fo:inline>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ERL_LIST</fo:inline>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ERL_TUPLE</fo:inline>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ERL_FLOAT</fo:inline>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ERL_BINARY</fo:inline>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ERL_FUNCTION</fo:inline>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4855680">unsigned char *erl_peek_ext(bufp, pos)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">unsigned char *bufp;</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">int pos;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is used for stepping over one or more
          encoded terms in a buffer, to directly access later term.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">bufp</fo:inline> is a pointer to a buffer containing one
            or more encoded Erlang terms.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">pos</fo:inline> indicates how many terms to step over in
            the buffer.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a pointer to a subterm that can be
          used in a later call to <fo:inline font-family="monospace">erl_decode()</fo:inline> to retrieve
          the term at that position. If there is no term, or
          <fo:inline font-family="monospace">pos</fo:inline> would exceed the size of the terms in the
          buffer, <fo:inline font-family="monospace">NULL</fo:inline> is returned.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4864048">int erl_term_len(t)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ETERM *t;</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Determines the buffer space that would be
          needed by <fo:inline font-family="monospace">t</fo:inline> if it were encoded into Erlang external
          format by <fo:inline font-family="monospace">erl_encode()</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the size in bytes.</fo:block>
      </fo:block>
  
<fo:block page-break-before="always" id="idp4876768" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">erl_call</fo:marker>erl_call</fo:block>Command</fo:block>
  <fo:block/>
  erl_call
  Call/start a distributed Erlang node.
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl_call</fo:inline> makes it possible to start and/or
      communicate with a distributed Erlang node. It is built upon the
      <fo:inline font-family="monospace">Erl_Interface</fo:inline> library as an example application.
      Its purpose is to use a Unix shell script to interact with a distributed
      Erlang node. It performs all communication with the Erlang
      <fo:inline font-weight="bold">rex server</fo:inline>, using the standard Erlang RPC facility. It does not
      require any special software to be run at the Erlang target node.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The main use is to either start a distributed Erlang node
      or to make an ordinary function call. However, it is also
      possible to pipe an Erlang module to <fo:inline font-family="monospace">erl_call</fo:inline> and have
      it compiled, or to pipe a sequence of Erlang expressions to be evaluated
      (similar to the Erlang shell).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Options, which cause <fo:inline font-family="monospace">stdin</fo:inline> to be read, can be used
      with advantage,
      as scripts from within (Unix) shell scripts. Another nice use
      of <fo:inline font-family="monospace">erl_call</fo:inline> could be from (HTTP) CGI-bin scripts.</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4883344">erl_call &lt;options&gt;</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts/calls Erlang.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each option flag is described below with its name, type, and
          meaning.</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-a [Mod [Fun [Args]]]]</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">(<fo:inline font-weight="bold">Optional.</fo:inline>) Applies the specified function
              and returns the result. <fo:inline font-family="monospace">Mod</fo:inline> must be specified.
              However, <fo:inline font-family="monospace">start</fo:inline> and <fo:inline font-family="monospace">[]</fo:inline> are assumed for unspecified
              <fo:inline font-family="monospace">Fun</fo:inline> and <fo:inline font-family="monospace">Args</fo:inline>, respectively.
              <fo:inline font-family="monospace">Args</fo:inline> is to be in the same format as for
              <fo:inline font-style="italic">
              <fo:inline font-family="monospace">erlang:apply/3</fo:inline></fo:inline> in <fo:inline font-family="monospace">ERTS</fo:inline>.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that this flag takes exactly one argument, so quoting
              can be necessary to group <fo:inline font-family="monospace">Mod</fo:inline>,
              <fo:inline font-family="monospace">Fun</fo:inline>, and <fo:inline font-family="monospace">Args</fo:inline> in a manner
              dependent on the behavior of your command shell.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-c Cookie</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">(<fo:inline font-weight="bold">Optional.</fo:inline>) Use this option to specify a certain cookie.
              If no cookie is specified, the <fo:inline font-family="monospace">~/.erlang.cookie</fo:inline>
              file is read and its content is used as cookie. The Erlang node
              we want to communicate with must have the same cookie.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-d</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">(<fo:inline font-weight="bold">Optional.</fo:inline>) Debug mode. This causes all I/O to be output
              to the <fo:inline font-family="monospace">~/.erl_call.out.Nodename</fo:inline> file, where
              <fo:inline font-family="monospace">Nodename</fo:inline>
              is the node name of the Erlang node in question.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-e</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">(<fo:inline font-weight="bold">Optional.</fo:inline>) Reads a sequence of Erlang expressions,
              separated by comma (,) and ended with a full stop (.), from
              <fo:inline font-family="monospace">stdin</fo:inline> until EOF (Control-D). Evaluates the
              expressions and returns the result from the last expression.
              Returns <fo:inline font-family="monospace">{ok,Result}</fo:inline> on success.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-h HiddenName</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">(<fo:inline font-weight="bold">Optional.</fo:inline>) Specifies the name of the hidden node
              that <fo:inline font-family="monospace">erl_call</fo:inline> represents.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-m</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">(<fo:inline font-weight="bold">Optional.</fo:inline>) Reads an Erlang module from
              <fo:inline font-family="monospace">stdin</fo:inline> and compiles it.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-n Node</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">(One of <fo:inline font-family="monospace">-n, -name, -sname</fo:inline> is required.)
              Has the same meaning as <fo:inline font-family="monospace">-name</fo:inline> and can still be
              used for backward compatibility reasons.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-name Node</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">(One of <fo:inline font-family="monospace">-n, -name, -sname</fo:inline> is required.)
              <fo:inline font-family="monospace">Node</fo:inline> is the name of the node to be
              started or communicated with. It is assumed that
              <fo:inline font-family="monospace">Node</fo:inline> is started with
              <fo:inline font-family="monospace">erl -name</fo:inline>, which means that fully
              qualified long node names are used. If option
              <fo:inline font-family="monospace">-s</fo:inline> is specified, an Erlang node will (if
              necessary) be started with <fo:inline font-family="monospace">erl -name</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-q</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">(<fo:inline font-weight="bold">Optional.</fo:inline>) Halts the Erlang node specified
              with switch <fo:inline font-family="monospace">-n</fo:inline>. This switch overrides switch <fo:inline font-family="monospace">-s</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-r</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">(<fo:inline font-weight="bold">Optional.</fo:inline>) Generates a random name of the hidden node
              that <fo:inline font-family="monospace">erl_call</fo:inline> represents.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-s</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">(<fo:inline font-weight="bold">Optional.</fo:inline>) Starts a distributed Erlang node if
              necessary. This means that in a sequence of calls, where
              '<fo:inline font-family="monospace">-s</fo:inline>' and '<fo:inline font-family="monospace">-n Node</fo:inline>' are
              constant, only the first call starts the Erlang node. This makes
              the rest of the communication very fast. This flag is currently
              only available on Unix-like platforms (Linux, Mac OS X, Solaris,
              and so on).</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-sname Node</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">(One of <fo:inline font-family="monospace">-n, -name, -sname</fo:inline> is required.)
              <fo:inline font-family="monospace">Node</fo:inline> is the name of the node to be started
              or communicated with. It is assumed that <fo:inline font-family="monospace">Node</fo:inline>
              is started with <fo:inline font-family="monospace">erl -sname</fo:inline>, which means that
              short node names are used. If option <fo:inline font-family="monospace">-s</fo:inline> is
              specified, an Erlang node is started (if necessary) with
              <fo:inline font-family="monospace">erl -sname</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-v</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">(<fo:inline font-weight="bold">Optional.</fo:inline>) Prints a lot of <fo:inline font-family="monospace">verbose</fo:inline>
              information. This is only useful for the developer and maintainer
              of <fo:inline font-family="monospace">erl_call</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-x ErlScript</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">(<fo:inline font-weight="bold">Optional.</fo:inline>) Specifies another name of the Erlang
              startup script to be used. If not specified, the standard
              <fo:inline font-family="monospace">erl</fo:inline> startup script is used.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>
  

  <fo:block id="idp4933408" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Examples</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To start an Erlang node and call <fo:inline font-family="monospace">erlang:time/0</fo:inline>:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
erl_call -s -a 'erlang time' -n madonna
{18,27,34}
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To terminate an Erlang node by calling
      <fo:inline font-family="monospace">erlang:halt/0</fo:inline>:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
erl_call -s -a 'erlang halt' -n madonna
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To apply with many arguments:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
erl_call -s -a 'lists seq [1,10]' -n madonna
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To evaluate some expressions
      (<fo:inline font-weight="bold">the input ends with EOF (Control-D)</fo:inline>):</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
erl_call -s -e -n madonna
statistics(runtime),
X=1,
Y=2,
{_,T}=statistics(runtime),
{X+Y,T}.
^D
{ok,{3,0}}
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To compile a module and run it (<fo:inline font-weight="bold">again, the input ends with EOF
      (Control-D)</fo:inline>):</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">(In the example, the output has been formatted afterwards.)</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
erl_call -s -m -a procnames -n madonna
-module(procnames).
-compile(export_all).
start() -&gt;
        P = processes(),
        F = fun(X) -&gt; {X,process_info(X,registered_name)} end,
        lists:map(F,[],P).
^D
[{&lt;madonna@chivas.du.etx.ericsson.se,0,0&gt;,
                  {registered_name,init}},
 {&lt;madonna@chivas.du.etx.ericsson.se,2,0&gt;,
                  {registered_name,erl_prim_loader}},
 {&lt;madonna@chivas.du.etx.ericsson.se,4,0&gt;,
                  {registered_name,error_logger}},
 {&lt;madonna@chivas.du.etx.ericsson.se,5,0&gt;,
                  {registered_name,application_controller}},
 {&lt;madonna@chivas.du.etx.ericsson.se,6,0&gt;,
                  {registered_name,kernel}},
 {&lt;madonna@chivas.du.etx.ericsson.se,7,0&gt;,
                  []},
 {&lt;madonna@chivas.du.etx.ericsson.se,8,0&gt;,
                  {registered_name,kernel_sup}},
 {&lt;madonna@chivas.du.etx.ericsson.se,9,0&gt;,
                  {registered_name,net_sup}},
 {&lt;madonna@chivas.du.etx.ericsson.se,10,0&gt;,
                  {registered_name,net_kernel}},
 {&lt;madonna@chivas.du.etx.ericsson.se,11,0&gt;,
                  []},
 {&lt;madonna@chivas.du.etx.ericsson.se,12,0&gt;,
                  {registered_name,global_name_server}},
 {&lt;madonna@chivas.du.etx.ericsson.se,13,0&gt;,
                  {registered_name,auth}},
 {&lt;madonna@chivas.du.etx.ericsson.se,14,0&gt;,
                  {registered_name,rex}},
 {&lt;madonna@chivas.du.etx.ericsson.se,15,0&gt;,
                  []},
 {&lt;madonna@chivas.du.etx.ericsson.se,16,0&gt;,
                  {registered_name,file_server}},
 {&lt;madonna@chivas.du.etx.ericsson.se,17,0&gt;,
                  {registered_name,code_server}},
 {&lt;madonna@chivas.du.etx.ericsson.se,20,0&gt;,
                  {registered_name,user}},
 {&lt;madonna@chivas.du.etx.ericsson.se,38,0&gt;,
                  []}]
    </fo:block>
  
</fo:flow>
  </fo:page-sequence>
</fo:root>
