<module name="erlang">
<type>
  <name>bitstring_list</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-bitstring_list">bitstring_list()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>maybe_improper_list(byte() | bitstring() | <seealso marker="#type-bitstring_list">bitstring_list()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>bitstring() | [])</typehead></typedecl>
</type>
<type>
  <name>cpu_topology</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-cpu_topology">cpu_topology()</marker> = [LevelEntry :: <seealso marker="#type-level_entry">level_entry()</seealso>] | undefined</typehead></typedecl>
  <anno>LevelEntry</anno>
</type>
<type>
  <name>deprecated_time_unit</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-deprecated_time_unit">deprecated_time_unit()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>seconds | milli_seconds | micro_seconds | nano_seconds</typehead></typedecl>
</type>
<type>
  <name>dst</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-dst">dst()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>pid() |<br/><nbsp/><nbsp/><nbsp/><nbsp/>port() |<br/><nbsp/><nbsp/><nbsp/><nbsp/>(RegName :: atom()) |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{RegName :: atom(), Node :: node()}</typehead></typedecl>
  <anno>Node</anno>
  <anno>RegName</anno>
</type>
<type>
  <name>ext_binary</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-ext_binary">ext_binary()</marker> = binary()</typehead></typedecl>
</type>
<type>
  <name>fun_info_item</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-fun_info_item">fun_info_item()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>arity |<br/><nbsp/><nbsp/><nbsp/><nbsp/>env |<br/><nbsp/><nbsp/><nbsp/><nbsp/>index |<br/><nbsp/><nbsp/><nbsp/><nbsp/>name |<br/><nbsp/><nbsp/><nbsp/><nbsp/>module |<br/><nbsp/><nbsp/><nbsp/><nbsp/>new_index |<br/><nbsp/><nbsp/><nbsp/><nbsp/>new_uniq |<br/><nbsp/><nbsp/><nbsp/><nbsp/>pid |<br/><nbsp/><nbsp/><nbsp/><nbsp/>type |<br/><nbsp/><nbsp/><nbsp/><nbsp/>uniq</typehead></typedecl>
</type>
<type>
  <name>info_list</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-info_list">info_list()</marker> = []</typehead></typedecl>
</type>
<type>
  <name>level_entry</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-level_entry">level_entry()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{LevelTag :: <seealso marker="#type-level_tag">level_tag()</seealso>, SubLevel :: <seealso marker="#type-sub_level">sub_level()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{LevelTag :: <seealso marker="#type-level_tag">level_tag()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>InfoList :: <seealso marker="#type-info_list">info_list()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>SubLevel :: <seealso marker="#type-sub_level">sub_level()</seealso>}</typehead></typedecl>
  <anno>InfoList</anno>
  <anno>LevelTag</anno>
  <anno>SubLevel</anno>
</type>
<type>
  <name>level_tag</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-level_tag">level_tag()</marker> = core | node | processor | thread</typehead></typedecl>
</type>
<type>
  <name>match_variable</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-match_variable">match_variable()</marker> = atom()</typehead></typedecl>
</type>
<type>
  <name>max_heap_size</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-max_heap_size">max_heap_size()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>integer() &gt;= 0 |<br/><nbsp/><nbsp/><nbsp/><nbsp/>#{size =&gt; integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>kill =&gt; boolean(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>error_logger =&gt; boolean()}</typehead></typedecl>
</type>
<type>
  <name>memory_type</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-memory_type">memory_type()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>total |<br/><nbsp/><nbsp/><nbsp/><nbsp/>processes |<br/><nbsp/><nbsp/><nbsp/><nbsp/>processes_used |<br/><nbsp/><nbsp/><nbsp/><nbsp/>system |<br/><nbsp/><nbsp/><nbsp/><nbsp/>atom |<br/><nbsp/><nbsp/><nbsp/><nbsp/>atom_used |<br/><nbsp/><nbsp/><nbsp/><nbsp/>binary |<br/><nbsp/><nbsp/><nbsp/><nbsp/>code |<br/><nbsp/><nbsp/><nbsp/><nbsp/>ets |<br/><nbsp/><nbsp/><nbsp/><nbsp/>low |<br/><nbsp/><nbsp/><nbsp/><nbsp/>maximum</typehead></typedecl>
</type>
<type>
  <name>message_queue_data</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-message_queue_data">message_queue_data()</marker> = off_heap | on_heap</typehead></typedecl>
</type>
<type>
  <name>module_info_key</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-module_info_key">module_info_key()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>attributes |<br/><nbsp/><nbsp/><nbsp/><nbsp/>compile |<br/><nbsp/><nbsp/><nbsp/><nbsp/>exports |<br/><nbsp/><nbsp/><nbsp/><nbsp/>functions |<br/><nbsp/><nbsp/><nbsp/><nbsp/>md5 |<br/><nbsp/><nbsp/><nbsp/><nbsp/>module |<br/><nbsp/><nbsp/><nbsp/><nbsp/>native |<br/><nbsp/><nbsp/><nbsp/><nbsp/>native_addresses</typehead></typedecl>
</type>
<type>
  <name>monitor_port_identifier</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-monitor_port_identifier">monitor_port_identifier()</marker> = port() | <seealso marker="#type-registered_name">registered_name()</seealso></typehead></typedecl>
</type>
<type>
  <name>monitor_process_identifier</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-monitor_process_identifier">monitor_process_identifier()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>pid() | <seealso marker="#type-registered_process_identifier">registered_process_identifier()</seealso></typehead></typedecl>
</type>
<type>
  <name>prepared_code</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-prepared_code">prepared_code()</marker></typehead></typedecl>
</type>
<type>
  <name>priority_level</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-priority_level">priority_level()</marker> = low | normal | high | max</typehead></typedecl>
</type>
<type>
  <name>process_info_item</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-process_info_item">process_info_item()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>backtrace |<br/><nbsp/><nbsp/><nbsp/><nbsp/>binary |<br/><nbsp/><nbsp/><nbsp/><nbsp/>catchlevel |<br/><nbsp/><nbsp/><nbsp/><nbsp/>current_function |<br/><nbsp/><nbsp/><nbsp/><nbsp/>current_location |<br/><nbsp/><nbsp/><nbsp/><nbsp/>current_stacktrace |<br/><nbsp/><nbsp/><nbsp/><nbsp/>dictionary |<br/><nbsp/><nbsp/><nbsp/><nbsp/>error_handler |<br/><nbsp/><nbsp/><nbsp/><nbsp/>garbage_collection |<br/><nbsp/><nbsp/><nbsp/><nbsp/>garbage_collection_info |<br/><nbsp/><nbsp/><nbsp/><nbsp/>group_leader |<br/><nbsp/><nbsp/><nbsp/><nbsp/>heap_size |<br/><nbsp/><nbsp/><nbsp/><nbsp/>initial_call |<br/><nbsp/><nbsp/><nbsp/><nbsp/>links |<br/><nbsp/><nbsp/><nbsp/><nbsp/>last_calls |<br/><nbsp/><nbsp/><nbsp/><nbsp/>memory |<br/><nbsp/><nbsp/><nbsp/><nbsp/>message_queue_len |<br/><nbsp/><nbsp/><nbsp/><nbsp/>messages |<br/><nbsp/><nbsp/><nbsp/><nbsp/>min_heap_size |<br/><nbsp/><nbsp/><nbsp/><nbsp/>min_bin_vheap_size |<br/><nbsp/><nbsp/><nbsp/><nbsp/>monitored_by |<br/><nbsp/><nbsp/><nbsp/><nbsp/>monitors |<br/><nbsp/><nbsp/><nbsp/><nbsp/>message_queue_data |<br/><nbsp/><nbsp/><nbsp/><nbsp/>priority |<br/><nbsp/><nbsp/><nbsp/><nbsp/>reductions |<br/><nbsp/><nbsp/><nbsp/><nbsp/>registered_name |<br/><nbsp/><nbsp/><nbsp/><nbsp/>sequential_trace_token |<br/><nbsp/><nbsp/><nbsp/><nbsp/>stack_size |<br/><nbsp/><nbsp/><nbsp/><nbsp/>status |<br/><nbsp/><nbsp/><nbsp/><nbsp/>suspending |<br/><nbsp/><nbsp/><nbsp/><nbsp/>total_heap_size |<br/><nbsp/><nbsp/><nbsp/><nbsp/>trace |<br/><nbsp/><nbsp/><nbsp/><nbsp/>trap_exit</typehead></typedecl>
</type>
<type>
  <name>process_info_result_item</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-process_info_result_item">process_info_result_item()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{backtrace, Bin :: binary()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{binary,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>BinInfo ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer() &gt;= 0}]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{catchlevel, CatchLevel :: integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{current_function,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{Module :: module(), Function :: atom(), Arity :: arity()}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{current_location,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{Module :: module(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Function :: atom(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Arity :: arity(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Location ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{file, Filename :: string()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{line, Line :: integer() &gt;= 1}]}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{current_stacktrace, Stack :: [<seealso marker="#type-stack_item">stack_item()</seealso>]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{dictionary, Dictionary :: [{Key :: term(), Value :: term()}]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{error_handler, Module :: module()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{garbage_collection, GCInfo :: [{atom(), integer() &gt;= 0}]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{garbage_collection_info,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>GCInfo :: [{atom(), integer() &gt;= 0}]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{group_leader, GroupLeader :: pid()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{heap_size, Size :: integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{initial_call, mfa()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{links, PidsAndPorts :: [pid() | port()]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{last_calls, false | (Calls :: [mfa()])} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{memory, Size :: integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{message_queue_len, MessageQueueLen :: integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{messages, MessageQueue :: [term()]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{min_heap_size, MinHeapSize :: integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{min_bin_vheap_size, MinBinVHeapSize :: integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{max_heap_size, MaxHeapSize :: <seealso marker="#type-max_heap_size">max_heap_size()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{monitored_by, Pids :: [pid()]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{monitors,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Monitors ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{process | port,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Pid ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>pid() |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>port() |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{RegName :: atom(), Node :: node()}}]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{message_queue_data, MQD :: <seealso marker="#type-message_queue_data">message_queue_data()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{priority, Level :: <seealso marker="#type-priority_level">priority_level()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{reductions, Number :: integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{registered_name, [] | (Atom :: atom())} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{sequential_trace_token,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[] | (SequentialTraceToken :: term())} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{stack_size, Size :: integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{status,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Status ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>exiting |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>garbage_collecting |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>waiting |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>running |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>runnable |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>suspended} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{suspending,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>SuspendeeList ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{Suspendee :: pid(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ActiveSuspendCount :: integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>OutstandingSuspendCount :: integer() &gt;= 0}]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{total_heap_size, Size :: integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{trace, InternalTraceFlags :: integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{trap_exit, Boolean :: boolean()}</typehead></typedecl>
  <anno>ActiveSuspendCount</anno>
  <anno>Arity</anno>
  <anno>Atom</anno>
  <anno>Bin</anno>
  <anno>BinInfo</anno>
  <anno>Boolean</anno>
  <anno>Calls</anno>
  <anno>CatchLevel</anno>
  <anno>Dictionary</anno>
  <anno>Filename</anno>
  <anno>Function</anno>
  <anno>GCInfo</anno>
  <anno>GroupLeader</anno>
  <anno>InternalTraceFlags</anno>
  <anno>Key</anno>
  <anno>Level</anno>
  <anno>Line</anno>
  <anno>Location</anno>
  <anno>MQD</anno>
  <anno>MaxHeapSize</anno>
  <anno>MessageQueue</anno>
  <anno>MessageQueueLen</anno>
  <anno>MinBinVHeapSize</anno>
  <anno>MinHeapSize</anno>
  <anno>Module</anno>
  <anno>Monitors</anno>
  <anno>Node</anno>
  <anno>Number</anno>
  <anno>OutstandingSuspendCount</anno>
  <anno>Pid</anno>
  <anno>Pids</anno>
  <anno>PidsAndPorts</anno>
  <anno>RegName</anno>
  <anno>SequentialTraceToken</anno>
  <anno>Size</anno>
  <anno>Stack</anno>
  <anno>Status</anno>
  <anno>Suspendee</anno>
  <anno>SuspendeeList</anno>
  <anno>Value</anno>
</type>
<type>
  <name>raise_stacktrace</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-raise_stacktrace">raise_stacktrace()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[{module(), atom(), arity() | [term()]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{function(), [term()]}] |<br/><nbsp/><nbsp/><nbsp/><nbsp/>[{module(), atom(), arity() | [term()], [{atom(), term()}]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{function(), [term()], [{atom(), term()}]}]</typehead></typedecl>
</type>
<type>
  <name>registered_name</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-registered_name">registered_name()</marker> = atom()</typehead></typedecl>
</type>
<type>
  <name>registered_process_identifier</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-registered_process_identifier">registered_process_identifier()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-registered_name">registered_name()</seealso> | {<seealso marker="#type-registered_name">registered_name()</seealso>, node()}</typehead></typedecl>
</type>
<type>
  <name>scheduler_bind_type</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-scheduler_bind_type">scheduler_bind_type()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>no_node_processor_spread |<br/><nbsp/><nbsp/><nbsp/><nbsp/>no_node_thread_spread |<br/><nbsp/><nbsp/><nbsp/><nbsp/>no_spread |<br/><nbsp/><nbsp/><nbsp/><nbsp/>processor_spread |<br/><nbsp/><nbsp/><nbsp/><nbsp/>spread |<br/><nbsp/><nbsp/><nbsp/><nbsp/>thread_spread |<br/><nbsp/><nbsp/><nbsp/><nbsp/>thread_no_node_processor_spread |<br/><nbsp/><nbsp/><nbsp/><nbsp/>unbound</typehead></typedecl>
</type>
<type>
  <name>seq_trace_info</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-seq_trace_info">seq_trace_info()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>send |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'receive' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>print |<br/><nbsp/><nbsp/><nbsp/><nbsp/>timestamp |<br/><nbsp/><nbsp/><nbsp/><nbsp/>monotonic_timestamp |<br/><nbsp/><nbsp/><nbsp/><nbsp/>strict_monotonic_timestamp |<br/><nbsp/><nbsp/><nbsp/><nbsp/>label |<br/><nbsp/><nbsp/><nbsp/><nbsp/>serial</typehead></typedecl>
</type>
<type>
  <name>seq_trace_info_returns</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-seq_trace_info_returns">seq_trace_info_returns()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{<seealso marker="#type-seq_trace_info">seq_trace_info()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer() &gt;= 0 |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>boolean() |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{integer() &gt;= 0, integer() &gt;= 0}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>[]</typehead></typedecl>
</type>
<type>
  <name>spawn_opt_option</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-spawn_opt_option">spawn_opt_option()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>link |<br/><nbsp/><nbsp/><nbsp/><nbsp/>monitor |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{priority, Level :: <seealso marker="#type-priority_level">priority_level()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{fullsweep_after, Number :: integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{min_heap_size, Size :: integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{min_bin_vheap_size, VSize :: integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{max_heap_size, Size :: <seealso marker="#type-max_heap_size">max_heap_size()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{message_queue_data, MQD :: <seealso marker="#type-message_queue_data">message_queue_data()</seealso>}</typehead></typedecl>
  <anno>Level</anno>
  <anno>MQD</anno>
  <anno>Number</anno>
  <anno>Size</anno>
  <anno>VSize</anno>
</type>
<type>
  <name>stack_item</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-stack_item">stack_item()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{Module :: module(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Function :: atom(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Arity :: arity() | (Args :: [term()]),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Location ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{file, Filename :: string()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{line, Line :: integer() &gt;= 1}]}</typehead></typedecl>
  <anno>Args</anno>
  <anno>Arity</anno>
  <anno>Filename</anno>
  <anno>Function</anno>
  <anno>Line</anno>
  <anno>Location</anno>
  <anno>Module</anno>
</type>
<type>
  <name>sub_level</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-sub_level">sub_level()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[LevelEntry :: <seealso marker="#type-level_entry">level_entry()</seealso>] |<br/><nbsp/><nbsp/><nbsp/><nbsp/>(LogicalCpuId :: {logical, integer() &gt;= 0})</typehead></typedecl>
  <anno>LevelEntry</anno>
  <anno>LogicalCpuId</anno>
</type>
<type>
  <name>system_monitor_option</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-system_monitor_option">system_monitor_option()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>busy_port |<br/><nbsp/><nbsp/><nbsp/><nbsp/>busy_dist_port |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{long_gc, integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{long_schedule, integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{large_heap, integer() &gt;= 0}</typehead></typedecl>
</type>
<type>
  <name>system_profile_option</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-system_profile_option">system_profile_option()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>exclusive |<br/><nbsp/><nbsp/><nbsp/><nbsp/>runnable_ports |<br/><nbsp/><nbsp/><nbsp/><nbsp/>runnable_procs |<br/><nbsp/><nbsp/><nbsp/><nbsp/>scheduler |<br/><nbsp/><nbsp/><nbsp/><nbsp/>timestamp |<br/><nbsp/><nbsp/><nbsp/><nbsp/>monotonic_timestamp |<br/><nbsp/><nbsp/><nbsp/><nbsp/>strict_monotonic_timestamp</typehead></typedecl>
</type>
<type>
  <name>time_unit</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-time_unit">time_unit()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>integer() &gt;= 1 |<br/><nbsp/><nbsp/><nbsp/><nbsp/>second |<br/><nbsp/><nbsp/><nbsp/><nbsp/>millisecond |<br/><nbsp/><nbsp/><nbsp/><nbsp/>microsecond |<br/><nbsp/><nbsp/><nbsp/><nbsp/>nanosecond |<br/><nbsp/><nbsp/><nbsp/><nbsp/>native |<br/><nbsp/><nbsp/><nbsp/><nbsp/>perf_counter |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-deprecated_time_unit">deprecated_time_unit()</seealso></typehead></typedecl>
</type>
<type>
  <name>timestamp</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-timestamp">timestamp()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{MegaSecs :: integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Secs :: integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>MicroSecs :: integer() &gt;= 0}</typehead></typedecl>
  <anno>MegaSecs</anno>
  <anno>MicroSecs</anno>
  <anno>Secs</anno>
</type>
<type>
  <name>trace_flag</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-trace_flag">trace_flag()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>all |<br/><nbsp/><nbsp/><nbsp/><nbsp/>send |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'receive' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>procs |<br/><nbsp/><nbsp/><nbsp/><nbsp/>ports |<br/><nbsp/><nbsp/><nbsp/><nbsp/>call |<br/><nbsp/><nbsp/><nbsp/><nbsp/>arity |<br/><nbsp/><nbsp/><nbsp/><nbsp/>return_to |<br/><nbsp/><nbsp/><nbsp/><nbsp/>silent |<br/><nbsp/><nbsp/><nbsp/><nbsp/>running |<br/><nbsp/><nbsp/><nbsp/><nbsp/>exiting |<br/><nbsp/><nbsp/><nbsp/><nbsp/>running_procs |<br/><nbsp/><nbsp/><nbsp/><nbsp/>running_ports |<br/><nbsp/><nbsp/><nbsp/><nbsp/>garbage_collection |<br/><nbsp/><nbsp/><nbsp/><nbsp/>timestamp |<br/><nbsp/><nbsp/><nbsp/><nbsp/>cpu_timestamp |<br/><nbsp/><nbsp/><nbsp/><nbsp/>monotonic_timestamp |<br/><nbsp/><nbsp/><nbsp/><nbsp/>strict_monotonic_timestamp |<br/><nbsp/><nbsp/><nbsp/><nbsp/>set_on_spawn |<br/><nbsp/><nbsp/><nbsp/><nbsp/>set_on_first_spawn |<br/><nbsp/><nbsp/><nbsp/><nbsp/>set_on_link |<br/><nbsp/><nbsp/><nbsp/><nbsp/>set_on_first_link |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{tracer, pid() | port()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{tracer, module(), term()}</typehead></typedecl>
</type>
<type>
  <name>trace_info_flag</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-trace_info_flag">trace_info_flag()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>send |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'receive' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>set_on_spawn |<br/><nbsp/><nbsp/><nbsp/><nbsp/>call |<br/><nbsp/><nbsp/><nbsp/><nbsp/>return_to |<br/><nbsp/><nbsp/><nbsp/><nbsp/>procs |<br/><nbsp/><nbsp/><nbsp/><nbsp/>set_on_first_spawn |<br/><nbsp/><nbsp/><nbsp/><nbsp/>set_on_link |<br/><nbsp/><nbsp/><nbsp/><nbsp/>running |<br/><nbsp/><nbsp/><nbsp/><nbsp/>garbage_collection |<br/><nbsp/><nbsp/><nbsp/><nbsp/>timestamp |<br/><nbsp/><nbsp/><nbsp/><nbsp/>monotonic_timestamp |<br/><nbsp/><nbsp/><nbsp/><nbsp/>strict_monotonic_timestamp |<br/><nbsp/><nbsp/><nbsp/><nbsp/>arity</typehead></typedecl>
</type>
<type>
  <name>trace_info_item_result</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-trace_info_item_result">trace_info_item_result()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{traced, global | local | false | undefined} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{match_spec, <seealso marker="#type-trace_match_spec">trace_match_spec()</seealso> | false | undefined} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{meta, pid() | port() | false | undefined | []} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{meta, module(), term()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{meta_match_spec, <seealso marker="#type-trace_match_spec">trace_match_spec()</seealso> | false | undefined} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{call_count, integer() &gt;= 0 | boolean() | undefined} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{call_time,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{pid(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer() &gt;= 0}] |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>boolean() |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>undefined}</typehead></typedecl>
</type>
<type>
  <name>trace_info_return</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-trace_info_return">trace_info_return()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>undefined |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{flags, [<seealso marker="#type-trace_info_flag">trace_info_flag()</seealso>]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{tracer, pid() | port() | []} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{tracer, module(), term()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-trace_info_item_result">trace_info_item_result()</seealso> |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{all, [<seealso marker="#type-trace_info_item_result">trace_info_item_result()</seealso>] | false | undefined}</typehead></typedecl>
</type>
<type>
  <name>trace_match_spec</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-trace_match_spec">trace_match_spec()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[{[term()] | '_' | <seealso marker="#type-match_variable">match_variable()</seealso>, [term()], [term()]}]</typehead></typedecl>
</type>
<type>
  <name>trace_pattern_flag</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-trace_pattern_flag">trace_pattern_flag()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>global |<br/><nbsp/><nbsp/><nbsp/><nbsp/>local |<br/><nbsp/><nbsp/><nbsp/><nbsp/>meta |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{meta, Pid :: pid()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{meta, TracerModule :: module(), TracerState :: term()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>call_count |<br/><nbsp/><nbsp/><nbsp/><nbsp/>call_time</typehead></typedecl>
  <anno>Pid</anno>
  <anno>TracerModule</anno>
  <anno>TracerState</anno>
</type>
<type>
  <name>trace_pattern_mfa</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-trace_pattern_mfa">trace_pattern_mfa()</marker> = {atom(), atom(), arity() | '_'} | on_load</typehead></typedecl>
</type>
<spec>
  <name>abs</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>abs(Float) -&gt; float()</head>
      <guard>
        <subtype><typename>Float</typename><string>Float = float()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Float</anno>
</spec>
<spec>
  <name>abs</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>abs(Int) -&gt; integer() &gt;= 0</head>
      <guard>
        <subtype><typename>Int</typename><string>Int = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Int</anno>
</spec>
<spec>
  <name>adler32</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:adler32(Data) -&gt; integer() &gt;= 0</head>
      <guard>
        <subtype><typename>Data</typename><string>Data = iodata()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
</spec>
<spec>
  <name>adler32</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:adler32(OldAdler, Data) -&gt; integer() &gt;= 0</head>
      <guard>
        <subtype><typename>OldAdler</typename><string>OldAdler = integer() &gt;= 0</string></subtype>
        <subtype><typename>Data</typename><string>Data = iodata()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>OldAdler</anno>
</spec>
<spec>
  <name>adler32_combine</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:adler32_combine(FirstAdler, SecondAdler, SecondSize) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer() &gt;= 0</head>
      <guard>
        <subtype><typename>FirstAdler</typename><string>FirstAdler = SecondAdler = SecondSize = integer() &gt;= 0</string></subtype>
        <subtype><typename>SecondAdler</typename><string></string></subtype>
        <subtype><typename>SecondSize</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>FirstAdler</anno>
  <anno>SecondAdler</anno>
  <anno>SecondSize</anno>
</spec>
<spec>
  <name>alloc_info</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>alloc_sizes</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>append</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:append(List, Tail) -&gt; maybe_improper_list()</head>
      <guard>
        <subtype><typename>List</typename><string>List = [term()]</string></subtype>
        <subtype><typename>Tail</typename><string>Tail = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>List</anno>
  <anno>Tail</anno>
</spec>
<spec>
  <name>append_element</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:append_element(Tuple1, Term) -&gt; Tuple2</head>
      <guard>
        <subtype><typename>Tuple1</typename><string>Tuple1 = Tuple2 = tuple()</string></subtype>
        <subtype><typename>Tuple2</typename><string/></subtype>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
  <anno>Tuple1</anno>
  <anno>Tuple2</anno>
</spec>
<spec>
  <name>apply</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>apply(Fun, Args) -&gt; term()</head>
      <guard>
        <subtype><typename>Fun</typename><string>Fun = function()</string></subtype>
        <subtype><typename>Args</typename><string>Args = [term()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Fun</anno>
</spec>
<spec>
  <name>apply</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>apply(Module, Function, Args) -&gt; term()</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>Function</typename><string>Function = atom()</string></subtype>
        <subtype><typename>Args</typename><string>Args = [term()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
</spec>
<spec>
  <name>atom_to_binary</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>atom_to_binary(Atom, Encoding) -&gt; binary()</head>
      <guard>
        <subtype><typename>Atom</typename><string>Atom = atom()</string></subtype>
        <subtype><typename>Encoding</typename><string>Encoding = latin1 | unicode | utf8</string></subtype>
      </guard></clause>
  </contract>
  <anno>Atom</anno>
  <anno>Encoding</anno>
</spec>
<spec>
  <name>atom_to_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>atom_to_list(Atom) -&gt; string()</head>
      <guard>
        <subtype><typename>Atom</typename><string>Atom = atom()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Atom</anno>
</spec>
<spec>
  <name>await_proc_exit</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:await_proc_exit(Proc :: <seealso marker="#type-dst">dst()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Op :: apply | data | reason,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Data :: term()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>term()</head></clause>
  </contract>
  <anno>Data</anno>
  <anno>Op</anno>
  <anno>Proc</anno>
</spec>
<spec>
  <name>await_sched_wall_time_modifications</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:await_sched_wall_time_modifications(Ref, Result) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>boolean()</head>
      <guard>
        <subtype><typename>Ref</typename><string>Ref = reference()</string></subtype>
        <subtype><typename>Result</typename><string>Result = boolean()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Ref</anno>
  <anno>Result</anno>
</spec>
<spec>
  <name>binary_part</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>binary_part(Subject, PosLen) -&gt; binary()</head>
      <guard>
        <subtype><typename>Subject</typename><string>Subject = binary()</string></subtype>
        <subtype><typename>PosLen</typename><string>PosLen = {Start :: integer() &gt;= 0, Length :: integer()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Length</anno>
  <anno>PosLen</anno>
  <anno>Start</anno>
  <anno>Subject</anno>
</spec>
<spec>
  <name>binary_part</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>binary_part(Subject, Start, Length) -&gt; binary()</head>
      <guard>
        <subtype><typename>Subject</typename><string>Subject = binary()</string></subtype>
        <subtype><typename>Start</typename><string>Start = integer() &gt;= 0</string></subtype>
        <subtype><typename>Length</typename><string>Length = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Length</anno>
  <anno>Start</anno>
  <anno>Subject</anno>
</spec>
<spec>
  <name>binary_to_atom</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>binary_to_atom(Binary, Encoding) -&gt; atom()</head>
      <guard>
        <subtype><typename>Binary</typename><string>Binary = binary()</string></subtype>
        <subtype><typename>Encoding</typename><string>Encoding = latin1 | unicode | utf8</string></subtype>
      </guard></clause>
  </contract>
  <anno>Binary</anno>
  <anno>Encoding</anno>
</spec>
<spec>
  <name>binary_to_existing_atom</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>binary_to_existing_atom(Binary, Encoding) -&gt; atom()</head>
      <guard>
        <subtype><typename>Binary</typename><string>Binary = binary()</string></subtype>
        <subtype><typename>Encoding</typename><string>Encoding = latin1 | unicode | utf8</string></subtype>
      </guard></clause>
  </contract>
  <anno>Binary</anno>
  <anno>Encoding</anno>
</spec>
<spec>
  <name>binary_to_float</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>binary_to_float(Binary) -&gt; float()</head>
      <guard>
        <subtype><typename>Binary</typename><string>Binary = binary()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Binary</anno>
</spec>
<spec>
  <name>binary_to_integer</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>binary_to_integer(Binary) -&gt; integer()</head>
      <guard>
        <subtype><typename>Binary</typename><string>Binary = binary()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Binary</anno>
</spec>
<spec>
  <name>binary_to_integer</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>binary_to_integer(Binary, Base) -&gt; integer()</head>
      <guard>
        <subtype><typename>Binary</typename><string>Binary = binary()</string></subtype>
        <subtype><typename>Base</typename><string>Base = 2..36</string></subtype>
      </guard></clause>
  </contract>
  <anno>Base</anno>
  <anno>Binary</anno>
</spec>
<spec>
  <name>binary_to_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>binary_to_list(Binary) -&gt; [byte()]</head>
      <guard>
        <subtype><typename>Binary</typename><string>Binary = binary()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Binary</anno>
</spec>
<spec>
  <name>binary_to_list</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>binary_to_list(Binary, Start, Stop) -&gt; [byte()]</head>
      <guard>
        <subtype><typename>Binary</typename><string>Binary = binary()</string></subtype>
        <subtype><typename>Start</typename><string>Start = Stop = integer() &gt;= 1</string></subtype>
        <subtype><typename>Stop</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Binary</anno>
  <anno>Start</anno>
  <anno>Stop</anno>
</spec>
<spec>
  <name>binary_to_term</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>binary_to_term(Binary) -&gt; term()</head>
      <guard>
        <subtype><typename>Binary</typename><string>Binary = <seealso marker="#type-ext_binary">ext_binary()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Binary</anno>
</spec>
<spec>
  <name>binary_to_term</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>binary_to_term(Binary, Opts) -&gt; term()</head>
      <guard>
        <subtype><typename>Binary</typename><string>Binary = <seealso marker="#type-ext_binary">ext_binary()</seealso></string></subtype>
        <subtype><typename>Opts</typename><string>Opts = [safe]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Binary</anno>
  <anno>Opts</anno>
</spec>
<spec>
  <name>bit_size</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>bit_size(Bitstring) -&gt; integer() &gt;= 0</head>
      <guard>
        <subtype><typename>Bitstring</typename><string>Bitstring = bitstring()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Bitstring</anno>
</spec>
<spec>
  <name>bitsize</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>bitsize(P1) -&gt; integer() &gt;= 0</head>
      <guard>
        <subtype><typename>P1</typename><string>P1 = bitstring()</string></subtype>
      </guard></clause>
  </contract>
  <anno>P1</anno>
</spec>
<spec>
  <name>bitstring_to_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>bitstring_to_list(Bitstring) -&gt; [byte() | bitstring()]</head>
      <guard>
        <subtype><typename>Bitstring</typename><string>Bitstring = bitstring()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Bitstring</anno>
</spec>
<spec>
  <name>bump_reductions</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:bump_reductions(Reductions) -&gt; true</head>
      <guard>
        <subtype><typename>Reductions</typename><string>Reductions = integer() &gt;= 1</string></subtype>
      </guard></clause>
  </contract>
  <anno>Reductions</anno>
</spec>
<spec>
  <name>byte_size</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>byte_size(Bitstring) -&gt; integer() &gt;= 0</head>
      <guard>
        <subtype><typename>Bitstring</typename><string>Bitstring = bitstring()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Bitstring</anno>
</spec>
<spec>
  <name>call_on_load_function</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:call_on_load_function(P1) -&gt; term()</head>
      <guard>
        <subtype><typename>P1</typename><string>P1 = atom()</string></subtype>
      </guard></clause>
  </contract>
  <anno>P1</anno>
</spec>
<spec>
  <name>cancel_timer</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:cancel_timer(TimerRef) -&gt; Result</head>
      <guard>
        <subtype><typename>TimerRef</typename><string>TimerRef = reference()</string></subtype>
        <subtype><typename>Time</typename><string>Time = integer() &gt;= 0</string></subtype>
        <subtype><typename>Result</typename><string>Result = Time | false</string></subtype>
      </guard></clause>
  </contract>
  <anno>Result</anno>
  <anno>Time</anno>
  <anno>TimerRef</anno>
</spec>
<spec>
  <name>cancel_timer</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:cancel_timer(TimerRef, Options) -&gt; Result | ok</head>
      <guard>
        <subtype><typename>TimerRef</typename><string>TimerRef = reference()</string></subtype>
        <subtype><typename>Async</typename><string>Async = Info = boolean()</string></subtype>
        <subtype><typename>Info</typename><string/></subtype>
        <subtype><typename>Option</typename><string>Option = {async, Async} | {info, Info}</string></subtype>
        <subtype><typename>Options</typename><string>Options = [Option]</string></subtype>
        <subtype><typename>Time</typename><string>Time = integer() &gt;= 0</string></subtype>
        <subtype><typename>Result</typename><string>Result = Time | false</string></subtype>
      </guard></clause>
  </contract>
  <anno>Async</anno>
  <anno>Info</anno>
  <anno>Option</anno>
  <anno>Options</anno>
  <anno>Result</anno>
  <anno>Time</anno>
  <anno>TimerRef</anno>
</spec>
<spec>
  <name>ceil</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>ceil(Number) -&gt; integer()</head>
      <guard>
        <subtype><typename>Number</typename><string>Number = number()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Number</anno>
</spec>
<spec>
  <name>check_old_code</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>check_old_code(Module) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Module</anno>
</spec>
<spec>
  <name>check_process_code</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>check_process_code(Pid, Module) -&gt; CheckResult</head>
      <guard>
        <subtype><typename>Pid</typename><string>Pid = pid()</string></subtype>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>CheckResult</typename><string>CheckResult = boolean()</string></subtype>
      </guard></clause>
  </contract>
  <anno>CheckResult</anno>
  <anno>Module</anno>
  <anno>Pid</anno>
</spec>
<spec>
  <name>check_process_code</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>check_process_code(Pid, Module, OptionList) -&gt; CheckResult | async</head>
      <guard>
        <subtype><typename>Pid</typename><string>Pid = pid()</string></subtype>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>RequestId</typename><string>RequestId = term()</string></subtype>
        <subtype><typename>Option</typename><string>Option = {async, RequestId} | {allow_gc, boolean()}</string></subtype>
        <subtype><typename>OptionList</typename><string>OptionList = [Option]</string></subtype>
        <subtype><typename>CheckResult</typename><string>CheckResult = boolean() | aborted</string></subtype>
      </guard></clause>
  </contract>
  <anno>CheckResult</anno>
  <anno>Module</anno>
  <anno>Option</anno>
  <anno>OptionList</anno>
  <anno>Pid</anno>
  <anno>RequestId</anno>
</spec>
<spec>
  <name>convert_time_unit</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:convert_time_unit(Time, FromUnit, ToUnit) -&gt; ConvertedTime</head>
      <guard>
        <subtype><typename>Time</typename><string>Time = ConvertedTime = integer()</string></subtype>
        <subtype><typename>ConvertedTime</typename><string/></subtype>
        <subtype><typename>FromUnit</typename><string>FromUnit = ToUnit = <seealso marker="#type-time_unit">time_unit()</seealso></string></subtype>
        <subtype><typename>ToUnit</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>ConvertedTime</anno>
  <anno>FromUnit</anno>
  <anno>Time</anno>
  <anno>ToUnit</anno>
</spec>
<spec>
  <name>crasher</name>
  <arity>6</arity>
  <contract/>
</spec>
<spec>
  <name>crc32</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:crc32(Data) -&gt; integer() &gt;= 0</head>
      <guard>
        <subtype><typename>Data</typename><string>Data = iodata()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
</spec>
<spec>
  <name>crc32</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:crc32(OldCrc, Data) -&gt; integer() &gt;= 0</head>
      <guard>
        <subtype><typename>OldCrc</typename><string>OldCrc = integer() &gt;= 0</string></subtype>
        <subtype><typename>Data</typename><string>Data = iodata()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>OldCrc</anno>
</spec>
<spec>
  <name>crc32_combine</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:crc32_combine(FirstCrc, SecondCrc, SecondSize) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer() &gt;= 0</head>
      <guard>
        <subtype><typename>FirstCrc</typename><string>FirstCrc = SecondCrc = SecondSize = integer() &gt;= 0</string></subtype>
        <subtype><typename>SecondCrc</typename><string></string></subtype>
        <subtype><typename>SecondSize</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>FirstCrc</anno>
  <anno>SecondCrc</anno>
  <anno>SecondSize</anno>
</spec>
<spec>
  <name>date</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>date() -&gt; Date</head>
      <guard>
        <subtype><typename>Date</typename><string>Date = <seealso marker="calendar#type-date">calendar:date()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Date</anno>
</spec>
<spec>
  <name>decode_packet</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:decode_packet(Type, Bin, Options) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Packet, Rest} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{more, Length} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, Reason}</head>
      <guard>
        <subtype><typename>Type</typename><string>Type = <br/><nbsp/><nbsp/><nbsp/><nbsp/>raw |<br/><nbsp/><nbsp/><nbsp/><nbsp/>0 |<br/><nbsp/><nbsp/><nbsp/><nbsp/>1 |<br/><nbsp/><nbsp/><nbsp/><nbsp/>2 |<br/><nbsp/><nbsp/><nbsp/><nbsp/>4 |<br/><nbsp/><nbsp/><nbsp/><nbsp/>asn1 |<br/><nbsp/><nbsp/><nbsp/><nbsp/>cdr |<br/><nbsp/><nbsp/><nbsp/><nbsp/>sunrm |<br/><nbsp/><nbsp/><nbsp/><nbsp/>fcgi |<br/><nbsp/><nbsp/><nbsp/><nbsp/>tpkt |<br/><nbsp/><nbsp/><nbsp/><nbsp/>line |<br/><nbsp/><nbsp/><nbsp/><nbsp/>http |<br/><nbsp/><nbsp/><nbsp/><nbsp/>http_bin |<br/><nbsp/><nbsp/><nbsp/><nbsp/>httph |<br/><nbsp/><nbsp/><nbsp/><nbsp/>httph_bin</string></subtype>
        <subtype><typename>Bin</typename><string>Bin = binary()</string></subtype>
        <subtype><typename>Options</typename><string>Options = [Opt]</string></subtype>
        <subtype><typename>Opt</typename><string>Opt = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{packet_size, integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{line_length, integer() &gt;= 0}</string></subtype>
        <subtype><typename>Packet</typename><string>Packet = binary() | HttpPacket</string></subtype>
        <subtype><typename>Rest</typename><string>Rest = binary()</string></subtype>
        <subtype><typename>Length</typename><string>Length = integer() &gt;= 0 | undefined</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = term()</string></subtype>
        <subtype><typename>HttpPacket</typename><string>HttpPacket = <br/><nbsp/><nbsp/><nbsp/><nbsp/>HttpRequest | HttpResponse | HttpHeader | http_eoh | HttpError</string></subtype>
        <subtype><typename>HttpRequest</typename><string>HttpRequest = {http_request, HttpMethod, HttpUri, HttpVersion}</string></subtype>
        <subtype><typename>HttpResponse</typename><string>HttpResponse = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{http_response, HttpVersion, integer(), HttpString}</string></subtype>
        <subtype><typename>HttpHeader</typename><string>HttpHeader = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{http_header,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>HttpField,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Reserved :: term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Value :: HttpString}</string></subtype>
        <subtype><typename>HttpError</typename><string>HttpError = {http_error, HttpString}</string></subtype>
        <subtype><typename>HttpMethod</typename><string>HttpMethod = <br/><nbsp/><nbsp/><nbsp/><nbsp/>'OPTIONS' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'GET' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'HEAD' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'POST' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'PUT' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'DELETE' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'TRACE' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>HttpString</string></subtype>
        <subtype><typename>HttpUri</typename><string>HttpUri = <br/><nbsp/><nbsp/><nbsp/><nbsp/>'*' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{absoluteURI,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>http | https,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Host :: HttpString,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Port :: <seealso marker="inet#type-port_number">inet:port_number()</seealso> | undefined,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Path :: HttpString} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{scheme, Scheme :: HttpString, HttpString} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{abs_path, HttpString} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>HttpString</string></subtype>
        <subtype><typename>HttpVersion</typename><string>HttpVersion = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{Major :: integer() &gt;= 0, Minor :: integer() &gt;= 0}</string></subtype>
        <subtype><typename>HttpField</typename><string>HttpField = <br/><nbsp/><nbsp/><nbsp/><nbsp/>'Cache-Control' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Connection' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Date' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Pragma' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Transfer-Encoding' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Upgrade' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Via' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Accept' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Accept-Charset' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Accept-Encoding' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Accept-Language' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Authorization' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'From' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Host' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'If-Modified-Since' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'If-Match' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'If-None-Match' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'If-Range' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'If-Unmodified-Since' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Max-Forwards' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Proxy-Authorization' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Range' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Referer' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'User-Agent' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Age' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Location' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Proxy-Authenticate' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Public' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Retry-After' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Server' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Vary' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Warning' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Www-Authenticate' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Allow' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Content-Base' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Content-Encoding' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Content-Language' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Content-Length' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Content-Location' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Content-Md5' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Content-Range' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Content-Type' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Etag' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Expires' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Last-Modified' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Accept-Ranges' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Set-Cookie' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Set-Cookie2' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'X-Forwarded-For' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Cookie' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Keep-Alive' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'Proxy-Connection' |<br/><nbsp/><nbsp/><nbsp/><nbsp/>HttpString</string></subtype>
        <subtype><typename>HttpString</typename><string>HttpString = string() | binary()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Bin</anno>
  <anno>Host</anno>
  <anno>HttpError</anno>
  <anno>HttpField</anno>
  <anno>HttpHeader</anno>
  <anno>HttpMethod</anno>
  <anno>HttpPacket</anno>
  <anno>HttpRequest</anno>
  <anno>HttpResponse</anno>
  <anno>HttpString</anno>
  <anno>HttpUri</anno>
  <anno>HttpVersion</anno>
  <anno>Length</anno>
  <anno>Major</anno>
  <anno>Minor</anno>
  <anno>Opt</anno>
  <anno>Options</anno>
  <anno>Packet</anno>
  <anno>Path</anno>
  <anno>Port</anno>
  <anno>Reason</anno>
  <anno>Reserved</anno>
  <anno>Rest</anno>
  <anno>Scheme</anno>
  <anno>Type</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>delay_trap</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:delay_trap(Result, Timeout :: timeout()) -&gt; Result</head></clause>
  </contract>
  <anno>Result</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>delete_element</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:delete_element(Index, Tuple1) -&gt; Tuple2</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = integer() &gt;= 1</string></subtype>
        <subtype><typename>Tuple1</typename><string>Tuple1 = Tuple2 = tuple()</string></subtype>
        <subtype><typename>Tuple2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>Tuple1</anno>
  <anno>Tuple2</anno>
</spec>
<spec>
  <name>delete_module</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>delete_module(Module) -&gt; true | undefined</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Module</anno>
</spec>
<spec>
  <name>demonitor</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>demonitor(MonitorRef) -&gt; true</head>
      <guard>
        <subtype><typename>MonitorRef</typename><string>MonitorRef = reference()</string></subtype>
      </guard></clause>
  </contract>
  <anno>MonitorRef</anno>
</spec>
<spec>
  <name>demonitor</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>demonitor(MonitorRef, OptionList) -&gt; boolean()</head>
      <guard>
        <subtype><typename>MonitorRef</typename><string>MonitorRef = reference()</string></subtype>
        <subtype><typename>OptionList</typename><string>OptionList = [Option]</string></subtype>
        <subtype><typename>Option</typename><string>Option = flush | info</string></subtype>
      </guard></clause>
  </contract>
  <anno>MonitorRef</anno>
  <anno>Option</anno>
  <anno>OptionList</anno>
</spec>
<spec>
  <name>dexit</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>dgroup_leader</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>disconnect_node</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>disconnect_node(Node) -&gt; boolean() | ignored</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = node()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>display</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:display(Term) -&gt; true</head>
      <guard>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>display_nl</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>erlang:display_nl() -&gt; true</head></clause>
  </contract>
</spec>
<spec>
  <name>display_string</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:display_string(P1) -&gt; true</head>
      <guard>
        <subtype><typename>P1</typename><string>P1 = string()</string></subtype>
      </guard></clause>
  </contract>
  <anno>P1</anno>
</spec>
<spec>
  <name>dist_exit</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:dist_exit(P1, P2, P3) -&gt; true</head>
      <guard>
        <subtype><typename>P1</typename><string>P1 = pid()</string></subtype>
        <subtype><typename>P2</typename><string>P2 = kill | noconnection | normal</string></subtype>
        <subtype><typename>P3</typename><string>P3 = pid() | port()</string></subtype>
      </guard></clause>
  </contract>
  <anno>P1</anno>
  <anno>P2</anno>
  <anno>P3</anno>
</spec>
<spec>
  <name>dlink</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:dlink(Pid :: pid() | port()) -&gt; true</head></clause>
  </contract>
  <anno>Pid</anno>
</spec>
<spec>
  <name>dmonitor_node</name>
  <arity>3</arity>
  <contract/>
</spec>
<spec>
  <name>dmonitor_p</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:dmonitor_p(X1 :: process,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ProcSpec :: pid() | {atom(), atom()}) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>reference()</head></clause>
  </contract>
  <anno>ProcSpec</anno>
  <anno>X1</anno>
</spec>
<spec>
  <name>dsend</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>dsend</name>
  <arity>3</arity>
  <contract/>
</spec>
<spec>
  <name>dt_append_vm_tag_data</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:dt_append_vm_tag_data(IoData) -&gt; IoDataRet</head>
      <guard>
        <subtype><typename>IoData</typename><string>IoData = IoDataRet = iodata()</string></subtype>
        <subtype><typename>IoDataRet</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>IoData</anno>
  <anno>IoDataRet</anno>
</spec>
<spec>
  <name>dt_get_tag</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>erlang:dt_get_tag() -&gt; binary() | undefined</head></clause>
  </contract>
</spec>
<spec>
  <name>dt_get_tag_data</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>erlang:dt_get_tag_data() -&gt; binary() | undefined</head></clause>
  </contract>
</spec>
<spec>
  <name>dt_prepend_vm_tag_data</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:dt_prepend_vm_tag_data(IoData) -&gt; IoDataRet</head>
      <guard>
        <subtype><typename>IoData</typename><string>IoData = IoDataRet = iodata()</string></subtype>
        <subtype><typename>IoDataRet</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>IoData</anno>
  <anno>IoDataRet</anno>
</spec>
<spec>
  <name>dt_put_tag</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:dt_put_tag(IoData) -&gt; binary() | undefined</head>
      <guard>
        <subtype><typename>IoData</typename><string>IoData = iodata()</string></subtype>
      </guard></clause>
  </contract>
  <anno>IoData</anno>
</spec>
<spec>
  <name>dt_restore_tag</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:dt_restore_tag(TagData) -&gt; true</head>
      <guard>
        <subtype><typename>TagData</typename><string>TagData = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>TagData</anno>
</spec>
<spec>
  <name>dt_spread_tag</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:dt_spread_tag(Bool :: boolean()) -&gt; TagData</head>
      <guard>
        <subtype><typename>TagData</typename><string>TagData = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Bool</anno>
  <anno>TagData</anno>
</spec>
<spec>
  <name>dunlink</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:dunlink(Pid :: identifier()) -&gt; true</head></clause>
  </contract>
  <anno>Pid</anno>
</spec>
<spec>
  <name>element</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>element(N, Tuple) -&gt; term()</head>
      <guard>
        <subtype><typename>N</typename><string>N = integer() &gt;= 1</string></subtype>
        <subtype><typename>Tuple</typename><string>Tuple = tuple()</string></subtype>
      </guard></clause>
  </contract>
  <anno>N</anno>
  <anno>Tuple</anno>
</spec>
<spec>
  <name>erase</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>erase() -&gt; [{Key, Val}]</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = Val = term()</string></subtype>
        <subtype><typename>Val</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Val</anno>
</spec>
<spec>
  <name>erase</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erase(Key) -&gt; Val | undefined</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = Val = term()</string></subtype>
        <subtype><typename>Val</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Val</anno>
</spec>
<spec>
  <name>error</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>error(Reason) -&gt; no_return()</head>
      <guard>
        <subtype><typename>Reason</typename><string>Reason = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Reason</anno>
</spec>
<spec>
  <name>error</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>error(Reason, Args) -&gt; no_return()</head>
      <guard>
        <subtype><typename>Reason</typename><string>Reason = term()</string></subtype>
        <subtype><typename>Args</typename><string>Args = [term()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>exit</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>exit(Reason) -&gt; no_return()</head>
      <guard>
        <subtype><typename>Reason</typename><string>Reason = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Reason</anno>
</spec>
<spec>
  <name>exit</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>exit(Pid, Reason) -&gt; true</head>
      <guard>
        <subtype><typename>Pid</typename><string>Pid = pid() | port()</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Pid</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>external_size</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:external_size(Term) -&gt; integer() &gt;= 0</head>
      <guard>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>external_size</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:external_size(Term, Options) -&gt; integer() &gt;= 0</head>
      <guard>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
        <subtype><typename>Options</typename><string>Options = [{minor_version, Version :: integer() &gt;= 0}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Options</anno>
  <anno>Term</anno>
  <anno>Version</anno>
</spec>
<spec>
  <name>finish_after_on_load</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:finish_after_on_load(P1, P2) -&gt; true</head>
      <guard>
        <subtype><typename>P1</typename><string>P1 = atom()</string></subtype>
        <subtype><typename>P2</typename><string>P2 = boolean()</string></subtype>
      </guard></clause>
  </contract>
  <anno>P1</anno>
  <anno>P2</anno>
</spec>
<spec>
  <name>finish_loading</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:finish_loading(PreparedCodeList) -&gt; ok | Error</head>
      <guard>
        <subtype><typename>PreparedCodeList</typename><string>PreparedCodeList = [PreparedCode]</string></subtype>
        <subtype><typename>PreparedCode</typename><string>PreparedCode = <seealso marker="#type-prepared_code">prepared_code()</seealso></string></subtype>
        <subtype><typename>ModuleList</typename><string>ModuleList = [module()]</string></subtype>
        <subtype><typename>Error</typename><string>Error = {not_purged, ModuleList} | {on_load, ModuleList}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Error</anno>
  <anno>ModuleList</anno>
  <anno>PreparedCode</anno>
  <anno>PreparedCodeList</anno>
</spec>
<spec>
  <name>float</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>float(Number) -&gt; float()</head>
      <guard>
        <subtype><typename>Number</typename><string>Number = number()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Number</anno>
</spec>
<spec>
  <name>float_to_binary</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>float_to_binary(Float) -&gt; binary()</head>
      <guard>
        <subtype><typename>Float</typename><string>Float = float()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Float</anno>
</spec>
<spec>
  <name>float_to_binary</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>float_to_binary(Float, Options) -&gt; binary()</head>
      <guard>
        <subtype><typename>Float</typename><string>Float = float()</string></subtype>
        <subtype><typename>Options</typename><string>Options = [Option]</string></subtype>
        <subtype><typename>Option</typename><string>Option = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{decimals, Decimals :: 0..253} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{scientific, Decimals :: 0..249} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>compact</string></subtype>
      </guard></clause>
  </contract>
  <anno>Decimals</anno>
  <anno>Float</anno>
  <anno>Option</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>float_to_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>float_to_list(Float) -&gt; string()</head>
      <guard>
        <subtype><typename>Float</typename><string>Float = float()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Float</anno>
</spec>
<spec>
  <name>float_to_list</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>float_to_list(Float, Options) -&gt; string()</head>
      <guard>
        <subtype><typename>Float</typename><string>Float = float()</string></subtype>
        <subtype><typename>Options</typename><string>Options = [Option]</string></subtype>
        <subtype><typename>Option</typename><string>Option = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{decimals, Decimals :: 0..253} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{scientific, Decimals :: 0..249} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>compact</string></subtype>
      </guard></clause>
  </contract>
  <anno>Decimals</anno>
  <anno>Float</anno>
  <anno>Option</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>floor</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>floor(Number) -&gt; integer()</head>
      <guard>
        <subtype><typename>Number</typename><string>Number = number()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Number</anno>
</spec>
<spec>
  <name>format_cpu_topology</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>fun_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:fun_info(Fun) -&gt; [{Item, Info}]</head>
      <guard>
        <subtype><typename>Fun</typename><string>Fun = function()</string></subtype>
        <subtype><typename>Item</typename><string>Item = <br/><nbsp/><nbsp/><nbsp/><nbsp/>arity |<br/><nbsp/><nbsp/><nbsp/><nbsp/>env |<br/><nbsp/><nbsp/><nbsp/><nbsp/>index |<br/><nbsp/><nbsp/><nbsp/><nbsp/>name |<br/><nbsp/><nbsp/><nbsp/><nbsp/>module |<br/><nbsp/><nbsp/><nbsp/><nbsp/>new_index |<br/><nbsp/><nbsp/><nbsp/><nbsp/>new_uniq |<br/><nbsp/><nbsp/><nbsp/><nbsp/>pid |<br/><nbsp/><nbsp/><nbsp/><nbsp/>type |<br/><nbsp/><nbsp/><nbsp/><nbsp/>uniq</string></subtype>
        <subtype><typename>Info</typename><string>Info = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
  <anno>Info</anno>
  <anno>Item</anno>
</spec>
<spec>
  <name>fun_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:fun_info(Fun, Item) -&gt; {Item, Info}</head>
      <guard>
        <subtype><typename>Fun</typename><string>Fun = function()</string></subtype>
        <subtype><typename>Item</typename><string>Item = <seealso marker="#type-fun_info_item">fun_info_item()</seealso></string></subtype>
        <subtype><typename>Info</typename><string>Info = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
  <anno>Info</anno>
  <anno>Item</anno>
</spec>
<spec>
  <name>fun_info_mfa</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:fun_info_mfa(Fun) -&gt; {Mod, Name, Arity}</head>
      <guard>
        <subtype><typename>Fun</typename><string>Fun = function()</string></subtype>
        <subtype><typename>Mod</typename><string>Mod = Name = atom()</string></subtype>
        <subtype><typename>Name</typename><string/></subtype>
        <subtype><typename>Arity</typename><string>Arity = integer() &gt;= 0</string></subtype>
      </guard></clause>
  </contract>
  <anno>Arity</anno>
  <anno>Fun</anno>
  <anno>Mod</anno>
  <anno>Name</anno>
</spec>
<spec>
  <name>fun_to_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:fun_to_list(Fun) -&gt; string()</head>
      <guard>
        <subtype><typename>Fun</typename><string>Fun = function()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
</spec>
<spec>
  <name>function_exported</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:function_exported(Module, Function, Arity) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>Function</typename><string>Function = atom()</string></subtype>
        <subtype><typename>Arity</typename><string>Arity = arity()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Arity</anno>
  <anno>Function</anno>
  <anno>Module</anno>
</spec>
<spec>
  <name>garbage_collect</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>garbage_collect() -&gt; true</head></clause>
  </contract>
</spec>
<spec>
  <name>garbage_collect</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>garbage_collect(Pid) -&gt; GCResult</head>
      <guard>
        <subtype><typename>Pid</typename><string>Pid = pid()</string></subtype>
        <subtype><typename>GCResult</typename><string>GCResult = boolean()</string></subtype>
      </guard></clause>
  </contract>
  <anno>GCResult</anno>
  <anno>Pid</anno>
</spec>
<spec>
  <name>garbage_collect</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>garbage_collect(Pid, OptionList) -&gt; GCResult | async</head>
      <guard>
        <subtype><typename>Pid</typename><string>Pid = pid()</string></subtype>
        <subtype><typename>RequestId</typename><string>RequestId = term()</string></subtype>
        <subtype><typename>Option</typename><string>Option = {async, RequestId} | {type, major | minor}</string></subtype>
        <subtype><typename>OptionList</typename><string>OptionList = [Option]</string></subtype>
        <subtype><typename>GCResult</typename><string>GCResult = boolean()</string></subtype>
      </guard></clause>
  </contract>
  <anno>GCResult</anno>
  <anno>Option</anno>
  <anno>OptionList</anno>
  <anno>Pid</anno>
  <anno>RequestId</anno>
</spec>
<spec>
  <name>garbage_collect_message_area</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>erlang:garbage_collect_message_area() -&gt; boolean()</head></clause>
  </contract>
</spec>
<spec>
  <name>gather_gc_info_result</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:gather_gc_info_result(Ref) -&gt; {number(), number(), 0}</head>
      <guard>
        <subtype><typename>Ref</typename><string>Ref = reference()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Ref</anno>
</spec>
<spec>
  <name>gather_sched_wall_time_result</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:gather_sched_wall_time_result(Ref) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{integer() &gt;= 1,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer() &gt;= 0}]</head>
      <guard>
        <subtype><typename>Ref</typename><string>Ref = reference()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Ref</anno>
</spec>
<spec>
  <name>get</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>get() -&gt; [{Key, Val}]</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = Val = term()</string></subtype>
        <subtype><typename>Val</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Val</anno>
</spec>
<spec>
  <name>get</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get(Key) -&gt; Val | undefined</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = Val = term()</string></subtype>
        <subtype><typename>Val</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Val</anno>
</spec>
<spec>
  <name>get_cookie</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>erlang:get_cookie() -&gt; Cookie | nocookie</head>
      <guard>
        <subtype><typename>Cookie</typename><string>Cookie = atom()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Cookie</anno>
</spec>
<spec>
  <name>get_keys</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>get_keys() -&gt; [Key]</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
</spec>
<spec>
  <name>get_keys</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_keys(Val) -&gt; [Key]</head>
      <guard>
        <subtype><typename>Val</typename><string>Val = Key = term()</string></subtype>
        <subtype><typename>Key</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Val</anno>
</spec>
<spec>
  <name>get_module_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:get_module_info(Module) -&gt; [{Item, term()}]</head>
      <guard>
        <subtype><typename>Item</typename><string>Item = module | exports | attributes | compile | native | md5</string></subtype>
        <subtype><typename>Module</typename><string>Module = atom()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>Module</anno>
</spec>
<spec>
  <name>get_module_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:get_module_info(Module, Item) -&gt; ModuleInfo</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = atom()</string></subtype>
        <subtype><typename>Item</typename><string>Item = <seealso marker="#type-module_info_key">module_info_key()</seealso></string></subtype>
        <subtype><typename>ModuleInfo</typename><string>ModuleInfo = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>Module</anno>
  <anno>ModuleInfo</anno>
</spec>
<spec>
  <name>get_stacktrace</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>erlang:get_stacktrace() -&gt; [<seealso marker="#type-stack_item">stack_item()</seealso>]</head></clause>
  </contract>
</spec>
<spec>
  <name>group_leader</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>group_leader() -&gt; pid()</head></clause>
  </contract>
</spec>
<spec>
  <name>group_leader</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>group_leader(GroupLeader, Pid) -&gt; true</head>
      <guard>
        <subtype><typename>GroupLeader</typename><string>GroupLeader = Pid = pid()</string></subtype>
        <subtype><typename>Pid</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>GroupLeader</anno>
  <anno>Pid</anno>
</spec>
<spec>
  <name>halt</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>halt() -&gt; no_return()</head></clause>
  </contract>
</spec>
<spec>
  <name>halt</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>halt(Status) -&gt; no_return()</head>
      <guard>
        <subtype><typename>Status</typename><string>Status = integer() &gt;= 0 | abort | string()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Status</anno>
</spec>
<spec>
  <name>halt</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>halt(Status, Options) -&gt; no_return()</head>
      <guard>
        <subtype><typename>Status</typename><string>Status = integer() &gt;= 0 | abort | string()</string></subtype>
        <subtype><typename>Options</typename><string>Options = [Option]</string></subtype>
        <subtype><typename>Option</typename><string>Option = {flush, boolean()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Option</anno>
  <anno>Options</anno>
  <anno>Status</anno>
</spec>
<spec>
  <name>has_prepared_code_on_load</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:has_prepared_code_on_load(PreparedCode) -&gt; boolean()</head>
      <guard>
        <subtype><typename>PreparedCode</typename><string>PreparedCode = <seealso marker="#type-prepared_code">prepared_code()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>PreparedCode</anno>
</spec>
<spec>
  <name>hd</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>hd(List) -&gt; term()</head>
      <guard>
        <subtype><typename>List</typename><string>List = [term(), ...]</string></subtype>
      </guard></clause>
  </contract>
  <anno>List</anno>
</spec>
<spec>
  <name>hibernate</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:hibernate(Module, Function, Args) -&gt; no_return()</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>Function</typename><string>Function = atom()</string></subtype>
        <subtype><typename>Args</typename><string>Args = [term()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
</spec>
<spec>
  <name>insert_element</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:insert_element(Index, Tuple1, Term) -&gt; Tuple2</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = integer() &gt;= 1</string></subtype>
        <subtype><typename>Tuple1</typename><string>Tuple1 = Tuple2 = tuple()</string></subtype>
        <subtype><typename>Tuple2</typename><string/></subtype>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>Term</anno>
  <anno>Tuple1</anno>
  <anno>Tuple2</anno>
</spec>
<spec>
  <name>integer_to_binary</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>integer_to_binary(Integer) -&gt; binary()</head>
      <guard>
        <subtype><typename>Integer</typename><string>Integer = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Integer</anno>
</spec>
<spec>
  <name>integer_to_binary</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>integer_to_binary(Integer, Base) -&gt; binary()</head>
      <guard>
        <subtype><typename>Integer</typename><string>Integer = integer()</string></subtype>
        <subtype><typename>Base</typename><string>Base = 2..36</string></subtype>
      </guard></clause>
  </contract>
  <anno>Base</anno>
  <anno>Integer</anno>
</spec>
<spec>
  <name>integer_to_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>integer_to_list(Integer) -&gt; string()</head>
      <guard>
        <subtype><typename>Integer</typename><string>Integer = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Integer</anno>
</spec>
<spec>
  <name>integer_to_list</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>integer_to_list(Integer, Base) -&gt; string()</head>
      <guard>
        <subtype><typename>Integer</typename><string>Integer = integer()</string></subtype>
        <subtype><typename>Base</typename><string>Base = 2..36</string></subtype>
      </guard></clause>
  </contract>
  <anno>Base</anno>
  <anno>Integer</anno>
</spec>
<spec>
  <name>iolist_size</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>iolist_size(Item) -&gt; integer() &gt;= 0</head>
      <guard>
        <subtype><typename>Item</typename><string>Item = iolist() | binary()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>iolist_to_binary</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>iolist_to_binary(IoListOrBinary) -&gt; binary()</head>
      <guard>
        <subtype><typename>IoListOrBinary</typename><string>IoListOrBinary = iolist() | binary()</string></subtype>
      </guard></clause>
  </contract>
  <anno>IoListOrBinary</anno>
</spec>
<spec>
  <name>is_alive</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>is_alive() -&gt; boolean()</head></clause>
  </contract>
</spec>
<spec>
  <name>is_atom</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_atom(Term) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>is_binary</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_binary(Term) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>is_bitstring</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_bitstring(Term) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>is_boolean</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_boolean(Term) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>is_builtin</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:is_builtin(Module, Function, Arity) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>Function</typename><string>Function = atom()</string></subtype>
        <subtype><typename>Arity</typename><string>Arity = arity()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Arity</anno>
  <anno>Function</anno>
  <anno>Module</anno>
</spec>
<spec>
  <name>is_float</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_float(Term) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>is_function</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_function(Term) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>is_function</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>is_function(Term, Arity) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
        <subtype><typename>Arity</typename><string>Arity = arity()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Arity</anno>
  <anno>Term</anno>
</spec>
<spec>
  <name>is_integer</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_integer(Term) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>is_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_list(Term) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>is_map</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_map(Term) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>is_number</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_number(Term) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>is_pid</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_pid(Term) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>is_port</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_port(Term) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>is_process_alive</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_process_alive(Pid) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Pid</typename><string>Pid = pid()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Pid</anno>
</spec>
<spec>
  <name>is_record</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>is_record(Term, RecordTag) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
        <subtype><typename>RecordTag</typename><string>RecordTag = atom()</string></subtype>
      </guard></clause>
  </contract>
  <anno>RecordTag</anno>
  <anno>Term</anno>
</spec>
<spec>
  <name>is_record</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>is_record(Term, RecordTag, Size) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
        <subtype><typename>RecordTag</typename><string>RecordTag = atom()</string></subtype>
        <subtype><typename>Size</typename><string>Size = integer() &gt;= 0</string></subtype>
      </guard></clause>
  </contract>
  <anno>RecordTag</anno>
  <anno>Size</anno>
  <anno>Term</anno>
</spec>
<spec>
  <name>is_reference</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_reference(Term) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>is_tuple</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_tuple(Term) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>length</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>length(List) -&gt; integer() &gt;= 0</head>
      <guard>
        <subtype><typename>List</typename><string>List = [term()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>List</anno>
</spec>
<spec>
  <name>link</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>link(PidOrPort) -&gt; true</head>
      <guard>
        <subtype><typename>PidOrPort</typename><string>PidOrPort = pid() | port()</string></subtype>
      </guard></clause>
  </contract>
  <anno>PidOrPort</anno>
</spec>
<spec>
  <name>list_to_atom</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>list_to_atom(String) -&gt; atom()</head>
      <guard>
        <subtype><typename>String</typename><string>String = string()</string></subtype>
      </guard></clause>
  </contract>
  <anno>String</anno>
</spec>
<spec>
  <name>list_to_binary</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>list_to_binary(IoList) -&gt; binary()</head>
      <guard>
        <subtype><typename>IoList</typename><string>IoList = iolist()</string></subtype>
      </guard></clause>
  </contract>
  <anno>IoList</anno>
</spec>
<spec>
  <name>list_to_bitstring</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>list_to_bitstring(BitstringList) -&gt; bitstring()</head>
      <guard>
        <subtype><typename>BitstringList</typename><string>BitstringList = <seealso marker="#type-bitstring_list">bitstring_list()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>BitstringList</anno>
</spec>
<spec>
  <name>list_to_existing_atom</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>list_to_existing_atom(String) -&gt; atom()</head>
      <guard>
        <subtype><typename>String</typename><string>String = string()</string></subtype>
      </guard></clause>
  </contract>
  <anno>String</anno>
</spec>
<spec>
  <name>list_to_float</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>list_to_float(String) -&gt; float()</head>
      <guard>
        <subtype><typename>String</typename><string>String = string()</string></subtype>
      </guard></clause>
  </contract>
  <anno>String</anno>
</spec>
<spec>
  <name>list_to_integer</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>list_to_integer(String) -&gt; integer()</head>
      <guard>
        <subtype><typename>String</typename><string>String = string()</string></subtype>
      </guard></clause>
  </contract>
  <anno>String</anno>
</spec>
<spec>
  <name>list_to_integer</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>list_to_integer(String, Base) -&gt; integer()</head>
      <guard>
        <subtype><typename>String</typename><string>String = string()</string></subtype>
        <subtype><typename>Base</typename><string>Base = 2..36</string></subtype>
      </guard></clause>
  </contract>
  <anno>Base</anno>
  <anno>String</anno>
</spec>
<spec>
  <name>list_to_pid</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>list_to_pid(String) -&gt; pid()</head>
      <guard>
        <subtype><typename>String</typename><string>String = string()</string></subtype>
      </guard></clause>
  </contract>
  <anno>String</anno>
</spec>
<spec>
  <name>list_to_port</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>list_to_port(String) -&gt; port()</head>
      <guard>
        <subtype><typename>String</typename><string>String = string()</string></subtype>
      </guard></clause>
  </contract>
  <anno>String</anno>
</spec>
<spec>
  <name>list_to_ref</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>list_to_ref(String) -&gt; reference()</head>
      <guard>
        <subtype><typename>String</typename><string>String = string()</string></subtype>
      </guard></clause>
  </contract>
  <anno>String</anno>
</spec>
<spec>
  <name>list_to_tuple</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>list_to_tuple(List) -&gt; tuple()</head>
      <guard>
        <subtype><typename>List</typename><string>List = [term()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>List</anno>
</spec>
<spec>
  <name>load_module</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>load_module(Module, Binary) -&gt; {module, Module} | {error, Reason}</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>Binary</typename><string>Binary = binary()</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = badfile | not_purged | on_load</string></subtype>
      </guard></clause>
  </contract>
  <anno>Binary</anno>
  <anno>Module</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>load_nif</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:load_nif(Path, LoadInfo) -&gt; ok | Error</head>
      <guard>
        <subtype><typename>Path</typename><string>Path = string()</string></subtype>
        <subtype><typename>LoadInfo</typename><string>LoadInfo = term()</string></subtype>
        <subtype><typename>Error</typename><string>Error = {error, {Reason, Text :: string()}}</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = <br/><nbsp/><nbsp/><nbsp/><nbsp/>load_failed | bad_lib | load | reload | upgrade | old_code</string></subtype>
      </guard></clause>
  </contract>
  <anno>Error</anno>
  <anno>LoadInfo</anno>
  <anno>Path</anno>
  <anno>Reason</anno>
  <anno>Text</anno>
</spec>
<spec>
  <name>loaded</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>erlang:loaded() -&gt; [Module]</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Module</anno>
</spec>
<spec>
  <name>localtime</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>erlang:localtime() -&gt; DateTime</head>
      <guard>
        <subtype><typename>DateTime</typename><string>DateTime = <seealso marker="calendar#type-datetime">calendar:datetime()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>DateTime</anno>
</spec>
<spec>
  <name>localtime_to_universaltime</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:localtime_to_universaltime(Localtime) -&gt; Universaltime</head>
      <guard>
        <subtype><typename>Localtime</typename><string>Localtime = Universaltime = <seealso marker="calendar#type-datetime">calendar:datetime()</seealso></string></subtype>
        <subtype><typename>Universaltime</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Localtime</anno>
  <anno>Universaltime</anno>
</spec>
<spec>
  <name>localtime_to_universaltime</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:localtime_to_universaltime(Localtime, IsDst) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Universaltime</head>
      <guard>
        <subtype><typename>Localtime</typename><string>Localtime = Universaltime = <seealso marker="calendar#type-datetime">calendar:datetime()</seealso></string></subtype>
        <subtype><typename>Universaltime</typename><string/></subtype>
        <subtype><typename>IsDst</typename><string>IsDst = true | false | undefined</string></subtype>
      </guard></clause>
  </contract>
  <anno>IsDst</anno>
  <anno>Localtime</anno>
  <anno>Universaltime</anno>
</spec>
<spec>
  <name>make_fun</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:make_fun(Module, Function, Arity) -&gt; function()</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = Function = atom()</string></subtype>
        <subtype><typename>Function</typename><string/></subtype>
        <subtype><typename>Arity</typename><string>Arity = arity()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Arity</anno>
  <anno>Function</anno>
  <anno>Module</anno>
</spec>
<spec>
  <name>make_ref</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>make_ref() -&gt; reference()</head></clause>
  </contract>
</spec>
<spec>
  <name>make_tuple</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:make_tuple(Arity, InitialValue) -&gt; tuple()</head>
      <guard>
        <subtype><typename>Arity</typename><string>Arity = arity()</string></subtype>
        <subtype><typename>InitialValue</typename><string>InitialValue = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Arity</anno>
  <anno>InitialValue</anno>
</spec>
<spec>
  <name>make_tuple</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:make_tuple(Arity, DefaultValue, InitList) -&gt; tuple()</head>
      <guard>
        <subtype><typename>Arity</typename><string>Arity = arity()</string></subtype>
        <subtype><typename>DefaultValue</typename><string>DefaultValue = term()</string></subtype>
        <subtype><typename>InitList</typename><string>InitList = [{Position :: integer() &gt;= 1, term()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Arity</anno>
  <anno>DefaultValue</anno>
  <anno>InitList</anno>
  <anno>Position</anno>
</spec>
<spec>
  <name>map_size</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>map_size(Map) -&gt; integer() &gt;= 0</head>
      <guard>
        <subtype><typename>Map</typename><string>Map = #{}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Map</anno>
</spec>
<spec>
  <name>match_spec_test</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:match_spec_test(MatchAgainst, MatchSpec, Type) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>TestResult</head>
      <guard>
        <subtype><typename>MatchAgainst</typename><string>MatchAgainst = [term()] | tuple()</string></subtype>
        <subtype><typename>MatchSpec</typename><string>MatchSpec = term()</string></subtype>
        <subtype><typename>Type</typename><string>Type = table | trace</string></subtype>
        <subtype><typename>TestResult</typename><string>TestResult = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, term(), [return_trace], [{error | warning, string()}]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{error, [{error | warning, string()}]}</string></subtype>
      </guard></clause>
  </contract>
  <anno>MatchAgainst</anno>
  <anno>MatchSpec</anno>
  <anno>TestResult</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>max</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>max(Term1, Term2) -&gt; Maximum</head>
      <guard>
        <subtype><typename>Term1</typename><string>Term1 = Term2 = Maximum = term()</string></subtype>
        <subtype><typename>Term2</typename><string></string></subtype>
        <subtype><typename>Maximum</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Maximum</anno>
  <anno>Term1</anno>
  <anno>Term2</anno>
</spec>
<spec>
  <name>md5</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:md5(Data) -&gt; Digest</head>
      <guard>
        <subtype><typename>Data</typename><string>Data = iodata()</string></subtype>
        <subtype><typename>Digest</typename><string>Digest = binary()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Digest</anno>
</spec>
<spec>
  <name>md5_final</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:md5_final(Context) -&gt; Digest</head>
      <guard>
        <subtype><typename>Context</typename><string>Context = Digest = binary()</string></subtype>
        <subtype><typename>Digest</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Context</anno>
  <anno>Digest</anno>
</spec>
<spec>
  <name>md5_init</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>erlang:md5_init() -&gt; Context</head>
      <guard>
        <subtype><typename>Context</typename><string>Context = binary()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Context</anno>
</spec>
<spec>
  <name>md5_update</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:md5_update(Context, Data) -&gt; NewContext</head>
      <guard>
        <subtype><typename>Context</typename><string>Context = binary()</string></subtype>
        <subtype><typename>Data</typename><string>Data = iodata()</string></subtype>
        <subtype><typename>NewContext</typename><string>NewContext = binary()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Context</anno>
  <anno>Data</anno>
  <anno>NewContext</anno>
</spec>
<spec>
  <name>memory</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>erlang:memory() -&gt; [{Type, Size}]</head>
      <guard>
        <subtype><typename>Type</typename><string>Type = <seealso marker="#type-memory_type">memory_type()</seealso></string></subtype>
        <subtype><typename>Size</typename><string>Size = integer() &gt;= 0</string></subtype>
      </guard></clause>
  </contract>
  <anno>Size</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>memory</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:memory(Type :: <seealso marker="#type-memory_type">memory_type()</seealso>) -&gt; integer() &gt;= 0</head></clause>
  </contract>
  <anno>Type</anno>
</spec>
<spec>
  <name>memory</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:memory(TypeList :: [<seealso marker="#type-memory_type">memory_type()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{<seealso marker="#type-memory_type">memory_type()</seealso>, integer() &gt;= 0}]</head></clause>
  </contract>
  <anno>TypeList</anno>
</spec>
<spec>
  <name>min</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>min(Term1, Term2) -&gt; Minimum</head>
      <guard>
        <subtype><typename>Term1</typename><string>Term1 = Term2 = Minimum = term()</string></subtype>
        <subtype><typename>Term2</typename><string></string></subtype>
        <subtype><typename>Minimum</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Minimum</anno>
  <anno>Term1</anno>
  <anno>Term2</anno>
</spec>
<spec>
  <name>module_loaded</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>module_loaded(Module) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Module</anno>
</spec>
<spec>
  <name>monitor</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>monitor(Type :: process, Item :: <seealso marker="#type-monitor_process_identifier">monitor_process_identifier()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>MonitorRef</head>
      <guard>
        <subtype><typename>MonitorRef</typename><string>MonitorRef = reference()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>MonitorRef</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>monitor</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>monitor(Type :: port, Item :: <seealso marker="#type-monitor_port_identifier">monitor_port_identifier()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>MonitorRef</head>
      <guard>
        <subtype><typename>MonitorRef</typename><string>MonitorRef = reference()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>MonitorRef</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>monitor</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>monitor(Type :: time_offset, Item :: clock_service) -&gt; MonitorRef</head>
      <guard>
        <subtype><typename>MonitorRef</typename><string>MonitorRef = reference()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>MonitorRef</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>monitor_node</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>monitor_node(Node, Flag) -&gt; true</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = node()</string></subtype>
        <subtype><typename>Flag</typename><string>Flag = boolean()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>monitor_node</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:monitor_node(Node, Flag, Options) -&gt; true</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = node()</string></subtype>
        <subtype><typename>Flag</typename><string>Flag = boolean()</string></subtype>
        <subtype><typename>Options</typename><string>Options = [Option]</string></subtype>
        <subtype><typename>Option</typename><string>Option = allow_passive_connect</string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
  <anno>Node</anno>
  <anno>Option</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>monotonic_time</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>erlang:monotonic_time() -&gt; integer()</head></clause>
  </contract>
</spec>
<spec>
  <name>monotonic_time</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:monotonic_time(Unit) -&gt; integer()</head>
      <guard>
        <subtype><typename>Unit</typename><string>Unit = <seealso marker="#type-time_unit">time_unit()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Unit</anno>
</spec>
<spec>
  <name>nif_error</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:nif_error(Reason) -&gt; no_return()</head>
      <guard>
        <subtype><typename>Reason</typename><string>Reason = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Reason</anno>
</spec>
<spec>
  <name>nif_error</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:nif_error(Reason, Args) -&gt; no_return()</head>
      <guard>
        <subtype><typename>Reason</typename><string>Reason = term()</string></subtype>
        <subtype><typename>Args</typename><string>Args = [term()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>node</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>node() -&gt; Node</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = node()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>node</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>node(Arg) -&gt; Node</head>
      <guard>
        <subtype><typename>Arg</typename><string>Arg = pid() | port() | reference()</string></subtype>
        <subtype><typename>Node</typename><string>Node = node()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Arg</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>nodes</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>nodes() -&gt; Nodes</head>
      <guard>
        <subtype><typename>Nodes</typename><string>Nodes = [node()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Nodes</anno>
</spec>
<spec>
  <name>nodes</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>nodes(Arg) -&gt; Nodes</head>
      <guard>
        <subtype><typename>Arg</typename><string>Arg = NodeType | [NodeType]</string></subtype>
        <subtype><typename>NodeType</typename><string>NodeType = visible | hidden | connected | this | known</string></subtype>
        <subtype><typename>Nodes</typename><string>Nodes = [node()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Arg</anno>
  <anno>NodeType</anno>
  <anno>Nodes</anno>
</spec>
<spec>
  <name>now</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>now() -&gt; Timestamp</head>
      <guard>
        <subtype><typename>Timestamp</typename><string>Timestamp = <seealso marker="#type-timestamp">timestamp()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Timestamp</anno>
</spec>
<spec>
  <name>open_port</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>open_port(PortName, PortSettings) -&gt; port()</head>
      <guard>
        <subtype><typename>PortName</typename><string>PortName = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{spawn, Command :: string() | binary()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{spawn_driver, Command :: string() | binary()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{spawn_executable, FileName :: <seealso marker="file#type-name">file:name()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{fd, In :: integer() &gt;= 0, Out :: integer() &gt;= 0}</string></subtype>
        <subtype><typename>PortSettings</typename><string>PortSettings = [Opt]</string></subtype>
        <subtype><typename>Opt</typename><string>Opt = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{packet, N :: 1 | 2 | 4} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>stream |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{line, L :: integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{cd, Dir :: string() | binary()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{env, Env :: [{Name :: string(), Val :: string() | false}]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{args, [string() | binary()]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{arg0, string() | binary()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>exit_status |<br/><nbsp/><nbsp/><nbsp/><nbsp/>use_stdio |<br/><nbsp/><nbsp/><nbsp/><nbsp/>nouse_stdio |<br/><nbsp/><nbsp/><nbsp/><nbsp/>stderr_to_stdout |<br/><nbsp/><nbsp/><nbsp/><nbsp/>in |<br/><nbsp/><nbsp/><nbsp/><nbsp/>out |<br/><nbsp/><nbsp/><nbsp/><nbsp/>binary |<br/><nbsp/><nbsp/><nbsp/><nbsp/>eof |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{parallelism, Boolean :: boolean()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>hide</string></subtype>
      </guard></clause>
  </contract>
  <anno>Boolean</anno>
  <anno>Command</anno>
  <anno>Dir</anno>
  <anno>Env</anno>
  <anno>FileName</anno>
  <anno>In</anno>
  <anno>L</anno>
  <anno>N</anno>
  <anno>Name</anno>
  <anno>Opt</anno>
  <anno>Out</anno>
  <anno>PortName</anno>
  <anno>PortSettings</anno>
  <anno>Val</anno>
</spec>
<spec>
  <name>phash</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:phash(Term, Range) -&gt; Hash</head>
      <guard>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
        <subtype><typename>Range</typename><string>Range = Hash = integer() &gt;= 1</string></subtype>
        <subtype><typename>Hash</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Hash</anno>
  <anno>Range</anno>
  <anno>Term</anno>
</spec>
<spec>
  <name>phash2</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:phash2(Term) -&gt; Hash</head>
      <guard>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
        <subtype><typename>Hash</typename><string>Hash = integer() &gt;= 0</string></subtype>
      </guard></clause>
  </contract>
  <anno>Hash</anno>
  <anno>Term</anno>
</spec>
<spec>
  <name>phash2</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:phash2(Term, Range) -&gt; Hash</head>
      <guard>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
        <subtype><typename>Range</typename><string>Range = integer() &gt;= 1</string></subtype>
        <subtype><typename>Hash</typename><string>Hash = integer() &gt;= 0</string></subtype>
      </guard></clause>
  </contract>
  <anno>Hash</anno>
  <anno>Range</anno>
  <anno>Term</anno>
</spec>
<spec>
  <name>pid_to_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>pid_to_list(Pid) -&gt; string()</head>
      <guard>
        <subtype><typename>Pid</typename><string>Pid = pid()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Pid</anno>
</spec>
<spec>
  <name>port_call</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:port_call(Port, Data) -&gt; term()</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = port() | atom()</string></subtype>
        <subtype><typename>Data</typename><string>Data = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Port</anno>
</spec>
<spec>
  <name>port_call</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:port_call(Port, Operation, Data) -&gt; term()</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = port() | atom()</string></subtype>
        <subtype><typename>Operation</typename><string>Operation = integer()</string></subtype>
        <subtype><typename>Data</typename><string>Data = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Operation</anno>
  <anno>Port</anno>
</spec>
<spec>
  <name>port_close</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>port_close(Port) -&gt; true</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = port() | atom()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Port</anno>
</spec>
<spec>
  <name>port_command</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>port_command(Port, Data) -&gt; true</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = port() | atom()</string></subtype>
        <subtype><typename>Data</typename><string>Data = iodata()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Port</anno>
</spec>
<spec>
  <name>port_command</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>port_command(Port, Data, OptionList) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = port() | atom()</string></subtype>
        <subtype><typename>Data</typename><string>Data = iodata()</string></subtype>
        <subtype><typename>Option</typename><string>Option = force | nosuspend</string></subtype>
        <subtype><typename>OptionList</typename><string>OptionList = [Option]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Option</anno>
  <anno>OptionList</anno>
  <anno>Port</anno>
</spec>
<spec>
  <name>port_connect</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>port_connect(Port, Pid) -&gt; true</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = port() | atom()</string></subtype>
        <subtype><typename>Pid</typename><string>Pid = pid()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Pid</anno>
  <anno>Port</anno>
</spec>
<spec>
  <name>port_control</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>port_control(Port, Operation, Data) -&gt; iodata() | binary()</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = port() | atom()</string></subtype>
        <subtype><typename>Operation</typename><string>Operation = integer()</string></subtype>
        <subtype><typename>Data</typename><string>Data = iodata()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Operation</anno>
  <anno>Port</anno>
</spec>
<spec>
  <name>port_get_data</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:port_get_data(Port) -&gt; term()</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = port() | atom()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Port</anno>
</spec>
<spec>
  <name>port_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:port_info(Port) -&gt; Result</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = port() | atom()</string></subtype>
        <subtype><typename>ResultItem</typename><string>ResultItem = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{registered_name, RegisteredName :: atom()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{id, Index :: integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{connected, Pid :: pid()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{links, Pids :: [pid()]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{name, String :: string()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{input, Bytes :: integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{output, Bytes :: integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{os_pid, OsPid :: integer() &gt;= 0 | undefined}</string></subtype>
        <subtype><typename>Result</typename><string>Result = [ResultItem] | undefined</string></subtype>
      </guard></clause>
  </contract>
  <anno>Bytes</anno>
  <anno>Index</anno>
  <anno>OsPid</anno>
  <anno>Pid</anno>
  <anno>Pids</anno>
  <anno>Port</anno>
  <anno>RegisteredName</anno>
  <anno>Result</anno>
  <anno>ResultItem</anno>
  <anno>String</anno>
</spec>
<spec>
  <name>port_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:port_info(Port, Item :: connected) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{connected, Pid} | undefined</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = port() | atom()</string></subtype>
        <subtype><typename>Pid</typename><string>Pid = pid()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>Pid</anno>
  <anno>Port</anno>
</spec>
<spec>
  <name>port_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:port_info(Port, Item :: id) -&gt; {id, Index} | undefined</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = port() | atom()</string></subtype>
        <subtype><typename>Index</typename><string>Index = integer() &gt;= 0</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>Item</anno>
  <anno>Port</anno>
</spec>
<spec>
  <name>port_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:port_info(Port, Item :: input) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{input, Bytes} | undefined</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = port() | atom()</string></subtype>
        <subtype><typename>Bytes</typename><string>Bytes = integer() &gt;= 0</string></subtype>
      </guard></clause>
  </contract>
  <anno>Bytes</anno>
  <anno>Item</anno>
  <anno>Port</anno>
</spec>
<spec>
  <name>port_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:port_info(Port, Item :: links) -&gt; {links, Pids} | undefined</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = port() | atom()</string></subtype>
        <subtype><typename>Pids</typename><string>Pids = [pid()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>Pids</anno>
  <anno>Port</anno>
</spec>
<spec>
  <name>port_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:port_info(Port, Item :: locking) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{locking, Locking} | undefined</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = port() | atom()</string></subtype>
        <subtype><typename>Locking</typename><string>Locking = false | port_level | driver_level</string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>Locking</anno>
  <anno>Port</anno>
</spec>
<spec>
  <name>port_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:port_info(Port, Item :: memory) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{memory, Bytes} | undefined</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = port() | atom()</string></subtype>
        <subtype><typename>Bytes</typename><string>Bytes = integer() &gt;= 0</string></subtype>
      </guard></clause>
  </contract>
  <anno>Bytes</anno>
  <anno>Item</anno>
  <anno>Port</anno>
</spec>
<spec>
  <name>port_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:port_info(Port, Item :: monitors) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{monitors, Monitors} | undefined</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = port() | atom()</string></subtype>
        <subtype><typename>Monitors</typename><string>Monitors = [{process, pid()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>Monitors</anno>
  <anno>Port</anno>
</spec>
<spec>
  <name>port_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:port_info(Port, Item :: monitored_by) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{monitored_by, MonitoredBy} | undefined</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = port() | atom()</string></subtype>
        <subtype><typename>MonitoredBy</typename><string>MonitoredBy = [pid()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>MonitoredBy</anno>
  <anno>Port</anno>
</spec>
<spec>
  <name>port_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:port_info(Port, Item :: name) -&gt; {name, Name} | undefined</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = port() | atom()</string></subtype>
        <subtype><typename>Name</typename><string>Name = string()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>Name</anno>
  <anno>Port</anno>
</spec>
<spec>
  <name>port_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:port_info(Port, Item :: os_pid) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{os_pid, OsPid} | undefined</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = port() | atom()</string></subtype>
        <subtype><typename>OsPid</typename><string>OsPid = integer() &gt;= 0 | undefined</string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>OsPid</anno>
  <anno>Port</anno>
</spec>
<spec>
  <name>port_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:port_info(Port, Item :: output) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{output, Bytes} | undefined</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = port() | atom()</string></subtype>
        <subtype><typename>Bytes</typename><string>Bytes = integer() &gt;= 0</string></subtype>
      </guard></clause>
  </contract>
  <anno>Bytes</anno>
  <anno>Item</anno>
  <anno>Port</anno>
</spec>
<spec>
  <name>port_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:port_info(Port, Item :: parallelism) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{parallelism, Boolean} | undefined</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = port() | atom()</string></subtype>
        <subtype><typename>Boolean</typename><string>Boolean = boolean()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Boolean</anno>
  <anno>Item</anno>
  <anno>Port</anno>
</spec>
<spec>
  <name>port_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:port_info(Port, Item :: queue_size) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{queue_size, Bytes} | undefined</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = port() | atom()</string></subtype>
        <subtype><typename>Bytes</typename><string>Bytes = integer() &gt;= 0</string></subtype>
      </guard></clause>
  </contract>
  <anno>Bytes</anno>
  <anno>Item</anno>
  <anno>Port</anno>
</spec>
<spec>
  <name>port_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:port_info(Port, Item :: registered_name) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{registered_name, RegisteredName} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[] |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>undefined</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = port() | atom()</string></subtype>
        <subtype><typename>RegisteredName</typename><string>RegisteredName = atom()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>Port</anno>
  <anno>RegisteredName</anno>
</spec>
<spec>
  <name>port_set_data</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:port_set_data(Port, Data) -&gt; true</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = port() | atom()</string></subtype>
        <subtype><typename>Data</typename><string>Data = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Port</anno>
</spec>
<spec>
  <name>port_to_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>port_to_list(Port) -&gt; string()</head>
      <guard>
        <subtype><typename>Port</typename><string>Port = port()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Port</anno>
</spec>
<spec>
  <name>ports</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>erlang:ports() -&gt; [port()]</head></clause>
  </contract>
</spec>
<spec>
  <name>posixtime_to_universaltime</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:posixtime_to_universaltime(P1) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{<seealso marker="calendar#type-date">calendar:date()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="calendar#type-time">calendar:time()</seealso>}</head>
      <guard>
        <subtype><typename>P1</typename><string>P1 = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>P1</anno>
</spec>
<spec>
  <name>pre_loaded</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>pre_loaded() -&gt; [module()]</head></clause>
  </contract>
</spec>
<spec>
  <name>prepare_loading</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:prepare_loading(Module, Code) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>PreparedCode | {error, Reason}</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>Code</typename><string>Code = binary()</string></subtype>
        <subtype><typename>PreparedCode</typename><string>PreparedCode = <seealso marker="#type-prepared_code">prepared_code()</seealso></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = bad_file</string></subtype>
      </guard></clause>
  </contract>
  <anno>Code</anno>
  <anno>Module</anno>
  <anno>PreparedCode</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>process_display</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:process_display(Pid, Type) -&gt; true</head>
      <guard>
        <subtype><typename>Pid</typename><string>Pid = pid()</string></subtype>
        <subtype><typename>Type</typename><string>Type = backtrace</string></subtype>
      </guard></clause>
  </contract>
  <anno>Pid</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>process_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>process_flag(Flag :: trap_exit, Boolean) -&gt; OldBoolean</head>
      <guard>
        <subtype><typename>Boolean</typename><string>Boolean = OldBoolean = boolean()</string></subtype>
        <subtype><typename>OldBoolean</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Boolean</anno>
  <anno>Flag</anno>
  <anno>OldBoolean</anno>
</spec>
<spec>
  <name>process_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>process_flag(Flag :: error_handler, Module) -&gt; OldModule</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = OldModule = atom()</string></subtype>
        <subtype><typename>OldModule</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
  <anno>Module</anno>
  <anno>OldModule</anno>
</spec>
<spec>
  <name>process_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>process_flag(Flag :: min_heap_size, MinHeapSize) -&gt; OldMinHeapSize</head>
      <guard>
        <subtype><typename>MinHeapSize</typename><string>MinHeapSize = OldMinHeapSize = integer() &gt;= 0</string></subtype>
        <subtype><typename>OldMinHeapSize</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
  <anno>MinHeapSize</anno>
  <anno>OldMinHeapSize</anno>
</spec>
<spec>
  <name>process_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>process_flag(Flag :: min_bin_vheap_size, MinBinVHeapSize) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>OldMinBinVHeapSize</head>
      <guard>
        <subtype><typename>MinBinVHeapSize</typename><string>MinBinVHeapSize = OldMinBinVHeapSize = integer() &gt;= 0</string></subtype>
        <subtype><typename>OldMinBinVHeapSize</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
  <anno>MinBinVHeapSize</anno>
  <anno>OldMinBinVHeapSize</anno>
</spec>
<spec>
  <name>process_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>process_flag(Flag :: max_heap_size, MaxHeapSize) -&gt; OldMaxHeapSize</head>
      <guard>
        <subtype><typename>MaxHeapSize</typename><string>MaxHeapSize = OldMaxHeapSize = <seealso marker="#type-max_heap_size">max_heap_size()</seealso></string></subtype>
        <subtype><typename>OldMaxHeapSize</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
  <anno>MaxHeapSize</anno>
  <anno>OldMaxHeapSize</anno>
</spec>
<spec>
  <name>process_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>process_flag(Flag :: message_queue_data, MQD) -&gt; OldMQD</head>
      <guard>
        <subtype><typename>MQD</typename><string>MQD = OldMQD = <seealso marker="#type-message_queue_data">message_queue_data()</seealso></string></subtype>
        <subtype><typename>OldMQD</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
  <anno>MQD</anno>
  <anno>OldMQD</anno>
</spec>
<spec>
  <name>process_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>process_flag(Flag :: priority, Level) -&gt; OldLevel</head>
      <guard>
        <subtype><typename>Level</typename><string>Level = OldLevel = <seealso marker="#type-priority_level">priority_level()</seealso></string></subtype>
        <subtype><typename>OldLevel</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
  <anno>Level</anno>
  <anno>OldLevel</anno>
</spec>
<spec>
  <name>process_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>process_flag(Flag :: save_calls, N) -&gt; OldN</head>
      <guard>
        <subtype><typename>N</typename><string>N = OldN = 0..10000</string></subtype>
        <subtype><typename>OldN</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
  <anno>N</anno>
  <anno>OldN</anno>
</spec>
<spec>
  <name>process_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>process_flag(Flag :: sensitive, Boolean) -&gt; OldBoolean</head>
      <guard>
        <subtype><typename>Boolean</typename><string>Boolean = OldBoolean = boolean()</string></subtype>
        <subtype><typename>OldBoolean</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Boolean</anno>
  <anno>Flag</anno>
  <anno>OldBoolean</anno>
</spec>
<spec>
  <name>process_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>process_flag(Flag :: {monitor_nodes, term()}, Value :: term()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>term()</head></clause>
  </contract>
  <anno>Flag</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>process_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>process_flag(Flag :: monitor_nodes, Value :: term()) -&gt; term()</head></clause>
  </contract>
  <anno>Flag</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>process_flag</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>process_flag(Pid, Flag, Value) -&gt; OldValue</head>
      <guard>
        <subtype><typename>Pid</typename><string>Pid = pid()</string></subtype>
        <subtype><typename>Flag</typename><string>Flag = save_calls</string></subtype>
        <subtype><typename>Value</typename><string>Value = OldValue = integer() &gt;= 0</string></subtype>
        <subtype><typename>OldValue</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
  <anno>OldValue</anno>
  <anno>Pid</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>process_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>process_info(Pid) -&gt; Info</head>
      <guard>
        <subtype><typename>Pid</typename><string>Pid = pid()</string></subtype>
        <subtype><typename>Info</typename><string>Info = [InfoTuple] | undefined</string></subtype>
        <subtype><typename>InfoTuple</typename><string>InfoTuple = <seealso marker="#type-process_info_result_item">process_info_result_item()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Info</anno>
  <anno>InfoTuple</anno>
  <anno>Pid</anno>
</spec>
<spec>
  <name>process_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>process_info(Pid, Item) -&gt; InfoTuple | [] | undefined</head>
      <guard>
        <subtype><typename>Pid</typename><string>Pid = pid()</string></subtype>
        <subtype><typename>Item</typename><string>Item = <seealso marker="#type-process_info_item">process_info_item()</seealso></string></subtype>
        <subtype><typename>InfoTuple</typename><string>InfoTuple = <seealso marker="#type-process_info_result_item">process_info_result_item()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>InfoTuple</anno>
  <anno>Item</anno>
  <anno>Pid</anno>
</spec>
<spec>
  <name>process_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>process_info(Pid, ItemList) -&gt; InfoTupleList | [] | undefined</head>
      <guard>
        <subtype><typename>Pid</typename><string>Pid = pid()</string></subtype>
        <subtype><typename>ItemList</typename><string>ItemList = [Item]</string></subtype>
        <subtype><typename>Item</typename><string>Item = <seealso marker="#type-process_info_item">process_info_item()</seealso></string></subtype>
        <subtype><typename>InfoTupleList</typename><string>InfoTupleList = [InfoTuple]</string></subtype>
        <subtype><typename>InfoTuple</typename><string>InfoTuple = <seealso marker="#type-process_info_result_item">process_info_result_item()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>InfoTuple</anno>
  <anno>InfoTupleList</anno>
  <anno>Item</anno>
  <anno>ItemList</anno>
  <anno>Pid</anno>
</spec>
<spec>
  <name>processes</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>processes() -&gt; [pid()]</head></clause>
  </contract>
</spec>
<spec>
  <name>purge_module</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>purge_module(Module) -&gt; true</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = atom()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Module</anno>
</spec>
<spec>
  <name>put</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>put(Key, Val) -&gt; term()</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = Val = term()</string></subtype>
        <subtype><typename>Val</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Val</anno>
</spec>
<spec>
  <name>raise</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:raise(Class, Reason, Stacktrace) -&gt; no_return()</head>
      <guard>
        <subtype><typename>Class</typename><string>Class = error | exit | throw</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = term()</string></subtype>
        <subtype><typename>Stacktrace</typename><string>Stacktrace = <seealso marker="#type-raise_stacktrace">raise_stacktrace()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Class</anno>
  <anno>Reason</anno>
  <anno>Stacktrace</anno>
</spec>
<spec>
  <name>read_timer</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:read_timer(TimerRef) -&gt; Result</head>
      <guard>
        <subtype><typename>TimerRef</typename><string>TimerRef = reference()</string></subtype>
        <subtype><typename>Time</typename><string>Time = integer() &gt;= 0</string></subtype>
        <subtype><typename>Result</typename><string>Result = Time | false</string></subtype>
      </guard></clause>
  </contract>
  <anno>Result</anno>
  <anno>Time</anno>
  <anno>TimerRef</anno>
</spec>
<spec>
  <name>read_timer</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:read_timer(TimerRef, Options) -&gt; Result | ok</head>
      <guard>
        <subtype><typename>TimerRef</typename><string>TimerRef = reference()</string></subtype>
        <subtype><typename>Async</typename><string>Async = boolean()</string></subtype>
        <subtype><typename>Option</typename><string>Option = {async, Async}</string></subtype>
        <subtype><typename>Options</typename><string>Options = [Option]</string></subtype>
        <subtype><typename>Time</typename><string>Time = integer() &gt;= 0</string></subtype>
        <subtype><typename>Result</typename><string>Result = Time | false</string></subtype>
      </guard></clause>
  </contract>
  <anno>Async</anno>
  <anno>Option</anno>
  <anno>Options</anno>
  <anno>Result</anno>
  <anno>Time</anno>
  <anno>TimerRef</anno>
</spec>
<spec>
  <name>ref_to_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>ref_to_list(Ref) -&gt; string()</head>
      <guard>
        <subtype><typename>Ref</typename><string>Ref = reference()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Ref</anno>
</spec>
<spec>
  <name>register</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>register(RegName, PidOrPort) -&gt; true</head>
      <guard>
        <subtype><typename>RegName</typename><string>RegName = atom()</string></subtype>
        <subtype><typename>PidOrPort</typename><string>PidOrPort = port() | pid()</string></subtype>
      </guard></clause>
  </contract>
  <anno>PidOrPort</anno>
  <anno>RegName</anno>
</spec>
<spec>
  <name>registered</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>registered() -&gt; [RegName]</head>
      <guard>
        <subtype><typename>RegName</typename><string>RegName = atom()</string></subtype>
      </guard></clause>
  </contract>
  <anno>RegName</anno>
</spec>
<spec>
  <name>resume_process</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:resume_process(Suspendee) -&gt; true</head>
      <guard>
        <subtype><typename>Suspendee</typename><string>Suspendee = pid()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Suspendee</anno>
</spec>
<spec>
  <name>round</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>round(Number) -&gt; integer()</head>
      <guard>
        <subtype><typename>Number</typename><string>Number = number()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Number</anno>
</spec>
<spec>
  <name>self</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>self() -&gt; pid()</head></clause>
  </contract>
</spec>
<spec>
  <name>send</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:send(Dest, Msg) -&gt; Msg</head>
      <guard>
        <subtype><typename>Dest</typename><string>Dest = <seealso marker="#type-dst">dst()</seealso></string></subtype>
        <subtype><typename>Msg</typename><string>Msg = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Dest</anno>
  <anno>Msg</anno>
</spec>
<spec>
  <name>send</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:send(Dest, Msg, Options) -&gt; Res</head>
      <guard>
        <subtype><typename>Dest</typename><string>Dest = <seealso marker="#type-dst">dst()</seealso></string></subtype>
        <subtype><typename>Msg</typename><string>Msg = term()</string></subtype>
        <subtype><typename>Options</typename><string>Options = [nosuspend | noconnect]</string></subtype>
        <subtype><typename>Res</typename><string>Res = ok | nosuspend | noconnect</string></subtype>
      </guard></clause>
  </contract>
  <anno>Dest</anno>
  <anno>Msg</anno>
  <anno>Options</anno>
  <anno>Res</anno>
</spec>
<spec>
  <name>send_after</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:send_after(Time, Dest, Msg) -&gt; TimerRef</head>
      <guard>
        <subtype><typename>Time</typename><string>Time = integer() &gt;= 0</string></subtype>
        <subtype><typename>Dest</typename><string>Dest = pid() | atom()</string></subtype>
        <subtype><typename>Msg</typename><string>Msg = term()</string></subtype>
        <subtype><typename>TimerRef</typename><string>TimerRef = reference()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Dest</anno>
  <anno>Msg</anno>
  <anno>Time</anno>
  <anno>TimerRef</anno>
</spec>
<spec>
  <name>send_after</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>erlang:send_after(Time, Dest, Msg, Options) -&gt; TimerRef</head>
      <guard>
        <subtype><typename>Time</typename><string>Time = integer()</string></subtype>
        <subtype><typename>Dest</typename><string>Dest = pid() | atom()</string></subtype>
        <subtype><typename>Msg</typename><string>Msg = term()</string></subtype>
        <subtype><typename>Options</typename><string>Options = [Option]</string></subtype>
        <subtype><typename>Abs</typename><string>Abs = boolean()</string></subtype>
        <subtype><typename>Option</typename><string>Option = {abs, Abs}</string></subtype>
        <subtype><typename>TimerRef</typename><string>TimerRef = reference()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Abs</anno>
  <anno>Dest</anno>
  <anno>Msg</anno>
  <anno>Option</anno>
  <anno>Options</anno>
  <anno>Time</anno>
  <anno>TimerRef</anno>
</spec>
<spec>
  <name>send_nosuspend</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:send_nosuspend(Dest, Msg) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Dest</typename><string>Dest = <seealso marker="#type-dst">dst()</seealso></string></subtype>
        <subtype><typename>Msg</typename><string>Msg = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Dest</anno>
  <anno>Msg</anno>
</spec>
<spec>
  <name>send_nosuspend</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:send_nosuspend(Dest, Msg, Options) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Dest</typename><string>Dest = <seealso marker="#type-dst">dst()</seealso></string></subtype>
        <subtype><typename>Msg</typename><string>Msg = term()</string></subtype>
        <subtype><typename>Options</typename><string>Options = [noconnect]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Dest</anno>
  <anno>Msg</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>seq_trace</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:seq_trace(P1, P2) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-seq_trace_info_returns">seq_trace_info_returns()</seealso> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{term(), term(), term(), term(), term()}</head>
      <guard>
        <subtype><typename>P1</typename><string>P1 = atom()</string></subtype>
        <subtype><typename>P2</typename><string>P2 = boolean() | {integer(), integer()} | integer() | []</string></subtype>
      </guard></clause>
  </contract>
  <anno>P1</anno>
  <anno>P2</anno>
</spec>
<spec>
  <name>seq_trace_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:seq_trace_info(What :: send) -&gt; {send, boolean()}</head></clause>
  </contract>
  <anno>What</anno>
</spec>
<spec>
  <name>seq_trace_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:seq_trace_info(What :: 'receive') -&gt; {'receive', boolean()}</head></clause>
  </contract>
  <anno>What</anno>
</spec>
<spec>
  <name>seq_trace_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:seq_trace_info(What :: print) -&gt; {print, boolean()}</head></clause>
  </contract>
  <anno>What</anno>
</spec>
<spec>
  <name>seq_trace_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:seq_trace_info(What :: timestamp) -&gt; {timestamp, boolean()}</head></clause>
  </contract>
  <anno>What</anno>
</spec>
<spec>
  <name>seq_trace_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:seq_trace_info(What :: monotonic_timestamp) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{timestamp, boolean()}</head></clause>
  </contract>
  <anno>What</anno>
</spec>
<spec>
  <name>seq_trace_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:seq_trace_info(What :: strict_monotonic_timestamp) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{strict_monotonic_timestamp, boolean()}</head></clause>
  </contract>
  <anno>What</anno>
</spec>
<spec>
  <name>seq_trace_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:seq_trace_info(What :: label) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[] | {label, integer() &gt;= 0}</head></clause>
  </contract>
  <anno>What</anno>
</spec>
<spec>
  <name>seq_trace_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:seq_trace_info(What :: serial) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[] |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{serial,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{integer() &gt;= 0, integer() &gt;= 0}}</head></clause>
  </contract>
  <anno>What</anno>
</spec>
<spec>
  <name>seq_trace_print</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:seq_trace_print(P1) -&gt; boolean()</head>
      <guard>
        <subtype><typename>P1</typename><string>P1 = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>P1</anno>
</spec>
<spec>
  <name>seq_trace_print</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:seq_trace_print(P1, P2) -&gt; boolean()</head>
      <guard>
        <subtype><typename>P1</typename><string>P1 = atom() | integer()</string></subtype>
        <subtype><typename>P2</typename><string>P2 = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>P1</anno>
  <anno>P2</anno>
</spec>
<spec>
  <name>set_cookie</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:set_cookie(Node, Cookie) -&gt; true</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = node()</string></subtype>
        <subtype><typename>Cookie</typename><string>Cookie = atom()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Cookie</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>set_cpu_topology</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>setelement</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>setelement(Index, Tuple1, Value) -&gt; Tuple2</head>
      <guard>
        <subtype><typename>Index</typename><string>Index = integer() &gt;= 1</string></subtype>
        <subtype><typename>Tuple1</typename><string>Tuple1 = Tuple2 = tuple()</string></subtype>
        <subtype><typename>Tuple2</typename><string/></subtype>
        <subtype><typename>Value</typename><string>Value = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Index</anno>
  <anno>Tuple1</anno>
  <anno>Tuple2</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>setnode</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:setnode(P1, P2) -&gt; true</head>
      <guard>
        <subtype><typename>P1</typename><string>P1 = atom()</string></subtype>
        <subtype><typename>P2</typename><string>P2 = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>P1</anno>
  <anno>P2</anno>
</spec>
<spec>
  <name>setnode</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:setnode(P1, P2, P3) -&gt; true</head>
      <guard>
        <subtype><typename>P1</typename><string>P1 = atom()</string></subtype>
        <subtype><typename>P2</typename><string>P2 = port()</string></subtype>
        <subtype><typename>P3</typename><string>P3 = {term(), term(), term(), term()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>P1</anno>
  <anno>P2</anno>
  <anno>P3</anno>
</spec>
<spec>
  <name>size</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>size(Item) -&gt; integer() &gt;= 0</head>
      <guard>
        <subtype><typename>Item</typename><string>Item = tuple() | binary()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>spawn</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>spawn(Fun) -&gt; pid()</head>
      <guard>
        <subtype><typename>Fun</typename><string>Fun = function()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
</spec>
<spec>
  <name>spawn</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>spawn(Node, Fun) -&gt; pid()</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = node()</string></subtype>
        <subtype><typename>Fun</typename><string>Fun = function()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>spawn</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>spawn(Module, Function, Args) -&gt; pid()</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>Function</typename><string>Function = atom()</string></subtype>
        <subtype><typename>Args</typename><string>Args = [term()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
</spec>
<spec>
  <name>spawn</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>spawn(Node, Module, Function, Args) -&gt; pid()</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = node()</string></subtype>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>Function</typename><string>Function = atom()</string></subtype>
        <subtype><typename>Args</typename><string>Args = [term()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>spawn_link</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>spawn_link(Fun) -&gt; pid()</head>
      <guard>
        <subtype><typename>Fun</typename><string>Fun = function()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
</spec>
<spec>
  <name>spawn_link</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>spawn_link(Node, Fun) -&gt; pid()</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = node()</string></subtype>
        <subtype><typename>Fun</typename><string>Fun = function()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>spawn_link</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>spawn_link(Module, Function, Args) -&gt; pid()</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>Function</typename><string>Function = atom()</string></subtype>
        <subtype><typename>Args</typename><string>Args = [term()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
</spec>
<spec>
  <name>spawn_link</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>spawn_link(Node, Module, Function, Args) -&gt; pid()</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = node()</string></subtype>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>Function</typename><string>Function = atom()</string></subtype>
        <subtype><typename>Args</typename><string>Args = [term()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>spawn_monitor</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>spawn_monitor(Fun) -&gt; {pid(), reference()}</head>
      <guard>
        <subtype><typename>Fun</typename><string>Fun = function()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
</spec>
<spec>
  <name>spawn_monitor</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>spawn_monitor(Module, Function, Args) -&gt; {pid(), reference()}</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>Function</typename><string>Function = atom()</string></subtype>
        <subtype><typename>Args</typename><string>Args = [term()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
</spec>
<spec>
  <name>spawn_opt</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:spawn_opt(Tuple :: {Module, Function, Args, Options}) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>pid() | {pid(), reference()}</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>Function</typename><string>Function = atom()</string></subtype>
        <subtype><typename>Args</typename><string>Args = [term()]</string></subtype>
        <subtype><typename>Options</typename><string>Options = [Option]</string></subtype>
        <subtype><typename>Option</typename><string>Option = <br/><nbsp/><nbsp/><nbsp/><nbsp/>link |<br/><nbsp/><nbsp/><nbsp/><nbsp/>monitor |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{priority, Level :: <seealso marker="#type-priority_level">priority_level()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{fullsweep_after, Number :: integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{min_heap_size, Size :: integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{max_heap_size, Size :: <seealso marker="#type-max_heap_size">max_heap_size()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{min_bin_vheap_size, VSize :: integer() &gt;= 0}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Level</anno>
  <anno>Module</anno>
  <anno>Number</anno>
  <anno>Option</anno>
  <anno>Options</anno>
  <anno>Size</anno>
  <anno>Tuple</anno>
  <anno>VSize</anno>
</spec>
<spec>
  <name>spawn_opt</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>spawn_opt(Fun, Options) -&gt; pid() | {pid(), reference()}</head>
      <guard>
        <subtype><typename>Fun</typename><string>Fun = function()</string></subtype>
        <subtype><typename>Options</typename><string>Options = [<seealso marker="#type-spawn_opt_option">spawn_opt_option()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>spawn_opt</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>spawn_opt(Node, Fun, Options) -&gt; pid() | {pid(), reference()}</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = node()</string></subtype>
        <subtype><typename>Fun</typename><string>Fun = function()</string></subtype>
        <subtype><typename>Options</typename><string>Options = [<seealso marker="#type-spawn_opt_option">spawn_opt_option()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
  <anno>Node</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>spawn_opt</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>spawn_opt(Module, Function, Args, Options) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>pid() | {pid(), reference()}</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>Function</typename><string>Function = atom()</string></subtype>
        <subtype><typename>Args</typename><string>Args = [term()]</string></subtype>
        <subtype><typename>Options</typename><string>Options = [<seealso marker="#type-spawn_opt_option">spawn_opt_option()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>spawn_opt</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>spawn_opt(Node, Module, Function, Args, Options) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>pid() | {pid(), reference()}</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = node()</string></subtype>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>Function</typename><string>Function = atom()</string></subtype>
        <subtype><typename>Args</typename><string>Args = [term()]</string></subtype>
        <subtype><typename>Options</typename><string>Options = [<seealso marker="#type-spawn_opt_option">spawn_opt_option()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>Node</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>split_binary</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>split_binary(Bin, Pos) -&gt; {binary(), binary()}</head>
      <guard>
        <subtype><typename>Bin</typename><string>Bin = binary()</string></subtype>
        <subtype><typename>Pos</typename><string>Pos = integer() &gt;= 0</string></subtype>
      </guard></clause>
  </contract>
  <anno>Bin</anno>
  <anno>Pos</anno>
</spec>
<spec>
  <name>start_timer</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:start_timer(Time, Dest, Msg) -&gt; TimerRef</head>
      <guard>
        <subtype><typename>Time</typename><string>Time = integer() &gt;= 0</string></subtype>
        <subtype><typename>Dest</typename><string>Dest = pid() | atom()</string></subtype>
        <subtype><typename>Msg</typename><string>Msg = term()</string></subtype>
        <subtype><typename>TimerRef</typename><string>TimerRef = reference()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Dest</anno>
  <anno>Msg</anno>
  <anno>Time</anno>
  <anno>TimerRef</anno>
</spec>
<spec>
  <name>start_timer</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>erlang:start_timer(Time, Dest, Msg, Options) -&gt; TimerRef</head>
      <guard>
        <subtype><typename>Time</typename><string>Time = integer()</string></subtype>
        <subtype><typename>Dest</typename><string>Dest = pid() | atom()</string></subtype>
        <subtype><typename>Msg</typename><string>Msg = term()</string></subtype>
        <subtype><typename>Options</typename><string>Options = [Option]</string></subtype>
        <subtype><typename>Abs</typename><string>Abs = boolean()</string></subtype>
        <subtype><typename>Option</typename><string>Option = {abs, Abs}</string></subtype>
        <subtype><typename>TimerRef</typename><string>TimerRef = reference()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Abs</anno>
  <anno>Dest</anno>
  <anno>Msg</anno>
  <anno>Option</anno>
  <anno>Options</anno>
  <anno>Time</anno>
  <anno>TimerRef</anno>
</spec>
<spec>
  <name>statistics</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>statistics(Item :: active_tasks) -&gt; [ActiveTasks]</head>
      <guard>
        <subtype><typename>ActiveTasks</typename><string>ActiveTasks = integer() &gt;= 0</string></subtype>
      </guard></clause>
  </contract>
  <anno>ActiveTasks</anno>
  <anno>Item</anno>
</spec>
<spec>
  <name>statistics</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>statistics(Item :: active_tasks_all) -&gt; [ActiveTasks]</head>
      <guard>
        <subtype><typename>ActiveTasks</typename><string>ActiveTasks = integer() &gt;= 0</string></subtype>
      </guard></clause>
  </contract>
  <anno>ActiveTasks</anno>
  <anno>Item</anno>
</spec>
<spec>
  <name>statistics</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>statistics(Item :: context_switches) -&gt; {ContextSwitches, 0}</head>
      <guard>
        <subtype><typename>ContextSwitches</typename><string>ContextSwitches = integer() &gt;= 0</string></subtype>
      </guard></clause>
  </contract>
  <anno>ContextSwitches</anno>
  <anno>Item</anno>
</spec>
<spec>
  <name>statistics</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>statistics(Item :: exact_reductions) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{Total_Exact_Reductions,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Exact_Reductions_Since_Last_Call}</head>
      <guard>
        <subtype><typename>Total_Exact_Reductions</typename><string>Total_Exact_Reductions = Exact_Reductions_Since_Last_Call = integer() &gt;= 0</string></subtype>
        <subtype><typename>Exact_Reductions_Since_Last_Call</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Exact_Reductions_Since_Last_Call</anno>
  <anno>Item</anno>
  <anno>Total_Exact_Reductions</anno>
</spec>
<spec>
  <name>statistics</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>statistics(Item :: garbage_collection) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{Number_of_GCs, Words_Reclaimed, 0}</head>
      <guard>
        <subtype><typename>Number_of_GCs</typename><string>Number_of_GCs = Words_Reclaimed = integer() &gt;= 0</string></subtype>
        <subtype><typename>Words_Reclaimed</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>Number_of_GCs</anno>
  <anno>Words_Reclaimed</anno>
</spec>
<spec>
  <name>statistics</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>statistics(Item :: io) -&gt; {{input, Input}, {output, Output}}</head>
      <guard>
        <subtype><typename>Input</typename><string>Input = Output = integer() &gt;= 0</string></subtype>
        <subtype><typename>Output</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Input</anno>
  <anno>Item</anno>
  <anno>Output</anno>
</spec>
<spec>
  <name>statistics</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>statistics(Item :: microstate_accounting) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[MSAcc_Thread] | undefined</head>
      <guard>
        <subtype><typename>MSAcc_Thread</typename><string>MSAcc_Thread = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#{type := MSAcc_Thread_Type,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>id := MSAcc_Thread_Id,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>counters := MSAcc_Counters}</string></subtype>
        <subtype><typename>MSAcc_Thread_Type</typename><string>MSAcc_Thread_Type = scheduler | async | aux</string></subtype>
        <subtype><typename>MSAcc_Thread_Id</typename><string>MSAcc_Thread_Id = integer() &gt;= 0</string></subtype>
        <subtype><typename>MSAcc_Counters</typename><string>MSAcc_Counters = #{MSAcc_Thread_State =&gt; integer() &gt;= 0}</string></subtype>
        <subtype><typename>MSAcc_Thread_State</typename><string>MSAcc_Thread_State = <br/><nbsp/><nbsp/><nbsp/><nbsp/>alloc |<br/><nbsp/><nbsp/><nbsp/><nbsp/>aux |<br/><nbsp/><nbsp/><nbsp/><nbsp/>bif |<br/><nbsp/><nbsp/><nbsp/><nbsp/>busy_wait |<br/><nbsp/><nbsp/><nbsp/><nbsp/>check_io |<br/><nbsp/><nbsp/><nbsp/><nbsp/>emulator |<br/><nbsp/><nbsp/><nbsp/><nbsp/>ets |<br/><nbsp/><nbsp/><nbsp/><nbsp/>gc |<br/><nbsp/><nbsp/><nbsp/><nbsp/>gc_fullsweep |<br/><nbsp/><nbsp/><nbsp/><nbsp/>nif |<br/><nbsp/><nbsp/><nbsp/><nbsp/>other |<br/><nbsp/><nbsp/><nbsp/><nbsp/>port |<br/><nbsp/><nbsp/><nbsp/><nbsp/>send |<br/><nbsp/><nbsp/><nbsp/><nbsp/>sleep |<br/><nbsp/><nbsp/><nbsp/><nbsp/>timers</string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>MSAcc_Counters</anno>
  <anno>MSAcc_Thread</anno>
  <anno>MSAcc_Thread_Id</anno>
  <anno>MSAcc_Thread_State</anno>
  <anno>MSAcc_Thread_Type</anno>
</spec>
<spec>
  <name>statistics</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>statistics(Item :: reductions) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{Total_Reductions, Reductions_Since_Last_Call}</head>
      <guard>
        <subtype><typename>Total_Reductions</typename><string>Total_Reductions = Reductions_Since_Last_Call = integer() &gt;= 0</string></subtype>
        <subtype><typename>Reductions_Since_Last_Call</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>Reductions_Since_Last_Call</anno>
  <anno>Total_Reductions</anno>
</spec>
<spec>
  <name>statistics</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>statistics(Item :: run_queue) -&gt; integer() &gt;= 0</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>statistics</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>statistics(Item :: run_queue_lengths) -&gt; [RunQueueLength]</head>
      <guard>
        <subtype><typename>RunQueueLength</typename><string>RunQueueLength = integer() &gt;= 0</string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>RunQueueLength</anno>
</spec>
<spec>
  <name>statistics</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>statistics(Item :: run_queue_lengths_all) -&gt; [RunQueueLength]</head>
      <guard>
        <subtype><typename>RunQueueLength</typename><string>RunQueueLength = integer() &gt;= 0</string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>RunQueueLength</anno>
</spec>
<spec>
  <name>statistics</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>statistics(Item :: runtime) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{Total_Run_Time, Time_Since_Last_Call}</head>
      <guard>
        <subtype><typename>Total_Run_Time</typename><string>Total_Run_Time = Time_Since_Last_Call = integer() &gt;= 0</string></subtype>
        <subtype><typename>Time_Since_Last_Call</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>Time_Since_Last_Call</anno>
  <anno>Total_Run_Time</anno>
</spec>
<spec>
  <name>statistics</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>statistics(Item :: scheduler_wall_time) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{SchedulerId, ActiveTime, TotalTime}] | undefined</head>
      <guard>
        <subtype><typename>SchedulerId</typename><string>SchedulerId = integer() &gt;= 1</string></subtype>
        <subtype><typename>ActiveTime</typename><string>ActiveTime = TotalTime = integer() &gt;= 0</string></subtype>
        <subtype><typename>TotalTime</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>ActiveTime</anno>
  <anno>Item</anno>
  <anno>SchedulerId</anno>
  <anno>TotalTime</anno>
</spec>
<spec>
  <name>statistics</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>statistics(Item :: scheduler_wall_time_all) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{SchedulerId, ActiveTime, TotalTime}] | undefined</head>
      <guard>
        <subtype><typename>SchedulerId</typename><string>SchedulerId = integer() &gt;= 1</string></subtype>
        <subtype><typename>ActiveTime</typename><string>ActiveTime = TotalTime = integer() &gt;= 0</string></subtype>
        <subtype><typename>TotalTime</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>ActiveTime</anno>
  <anno>Item</anno>
  <anno>SchedulerId</anno>
  <anno>TotalTime</anno>
</spec>
<spec>
  <name>statistics</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>statistics(Item :: total_active_tasks) -&gt; ActiveTasks</head>
      <guard>
        <subtype><typename>ActiveTasks</typename><string>ActiveTasks = integer() &gt;= 0</string></subtype>
      </guard></clause>
  </contract>
  <anno>ActiveTasks</anno>
  <anno>Item</anno>
</spec>
<spec>
  <name>statistics</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>statistics(Item :: total_active_tasks_all) -&gt; ActiveTasks</head>
      <guard>
        <subtype><typename>ActiveTasks</typename><string>ActiveTasks = integer() &gt;= 0</string></subtype>
      </guard></clause>
  </contract>
  <anno>ActiveTasks</anno>
  <anno>Item</anno>
</spec>
<spec>
  <name>statistics</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>statistics(Item :: total_run_queue_lengths) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>TotalRunQueueLengths</head>
      <guard>
        <subtype><typename>TotalRunQueueLengths</typename><string>TotalRunQueueLengths = integer() &gt;= 0</string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>TotalRunQueueLengths</anno>
</spec>
<spec>
  <name>statistics</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>statistics(Item :: total_run_queue_lengths_all) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>TotalRunQueueLengths</head>
      <guard>
        <subtype><typename>TotalRunQueueLengths</typename><string>TotalRunQueueLengths = integer() &gt;= 0</string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>TotalRunQueueLengths</anno>
</spec>
<spec>
  <name>statistics</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>statistics(Item :: wall_clock) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{Total_Wallclock_Time,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Wallclock_Time_Since_Last_Call}</head>
      <guard>
        <subtype><typename>Total_Wallclock_Time</typename><string>Total_Wallclock_Time = Wallclock_Time_Since_Last_Call = integer() &gt;= 0</string></subtype>
        <subtype><typename>Wallclock_Time_Since_Last_Call</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Item</anno>
  <anno>Total_Wallclock_Time</anno>
  <anno>Wallclock_Time_Since_Last_Call</anno>
</spec>
<spec>
  <name>subtract</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:subtract(X1 :: [term()], X2 :: [term()]) -&gt; [term()]</head></clause>
  </contract>
  <anno>X1</anno>
  <anno>X2</anno>
</spec>
<spec>
  <name>suspend_process</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:suspend_process(Suspendee) -&gt; true</head>
      <guard>
        <subtype><typename>Suspendee</typename><string>Suspendee = pid()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Suspendee</anno>
</spec>
<spec>
  <name>suspend_process</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:suspend_process(Suspendee, OptList) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Suspendee</typename><string>Suspendee = pid()</string></subtype>
        <subtype><typename>OptList</typename><string>OptList = [Opt]</string></subtype>
        <subtype><typename>Opt</typename><string>Opt = unless_suspending | asynchronous</string></subtype>
      </guard></clause>
  </contract>
  <anno>Opt</anno>
  <anno>OptList</anno>
  <anno>Suspendee</anno>
</spec>
<spec>
  <name>system_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:system_flag(Flag :: backtrace_depth, Depth) -&gt; OldDepth</head>
      <guard>
        <subtype><typename>Depth</typename><string>Depth = OldDepth = integer() &gt;= 0</string></subtype>
        <subtype><typename>OldDepth</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Depth</anno>
  <anno>Flag</anno>
  <anno>OldDepth</anno>
</spec>
<spec>
  <name>system_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:system_flag(Flag :: cpu_topology, CpuTopology) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>OldCpuTopology</head>
      <guard>
        <subtype><typename>CpuTopology</typename><string>CpuTopology = OldCpuTopology = <seealso marker="#type-cpu_topology">cpu_topology()</seealso></string></subtype>
        <subtype><typename>OldCpuTopology</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>CpuTopology</anno>
  <anno>Flag</anno>
  <anno>OldCpuTopology</anno>
</spec>
<spec>
  <name>system_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:system_flag(Flag :: dirty_cpu_schedulers_online,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>DirtyCPUSchedulersOnline) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>OldDirtyCPUSchedulersOnline</head>
      <guard>
        <subtype><typename>DirtyCPUSchedulersOnline</typename><string>DirtyCPUSchedulersOnline = OldDirtyCPUSchedulersOnline = integer() &gt;= 1</string></subtype>
        <subtype><typename>OldDirtyCPUSchedulersOnline</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>DirtyCPUSchedulersOnline</anno>
  <anno>Flag</anno>
  <anno>OldDirtyCPUSchedulersOnline</anno>
</spec>
<spec>
  <name>system_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:system_flag(Flag :: fullsweep_after, Number) -&gt; OldNumber</head>
      <guard>
        <subtype><typename>Number</typename><string>Number = OldNumber = integer() &gt;= 0</string></subtype>
        <subtype><typename>OldNumber</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
  <anno>Number</anno>
  <anno>OldNumber</anno>
</spec>
<spec>
  <name>system_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:system_flag(Flag :: microstate_accounting, Action) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>OldState</head>
      <guard>
        <subtype><typename>Action</typename><string>Action = true | false | reset</string></subtype>
        <subtype><typename>OldState</typename><string>OldState = true | false</string></subtype>
      </guard></clause>
  </contract>
  <anno>Action</anno>
  <anno>Flag</anno>
  <anno>OldState</anno>
</spec>
<spec>
  <name>system_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:system_flag(Flag :: min_heap_size, MinHeapSize) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>OldMinHeapSize</head>
      <guard>
        <subtype><typename>MinHeapSize</typename><string>MinHeapSize = OldMinHeapSize = integer() &gt;= 0</string></subtype>
        <subtype><typename>OldMinHeapSize</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
  <anno>MinHeapSize</anno>
  <anno>OldMinHeapSize</anno>
</spec>
<spec>
  <name>system_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:system_flag(Flag :: min_bin_vheap_size, MinBinVHeapSize) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>OldMinBinVHeapSize</head>
      <guard>
        <subtype><typename>MinBinVHeapSize</typename><string>MinBinVHeapSize = OldMinBinVHeapSize = integer() &gt;= 0</string></subtype>
        <subtype><typename>OldMinBinVHeapSize</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
  <anno>MinBinVHeapSize</anno>
  <anno>OldMinBinVHeapSize</anno>
</spec>
<spec>
  <name>system_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:system_flag(Flag :: max_heap_size, MaxHeapSize) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>OldMaxHeapSize</head>
      <guard>
        <subtype><typename>MaxHeapSize</typename><string>MaxHeapSize = OldMaxHeapSize = <seealso marker="#type-max_heap_size">max_heap_size()</seealso></string></subtype>
        <subtype><typename>OldMaxHeapSize</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
  <anno>MaxHeapSize</anno>
  <anno>OldMaxHeapSize</anno>
</spec>
<spec>
  <name>system_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:system_flag(Flag :: multi_scheduling, BlockState) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>OldBlockState</head>
      <guard>
        <subtype><typename>BlockState</typename><string>BlockState = block | unblock | block_normal | unblock_normal</string></subtype>
        <subtype><typename>OldBlockState</typename><string>OldBlockState = blocked | disabled | enabled</string></subtype>
      </guard></clause>
  </contract>
  <anno>BlockState</anno>
  <anno>Flag</anno>
  <anno>OldBlockState</anno>
</spec>
<spec>
  <name>system_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:system_flag(Flag :: scheduler_bind_type, How) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>OldBindType</head>
      <guard>
        <subtype><typename>How</typename><string>How = <seealso marker="#type-scheduler_bind_type">scheduler_bind_type()</seealso> | default_bind</string></subtype>
        <subtype><typename>OldBindType</typename><string>OldBindType = <seealso marker="#type-scheduler_bind_type">scheduler_bind_type()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
  <anno>How</anno>
  <anno>OldBindType</anno>
</spec>
<spec>
  <name>system_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:system_flag(Flag :: scheduler_wall_time, Boolean) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>OldBoolean</head>
      <guard>
        <subtype><typename>Boolean</typename><string>Boolean = OldBoolean = boolean()</string></subtype>
        <subtype><typename>OldBoolean</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Boolean</anno>
  <anno>Flag</anno>
  <anno>OldBoolean</anno>
</spec>
<spec>
  <name>system_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:system_flag(Flag :: schedulers_online, SchedulersOnline) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>OldSchedulersOnline</head>
      <guard>
        <subtype><typename>SchedulersOnline</typename><string>SchedulersOnline = OldSchedulersOnline = integer() &gt;= 1</string></subtype>
        <subtype><typename>OldSchedulersOnline</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
  <anno>OldSchedulersOnline</anno>
  <anno>SchedulersOnline</anno>
</spec>
<spec>
  <name>system_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:system_flag(Flag :: trace_control_word, TCW) -&gt; OldTCW</head>
      <guard>
        <subtype><typename>TCW</typename><string>TCW = OldTCW = integer() &gt;= 0</string></subtype>
        <subtype><typename>OldTCW</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
  <anno>OldTCW</anno>
  <anno>TCW</anno>
</spec>
<spec>
  <name>system_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:system_flag(Flag :: time_offset, Value :: finalize) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>OldState</head>
      <guard>
        <subtype><typename>OldState</typename><string>OldState = preliminary | final | volatile</string></subtype>
      </guard></clause>
  </contract>
  <anno>Flag</anno>
  <anno>OldState</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>system_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:system_flag(Flag :: internal_cpu_topology, Value :: term()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>term()</head></clause>
  </contract>
  <anno>Flag</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>system_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:system_flag(Flag :: sequential_tracer,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Value ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>pid() | port() | {module(), term()} | false) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>pid() | port() | false</head></clause>
  </contract>
  <anno>Flag</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>system_flag</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:system_flag(Flag :: 1, Value :: 0) -&gt; true</head></clause>
  </contract>
  <anno>Flag</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: allocated_areas) -&gt; [tuple()]</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: allocator) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{Allocator, Version, Features, Settings}</head>
      <guard>
        <subtype><typename>Allocator</typename><string>Allocator = undefined | glibc</string></subtype>
        <subtype><typename>Version</typename><string>Version = [integer() &gt;= 0]</string></subtype>
        <subtype><typename>Features</typename><string>Features = [atom()]</string></subtype>
        <subtype><typename>Settings</typename><string>Settings = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[{Subsystem :: atom(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{Parameter :: atom(), Value :: term()}]}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Allocator</anno>
  <anno>Features</anno>
  <anno>Item</anno>
  <anno>Parameter</anno>
  <anno>Settings</anno>
  <anno>Subsystem</anno>
  <anno>Value</anno>
  <anno>Version</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: alloc_util_allocators) -&gt; [Alloc]</head>
      <guard>
        <subtype><typename>Alloc</typename><string>Alloc = atom()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Alloc</anno>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: {allocator, Alloc}) -&gt; [term()]</head>
      <guard>
        <subtype><typename>Alloc</typename><string>Alloc = atom()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Alloc</anno>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: {allocator_sizes, Alloc}) -&gt; [term()]</head>
      <guard>
        <subtype><typename>Alloc</typename><string>Alloc = atom()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Alloc</anno>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: atom_count) -&gt; integer() &gt;= 1</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: atom_limit) -&gt; integer() &gt;= 1</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: build_type) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>opt |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>debug |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>purify |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>quantify |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>purecov |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>gcov |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>valgrind |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>gprof |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>lcnt |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>frmptr</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: c_compiler_used) -&gt; {atom(), term()}</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: check_io) -&gt; [term()]</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: compat_rel) -&gt; integer()</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: cpu_topology) -&gt; CpuTopology</head>
      <guard>
        <subtype><typename>CpuTopology</typename><string>CpuTopology = <seealso marker="#type-cpu_topology">cpu_topology()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>CpuTopology</anno>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{cpu_topology, defined | detected | used}) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>CpuTopology</head>
      <guard>
        <subtype><typename>CpuTopology</typename><string>CpuTopology = <seealso marker="#type-cpu_topology">cpu_topology()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>CpuTopology</anno>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: creation) -&gt; integer()</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: debug_compiled) -&gt; boolean()</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: delayed_node_table_gc) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>infinity | integer() &gt;= 0</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: dirty_cpu_schedulers) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer() &gt;= 0</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: dirty_cpu_schedulers_online) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer() &gt;= 0</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: dirty_io_schedulers) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer() &gt;= 0</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: dist) -&gt; binary()</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: dist_buf_busy_limit) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer() &gt;= 0</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: dist_ctrl) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{Node :: node(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ControllingEntity :: port() | pid()}</head></clause>
  </contract>
  <anno>ControllingEntity</anno>
  <anno>Item</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: driver_version) -&gt; string()</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: dynamic_trace) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>none | dtrace | systemtap</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: dynamic_trace_probes) -&gt; boolean()</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: elib_malloc) -&gt; false</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: eager_check_io) -&gt; boolean()</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: ets_limit) -&gt; integer() &gt;= 1</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: fullsweep_after) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{fullsweep_after, integer() &gt;= 0}</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: garbage_collection) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{atom(), integer()}]</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: heap_sizes) -&gt; [integer() &gt;= 0]</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: heap_type) -&gt; private</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: info) -&gt; binary()</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: kernel_poll) -&gt; boolean()</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: loaded) -&gt; binary()</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>logical_processors |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>logical_processors_available |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>logical_processors_online) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>unknown | integer() &gt;= 1</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: machine) -&gt; string()</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: max_heap_size) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{max_heap_size,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>MaxHeapSize :: <seealso marker="#type-max_heap_size">max_heap_size()</seealso>}</head></clause>
  </contract>
  <anno>Item</anno>
  <anno>MaxHeapSize</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: message_queue_data) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-message_queue_data">message_queue_data()</seealso></head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: min_heap_size) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{min_heap_size,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>MinHeapSize :: integer() &gt;= 1}</head></clause>
  </contract>
  <anno>Item</anno>
  <anno>MinHeapSize</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: min_bin_vheap_size) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{min_bin_vheap_size,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>MinBinVHeapSize :: integer() &gt;= 1}</head></clause>
  </contract>
  <anno>Item</anno>
  <anno>MinBinVHeapSize</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: modified_timing_level) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer() | undefined</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: multi_scheduling) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>disabled |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>blocked |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>blocked_normal |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>enabled</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: multi_scheduling_blockers) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[Pid :: pid()]</head></clause>
  </contract>
  <anno>Item</anno>
  <anno>Pid</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: nif_version) -&gt; string()</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: normal_multi_scheduling_blockers) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[Pid :: pid()]</head></clause>
  </contract>
  <anno>Item</anno>
  <anno>Pid</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: otp_release) -&gt; string()</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: os_monotonic_time_source) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{atom(), term()}]</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: os_system_time_source) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{atom(), term()}]</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: port_count) -&gt; integer() &gt;= 0</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: port_limit) -&gt; integer() &gt;= 1</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: process_count) -&gt; integer() &gt;= 1</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: process_limit) -&gt; integer() &gt;= 1</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: procs) -&gt; binary()</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: scheduler_bind_type) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>spread |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>processor_spread |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>thread_spread |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>thread_no_node_processor_spread |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>no_node_processor_spread |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>no_node_thread_spread |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>no_spread |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>unbound</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: scheduler_bindings) -&gt; tuple()</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: scheduler_id) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>SchedulerId :: integer() &gt;= 1</head></clause>
  </contract>
  <anno>Item</anno>
  <anno>SchedulerId</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: schedulers | schedulers_online) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer() &gt;= 1</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: smp_support) -&gt; boolean()</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: start_time) -&gt; integer()</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: system_version) -&gt; string()</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: system_architecture) -&gt; string()</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: threads) -&gt; boolean()</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: thread_pool_size) -&gt; integer() &gt;= 0</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: time_correction) -&gt; true | false</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: time_offset) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>preliminary | final | volatile</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: time_warp_mode) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>no_time_warp |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>single_time_warp |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>multi_time_warp</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: tolerant_timeofday) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>enabled | disabled</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: trace_control_word) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer() &gt;= 0</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: update_cpu_info) -&gt; changed | unchanged</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item :: version) -&gt; string()</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_info(Item ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>wordsize |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{wordsize, internal} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{wordsize, external}) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>4 | 8</head></clause>
  </contract>
  <anno>Item</anno>
</spec>
<spec>
  <name>system_monitor</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>erlang:system_monitor() -&gt; MonSettings</head>
      <guard>
        <subtype><typename>MonSettings</typename><string>MonSettings = undefined | {MonitorPid, Options}</string></subtype>
        <subtype><typename>MonitorPid</typename><string>MonitorPid = pid()</string></subtype>
        <subtype><typename>Options</typename><string>Options = [<seealso marker="#type-system_monitor_option">system_monitor_option()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>MonSettings</anno>
  <anno>MonitorPid</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>system_monitor</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_monitor(Arg) -&gt; MonSettings</head>
      <guard>
        <subtype><typename>Arg</typename><string>Arg = MonSettings = undefined | {MonitorPid, Options}</string></subtype>
        <subtype><typename>MonSettings</typename><string/></subtype>
        <subtype><typename>MonitorPid</typename><string>MonitorPid = pid()</string></subtype>
        <subtype><typename>Options</typename><string>Options = [<seealso marker="#type-system_monitor_option">system_monitor_option()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Arg</anno>
  <anno>MonSettings</anno>
  <anno>MonitorPid</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>system_monitor</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:system_monitor(MonitorPid, Options) -&gt; MonSettings</head>
      <guard>
        <subtype><typename>MonitorPid</typename><string>MonitorPid = pid()</string></subtype>
        <subtype><typename>Options</typename><string>Options = [<seealso marker="#type-system_monitor_option">system_monitor_option()</seealso>]</string></subtype>
        <subtype><typename>MonSettings</typename><string>MonSettings = undefined | {OldMonitorPid, OldOptions}</string></subtype>
        <subtype><typename>OldMonitorPid</typename><string>OldMonitorPid = pid()</string></subtype>
        <subtype><typename>OldOptions</typename><string>OldOptions = [<seealso marker="#type-system_monitor_option">system_monitor_option()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>MonSettings</anno>
  <anno>MonitorPid</anno>
  <anno>OldMonitorPid</anno>
  <anno>OldOptions</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>system_profile</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>erlang:system_profile() -&gt; ProfilerSettings</head>
      <guard>
        <subtype><typename>ProfilerSettings</typename><string>ProfilerSettings = undefined | {ProfilerPid, Options}</string></subtype>
        <subtype><typename>ProfilerPid</typename><string>ProfilerPid = pid() | port()</string></subtype>
        <subtype><typename>Options</typename><string>Options = [<seealso marker="#type-system_profile_option">system_profile_option()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Options</anno>
  <anno>ProfilerPid</anno>
  <anno>ProfilerSettings</anno>
</spec>
<spec>
  <name>system_profile</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:system_profile(ProfilerPid, Options) -&gt; ProfilerSettings</head>
      <guard>
        <subtype><typename>ProfilerPid</typename><string>ProfilerPid = pid() | port() | undefined</string></subtype>
        <subtype><typename>Options</typename><string>Options = [<seealso marker="#type-system_profile_option">system_profile_option()</seealso>]</string></subtype>
        <subtype><typename>ProfilerSettings</typename><string>ProfilerSettings = <br/><nbsp/><nbsp/><nbsp/><nbsp/>undefined | {pid() | port(), [<seealso marker="#type-system_profile_option">system_profile_option()</seealso>]}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Options</anno>
  <anno>ProfilerPid</anno>
  <anno>ProfilerSettings</anno>
</spec>
<spec>
  <name>system_time</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>erlang:system_time() -&gt; integer()</head></clause>
  </contract>
</spec>
<spec>
  <name>system_time</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:system_time(Unit) -&gt; integer()</head>
      <guard>
        <subtype><typename>Unit</typename><string>Unit = <seealso marker="#type-time_unit">time_unit()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Unit</anno>
</spec>
<spec>
  <name>term_to_binary</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>term_to_binary(Term) -&gt; <seealso marker="#type-ext_binary">ext_binary()</seealso></head>
      <guard>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>term_to_binary</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>term_to_binary(Term, Options) -&gt; <seealso marker="#type-ext_binary">ext_binary()</seealso></head>
      <guard>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
        <subtype><typename>Options</typename><string>Options = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[compressed |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{compressed, Level :: 0..9} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{minor_version, Version :: 0..1}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Level</anno>
  <anno>Options</anno>
  <anno>Term</anno>
  <anno>Version</anno>
</spec>
<spec>
  <name>throw</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>throw(Any) -&gt; no_return()</head>
      <guard>
        <subtype><typename>Any</typename><string>Any = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Any</anno>
</spec>
<spec>
  <name>time</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>time() -&gt; Time</head>
      <guard>
        <subtype><typename>Time</typename><string>Time = <seealso marker="calendar#type-time">calendar:time()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Time</anno>
</spec>
<spec>
  <name>time_offset</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>erlang:time_offset() -&gt; integer()</head></clause>
  </contract>
</spec>
<spec>
  <name>time_offset</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:time_offset(Unit) -&gt; integer()</head>
      <guard>
        <subtype><typename>Unit</typename><string>Unit = <seealso marker="#type-time_unit">time_unit()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Unit</anno>
</spec>
<spec>
  <name>timestamp</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>erlang:timestamp() -&gt; Timestamp</head>
      <guard>
        <subtype><typename>Timestamp</typename><string>Timestamp = <seealso marker="#type-timestamp">timestamp()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Timestamp</anno>
</spec>
<spec>
  <name>tl</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>tl(List) -&gt; term()</head>
      <guard>
        <subtype><typename>List</typename><string>List = [term(), ...]</string></subtype>
      </guard></clause>
  </contract>
  <anno>List</anno>
</spec>
<spec>
  <name>trace</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:trace(PidPortSpec, How, FlagList) -&gt; integer()</head>
      <guard>
        <subtype><typename>PidPortSpec</typename><string>PidPortSpec = <br/><nbsp/><nbsp/><nbsp/><nbsp/>pid() |<br/><nbsp/><nbsp/><nbsp/><nbsp/>port() |<br/><nbsp/><nbsp/><nbsp/><nbsp/>all |<br/><nbsp/><nbsp/><nbsp/><nbsp/>processes |<br/><nbsp/><nbsp/><nbsp/><nbsp/>ports |<br/><nbsp/><nbsp/><nbsp/><nbsp/>existing |<br/><nbsp/><nbsp/><nbsp/><nbsp/>existing_processes |<br/><nbsp/><nbsp/><nbsp/><nbsp/>existing_ports |<br/><nbsp/><nbsp/><nbsp/><nbsp/>new |<br/><nbsp/><nbsp/><nbsp/><nbsp/>new_processes |<br/><nbsp/><nbsp/><nbsp/><nbsp/>new_ports</string></subtype>
        <subtype><typename>How</typename><string>How = boolean()</string></subtype>
        <subtype><typename>FlagList</typename><string>FlagList = [<seealso marker="#type-trace_flag">trace_flag()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>FlagList</anno>
  <anno>How</anno>
  <anno>PidPortSpec</anno>
</spec>
<spec>
  <name>trace_delivered</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:trace_delivered(Tracee) -&gt; Ref</head>
      <guard>
        <subtype><typename>Tracee</typename><string>Tracee = pid() | all</string></subtype>
        <subtype><typename>Ref</typename><string>Ref = reference()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Ref</anno>
  <anno>Tracee</anno>
</spec>
<spec>
  <name>trace_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:trace_info(PidPortFuncEvent, Item) -&gt; Res</head>
      <guard>
        <subtype><typename>PidPortFuncEvent</typename><string>PidPortFuncEvent = <br/><nbsp/><nbsp/><nbsp/><nbsp/>pid() |<br/><nbsp/><nbsp/><nbsp/><nbsp/>port() |<br/><nbsp/><nbsp/><nbsp/><nbsp/>new |<br/><nbsp/><nbsp/><nbsp/><nbsp/>new_processes |<br/><nbsp/><nbsp/><nbsp/><nbsp/>new_ports |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{Module, Function, Arity} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>on_load |<br/><nbsp/><nbsp/><nbsp/><nbsp/>send |<br/><nbsp/><nbsp/><nbsp/><nbsp/>'receive'</string></subtype>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>Function</typename><string>Function = atom()</string></subtype>
        <subtype><typename>Arity</typename><string>Arity = arity()</string></subtype>
        <subtype><typename>Item</typename><string>Item = <br/><nbsp/><nbsp/><nbsp/><nbsp/>flags |<br/><nbsp/><nbsp/><nbsp/><nbsp/>tracer |<br/><nbsp/><nbsp/><nbsp/><nbsp/>traced |<br/><nbsp/><nbsp/><nbsp/><nbsp/>match_spec |<br/><nbsp/><nbsp/><nbsp/><nbsp/>meta |<br/><nbsp/><nbsp/><nbsp/><nbsp/>meta_match_spec |<br/><nbsp/><nbsp/><nbsp/><nbsp/>call_count |<br/><nbsp/><nbsp/><nbsp/><nbsp/>call_time |<br/><nbsp/><nbsp/><nbsp/><nbsp/>all</string></subtype>
        <subtype><typename>Res</typename><string>Res = <seealso marker="#type-trace_info_return">trace_info_return()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Arity</anno>
  <anno>Function</anno>
  <anno>Item</anno>
  <anno>Module</anno>
  <anno>PidPortFuncEvent</anno>
  <anno>Res</anno>
</spec>
<spec>
  <name>trace_pattern</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>erlang:trace_pattern(MFA, MatchSpec) -&gt; integer() &gt;= 0</head>
      <guard>
        <subtype><typename>MFA</typename><string>MFA = <seealso marker="#type-trace_pattern_mfa">trace_pattern_mfa()</seealso> | send | 'receive'</string></subtype>
        <subtype><typename>MatchSpec</typename><string>MatchSpec = <br/><nbsp/><nbsp/><nbsp/><nbsp/>(MatchSpecList :: <seealso marker="#type-trace_match_spec">trace_match_spec()</seealso>) |<br/><nbsp/><nbsp/><nbsp/><nbsp/>boolean() |<br/><nbsp/><nbsp/><nbsp/><nbsp/>restart |<br/><nbsp/><nbsp/><nbsp/><nbsp/>pause</string></subtype>
      </guard></clause>
  </contract>
  <anno>MFA</anno>
  <anno>MatchSpec</anno>
  <anno>MatchSpecList</anno>
</spec>
<spec>
  <name>trace_pattern</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:trace_pattern(MFA :: send, MatchSpec, FlagList :: []) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer() &gt;= 0</head>
      <guard>
        <subtype><typename>MatchSpec</typename><string>MatchSpec = (MatchSpecList :: <seealso marker="#type-trace_match_spec">trace_match_spec()</seealso>) | boolean()</string></subtype>
      </guard></clause>
  </contract>
  <anno>FlagList</anno>
  <anno>MFA</anno>
  <anno>MatchSpec</anno>
  <anno>MatchSpecList</anno>
</spec>
<spec>
  <name>trace_pattern</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:trace_pattern(MFA :: 'receive', MatchSpec, FlagList :: []) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer() &gt;= 0</head>
      <guard>
        <subtype><typename>MatchSpec</typename><string>MatchSpec = (MatchSpecList :: <seealso marker="#type-trace_match_spec">trace_match_spec()</seealso>) | boolean()</string></subtype>
      </guard></clause>
  </contract>
  <anno>FlagList</anno>
  <anno>MFA</anno>
  <anno>MatchSpec</anno>
  <anno>MatchSpecList</anno>
</spec>
<spec>
  <name>trace_pattern</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>erlang:trace_pattern(MFA, MatchSpec, FlagList) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer() &gt;= 0</head>
      <guard>
        <subtype><typename>MFA</typename><string>MFA = <seealso marker="#type-trace_pattern_mfa">trace_pattern_mfa()</seealso></string></subtype>
        <subtype><typename>MatchSpec</typename><string>MatchSpec = <br/><nbsp/><nbsp/><nbsp/><nbsp/>(MatchSpecList :: <seealso marker="#type-trace_match_spec">trace_match_spec()</seealso>) |<br/><nbsp/><nbsp/><nbsp/><nbsp/>boolean() |<br/><nbsp/><nbsp/><nbsp/><nbsp/>restart |<br/><nbsp/><nbsp/><nbsp/><nbsp/>pause</string></subtype>
        <subtype><typename>FlagList</typename><string>FlagList = [<seealso marker="#type-trace_pattern_flag">trace_pattern_flag()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>FlagList</anno>
  <anno>MFA</anno>
  <anno>MatchSpec</anno>
  <anno>MatchSpecList</anno>
</spec>
<spec>
  <name>trunc</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>trunc(Number) -&gt; integer()</head>
      <guard>
        <subtype><typename>Number</typename><string>Number = number()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Number</anno>
</spec>
<spec>
  <name>tuple_size</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>tuple_size(Tuple) -&gt; integer() &gt;= 0</head>
      <guard>
        <subtype><typename>Tuple</typename><string>Tuple = tuple()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Tuple</anno>
</spec>
<spec>
  <name>tuple_to_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>tuple_to_list(Tuple) -&gt; [term()]</head>
      <guard>
        <subtype><typename>Tuple</typename><string>Tuple = tuple()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Tuple</anno>
</spec>
<spec>
  <name>unique_integer</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>erlang:unique_integer() -&gt; integer()</head></clause>
  </contract>
</spec>
<spec>
  <name>unique_integer</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:unique_integer(ModifierList) -&gt; integer()</head>
      <guard>
        <subtype><typename>ModifierList</typename><string>ModifierList = [Modifier]</string></subtype>
        <subtype><typename>Modifier</typename><string>Modifier = positive | monotonic</string></subtype>
      </guard></clause>
  </contract>
  <anno>Modifier</anno>
  <anno>ModifierList</anno>
</spec>
<spec>
  <name>universaltime</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>erlang:universaltime() -&gt; DateTime</head>
      <guard>
        <subtype><typename>DateTime</typename><string>DateTime = <seealso marker="calendar#type-datetime">calendar:datetime()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>DateTime</anno>
</spec>
<spec>
  <name>universaltime_to_localtime</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:universaltime_to_localtime(Universaltime) -&gt; Localtime</head>
      <guard>
        <subtype><typename>Localtime</typename><string>Localtime = Universaltime = <seealso marker="calendar#type-datetime">calendar:datetime()</seealso></string></subtype>
        <subtype><typename>Universaltime</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Localtime</anno>
  <anno>Universaltime</anno>
</spec>
<spec>
  <name>universaltime_to_posixtime</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>erlang:universaltime_to_posixtime(P1) -&gt; integer()</head>
      <guard>
        <subtype><typename>P1</typename><string>P1 = {<seealso marker="calendar#type-date">calendar:date()</seealso>, <seealso marker="calendar#type-time">calendar:time()</seealso>}</string></subtype>
      </guard></clause>
  </contract>
  <anno>P1</anno>
</spec>
<spec>
  <name>unlink</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>unlink(Id) -&gt; true</head>
      <guard>
        <subtype><typename>Id</typename><string>Id = pid() | port()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Id</anno>
</spec>
<spec>
  <name>unregister</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>unregister(RegName) -&gt; true</head>
      <guard>
        <subtype><typename>RegName</typename><string>RegName = atom()</string></subtype>
      </guard></clause>
  </contract>
  <anno>RegName</anno>
</spec>
<spec>
  <name>whereis</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>whereis(RegName) -&gt; pid() | port() | undefined</head>
      <guard>
        <subtype><typename>RegName</typename><string>RegName = atom()</string></subtype>
      </guard></clause>
  </contract>
  <anno>RegName</anno>
</spec>
<spec>
  <name>yield</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>erlang:yield() -&gt; true</head></clause>
  </contract>
</spec>
<timestamp>Generated by EDoc, Jul 12 2017, 20:32:12.</timestamp>
</module>