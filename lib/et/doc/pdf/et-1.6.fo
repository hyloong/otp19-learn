<?xml version="1.0"?>
<fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format">
  <fo:layout-master-set>
    <fo:simple-page-master master-name="cover" margin="25mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin="0mm"/>
    </fo:simple-page-master>
    <fo:simple-page-master master-name="left-page" margin-top="25mm" margin-bottom="15mm" margin-left="20mm" margin-right="25mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin-top="15mm" margin-bottom="20mm"/>
      <fo:region-before region-name="left-header" extent="10mm"/>
      <fo:region-after region-name="left-footer" extent="10mm"/>
    </fo:simple-page-master>
    <fo:simple-page-master master-name="right-page" margin-top="25mm" margin-bottom="15mm" margin-left="25mm" margin-right="20mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin-top="15mm" margin-bottom="20mm"/>
      <fo:region-before region-name="right-header" extent="10mm"/>
      <fo:region-after region-name="right-footer" extent="10mm"/>
    </fo:simple-page-master>
    <fo:page-sequence-master master-name="document">
      <fo:repeatable-page-master-alternatives>
        <fo:conditional-page-master-reference master-reference="left-page" odd-or-even="even"/>
        <fo:conditional-page-master-reference master-reference="right-page" odd-or-even="odd"/>
      </fo:repeatable-page-master-alternatives>
    </fo:page-sequence-master>
  </fo:layout-master-set>
  <fo:bookmark-tree>
    <fo:bookmark internal-destination="cover-page" starting-state="show">
      <fo:bookmark-title>Event Tracer (ET)</fo:bookmark-title>
      <fo:bookmark internal-destination="idp391504" starting-state="hide">
        <fo:bookmark-title>Event Tracer (ET) Users Guide</fo:bookmark-title>
        <fo:bookmark internal-destination="idp383792" starting-state="hide">
          <fo:bookmark-title>Introduction</fo:bookmark-title>
          <fo:bookmark internal-destination="idp376752" starting-state="hide">
            <fo:bookmark-title>Scope and Purpose</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp376288" starting-state="hide">
            <fo:bookmark-title>Prerequisites</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp877952" starting-state="hide">
            <fo:bookmark-title>About This Manual</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp369568" starting-state="hide">
            <fo:bookmark-title>Where to Find More Information</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp1034320" starting-state="hide">
          <fo:bookmark-title>Tutorial</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1173088" starting-state="hide">
            <fo:bookmark-title>Visualizing Message Sequence Charts</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp631968" starting-state="hide">
            <fo:bookmark-title>Four Modules</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp632384" starting-state="hide">
            <fo:bookmark-title>The Event Tracer Interface</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp633184" starting-state="hide">
            <fo:bookmark-title>The Collector and Viewer</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp955744" starting-state="hide">
            <fo:bookmark-title>The Selector</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp617216" starting-state="hide">
            <fo:bookmark-title>How To Put It Together</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp663056" starting-state="hide">
          <fo:bookmark-title>Description</fo:bookmark-title>
          <fo:bookmark internal-destination="idp847872" starting-state="hide">
            <fo:bookmark-title>Overview</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1078208" starting-state="hide">
            <fo:bookmark-title>Filters and dictionary</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1051936" starting-state="hide">
            <fo:bookmark-title>Trace clients</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1117072" starting-state="hide">
            <fo:bookmark-title>Global tracing</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1133984" starting-state="hide">
            <fo:bookmark-title>Viewer window</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1416352" starting-state="hide">
            <fo:bookmark-title>Configuration</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1420144" starting-state="hide">
            <fo:bookmark-title>Contents viewer window</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp1448928" starting-state="hide">
          <fo:bookmark-title>Advanced examples</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1452928" starting-state="hide">
            <fo:bookmark-title>A simulated Mnesia transaction</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1465408" starting-state="hide">
            <fo:bookmark-title>Some convenient functions used in the Mnesia transaction
    example</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1483744" starting-state="hide">
            <fo:bookmark-title>Erlang trace of a real Mnesia transaction</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1497888" starting-state="hide">
            <fo:bookmark-title>Erlang trace of Megaco startup</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
      </fo:bookmark>
      <fo:bookmark internal-destination="idp451072" starting-state="hide">
        <fo:bookmark-title>Reference Manual</fo:bookmark-title>
        <fo:bookmark internal-destination="idp1189056" starting-state="hide">
          <fo:bookmark-title>et</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1186560" starting-state="hide">
            <fo:bookmark-title>trace_me/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1012880" starting-state="hide">
            <fo:bookmark-title>trace_me/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1009168" starting-state="hide">
            <fo:bookmark-title>phone_home/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1008784" starting-state="hide">
            <fo:bookmark-title>phone_home/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1005376" starting-state="hide">
            <fo:bookmark-title>report_event/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1004992" starting-state="hide">
            <fo:bookmark-title>report_event/5</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp1028480" starting-state="hide">
          <fo:bookmark-title>et_collector</fo:bookmark-title>
          <fo:bookmark internal-destination="idp733552" starting-state="hide">
            <fo:bookmark-title>start_link/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp638768" starting-state="hide">
            <fo:bookmark-title>stop/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp718496" starting-state="hide">
            <fo:bookmark-title>save_event_file/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1259472" starting-state="hide">
            <fo:bookmark-title>load_event_file/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1018656" starting-state="hide">
            <fo:bookmark-title>report/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1019072" starting-state="hide">
            <fo:bookmark-title>report_event/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1019488" starting-state="hide">
            <fo:bookmark-title>report_event/6</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp710464" starting-state="hide">
            <fo:bookmark-title>make_key/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp991712" starting-state="hide">
            <fo:bookmark-title>get_table_handle/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp716304" starting-state="hide">
            <fo:bookmark-title>get_global_pid/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp642368" starting-state="hide">
            <fo:bookmark-title>change_pattern/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp473584" starting-state="hide">
            <fo:bookmark-title>dict_insert/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp474080" starting-state="hide">
            <fo:bookmark-title>dict_insert/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp474576" starting-state="hide">
            <fo:bookmark-title>dict_insert/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp698272" starting-state="hide">
            <fo:bookmark-title>dict_lookup/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1261536" starting-state="hide">
            <fo:bookmark-title>dict_delete/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp843232" starting-state="hide">
            <fo:bookmark-title>dict_match/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1205840" starting-state="hide">
            <fo:bookmark-title>multicast/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp725856" starting-state="hide">
            <fo:bookmark-title>start_trace_client/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp730112" starting-state="hide">
            <fo:bookmark-title>iterate/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp751264" starting-state="hide">
            <fo:bookmark-title>iterate/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1221552" starting-state="hide">
            <fo:bookmark-title>clear_table/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp1244080" starting-state="hide">
          <fo:bookmark-title>et_selector</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1246256" starting-state="hide">
            <fo:bookmark-title>make_pattern/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1254192" starting-state="hide">
            <fo:bookmark-title>change_pattern/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1530384" starting-state="hide">
            <fo:bookmark-title>parse_event/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp1558192" starting-state="hide">
          <fo:bookmark-title>et_viewer</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1560448" starting-state="hide">
            <fo:bookmark-title>file/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1564704" starting-state="hide">
            <fo:bookmark-title>start/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1567296" starting-state="hide">
            <fo:bookmark-title>start/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1569648" starting-state="hide">
            <fo:bookmark-title>start_link/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1596336" starting-state="hide">
            <fo:bookmark-title>get_collector_pid/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1600016" starting-state="hide">
            <fo:bookmark-title>stop/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
      </fo:bookmark>
    </fo:bookmark>
  </fo:bookmark-tree>
  <fo:page-sequence font-family="sans-serif" force-page-count="even" master-reference="cover" font-size="10pt">
    <fo:flow flow-name="xsl-region-body">
      <fo:block space-before="130mm" space-before.conditionality="retain" text-align="end">
        <fo:external-graphic src="/root/download/otp_src_20.0/bootstrap/lib/erl_docgen/priv/images/erlang-logo.gif"/>
      </fo:block>
      <fo:block id="cover-page" border-before-style="solid" border-before-width="10pt" border-color="#960003" font-size="2.3em" padding-before="0.5em" text-align="end">Event Tracer (ET)</fo:block>
      <fo:block font-size="0.9em" text-align="end">Copyright © 2002-2017 Ericsson AB. All Rights Reserved.</fo:block>
      <fo:block font-size="0.9em" text-align="end">Event Tracer (ET) 1.6</fo:block>
      <fo:block font-size="0.9em" text-align="end">July 12, 2017</fo:block>
      <fo:block padding-before="2.5em" font-size="1.33em" font-weight="bold" color="#C00" text-align="end"/>
      <fo:block break-before="page" border-before-style="solid" border-before-width="1pt" border-color="#960003" font-weight="bold" padding-before="0.5em" space-before="200mm" space-before.conditionality="retain">Copyright © 2002-2017 Ericsson AB. All Rights Reserved.</fo:block>
      <fo:block font-size="0.9em">
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
 
          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
    
    Ericsson AB. All Rights Reserved..
        </fo:block>
      <fo:block font-size="0.9em" font-weight="bold" space-before="2em">July 12, 2017</fo:block>
    </fo:flow>
  </fo:page-sequence>
  <fo:page-sequence font-family="serif" master-reference="document" initial-page-number="1" font-size="10pt">
    <fo:static-content flow-name="left-header">
      <fo:block text-align="start" border-after-style="solid" border-after-width="2pt" border-color="#960003" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">
        <fo:retrieve-marker retrieve-boundary="page-sequence" retrieve-class-name="chapter-title" retrieve-position="first-including-carryover"/>
      </fo:block>
    </fo:static-content>
    <fo:static-content flow-name="right-header">
      <fo:block text-align="end" border-after-style="solid" border-after-width="2pt" border-color="#960003" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">
        <fo:retrieve-marker retrieve-boundary="page-sequence" retrieve-class-name="chapter-title" retrieve-position="first-including-carryover"/>
      </fo:block>
    </fo:static-content>
    <fo:static-content flow-name="left-footer">
      <fo:block text-align="start" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold"><fo:page-number/> | Ericsson AB. All Rights Reserved.:
            Event Tracer (ET)</fo:block>
    </fo:static-content>
    <fo:static-content flow-name="right-footer">
      <fo:block text-align="end" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">Ericsson AB. All Rights Reserved.:
            Event Tracer (ET) | <fo:page-number/></fo:block>
    </fo:static-content>
    <fo:flow flow-name="xsl-region-body"><fo:block/><fo:block id="idp391504" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">1   
      Event Tracer (ET) Users Guide</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Event Tracer (ET) uses the built-in trace mechanism in Erlang
      and provides tools for collection and graphical viewing of trace data.</fo:block>
  <fo:block id="idp383792" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.1  Introduction</fo:marker>1.1  Introduction</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Event Tracer (ET)</fo:inline> uses the built-in trace mechanism in
  Erlang and provides tools for collection and graphical viewing of
  trace data.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The viewed trace data is normally collected from Erlang trace
  ports or files.</fo:block><fo:block id="idp376752" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.1 
      Scope and Purpose</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This manual describes the <fo:inline font-family="monospace">Event Tracer (ET)</fo:inline> application,
    as a component of the Erlang/Open Telecom Platform development
    environment. It is assumed that the reader is familiar with the
    Erlang Development Environment, which is described in a separate
    User's Guide.</fo:block>
  <fo:block id="idp376288" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.2 
      Prerequisites</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following prerequisites is required for understanding the
    material in the <fo:inline font-family="monospace">Event Tracer (ET)</fo:inline> User's Guide:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">familiarity with the Erlang system and Erlang programming
        in general and the especially the art of Erlang tracing.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The application requires Erlang/OTP release R13BB or later. If
    you use the old <fo:inline font-family="monospace">GS</fo:inline> based GUI it does suffice with R7B.</fo:block>

  <fo:block id="idp877952" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.3 
      About This Manual</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In addition to this introductory chapter, the <fo:inline font-family="monospace">Event
    Tracers</fo:inline> User's Guide contains the following chapters:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Chapter 2: "Tutorial" provides a walk-through of the
        various parts of the application. The tutorial is based on
        <fo:inline font-family="monospace">Jayson Vantuyl's</fo:inline> article
        <fo:inline font-family="monospace">http://souja.net/2009/04/making-sense-of-erlangs-event-tracer.html</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Chapter 3: "Description" describes the architecture and typical
        usage of the application.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Chapter 4: "Advanced examples" gives some usage examples</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

  <fo:block id="idp369568" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.4 
      Where to Find More Information</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Refer to the following documentation for more information about
    <fo:inline font-family="monospace">Event Tracer (ET)</fo:inline> and about the Erlang/OTP development system:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">the Reference Manual of the <fo:inline font-family="monospace">Event Tracer (ET)</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">documentation of basic tracing in <fo:inline font-family="monospace">erlang:trace/4</fo:inline> and
        <fo:inline font-family="monospace">erlang:trace_pattern/3</fo:inline> and then the utilities derived
        from these: <fo:inline font-family="monospace">dbg</fo:inline>, <fo:inline font-family="monospace">observer</fo:inline>, <fo:inline font-family="monospace">invisio</fo:inline> and
        <fo:inline font-family="monospace">et</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Programming Erlang: Software for a Concurrent World by Joe
        Armstrong; ISBN: 978-1-93435-600-5</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp1034320" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.2  Tutorial</fo:marker>1.2  Tutorial</fo:block><fo:block id="idp1173088" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.1 
      Visualizing Message Sequence Charts</fo:block>
   
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The easiest way of using <fo:inline font-family="monospace">ET</fo:inline>, is to just use it as a
    graphical tool for displaying message sequence charts. In order to
    do that you need to first start a <fo:inline font-family="monospace">Viewer</fo:inline> (which by default
    starts a <fo:inline font-family="monospace">Collector</fo:inline>):</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      {ok, ViewerPid} = et_viewer:start([{title,"Coffee Order"}]),
      CollectorPid = et_viewer:get_collector_pid(ViewerPid).</fo:block>

    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Then you send events to the <fo:inline font-family="monospace">Collector</fo:inline>
    with the function <fo:inline font-family="monospace">et_collector:report_event/6</fo:inline> like this:</fo:block>
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      et_collector:report_event(CollectorPid,85,from,to,message,extra_stuff).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Viewer</fo:inline> will automatically pull events from the
    <fo:inline font-family="monospace">Collector</fo:inline> and display them on the screen.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The number (in this case 85) is an integer from 1 to 100 that
    specifies the "detail level" of the message. The higher the
    number, the more important it is. This provides a crude form of
    priority filtering.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">from</fo:inline>, <fo:inline font-family="monospace">to</fo:inline>, and <fo:inline font-family="monospace">message</fo:inline> parameters are
    exactly what they sound like. <fo:inline font-family="monospace">from</fo:inline> and <fo:inline font-family="monospace">to</fo:inline> are
    visualized in the <fo:inline font-family="monospace">Viewer</fo:inline> as "lifelines", with the message
    passing from one to the other. If <fo:inline font-family="monospace">from</fo:inline> and <fo:inline font-family="monospace">to</fo:inline> are
    the same value, then it is displayed next to the lifeline as an
    "action". The <fo:inline font-family="monospace">extra_stuff </fo:inline>value is simply data that you can
    attach that will be displayed when someone actually clicks on the
    action or message in the <fo:inline font-family="monospace">Viewer</fo:inline> window.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module <fo:inline font-family="monospace">et/examples/et_display_demo.erl</fo:inline> illustrates
    how it can be used:</fo:block>
    
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

-module(et_display_demo).

-export([test/0]).

test() -&gt;
    {ok, Viewer} = et_viewer:start([{title,"Coffee Order"}, {max_actors,10}]),
    Drink = {drink,iced_chai_latte},
    Size = {size,grande},
    Milk = {milk,whole},
    Flavor = {flavor,vanilla},
    C = et_viewer:get_collector_pid(Viewer),
    et_collector:report_event(C,99,customer,barrista1,place_order,[Drink,Size,Milk,Flavor]),
    et_collector:report_event(C,80,barrista1,register,enter_order,[Drink,Size,Flavor]),
    et_collector:report_event(C,80,register,barrista1,give_total,"$5"),
    et_collector:report_event(C,80,barrista1,barrista1,get_cup,[Drink,Size]),
    et_collector:report_event(C,80,barrista1,barrista2,give_cup,[]),
    et_collector:report_event(C,90,barrista1,customer,request_money,"$5"),
    et_collector:report_event(C,90,customer,barrista1,pay_money,"$5"),
    et_collector:report_event(C,80,barrista2,barrista2,get_chai_mix,[]),
    et_collector:report_event(C,80,barrista2,barrista2,add_flavor,[Flavor]),
    et_collector:report_event(C,80,barrista2,barrista2,add_milk,[Milk]),
    et_collector:report_event(C,80,barrista2,barrista2,add_ice,[]),
    et_collector:report_event(C,80,barrista2,barrista2,swirl,[]),
    et_collector:report_event(C,80,barrista2,customer,give_tasty_beverage,[Drink,Size]),
    ok.</fo:block>    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When you run the <fo:inline font-family="monospace">et_display_demo:test().</fo:inline> function in the
    example above, the <fo:inline font-family="monospace">Viewer</fo:inline> window will look like this:</fo:block>
    
    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="coffee_order.png"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        2.1:
         
        Screenshot of the Viewer window</fo:block>
    </fo:block>

 <fo:block id="idp631968" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.2 
      Four Modules</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The event tracer framework is made up of four modules:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">et</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">et_collector</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">et_viewer</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">et_selector</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In addition, you'll probably want to familiarize yourself with
    the <fo:inline font-family="monospace">dbg</fo:inline> module and possibly <fo:inline font-family="monospace">seq_trace</fo:inline> module as
    well.</fo:block>
  <fo:block id="idp632384" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.3 
      The Event Tracer Interface</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">et</fo:inline> module is not like other modules. It contains a
    function called <fo:inline font-family="monospace">et:trace_me/5</fo:inline>. Which is a function that
    does not do any useful stuff at all. Its sole purpose is to be a
    function that is easy to trace. A call to it may be something
    like:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      et:trace_me(85,from,to,message,extra_stuff).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The parameters to <fo:inline font-family="monospace">et:trace_me/5</fo:inline> are the same as to
    <fo:inline font-style="italic"><fo:inline font-family="monospace">et_collector:report_event/6</fo:inline></fo:inline>
    in the previous chapter. The big difference between the two is in
    the semantics of the two functions. The second actually reports an
    <fo:inline font-family="monospace">Event</fo:inline> to the <fo:inline font-family="monospace">Collector</fo:inline> while the first does nothing,
    it just returns the atom <fo:inline font-family="monospace">hopefully_traced</fo:inline>. In order to make
    the parameters to <fo:inline font-family="monospace">et:trace_me/5</fo:inline> turn up in the
    <fo:inline font-family="monospace">Collector</fo:inline>, tracing of that function must be activated and
    the <fo:inline font-family="monospace">Collector</fo:inline> must be registered as a <fo:inline font-family="monospace">Tracer</fo:inline> of the
    <fo:inline font-family="monospace">Raw Trace Data</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Erlang tracing is a seething pile of pain that involves
    reasonably complex knowledge of clever ports, tracing return
    formats, and specialized tracing <fo:inline font-family="monospace">MatchSpecs</fo:inline> (which are
    really their own special kind of hell). The tracing mechanism is
    very powerful indeed, but it can be hard to grasp.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Luckily there is a simplified way to start tracing of
    <fo:inline font-family="monospace">et:trace_me/5</fo:inline> function calls. The idea is that you should
    instrument your code with calls to <fo:inline font-family="monospace">et:trace_me/5</fo:inline> in
    strategic places where you have interesting information available
    in your program. Then you just start the <fo:inline font-family="monospace">Collector</fo:inline> with
    global tracing enabled:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      et_viewer:start([{trace_global, true}, {trace_pattern, {et,max}}]).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This will start a <fo:inline font-family="monospace">Collector</fo:inline>, a <fo:inline font-family="monospace">Viewer</fo:inline> and also
    start the tracing of <fo:inline font-family="monospace">et:trace_me/5</fo:inline> function calls. The
    <fo:inline font-family="monospace">Raw Trace Data</fo:inline> is collected by the <fo:inline font-family="monospace">Collector</fo:inline> and a
    view of it is displayed on the screen by the <fo:inline font-family="monospace">Viewer</fo:inline>. You
    can define your own "views" of the data by implementing your own
    <fo:inline font-family="monospace">Filter</fo:inline> functions and register them in the
    <fo:inline font-family="monospace">Viewer</fo:inline>.</fo:block>
  <fo:block id="idp633184" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.4 
      The Collector and Viewer</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These two pieces work in concert. Basically, the
    <fo:inline font-family="monospace">Collector</fo:inline> receives <fo:inline font-family="monospace">Raw Trace Data</fo:inline> and processes it
    into <fo:inline font-family="monospace">Events</fo:inline> in a <fo:inline font-family="monospace">et</fo:inline> specific format (defined in
    <fo:inline font-family="monospace">et/include/et.hrl</fo:inline>). The <fo:inline font-family="monospace">Viewer</fo:inline> interrogates the
    <fo:inline font-family="monospace">Collector</fo:inline> and displays an interactive representation of the
    data.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">You might wonder why these aren't just one module. The
    <fo:inline font-family="monospace">Collector</fo:inline> is a generic full-fledged framework that allows
    processes to "subscribe" to the <fo:inline font-family="monospace">Events</fo:inline> that it
    collects. One <fo:inline font-family="monospace">Collector</fo:inline> can serve several
    <fo:inline font-family="monospace">Viewers</fo:inline>. The typical case is that you have one
    <fo:inline font-family="monospace">Viewer</fo:inline> that visualizes <fo:inline font-family="monospace">Events</fo:inline> in one flavor and
    another <fo:inline font-family="monospace">Viewer</fo:inline> that visualizes them in another flavor. If
    you for example are tracing a text based protocol like <fo:inline font-family="monospace">HTML</fo:inline>
    (or <fo:inline font-family="monospace">Megaco/H.248</fo:inline>) it would be useful to be able to display
    the <fo:inline font-family="monospace">Events</fo:inline> as plain text as well as the internal
    representation of the message. The architecture does also allow
    you to implement your own <fo:inline font-family="monospace">Viewer</fo:inline> program as long as it
    complies to the protocol between the <fo:inline font-family="monospace">Collector/Viewer</fo:inline>
    protocol. Currently two kinds of <fo:inline font-family="monospace">Viewers</fo:inline> exists. That is
    the old <fo:inline font-family="monospace">GS</fo:inline> based one and the new based on
    <fo:inline font-family="monospace">wxWidgets</fo:inline>. But if you feel for it you may implement your
    own <fo:inline font-family="monospace">Viewer</fo:inline>, which for example could display the
    <fo:inline font-family="monospace">Events</fo:inline> as ASCII art or whatever you feel useful.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Viewer</fo:inline> will by default create a <fo:inline font-family="monospace">Collector</fo:inline> for
    you. With a few options and some configuration settings you can
    start collecting <fo:inline font-family="monospace">Events</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Collector</fo:inline> API does also allow you to save the
    collected <fo:inline font-family="monospace">Events</fo:inline> to file and later load them in a later
    session.</fo:block>

  <fo:block id="idp955744" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.5 
      The Selector</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is perhaps the most central module in the entirety of the
    <fo:inline font-family="monospace">et</fo:inline> suite. The <fo:inline font-family="monospace">Collector</fo:inline> needs "filters" to convert
    the <fo:inline font-family="monospace">Raw Trace Data</fo:inline> into "events" that it can display. The
    <fo:inline font-family="monospace">et_selector</fo:inline> module provides the default <fo:inline font-family="monospace">Filter</fo:inline> and
    some API calls to manage the <fo:inline font-family="monospace">Trace Pattern</fo:inline>. The
    <fo:inline font-family="monospace">Selector</fo:inline> provides various functions that achieve the
    following:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Convert <fo:inline font-family="monospace">Raw Trace Data</fo:inline> into an appropriate
      <fo:inline font-family="monospace">Event</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Magically notice traces of the <fo:inline font-family="monospace">et:trace_me/5</fo:inline>
      function and make appropriate <fo:inline font-family="monospace">Events</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Carefully prevent translating the <fo:inline font-family="monospace">Raw Trace Data</fo:inline>
      twice</fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Manage a <fo:inline font-family="monospace">Trace Pattern</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Trace Pattern</fo:inline> is basically a tuple of a
    <fo:inline font-family="monospace">module</fo:inline> and a <fo:inline font-family="monospace">detail level</fo:inline> (either an integer or the
    atom max for full detail). In most cases the <fo:inline font-family="monospace">Trace Pattern</fo:inline>
    <fo:inline font-family="monospace">{et,max}</fo:inline> does suffice. But if you do not want any runtime
    dependency of <fo:inline font-family="monospace">et</fo:inline> you can implement your own
    <fo:inline font-family="monospace">trace_me/5</fo:inline> function in some module and refer to that module
    in the <fo:inline font-family="monospace">Trace Pattern</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The specified module flows from your instantiation of the
    <fo:inline font-family="monospace">Viewer</fo:inline>, to the <fo:inline font-family="monospace">Collector</fo:inline> that it automatically
    creates, gets stashed in as the <fo:inline font-family="monospace">Trace Pattern</fo:inline>, and
    eventually goes down into the bowels of the <fo:inline font-family="monospace">Selector</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module that you specify gets passed down (eventually) into
    <fo:inline font-family="monospace">Selector</fo:inline>'s default <fo:inline font-family="monospace">Filter</fo:inline>. The format of the
    <fo:inline font-family="monospace">et:trace_me/5</fo:inline> function call is hardcoded in that
    <fo:inline font-family="monospace">Filter</fo:inline>.</fo:block>

  <fo:block id="idp617216" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.6 
      How To Put It Together</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Collector</fo:inline> automatically registers itself to listen
    for trace <fo:inline font-family="monospace">Events</fo:inline>, so all you have to do is enable them.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For those people who want to do general tracing, consult the
    <fo:inline font-family="monospace">dbg</fo:inline> module on how to trace whatever you're interested in
    and let it work its magic. If you just want <fo:inline font-family="monospace">et:trace_me/5</fo:inline>
    to work, do the following:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Create a <fo:inline font-family="monospace">Collector</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Create a <fo:inline font-family="monospace">Viewer</fo:inline> (this can do step #1 for you)</fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Turn on and pare down debugging</fo:block></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module <fo:inline font-family="monospace">et/examples/et_trace_demo.erl</fo:inline> achieves this.</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

-module(et_trace_demo).

-export([test/0]).

test() -&gt;
    et_viewer:start([
        {title,"Coffee Order"},
        {trace_global,true},
        {trace_pattern,{et,max}},
        {max_actors,10}
      ]),
      %% dbg:p(all,call),
      %% dbg:tpl(et, trace_me, 5, []),
      Drink = {drink,iced_chai_latte},
      Size = {size,grande},
      Milk = {milk,whole},
      Flavor = {flavor,vanilla},
      et:trace_me(99,customer,barrista1,place_order,[Drink,Size,Milk,Flavor]),
      et:trace_me(80,barrista1,register,enter_order,[Drink,Size,Flavor]),
      et:trace_me(80,register,barrista1,give_total,"$5"),
      et:trace_me(80,barrista1,barrista1,get_cup,[Drink,Size]),
      et:trace_me(80,barrista1,barrista2,give_cup,[]),
      et:trace_me(90,barrista1,customer,request_money,"$5"),
      et:trace_me(90,customer,barrista1,pay_money,"$5"),
      et:trace_me(80,barrista2,barrista2,get_chai_mix,[]),
      et:trace_me(80,barrista2,barrista2,add_flavor,[Flavor]),
      et:trace_me(80,barrista2,barrista2,add_milk,[Milk]),
      et:trace_me(80,barrista2,barrista2,add_ice,[]),
      et:trace_me(80,barrista2,barrista2,swirl,[]),
      et:trace_me(80,barrista2,customer,give_tasty_beverage,[Drink,Size]),
      ok.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Running through the above, the most important points are:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Turn on global tracing</fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Set a <fo:inline font-family="monospace">Trace Pattern</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tell <fo:inline font-family="monospace">dbg</fo:inline> to trace function Calls</fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tell it specifically to trace the <fo:inline font-family="monospace">et:trace_me/5</fo:inline> function</fo:block></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When you run the <fo:inline font-family="monospace">et_trace_demo:test()</fo:inline> function above, the
    <fo:inline font-family="monospace">Viewer</fo:inline> window will look like this screenshot:</fo:block>

    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="coffee_order.png"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        2.2:
         
        Screenshot of the Viewer window</fo:block>
    </fo:block>
    
  <fo:block id="idp663056" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.3  Description</fo:marker>1.3  Description</fo:block><fo:block id="idp847872" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.1 
      Overview</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The two major components of the <fo:inline font-family="monospace">Event Tracer (ET)</fo:inline> tool
    is a graphical sequence chart viewer (<fo:inline font-family="monospace">et_viewer</fo:inline>) and its
    backing storage (<fo:inline font-family="monospace">et_collector</fo:inline>). One <fo:inline font-family="monospace">Collector</fo:inline> may be
    used as backing storage for several simultaneous <fo:inline font-family="monospace">Viewers</fo:inline>
    where each one may display a different view of the same trace
    data.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The interface between the <fo:inline font-family="monospace">Collector</fo:inline> and its
    <fo:inline font-family="monospace">Viewers</fo:inline> is public in order to enable other types of
    <fo:inline font-family="monospace">Viewers</fo:inline>. However in the following text we will focus on
    usage of the <fo:inline font-family="monospace">et_viewer</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The main start function is <fo:inline font-family="monospace">et_viewer:start/1</fo:inline>. By
    default it will start both an <fo:inline font-family="monospace">et_collector</fo:inline> and an
    <fo:inline font-family="monospace">et_viewer</fo:inline>:</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% erl -pa et/examples
Erlang R13B03 (erts-5.7.4) [64-bit] [smp:4:4] [rq:4] [async-threads:0] [kernel-poll:false]

Eshell V5.7.4  (abort with ^G)
1&gt; {ok, Viewer} = et_viewer:start([]).
{ok,&lt;0.40.0&gt;}</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-family="monospace">Viewer</fo:inline> gets trace <fo:inline font-family="monospace">Events</fo:inline> from its
    <fo:inline font-family="monospace">Collector</fo:inline> by polling it regularly for more <fo:inline font-family="monospace">Events</fo:inline> to
    display. <fo:inline font-family="monospace">Events</fo:inline> are for example reported to the
    <fo:inline font-family="monospace">Collector</fo:inline> with <fo:inline font-family="monospace">et_collector:report_event/6</fo:inline>:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
2&gt; Collector = et_viewer:get_collector_pid(Viewer).
&lt;0.39.0&gt;
3&gt; et_collector:report_event(Collector, 60, my_shell, mnesia_tm, start_outer,
3&gt;                           "Start outer transaction"),
3&gt; et_collector:report_event(Collector, 40, mnesia_tm, my_shell, new_tid,
3&gt;                           "New transaction id is 4711"),
3&gt; et_collector:report_event(Collector, 20, my_shell, mnesia_locker, try_write_lock,
3&gt;                           "Acquire write lock for {my_tab, key}"),
3&gt; et_collector:report_event(Collector, 10, mnesia_locker, my_shell, granted,
3&gt;                           "You got the write lock for {my_tab, key}"),
3&gt; et_collector:report_event(Collector, 60, my_shell, do_commit,
3&gt;                           "Perform  transaction commit"),
3&gt; et_collector:report_event(Collector, 40, my_shell, mnesia_locker, release_tid,
3&gt;                           "Release all locks for transaction 4711"),
3&gt; et_collector:report_event(Collector, 60, my_shell, mnesia_tm, delete_transaction,
3&gt;                           "End of outer transaction"),
3&gt; et_collector:report_event(Collector, 20, my_shell, end_outer,
3&gt;                           "Transaction returned {atomic, ok}").
{ok,{table_handle,&lt;0.39.0&gt;,16402,trace_ts,
     #Fun&lt;et_collector.0.62831470&gt;}}</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This actually is a simulation of the process <fo:inline font-family="monospace">Events</fo:inline>
    caused by a <fo:inline font-family="monospace">Mnesia</fo:inline> transaction that writes a record in a local
    table:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
mnesia:transaction(fun() -&gt; mnesia:write({my_tab, key, val}) end).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">At this stage when we have a couple of <fo:inline font-family="monospace">Events</fo:inline>, it is time to
      show how it looks like in the graphical interface of
      <fo:inline font-family="monospace">et_viewer</fo:inline>:</fo:block>

    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="sim_trans.png"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        3.1:
         
        A simulated Mnesia transaction which writes one record</fo:block>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the sequence chart, the actors (which symbolically has
    performed the <fo:inline font-family="monospace">Event</fo:inline>) are shown as named vertical bars. The
    order of the actors may be altered by dragging (hold mouse button
    1 pressed during the operation) the name tag of an actor and drop
    it elsewhere:</fo:block>

    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="sim_trans_move_actor.png"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        3.2:
         
        Two actors has switched places</fo:block>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An <fo:inline font-family="monospace">Event</fo:inline> may be an action performed by one single actor
    (blue text label) or it may involve two actors and is then
    depicted as an arrow directed from one actor to another (red text
    label). Details of an <fo:inline font-family="monospace">Event</fo:inline> can be shown by clicking (press
    and release the mouse button 1) on the event label text or on the
    arrow. When doing that a <fo:inline font-family="monospace">Contents Viewer</fo:inline> window pops up. It
    may look like this:</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>

    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="sim_trans_write_lock.png"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        3.3:
         
        Details of a write lock message</fo:block>
    </fo:block>
  <fo:block id="idp1078208" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.2 
      Filters and dictionary</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Event Tracer (ET)</fo:inline> uses named filters in various
    contexts. An Event Trace filter is an <fo:inline font-family="monospace">Erlang fun</fo:inline> that takes
    some trace data as input and returns a possibly modified version
    of it:
      </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
filter(TraceData) -&gt; false | true | {true, NewEvent}

TraceData = Event | erlang_trace_data()
Event = #event{}
NewEvent = #event{}</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The interface of the filter function is the same as the the
    filter functions for the good old <fo:inline font-family="monospace">lists:filtermap/2</fo:inline>. If the filter
    returns <fo:inline font-family="monospace">false</fo:inline> it means that the trace data should silently
    be dropped. <fo:inline font-family="monospace">true</fo:inline> means that the trace data data already is
    an <fo:inline font-family="monospace">Event Record</fo:inline> and that it should be kept as it is.
    <fo:inline font-family="monospace">true</fo:inline> means that the <fo:inline font-family="monospace">TraceData</fo:inline> already is an <fo:inline font-family="monospace">Event
    Record</fo:inline> and that it should be kept as it is. <fo:inline font-family="monospace">{true,
    NewEvent}</fo:inline> means that the original trace data should be
    replaced with <fo:inline font-family="monospace">Event</fo:inline>. This provides means to get rid of
    unwanted <fo:inline font-family="monospace">Events</fo:inline> as well as enabling alternate views of an
    <fo:inline font-family="monospace">Event</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The first filter that the trace data is exposed for is the
    <fo:inline font-family="monospace">Collector Filter</fo:inline>. When a trace <fo:inline font-family="monospace">Event</fo:inline> is reported with
    <fo:inline font-family="monospace">et_collector:report/2</fo:inline> (or
    <fo:inline font-family="monospace">et_collector:report_event/5,6</fo:inline>) the first thing that
    happens, is that a message is sent to the <fo:inline font-family="monospace">Collector</fo:inline> process
    to fetch a handle that contains some useful stuff, such as the
    <fo:inline font-family="monospace">Collector Filter Fun</fo:inline> and an Ets table identifier. Then the
    <fo:inline font-family="monospace">Collector Filter Fun</fo:inline> is applied and if it returns
    <fo:inline font-family="monospace">true</fo:inline> (or <fo:inline font-family="monospace">{true, NewEvent}</fo:inline>), the <fo:inline font-family="monospace">Event</fo:inline> will be stored
    in an Ets table. As an optimization, subsequent calls to
    <fo:inline font-family="monospace">et_collector:report</fo:inline>-functions can use the handle directly
    instead of the <fo:inline font-family="monospace">Collector Pid</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All filters (registered in a <fo:inline font-family="monospace">Collector</fo:inline> or in a
    <fo:inline font-family="monospace">Viewer</fo:inline>) must be able to handle an <fo:inline font-family="monospace">Event record</fo:inline> as
    input. The <fo:inline font-family="monospace">Collector Filter</fo:inline> (that is the filter named
    <fo:inline font-family="monospace">all</fo:inline>) is a little bit special, as its input also may be raw
    <fo:inline font-family="monospace">Erlang Trace Data</fo:inline></fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Collector</fo:inline> manages a key/value based dictionary,
    where the filters are stored. Updates of the dictionary is
    propagated to all subscribing processes. When a <fo:inline font-family="monospace">Viewer</fo:inline> is
    started it is registered as a subscriber of dictionary
    updates.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In each <fo:inline font-family="monospace">Viewer</fo:inline> there is only one filter that is active
    and all trace <fo:inline font-family="monospace">Events</fo:inline> that the <fo:inline font-family="monospace">Viewer</fo:inline> gets from the
    <fo:inline font-family="monospace">Collector</fo:inline> will pass thru that filter. By writing clever
    filters it is possible to customize how the <fo:inline font-family="monospace">Events</fo:inline> looks
    like in the viewer. The following filter in
    <fo:inline font-family="monospace">et/examples/et_demo.erl</fo:inline> replaces the actor names
    <fo:inline font-family="monospace">mnesia_tm</fo:inline> and <fo:inline font-family="monospace">mnesia_locker</fo:inline> and leaves everything
    else in the record as it was:</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

mgr_actors(E) when is_record(E, event) -&gt;
    Actor = fun(A) -&gt;
               case A of
                   mnesia_tm     -&gt; trans_mgr;
                   mnesia_locker -&gt; lock_mgr;
                   _             -&gt; A
               end
            end,
    {true, E#event{from = Actor(E#event.from),
                   to = Actor(E#event.to),
                   contents = [{orig_from, E#event.from},
                               {orig_to,   E#event.to},
                               {orig_contents, E#event.contents}]}}.</fo:block>    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If we now add the filter to the running <fo:inline font-family="monospace">Collector</fo:inline>:</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
4&gt; Fun = fun(E) -&gt; et_demo:mgr_actors(E) end.
#Fun&lt;erl_eval.6.13229925&gt;
5&gt; et_collector:dict_insert(Collector, {filter, mgr_actors}, Fun).
ok</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">you will see that the <fo:inline font-family="monospace">Filter</fo:inline> menu in all viewers have
    got a new entry called <fo:inline font-family="monospace">mgr_actors</fo:inline>. Select it, and a new
   <fo:inline font-family="monospace">Viewer</fo:inline> window will pop up:</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>

    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="sim_trans_mgr_actors.png"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        3.4:
         
        The same trace data in a different view</fo:block>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In order to see the nitty gritty details of an <fo:inline font-family="monospace">Event</fo:inline> you
    may click on the <fo:inline font-family="monospace">Event</fo:inline> in order to start a <fo:inline font-family="monospace">Contents
    Viewer</fo:inline> for that <fo:inline font-family="monospace">Event</fo:inline>. In the <fo:inline font-family="monospace">Contents Viewer</fo:inline>
    there also is a filter menu that enables inspection of the
    <fo:inline font-family="monospace">Event</fo:inline> from other views than the one selected in the
    viewer. A click on the <fo:inline font-family="monospace">new_tid</fo:inline> <fo:inline font-family="monospace">Event</fo:inline> will cause a
    <fo:inline font-family="monospace">Contents Viewer</fo:inline> window to pop up, showing the <fo:inline font-family="monospace">Event</fo:inline>
    in the <fo:inline font-family="monospace">mgr_actors</fo:inline> view:</fo:block>

    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="sim_trans_contents_viewer_mgr_actors.png"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        3.5:
         
        The trace Event in the mgr_actors view</fo:block>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Select the <fo:inline font-family="monospace">all</fo:inline> entry in the <fo:inline font-family="monospace">Filters</fo:inline> menu
    and a new <fo:inline font-family="monospace">Contents Viewer window</fo:inline> will pop up showing the
    same trace <fo:inline font-family="monospace">Event</fo:inline> in the collectors view:</fo:block>

    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="sim_trans_contents_viewer_collector.png"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        3.6:
         
        The same trace Event in the collectors view</fo:block>
    </fo:block>
  <fo:block id="idp1051936" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.3 
      Trace clients</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As you have seen, it is possible to use the
    <fo:inline font-family="monospace">et_collector:report_event/5,6</fo:inline> functions explicitly. By
    using those functions you can write your own trace client that
    reads trace data from any source stored in any format and just
    feed the <fo:inline font-family="monospace">Collector</fo:inline> with it. You may replace the default
    <fo:inline font-family="monospace">Collector Filter</fo:inline> with a filter that converts new exciting
    trace data formats to <fo:inline font-family="monospace">Event Records</fo:inline> or you may convert it
    to an <fo:inline font-family="monospace">Event Record</fo:inline> before you invoke
    <fo:inline font-family="monospace">et_collector:report/2</fo:inline> and then rely on the default
    <fo:inline font-family="monospace">Collector Filter</fo:inline> to handle the new format.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are also existing functions in the API that reads from
    various sources and calls <fo:inline font-family="monospace">et_collector:report/2</fo:inline>:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The trace <fo:inline font-family="monospace">Events</fo:inline> that are hosted by the <fo:inline font-family="monospace">Collector</fo:inline> may be
        stored to file and later be loaded by selecting <fo:inline font-family="monospace">save</fo:inline>
        and <fo:inline font-family="monospace">load</fo:inline> entries in the <fo:inline font-family="monospace">Viewers</fo:inline> <fo:inline font-family="monospace">File</fo:inline> menu
        or via the <fo:inline font-family="monospace">et_collector</fo:inline> API.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is also possible to perform live tracing of a running
        system by making use of the built-in trace support in the
        Erlang emulator. These Erlang traces can be directed to files
        or to ports. See the reference manual for
        <fo:inline font-family="monospace">erlang:trace/4</fo:inline>, <fo:inline font-family="monospace">erlang:trace_pattern/3</fo:inline>,
        <fo:inline font-family="monospace">dbg</fo:inline> and <fo:inline font-family="monospace">ttb</fo:inline> for more info.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are also corresponding trace client types that can
        read the Erlang trace data format from such files or ports.
        The <fo:inline font-family="monospace">et_collector:start_trace_client/3</fo:inline> function makes
        use of these Erlang trace clients and redirects the trace data
        to the <fo:inline font-family="monospace">Collector</fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default <fo:inline font-family="monospace">Collector Filter</fo:inline> converts the raw Erlang
        trace data format into <fo:inline font-family="monospace">Event Records</fo:inline>. If you want to
        perform this differently you can of course write your own
        <fo:inline font-family="monospace">Collector Filter</fo:inline> from scratch. But it may probably save
        you some efforts if you first apply the default filter in
        <fo:inline font-family="monospace">et_selector:parse_event/2</fo:inline> before you apply your own
        conversions of its output.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp1117072" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.4 
      Global tracing</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Setting up an Erlang tracer on a set of nodes and connecting
    trace clients to the ports of these tracers is not intuitive. In
    order to make this it easier the <fo:inline font-family="monospace">Event Tracer</fo:inline> has a notion
    of global tracing. When used, the <fo:inline font-family="monospace">et_collector</fo:inline> process will
    monitor Erlang nodes and when one connects, an Erlang tracer will
    automatically be started on the newly connected node. A
    corresponding trace client will also be started on the
    <fo:inline font-family="monospace">Collector</fo:inline> node in order to automatically forward the trace
    <fo:inline font-family="monospace">Events</fo:inline> to the <fo:inline font-family="monospace">Collector</fo:inline>. Set the boolean parameter
    <fo:inline font-family="monospace">trace_global</fo:inline> to <fo:inline font-family="monospace">true</fo:inline> for either the
    <fo:inline font-family="monospace">et_collector</fo:inline> or <fo:inline font-family="monospace">et_viewer</fo:inline> in order to activate the
    global tracing. There is no restriction on how many concurrent
    (anonymous) collectors you can have, but you can only have one
    <fo:inline font-weight="bold">global</fo:inline> <fo:inline font-family="monospace">Collector</fo:inline> as its name is registered in
    <fo:inline font-family="monospace">global</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In order to further simplify the tracing, you can make use of
    the <fo:inline font-family="monospace">et:trace_me/4,5</fo:inline> functions. These functions are intended
    to be invoked from other applications when there are interesting
    <fo:inline font-family="monospace">Events</fo:inline>, in your application that needs to be
    highlighted. The functions are extremely light weight as they do
    nothing besides returning an atom. These functions are
    specifically designed to be traced for. As the caller explicitly
    provides the values for the <fo:inline font-family="monospace">Event Record</fo:inline> fields, the
    default <fo:inline font-family="monospace">Collector Filter</fo:inline> is able to automatically provide a
    customized <fo:inline font-family="monospace">Event Record</fo:inline> without any user defined filter
    functions.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In normal operation, the <fo:inline font-family="monospace">et:trace_me/4,5</fo:inline> calls are almost
    for free. When tracing is needed, you can either activate tracing
    on these functions explicitly. Or you can combine the usage of
    <fo:inline font-family="monospace">trace_global</fo:inline> with the usage of <fo:inline font-family="monospace">trace_pattern</fo:inline>. When
    set, the <fo:inline font-family="monospace">trace_pattern</fo:inline> will automatically be activated on
    all connected nodes. </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">One nice thing with the <fo:inline font-family="monospace">trace_pattern</fo:inline> is that it
    provides a very simple way of minimizing the amount of generated
    trace data by allowing you to explicitly control the detail level
    of the tracing. As you may have seen the <fo:inline font-family="monospace">et_viewer</fo:inline> have a
    slider called <fo:inline font-family="monospace">"Detail Level"</fo:inline> that allows you to control the
    detail level of the trace <fo:inline font-family="monospace">Events</fo:inline> displayed in the
    <fo:inline font-family="monospace">Viewer</fo:inline>. On the other hand if you set a low detail level in
    the <fo:inline font-family="monospace">trace_pattern</fo:inline>, lots of the trace data will never be
    generated and thus not sent over the socket to the trace client
    and stored in the <fo:inline font-family="monospace">Collector</fo:inline>.</fo:block>
  <fo:block id="idp1133984" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.5 
      Viewer window</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Almost all functionality available in the <fo:inline font-family="monospace">et_viewer</fo:inline> is
    also available via shortcuts. Which key that has the same effect
    as selecting a menu entry is shown enclosed in parentheses. For
    example pressing the key <fo:inline font-family="monospace">r</fo:inline> is equivalent to selecting the
    menu entry <fo:inline font-family="monospace">Viewer-&gt;Refresh</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">File menu:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Clear all events in the Collector</fo:inline> - Deletes all
	<fo:inline font-family="monospace">Events</fo:inline> stored in the <fo:inline font-family="monospace">Collector</fo:inline> and notifies all
	connected <fo:inline font-family="monospace">Viewers</fo:inline> about this.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Load events to the Collector from file</fo:inline> - Loads the
	<fo:inline font-family="monospace">Collector</fo:inline> with <fo:inline font-family="monospace">Events</fo:inline> from a file and notifies
	all connected <fo:inline font-family="monospace">Viewers</fo:inline> about this.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Save all events in the Collector to file</fo:inline> - Saves all
	<fo:inline font-family="monospace">Events</fo:inline> stored in the <fo:inline font-family="monospace">Collector</fo:inline> to file.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Print setup</fo:inline> - Enables editing of printer setting,
	such as paper and layout.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Print current page</fo:inline> - Prints the events on the
	current page. The page size is dependent of the selected paper
	type.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Print all pages</fo:inline> - Prints all events. The page size
	is dependent of the selected paper type.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Close this Viewer</fo:inline> - Closes this <fo:inline font-family="monospace">Viewer</fo:inline>
	window, but keeps all other <fo:inline font-family="monospace">Viewers</fo:inline> windows and the
	<fo:inline font-family="monospace">Collector</fo:inline> process.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Close other Viewers, but this</fo:inline> - Keeps this
	<fo:inline font-family="monospace">Viewer</fo:inline> window and its <fo:inline font-family="monospace">Collector</fo:inline> process, but
	closes all other <fo:inline font-family="monospace">Viewers</fo:inline> windowsconnected to the same
	    <fo:inline font-family="monospace">Collector</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Close all Viewers and the Collector</fo:inline> - Closes the
	<fo:inline font-family="monospace">Collector</fo:inline> and all <fo:inline font-family="monospace">Viewers</fo:inline> connected to it.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Viewer menu:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">First</fo:inline> - Scrolls <fo:inline font-family="monospace">this</fo:inline> viewer to the first
	<fo:inline font-family="monospace">Event</fo:inline> in the <fo:inline font-family="monospace">Collector</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Last</fo:inline> - Scrolls <fo:inline font-family="monospace">this</fo:inline> viewer to the last
	<fo:inline font-family="monospace">Event</fo:inline> in the <fo:inline font-family="monospace">Collector</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Prev</fo:inline> - Scrolls <fo:inline font-family="monospace">this</fo:inline> viewer one page
	backwards.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Next</fo:inline> - Scrolls <fo:inline font-family="monospace">this</fo:inline> viewer one page
	forward.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Refresh</fo:inline> - Clears <fo:inline font-family="monospace">this</fo:inline> viewer and re-read its
	<fo:inline font-family="monospace">Events</fo:inline> from the <fo:inline font-family="monospace">Collector</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Up</fo:inline> - Scrolls a few <fo:inline font-family="monospace">Events</fo:inline> backwards.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
	  
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Down</fo:inline> - Scrolls a few <fo:inline font-family="monospace">Events</fo:inline> forward.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Display all actors.</fo:inline> - Reset the settings for hidden
	and/or highlighted actors.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Collector menu:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">First</fo:inline> - Scrolls<fo:inline font-family="monospace">all</fo:inline> viewers to the first
	<fo:inline font-family="monospace">Event</fo:inline> in the <fo:inline font-family="monospace">Collector</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Last</fo:inline> - Scrolls <fo:inline font-family="monospace">all</fo:inline> viewers to the last
	<fo:inline font-family="monospace">Event</fo:inline> in the <fo:inline font-family="monospace">Collector</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Prev</fo:inline> - Scrolls <fo:inline font-family="monospace">all</fo:inline> viewers one page
        backwards.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Next</fo:inline> - Scrolls <fo:inline font-family="monospace">all</fo:inline> viewers one page
        forward.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Refresh</fo:inline> - Clears <fo:inline font-family="monospace">all</fo:inline> viewers and re-read
        their <fo:inline font-family="monospace">Events</fo:inline> from the <fo:inline font-family="monospace">Collector</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Filters and scaling menu:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ActiveFilter (=)</fo:inline> - Starts a new <fo:inline font-family="monospace">Viewer</fo:inline> window
        with the same active filter and scale as the current one.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ActiveFilter (+)</fo:inline> - Starts a new <fo:inline font-family="monospace">Viewer</fo:inline> window
        with the same active filter but a larger scale than the
        current one.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ActiveFilter (-)</fo:inline> - Starts a new <fo:inline font-family="monospace">Viewer </fo:inline>window
        with the same active filter but a smaller scale than the
        current one.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">all (0)</fo:inline> - Starts a new <fo:inline font-family="monospace">Viewer</fo:inline> with the
        <fo:inline font-family="monospace">Collector Filter</fo:inline> as active filter. It will cause all
        events in the collector to be viewed.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">AnotherFilter (2)</fo:inline> - If more filters are inserted
        into the dictionary, these will turn up here as entries in the
        <fo:inline font-family="monospace">Filters</fo:inline> menu. The second filter will get the shortcut
        number 2, the next one number 3 etc. The names are sorted.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Slider and radio buttons:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Hide From=To</fo:inline> - When true, this means that the
        <fo:inline font-family="monospace">Viewer</fo:inline> will hide all <fo:inline font-family="monospace">Events</fo:inline> where the from-actor
        equals to its to-actor. These events are sometimes called
        actions.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Hide (excluded actors)</fo:inline> - When true, this means that
        the <fo:inline font-family="monospace">Viewer</fo:inline> will hide all <fo:inline font-family="monospace">Events</fo:inline> whose actors are
        marked as excluded. Excluded actors are normally enclosed in
        round brackets when they are displayed inthe
        <fo:inline font-family="monospace">Viewer</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Detail level</fo:inline> - This slider controls the resolution
        of the <fo:inline font-family="monospace">Viewer</fo:inline>. Only <fo:inline font-family="monospace">Events</fo:inline> with a detail level
        <fo:inline font-family="monospace">smaller</fo:inline> than the selected one (default=100=max) are
        displayed.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Other features:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Vertical scroll</fo:inline> - Use mouse wheel and up/down arrows
	to scroll little. Use page up/down and home/end buttons to
	scroll more.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Display details of an event</fo:inline> - Left mouse click on
	the event label or the arrowand a new <fo:inline font-family="monospace">Contents Viewer</fo:inline>
	window will pop up, displaying the contents of an
	<fo:inline font-family="monospace">Event</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Highlight actor (toggle)</fo:inline> - Left mouse click on the
	actor name tag. The actor name will be enclosed in square
	brackets <fo:inline font-family="monospace">[]</fo:inline>. When one or more actors are highlighted,
	only events related to those actors are displayed. All others
	are hidden.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Exclude actor (toggle)</fo:inline> - Right mouse click on the
	actor name tag. The actor name will be enclosed in round
	brackets <fo:inline font-family="monospace">()</fo:inline>. When an actor is excluded, all events
	related to this actor is hidden. If the checkbox <fo:inline font-family="monospace">Hide
	(excluded actors)</fo:inline> is checked, even the name tags and
	corresponding vertical line of excluded actors will be
	hidden.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Move actor</fo:inline> - Left mouse button drag and drop on
	actor name tag. Move the actor by first clicking on the actor
	name, keeping the button pressed while moving the cursor to a
	new location and release the button where the actor should be
	moved to.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Display all actors</fo:inline> - Press the 'a' button. Reset the
	settings for hidden and/or highlighted actors.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp1416352" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.6 
      Configuration</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Event Records</fo:inline> in the Ets table are ordered by their
    timestamp. Which timestamp that should be used is controlled via
    the <fo:inline font-family="monospace">event_order</fo:inline> parameter. Default is <fo:inline font-family="monospace">trace_ts</fo:inline> which
    means the time when the trace data was generated. <fo:inline font-family="monospace">event_ts</fo:inline>
    means the time when the trace data was parsed (transformed into an
    <fo:inline font-family="monospace">Event Record</fo:inline>).</fo:block>
  <fo:block id="idp1420144" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.7 
      Contents viewer window</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">File menu:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Close</fo:inline> - Close this window.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Save</fo:inline> - Save the contents of this window to file.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Filters menu:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ActiveFilter</fo:inline> - Start a new <fo:inline font-family="monospace">Contents Viewer
        window</fo:inline> with the same active filter.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">AnotherFilter (2)</fo:inline> - If more filters are inserted
        into the dictionary, these will turn up here as entries in the
        <fo:inline font-family="monospace">Filters</fo:inline> menu. The second filter will be number 2, the
        next one number 3 etc. The names are sorted.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Hide menu:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Hide actor in viewer</fo:inline> - Known actors are shown as a
        named vertical bars in the <fo:inline font-family="monospace">Viewer</fo:inline> window. By hiding the
        actor, its vertical bar will be removed and the <fo:inline font-family="monospace">Viewer</fo:inline>
        will be refreshed.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Hiding the actor</fo:inline> is only useful if the
        <fo:inline font-family="monospace">max_actors</fo:inline> threshold has been reached, as it then will
        imply that the "hidden" actor will be displayed as if it were
        <fo:inline font-family="monospace">"UNKNOWN"</fo:inline>. If the <fo:inline font-family="monospace">max_actors</fo:inline> threshold not have
        been reached, the actor will re-appear as a vertical bar in
        the <fo:inline font-family="monospace">Viewer</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Show actor in viewer</fo:inline> - This implies that the actor
        will be added as a known actor in the <fo:inline font-family="monospace">Viewer</fo:inline> with its
        own vertical bar.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Search menu:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Forward from this event</fo:inline> - Set this event to be the first
        event in the viewer and change its display mode to be enter
        forward search mode. The actor of this event (from, to or
        both) will be added to the list of selected actors.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Reverse from this event</fo:inline> - Set this event to be the
        first <fo:inline font-family="monospace">Event</fo:inline> in the <fo:inline font-family="monospace">Viewer</fo:inline> and change its display
        mode to be enter reverse search mode. The actor of this
        <fo:inline font-family="monospace">Event</fo:inline> (from, to or both) will be added to the list of
        selected actors. Observe, that the <fo:inline font-family="monospace">Events</fo:inline> will be shown
        in reverse order.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Abort search. Display all</fo:inline> - Switch the display mode
        of the <fo:inline font-family="monospace">Viewer</fo:inline> to show all <fo:inline font-family="monospace">Events</fo:inline> regardless of
        any ongoing searches. Abort the searches.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp1448928" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.4  Advanced examples</fo:marker>1.4  Advanced examples</fo:block><fo:block id="idp1452928" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.1 
      A simulated Mnesia transaction</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Erlang code for running the simulated <fo:inline font-family="monospace">Mnesia</fo:inline> transaction
    example in the previous chapter is included in the
    <fo:inline font-family="monospace">et/examples/et_demo.erl</fo:inline> file:</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

sim_trans() -&gt;
    sim_trans([]).

sim_trans(ExtraOptions) -&gt;
    Options = [{dict_insert, {filter, mgr_actors}, fun mgr_actors/1}],
    {ok, Viewer} = et_viewer:start_link(Options ++ ExtraOptions),
    Collector = et_viewer:get_collector_pid(Viewer),
    et_collector:report_event(Collector, 60, my_shell, mnesia_tm, start_outer, 
                              "Start outer transaction"),
    et_collector:report_event(Collector, 40, mnesia_tm, my_shell, new_tid, 
                              "New transaction id is 4711"),
    et_collector:report_event(Collector, 20, my_shell, mnesia_locker, try_write_lock, 
                              "Acquire write lock for {my_tab, key}"),
    et_collector:report_event(Collector, 10, mnesia_locker, my_shell, granted,
                              "You got the write lock for {my_tab, key}"),
    et_collector:report_event(Collector, 60, my_shell, do_commit,
                              "Perform  transaction commit"),
    et_collector:report_event(Collector, 40, my_shell, mnesia_locker, release_tid,
                              "Release all locks for transaction 4711"),
    et_collector:report_event(Collector, 60, my_shell, mnesia_tm, delete_transaction,
                              "End of outer transaction"),
    et_collector:report_event(Collector, 20, my_shell, end_outer,
                              "Transaction returned {atomic, ok}"),
    {collector, Collector}.
</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

mgr_actors(E) when is_record(E, event) -&gt;
    Actor = fun(A) -&gt;
               case A of
                   mnesia_tm     -&gt; trans_mgr;
                   mnesia_locker -&gt; lock_mgr;
                   _             -&gt; A
               end
            end,
    {true, E#event{from = Actor(E#event.from),
                   to = Actor(E#event.to),
                   contents = [{orig_from, E#event.from},
                               {orig_to,   E#event.to},
                               {orig_contents, E#event.contents}]}}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you invoke the <fo:inline font-family="monospace">et_demo:sim_trans()</fo:inline> function, a
    <fo:inline font-family="monospace">Viewer</fo:inline> window will pop up and the sequence trace will be
    almost the same as if the following <fo:inline font-family="monospace">Mnesia</fo:inline> transaction
    would have been run:</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
mnesia:transaction(fun() -&gt; mnesia:write({my_tab, key, val}) end).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">And the viewer window will look like:</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Erlang R13B03 (erts-5.7.4) [64-bit] [smp:4:4] [rq:4] [async-threads:0] [kernel-poll:false]

Eshell V5.7.4  (abort with ^G)
1&gt; {ok, Viewer} = et_viewer:start([]).
{ok,&lt;0.40.0&gt;;}
2&gt; et_demo:sim_trans().
{ok,{table_handle,&lt;0.45.0&gt;,24596,trace_ts,
     #Fun&lt;et_collector.0.62831470&gt;}}</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>

    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="sim_trans.png"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        4.1:
         
        A simulated Mnesia transaction which writes one record</fo:block>
    </fo:block>

  <fo:block id="idp1465408" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.2 
      Some convenient functions used in the Mnesia transaction
    example</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">module_as_actor</fo:inline> filter converts the <fo:inline font-family="monospace">Event
    Records</fo:inline> so the module names becomes actors and the invoked
    functions becomes labels. If the information about who the caller
    was it will be displayed as an arrow directed from the caller to
    the callee. The <fo:inline font-family="monospace">[{message, {caller}}, {return_trace}]</fo:inline>
    options to <fo:inline font-family="monospace">dbg:tpl/2</fo:inline> function will imply the necessary
    information in the Erlang traces.  Here follows the
    <fo:inline font-family="monospace">module_as_actor</fo:inline> filter:</fo:block>


    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

module_as_actor(E) when is_record(E, event) -&gt;
    case lists:keysearch(mfa, 1, E#event.contents) of
        {value, {mfa, {M, F, _A}}} -&gt;
            case lists:keysearch(pam_result, 1, E#event.contents) of
                {value, {pam_result, {M2, _F2, _A2}}} -&gt;
                    {true, E#event{label = F, from = M2, to = M}};
                _ -&gt;
                    {true, E#event{label = F, from = M, to = M}}
            end;
        _ -&gt;
            false
    end.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">plain_process_info</fo:inline> filter does not alter the
    <fo:inline font-family="monospace">Event Records</fo:inline>.  It merely ensures that the event not
    related to processes are skipped:</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

plain_process_info(E) when is_record(E, event) -&gt;
    case E#event.label of
        send                          -&gt; true;
        send_to_non_existing_process  -&gt; true;
        'receive'                     -&gt; true;
        spawn                         -&gt; true;
        exit                          -&gt; true;
        link                          -&gt; true;
        unlink                        -&gt; true;
        getting_linked                -&gt; true;
        {seq_send, _Label}            -&gt; true;
        {seq_receive, _Label}         -&gt; true;
        {seq_print, _Label}           -&gt; true;
        {drop, _N}                    -&gt; true;
        _                             -&gt; false
    end.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">plain_process_info_nolink</fo:inline> filter does not alter the
    <fo:inline font-family="monospace">Event Records</fo:inline>. It do makes use of the
    <fo:inline font-family="monospace">plain_process_info</fo:inline> , but do also ensure that the process
    info related to linking and unlinking is skipped:</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

plain_process_info_nolink(E) when is_record(E, event) -&gt;
    (E#event.label /= link) and
    (E#event.label /= unlink) and
    (E#event.label /= getting_linked) and
    plain_process_info(E). </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In order to simplify the startup of an <fo:inline font-family="monospace">et_viewer</fo:inline> process
    with the filters mentioned above, plus some others (that also are
    found in <fo:inline font-family="monospace">et/examples/et_demo.erl</fo:inline> src/et_collector.erl the
    <fo:inline font-family="monospace">et_demo:start/0,1</fo:inline> functions can be used:</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

start() -&gt;
    start([]).

start(ExtraOptions) -&gt;
    Options = [{trace_global, true},
               {parent_pid, undefined},
               {max_actors, infinity},
               {max_events, 1000},
               {active_filter, module_as_actor}],
    et_viewer:start_link(filters() ++ Options ++ ExtraOptions).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A simple one-liner starts the tool:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
          erl -pa ../examples -s et_demo</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The filters are included by the following parameters:</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

filters() -&gt;
    [{dict_insert, {filter, module_as_actor},
                   fun module_as_actor/1},
     {dict_insert, {filter, plain_process_info},
                   fun plain_process_info/1},
     {dict_insert, {filter, plain_process_info_nolink},
                   fun plain_process_info_nolink/1},
     {dict_insert, {filter, named_process_info},
                   fun named_process_info/1},
     {dict_insert, {filter, named_process_info_nolink},
                   fun named_process_info_nolink/1},
     {dict_insert, {filter, node_process_info},
                   fun node_process_info/1},
     {dict_insert, {filter, node_process_info_nolink},
                   fun node_process_info_nolink/1},
     {dict_insert, {filter, application_as_actor},
                   fun application_as_actor/1}
    ].</fo:block>
  <fo:block id="idp1483744" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.3 
      Erlang trace of a real Mnesia transaction</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following piece of code <fo:inline font-family="monospace">et_demo:trace_mnesia/0</fo:inline>
    activates call tracing of both local and external function calls
    for all modules in the <fo:inline font-family="monospace">Mnesia</fo:inline> application. The call traces
    are configured cover all processes (both existing and those that
    are spawned in the future) and include timestamps for trace
    data. It do also activate tracing of process related events for
    <fo:inline font-family="monospace">Mnesia</fo:inline>'s static processes plus the calling process (that is
    your shell). Please, observe that the <fo:inline font-family="monospace">whereis/1</fo:inline> call in the
    following code requires that both the traced <fo:inline font-family="monospace">Mnesia</fo:inline>
    application and the <fo:inline font-family="monospace">et_viewer</fo:inline> is running on the same
    node:</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

trace_mnesia() -&gt;
    Modules = mnesia:ms(),
    Spec = [{message, {caller}}, {return_trace}],
    Flags = [send, 'receive', procs, timestamp],
    dbg:p(all, [call, timestamp]),
    [dbg:tpl(M, [{'_', [], Spec}]) || M &lt;- Modules],
    LocallyRunningServers = [M || M &lt;- Modules, whereis(M) /= undefined],
    [dbg:p(whereis(RS), Flags) || RS &lt;- LocallyRunningServers],
    dbg:p(self(), Flags),
    LocallyRunningServers.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">et_demo:live_trans/0</fo:inline> function starts the global
    <fo:inline font-family="monospace">Collector</fo:inline>, starts a <fo:inline font-family="monospace">Viewer</fo:inline>, starts <fo:inline font-family="monospace">Mnesia</fo:inline>,
    creates a local table, activates tracing (as described above) and
    registers the shell process is as 'my_shell' for clarity. Finally
    a simple <fo:inline font-family="monospace">Mnesia</fo:inline> transaction that writes a single record
    is run:</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

live_trans() -&gt;
    live_trans([]).

live_trans(ExtraOptions) -&gt;
    Options = [{title, "Mnesia tracer"},
	       {hide_actions, true},
	       {active_filter, named_process_info_nolink}],
    et_demo:start(Options ++ ExtraOptions),
    mnesia:start(),
    mnesia:create_table(my_tab, [{ram_copies, [node()]}]),
    et_demo:trace_mnesia(),
    register(my_shell, self()),

    mnesia:transaction(fun() -&gt; mnesia:write({my_tab, key, val}) end).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Now we run the <fo:inline font-family="monospace">et_demo:live_trans/0</fo:inline> function:</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
erl -pa ../examples
Erlang R13B03 (erts-5.7.4) [64-bit] [smp:4:4] [rq:4]
                           [async-threads:0] [kernel-poll:false]

Eshell V5.7.4  (abort with ^G)
1&gt; et_demo:live_trans().
{atomic,ok}</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Please, explore the different filters in order to see how the traced
      transaction can be seen from different point of views:</fo:block>

    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="live_trans.png"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        4.2:
         
        A real Mnesia transaction which writes one record</fo:block>
    </fo:block>

  <fo:block id="idp1497888" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.4 
      Erlang trace of Megaco startup</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Event Tracer (ET)</fo:inline> tool was initially written in
    order to demonstrate how messages where sent over the
    <fo:inline font-family="monospace">Megaco</fo:inline> protocol. This were back in the old days before the
    standard bodies of <fo:inline font-family="monospace">IETF</fo:inline> and <fo:inline font-family="monospace">ITU</fo:inline> had approved
    <fo:inline font-family="monospace">Megaco</fo:inline> (also called <fo:inline font-family="monospace">H.248</fo:inline>) as an international
    standard.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the <fo:inline font-family="monospace">Megaco</fo:inline> application of Erlang/OTP, the code is
    carefully instrumented with calls to <fo:inline font-family="monospace">et:trace_me/5</fo:inline>. For
    each call a detail level is given in order to enable dynamic
    control of the trace level in a simple manner.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">megaco_filter</fo:inline> module implements a customized filter
    for <fo:inline font-family="monospace">Megaco</fo:inline> messages. It does also make use of
    <fo:inline font-family="monospace">trace_global</fo:inline> combined with usage of the
    <fo:inline font-family="monospace">trace_pattern</fo:inline>:</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(megaco_filter).
-export([start/0]).

start() -&gt;
    Options =
        [{event_order, event_ts},
         {scale, 3},
         {max_actors, infinity},
         {trace_pattern, {megaco, max}},
         {trace_global, true},
         {dict_insert, {filter, megaco_filter}, fun filter/1},
         {active_filter, megaco_filter},
         {title, "Megaco tracer - Erlang/OTP"}],
    et_viewer:start(Options).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">First we start an Erlang node with a global <fo:inline font-family="monospace">Collector</fo:inline>
    and its <fo:inline font-family="monospace">Viewer</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
erl -sname observer
Erlang R13B03 (erts-5.7.4) [64-bit] [smp:4:4] [rq:4] [async-threads:0] [kernel-poll:false]

Eshell V5.7.4  (abort with ^G)
(observer@falco)1&gt; megaco_filter:start().
{ok,&lt;0.48.0&gt;}</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Secondly we start another Erlang node which we connect the
    observer node, before we start the application that we want to
    trace. In this case we start a Media Gateway Controller that
    listens for both TCP and UDP on the text and binary ports for
    Megaco:</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
erl -sname mgc -pa ../../megaco/examples/simple
Erlang R13B03 (erts-5.7.4) [64-bit] [smp:4:4] [rq:4] [async-threads:0] [kernel-poll:false]

Eshell V5.7.4  (abort with ^G)
(mgc@falco)1&gt; net:ping(observer@falco).
pong
(mgc@falco)2&gt; megaco:start().
ok
(mgc@falco)3&gt; megaco_simple_mgc:start().
{ok,[{ok,2944,
         {megaco_receive_handle,{deviceName,"controller"},
                                megaco_pretty_text_encoder,[],megaco_tcp,dynamic}},
     {ok,2944,
         {megaco_receive_handle,{deviceName,"controller"},
                                megaco_pretty_text_encoder,[],megaco_udp,dynamic}},
     {ok,2945,
         {megaco_receive_handle,{deviceName,"controller"},
                                megaco_binary_encoder,[],megaco_tcp,dynamic}},
     {ok,2945,
         {megaco_receive_handle,{deviceName,"controller"},
                                megaco_binary_encoder,[],megaco_udp,dynamic}}]}</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">And finally we start an Erlang node for the Media Gateways and
    connect to the observer node. Each Media Gateway connects to the
    controller and sends an initial Service Change message. The
    controller accepts the gateways and sends a reply to each one
    using the same transport mechanism and message encoding according
    to the preference of each gateway. That is all combinations of
    TCP/IP transport, UDP/IP transport, text encoding and ASN.1 BER
    encoding:</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Erlang R13B03 (erts-5.7.4) [64-bit] [smp:4:4] [rq:4] [async-threads:0] [kernel-poll:false]

Eshell V5.7.4  (abort with ^G)
(mg@falco)1&gt; net:ping(observer@falco).
pong
(mg@falco)2&gt; megaco_simple_mg:start().
[{{deviceName,"gateway_tt"},
  {error,{start_user,megaco_not_started}}},
 {{deviceName,"gateway_tb"},
  {error,{start_user,megaco_not_started}}},
 {{deviceName,"gateway_ut"},
  {error,{start_user,megaco_not_started}}},
 {{deviceName,"gateway_ub"},
  {error,{start_user,megaco_not_started}}}]
(mg@falco)3&gt; megaco:start().
ok
(mg@falco)4&gt; megaco_simple_mg:start().
[{{deviceName,"gateway_tt"},
  {1,
   {ok,[{'ActionReply',0,asn1_NOVALUE,asn1_NOVALUE,
            [{serviceChangeReply,
                 {'ServiceChangeReply',
                     [{megaco_term_id,false,["root"]}],
                     {serviceChangeResParms,
                         {'ServiceChangeResParm',
                             {deviceName,"controller"},
                             asn1_NOVALUE,asn1_NOVALUE,asn1_NOVALUE,
                             asn1_NOVALUE}}}}]}]}}},
 {{deviceName,"gateway_tb"},
  {1,
   {ok,[{'ActionReply',0,asn1_NOVALUE,asn1_NOVALUE,
            [{serviceChangeReply,
                 {'ServiceChangeReply',
                     [{megaco_term_id,false,["root"]}],
                     {serviceChangeResParms,
                         {'ServiceChangeResParm',
                             {deviceName,"controller"},
                             asn1_NOVALUE,asn1_NOVALUE,asn1_NOVALUE,
                             asn1_NOVALUE}}}}]}]}}},
 {{deviceName,"gateway_ut"},
  {1,
   {ok,[{'ActionReply',0,asn1_NOVALUE,asn1_NOVALUE,
            [{serviceChangeReply,
                 {'ServiceChangeReply',
                     [{megaco_term_id,false,["root"]}],
                     {serviceChangeResParms,
                         {'ServiceChangeResParm',
                             {deviceName,"controller"},
                             asn1_NOVALUE,asn1_NOVALUE,asn1_NOVALUE,
                             asn1_NOVALUE}}}}]}]}}},
 {{deviceName,"gateway_ub"},
  {1,
   {ok,[{'ActionReply',0,asn1_NOVALUE,asn1_NOVALUE,
            [{serviceChangeReply,
                 {'ServiceChangeReply',
                     [{megaco_term_id,false,["root"]}],
                     {serviceChangeResParms,
                         {'ServiceChangeResParm',
                             {deviceName,"controller"},
                             asn1_NOVALUE,asn1_NOVALUE,
                             asn1_NOVALUE,...}}}}]}]}}}]</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Megaco</fo:inline> adopted viewer looks like this, when we have clicked
    on the <fo:inline font-weight="bold">[gateway_tt]</fo:inline> actor name in order to only display the events
    regarding that actor:</fo:block>
    
    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="megaco_tracer.png"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        4.3:
         
        The viewer adopted for Megaco</fo:block>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A pretty printed <fo:inline font-family="monospace">Megaco</fo:inline> message looks like this:</fo:block>

    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="megaco_filter.png"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        4.4:
         
        A textual Megaco message</fo:block>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">And the corresponding internal form for the same <fo:inline font-family="monospace">Megaco</fo:inline> message
    looks like this:</fo:block>

    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="megaco_collector.png"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        4.5:
         
        The internal form of a Megaco message</fo:block>
    </fo:block>

  <fo:block id="idp451072" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">2   
      Reference Manual</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Event Tracer (ET) uses the built-in trace mechanism in Erlang
      and provides tools for collection and graphical viewing of trace data.</fo:block>
  <fo:block page-break-before="always" id="idp1189056" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">et</fo:marker>et</fo:block>Erlang module</fo:block>
  <fo:block/>
  et
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Interface module for the Event Trace (ET) application</fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1186560">trace_me(DetailLevel, From, To, Label, Contents) -&gt; hopefully_traced</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DetailLevel = integer(X) when X =&lt; 0, X &gt;= 100</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">From        = actor()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">To          = actor()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Label       = atom() | string() | term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Contents    = [{Key, Value}] | term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">actor()     = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A function that is intended to be traced.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is intended to be invoked at strategic places
        in user applications in order to enable simplified
        tracing. The functions are extremely light weight as they do
        nothing besides returning an atom. The functions are designed
        for being traced. The global tracing mechanism in
        <fo:inline font-family="monospace">et_collector</fo:inline> defaults to set its trace pattern to these
        functions.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The label is intended to provide a brief summary of the
        event. It is preferred to use an atom but a string would also
        do.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The contents can be any term but in order to simplify
          post processing of the traced events, a plain list
          of {Key, Value} tuples is preferred.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Some events, such as messages, are directed from some actor to another.
          Other events (termed actions) may be undirected and only have one actor.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1012880">trace_me(DetailLevel, FromTo, Label, Contents) -&gt; hopefully_traced</fo:block></fo:block>
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Invokes <fo:inline font-family="monospace">et:trace_me/5</fo:inline> with both <fo:inline font-family="monospace">From</fo:inline> and <fo:inline font-family="monospace">To</fo:inline>
       set to <fo:inline font-family="monospace">FromTo</fo:inline>.</fo:block>
     </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1009168">phone_home(DetailLevel, FromTo, Label, Contents) -&gt; hopefully_traced</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1008784">phone_home(DetailLevel, From, To, Label, Contents) -&gt; hopefully_traced</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These functions sends a signal to the outer space and the
        caller hopes that someone is listening. In other words, they
        invoke <fo:inline font-family="monospace">et:trace_me/4</fo:inline> and <fo:inline font-family="monospace">et:trace_me/5</fo:inline>
        respectively.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1005376">report_event(DetailLevel, FromTo, Label, Contents) -&gt; hopefully_traced</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1004992">report_event(DetailLevel, From, To, Label, Contents) -&gt; hopefully_traced</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Deprecated functions which for the time being are kept for
        backwards compatibility. Invokes <fo:inline font-family="monospace">et:trace_me/4</fo:inline> and
        <fo:inline font-family="monospace">et:trace_me/5</fo:inline> respectively.</fo:block>
      </fo:block>
  
  
<fo:block page-break-before="always" id="idp1028480" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">et_collector</fo:marker>et_collector</fo:block>Erlang module</fo:block>
  <fo:block/>
  et_collector
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Interface module for the Event Trace (ET) application</fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp733552">start_link(Options) -&gt; {ok, CollectorPid} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = [option()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">option() = {parent_pid, pid()} | {event_order, event_order()} | {dict_insert, {filter, collector}, collector_fun()} | {dict_insert, {filter, event_filter_name()}, event_filter_fun()} | {dict_insert, {subscriber, pid()}, dict_val()} | {dict_insert, dict_key(), dict_val()} | {dict_delete, dict_key()} | {trace_client, trace_client()} | {trace_global, boolean()} |  {trace_pattern, trace_pattern()} | {trace_port, integer()} |  {trace_max_queue, integer()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">event_order() = trace_ts | event_ts</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">trace_pattern() = {report_module(), extended_dbg_match_spec()} | undefined</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">report_module() = atom() | undefined &lt;v&gt;extended_dbg_match_spec()() = detail_level() | dbg_match_spec()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">detail_level() = min | max | integer(X) when X =&lt; 0, X &gt;= 100</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">trace_client() =  {event_file, file_name()} | {dbg_trace_type(), dbg_trace_parameters()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">file_name() = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">collector_fun() = trace_filter_fun() | event_filter_fun()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">trace_filter_fun() = fun(TraceData) -&gt; false | true | {true, NewEvent}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">event_filter_fun() = fun(Event) -&gt; false | true | {true, NewEvent}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">event_filter_name() = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TraceData = erlang_trace_data()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Event = NewEvent = record(event)</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">dict_key() = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">dict_val() = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CollectorPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Start a collector process.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The collector collects trace events and keeps them ordered by their
          timestamp. The timestamp may either reflect the time when the
          actual trace data was generated (trace_ts) or when the trace data
          was transformed into an event record (event_ts). If the time stamp
          is missing in the trace data (missing timestamp option to
          erlang:trace/4) the trace_ts will be set to the event_ts.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Events are reported to the collector directly with the report
          function or indirectly via one or more trace clients. All reported
          events are first filtered thru the collector filter before they are
          stored by the collector. By replacing the default collector filter
          with a customized dito it is possible to allow any trace data as
          input. The collector filter is a dictionary entry with the
          predefined key {filter, collector} and the value is a fun of
          arity 1. See et_selector:make_event/1 for interface details,
          such as which erlang:trace/1 tuples that are accepted.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The collector has a built-in dictionary service. Any term may be
          stored as value in the dictionary and bound to a unique key. When
          new values are inserted with an existing key, the new values will
          overwrite the existing ones. Processes may subscribe on dictionary
          updates by using {subscriber, pid()} as dictionary key. All
          dictionary updates will be propagated to the subscriber processes
          matching the pattern {{subscriber, '_'}, '_'} where the first '_'
          is interpreted as a pid().</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In global trace mode, the collector will automatically
        start tracing on all connected Erlang nodes. When a node
        connects, a port tracer will be started on that node and a
        corresponding trace client on the collector node.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default values:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>parent_pid - self().</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>event_order - trace_ts.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>trace_global - false.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>trace_pattern - undefined.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>trace_port - 4711.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>trace_max_queue - 50.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp638768">stop(CollectorPid) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CollectorPid = pid()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stop a collector process.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp718496">save_event_file(CollectorPid, FileName, Options) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CollectorPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FileName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = [option()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">option() = event_option() | file_option() | table_option()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">event_option() = existing</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">file_option() = write | append</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">table_option() = keep | clear</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Save the events to a file.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By default the currently stored events (existing) are
          written to a brand new file (write) and the events are
          kept (keep) after they have been written to the file.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Instead of keeping the events after writing them to file,
          it is possible to remove all stored events after they
          have successfully written to file (clear).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The options defaults to existing, write and keep.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1259472">load_event_file(CollectorPid, FileName) -&gt; {ok, BadBytes} | exit(Reason)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CollectorPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FileName = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">BadBytes = integer(X) where X &gt;= 0</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Load the event table from a file.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1018656">report(Handle, TraceOrEvent) -&gt; {ok, Continuation} | exit(Reason)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1019072">report_event(Handle, DetailLevel, FromTo, Label, Contents) -&gt; {ok, Continuation} | exit(Reason)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1019488">report_event(Handle, DetailLevel, From, To, Label, Contents) -&gt; {ok, Continuation} | exit(Reason)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Handle = Initial | Continuation</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Initial = collector_pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">collector_pid() = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Continuation = record(table_handle)</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TraceOrEvent = record(event) | dbg_trace_tuple() | end_of_trace</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DetailLevel = integer(X) when X =&lt; 0, X &gt;= 100</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">From        = actor()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">To          = actor()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FromTo      = actor()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Label       = atom() | string() | term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Contents    = [{Key, Value}] | term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">actor()  = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Report an event to the collector.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All events are filtered thru the collector filter, which
          optionally may transform or discard the event. The first
          call should use the pid of the collector process as
          report handle, while subsequent calls should use the
          table handle.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp710464">make_key(Type, Stuff) -&gt; Key</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Type = record(table_handle) | trace_ts | event_ts</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Stuff = record(event) | Key</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = record(event_ts) | record(trace_ts)</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Make a key out of an event record or an old key.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp991712">get_table_handle(CollectorPid) -&gt; Handle</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CollectorPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Handle = record(table_handle)</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Return a table handle.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp716304">get_global_pid() -&gt; CollectorPid | exit(Reason)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CollectorPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Return a the identity of the globally registered
          collector if there is any.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp642368">change_pattern(CollectorPid, RawPattern) -&gt; {old_pattern, TracePattern}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CollectorPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">RawPattern = {report_module(), extended_dbg_match_spec()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">report_module() = atom() | undefined</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">extended_dbg_match_spec()() = detail_level() | dbg_match_spec()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">RawPattern = detail_level()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">detail_level() = min | max | integer(X) when X =&lt; 0, X &gt;= 100</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TracePattern = {report_module(), dbg_match_spec_match_spec()}</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Change active trace pattern globally on all trace nodes.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp473584">dict_insert(CollectorPid, {filter, collector}, FilterFun) -&gt; ok</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp474080">dict_insert(CollectorPid, {subscriber, SubscriberPid}, Void) -&gt; ok</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp474576">dict_insert(CollectorPid, Key, Val) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CollectorPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FilterFun = filter_fun() </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SubscriberPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Void = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Val = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Insert a dictionary entry
          and send a {et, {dict_insert, Key, Val}} tuple
          to all registered subscribers.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the entry is a new subscriber, it will imply that
          the new subscriber process first will get one message
          for each already stored dictionary entry, before it
          and all old subscribers will get this particular entry.
          The collector process links to and then supervises the
          subscriber process. If the subscriber process dies it
          will imply that it gets unregistered as with a normal
          dict_delete/2.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp698272">dict_lookup(CollectorPid, Key) -&gt; [Val]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CollectorPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FilterFun = filter_fun() </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CollectorPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Val = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Lookup a dictionary entry and return zero or one value.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1261536">dict_delete(CollectorPid, Key) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CollectorPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SubscriberPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = {subscriber, SubscriberPid} | term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Delete a dictionary entry
          and send a {et, {dict_delete, Key}} tuple
          to all registered subscribers.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the deleted entry is a registered subscriber, it will
          imply that the subscriber process gets is unregistered as
          subscriber as well as it gets it final message.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp843232">dict_match(CollectorPid, Pattern) -&gt; [Match]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CollectorPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Pattern = '_' | {key_pattern(), val_pattern()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">key_pattern() = ets_match_object_pattern()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">val_pattern() = ets_match_object_pattern()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Match = {key(), val()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">key() = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">val() = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Match some dictionary entries</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1205840">multicast(_CollectorPid, Msg) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CollectorPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CollectorPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Msg = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sends a message to all registered subscribers.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp725856">start_trace_client(CollectorPid, Type, Parameters) -&gt; file_loaded | {trace_client_pid, pid()} | exit(Reason)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Type       = dbg_trace_client_type()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Parameters = dbg_trace_client_parameters()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Pid        = dbg_trace_client_pid()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Load raw Erlang trace from a file, port or process.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp730112">iterate(Handle, Prev, Limit) -&gt; NewAcc</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Short for iterate(Handle, Prev, Limit, undefined, Prev) -&gt; NewAcc</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp751264">iterate(Handle, Prev, Limit, Fun, Acc) -&gt; NewAcc</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Handle = collector_pid() | table_handle()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Prev = first | last | event_key()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Limit = done() | forward() | backward()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">collector_pid() = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">table_handle() = record(table_handle)</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">event_key() = record(event) | record(event_ts) | record(trace_ts)</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">done() = 0</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">forward() = infinity | integer(X) where X &gt; 0</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">backward() = '-infinity' | integer(X) where X &lt; 0</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Fun = fun(Event, Acc) -&gt; NewAcc &lt;v&gt;Acc = NewAcc = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Iterate over the currently stored events.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Iterates over the currently stored events and applies
          a function for each event. The iteration may be performed
          forwards or backwards and may be limited to a maximum
          number of events (abs(Limit)).</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1221552">clear_table(Handle) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Handle = collector_pid() | table_handle()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">collector_pid() = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">table_handle() = record(table_handle)</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Clear the event table.</fo:block>
      </fo:block>
  
  
<fo:block page-break-before="always" id="idp1244080" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">et_selector</fo:marker>et_selector</fo:block>Erlang module</fo:block>
  <fo:block/>
  et_selector
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
  
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1246256">make_pattern(RawPattern) -&gt; TracePattern</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">RawPattern = detail_level()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TracePattern = erlang_trace_pattern_match_spec()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">detail_level() = min | max | integer(X) when X &gt;= 0, X =&lt; 100</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Makes a trace pattern suitable to feed change_pattern/1</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Min detail level deactivates tracing of calls to <fo:inline font-family="monospace">et:trace_me/4,5</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Max detail level activates tracing of all calls to <fo:inline font-family="monospace">et:trace_me/4,5</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">integer(X) detail level activates tracing of all calls to
        <fo:inline font-family="monospace">et:trace_me/4,5</fo:inline> whose detail level argument is lesser than
        X.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See also <fo:inline font-family="monospace">erlang:trace_pattern/2</fo:inline> for more info about its <fo:inline font-family="monospace">match_spec()</fo:inline></fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1254192">change_pattern(Pattern) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Pattern = detail_level() | empty_match_spec() | erlang_trace_pattern_match_spec()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">detail_level() = min | max | integer(X) when  X &gt;= 0, X =&lt; 100</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">empty_match_spec() = [] </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Activates/deactivates tracing by changing the current trace pattern.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">min</fo:inline> detail level deactivates tracing of calls to <fo:inline font-family="monospace">et:trace_me/4,5</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">max</fo:inline> detail level activates tracing of all calls to <fo:inline font-family="monospace">et:trace_me/4,5</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">integer(X)</fo:inline> detail level activates tracing of all
        calls to <fo:inline font-family="monospace">et:trace_me/4,5</fo:inline> whose detail level argument is
        lesser than <fo:inline font-family="monospace">X</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An empty match spec deactivates tracing of calls to <fo:inline font-family="monospace">et:trace_me/4,5</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Other match specs activates tracing of calls to
        <fo:inline font-family="monospace">et:trace_me/4,5</fo:inline> accordingly with
        <fo:inline font-family="monospace">erlang:trace_pattern/2</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1530384">parse_event(Mod, ValidTraceData) -&gt; false | true | {true, Event}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Mod = module_name() | undefined &lt;v&gt;module_name() = atom() &lt;v&gt;ValidTraceData = erlang_trace_data() | record(event)</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">erlang_trace_data() = {trace, Pid, Label, Info} |  {trace, Pid, Label, Info, Extra} |  {trace_ts, Pid, Label, Info, ReportedTS} |  {trace_ts, Pid, Label, Info, Extra, ReportedTS} |  {seq_trace, Label, Info} |  {seq_trace, Label, Info, ReportedTS} |  {drop, NumberOfDroppedItems}</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Transforms trace data and makes an event record out of it.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See <fo:inline font-family="monospace">erlang:trace/3</fo:inline> for more info about the semantics of the
        trace data.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An event record consists of the following fields:</fo:block>
	<fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">detail_level</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Noise has a high level as opposed to essentials.</fo:block></fo:block></fo:block-container>


          <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">trace_ts</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Time when the trace was generated.  Same as
	  event_ts if omitted in trace data.</fo:block></fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">event_ts</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Time when the event record was created.</fo:block></fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">from</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">From actor, such as sender of a message.</fo:block></fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">to</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To actor, such as receiver of message.</fo:block></fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">label</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Label intended to provide a brief event summary.</fo:block></fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">contents</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All nitty gritty details of the event.</fo:block></fo:block></fo:block-container>
	</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See <fo:inline font-family="monospace">et:trace_me/4</fo:inline>and <fo:inline font-family="monospace">et:trace_me/5</fo:inline> for details.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns:</fo:block>
	<fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">{true, Event}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">where Event is an #event{} record representing the
	  trace data</fo:block></fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">true</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">means that the trace data already is an event
	  record and that it is valid as it is. No transformation is
	  needed.</fo:block></fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">false</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">means that the trace data is uninteresting and
	  should be dropped</fo:block></fo:block></fo:block-container>
	</fo:block>
      </fo:block>
  
  
<fo:block page-break-before="always" id="idp1558192" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">et_viewer</fo:marker>et_viewer</fo:block>Erlang module</fo:block>
  <fo:block/>
  et_viewer
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1560448">file(FileName) -&gt; {ok, ViewerPid} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FileName() = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ViewerPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Start a new event viewer and a corresponding collector
          and load them with trace events from a trace file.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1564704">start() -&gt; ok</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Simplified start of a sequence chart viewer with
          global tracing activated.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Convenient to be used from the command line
          (erl -s et_viewer).</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1567296">start(Options) -&gt; ok</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Start of a sequence chart viewer without linking
          to the parent process.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1569648">start_link(Options) -&gt; {ok, ViewerPid} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = [option() | collector_option()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">option() = {parent_pid, extended_pid()} | {title, term()} | {detail_level, detail_level()} | {is_suspended, boolean()} | {scale, integer()} | {width, integer()} | {height, integer()} | {collector_pid, extended_pid()} | {event_order, event_order()} | {active_filter, atom()} | {max_actors, extended_integer()} | {trace_pattern, et_collector_trace_pattern()} | {trace_port, et_collector_trace_port()} | {trace_global, et_collector_trace_global()} | {trace_client, et_collector_trace_client()} | {dict_insert, {filter, filter_name()}, event_filter_fun()} | {dict_insert, et_collector_dict_key(), et_collector_dict_val()} | {dict_delete, {filter, filter_name()}} | {dict_delete, et_collector_dict_key()} | {actors, actors()} | {first_event, first_key()} | {hide_unknown, boolean()} | {hide_actions, boolean()} | {display_mode, display_mode()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">extended_pid() = pid() | undefined</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">detail_level() = min | max | integer(X) when X &gt;=0, X =&lt; 100</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">event_order() = trace_ts | event_ts</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">extended_integer() = integer() | infinity</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">display_mode() = all | {search_actors, direction(), first_key(), actors()}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">direction() = forward | reverse</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">first_key() = event_key()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">actors() = [term()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"/></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">filter_name() = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">filter_fun() =  fun(Event) -&gt; false | true | {true, NewEvent}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Event = NewEvent = record(event)</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ViewerPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Start a sequence chart viewer for trace events
          (messages/actions)</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A filter_fun() takes an event record as sole argument
          and returns false | true | {true, NewEvent}.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the <fo:inline font-family="monospace">collector_pid</fo:inline> is <fo:inline font-family="monospace">undefined</fo:inline> a new 
          <fo:inline font-family="monospace">et_collector</fo:inline> will be started with the following
          parameter settings: <fo:inline font-family="monospace">parent_pid</fo:inline>, <fo:inline font-family="monospace">event_order</fo:inline>,
          <fo:inline font-family="monospace">trace_global</fo:inline>, <fo:inline font-family="monospace">trace_pattern</fo:inline>, <fo:inline font-family="monospace">trace_port</fo:inline>, <fo:inline font-family="monospace">trace_max_queue</fo:inline>,
          <fo:inline font-family="monospace">trace_client</fo:inline>, <fo:inline font-family="monospace">dict_insert</fo:inline> and <fo:inline font-family="monospace">dict_delete</fo:inline>.
          The new <fo:inline font-family="monospace">et_viewer</fo:inline> will register itself as an <fo:inline font-family="monospace">et_collector</fo:inline> 
          subscriber.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default values:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>parent_pid - self().</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>title - "et_viewer".</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>detail_level - max.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>is_suspended - false.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>scale - 2.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>width - 800.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>height - 600.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>collector_pid - undefined.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>event_order - trace_ts.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>active_filter - collector.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>max_actors - 5.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>actors - ["UNKNOWN"].</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>first_event - first.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>hide_unknown - false.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>hide_actions - false.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>display_mode - all.</fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1596336">get_collector_pid(ViewerPid) -&gt; CollectorPid</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ViewerPid = pid()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CollectorPid = pid()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the identifier of the collector process.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1600016">stop(ViewerPid) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ViewerPid = pid()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stops a viewer process.</fo:block>
      </fo:block>
  
  
</fo:flow>
  </fo:page-sequence>
</fo:root>
