<?xml version="1.0"?>
<fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format">
  <fo:layout-master-set>
    <fo:simple-page-master master-name="cover" margin="25mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin="0mm"/>
    </fo:simple-page-master>
    <fo:simple-page-master master-name="left-page" margin-top="25mm" margin-bottom="15mm" margin-left="20mm" margin-right="25mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin-top="15mm" margin-bottom="20mm"/>
      <fo:region-before region-name="left-header" extent="10mm"/>
      <fo:region-after region-name="left-footer" extent="10mm"/>
    </fo:simple-page-master>
    <fo:simple-page-master master-name="right-page" margin-top="25mm" margin-bottom="15mm" margin-left="25mm" margin-right="20mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin-top="15mm" margin-bottom="20mm"/>
      <fo:region-before region-name="right-header" extent="10mm"/>
      <fo:region-after region-name="right-footer" extent="10mm"/>
    </fo:simple-page-master>
    <fo:page-sequence-master master-name="document">
      <fo:repeatable-page-master-alternatives>
        <fo:conditional-page-master-reference master-reference="left-page" odd-or-even="even"/>
        <fo:conditional-page-master-reference master-reference="right-page" odd-or-even="odd"/>
      </fo:repeatable-page-master-alternatives>
    </fo:page-sequence-master>
  </fo:layout-master-set>
  <fo:bookmark-tree>
    <fo:bookmark internal-destination="cover-page" starting-state="show">
      <fo:bookmark-title>Mnesia</fo:bookmark-title>
      <fo:bookmark internal-destination="idp848320" starting-state="hide">
        <fo:bookmark-title>Mnesia User's Guide</fo:bookmark-title>
        <fo:bookmark internal-destination="idp905008" starting-state="hide">
          <fo:bookmark-title>Introduction</fo:bookmark-title>
          <fo:bookmark internal-destination="idp801072" starting-state="hide">
            <fo:bookmark-title>Scope</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp227408" starting-state="hide">
            <fo:bookmark-title>Prerequisites</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp755920" starting-state="hide">
          <fo:bookmark-title>Mnesia</fo:bookmark-title>
          <fo:bookmark internal-destination="idp798816" starting-state="hide">
            <fo:bookmark-title>Mnesia Database Management System (DBMS)</fo:bookmark-title>
            <fo:bookmark internal-destination="idp842608" starting-state="hide">
              <fo:bookmark-title>Features</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1502176" starting-state="hide">
              <fo:bookmark-title>Add-On Application</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp228976" starting-state="hide">
              <fo:bookmark-title>When to Use Mnesia</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp231504" starting-state="hide">
          <fo:bookmark-title>Getting Started</fo:bookmark-title>
          <fo:bookmark internal-destination="idp751536" starting-state="hide">
            <fo:bookmark-title>Starting Mnesia for the First Time</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp803568" starting-state="hide">
            <fo:bookmark-title>Example</fo:bookmark-title>
            <fo:bookmark internal-destination="idp1889984" starting-state="hide">
              <fo:bookmark-title>Database</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp864000" starting-state="hide">
              <fo:bookmark-title>Defining Structure and Content</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1164288" starting-state="hide">
              <fo:bookmark-title>Program</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1169552" starting-state="hide">
              <fo:bookmark-title>Program Explained</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1901456" starting-state="hide">
              <fo:bookmark-title>Initial Database Content</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp982032" starting-state="hide">
              <fo:bookmark-title>Adding Records and Relationships to Database</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp999920" starting-state="hide">
              <fo:bookmark-title>Writing Queries</fo:bookmark-title>
              <fo:bookmark internal-destination="idp1351056" starting-state="hide">
                <fo:bookmark-title>Using Mnesia Functions</fo:bookmark-title>
              </fo:bookmark>
              <fo:bookmark internal-destination="idp1359568" starting-state="hide">
                <fo:bookmark-title>Using QLC </fo:bookmark-title>
              </fo:bookmark>
            </fo:bookmark>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp1826672" starting-state="hide">
          <fo:bookmark-title>Build a Mnesia Database</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1834464" starting-state="hide">
            <fo:bookmark-title>Define a Schema</fo:bookmark-title>
            <fo:bookmark internal-destination="idp1841312" starting-state="hide">
              <fo:bookmark-title>Schema Functions</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1434032" starting-state="hide">
            <fo:bookmark-title>Data Model</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1441376" starting-state="hide">
            <fo:bookmark-title>Start Mnesia</fo:bookmark-title>
            <fo:bookmark internal-destination="idp1447920" starting-state="hide">
              <fo:bookmark-title>Initialize a Schema and Start Mnesia</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1476448" starting-state="hide">
              <fo:bookmark-title>Startup Procedure</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1496848" starting-state="hide">
            <fo:bookmark-title>Create Tables</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp2528416" starting-state="hide">
          <fo:bookmark-title>Transactions and Other Access Contexts</fo:bookmark-title>
          <fo:bookmark internal-destination="idp2539216" starting-state="hide">
            <fo:bookmark-title>Transaction Properties</fo:bookmark-title>
            <fo:bookmark internal-destination="idp2550592" starting-state="hide">
              <fo:bookmark-title>Atomicity</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp2557040" starting-state="hide">
              <fo:bookmark-title>Consistency</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp2559504" starting-state="hide">
              <fo:bookmark-title>Isolation</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp2567360" starting-state="hide">
              <fo:bookmark-title>Durability</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2570592" starting-state="hide">
            <fo:bookmark-title>Locking</fo:bookmark-title>
            <fo:bookmark internal-destination="idp2608736" starting-state="hide">
              <fo:bookmark-title>Sticky Locks</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp2625904" starting-state="hide">
              <fo:bookmark-title>Table Locks</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp2634608" starting-state="hide">
              <fo:bookmark-title>Global Locks</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2639376" starting-state="hide">
            <fo:bookmark-title>Dirty Operations</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2694864" starting-state="hide">
            <fo:bookmark-title>Record Names versus Table Names</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2706736" starting-state="hide">
            <fo:bookmark-title>Activity Concept and Various Access Contexts</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2771408" starting-state="hide">
            <fo:bookmark-title>Nested Transactions</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2782256" starting-state="hide">
            <fo:bookmark-title>Pattern Matching</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2838576" starting-state="hide">
            <fo:bookmark-title>Iteration</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp2876592" starting-state="hide">
          <fo:bookmark-title>Miscellaneous Mnesia Features</fo:bookmark-title>
          <fo:bookmark internal-destination="idp2889728" starting-state="hide">
            <fo:bookmark-title>Indexing</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2906416" starting-state="hide">
            <fo:bookmark-title>Distribution and Fault Tolerance</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2925616" starting-state="hide">
            <fo:bookmark-title>Table Fragmentation</fo:bookmark-title>
            <fo:bookmark internal-destination="idp2926352" starting-state="hide">
              <fo:bookmark-title>Concept</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp2939456" starting-state="hide">
              <fo:bookmark-title>Fragmentation Properties</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp2975648" starting-state="hide">
              <fo:bookmark-title>Management of Fragmented Tables</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp2996432" starting-state="hide">
              <fo:bookmark-title>Extensions of Existing Functions</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3034496" starting-state="hide">
              <fo:bookmark-title>Load Balancing</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3044720" starting-state="hide">
            <fo:bookmark-title>Local Content Tables</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3047920" starting-state="hide">
            <fo:bookmark-title>Disc-Less Nodes</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3074544" starting-state="hide">
            <fo:bookmark-title>More about Schema Management</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3110768" starting-state="hide">
            <fo:bookmark-title>Mnesia Event Handling</fo:bookmark-title>
            <fo:bookmark internal-destination="idp3134928" starting-state="hide">
              <fo:bookmark-title>System Events</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3172048" starting-state="hide">
              <fo:bookmark-title>Activity Events</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3177312" starting-state="hide">
              <fo:bookmark-title>Table Events</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3203152" starting-state="hide">
            <fo:bookmark-title>Debugging Mnesia Applications</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3220944" starting-state="hide">
            <fo:bookmark-title>Concurrent Processes in Mnesia</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3227200" starting-state="hide">
            <fo:bookmark-title>Prototyping</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3244064" starting-state="hide">
            <fo:bookmark-title>Object-Based Programming with Mnesia</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3275280" starting-state="hide">
          <fo:bookmark-title>Mnesia System Information</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3284176" starting-state="hide">
            <fo:bookmark-title>Database Configuration Data</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3289552" starting-state="hide">
            <fo:bookmark-title>Core Dumps</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3293360" starting-state="hide">
            <fo:bookmark-title>Dumping Tables</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3299136" starting-state="hide">
            <fo:bookmark-title>Checkpoints</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3330496" starting-state="hide">
            <fo:bookmark-title>Startup Files, Log File, and Data Files</fo:bookmark-title>
            <fo:bookmark internal-destination="idp3332688" starting-state="hide">
              <fo:bookmark-title>Startup Files</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3357664" starting-state="hide">
              <fo:bookmark-title>Log File</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3374880" starting-state="hide">
              <fo:bookmark-title>Data Files</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3392096" starting-state="hide">
            <fo:bookmark-title>Loading Tables at Startup</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3418464" starting-state="hide">
            <fo:bookmark-title>Recovery from Communication Failure</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3440480" starting-state="hide">
            <fo:bookmark-title>Recovery of Transactions</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp3462624" starting-state="hide">
            <fo:bookmark-title>Backup, Restore, Fallback, and Disaster Recovery</fo:bookmark-title>
            <fo:bookmark internal-destination="idp3475968" starting-state="hide">
              <fo:bookmark-title>Backup</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3524192" starting-state="hide">
              <fo:bookmark-title>Restore</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3541824" starting-state="hide">
              <fo:bookmark-title>Fallback</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp3553168" starting-state="hide">
              <fo:bookmark-title>Disaster Recovery</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3574816" starting-state="hide">
          <fo:bookmark-title>Combine Mnesia with SNMP</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3578384" starting-state="hide">
            <fo:bookmark-title>Combine Mnesia and SNMP</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3587472" starting-state="hide">
          <fo:bookmark-title>Appendix A: Backup Callback Interface</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3591840" starting-state="hide">
            <fo:bookmark-title>mnesia_backup Callback Behavior</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3603008" starting-state="hide">
          <fo:bookmark-title>Appendix B: Activity Access Callback Interface</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3606560" starting-state="hide">
            <fo:bookmark-title>mnesia_access Callback Behavior</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp3620544" starting-state="hide">
          <fo:bookmark-title>Appendix C: Fragmented Table Hashing Callback Interface</fo:bookmark-title>
          <fo:bookmark internal-destination="idp3624096" starting-state="hide">
            <fo:bookmark-title>mnesia_frag_hash Callback Behavior</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
      </fo:bookmark>
      <fo:bookmark internal-destination="idp227024" starting-state="hide">
        <fo:bookmark-title>Reference Manual</fo:bookmark-title>
        <fo:bookmark internal-destination="idp885200" starting-state="hide">
          <fo:bookmark-title>mnesia</fo:bookmark-title>
          <fo:bookmark internal-destination="idp717360" starting-state="hide">
            <fo:bookmark-title>abort/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp250432" starting-state="hide">
            <fo:bookmark-title>activate_checkpoint/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp746256" starting-state="hide">
            <fo:bookmark-title>activity/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp369744" starting-state="hide">
            <fo:bookmark-title>activity/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp508384" starting-state="hide">
            <fo:bookmark-title>add_table_copy/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp515600" starting-state="hide">
            <fo:bookmark-title>add_table_index/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp634768" starting-state="hide">
            <fo:bookmark-title>all_keys/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp638240" starting-state="hide">
            <fo:bookmark-title>async_dirty/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp647296" starting-state="hide">
            <fo:bookmark-title>backup/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1722640" starting-state="hide">
            <fo:bookmark-title>backup_checkpoint/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1727136" starting-state="hide">
            <fo:bookmark-title>change_config/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1737600" starting-state="hide">
            <fo:bookmark-title>change_table_access_mode/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1793360" starting-state="hide">
            <fo:bookmark-title>change_table_copy_type/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1800032" starting-state="hide">
            <fo:bookmark-title>change_table_load_order/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1804000" starting-state="hide">
            <fo:bookmark-title>change_table_majority/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1808048" starting-state="hide">
            <fo:bookmark-title>clear_table/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1811184" starting-state="hide">
            <fo:bookmark-title>create_schema/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1408624" starting-state="hide">
            <fo:bookmark-title>create_table/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1754608" starting-state="hide">
            <fo:bookmark-title>deactivate_checkpoint/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1758000" starting-state="hide">
            <fo:bookmark-title>del_table_copy/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1763536" starting-state="hide">
            <fo:bookmark-title>del_table_index/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1766624" starting-state="hide">
            <fo:bookmark-title>delete/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1770656" starting-state="hide">
            <fo:bookmark-title>delete/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1777296" starting-state="hide">
            <fo:bookmark-title>delete_object/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp569296" starting-state="hide">
            <fo:bookmark-title>delete_object/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp575088" starting-state="hide">
            <fo:bookmark-title>delete_schema/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp581072" starting-state="hide">
            <fo:bookmark-title>delete_table/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp584560" starting-state="hide">
            <fo:bookmark-title>dirty_all_keys/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp587648" starting-state="hide">
            <fo:bookmark-title>dirty_delete/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp590784" starting-state="hide">
            <fo:bookmark-title>dirty_delete/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp593472" starting-state="hide">
            <fo:bookmark-title>dirty_delete_object/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp597552" starting-state="hide">
            <fo:bookmark-title>dirty_delete_object/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp600288" starting-state="hide">
            <fo:bookmark-title>dirty_first/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp605424" starting-state="hide">
            <fo:bookmark-title>dirty_index_match_object/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp609472" starting-state="hide">
            <fo:bookmark-title>dirty_index_match_object/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp612128" starting-state="hide">
            <fo:bookmark-title>dirty_index_read/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp615200" starting-state="hide">
            <fo:bookmark-title>dirty_last/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp619552" starting-state="hide">
            <fo:bookmark-title>dirty_match_object/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1176976" starting-state="hide">
            <fo:bookmark-title>dirty_match_object/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1179616" starting-state="hide">
            <fo:bookmark-title>dirty_next/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1183584" starting-state="hide">
            <fo:bookmark-title>dirty_prev/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1187984" starting-state="hide">
            <fo:bookmark-title>dirty_read/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1191184" starting-state="hide">
            <fo:bookmark-title>dirty_read/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1193936" starting-state="hide">
            <fo:bookmark-title>dirty_select/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1198048" starting-state="hide">
            <fo:bookmark-title>dirty_slot/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1202896" starting-state="hide">
            <fo:bookmark-title>dirty_update_counter/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1205984" starting-state="hide">
            <fo:bookmark-title>dirty_update_counter/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1214736" starting-state="hide">
            <fo:bookmark-title>dirty_write/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1218768" starting-state="hide">
            <fo:bookmark-title>dirty_write/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1221536" starting-state="hide">
            <fo:bookmark-title>dump_log/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1225648" starting-state="hide">
            <fo:bookmark-title>dump_tables/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1229072" starting-state="hide">
            <fo:bookmark-title>dump_to_textfile/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1232480" starting-state="hide">
            <fo:bookmark-title>error_description/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1257824" starting-state="hide">
            <fo:bookmark-title>ets/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1264464" starting-state="hide">
            <fo:bookmark-title>first/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1269632" starting-state="hide">
            <fo:bookmark-title>foldl/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1276704" starting-state="hide">
            <fo:bookmark-title>foldr/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1282144" starting-state="hide">
            <fo:bookmark-title>force_load_table/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1285872" starting-state="hide">
            <fo:bookmark-title>index_match_object/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1289888" starting-state="hide">
            <fo:bookmark-title>index_match_object/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1301760" starting-state="hide">
            <fo:bookmark-title>index_read/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1009296" starting-state="hide">
            <fo:bookmark-title>info/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1012128" starting-state="hide">
            <fo:bookmark-title>install_fallback/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1016160" starting-state="hide">
            <fo:bookmark-title>install_fallback/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1019840" starting-state="hide">
            <fo:bookmark-title>install_fallback/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1035440" starting-state="hide">
            <fo:bookmark-title>is_transaction/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1038976" starting-state="hide">
            <fo:bookmark-title>last/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1043024" starting-state="hide">
            <fo:bookmark-title>load_textfile/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1046384" starting-state="hide">
            <fo:bookmark-title>lock/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1069392" starting-state="hide">
            <fo:bookmark-title>match_object/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1073856" starting-state="hide">
            <fo:bookmark-title>match_object/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1081888" starting-state="hide">
            <fo:bookmark-title>move_table_copy/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1088912" starting-state="hide">
            <fo:bookmark-title>next/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1092272" starting-state="hide">
            <fo:bookmark-title>prev/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1096240" starting-state="hide">
            <fo:bookmark-title>read/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1099376" starting-state="hide">
            <fo:bookmark-title>read/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1102064" starting-state="hide">
            <fo:bookmark-title>read/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1112560" starting-state="hide">
            <fo:bookmark-title>read_lock_table/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1115712" starting-state="hide">
            <fo:bookmark-title>report_event/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1120560" starting-state="hide">
            <fo:bookmark-title>restore/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1136864" starting-state="hide">
            <fo:bookmark-title>s_delete/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1139856" starting-state="hide">
            <fo:bookmark-title>s_delete_object/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1143856" starting-state="hide">
            <fo:bookmark-title>s_write/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1148336" starting-state="hide">
            <fo:bookmark-title>schema/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1150672" starting-state="hide">
            <fo:bookmark-title>schema/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1153008" starting-state="hide">
            <fo:bookmark-title>select/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1921200" starting-state="hide">
            <fo:bookmark-title>select/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1931200" starting-state="hide">
            <fo:bookmark-title>select/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1936288" starting-state="hide">
            <fo:bookmark-title>set_debug_level/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1939728" starting-state="hide">
            <fo:bookmark-title>set_master_nodes/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1945264" starting-state="hide">
            <fo:bookmark-title>set_master_nodes/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1952096" starting-state="hide">
            <fo:bookmark-title>snmp_close_table/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1954400" starting-state="hide">
            <fo:bookmark-title>snmp_get_mnesia_key/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1959040" starting-state="hide">
            <fo:bookmark-title>snmp_get_next_index/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1964064" starting-state="hide">
            <fo:bookmark-title>snmp_get_row/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1968144" starting-state="hide">
            <fo:bookmark-title>snmp_open_table/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1983280" starting-state="hide">
            <fo:bookmark-title>start/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1991424" starting-state="hide">
            <fo:bookmark-title>stop/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1994944" starting-state="hide">
            <fo:bookmark-title>subscribe/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1999472" starting-state="hide">
            <fo:bookmark-title>sync_dirty/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2005264" starting-state="hide">
            <fo:bookmark-title>sync_log/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2008400" starting-state="hide">
            <fo:bookmark-title>sync_transaction/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2012448" starting-state="hide">
            <fo:bookmark-title>system_info/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2069440" starting-state="hide">
            <fo:bookmark-title>table/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1543648" starting-state="hide">
            <fo:bookmark-title>table_info/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1592784" starting-state="hide">
            <fo:bookmark-title>transaction/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1609520" starting-state="hide">
            <fo:bookmark-title>transform_table/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1618112" starting-state="hide">
            <fo:bookmark-title>transform_table/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1622288" starting-state="hide">
            <fo:bookmark-title>traverse_backup/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1634400" starting-state="hide">
            <fo:bookmark-title>uninstall_fallback/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1637600" starting-state="hide">
            <fo:bookmark-title>uninstall_fallback/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1645456" starting-state="hide">
            <fo:bookmark-title>unsubscribe/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1649968" starting-state="hide">
            <fo:bookmark-title>wait_for_tables/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1654272" starting-state="hide">
            <fo:bookmark-title>wread/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1657520" starting-state="hide">
            <fo:bookmark-title>write/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1661712" starting-state="hide">
            <fo:bookmark-title>write/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1669184" starting-state="hide">
            <fo:bookmark-title>write_lock_table/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp4265744" starting-state="hide">
          <fo:bookmark-title>mnesia_frag_hash</fo:bookmark-title>
          <fo:bookmark internal-destination="idp4271088" starting-state="hide">
            <fo:bookmark-title>init_state/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4280576" starting-state="hide">
            <fo:bookmark-title>add_frag/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4291376" starting-state="hide">
            <fo:bookmark-title>del_frag/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4302160" starting-state="hide">
            <fo:bookmark-title>key_to_frag_number/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp4307216" starting-state="hide">
            <fo:bookmark-title>match_spec_to_frag_numbers/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp4323264" starting-state="hide">
          <fo:bookmark-title>mnesia_registry</fo:bookmark-title>
          <fo:bookmark internal-destination="idp4329856" starting-state="hide">
            <fo:bookmark-title>create_table/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1502816" starting-state="hide">
            <fo:bookmark-title>create_table/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
      </fo:bookmark>
    </fo:bookmark>
  </fo:bookmark-tree>
  <fo:page-sequence font-family="sans-serif" force-page-count="even" master-reference="cover" font-size="10pt">
    <fo:flow flow-name="xsl-region-body">
      <fo:block space-before="130mm" space-before.conditionality="retain" text-align="end">
        <fo:external-graphic src="/root/download/otp_src_20.0/bootstrap/lib/erl_docgen/priv/images/erlang-logo.gif"/>
      </fo:block>
      <fo:block id="cover-page" border-before-style="solid" border-before-width="10pt" border-color="#960003" font-size="2.3em" padding-before="0.5em" text-align="end">Mnesia</fo:block>
      <fo:block font-size="0.9em" text-align="end">Copyright © 1997-2017 Ericsson AB. All Rights Reserved.</fo:block>
      <fo:block font-size="0.9em" text-align="end">Mnesia 4.15</fo:block>
      <fo:block font-size="0.9em" text-align="end">July 12, 2017</fo:block>
      <fo:block padding-before="2.5em" font-size="1.33em" font-weight="bold" color="#C00" text-align="end"/>
      <fo:block break-before="page" border-before-style="solid" border-before-width="1pt" border-color="#960003" font-weight="bold" padding-before="0.5em" space-before="200mm" space-before.conditionality="retain">Copyright © 1997-2017 Ericsson AB. All Rights Reserved.</fo:block>
      <fo:block font-size="0.9em">
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
 
          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
    
    Ericsson AB. All Rights Reserved..
        </fo:block>
      <fo:block font-size="0.9em" font-weight="bold" space-before="2em">July 12, 2017</fo:block>
    </fo:flow>
  </fo:page-sequence>
  <fo:page-sequence font-family="serif" master-reference="document" initial-page-number="1" font-size="10pt">
    <fo:static-content flow-name="left-header">
      <fo:block text-align="start" border-after-style="solid" border-after-width="2pt" border-color="#960003" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">
        <fo:retrieve-marker retrieve-boundary="page-sequence" retrieve-class-name="chapter-title" retrieve-position="first-including-carryover"/>
      </fo:block>
    </fo:static-content>
    <fo:static-content flow-name="right-header">
      <fo:block text-align="end" border-after-style="solid" border-after-width="2pt" border-color="#960003" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">
        <fo:retrieve-marker retrieve-boundary="page-sequence" retrieve-class-name="chapter-title" retrieve-position="first-including-carryover"/>
      </fo:block>
    </fo:static-content>
    <fo:static-content flow-name="left-footer">
      <fo:block text-align="start" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold"><fo:page-number/> | Ericsson AB. All Rights Reserved.:
            Mnesia</fo:block>
    </fo:static-content>
    <fo:static-content flow-name="right-footer">
      <fo:block text-align="end" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">Ericsson AB. All Rights Reserved.:
            Mnesia | <fo:page-number/></fo:block>
    </fo:static-content>
    <fo:flow flow-name="xsl-region-body"><fo:block/><fo:block id="idp848320" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">1   
      Mnesia User's Guide</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Mnesia application is a distributed Database Management
      System (DBMS), appropriate for telecommunications applications and other
      Erlang applications, which require continuous operation and exhibit soft
      real-time properties.</fo:block>
  <fo:block id="idp905008" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.1  Introduction</fo:marker>1.1  Introduction</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Mnesia application provides a heavy duty real-time
    distributed database.</fo:block><fo:block id="idp801072" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.1 
      Scope</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This User's Guide describes how to
        build Mnesia database applications, and how to integrate
        and use the Mnesia database management system with
        OTP. Programming constructs are described, and numerous
        programming examples are included to illustrate the use of
        Mnesia.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This User's Guide is organized as follows:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">Mnesia</fo:inline>
	provides an introduction to
	Mnesia.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">Getting Started</fo:inline>
        introduces Mnesia with an example database. Examples
        are included how to start an Erlang session, specify a
        Mnesia database directory, initialize a database
        schema, start Mnesia, and create tables. Initial
        prototyping of record definitions is also discussed.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">Build a Mnesia
        Database</fo:inline> more formally describes the steps
        introduced in the previous section, namely the Mnesia
        functions that define a database schema, start Mnesia,
        and create the required tables.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">Transactions and Other Access Contexts</fo:inline>
         describes the transactions properties that make Mnesia into
         a fault tolerant, real-time distributed database management
         system. This section also describes the concept of locking
         to ensure consistency in tables, and "dirty
         operations", or short cuts, which bypass the transaction system
         to improve speed and reduce overheads.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">Miscellaneous Mnesia
        Features</fo:inline> describes features that enable the
        construction of more complex database applications. These
        features include indexing, checkpoints, distribution and fault
        tolerance, disc-less nodes, replication manipulation, local
        content tables, concurrency, and object-based programming in
        Mnesia.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">Mnesia System
        Information</fo:inline> describes the files contained in the
        Mnesia database directory, database configuration data,
        core and table dumps, as well as the important subject of
        backup, fall-back, and disaster recovery principles.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">Combine Mnesia with
        SNMP</fo:inline> is a short section that outlines Mnesia
        integrated with SNMP.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">Appendix A: Backup
        Callback Interface</fo:inline> is a program listing of the
        default implementation of this facility.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">Appendix B: Activity
        Access Callback Interface</fo:inline> is a program outlining
        one possible implementation of this facility.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">Appendix C: Fragmented
        Table Hashing Callback Interface</fo:inline> is a program
        outlining one possible implementation of this facility.
        </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
    <fo:block id="idp227408" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.2 
      Prerequisites</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is assumed that the reader is familiar with the Erlang
        programming language, system development principles, and
        database management systems.</fo:block>
    <fo:block id="idp755920" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.2  Mnesia</fo:marker>1.2  Mnesia</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The management of data in telecommunications system has many
      aspects, thereof some, but not all, are addressed by traditional
      commercial Database Management Systems (DBMSs). In particular the
      high level of fault tolerance that is required in many nonstop
      systems, combined with requirements on the DBMS to run in the same
      address space as the application, have led us to implement a new
      DBMS, called Mnesia.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Mnesia is implemented in, and tightly connected to Erlang.
      It provides the functionality that is necessary for the
      implementation of fault tolerant telecommunications systems.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Mnesia is a multiuser distributed DBMS specially made for
      industrial telecommunications applications written in Erlang,
      which is also the intended target language.
      Mnesia tries to address all the data
      management issues required for typical telecommunications systems.
      It has a number of features that are not normally found in traditional
      databases.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In telecommunications applications, there are different needs
      from the features provided by traditional DBMSs. The applications now
      implemented in Erlang need a mixture of a broad range
      of features, which generally are not satisfied by traditional DBMSs.
      Mnesia is designed with requirements like the following in
      mind:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Fast real-time key/value lookup
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Complicated non-real-time queries mainly for
        operation and maintenance
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Distributed data because of distributed applications
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>High fault tolerance
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Dynamic reconfiguration
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Complex objects
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Mnesia is designed with the typical data management problems
      of telecommunications applications in mind. This sets Mnesia
      apart from most other DBMS. Hence Mnesia
      combines many concepts found in traditional databases such as
      transactions and queries with concepts found in data management
      systems for telecommunications applications, for example:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Fast real-time operations
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Configurable degree of fault tolerance (by replication)
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The ability to reconfigure the system without stopping or
          suspending it.
        </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Mnesia is also interesting because of its tight coupling to
      Erlang, thus almost turning Erlang into a database programming
      language. This has many benefits, the foremost is that
      the impedance mismatch between the data format used by the DBMS
      and the data format used by the programming language, which is used
      to manipulate the data, completely disappears.</fo:block><fo:block id="idp798816" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.1 
      Mnesia Database Management System (DBMS)</fo:block>
    
    <fo:block id="idp842608" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Features</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Mnesia contains the following features that combine to
        produce a fault-tolerant, distributed DBMS written in Erlang:
        </fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Database schema can be dynamically reconfigured at runtime.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Tables can be declared to have properties such as location,
          replication, and persistence.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Tables can be moved or replicated to several nodes to improve
          fault tolerance. The rest of the system can still access the tables
          to read, write, and delete records.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Table locations are transparent to the programmer.
          Programs address table names and the system itself keeps track of
          table locations.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Database transactions can be distributed, and many
          functions can be called within one transaction.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Several transactions can run concurrently, and their execution
          is fully synchronized by the DBMS. Mnesia ensures that no
          two processes manipulate data simultaneously.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Transactions can be assigned the property of being executed on
          all nodes in the system, or on none. Transactions can also be
          bypassed in favor of running "dirty operations", which reduce
          overheads and run fast.
        </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Details of these features are described in the following sections.</fo:block>
    

    <fo:block id="idp1502176" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Add-On Application</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Query List Comprehension (QLC) can be used with Mnesia
        to produce specialized functions that enhance the operational
        ability of Mnesia. QLC has its own documentation as part
        of the OTP documentation set. The main features of QLC
        when used with Mnesia are as follows:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>QLC can optimize the query compiler for the Mnesia
          DBMS, essentially making the DBMS more efficient.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>QLC can be used as a database programming
          language for Mnesia. It includes a notation called "list
          comprehensions" and can be used to make complex database
          queries over a set of tables.
        </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information about QLC, see the
        <fo:inline font-style="italic">qlc</fo:inline> manual page
        in STDLIB.</fo:block>
    

    <fo:block id="idp228976" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">When to Use Mnesia</fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Use Mnesia with the following types of applications:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Applications that need to replicate data.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Applications that perform complicated searches on data.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Applications that need to use atomic transactions to
            update several records simultaneously.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Applications that use soft real-time characteristics.
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Mnesia is not as appropriate with the
          following types of applications:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Programs that process plain text or binary data files.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Applications that merely need a look-up dictionary that
            can be stored to disc. Those applications  use the standard
            library module <fo:inline font-family="monospace">dets</fo:inline>, which is a disc-based version
            of the module <fo:inline font-family="monospace">ets</fo:inline>. For information about <fo:inline font-family="monospace">dets</fo:inline>,
            see the <fo:inline font-style="italic">dets</fo:inline>
            manual page in STDLIB.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Applications that need disc logging facilities.
            Those applications can
            use the module <fo:inline font-family="monospace">disk_log</fo:inline> by preference. For
            information about <fo:inline font-family="monospace">disk_log</fo:inline>, see the
            <fo:inline font-style="italic">disk_log</fo:inline>
            manual page in Kernel.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Hard real-time systems.
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
    
  <fo:block id="idp231504" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.3  Getting Started</fo:marker>1.3  Getting Started</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section introduces <fo:inline font-family="monospace">Mnesia</fo:inline> with an example database.
    This example is referenced in the
    following sections, where the example is modified to
    illustrate various program constructs. This section illustrates
    the following mandatory procedures through examples:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Starting the Erlang session.
    </fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Specifying the <fo:inline font-family="monospace">Mnesia</fo:inline> directory where the database
      is to be stored.
    </fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Initializing a new database schema with an attribute that
      specifies on which node, or nodes, that database is to operate.
    </fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Starting <fo:inline font-family="monospace">Mnesia</fo:inline>.
    </fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Creating and populating the database tables.
    </fo:block></fo:list-item-body></fo:list-item>
  </fo:list-block><fo:block id="idp751536" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.1 
      Starting Mnesia for the First Time</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section provides a simplified demonstration of a <fo:inline font-family="monospace">Mnesia</fo:inline>
      system startup. The dialogue from the Erlang shell is as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
        unix&gt;  erl -mnesia dir '"/tmp/funky"'
        Erlang (BEAM) emulator version 4.9
        
        Eshell V4.9  (abort with ^G)
        1&gt; 
        1&gt; mnesia:create_schema([node()]).
        ok
        2&gt; mnesia:start().
        ok
        3&gt; mnesia:create_table(funky, []).
        {atomic,ok}
        4&gt; mnesia:info().
        ---&gt; Processes holding locks &lt;--- 
        ---&gt; Processes waiting for locks &lt;--- 
        ---&gt; Pending (remote) transactions &lt;--- 
        ---&gt; Active (local) transactions &lt;---
        ---&gt; Uncertain transactions &lt;--- 
        ---&gt; Active tables &lt;--- 
        funky          : with 0 records occupying 269 words of mem 
        schema         : with 2 records occupying 353 words of mem 
        ===&gt; System info in version "1.0", debug level = none &lt;===
        opt_disc. Directory "/tmp/funky" is used.
        use fall-back at restart = false
        running db nodes = [nonode@nohost]
        stopped db nodes = [] 
        remote           = []
        ram_copies       = [funky]
        disc_copies      = [schema]
        disc_only_copies = []
        [{nonode@nohost,disc_copies}] = [schema]
        [{nonode@nohost,ram_copies}] = [funky]
        1 transactions committed, 0 aborted, 0 restarted, 1 logged to disc
        0 held locks, 0 in queue; 0 local transactions, 0 remote
        0 transactions waits for other nodes: []
        ok      
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this example, the following actions are performed:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Step 1:</fo:inline> The Erlang system is started from the UNIX
       prompt with a flag <fo:inline font-family="monospace">-mnesia dir '"/tmp/funky"'</fo:inline>, which indicates
       in which directory to store the data.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Step 2:</fo:inline> A new empty schema is initialized on the local
       node by evaluating
       <fo:inline font-style="italic">mnesia:create_schema([node()])</fo:inline>.
       The schema contains information about the database in general.
       This is explained in detail later.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Step 3:</fo:inline> The DBMS is started by evaluating
       <fo:inline font-style="italic">mnesia:start()</fo:inline>.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Step 4:</fo:inline> A first table is created, called <fo:inline font-family="monospace">funky</fo:inline>,
       by evaluating the expression <fo:inline font-family="monospace">mnesia:create_table(funky, [])</fo:inline>.
       The table is given default properties.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Step 5:</fo:inline> <fo:inline font-style="italic">mnesia:info()</fo:inline>
       is evaluated to
       display information on the terminal about the status of the database.
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp803568" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.2 
      Example</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-family="monospace">Mnesia</fo:inline> database is organized as a set of tables.
      Each table is populated with instances (Erlang records).
      A table has also a number of properties, such as location and
      persistence.</fo:block>

    <fo:block id="idp1889984" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Database</fo:block>
      
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This example shows how to create a database called <fo:inline font-family="monospace">Company</fo:inline>
      and the relationships shown in the following diagram:</fo:block>
    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="company.gif"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        3.1:
         
        Company Entity-Relation Diagram</fo:block>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The database model is as follows:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>There are three entities: department, employee, and project.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are three relationships between these entities:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A department is managed by an employee,
            hence the <fo:inline font-family="monospace">manager</fo:inline> relationship.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>An employee works at a department, hence the
            <fo:inline font-family="monospace">at_dep</fo:inline> relationship.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Each employee works on a number of projects,
            hence the <fo:inline font-family="monospace">in_proj</fo:inline> relationship.
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block id="idp864000" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Defining Structure and Content</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">First the record definitions are entered into a text file
        named <fo:inline font-family="monospace">company.hrl</fo:inline>. This file defines the following
        structure for the example database: </fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

-record(employee, {emp_no,
                   name,
                   salary,
                   sex,
                   phone,
                   room_no}).

-record(dept, {id, 
               name}).

-record(project, {name,
                  number}).


-record(manager, {emp,
                  dept}).

-record(at_dep, {emp,
                 dept_id}).

-record(in_proj, {emp,
                  proj_name}).
</fo:block>      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The structure defines six tables in the database. In <fo:inline font-family="monospace">Mnesia</fo:inline>,
        the function
        <fo:inline font-style="italic">mnesia:create_table(Name, ArgList)</fo:inline>
        creates tables. <fo:inline font-family="monospace">Name</fo:inline> is the table name.</fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The current version of <fo:inline font-family="monospace">Mnesia</fo:inline> does not require that
        the name of the table is the same as the record name, see
        <fo:inline font-style="italic">Record Names versus Table Names.</fo:inline>.</fo:block></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For example, the table for employees is created with the
        function <fo:inline font-family="monospace">mnesia:create_table(employee,
        [{attributes, record_info(fields, employee)}])</fo:inline>. The table
        name <fo:inline font-family="monospace">employee</fo:inline> matches the name for records specified
        in <fo:inline font-family="monospace">ArgList</fo:inline>. The expression
        <fo:inline font-family="monospace">record_info(fields, RecordName)</fo:inline> is processed by the Erlang
        preprocessor and evaluates to a list containing the names of the
        different fields for a record.</fo:block>
    

    <fo:block id="idp1164288" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Program</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following shell interaction starts <fo:inline font-family="monospace">Mnesia</fo:inline> and
        initializes the schema for the <fo:inline font-family="monospace">Company</fo:inline> database:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
        % <fo:inline font-weight="bold">erl -mnesia dir '"/ldisc/scratch/Mnesia.Company"'</fo:inline>
         Erlang (BEAM) emulator version 4.9
          
          Eshell V4.9  (abort with ^G)
          1&gt; mnesia:create_schema([node()]).
          ok
          2&gt; mnesia:start().
          ok</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following program module creates and populates previously
        defined tables:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">


-include_lib("stdlib/include/qlc.hrl").
-include("company.hrl").

init() -&gt;
    mnesia:create_table(employee,
                        [{attributes, record_info(fields, employee)}]),
    mnesia:create_table(dept,
                        [{attributes, record_info(fields, dept)}]),
    mnesia:create_table(project,
                        [{attributes, record_info(fields, project)}]),
    mnesia:create_table(manager, [{type, bag}, 
                                  {attributes, record_info(fields, manager)}]),
    mnesia:create_table(at_dep,
                         [{attributes, record_info(fields, at_dep)}]),
    mnesia:create_table(in_proj, [{type, bag}, 
                                  {attributes, record_info(fields, in_proj)}]).
</fo:block>    

    <fo:block id="idp1169552" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Program Explained</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following commands and functions are used to initiate the
        <fo:inline font-family="monospace">Company</fo:inline> database:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">% erl -mnesia dir '"/ldisc/scratch/Mnesia.Company"'</fo:inline>.
         This is a UNIX
         command-line entry that starts the Erlang system. The flag
         <fo:inline font-family="monospace">-mnesia dir Dir</fo:inline> specifies the location of the
         database directory. The system responds and waits for
         further input with the prompt <fo:inline font-family="monospace">1&gt;</fo:inline>.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:inline font-style="italic">mnesia:create_schema([node()])</fo:inline>.
         This function
         has the format <fo:inline font-family="monospace">mnesia:create_schema(DiscNodeList)</fo:inline> and
         initiates a new schema. In this example, a non-distributed system
         using only one node is created. Schemas are fully explained in
         <fo:inline font-style="italic">Define a Schema</fo:inline>.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">mnesia:start()</fo:inline>.
         This function starts <fo:inline font-family="monospace">Mnesia</fo:inline> and is fully explained in
         <fo:inline font-style="italic">Start Mnesia</fo:inline>.
        </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Continuing the dialogue with the Erlang shell produces the
        following:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
        3&gt; company:init().
        {atomic,ok}
        4&gt; mnesia:info().
        ---&gt; Processes holding locks &lt;--- 
        ---&gt; Processes waiting for locks &lt;--- 
        ---&gt; Pending (remote) transactions &lt;--- 
        ---&gt; Active (local) transactions &lt;---
        ---&gt; Uncertain transactions &lt;--- 
        ---&gt; Active tables &lt;--- 
        in_proj        : with 0 records occuping 269 words of mem 
        at_dep         : with 0 records occuping 269 words of mem 
        manager        : with 0 records occuping 269 words of mem 
        project        : with 0 records occuping 269 words of mem 
        dept           : with 0 records occuping 269 words of mem 
        employee       : with 0 records occuping 269 words of mem 
        schema         : with 7 records occuping 571 words of mem 
        ===&gt; System info in version "1.0", debug level = none &lt;===
        opt_disc. Directory "/ldisc/scratch/Mnesia.Company" is used.
        use fall-back at restart = false
        running db nodes = [nonode@nohost]
        stopped db nodes = [] 
        remote           = []
        ram_copies       =
            [at_dep,dept,employee,in_proj,manager,project]
        disc_copies      = [schema]
        disc_only_copies = []
        [{nonode@nohost,disc_copies}] = [schema]
        [{nonode@nohost,ram_copies}] =
            [employee,dept,project,manager,at_dep,in_proj]
        6 transactions committed, 0 aborted, 0 restarted, 6 logged to disc
        0 held locks, 0 in queue; 0 local transactions, 0 remote
        0 transactions waits for other nodes: []
        ok
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A set of tables is created. The function
        <fo:inline font-style="italic">mnesia:create_table(Name, ArgList)</fo:inline>
        creates the required database tables. The
        options available with <fo:inline font-family="monospace">ArgList</fo:inline> are explained in
        <fo:inline font-style="italic">Create New Tables</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function <fo:inline font-family="monospace">company:init/0</fo:inline> creates the tables. Two tables
        are of type <fo:inline font-family="monospace">bag</fo:inline>. This is the <fo:inline font-family="monospace">manager</fo:inline> relation as well
        the <fo:inline font-family="monospace">in_proj</fo:inline> relation. This is interpreted as: an
        employee can be manager over several departments, and an employee
        can participate in several projects. However, the <fo:inline font-family="monospace">at_dep</fo:inline>
        relation is <fo:inline font-family="monospace">set</fo:inline>, as an employee can only work in one department.
        In this data model, there are examples of relations that are 1-to-1
        (<fo:inline font-family="monospace">set</fo:inline>) and  1-to-many (<fo:inline font-family="monospace">bag</fo:inline>).</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">mnesia:info()</fo:inline>
        now indicates that a database has seven
        local tables, where six are the user-defined tables and one is
        the schema. Six transactions have been committed, as six successful
        transactions were run when creating the tables.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To write a function that inserts an employee record into the
        database, there must be an <fo:inline font-family="monospace">at_dep</fo:inline> record and a set of
        <fo:inline font-family="monospace">in_proj</fo:inline> records inserted. Examine the following
        code used to complete this action:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">


insert_emp(Emp, DeptId, ProjNames) -&gt;
    Ename = Emp#employee.name,
    Fun = fun() -&gt;
                  mnesia:write(Emp),
                  AtDep = #at_dep{emp = Ename, dept_id = DeptId},
                  mnesia:write(AtDep),
                  mk_projs(Ename, ProjNames)
          end,
    mnesia:transaction(Fun).


mk_projs(Ename, [ProjName|Tail]) -&gt;
    mnesia:write(#in_proj{emp = Ename, proj_name = ProjName}),
    mk_projs(Ename, Tail);
mk_projs(_, []) -&gt; ok.
    
</fo:block>      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">insert_emp/3</fo:inline> arguments are as follows:</fo:block>
          <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Emp</fo:inline> is an employee record.
            </fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">DeptId</fo:inline> is the identity of the department where
             the employee works.
            </fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ProjNames</fo:inline> is a list of the names of the projects
             where the employee works.</fo:block></fo:list-item-body></fo:list-item>
          </fo:list-block>
        </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function <fo:inline font-family="monospace">insert_emp/3</fo:inline> creates a Functional Object (Fun).
        <fo:inline font-family="monospace">Fun</fo:inline> is passed
        as a single argument to the function
        <fo:inline font-style="italic">mnesia:transaction(Fun)</fo:inline>.
        This means that <fo:inline font-family="monospace">Fun</fo:inline> is
        run as a transaction with the following properties:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A <fo:inline font-family="monospace">Fun</fo:inline> either succeeds or fails.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Code that manipulates the same data records can be
         run concurrently without the different processes interfering
         with each other. 
        </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function can be used as follows:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
          Emp  = #employee{emp_no= 104732,
                           name = klacke,
                           salary = 7,
                           sex = male,
                           phone = 98108,
                           room_no = {221, 015}},
        insert_emp(Emp, 'B/SFR', [Erlang, mnesia, otp]).</fo:block>
      <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information about Funs, see "Fun Expressions" in
        section <fo:inline font-family="monospace">Erlang Reference Manual</fo:inline> in System
        Documentation..</fo:block>
      </fo:block>
    

    <fo:block id="idp1901456" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Initial Database Content</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">After the insertion of the  employee named <fo:inline font-family="monospace">klacke</fo:inline>,
        the databse has the following records:</fo:block>
      
      <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">emp_no</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">name</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">salary</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">sex</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">phone</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">room_no</fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">104732</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">klacke</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">7</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">male</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">98108</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">{221, 015}</fo:block></fo:table-cell>
        </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        3.1:
         
        employee Database Record</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This <fo:inline font-family="monospace">employee</fo:inline> record has the Erlang record/tuple
        representation
        <fo:inline font-family="monospace">{employee, 104732, klacke, 7, male, 98108, {221, 015}}</fo:inline>.</fo:block>
      
      <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">emp</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">dept_name</fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">klacke</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">B/SFR</fo:block></fo:table-cell>
        </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        3.2:
         
        at_dep Database Record</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This <fo:inline font-family="monospace">at_dep</fo:inline> record has the Erlang tuple representation
        <fo:inline font-family="monospace">{at_dep, klacke, 'B/SFR'}</fo:inline>.</fo:block>
      
      <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">emp</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">proj_name</fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">klacke</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">Erlang</fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">klacke</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">otp</fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">klacke</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">mnesia</fo:block></fo:table-cell>
        </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        3.3:
         
        in_proj Database Record</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This <fo:inline font-family="monospace">in_proj</fo:inline> record has the Erlang tuple representation
        <fo:inline font-family="monospace">{in_proj, klacke, 'Erlang', klacke, 'otp', klacke,
        'mnesia'}</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There is no difference between rows in a table and <fo:inline font-family="monospace">Mnesia</fo:inline>
        records. Both concepts are the same and are used
        interchangeably throughout this User's Guide.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-family="monospace">Mnesia</fo:inline> table is populated by <fo:inline font-family="monospace">Mnesia</fo:inline> records. For
        example, the tuple <fo:inline font-family="monospace">{boss, klacke, bjarne}</fo:inline> is a record. The
        second element in this tuple is the key. To identify a table
        uniquely, both the key and the table name is needed.
        The term Object Identifier (OID) is
        sometimes used for the arity two tuple {Tab, Key}. The OID for
        the record <fo:inline font-family="monospace">{boss, klacke, bjarne}</fo:inline> is the arity two
        tuple <fo:inline font-family="monospace">{boss, klacke}</fo:inline>. The first element of the tuple is
        the type of the record and the second element is the key. An
        OID can lead to zero, one, or more records depending on
        whether the table type is <fo:inline font-family="monospace">set</fo:inline> or <fo:inline font-family="monospace">bag</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The record <fo:inline font-family="monospace">{boss, klacke, bjarne}</fo:inline> can also be inserted.
        This record contains an implicit reference to
        another employee that does not yet exist in the
        database. <fo:inline font-family="monospace">Mnesia</fo:inline> does not enforce this.</fo:block>
    

    <fo:block id="idp982032" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Adding Records and Relationships to Database</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">After adding more records to the <fo:inline font-family="monospace">Company</fo:inline> database, the
        result can be the following records:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">employees</fo:inline>:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
        {employee, 104465, "Johnson Torbjorn",   1, male,  99184, {242,038}}.
        {employee, 107912, "Carlsson Tuula",     2, female,94556, {242,056}}.
        {employee, 114872, "Dacker Bjarne",      3, male,  99415, {221,035}}.
        {employee, 104531, "Nilsson Hans",       3, male,  99495, {222,026}}.
        {employee, 104659, "Tornkvist Torbjorn", 2, male,  99514, {222,022}}.
        {employee, 104732, "Wikstrom Claes",     2, male,  99586, {221,015}}.
        {employee, 117716, "Fedoriw Anna",       1, female,99143, {221,031}}.
        {employee, 115018, "Mattsson Hakan",     3, male,  99251, {203,348}}.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">dept</fo:inline>:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
        {dept, 'B/SF',  "Open Telecom Platform"}.
        {dept, 'B/SFP', "OTP - Product Development"}.
        {dept, 'B/SFR', "Computer Science Laboratory"}.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">projects</fo:inline>:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
        %% projects
        {project, erlang, 1}.
        {project, otp, 2}.
        {project, beam, 3}.
        {project, mnesia, 5}.
        {project, wolf, 6}.
        {project, documentation, 7}.
        {project, www, 8}.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These three tables, <fo:inline font-family="monospace">employees</fo:inline>, <fo:inline font-family="monospace">dept</fo:inline>, and
        <fo:inline font-family="monospace">projects</fo:inline>, are
        made up of real records. The following database content is
        stored in the tables and is built on
        relationships. These tables are <fo:inline font-family="monospace">manager</fo:inline>,
        <fo:inline font-family="monospace">at_dep</fo:inline>, and <fo:inline font-family="monospace">in_proj</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">manager</fo:inline>:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
        {manager, 104465, 'B/SF'}.
        {manager, 104465, 'B/SFP'}.
        {manager, 114872, 'B/SFR'}.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">at_dep</fo:inline>:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
        {at_dep, 104465, 'B/SF'}.
        {at_dep, 107912, 'B/SF'}.
        {at_dep, 114872, 'B/SFR'}.
        {at_dep, 104531, 'B/SFR'}.
        {at_dep, 104659, 'B/SFR'}.
        {at_dep, 104732, 'B/SFR'}.
        {at_dep, 117716, 'B/SFP'}.
        {at_dep, 115018, 'B/SFP'}.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">in_proj</fo:inline>:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
        {in_proj, 104465, otp}.
        {in_proj, 107912, otp}.
        {in_proj, 114872, otp}.
        {in_proj, 104531, otp}.
        {in_proj, 104531, mnesia}.
        {in_proj, 104545, wolf}.
        {in_proj, 104659, otp}.
        {in_proj, 104659, wolf}.
        {in_proj, 104732, otp}.
        {in_proj, 104732, mnesia}.
        {in_proj, 104732, erlang}.
        {in_proj, 117716, otp}.
        {in_proj, 117716, documentation}.
        {in_proj, 115018, otp}.
        {in_proj, 115018, mnesia}.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The room number is an attribute of the employee
        record. This is a structured attribute that consists of a
        tuple. The first element of the tuple identifies a corridor,
        and the second element identifies the room in that
        corridor. An alternative is to represent this as a record
        <fo:inline font-family="monospace">-record(room, {corr, no}).</fo:inline> instead of an anonymous
        tuple representation.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Company</fo:inline> database is now initialized and contains
        data.</fo:block>
    

    <fo:block id="idp999920" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Writing Queries</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Retrieving data from DBMS is usually to be done with the
        functions
        <fo:inline font-style="italic">mnesia:read/3</fo:inline> or
        <fo:inline font-style="italic">mnesia:read/1</fo:inline>.
        The following function raises the salary:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

raise(Eno, Raise) -&gt;
    F = fun() -&gt;
                [E] = mnesia:read(employee, Eno, write),
                Salary = E#employee.salary + Raise,
                New = E#employee{salary = Salary},
                mnesia:write(New)
        end,
    mnesia:transaction(F).</fo:block>      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Since it is desired to update the record using the function
        <fo:inline font-style="italic">mnesia:write/1</fo:inline>
        after the salary has been increased, a write
        lock (third argument to <fo:inline font-family="monospace">read</fo:inline>) is acquired when the record from
        the table is read.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To read the values from the table directly is not always possible.
        It can be needed to search one or more tables to get the
        wanted data, and this is done by writing database queries. Queries
        are always more expensive operations than direct lookups done with
        <fo:inline font-family="monospace">mnesia:read</fo:inline>. Therefore, avoid queries in
        performance-critical code.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Two methods are available for writing database queries:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Mnesia</fo:inline> functions</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>QLC</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>

      <fo:block id="idp1351056" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Using Mnesia Functions</fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following function extracts the names of the female employees
          stored in the database:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
mnesia:select(employee, [{#employee{sex = female, name = '$1', _ = '_'},[], ['$1']}]).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">select</fo:inline> must always run within an activity, such as a
          transaction. The following function can be constructed to call
          from the shell:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

all_females() -&gt;
    F = fun() -&gt;
		Female = #employee{sex = female, name = '$1', _ = '_'},
		mnesia:select(employee, [{Female, [], ['$1']}])
        end,
    mnesia:transaction(F).</fo:block>        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">select</fo:inline> expression matches all entries in table
          employee with the field <fo:inline font-family="monospace">sex</fo:inline> set to <fo:inline font-family="monospace">female</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function can be called from the shell as follows:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
          (klacke@gin)1&gt; <fo:inline font-weight="bold">company:all_females().</fo:inline>
          {atomic,  ["Carlsson Tuula", "Fedoriw Anna"]}</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For a description of <fo:inline font-family="monospace">select</fo:inline> and its syntax, see
          <fo:inline font-style="italic">Pattern Matching</fo:inline>.
	</fo:block>
      

      <fo:block id="idp1359568" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Using QLC </fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section contains simple introductory examples only. For
          a full description of the QLC query language, see the
          <fo:inline font-style="italic">qlc</fo:inline> manual page in
          <fo:inline font-family="monospace">STDLIB</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Using QLC can be more expensive than using <fo:inline font-family="monospace">Mnesia</fo:inline>
          functions directly but offers a nice syntax.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following function extracts a list of female employees
          from the database:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
          Q = qlc:q([E#employee.name || E &lt;- mnesia:table(employee),
                                E#employee.sex == female]),
          qlc:e(Q),</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Accessing <fo:inline font-family="monospace">Mnesia</fo:inline> tables from a QLC list comprehension must
          always be done within a transaction. Consider the following
          function:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

females() -&gt;
    F = fun() -&gt;
		Q = qlc:q([E#employee.name || E &lt;- mnesia:table(employee),
					      E#employee.sex == female]),
		qlc:e(Q)
	end,
    mnesia:transaction(F).</fo:block>        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function can be called from the shell as follows:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
          (klacke@gin)1&gt; <fo:inline font-weight="bold">company:females().</fo:inline>
          {atomic, ["Carlsson Tuula", "Fedoriw Anna"]}</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In traditional relational database terminology, this
          operation is called a selection, followed by a projection.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The previous list comprehension expression contains a
          number of syntactical elements:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The first <fo:inline font-family="monospace">[</fo:inline> bracket is read as "build the
           list".
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The <fo:inline font-family="monospace">||</fo:inline> "such that" and the arrow <fo:inline font-family="monospace">&lt;-</fo:inline>
           is read as "taken from".
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Hence, the previous list comprehension demonstrates the
          formation of the list <fo:inline font-family="monospace">E#employee.name</fo:inline> such that <fo:inline font-family="monospace">E</fo:inline> is
          taken from the table of employees, and attribute <fo:inline font-family="monospace">sex</fo:inline>
          of each record is equal to the atom <fo:inline font-family="monospace">female</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The whole list comprehension must be given to the function
          <fo:inline font-family="monospace">qlc:q/1</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">List comprehensions with low-level <fo:inline font-family="monospace">Mnesia</fo:inline> functions
          can be combined in the same transaction. To raise the
          salary of all female employees, execute the following:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

raise_females(Amount) -&gt;
    F = fun() -&gt;
                Q = qlc:q([E || E &lt;- mnesia:table(employee),
                                E#employee.sex == female]),
		Fs = qlc:e(Q),
                over_write(Fs, Amount)
        end,
    mnesia:transaction(F).

over_write([E|Tail], Amount) -&gt;
    Salary = E#employee.salary + Amount,
    New = E#employee{salary = Salary},
    mnesia:write(New),
    1 + over_write(Tail, Amount);
over_write([], _) -&gt;
    0.</fo:block>        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function <fo:inline font-family="monospace">raise_females/1</fo:inline> returns the tuple
          <fo:inline font-family="monospace">{atomic, Number}</fo:inline>, where <fo:inline font-family="monospace">Number</fo:inline> is the number of
          female employees who received a salary increase. If an error
          occurs, the value <fo:inline font-family="monospace">{aborted, Reason}</fo:inline> is returned, and
          <fo:inline font-family="monospace">Mnesia</fo:inline> guarantees that the salary is not
          raised for any employee.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
          33&gt;<fo:inline font-weight="bold">company:raise_females(33).</fo:inline>
          {atomic,2}</fo:block>
      
    
  <fo:block id="idp1826672" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.4  Build a Mnesia Database</fo:marker>1.4  Build a Mnesia Database</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section describes the basic steps when designing a
    <fo:inline font-family="monospace">Mnesia</fo:inline> database and the programming constructs that make different
    solutions available to the programmer. The following topics are
    included:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Define a schema</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Data model</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Start <fo:inline font-family="monospace">Mnesia</fo:inline></fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Create tables</fo:block></fo:list-item-body></fo:list-item>
  </fo:list-block><fo:block id="idp1834464" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.1 
      Define a Schema</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The configuration of a <fo:inline font-family="monospace">Mnesia</fo:inline> system is described in a
      schema. The schema is a special table that includes information
      such as the table names and the storage type of each table
      (that is, whether a table is to be stored in RAM,
      on disc, or on both, as well as its location).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Unlike data tables, information in schema tables can only be
      accessed and modified by using the schema-related functions
      described in this section.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Mnesia</fo:inline> has various functions for defining the
      database schema. Tables can be moved or deleted, and the
      table layout can be reconfigured.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An important aspect of these functions is that the system can access
      a table while it is being reconfigured. For example, it is possible
      to move a
      table and simultaneously perform write operations to the same
      table. This feature is essential for applications that require
      continuous service.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section describes the functions available for schema management,
      all which return either of the following tuples:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{atomic, ok}</fo:inline> if successful</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{aborted, Reason}</fo:inline> if unsuccessful</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block id="idp1841312" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Schema Functions</fo:block>
      
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The schema functions are as follows:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">mnesia:create_schema(NodeList)</fo:inline>
         initializes a new, empty schema. This is a mandatory requirement
         before <fo:inline font-family="monospace">Mnesia</fo:inline> can be started. <fo:inline font-family="monospace">Mnesia</fo:inline> is a truly
         distributed DBMS and the schema is a system table that is
         replicated on all nodes in a <fo:inline font-family="monospace">Mnesia</fo:inline> system.
         This function fails if a schema is already present on any of
         the nodes in <fo:inline font-family="monospace">NodeList</fo:inline>. The function requires <fo:inline font-family="monospace">Mnesia</fo:inline>
         to be stopped on the all
         <fo:inline font-family="monospace">db_nodes</fo:inline> contained in parameter <fo:inline font-family="monospace">NodeList</fo:inline>.
         Applications call this function only once, as
         it is usually a one-time activity to initialize a new database.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">mnesia:delete_schema(DiscNodeList)</fo:inline>
         erases any old schemas on the nodes in
         <fo:inline font-family="monospace">DiscNodeList</fo:inline>. It also removes all old tables together
         with all data. This function requires <fo:inline font-family="monospace">Mnesia</fo:inline> to be stopped
         on all <fo:inline font-family="monospace">db_nodes</fo:inline>.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">mnesia:delete_table(Tab)</fo:inline>
         permanently deletes all replicas of table <fo:inline font-family="monospace">Tab</fo:inline>.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">mnesia:clear_table(Tab)</fo:inline>
         permanently deletes all entries in table <fo:inline font-family="monospace">Tab</fo:inline>.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">mnesia:move_table_copy(Tab, From, To)</fo:inline>
         moves the copy of table <fo:inline font-family="monospace">Tab</fo:inline> from node
         <fo:inline font-family="monospace">From</fo:inline> to node <fo:inline font-family="monospace">To</fo:inline>. The table storage type
         <fo:inline font-family="monospace">{type}</fo:inline> is preserved, so if a RAM table is moved from
         one node to another, it remains a RAM table on the new
         node. Other transactions can still perform read
         and write operation to the table while it is being moved.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">mnesia:add_table_copy(Tab, Node, Type)</fo:inline>
         creates a replica of table <fo:inline font-family="monospace">Tab</fo:inline> at node
         <fo:inline font-family="monospace">Node</fo:inline>. Argument <fo:inline font-family="monospace">Type</fo:inline> must be either of the
         atoms <fo:inline font-family="monospace">ram_copies</fo:inline>, <fo:inline font-family="monospace">disc_copies</fo:inline>, or
         <fo:inline font-family="monospace">disc_only_copies</fo:inline>. If you add a copy of the system
         table <fo:inline font-family="monospace">schema</fo:inline> to a node, you want the <fo:inline font-family="monospace">Mnesia</fo:inline>
         schema to reside there as well. This action
         extends the set of nodes that comprise this particular
         <fo:inline font-family="monospace">Mnesia</fo:inline> system.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">mnesia:del_table_copy(Tab, Node)</fo:inline>
         deletes the replica of table <fo:inline font-family="monospace">Tab</fo:inline> at node <fo:inline font-family="monospace">Node</fo:inline>.
         When the last replica of a table is removed, the table is
         deleted.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">mnesia:transform_table(Tab, Fun, NewAttributeList, NewRecordName)</fo:inline>
            changes the format on all records in table
            <fo:inline font-family="monospace">Tab</fo:inline>. It applies argument <fo:inline font-family="monospace">Fun</fo:inline> to all
            records in the table. <fo:inline font-family="monospace">Fun</fo:inline> must be a function that
            takes a record of the old type, and returns the record of the
            new type. The table key must not be changed.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
          <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-record(old, {key, val}).
-record(new, {key, val, extra}).

Transformer =
   fun(X) when record(X, old) -&gt;
      #new{key = X#old.key,
           val = X#old.val,
           extra = 42}
   end,
{atomic, ok} = mnesia:transform_table(foo, Transformer,
                                      record_info(fields, new),
                                      new),
</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Argument <fo:inline font-family="monospace">Fun</fo:inline> can also be the atom
            <fo:inline font-family="monospace">ignore</fo:inline>, which indicates that only the metadata about
            the table is updated. Use of <fo:inline font-family="monospace">ignore</fo:inline> is not recommended
            (as it creates inconsistencies between the metadata and the
            actual data) but it is included as a possibility for the user
            do to an own (offline) transform.</fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">change_table_copy_type(Tab, Node, ToType)</fo:inline>
         changes the storage type of a table. For example, a
         RAM table is changed to a <fo:inline font-family="monospace">disc_table</fo:inline> at the node specified
         as <fo:inline font-family="monospace">Node</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
    
  <fo:block id="idp1434032" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.2 
      Data Model</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The data model employed by <fo:inline font-family="monospace">Mnesia</fo:inline> is an extended
      relational data model. Data is organized as a set of
      tables and relations between different data records can
      be modeled as more tables describing the relationships.
      Each table contains instances of Erlang records.
      The records are represented as Erlang tuples.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each Object Identifier (OID) is made up of a table name and a key.
      For example, if an employee record is represented by the tuple
      <fo:inline font-family="monospace">{employee, 104732, klacke, 7, male, 98108, {221, 015}}</fo:inline>,
      this record has an OID, which is the tuple
      <fo:inline font-family="monospace">{employee, 104732}</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Thus, each table is made up of records, where the first element
      is a record name and the second element of the table is a key,
      which identifies the particular record in that table. The
      combination of the table name and a key is an arity two tuple
      <fo:inline font-family="monospace">{Tab, Key}</fo:inline> called the OID. For more information about
      the relationship beween the record name and the table name, see
      <fo:inline font-style="italic">Record Names versus Table Names</fo:inline>.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">What makes the <fo:inline font-family="monospace">Mnesia</fo:inline> data model an extended relational model
      is the ability to store arbitrary Erlang terms in the attribute
      fields. One attribute value can, for example, be a whole tree of
      OIDs leading to other terms in other tables. This type
      of record is difficult to model in traditional relational DBMSs.</fo:block>
  <fo:block id="idp1441376" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.3 
      Start Mnesia</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Before starting <fo:inline font-family="monospace">Mnesia</fo:inline>, the following must be done:
      </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>An empty schema must be initialized on all the
       participating nodes.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The Erlang system must be started.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Nodes with disc database schema must be defined and
       implemented with the function
       <fo:inline font-style="italic">mnesia:create_schema(NodeList)</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When running a distributed system with two or more
      participating nodes, the function
      <fo:inline font-style="italic">mnesia:start()</fo:inline>
      must be executed on each participating node. This would typically
      be part of the boot script in an embedded environment.
      In a test environment or an interactive environment,
      <fo:inline font-family="monospace">mnesia:start()</fo:inline> can also be used either from the
      Erlang shell or another program.
      </fo:block>

    <fo:block id="idp1447920" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Initialize a Schema and Start Mnesia</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Let us use the example database <fo:inline font-family="monospace">Company</fo:inline>, described in
        <fo:inline font-style="italic">Getting Started</fo:inline> to
        illustrate how to run a database on two separate nodes,
        called <fo:inline font-family="monospace">a@gin</fo:inline> and <fo:inline font-family="monospace">b@skeppet</fo:inline>. Each of these
        nodes must have a <fo:inline font-family="monospace">Mnesia</fo:inline> directory and an
        initialized schema before <fo:inline font-family="monospace">Mnesia</fo:inline> can be started. There are
        two ways to specify the <fo:inline font-family="monospace">Mnesia</fo:inline> directory to be used:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specify the <fo:inline font-family="monospace">Mnesia</fo:inline> directory by providing an application
            parameter either when starting the Erlang shell or in the
            application script. Previously, the following example was used
            to create the directory for the <fo:inline font-family="monospace">Company</fo:inline> database:</fo:block>
          <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
%<fo:inline font-weight="bold">erl -mnesia dir '"/ldisc/scratch/Mnesia.Company"'</fo:inline>
          </fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If no command-line flag is entered, the <fo:inline font-family="monospace">Mnesia</fo:inline>
         directory becomes the current working directory on the node
         where the Erlang shell is started.</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To start the <fo:inline font-family="monospace">Company</fo:inline> database and get it running on the two
        specified nodes, enter the following commands:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On the node <fo:inline font-family="monospace">a@gin</fo:inline>:</fo:block>
          <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 gin %<fo:inline font-weight="bold">erl -sname a  -mnesia dir '"/ldisc/scratch/Mnesia.company"'</fo:inline></fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On the node <fo:inline font-family="monospace">b@skeppet</fo:inline>:</fo:block>
          <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
skeppet %<fo:inline font-weight="bold">erl -sname b -mnesia dir '"/ldisc/scratch/Mnesia.company"'</fo:inline></fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On one of the two nodes:</fo:block>
          <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
(a@gin)1&gt;<fo:inline font-weight="bold">mnesia:create_schema([a@gin, b@skeppet]).</fo:inline></fo:block>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The function
          <fo:inline font-style="italic">mnesia:start()</fo:inline>
          is called on both nodes.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To initialize the database, execute the following
          code on one of the two nodes:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">


dist_init() -&gt;
    mnesia:create_table(employee,
                         [{ram_copies, [a@gin, b@skeppet]},
                          {attributes, record_info(fields,
						   employee)}]),
    mnesia:create_table(dept,
                         [{ram_copies, [a@gin, b@skeppet]},
                          {attributes, record_info(fields, dept)}]),
    mnesia:create_table(project,
                         [{ram_copies, [a@gin, b@skeppet]},
                          {attributes, record_info(fields, project)}]),
    mnesia:create_table(manager, [{type, bag}, 
                                  {ram_copies, [a@gin, b@skeppet]},
                                  {attributes, record_info(fields,
							   manager)}]),
    mnesia:create_table(at_dep,
                         [{ram_copies, [a@gin, b@skeppet]},
                          {attributes, record_info(fields, at_dep)}]),
    mnesia:create_table(in_proj,
                        [{type, bag}, 
                         {ram_copies, [a@gin, b@skeppet]},
                         {attributes, record_info(fields, in_proj)}]).</fo:block>        </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As illustrated, the two directories reside on different nodes,
        because <fo:inline font-family="monospace">/ldisc/scratch</fo:inline> (the "local" disc) exists on
        the two different nodes.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By executing these commands, two Erlang nodes are configured to
        run the <fo:inline font-family="monospace">Company</fo:inline> database, and therefore, initialize the
        database. This is required only once when setting up. The next time
        the system is started,
        <fo:inline font-style="italic">mnesia:start()</fo:inline>
        is called
        on both nodes, to initialize the system from disc.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In a system of <fo:inline font-family="monospace">Mnesia</fo:inline> nodes, every node is aware of the
        current location of all tables. In this example, data is
        replicated on both nodes and functions that manipulate the
        data in the tables can be executed on either of the two nodes.
        Code that manipulate <fo:inline font-family="monospace">Mnesia</fo:inline> data behaves identically
        regardless of where the data resides.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function <fo:inline font-style="italic">mnesia:stop()</fo:inline>
        stops <fo:inline font-family="monospace">Mnesia</fo:inline> on the node
        where the function is executed. The functions <fo:inline font-family="monospace">mnesia:start/0</fo:inline>
        and <fo:inline font-family="monospace">mnesia:stop/0</fo:inline> work on the "local" <fo:inline font-family="monospace">Mnesia</fo:inline> system.
        No functions start or stop a set of nodes.</fo:block>
    

    <fo:block id="idp1476448" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Startup Procedure</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Start <fo:inline font-family="monospace">Mnesia</fo:inline> by calling the following function:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
          mnesia:start().</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function initiates the DBMS locally.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The choice of configuration alters the location and load
        order of the tables. The alternatives are as follows:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Tables that are only stored locally are initialized
         from the local <fo:inline font-family="monospace">Mnesia</fo:inline> directory.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Replicated tables that reside locally
         as well as somewhere else are either initiated from disc or
         by copying the entire table from the other node, depending on
         which of the different replicas are the most recent. <fo:inline font-family="monospace">Mnesia</fo:inline>
         determines which of the tables are the most recent.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Tables that reside on remote nodes are available to other
         nodes as soon as they are loaded.</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Table initialization is asynchronous. The function
        call <fo:inline font-style="italic">mnesia:start()</fo:inline>
        returns the atom <fo:inline font-family="monospace">ok</fo:inline> and
        then starts to initialize the different tables. Depending on
        the size of the database, this can take some time, and the
        application programmer must wait for the tables that the
        application needs before they can be used. This is achieved by
        using the function
        <fo:inline font-style="italic">mnesia:wait_for_tables(TabList, Timeout)</fo:inline>,
        which suspends the caller until all tables
        specified in <fo:inline font-family="monospace">TabList</fo:inline> are properly initiated.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A problem can arise if a replicated table on one node is
        initiated, but <fo:inline font-family="monospace">Mnesia</fo:inline> deduces that another (remote)
        replica is more recent than the replica existing on the
        local node, and the initialization procedure does not proceed.
        In this situation, a call to
        <fo:inline font-style="italic">mnesia:wait_for_tables/2</fo:inline>,
        suspends the caller until the
        remote node has initialized the table from its local disc and
        the node has copied the table over the network to the local node.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">However, this procedure can be time-consuming, the shortcut function
        <fo:inline font-style="italic">mnesia:force_load_table(Tab)</fo:inline>
        loads all the tables from disc at a faster rate. The function forces
        tables to be loaded from disc regardless of the network
        situation.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Thus, it can be assumed that if an application wants to use
        tables <fo:inline font-family="monospace">a</fo:inline> and <fo:inline font-family="monospace">b</fo:inline>, the application must perform
        some action similar to following before it can use the tables:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
          case mnesia:wait_for_tables([a, b], 20000) of
            {timeout,   RemainingTabs} -&gt;
              panic(RemainingTabs);
            ok -&gt;
              synced
          end.</fo:block>
      <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When tables are forcefully loaded from the local disc,
          all operations that were performed on the replicated table
          while the local node was down, and the remote replica was
          alive, are lost. This can cause the database to become
          inconsistent.</fo:block>
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the startup procedure fails, the function
        <fo:inline font-style="italic">mnesia:start()</fo:inline>
        returns the cryptic tuple
        <fo:inline font-family="monospace">{error,{shutdown, {mnesia_sup,start_link,[normal,[]]}}}</fo:inline>.
        To get more information about the start failure, use
        command-line arguments <fo:inline font-family="monospace">-boot start_sasl</fo:inline> as argument to
        the <fo:inline font-family="monospace">erl</fo:inline> script.</fo:block>
    
  <fo:block id="idp1496848" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.4 
      Create Tables</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function
      <fo:inline font-style="italic">mnesia:create_table(Name, ArgList)</fo:inline>
      creates tables. When executing this function, it returns one of
      the following responses:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{atomic, ok}</fo:inline> if the function executes successfully
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{aborted, Reason}</fo:inline> if the function fails
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function arguments are as follows:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Name</fo:inline> is the name of the table. It is
       usually the same name as the name of the records that
       constitute the table. For details, see <fo:inline font-family="monospace">record_name</fo:inline>.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ArgList</fo:inline> is a list of <fo:inline font-family="monospace">{Key,Value}</fo:inline> tuples.
          The following arguments are valid:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{type, Type}</fo:inline>, where <fo:inline font-family="monospace">Type</fo:inline> must be either of
              the atoms <fo:inline font-family="monospace">set</fo:inline>, <fo:inline font-family="monospace">ordered_set</fo:inline>, or <fo:inline font-family="monospace">bag</fo:inline>.
              Default is <fo:inline font-family="monospace">set</fo:inline>.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that currently <fo:inline font-family="monospace">ordered_set</fo:inline> is not
              supported for <fo:inline font-family="monospace">disc_only_copies</fo:inline> tables.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A table of type
              <fo:inline font-family="monospace">set</fo:inline> or <fo:inline font-family="monospace">ordered_set</fo:inline> has either zero or
              one record per key, whereas a table of type <fo:inline font-family="monospace">bag</fo:inline> can
              have an arbitrary number of records per key. The key for
              each record is always the first attribute of the record.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following example illustrates the difference between
              type <fo:inline font-family="monospace">set</fo:inline> and <fo:inline font-family="monospace">bag</fo:inline>:</fo:block>
            <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 f() -&gt;
    F = fun() -&gt;
          mnesia:write({foo, 1, 2}),
          mnesia:write({foo, 1, 3}),
          mnesia:read({foo, 1})
        end,
    mnesia:transaction(F).</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This transaction returns the list <fo:inline font-family="monospace">[{foo,1,3}]</fo:inline> if
              table <fo:inline font-family="monospace">foo</fo:inline> is of type <fo:inline font-family="monospace">set</fo:inline>. However, the list
              <fo:inline font-family="monospace">[{foo,1,2}, {foo,1,3}]</fo:inline> is returned if the table is
              of type <fo:inline font-family="monospace">bag</fo:inline>.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Mnesia</fo:inline> tables can never contain
              duplicates of the same record in the same table. Duplicate
              records have attributes with the same contents and key.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{disc_copies, NodeList}</fo:inline>, where <fo:inline font-family="monospace">NodeList</fo:inline> is a
              list of the nodes where this table is to reside on disc.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Write operations to a table replica of type
              <fo:inline font-family="monospace">disc_copies</fo:inline> write data to the disc copy and
              to the RAM copy of the table.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is possible to have a
              replicated table of type <fo:inline font-family="monospace">disc_copies</fo:inline> on one node, and
              the same table stored as a different type on another node.
              Default is <fo:inline font-family="monospace">[]</fo:inline>. This arrangement is
              desirable if the following operational
              characteristics are required:</fo:block>
            <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Read operations must be fast and performed in RAM.</fo:block></fo:list-item-body></fo:list-item>
              <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>All write operations must be written to persistent
               storage.</fo:block></fo:list-item-body></fo:list-item>
            </fo:list-block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A write operation on a <fo:inline font-family="monospace">disc_copies</fo:inline> table
              replica is performed in two steps. First the write
              operation is appended to a log file, then the actual
              operation is performed in RAM.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{ram_copies, NodeList}</fo:inline>, where <fo:inline font-family="monospace">NodeList</fo:inline> is a
              list of the nodes where this table is stored in RAM.
              Default is <fo:inline font-family="monospace">[node()]</fo:inline>. If the default value is used
              to create a table, it is located on the local node only.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Table replicas of type
              <fo:inline font-family="monospace">ram_copies</fo:inline> can be dumped to disc with the function
              <fo:inline font-style="italic">mnesia:dump_tables(TabList)</fo:inline>.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{disc_only_copies, NodeList}</fo:inline>. These table
           replicas are stored on disc only and are therefore slower to
           access. However, a disc-only replica consumes less memory than
           a table replica of the other two storage types.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{index, AttributeNameList}</fo:inline>, where
           <fo:inline font-family="monospace">AttributeNameList</fo:inline> is a list of atoms specifying the
           names of the attributes <fo:inline font-family="monospace">Mnesia</fo:inline> is to build and maintain.
           An index table exists for every element in the list. The first
           field of a <fo:inline font-family="monospace">Mnesia</fo:inline> record is the key and thus need no
           extra index.</fo:block>
           <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The first field of a record is the second element of the
           tuple, which is the representation of the record.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{snmp, SnmpStruct}</fo:inline>. <fo:inline font-family="monospace">SnmpStruct</fo:inline> is
           described in the
           <fo:inline font-style="italic">SNMP</fo:inline> User's Guide.
           Basically, if this attribute is present in <fo:inline font-family="monospace">ArgList</fo:inline> of
           <fo:inline font-style="italic">mnesia:create_table/2</fo:inline>,
           the table is immediately accessible the SNMP.</fo:block>
           <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is easy to design applications that use SNMP to
           manipulate and control the system. <fo:inline font-family="monospace">Mnesia</fo:inline> provides a
           direct mapping between the logical tables that make up an SNMP
           control application and the physical data that makes up a
           <fo:inline font-family="monospace">Mnesia</fo:inline> table. The default value is <fo:inline font-family="monospace">[]</fo:inline>.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{local_content, true}</fo:inline>. When an application needs a
           table whose contents is to be locally unique on each node,
           <fo:inline font-family="monospace">local_content</fo:inline> tables can be used. The name of the
           table is known to all <fo:inline font-family="monospace">Mnesia</fo:inline> nodes, but its contents is
           unique for each node. Access to this type of table must be
           done locally.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{attributes, AtomList}</fo:inline> is a list of the attribute
              names for the records that are supposed to populate the
              table. Default is the list <fo:inline font-family="monospace">[key, val]</fo:inline>. The
              table must at least have one extra attribute besides the
              key. When accessing single attributes in a record, it is not
              recommended to hard code the attribute names as atoms. Use
              the construct <fo:inline font-family="monospace">record_info(fields, record_name)</fo:inline>
              instead.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The expression
              <fo:inline font-family="monospace">record_info(fields, record_name)</fo:inline> is processed by the
              Erlang preprocessor and returns a list of the
              record field names. With the record definition
              <fo:inline font-family="monospace">-record(foo, {x,y,z}).</fo:inline>, the expression
              <fo:inline font-family="monospace">record_info(fields,foo)</fo:inline> is expanded to the list
              <fo:inline font-family="monospace">[x,y,z]</fo:inline>. It is therefore possible for you to provide
              the attribute names or to use the <fo:inline font-family="monospace">record_info/2</fo:inline>
              notation.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is recommended to use the <fo:inline font-family="monospace">record_info/2</fo:inline> notation,
              as it becomes easier to maintain the program and the program
              becomes more robust with regards to future record changes.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{record_name, Atom}</fo:inline> specifies the common name of
              all records stored in the table. All records stored in
              the table must have this name as their first element.
              <fo:inline font-family="monospace">record_name</fo:inline> defaults to the name of the table.
              For more information, see
              <fo:inline font-style="italic">Record Names versus Table Names</fo:inline>.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As an example, consider the following record definition:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      -record(funky, {x, y}).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following call would create a table that is replicated on two
      nodes, has an extra index on attribute <fo:inline font-family="monospace">y</fo:inline>, and is of type
      <fo:inline font-family="monospace">bag</fo:inline>.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      mnesia:create_table(funky, [{disc_copies, [N1, N2]}, {index,
      [y]}, {type, bag}, {attributes, record_info(fields, funky)}]).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Whereas a call to the following default code values would return
      a table with a RAM copy on the local node, no extra indexes, and the
      attributes defaulted to the list <fo:inline font-family="monospace">[key,val]</fo:inline>.</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
mnesia:create_table(stuff, [])</fo:block>
  <fo:block id="idp2528416" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.5  Transactions and Other Access Contexts</fo:marker>1.5  Transactions and Other Access Contexts</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section describes the <fo:inline font-family="monospace">Mnesia</fo:inline> transaction system and
    the transaction properties that make <fo:inline font-family="monospace">Mnesia</fo:inline> a fault-tolerant,
    distributed Database Management System (DBMS).</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section also describes the locking functions,
    including table locks and sticky locks, as well as alternative
    functions that bypass the transaction system in favor of improved
    speed and reduced overhead. These functions are called "dirty
    operations". The use of nested transactions is also described.
    The following topics are included:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Transaction properties, which include atomicity,
      consistency, isolation, and durability</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Locking</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Dirty operations</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Record names versus table names</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Activity concept and various access contexts</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Nested transactions</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Pattern matching</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Iteration</fo:block></fo:list-item-body></fo:list-item>
  </fo:list-block><fo:block id="idp2539216" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.1 
      Transaction Properties</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Transactions are important when designing fault-tolerant,
      distributed systems. A <fo:inline font-family="monospace">Mnesia</fo:inline> transaction is a mechanism
      by which a series of database operations can be executed as one
      functional block. The functional block that is run as a
      transaction is called a Functional Object (Fun), and this code can
      read, write, and delete <fo:inline font-family="monospace">Mnesia</fo:inline> records. The Fun is evaluated
      as a transaction that either commits or terminates. If a transaction
      succeeds in executing the Fun, it replicates the action on all nodes
      involved, or terminates if an error occurs.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following example shows a transaction that raises the
      salary of certain employee numbers:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

raise(Eno, Raise) -&gt;
    F = fun() -&gt;
                [E] = mnesia:read(employee, Eno, write),
                Salary = E#employee.salary + Raise,
                New = E#employee{salary = Salary},
                mnesia:write(New)
        end,
    mnesia:transaction(F).</fo:block>    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function <fo:inline font-family="monospace">raise/2</fo:inline> contains a Fun
      made up of four code lines. This Fun is called by the statement
      <fo:inline font-family="monospace">mnesia:transaction(F)</fo:inline> and returns a value.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Mnesia</fo:inline> transaction system facilitates the construction of
      reliable, distributed systems by providing the following important
      properties:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The transaction handler ensures that a Fun, which is placed
       inside a transaction, does not interfere with operations embedded
       in other transactions when it executes a series of operations on
       tables.  
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The transaction handler ensures that either all operations
       in the transaction are performed successfully on all nodes
       atomically, or the transaction fails without permanent effect on
       any node.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The <fo:inline font-family="monospace">Mnesia</fo:inline> transactions have four important properties,
       called <fo:inline font-weight="bold">A</fo:inline>tomicity,
       <fo:inline font-weight="bold">C</fo:inline>onsistency, <fo:inline font-weight="bold">I</fo:inline>solation, and
       <fo:inline font-weight="bold">D</fo:inline>urability (ACID). These properties are
       described in the following sections.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block id="idp2550592" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Atomicity</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Atomicity means that database changes that are
        executed by a transaction take effect on all nodes involved, or
        on none of the nodes. That is, the transaction either
        succeeds entirely, or it fails entirely.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Atomicity is important when it is needed to write
        atomically more than one record in the same
        transaction. The function <fo:inline font-family="monospace">raise/2</fo:inline>, shown in the previous
        example, writes one record only. The function <fo:inline font-family="monospace">insert_emp/3</fo:inline>,
        shown in the program listing in
        <fo:inline font-style="italic">Getting Started</fo:inline>, writes the record
        <fo:inline font-family="monospace">employee</fo:inline> as well as employee relations, such as
        <fo:inline font-family="monospace">at_dep</fo:inline> and <fo:inline font-family="monospace">in_proj</fo:inline>, into the database. If this
        latter code is run inside a transaction, the transaction
        handler ensures that the transaction either succeeds completely,
        or not at all.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Mnesia</fo:inline> is a distributed DBMS where data can be replicated
        on several nodes. In many applications, it is important that a
        series of write operations are performed atomically inside a
        transaction. The atomicity property ensures that a transaction
        takes effect on all nodes, or none.</fo:block>
    

    <fo:block id="idp2557040" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Consistency</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The consistency property ensures that
        a transaction always leaves the DBMS in a consistent state. For
        example, <fo:inline font-family="monospace">Mnesia</fo:inline> ensures that no inconsistencies occur if
        Erlang, <fo:inline font-family="monospace">Mnesia</fo:inline>, or the computer crashes while a write
        operation is in progress.</fo:block>
    

    <fo:block id="idp2559504" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Isolation</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The isolation property ensures that
        transactions that execute on different nodes in a network, and
        access and manipulate the same data records, do not interfere
        with each other. The isolation property makes it possible to
        execute the function <fo:inline font-family="monospace">raise/2</fo:inline> concurrently. A classical
        problem in concurrency control theory is the "lost update
        problem".</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The isolation property is in particular useful if the following
        circumstances occur where an employee (with employee number
        123) and two processes (P1 and P2) are concurrently trying to
        raise the salary for the employee:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Step 1:</fo:inline> The initial value of the employees salary
        is, for example, 5. Process P1 starts to execute, reads the
        employee record, and adds 2 to the salary.</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Step 2:</fo:inline> Process P1 is for some reason pre-empted
        and process P2 has the opportunity to run.</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Step 3:</fo:inline> Process P2 reads the record, adds 3 to
        the salary, and finally writes a new employee record with
        the salary set to 8.</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Step 4:</fo:inline> Process P1 starts to run again and
        writes its employee record with salary set to 7, thus
        effectively overwriting and undoing the work performed by
        process P2. The update performed by P2 is lost.</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A transaction system makes it possible to execute two or more
        processes concurrently that manipulate the same record.
        The programmer does not need to check that the
        updates are synchronous; this is overseen by the
        transaction handler. All programs accessing the database through
        the transaction system can be written as if they had sole access
        to the data.</fo:block>
    

    <fo:block id="idp2567360" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Durability</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The durability property ensures that
        changes made to the DBMS by a transaction are permanent. Once a
        transaction is committed, all changes made to the database are
        durable, that is, they are written safely to disc and do not
        become corrupted and do not disappear.</fo:block>
      <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The described durability feature does not entirely apply to
          situations where <fo:inline font-family="monospace">Mnesia</fo:inline> is configured as a "pure"
          primary memory database.</fo:block>
      </fo:block>
    
  <fo:block id="idp2570592" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.2 
      Locking</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Different transaction managers employ different strategies to
      satisfy the isolation property. <fo:inline font-family="monospace">Mnesia</fo:inline> uses the standard
      technique of two phase locking. That is, locks are set on records
      before they are read or written. <fo:inline font-family="monospace">Mnesia</fo:inline> uses the following
      lock types:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Read locks</fo:inline>. A read lock is set on one replica of
       a record before it can be read.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Write locks</fo:inline>. Whenever a transaction writes to a
       record, write locks are first set on all replicas of that
       particular record.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Read table locks</fo:inline>. If a transaction traverses an
       entire table in search for a record that satisfies some
       particular property, it is most inefficient to set read locks on
       the records one by one. It is also memory consuming, as
       the read locks themselves can take up considerable space if the
       table is large. Therefore, <fo:inline font-family="monospace">Mnesia</fo:inline> can set a read lock
       on an entire table.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Write table locks</fo:inline>. If a transaction writes many
       records to one table, a write lock can be set on the entire table.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Sticky locks</fo:inline>. These are write locks that stay in
       place at a node after the transaction that initiated the lock
       has terminated.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Mnesia</fo:inline> employs a strategy whereby functions, such as
      <fo:inline font-style="italic">mnesia:read/1</fo:inline>
      acquire the necessary locks dynamically as
      the transactions execute. <fo:inline font-family="monospace">Mnesia</fo:inline> automatically sets and
      releases the locks and the programmer does not need to code these
      operations.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Deadlocks can occur when concurrent processes set and release
      locks on the same records. <fo:inline font-family="monospace">Mnesia</fo:inline> employs a "wait-die"
      strategy to resolve
      these situations. If <fo:inline font-family="monospace">Mnesia</fo:inline> suspects that a deadlock can
      occur when a transaction tries to set a lock, the transaction is
      forced to release all its locks and sleep for a while. The Fun
      in the transaction is evaluated once more.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is therefore important that the code inside the Fun given to
      <fo:inline font-style="italic"><fo:inline font-family="monospace">mnesia:transaction/1</fo:inline></fo:inline>
      is pure. Some strange results can
      occur if, for example, messages are sent by the transaction
      Fun. The following example illustrates this situation:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

bad_raise(Eno, Raise) -&gt;
    F = fun() -&gt;
                [E] = mnesia:read({employee, Eno}),
                Salary = E#employee.salary + Raise,
                New = E#employee{salary = Salary},
                io:format("Trying to write ... ~n", []),
                mnesia:write(New)
        end,
    mnesia:transaction(F).</fo:block>    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This transaction can write the text <fo:inline font-family="monospace">"Trying to write ... "</fo:inline>
      1000 times to the terminal. However, <fo:inline font-family="monospace">Mnesia</fo:inline> guarantees
      that each transaction will eventually run. As a result,
      <fo:inline font-family="monospace">Mnesia</fo:inline> is not only deadlock free, but also livelock free.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Mnesia</fo:inline> programmer cannot prioritize one particular
      transaction to execute before other transactions that are waiting
      to execute. As a result, the <fo:inline font-family="monospace">Mnesia</fo:inline> DBMS transaction system is
      not suitable for hard real-time applications. However, <fo:inline font-family="monospace">Mnesia</fo:inline>
      contains other features that have real-time properties.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Mnesia</fo:inline> dynamically sets and releases locks as transactions
      execute. It is therefore dangerous to execute code with
      transaction side-effects. In particular, a <fo:inline font-family="monospace">receive</fo:inline>
      statement inside a transaction can lead to a situation where the
      transaction hangs and never returns, which in turn can cause locks
      not to release. This situation can bring the whole system to a
      standstill, as other transactions that execute in other
      processes, or on other nodes, are forced to wait for the defective
      transaction.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a transaction terminates abnormally, <fo:inline font-family="monospace">Mnesia</fo:inline>
      automatically releases the locks held by the transaction.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Up to now, examples of a number of functions that can be used
      inside a transaction have been shown. The following list shows
      the <fo:inline font-weight="bold">simplest</fo:inline> <fo:inline font-family="monospace">Mnesia</fo:inline> functions that work with
      transactions. Notice that these functions must be embedded in a
      transaction. If no enclosing transaction (or other enclosing
      <fo:inline font-family="monospace">Mnesia</fo:inline> activity) exists, they all fail.</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">mnesia:transaction(Fun) -&gt; {aborted, Reason} |{atomic, Value}</fo:inline>
       executes one transaction with the
       functional object <fo:inline font-family="monospace">Fun</fo:inline> as the single parameter.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">mnesia:read({Tab, Key}) -&gt; transaction abort | RecordList</fo:inline>
       reads all records with <fo:inline font-family="monospace">Key</fo:inline>
       as key from table <fo:inline font-family="monospace">Tab</fo:inline>. This function has the same semantics
       regardless of the location of <fo:inline font-family="monospace">Table</fo:inline>. If the table is of
       type <fo:inline font-family="monospace">bag</fo:inline>, <fo:inline font-family="monospace">read({Tab, Key})</fo:inline> can return an arbitrarily
       long list. If the table is of type <fo:inline font-family="monospace">set</fo:inline>, the list is
       either of length one or <fo:inline font-family="monospace">[]</fo:inline>.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">mnesia:wread({Tab, Key}) -&gt; transaction abort | RecordList</fo:inline>
       behaves the same way as the
       previously listed function <fo:inline font-family="monospace">read/1</fo:inline>, except that it
       acquires a write lock instead of a read lock. To execute a
       transaction that reads a record, modifies the record, and then
       writes the record, it is slightly more efficient to set the
       write lock immediately. When a <fo:inline font-style="italic">mnesia:read/1</fo:inline>
       is issued, followed by a
       <fo:inline font-style="italic">mnesia:write/1</fo:inline>
       the first read lock must be upgraded to a write lock when the
       write operation is executed.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">mnesia:write(Record) -&gt; transaction abort | ok</fo:inline>
       writes a record into the database. Argument
       <fo:inline font-family="monospace">Record</fo:inline> is an instance of a record. The function returns
       <fo:inline font-family="monospace">ok</fo:inline>, or terminates the transaction if an error occurs.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">mnesia:delete({Tab, Key}) -&gt; transaction abort | ok</fo:inline>
       deletes all records with the given key.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">mnesia:delete_object(Record) -&gt; transaction abort | ok</fo:inline>
       deletes records with the OID <fo:inline font-family="monospace">Record</fo:inline>. Use this function to
       delete only some records in a table of type <fo:inline font-family="monospace">bag</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block id="idp2608736" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Sticky Locks</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As previously stated, the locking strategy used by <fo:inline font-family="monospace">Mnesia</fo:inline>
        is to lock one record when reading a record, and lock all replicas
        of a record when writing a record. However, some
        applications use <fo:inline font-family="monospace">Mnesia</fo:inline> mainly for its fault-tolerant
        qualities. These applications can be configured with one
        node doing all the heavy work, and a standby node that is ready
        to take over if the main node fails. Such applications can
        benefit from using sticky locks instead of the normal locking
        scheme.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A sticky lock is a lock that stays in place at a node, after
        the transaction that first acquired the lock has terminated. To
        illustrate this, assume that the following transaction is
        executed:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
        F = fun() -&gt;
              mnesia:write(#foo{a = kalle})
            end,
        mnesia:transaction(F).</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">foo</fo:inline> table is replicated on the two nodes <fo:inline font-family="monospace">N1</fo:inline>
        and <fo:inline font-family="monospace">N2</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Normal locking requires the following:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>One network RPC (two messages) to acquire the write lock
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Three network messages to execute the two-phase commit
         protocol
        </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If sticky locks are used, the code must first be changed as
        follows:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
        F = fun() -&gt;
              mnesia:s_write(#foo{a = kalle})
            end,
        mnesia:transaction(F).</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This code uses the function
        <fo:inline font-style="italic">s_write/1</fo:inline>
        instead of the function
        <fo:inline font-style="italic">write/1</fo:inline>
        The function <fo:inline font-family="monospace">s_write/1</fo:inline> sets a
        sticky lock instead of a normal lock. If the table is not
        replicated, sticky locks have no special effect. If the table is
        replicated, and a sticky lock is set on node <fo:inline font-family="monospace">N1</fo:inline>, this
        lock then sticks to node <fo:inline font-family="monospace">N1</fo:inline>. The next time you try to
        set a sticky lock on the same record at node <fo:inline font-family="monospace">N1</fo:inline>,
        <fo:inline font-family="monospace">Mnesia</fo:inline> detects that the lock is already set and do no
        network operation to acquire the lock.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is more efficient to set a local lock than it is to set
        a networked lock. Sticky locks can therefore benefit an
        application that uses a replicated table and perform most of the
        work on only one of the nodes.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a record is stuck at node <fo:inline font-family="monospace">N1</fo:inline> and you try to set a
        sticky lock for the record on node <fo:inline font-family="monospace">N2</fo:inline>, the record must be
        unstuck. This operation is expensive and reduces performance.
        The unsticking is done automatically if you issue <fo:inline font-family="monospace">s_write/1</fo:inline>
        requests at <fo:inline font-family="monospace">N2</fo:inline>.</fo:block>
    

    <fo:block id="idp2625904" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Table Locks</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Mnesia</fo:inline> supports read and write locks on whole tables as a
        complement to the normal locks on single records. As previously
        stated, <fo:inline font-family="monospace">Mnesia</fo:inline> sets and releases locks automatically, and
        the programmer does not need to code these operations. However,
        transactions that read and write many records in a
        specific table execute more efficiently if the
        transaction is started by setting a table lock on this table. This
        blocks other concurrent transactions from the table. The
        following two functions are used to set explicit table locks for
        read and write operations:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">mnesia:read_lock_table(Tab)</fo:inline>
         sets a read lock on table <fo:inline font-family="monospace">Tab</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">mnesia:write_lock_table(Tab)</fo:inline>
         sets a write lock on table <fo:inline font-family="monospace">Tab</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Alternative syntax for acquisition of table locks is as
        follows:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
        mnesia:lock({table, Tab}, read)
        mnesia:lock({table, Tab}, write)</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The matching operations in <fo:inline font-family="monospace">Mnesia</fo:inline> can either lock the
        entire table or only a single record (when the key is bound in
        the pattern).</fo:block>
    

    <fo:block id="idp2634608" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Global Locks</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Write locks are normally acquired on all nodes where a
        replica of the table resides (and is active). Read locks are
        acquired on one node (the local one if a local
        replica exists).</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function
        <fo:inline font-style="italic">mnesia:lock/2</fo:inline>
        is intended to support table locks (as mentioned previously)
        but also for situations when locks need to be
        acquired regardless of how tables have been replicated:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
        mnesia:lock({global, GlobalKey, Nodes}, LockKind)

        LockKind ::= read | write | ...</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The lock is acquired on <fo:inline font-family="monospace">LockItem</fo:inline> on all nodes in the
        node list.</fo:block>
    
  <fo:block id="idp2639376" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.3 
      Dirty Operations</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In many applications, the overhead of processing a transaction
      can result in a loss of performance. Dirty operation are short
      cuts that bypass much of the processing and increase the speed
      of the transaction.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Dirty operation are often useful, for example, in a
      datagram routing application
      where <fo:inline font-family="monospace">Mnesia</fo:inline> stores the routing table, and it is time
      consuming to start a whole transaction every time a packet is
      received. <fo:inline font-family="monospace">Mnesia</fo:inline> has therefore functions that manipulate
      tables without using transactions. This alternative
      to processing is known as a dirty operation. However, notice the
      trade-off in avoiding the overhead of transaction processing:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The atomicity and the isolation properties of <fo:inline font-family="monospace">Mnesia</fo:inline>
       are lost.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The isolation property is compromised, because other
       Erlang processes, which use transaction to manipulate the data,
       do not get the benefit of isolation if dirty operations
       simultaneously are used to read and write records from the same
       table.
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The major advantage of dirty operations is that they execute
      much faster than equivalent operations that are processed as
      functional objects within a transaction.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Dirty operations
      are written to disc if they are performed on a table of type
      <fo:inline font-family="monospace">disc_copies</fo:inline> or type <fo:inline font-family="monospace">disc_only_copies</fo:inline>. <fo:inline font-family="monospace">Mnesia</fo:inline>
      also ensures that all replicas of a table are updated if a
      dirty write operation is performed on a table.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A dirty operation ensures a certain level of consistency.
      For example, dirty operations cannot return
      garbled records. Hence, each individual read or write operation
      is performed in an atomic manner.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All dirty functions execute a call to <fo:inline font-family="monospace">exit({aborted, Reason})</fo:inline>
      on failure. Even if the following functions are
      executed inside a transaction no locks are acquired. The
      following functions are available:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">mnesia:dirty_read({Tab, Key})</fo:inline>
       reads one or more records from <fo:inline font-family="monospace">Mnesia</fo:inline>.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">mnesia:dirty_write(Record)</fo:inline>
       writes the record <fo:inline font-family="monospace">Record</fo:inline>.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">mnesia:dirty_delete({Tab, Key})</fo:inline>
       deletes one or more records with key <fo:inline font-family="monospace">Key</fo:inline>.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">mnesia:dirty_delete_object(Record)</fo:inline>
       is the dirty operation alternative to the function
       <fo:inline font-style="italic">delete_object/1</fo:inline>.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">mnesia:dirty_first(Tab)</fo:inline>
          returns the "first" key in table <fo:inline font-family="monospace">Tab</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Records in <fo:inline font-family="monospace">set</fo:inline> or <fo:inline font-family="monospace">bag</fo:inline> tables are not sorted.
          However, there is a record order that is unknown to the user.
          This means that a table can be traversed by this function
          with the function
          <fo:inline font-style="italic">mnesia:dirty_next/2</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If there are no records in the table, this function
          returns the atom <fo:inline font-family="monospace">'$end_of_table'</fo:inline>. It is not
          recommended to use this atom as the key for any user
          records.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">mnesia:dirty_next(Tab, Key)</fo:inline>
       returns the "next" key in table <fo:inline font-family="monospace">Tab</fo:inline>. This function makes it
       possible to traverse a table and perform some operation on all
       records in the table. When the end of the table is reached, the
       special key <fo:inline font-family="monospace">'$end_of_table'</fo:inline> is returned. Otherwise, the
       function returns a key that can be used to read the actual
       record.</fo:block>
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The behavior is undefined if any process performs a write
       operation on the table while traversing the table with the
       function
       <fo:inline font-style="italic">dirty_next/2</fo:inline>
       This is because <fo:inline font-family="monospace">write</fo:inline>
       operations on a <fo:inline font-family="monospace">Mnesia</fo:inline> table can lead to internal
       reorganizations of the table itself. This is an implementation
       detail, but remember that the dirty functions are low-level
       functions.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">mnesia:dirty_last(Tab)</fo:inline>
       works exactly like
       <fo:inline font-style="italic">mnesia:dirty_first/1</fo:inline>
       but returns the last object in
       Erlang term order for the table type <fo:inline font-family="monospace">ordered_set</fo:inline>. For
       all other table types, <fo:inline font-family="monospace">mnesia:dirty_first/1</fo:inline> and 
       <fo:inline font-family="monospace">mnesia:dirty_last/1</fo:inline> are synonyms.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">mnesia:dirty_prev(Tab, Key)</fo:inline>
       works exactly like
       <fo:inline font-family="monospace">mnesia:dirty_next/2</fo:inline> but returns the previous object in
       Erlang term order for the table type <fo:inline font-family="monospace">ordered_set</fo:inline>. For
       all other table types, <fo:inline font-family="monospace">mnesia:dirty_next/2</fo:inline> and
       <fo:inline font-family="monospace">mnesia:dirty_prev/2</fo:inline> are synonyms.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">mnesia:dirty_slot(Tab, Slot)</fo:inline>
          returns the list of records that are associated with <fo:inline font-family="monospace">Slot</fo:inline>
          in a table. It can be used to traverse a table in a manner
          similar to the function <fo:inline font-family="monospace">dirty_next/2</fo:inline>. A table has a
          number of slots that range from zero to some unknown upper
          bound. The function <fo:inline font-family="monospace">dirty_slot/2</fo:inline> returns the special
          atom <fo:inline font-family="monospace">'$end_of_table'</fo:inline> when the end of the table is
          reached.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The behavior of this function is undefined if the
          table is written on while being
          traversed. The function
          <fo:inline font-style="italic">mnesia:read_lock_table(Tab)</fo:inline>
          can be used to ensure that no transaction-protected writes
          are performed during the iteration.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">mnesia:dirty_update_counter({Tab,Key}, Val)</fo:inline>.
          Counters are positive integers with a value greater than or
          equal to zero. Updating a counter adds <fo:inline font-family="monospace">Val</fo:inline> and the
          counter where <fo:inline font-family="monospace">Val</fo:inline> is a positive or negative integer.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Mnesia</fo:inline> has no special counter records. However, records
          of the form <fo:inline font-family="monospace">{TabName, Key, Integer}</fo:inline> can be used as
          counters, and can be persistent.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Transaction-protected updates of counter records are not
          possible.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are two significant differences when using this
          function instead of reading the record, performing the
          arithmetic, and writing the record:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>It is much more efficient.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The funcion
           <fo:inline font-style="italic">dirty_update_counter/2</fo:inline>
           is performed as an atomic operation although it is not protected
           by a transaction. Therfore no table update is lost if two
           processes simultaneously execute the function
          <fo:inline font-family="monospace">dirty_update_counter/2</fo:inline>.
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">mnesia:dirty_match_object(Pat)</fo:inline>
       is the dirty equivalent of
       <fo:inline font-style="italic">mnesia:match_object/1</fo:inline>.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">mnesia:dirty_select(Tab, Pat)</fo:inline>
       is the dirty equivalent of
       <fo:inline font-style="italic"> mnesia:select/2</fo:inline>.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">mnesia:dirty_index_match_object(Pat, Pos)</fo:inline>
       is the dirty equivalent of
       <fo:inline font-style="italic">mnesia:index_match_object/2</fo:inline>.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">mnesia:dirty_index_read(Tab, SecondaryKey, Pos)</fo:inline>
       is the dirty equivalent of
       <fo:inline font-style="italic">mnesia:index_read/3</fo:inline>.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">mnesia:dirty_all_keys(Tab)</fo:inline>
       is the dirty equivalent of <fo:inline font-style="italic">
mnesia:all_keys/1</fo:inline>.
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp2694864" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.4 
      Record Names versus Table Names</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In <fo:inline font-family="monospace">Mnesia</fo:inline>, all records in a table must have the same name.
      All the records must be instances of the same
      record type. The record name, however, does not necessarily have
      to be the same as the table name, although this is the case in
      most of the examples in this User's Guide. If a table is created
      without property <fo:inline font-family="monospace">record_name</fo:inline>, the following code ensures
      that all records in the tables have the same name as the table:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      mnesia:create_table(subscriber, [])</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">However, if the table is created with an explicit record name
      as argument, as shown in the following example, subscriber records
      can be stored in both of the tables regardless of the table
      names:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      TabDef = [{record_name, subscriber}],
      mnesia:create_table(my_subscriber, TabDef),
      mnesia:create_table(your_subscriber, TabDef).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To access such tables, simplified access functions
      (as described earlier) cannot be used. For example,
      writing a subscriber record into a table requires the function
      <fo:inline font-style="italic">mnesia:write/3</fo:inline>
      instead of the simplified functions
      <fo:inline font-style="italic">mnesia:write/1</fo:inline>
      and
      <fo:inline font-style="italic">mnesia:s_write/1</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      mnesia:write(subscriber, #subscriber{}, write)
      mnesia:write(my_subscriber, #subscriber{}, sticky_write)
      mnesia:write(your_subscriber, #subscriber{}, write)</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following simple code illustrates the
      relationship between the simplified access functions used in
      most of the examples and their more flexible counterparts:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      mnesia:dirty_write(Record) -&gt;
        Tab = element(1, Record),
        mnesia:dirty_write(Tab, Record).
      
      mnesia:dirty_delete({Tab, Key}) -&gt;
        mnesia:dirty_delete(Tab, Key).
      
      mnesia:dirty_delete_object(Record) -&gt;
        Tab = element(1, Record),
        mnesia:dirty_delete_object(Tab, Record) 
      
      mnesia:dirty_update_counter({Tab, Key}, Incr) -&gt;
        mnesia:dirty_update_counter(Tab, Key, Incr).
      
      mnesia:dirty_read({Tab, Key}) -&gt;
        Tab = element(1, Record),
        mnesia:dirty_read(Tab, Key).
      
      mnesia:dirty_match_object(Pattern) -&gt;
        Tab = element(1, Pattern),
        mnesia:dirty_match_object(Tab, Pattern).
      
      mnesia:dirty_index_match_object(Pattern, Attr) 
        Tab = element(1, Pattern),
        mnesia:dirty_index_match_object(Tab, Pattern, Attr).
      
      mnesia:write(Record) -&gt;
        Tab = element(1, Record),
        mnesia:write(Tab, Record, write).
      
      mnesia:s_write(Record) -&gt;
        Tab = element(1, Record),
        mnesia:write(Tab, Record, sticky_write).
      
      mnesia:delete({Tab, Key}) -&gt;
        mnesia:delete(Tab, Key, write).
      
      mnesia:s_delete({Tab, Key}) -&gt;
        mnesia:delete(Tab, Key, sticky_write).
      
      mnesia:delete_object(Record) -&gt;
        Tab = element(1, Record),
        mnesia:delete_object(Tab, Record, write).
      
      mnesia:s_delete_object(Record) -&gt;
        Tab = element(1, Record),
        mnesia:delete_object(Tab, Record, sticky_write).
      
      mnesia:read({Tab, Key}) -&gt;
        mnesia:read(Tab, Key, read).
      
      mnesia:wread({Tab, Key}) -&gt;
        mnesia:read(Tab, Key, write).
      
      mnesia:match_object(Pattern) -&gt;
        Tab = element(1, Pattern),
        mnesia:match_object(Tab, Pattern, read).
      
      mnesia:index_match_object(Pattern, Attr) -&gt;
        Tab = element(1, Pattern),
        mnesia:index_match_object(Tab, Pattern, Attr, read).</fo:block>
  <fo:block id="idp2706736" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.5 
      Activity Concept and Various Access Contexts</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As previously described, a Functional Object (Fun) performing
      table access operations, as listed here, can be passed
      on as arguments to the function
      <fo:inline font-style="italic">mnesia:transaction/1,2,3</fo:inline>:
    </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:inline font-style="italic">mnesia:write/3 (write/1, s_write/1)</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
       <fo:inline font-style="italic">mnesia:delete/3</fo:inline>
       (<fo:inline font-style="italic">mnesia:delete/1</fo:inline>,
       <fo:inline font-style="italic">mnesia:s_delete/1</fo:inline>)
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
       <fo:inline font-style="italic">mnesia:delete_object/3</fo:inline>
       (<fo:inline font-style="italic">mnesia:delete_object/1</fo:inline>,
       <fo:inline font-style="italic">mnesia:s_delete_object/1</fo:inline>)
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
       <fo:inline font-style="italic">mnesia:read/3</fo:inline>
       (<fo:inline font-style="italic">mnesia:read/1</fo:inline>,
       <fo:inline font-style="italic">mnesia:wread/1</fo:inline>)
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
       <fo:inline font-style="italic">mnesia:match_object/2</fo:inline>
       (<fo:inline font-style="italic">mnesia:match_object/1</fo:inline>)
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
       <fo:inline font-style="italic">mnesia:select/3</fo:inline>
       (<fo:inline font-style="italic">mnesia:select/2</fo:inline>)
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
       <fo:inline font-style="italic">mnesia:foldl/3</fo:inline>
       (<fo:inline font-family="monospace">mnesia:foldl/4</fo:inline>,
       <fo:inline font-style="italic">mnesia:foldr/3</fo:inline>,
       <fo:inline font-family="monospace">mnesia:foldr/4</fo:inline>)
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
       <fo:inline font-style="italic">mnesia:all_keys/1</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
       <fo:inline font-style="italic">mnesia:index_match_object/4</fo:inline>
       (<fo:inline font-style="italic">mnesia:index_match_object/2</fo:inline>)
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
       <fo:inline font-style="italic">mnesia:index_read/3</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
       <fo:inline font-style="italic">mnesia:lock/2</fo:inline>
       (<fo:inline font-style="italic">mnesia:read_lock_table/1</fo:inline>,
       <fo:inline font-style="italic">mnesia:write_lock_table/1</fo:inline>)
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
       <fo:inline font-style="italic">mnesia:table_info/2</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These functions are performed in a
      transaction context involving mechanisms, such as locking, logging,
      replication, checkpoints, subscriptions, and commit protocols.
      However, the same function can also be
      evaluated in other activity contexts.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following activity access contexts are currently supported:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">transaction</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">sync_transaction</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">async_dirty</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">sync_dirty</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ets</fo:inline></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By passing the same "fun" as argument to the function
       <fo:inline font-style="italic">mnesia:sync_transaction(Fun [, Args])</fo:inline>
      it is performed
      in synced transaction context. Synced transactions wait until all
      active replicas has committed the transaction (to disc) before
      returning from the <fo:inline font-family="monospace">mnesia:sync_transaction</fo:inline> call. Using
      <fo:inline font-family="monospace">sync_transaction</fo:inline> is useful in the following cases:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>When an application executes on several nodes and wants to
       be sure that the update is performed on the remote nodes before
       a remote process is spawned or a message is sent to a remote
       process.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>When a combining transaction writes with "dirty_reads", that
        is, the functions <fo:inline font-family="monospace">dirty_match_object</fo:inline>, <fo:inline font-family="monospace">dirty_read</fo:inline>,
        <fo:inline font-family="monospace">dirty_index_read</fo:inline>, <fo:inline font-family="monospace">dirty_select</fo:inline>, and so on.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>When an application performs frequent or voluminous updates
       that can overload <fo:inline font-family="monospace">Mnesia</fo:inline> on other nodes.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By passing the same "fun" as argument to the function
       <fo:inline font-style="italic">mnesia:async_dirty(Fun [, Args])</fo:inline>,
      it is performed in dirty context. The function calls are mapped to
      the corresponding dirty functions. This still involves logging,
      replication, and subscriptions but no locking,
      local transaction storage, or commit protocols are involved.
      Checkpoint retainers are updated but updated
      "dirty". Thus, they are updated asynchronously. The
      functions wait for the operation to be performed on one
      node but not the others. If the table resides locally, no waiting
      occurs.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By passing the same "fun" as an argument to the function
       <fo:inline font-style="italic">mnesia:sync_dirty(Fun [, Args])</fo:inline>,
      it is performed in almost the same context as the function
      <fo:inline font-style="italic">mnesia:async_dirty/1,2</fo:inline>.
      The difference is that the operations are performed
      synchronously. The caller waits for the updates to be
      performed on all active replicas. Using <fo:inline font-family="monospace">mnesia:sync_dirty/1,2</fo:inline>
      is useful in the following cases:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>When an application executes on several nodes and wants to
       be sure that the update is performed on the remote nodes before
       a remote process is spawned or a message is sent to a remote
       process.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>When an application performs frequent or voluminous updates
       that can overload <fo:inline font-family="monospace">Mnesia</fo:inline> on the nodes.</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To check if your code is executed within a transaction, use
       the function
       <fo:inline font-style="italic">mnesia:is_transaction/0</fo:inline>.
      It returns <fo:inline font-family="monospace">true</fo:inline> when called
      inside a transaction context, otherwise <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Mnesia</fo:inline> tables with storage type <fo:inline font-family="monospace">RAM_copies</fo:inline> and
      <fo:inline font-family="monospace">disc_copies</fo:inline> are implemented internally as
      <fo:inline font-family="monospace">ets</fo:inline> tables. Applications can access the these tables
      directly. This is only
      recommended if all options have been weighed and the possible
      outcomes are understood. By passing the earlier mentioned "fun"
      to the function
      <fo:inline font-style="italic">mnesia:ets(Fun [, Args])</fo:inline>,
      it is performed but in a raw
      context. The operations are performed directly on the
      local <fo:inline font-family="monospace">ets</fo:inline> tables, assuming that the local storage type is
      <fo:inline font-family="monospace">RAM_copies</fo:inline> and that the table is not replicated on other
      nodes.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Subscriptions are not triggered and no checkpoints are updated,
      but this operation is blindingly fast. Disc resident
      tables are not to be updated with the <fo:inline font-family="monospace">ets</fo:inline> function, as the
      disc is not updated.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Fun can also be passed as an argument to the function
      <fo:inline font-style="italic">mnesia:activity/2,3,4</fo:inline>,
      which enables use of customized
      activity access callback modules. It can either be obtained
      directly by stating the module name as argument, or implicitly
      by use of configuration parameter <fo:inline font-family="monospace">access_module</fo:inline>. A
      customized callback module can be used for several purposes,
      such as providing triggers, integrity constraints, runtime
      statistics, or virtual tables.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The callback module does not have
      to access real <fo:inline font-family="monospace">Mnesia</fo:inline> tables, it is free to do whatever
      it wants as long as the callback interface is fulfilled.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">Appendix B,
      Activity Access Callback Interface</fo:inline> provides the
      source code, <fo:inline font-family="monospace">mnesia_frag.erl</fo:inline>, for one alternative
      implementation. The context-sensitive function
      <fo:inline font-style="italic">mnesia:table_info/2</fo:inline>
      can be used to provide virtual
      information about a table. One use of this is to perform
      <fo:inline font-family="monospace">QLC</fo:inline> queries within an activity context with a
      customized callback module. By providing table information about
      table indexes and other <fo:inline font-family="monospace">QLC</fo:inline> requirements, <fo:inline font-family="monospace">QLC</fo:inline> can
      be used as a generic query language to access virtual tables.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">QLC queries can be performed in all these activity
      contexts (<fo:inline font-family="monospace">transaction</fo:inline>, <fo:inline font-family="monospace">sync_transaction</fo:inline>,
      <fo:inline font-family="monospace">async_dirty</fo:inline>, <fo:inline font-family="monospace">sync_dirty</fo:inline>, and <fo:inline font-family="monospace">ets</fo:inline>). The
      <fo:inline font-family="monospace">ets</fo:inline> activity only works if the table has no indexes.</fo:block>
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function <fo:inline font-family="monospace">mnesia:dirty_*</fo:inline> always executes with
        <fo:inline font-family="monospace">async_dirty</fo:inline> semantics regardless of which activity
        access contexts that are started. It can even start contexts
        without any enclosing activity access context.</fo:block>
    </fo:block>
  <fo:block id="idp2771408" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.6 
      Nested Transactions</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Transactions can be nested in an arbitrary fashion. A child
      transaction must run in the same process as its parent. When a
      child transaction terminates, the caller of the child transaction
      gets return value <fo:inline font-family="monospace">{aborted, Reason}</fo:inline> and any work performed
      by the child is erased. If a child transaction commits, the
      records written by the child are propagated to the parent.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">No locks are released when child transactions terminate. Locks
      created by a sequence of nested transactions are kept until
      the topmost transaction terminates. Furthermore, any update
      performed by a nested transaction is only propagated
      in such a manner so that the parent of the nested transaction
      sees the updates. No final commitment is done until
      the top-level transaction terminates.
      So, although a nested transaction returns <fo:inline font-family="monospace">{atomic, Val}</fo:inline>,
      if the enclosing parent transaction terminates, the entire
      nested operation terminates.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The ability to have nested transaction with identical semantics
      as top-level transaction makes it easier to write
      library functions that manipulate <fo:inline font-family="monospace">Mnesia</fo:inline> tables.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Consider a function that adds a subscriber to a telephony
      system:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      add_subscriber(S) -&gt;
          mnesia:transaction(fun() -&gt;
              case mnesia:read( ..........</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function needs to be called as a transaction.
      Assume that you wish to write a function that
      both calls the function <fo:inline font-family="monospace">add_subscriber/1</fo:inline> and
      is in itself protected by the context of a transaction.
      By calling <fo:inline font-family="monospace">add_subscriber/1</fo:inline> from within
      another transaction, a nested transaction is created.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Also, different activity access contexts can be mixed while
      nesting. However, the dirty ones (<fo:inline font-family="monospace">async_dirty</fo:inline>,
      <fo:inline font-family="monospace">sync_dirty</fo:inline>, and <fo:inline font-family="monospace">ets</fo:inline>) inherit the transaction
      semantics if they are called inside a transaction and thus
      grab locks and use two or three phase commit.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      add_subscriber(S) -&gt;
          mnesia:transaction(fun() -&gt;
             %% Transaction context 
             mnesia:read({some_tab, some_data}),
             mnesia:sync_dirty(fun() -&gt;
                 %% Still in a transaction context.
                 case mnesia:read( ..) ..end), end).
      add_subscriber2(S) -&gt;
          mnesia:sync_dirty(fun() -&gt;
             %% In dirty context 
             mnesia:read({some_tab, some_data}),
             mnesia:transaction(fun() -&gt;
                 %% In a transaction context.
                 case mnesia:read( ..) ..end), end).</fo:block>
  <fo:block id="idp2782256" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.7 
      Pattern Matching</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the function
      <fo:inline font-style="italic">mnesia:read/3</fo:inline>
      cannot be used, <fo:inline font-family="monospace">Mnesia</fo:inline>
      provides the programmer with several functions for matching
      records against a pattern. The most useful ones
      are the following:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      mnesia:select(Tab, MatchSpecification, LockKind) -&gt;
          transaction abort | [ObjectList]
      mnesia:select(Tab, MatchSpecification, NObjects, Lock) -&gt;  
          transaction abort | {[Object],Continuation} | '$end_of_table'
      mnesia:select(Cont) -&gt;
          transaction abort | {[Object],Continuation} | '$end_of_table'
      mnesia:match_object(Tab, Pattern, LockKind) -&gt;
          transaction abort | RecordList</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These functions match a <fo:inline font-family="monospace">Pattern</fo:inline> against all records in
      table <fo:inline font-family="monospace">Tab</fo:inline>. In a
      <fo:inline font-style="italic">mnesia:select</fo:inline>
      call, <fo:inline font-family="monospace">Pattern</fo:inline> is
      a part of <fo:inline font-family="monospace">MatchSpecification</fo:inline> described in the following. It
      is not necessarily performed as an exhaustive search of the entire
      table. By using indexes and bound values in the key of the
      pattern, the actual work done by the function can be condensed
      into a few hash lookups. Using <fo:inline font-family="monospace">ordered_set</fo:inline> tables can reduce
      the search space if the keys are partially bound.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The pattern provided to the functions must be a valid record,
      and the first element of the provided tuple must be the
      <fo:inline font-family="monospace">record_name</fo:inline> of the table. The special element <fo:inline font-family="monospace">'_'</fo:inline>
      matches any data structure in Erlang (also known as an Erlang
      term). The special elements <fo:inline font-family="monospace">'$&lt;number&gt;'</fo:inline>
      behave as Erlang variables, that is, they match anything,
      bind the first occurrence, and match the
      coming occurrences of that variable against the bound value.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Use function
      <fo:inline font-style="italic">mnesia:table_info(Tab, wild_pattern)</fo:inline>
      to obtain a basic pattern, which matches all records in a table,
      or use the default value in record creation.
      Do not make the pattern hard-coded, as this makes the code more
      vulnerable to future changes of the record definition.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      Wildpattern = mnesia:table_info(employee, wild_pattern), 
      %% Or use
      Wildpattern = #employee{_ = '_'},</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For the employee table, the wild pattern looks as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      {employee, '_', '_', '_', '_', '_',' _'}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To constrain the match, it is needed to replace some
      of the <fo:inline font-family="monospace">'_'</fo:inline> elements. The code for matching out
      all female employees looks as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      Pat = #employee{sex = female, _ = '_'},
      F = fun() -&gt; mnesia:match_object(Pat) end,
      Females = mnesia:transaction(F).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The match function can also be used to check the equality of
      different attributes. For example, to find all employees with
      an employee number equal to their room number:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      Pat = #employee{emp_no = '$1', room_no = '$1', _ = '_'},
      F = fun() -&gt; mnesia:match_object(Pat) end,
      Odd = mnesia:transaction(F).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function
      <fo:inline font-style="italic">mnesia:match_object/3</fo:inline>
      lacks some important features that
      <fo:inline font-style="italic">mnesia:select/3</fo:inline>
      have. For example,
      <fo:inline font-family="monospace">mnesia:match_object/3</fo:inline> can only return the matching records,
      and it cannot express constraints other than equality. To find
      the names of the male employees on the second floor:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

      MatchHead = #employee{name='$1', sex=male, room_no={'$2', '_'}, _='_'},
      Guard = [{'&gt;=', '$2', 220},{'&lt;', '$2', 230}],
      Result = '$1',
      mnesia:select(employee,[{MatchHead, Guard, [Result]}])</fo:block>    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function <fo:inline font-family="monospace">select</fo:inline> can be used to add more constraints
      and create output that cannot be done with
      <fo:inline font-family="monospace">mnesia:match_object/3</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The second argument to <fo:inline font-family="monospace">select</fo:inline> is a <fo:inline font-family="monospace">MatchSpecification</fo:inline>.
      A <fo:inline font-family="monospace">MatchSpecification</fo:inline> is a list of <fo:inline font-family="monospace">MatchFunction</fo:inline>s, where
      each <fo:inline font-family="monospace">MatchFunction</fo:inline> consists of a tuple containing
      <fo:inline font-family="monospace">{MatchHead, MatchCondition, MatchBody}</fo:inline>:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">MatchHead</fo:inline> is the same pattern as used in
       <fo:inline font-family="monospace">mnesia:match_object/3</fo:inline> described earlier.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">MatchCondition</fo:inline> is a list of extra constraints
       applied to each record.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">MatchBody</fo:inline> constructs the return values.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details about the match specifications, see
      "Match Specifications in Erlang" in
      <fo:inline font-style="italic">ERTS</fo:inline> User's Guide.
      For more information, see the
      <fo:inline font-style="italic">ets</fo:inline> and
      <fo:inline font-style="italic">dets</fo:inline>
      manual pages in <fo:inline font-family="monospace">STDLIB</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The functions
      <fo:inline font-style="italic">select/4</fo:inline> and
      <fo:inline font-style="italic">select/1</fo:inline>
      are used to
      get a limited number of results, where <fo:inline font-family="monospace">Continuation</fo:inline>
      gets the next chunk of results. <fo:inline font-family="monospace">Mnesia</fo:inline> uses
      <fo:inline font-family="monospace">NObjects</fo:inline> as a recommendation only. Thus, more or less
      results than specified with <fo:inline font-family="monospace">NObjects</fo:inline> can be returned in
      the result list, even the empty list can be returned even
      if there are more results to collect.</fo:block>
    <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There is a severe performance penalty in using
        <fo:inline font-family="monospace">mnesia:select/[1|2|3|4]</fo:inline> after any modifying operation
        is done on that table in the same transaction. That is, avoid
        using
        <fo:inline font-style="italic">mnesia:write/1</fo:inline> or
        <fo:inline font-style="italic">mnesia:delete/1</fo:inline>
        before <fo:inline font-family="monospace">mnesia:select</fo:inline> in the same transaction.</fo:block>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the key attribute is bound in a pattern, the match operation
      is efficient. However, if the key attribute in a pattern is
      given as <fo:inline font-family="monospace">'_'</fo:inline> or <fo:inline font-family="monospace">'$1'</fo:inline>, the whole <fo:inline font-family="monospace">employee</fo:inline>
      table must be searched for records that match. Hence if the table is
      large, this can become a time-consuming operation, but it can be
      remedied with indexes (see
      <fo:inline font-style="italic">Indexing</fo:inline>)
      if the function
      <fo:inline font-style="italic">mnesia:match_object</fo:inline>
      is used.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">QLC queries can also be used to search <fo:inline font-family="monospace">Mnesia</fo:inline> tables. By
      using the function
      <fo:inline font-style="italic">mnesia:table/[1|2]</fo:inline>
      as the generator inside a QLC
      query, you let the query operate on a <fo:inline font-family="monospace">Mnesia</fo:inline> table.
      <fo:inline font-family="monospace">Mnesia</fo:inline>-specific options to <fo:inline font-family="monospace">mnesia:table/2</fo:inline> are
      <fo:inline font-family="monospace">{lock, Lock}</fo:inline>, <fo:inline font-family="monospace">{n_objects,Integer}</fo:inline>, and
      <fo:inline font-family="monospace">{traverse, SelMethod}</fo:inline>:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">lock</fo:inline> specifies whether <fo:inline font-family="monospace">Mnesia</fo:inline> is to acquire a
       read or write lock on the table.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">n_objects</fo:inline> specifies how many results are to be
       returned in each chunk to QLC.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">traverse</fo:inline> specifies which function <fo:inline font-family="monospace">Mnesia</fo:inline> is
       to use to traverse the table. Default <fo:inline font-family="monospace">select</fo:inline> is used, but
       by using <fo:inline font-family="monospace">{traverse, {select, MatchSpecification}}</fo:inline> as an
       option to
       <fo:inline font-style="italic">mnesia:table/2</fo:inline>
       the user can specify its own view of the table.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If no options are specified, a read lock is acquired, 100
      results are returned in each chunk, and <fo:inline font-family="monospace">select</fo:inline> is used
      to traverse the table, that is:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      mnesia:table(Tab) -&gt;
          mnesia:table(Tab, [{n_objects,100},{lock, read}, {traverse, select}]).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function
      <fo:inline font-style="italic">mnesia:all_keys(Tab)</fo:inline>
      returns all keys in a table.</fo:block>
  <fo:block id="idp2838576" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.8 
      Iteration</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Mnesia</fo:inline> provides the following functions that iterate over all
      the records in a table:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      mnesia:foldl(Fun, Acc0, Tab) -&gt; NewAcc | transaction abort
      mnesia:foldr(Fun, Acc0, Tab) -&gt; NewAcc | transaction abort
      mnesia:foldl(Fun, Acc0, Tab, LockType) -&gt; NewAcc | transaction abort
      mnesia:foldr(Fun, Acc0, Tab, LockType) -&gt; NewAcc | transaction abort</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These functions iterate over the <fo:inline font-family="monospace">Mnesia</fo:inline> table <fo:inline font-family="monospace">Tab</fo:inline>
      and apply the function <fo:inline font-family="monospace">Fun</fo:inline> to each record. <fo:inline font-family="monospace">Fun</fo:inline>
      takes two arguments, the first is a record from the
      table, and the second is the accumulator.
      <fo:inline font-family="monospace">Fun</fo:inline> returns a new accumulator.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The first time <fo:inline font-family="monospace">Fun</fo:inline> is applied, <fo:inline font-family="monospace">Acc0</fo:inline> is
      the second argument. The next time <fo:inline font-family="monospace">Fun</fo:inline> is called,
      the return value from the previous call is used as the
      second argument. The term the last call to <fo:inline font-family="monospace">Fun</fo:inline> returns
      is the return value of the function
       <fo:inline font-style="italic">mnesia:foldl/3</fo:inline> or
       <fo:inline font-style="italic">mnesia:foldr/3</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The difference between these functions is the
      order the table is accessed for <fo:inline font-family="monospace">ordered_set</fo:inline> tables.
      For other table types the functions are equivalent.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">LockType</fo:inline> specifies what type of lock that is to be
      acquired for the iteration, default is <fo:inline font-family="monospace">read</fo:inline>. If
      records are written or deleted during the iteration, a write
      lock is to be acquired.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These functions can be used to find records in a table
      when it is impossible to write constraints for the function
       <fo:inline font-style="italic">mnesia:match_object/3</fo:inline>,
      or when you want to perform some action on certain records.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For example, finding all the employees who have a salary
      less than 10 can look as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      find_low_salaries() -&gt;
        Constraint = 
             fun(Emp, Acc) when Emp#employee.salary &lt; 10 -&gt;
                    [Emp | Acc];
                (_, Acc) -&gt;
                    Acc
             end,
        Find = fun() -&gt; mnesia:foldl(Constraint, [], employee) end,
        mnesia:transaction(Find).
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To raise the salary to 10 for everyone with a salary less than 10
      and return the sum of all raises:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      increase_low_salaries() -&gt;
         Increase = 
             fun(Emp, Acc) when Emp#employee.salary &lt; 10 -&gt;
                    OldS = Emp#employee.salary,
                    ok = mnesia:write(Emp#employee{salary = 10}),
                    Acc + 10 - OldS;
                (_, Acc) -&gt;
                    Acc
             end,
        IncLow = fun() -&gt; mnesia:foldl(Increase, 0, employee, write) end,
        mnesia:transaction(IncLow).
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Many nice things can be done with the iterator functions but take
      some caution about performance and memory use for large tables.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Call these iteration functions on nodes that contain a replica of
      the table. Each call to the function <fo:inline font-family="monospace">Fun</fo:inline> access the table
      and if the table resides on another node it generates much
      unnecessary network traffic.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Mnesia</fo:inline> also provides some functions that make it possible
      for the user to iterate over the table. The order of the iteration
      is unspecified if the table is not of type <fo:inline font-family="monospace">ordered_set</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      mnesia:first(Tab) -&gt;  Key | transaction abort
      mnesia:last(Tab)  -&gt;  Key | transaction abort
      mnesia:next(Tab,Key)  -&gt;  Key | transaction abort
      mnesia:prev(Tab,Key)  -&gt;  Key | transaction abort
      mnesia:snmp_get_next_index(Tab,Index) -&gt; {ok, NextIndex} | endOfTable</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The order of <fo:inline font-family="monospace">first</fo:inline>/<fo:inline font-family="monospace">last</fo:inline> and <fo:inline font-family="monospace">next</fo:inline>/<fo:inline font-family="monospace">prev</fo:inline>
      is only valid for
      <fo:inline font-family="monospace">ordered_set</fo:inline> tables, they are synonyms for other tables.
      When the end of the table is reached, the special key
      <fo:inline font-family="monospace">'$end_of_table'</fo:inline> is returned.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If records are written and deleted during the traversal, use
      the function
      <fo:inline font-style="italic">mnesia:foldl/3</fo:inline> or
      <fo:inline font-style="italic">mnesia:foldr/3</fo:inline>
      with a <fo:inline font-family="monospace">write</fo:inline> lock. Or the function
      <fo:inline font-style="italic">mnesia:write_lock_table/1</fo:inline>
      when using <fo:inline font-family="monospace">first</fo:inline> and <fo:inline font-family="monospace">next</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Writing or deleting in transaction context creates a local copy
      of each modified record. Thus, modifying each record in a large
      table uses much memory. <fo:inline font-family="monospace">Mnesia</fo:inline> compensates for every
      written or deleted record during the iteration in a transaction
      context, which can reduce the performance. If possible, avoid writing
      or deleting records in the same transaction before iterating over the
      table.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In dirty context, that is, <fo:inline font-family="monospace">sync_dirty</fo:inline> or <fo:inline font-family="monospace">async_dirty</fo:inline>,
      the modified records are not stored in a local copy; instead,
      each record is updated separately. This generates much
      network traffic if the table has a replica on another node and
      has all the other drawbacks that dirty operations
      have. Especially for commands
      <fo:inline font-style="italic">mnesia:first/1</fo:inline> and
      <fo:inline font-style="italic">mnesia:next/2</fo:inline>,
      the same drawbacks as described previously for
      <fo:inline font-style="italic">mnesia:dirty_first/1</fo:inline>
      and
      <fo:inline font-style="italic">mnesia:dirty_next/2</fo:inline>
      applies, that
      is, no writing to the table is to be done during iteration.</fo:block>
  <fo:block id="idp2876592" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.6  Miscellaneous Mnesia Features</fo:marker>1.6  Miscellaneous Mnesia Features</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The previous sections describe how to get started
    with <fo:inline font-family="monospace">Mnesia</fo:inline> and how to build a <fo:inline font-family="monospace">Mnesia</fo:inline> database. This
    section describes the more advanced features available
    when building a distributed, fault-tolerant <fo:inline font-family="monospace">Mnesia</fo:inline> database.
    The following topics are included:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Indexing</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Distribution and fault tolerance</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Table fragmentation</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Local content tables</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Disc-less nodes</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>More about schema management</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Mnesia</fo:inline> event handling</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Debugging <fo:inline font-family="monospace">Mnesia</fo:inline> applications</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Concurrent processes in <fo:inline font-family="monospace">Mnesia</fo:inline></fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Prototyping</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Object-based programming with <fo:inline font-family="monospace">Mnesia</fo:inline></fo:block></fo:list-item-body></fo:list-item>
  </fo:list-block><fo:block id="idp2889728" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.1 
      Indexing</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Data retrieval and matching can be performed efficiently
      if the key for the record is known. Conversely, if the key is
      unknown, all records in a table must be searched. The larger the
      table, the more time consuming it becomes. To remedy this
      problem, <fo:inline font-family="monospace">Mnesia</fo:inline> indexing capabilities are used to improve
      data retrieval and matching of records.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following two functions manipulate indexes on existing
      tables:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">mnesia:add_table_index(Tab, AttributeName)
       -&gt; {aborted, R} |{atomic, ok}</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">mnesia:del_table_index(Tab, AttributeName)
       -&gt; {aborted, R} |{atomic, ok}</fo:inline></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These functions create or delete a table index on a field
      defined by <fo:inline font-family="monospace">AttributeName</fo:inline>. To illustrate this, add an
      index to the table definition <fo:inline font-family="monospace">(employee, {emp_no, name,
      salary, sex, phone, room_no})</fo:inline>, which is the example table
      from the <fo:inline font-family="monospace">Company</fo:inline> database. The function that
      adds an index on element <fo:inline font-family="monospace">salary</fo:inline> can be expressed
      as <fo:inline font-family="monospace">mnesia:add_table_index(employee, salary)</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The indexing capabilities of <fo:inline font-family="monospace">Mnesia</fo:inline> are used with the
      following three functions, which retrieve and match records
      based on index entries in the database:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:inline font-style="italic">mnesia:index_read(Tab, SecondaryKey, AttributeName)
       -&gt; transaction abort | RecordList</fo:inline>
       avoids an exhaustive search of the entire table, by looking up
       <fo:inline font-family="monospace">SecondaryKey</fo:inline> in the index to find the primary keys.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:inline font-style="italic">mnesia:index_match_object(Pattern, AttributeName)
       -&gt; transaction abort | RecordList</fo:inline>
       avoids an exhaustive search of the entire table, by looking up
       the secondary key in the index to find the primary keys.
       The secondary key is found in field <fo:inline font-family="monospace">AttributeName</fo:inline> of
       <fo:inline font-family="monospace">Pattern</fo:inline>. The secondary key must be bound.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
      <fo:inline font-style="italic">mnesia:match_object(Pattern)
       -&gt; transaction abort | RecordList</fo:inline>
       uses indexes to avoid exhaustive search of the entire table.
       Unlike the previous functions, this function can use
       any index as long as the secondary key is bound.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These functions are further described and exemplified in
      <fo:inline font-style="italic">Pattern Matching</fo:inline>.
    </fo:block>
  <fo:block id="idp2906416" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.2 
      Distribution and Fault Tolerance</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Mnesia</fo:inline> is a distributed, fault-tolerant DBMS. Tables
      can be replicated on different Erlang nodes in various
      ways. The <fo:inline font-family="monospace">Mnesia</fo:inline> programmer does not need to state
      where the different tables reside, only the names of the
      different tables need to be specified in the program code. This
      is known as "location transparency" and is an important
      concept. In particular:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A program works regardless of the data
       location. It makes no difference whether the data
       resides on the local node or on a remote node.</fo:block>
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that the program runs slower if the data
         is located on a remote node.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The database can be reconfigured, and tables can be
       moved between nodes. These operations do not affect the user
       programs. 
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It has previously been shown that each table has a number of
      system attributes, such as <fo:inline font-family="monospace">index</fo:inline> and <fo:inline font-family="monospace">type</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Table attributes are specified when the table is created. For
      example, the following function creates a table with two
      RAM replicas:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      mnesia:create_table(foo,
                          [{ram_copies, [N1, N2]},
                           {attributes, record_info(fields, foo)}]).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tables can also have the following properties,
      where each attribute has a list of Erlang nodes as its value:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ram_copies</fo:inline>. The value of the node list is a list
          of Erlang nodes, and a RAM replica of the table resides on
          each node in the list.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that no disc operations are performed when
          a program executes write operations to these replicas.
          However, if permanent RAM replicas are required, the
          following alternatives are available:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The function
          <fo:inline font-style="italic">mnesia:dump_tables/1</fo:inline>
           can be used to dump RAM table replicas to disc.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The table replicas can be backed up, either from
           RAM, or from disc if dumped there with this function.
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">disc_copies</fo:inline>. The value of the attribute is a list
       of Erlang nodes, and a replica of the table resides both
       in RAM and on disc on each node in the list. Write operations
       addressed to the table address both the RAM and the disc
       copy of the table. 
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">disc_only_copies</fo:inline>. The value of the attribute is a
       list of Erlang nodes, and a replica of the table resides
       only as a disc copy on each node in the list. The major
       disadvantage of this type of table replica is the access
       speed. The major advantage is that the table does not occupy
       space in memory.
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In addition, table properties can be set and changed.
      For details, see
      <fo:inline font-style="italic">Define a Schema</fo:inline>.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are basically two reasons for using more than one table
      replica: fault tolerance and speed. Notice
      that table replication provides a solution to both of these
      system requirements.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If there are two active table replicas, all information is
      still available if one replica fails. This can be an
      important property in many applications. Furthermore, if a table
      replica exists at two specific nodes, applications that execute
      at either of these nodes can read data from the table without
      accessing the network. Network operations are considerably
      slower and consume more resources than local operations.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It can be advantageous to create table replicas for a
      distributed application that reads data often, but writes data
      seldom, to achieve fast read operations on the local
      node. The major disadvantage with replication is the increased
      time to write data. If a table has two replicas, every write
      operation must access both table replicas. Since one of these
      write operations must be a network operation, it is considerably
      more expensive to perform a write operation to a replicated
      table than to a non-replicated table.</fo:block>
  <fo:block id="idp2925616" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.3 
      Table Fragmentation</fo:block>
    

    <fo:block id="idp2926352" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Concept</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A concept of table fragmentation has been introduced
        to cope with large tables. The idea is to split a
        table into several manageable fragments. Each fragment is
        implemented as a first class <fo:inline font-family="monospace">Mnesia</fo:inline> table and can be
        replicated, have indexes, and so on, as any other table. But
        the tables cannot have <fo:inline font-family="monospace">local_content</fo:inline> or have the
        <fo:inline font-family="monospace">snmp</fo:inline> connection activated.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To be able to access a record in a fragmented
        table, <fo:inline font-family="monospace">Mnesia</fo:inline> must determine to which fragment the
        actual record belongs. This is done by module
        <fo:inline font-family="monospace">mnesia_frag</fo:inline>, which implements the <fo:inline font-family="monospace">mnesia_access</fo:inline>
        callback behavior. It is recommended to read the
        documentation about the function
        <fo:inline font-style="italic">mnesia:activity/4</fo:inline>
        to see how <fo:inline font-family="monospace">mnesia_frag</fo:inline>
        can be used as a <fo:inline font-family="monospace">mnesia_access</fo:inline> callback module.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">At each record access, <fo:inline font-family="monospace">mnesia_frag</fo:inline> first computes
        a hash value from the record key. Second, the name of the
        table fragment is determined from the hash value.
        Finally the actual table access is performed by the same
        functions as for non-fragmented tables. When the key is
        not known beforehand, all fragments are searched for
        matching records.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that in <fo:inline font-family="monospace">ordered_set</fo:inline> tables, the records
        are ordered per fragment, and the the order is undefined in
        results returned by <fo:inline font-family="monospace">select</fo:inline> and <fo:inline font-family="monospace">match_object</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following code illustrates how a <fo:inline font-family="monospace">Mnesia</fo:inline> table is
        converted to be a fragmented table and how more fragments
        are added later:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Eshell V4.7.3.3  (abort with ^G)
(a@sam)1&gt; mnesia:start().
ok
(a@sam)2&gt; mnesia:system_info(running_db_nodes).
[b@sam,c@sam,a@sam]
(a@sam)3&gt; Tab = dictionary.
dictionary
(a@sam)4&gt; mnesia:create_table(Tab, [{ram_copies, [a@sam, b@sam]}]).
{atomic,ok}
(a@sam)5&gt; Write = fun(Keys) -&gt; [mnesia:write({Tab,K,-K}) || K &lt;- Keys], ok end.
#Fun&lt;erl_eval&gt;
(a@sam)6&gt; mnesia:activity(sync_dirty, Write, [lists:seq(1, 256)], mnesia_frag).
ok
(a@sam)7&gt; mnesia:change_table_frag(Tab, {activate, []}).
{atomic,ok}
(a@sam)8&gt; mnesia:table_info(Tab, frag_properties).
[{base_table,dictionary},
 {foreign_key,undefined},
 {n_doubles,0},
 {n_fragments,1},
 {next_n_to_split,1},
 {node_pool,[a@sam,b@sam,c@sam]}]
(a@sam)9&gt; Info = fun(Item) -&gt; mnesia:table_info(Tab, Item) end.
#Fun&lt;erl_eval&gt;
(a@sam)10&gt; Dist = mnesia:activity(sync_dirty, Info, [frag_dist], mnesia_frag).
[{c@sam,0},{a@sam,1},{b@sam,1}]
(a@sam)11&gt; mnesia:change_table_frag(Tab, {add_frag, Dist}).
{atomic,ok}
(a@sam)12&gt; Dist2 = mnesia:activity(sync_dirty, Info, [frag_dist], mnesia_frag).
[{b@sam,1},{c@sam,1},{a@sam,2}]
(a@sam)13&gt; mnesia:change_table_frag(Tab, {add_frag, Dist2}).
{atomic,ok}
(a@sam)14&gt; Dist3 = mnesia:activity(sync_dirty, Info, [frag_dist], mnesia_frag).
[{a@sam,2},{b@sam,2},{c@sam,2}]
(a@sam)15&gt; mnesia:change_table_frag(Tab, {add_frag, Dist3}).
{atomic,ok}
(a@sam)16&gt; Read = fun(Key) -&gt; mnesia:read({Tab, Key}) end.
#Fun&lt;erl_eval&gt;
(a@sam)17&gt; mnesia:activity(transaction, Read, [12], mnesia_frag).
[{dictionary,12,-12}]
(a@sam)18&gt; mnesia:activity(sync_dirty, Info, [frag_size], mnesia_frag).
[{dictionary,64},
 {dictionary_frag2,64},
 {dictionary_frag3,64},
 {dictionary_frag4,64}]
(a@sam)19&gt; 
      </fo:block>
    

    <fo:block id="idp2939456" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Fragmentation Properties</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The table property <fo:inline font-family="monospace">frag_properties</fo:inline> can be read with
        the function
        <fo:inline font-style="italic">mnesia:table_info(Tab, frag_properties)</fo:inline>.
        The fragmentation properties are a list of tagged tuples with
        arity 2. By default the list is empty, but when it is
        non-empty it triggers <fo:inline font-family="monospace">Mnesia</fo:inline> to regard the table as
        fragmented. The fragmentation properties are as follows:</fo:block>
      <fo:block space-after="0.25em" space-before="0.25em">
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{n_fragments, Int}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">n_fragments</fo:inline> regulates how many fragments
            that the table currently has. This property can explicitly
            be set at table creation and later be changed with
            <fo:inline font-family="monospace">{add_frag, NodesOrDist}</fo:inline> or
            <fo:inline font-family="monospace">del_frag</fo:inline>. <fo:inline font-family="monospace">n_fragments</fo:inline> defaults to <fo:inline font-family="monospace">1</fo:inline>.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{node_pool, List}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The node pool contains a list of nodes and can
            explicitly be set at table creation and later be changed
            with <fo:inline font-family="monospace">{add_node, Node}</fo:inline> or <fo:inline font-family="monospace">{del_node, Node}</fo:inline>.
            At table creation <fo:inline font-family="monospace">Mnesia</fo:inline> tries to distribute
            the replicas of each fragment evenly over all the nodes in
            the node pool. Hopefully all nodes end up with the
            same number of replicas. <fo:inline font-family="monospace">node_pool</fo:inline> defaults to the
            return value from the function
            <fo:inline font-style="italic">mnesia:system_info(db_nodes)</fo:inline>.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{n_ram_copies, Int}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Regulates how many <fo:inline font-family="monospace">ram_copies</fo:inline> replicas
            that each fragment is to have. This property can
            explicitly be set at table creation. Defaults is
            <fo:inline font-family="monospace">0</fo:inline>, but if <fo:inline font-family="monospace">n_disc_copies</fo:inline> and
            <fo:inline font-family="monospace">n_disc_only_copies</fo:inline> also are <fo:inline font-family="monospace">0</fo:inline>,
            <fo:inline font-family="monospace">n_ram_copies</fo:inline> defaults to <fo:inline font-family="monospace">1</fo:inline>.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{n_disc_copies, Int}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Regulates how many <fo:inline font-family="monospace">disc_copies</fo:inline> replicas that
            each fragment is to have. This property can explicitly
            be set at table creation. Default is <fo:inline font-family="monospace">0</fo:inline>.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{n_disc_only_copies, Int}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Regulates how many <fo:inline font-family="monospace">disc_only_copies</fo:inline> replicas
            that each fragment is to have. This property can
            explicitly be set at table creation. Defaults is
            <fo:inline font-family="monospace">0</fo:inline>.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{foreign_key, ForeignKey}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ForeignKey</fo:inline> can either be the atom
            <fo:inline font-family="monospace">undefined</fo:inline> or the tuple <fo:inline font-family="monospace">{ForeignTab, Attr}</fo:inline>,
            where <fo:inline font-family="monospace">Attr</fo:inline> denotes an attribute that is to be
            interpreted as a key in another fragmented table named
            <fo:inline font-family="monospace">ForeignTab</fo:inline>. <fo:inline font-family="monospace">Mnesia</fo:inline> ensures that the number of
            fragments in this table and in the foreign table are
            always the same.</fo:block>
         <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When fragments are added or deleted, <fo:inline font-family="monospace">Mnesia</fo:inline>
            automatically propagates the operation to all
            fragmented tables that have a foreign key referring to this
            table. Instead of using the record key to determine which
            fragment to access, the value of field  <fo:inline font-family="monospace">Attr</fo:inline> is
            used. This feature makes it possible to colocate records
            automatically in different tables to the same node.
            <fo:inline font-family="monospace">foreign_key</fo:inline> defaults to
            <fo:inline font-family="monospace">undefined</fo:inline>. However, if the foreign key is set to
            something else, it causes the default values of the
            other fragmentation properties to be the same values as
            the actual fragmentation properties of the foreign table.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{hash_module, Atom}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Enables definition of an alternative hashing scheme.
            The module must implement the
            <fo:inline font-style="italic">mnesia_frag_hash</fo:inline>
            callback behavior. This property can explicitly be set at
            table creation. Default is <fo:inline font-family="monospace">mnesia_frag_hash</fo:inline>.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{hash_state, Term}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Enables a table-specific parameterization of a
            generic hash module. This property can explicitly be set
            at table creation. Default is <fo:inline font-family="monospace">undefined</fo:inline>.</fo:block>
          <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Eshell V4.7.3.3  (abort with ^G)
(a@sam)1&gt; mnesia:start().
ok
(a@sam)2&gt; PrimProps = [{n_fragments, 7}, {node_pool, [node()]}].
[{n_fragments,7},{node_pool,[a@sam]}]
(a@sam)3&gt; mnesia:create_table(prim_dict, 
                              [{frag_properties, PrimProps},
                               {attributes,[prim_key,prim_val]}]).
{atomic,ok}
(a@sam)4&gt; SecProps = [{foreign_key, {prim_dict, sec_val}}].
[{foreign_key,{prim_dict,sec_val}}]
(a@sam)5&gt; mnesia:create_table(sec_dict, 
                              [{frag_properties, SecProps},
(a@sam)5&gt;                      {attributes, [sec_key, sec_val]}]).
{atomic,ok}
(a@sam)6&gt; Write = fun(Rec) -&gt; mnesia:write(Rec) end.
#Fun&lt;erl_eval&gt;
(a@sam)7&gt; PrimKey = 11.
11
(a@sam)8&gt; SecKey = 42.
42
(a@sam)9&gt; mnesia:activity(sync_dirty, Write,
                          [{prim_dict, PrimKey, -11}], mnesia_frag).
ok
(a@sam)10&gt; mnesia:activity(sync_dirty, Write,
                           [{sec_dict, SecKey, PrimKey}], mnesia_frag).
ok
(a@sam)11&gt; mnesia:change_table_frag(prim_dict, {add_frag, [node()]}).
{atomic,ok}
(a@sam)12&gt; SecRead = fun(PrimKey, SecKey) -&gt;
               mnesia:read({sec_dict, PrimKey}, SecKey, read) end.
#Fun&lt;erl_eval&gt;
(a@sam)13&gt; mnesia:activity(transaction, SecRead,
                           [PrimKey, SecKey], mnesia_frag).
[{sec_dict,42,11}]
(a@sam)14&gt; Info = fun(Tab, Item) -&gt; mnesia:table_info(Tab, Item) end.
#Fun&lt;erl_eval&gt;
(a@sam)15&gt; mnesia:activity(sync_dirty, Info,
                           [prim_dict, frag_size], mnesia_frag).
[{prim_dict,0},
 {prim_dict_frag2,0},
 {prim_dict_frag3,0},
 {prim_dict_frag4,1},
 {prim_dict_frag5,0},
 {prim_dict_frag6,0},
 {prim_dict_frag7,0},
 {prim_dict_frag8,0}]
(a@sam)16&gt; mnesia:activity(sync_dirty, Info,
                           [sec_dict, frag_size], mnesia_frag).
[{sec_dict,0},
 {sec_dict_frag2,0},
 {sec_dict_frag3,0},
 {sec_dict_frag4,1},
 {sec_dict_frag5,0},
 {sec_dict_frag6,0},
 {sec_dict_frag7,0},
 {sec_dict_frag8,0}]
(a@sam)17&gt;
          </fo:block>
        </fo:block></fo:block-container>
      </fo:block>
    

    <fo:block id="idp2975648" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Management of Fragmented Tables</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function <fo:inline font-family="monospace">mnesia:change_table_frag(Tab, Change)</fo:inline>
        is intended to be used for reconfiguration of fragmented
        tables. Argument <fo:inline font-family="monospace">Change</fo:inline> is to have one of the
        following values:</fo:block>
      <fo:block space-after="0.25em" space-before="0.25em">
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{activate, FragProps}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Activates the fragmentation properties of an
            existing table. <fo:inline font-family="monospace">FragProps</fo:inline> is either to contain
            <fo:inline font-family="monospace">{node_pool, Nodes}</fo:inline> or be empty.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">deactivate</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Deactivates the fragmentation properties of a
            table. The number of fragments must be <fo:inline font-family="monospace">1</fo:inline>. No other
            table can refer to this table in its foreign key.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{add_frag, NodesOrDist}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Adds a fragment to a fragmented table. All
            records in one of the old fragments are rehashed and
            about half of them are moved to the new (last)
            fragment. All other fragmented tables, which refer to this
            table in their foreign key, automatically get a new
            fragment. Also, their records are dynamically
            rehashed in the same manner as for the main table.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Argument <fo:inline font-family="monospace">NodesOrDist</fo:inline> can either be a list of
            nodes or the result from the function
            <fo:inline font-style="italic">mnesia:table_info(Tab, frag_dist)</fo:inline>.
            Argument <fo:inline font-family="monospace">NodesOrDist</fo:inline> is
            assumed to be a sorted list with the best nodes to
            host new replicas first in the list. The new fragment
            gets the same number of replicas as the first
            fragment (see <fo:inline font-family="monospace">n_ram_copies</fo:inline>, <fo:inline font-family="monospace">n_disc_copies</fo:inline>,
            and <fo:inline font-family="monospace">n_disc_only_copies</fo:inline>). The <fo:inline font-family="monospace">NodesOrDist</fo:inline>
            list must at least contain one element for each
            replica that needs to be allocated.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">del_frag</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Deletes a fragment from a fragmented table. All
            records in the last fragment are  moved to one of the other
            fragments. All other fragmented tables, which refer to
            this table in their foreign key, automatically lose
            their last fragment. Also, their records are
            dynamically rehashed in the same manner as for the main
            table.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{add_node, Node}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Adds a node to <fo:inline font-family="monospace">node_pool</fo:inline>. The new
            node pool affects the list returned from the function
            <fo:inline font-style="italic">mnesia:table_info(Tab, frag_dist)</fo:inline>.
           </fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{del_node, Node}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Deletes a node from <fo:inline font-family="monospace">node_pool</fo:inline>. The new
            node pool affects the list returned from the function
            <fo:inline font-style="italic">mnesia:table_info(Tab, frag_dist)</fo:inline>.
          </fo:block>
        </fo:block></fo:block-container>
      </fo:block>
    

    <fo:block id="idp2996432" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Extensions of Existing Functions</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function
        <fo:inline font-style="italic">mnesia:create_table/2</fo:inline>
        creates a brand new fragmented table, by setting table
        property <fo:inline font-family="monospace">frag_properties</fo:inline> to some proper values.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function
        <fo:inline font-style="italic">mnesia:delete_table/1</fo:inline>
        deletes a fragmented table including all its
        fragments. There must however not exist any other fragmented
        tables that refer to this table in their foreign key.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function
        <fo:inline font-style="italic">mnesia:table_info/2</fo:inline>
        now understands item <fo:inline font-family="monospace">frag_properties</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the function <fo:inline font-family="monospace">mnesia:table_info/2</fo:inline> is started in
        the activity context of module <fo:inline font-family="monospace">mnesia_frag</fo:inline>,
        information of several new items can be obtained:</fo:block>
      <fo:block space-after="0.25em" space-before="0.25em">
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">base_table</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">The name of the fragmented table</fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">n_fragments</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">The actual number of fragments</fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">node_pool</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">The pool of nodes</fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">n_ram_copies</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"/></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">n_disc_copies</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"/></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">n_disc_only_copies</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The number of replicas with storage type <fo:inline font-family="monospace">ram_copies</fo:inline>,
            <fo:inline font-family="monospace">disc_copies</fo:inline>, and <fo:inline font-family="monospace">disc_only_copies</fo:inline>,
            respectively. The actual values are dynamically derived
            from the first fragment. The first fragment serves as a
            protype. When the actual values need to be computed
            (for example, when adding new fragments) they are
            determined by counting the number of each replica for
            each storage type. This means that when the functions
            <fo:inline font-style="italic">mnesia:add_table_copy/3</fo:inline>,

            <fo:inline font-style="italic">mnesia:del_table_copy/2</fo:inline>,
            and
            <fo:inline font-style="italic">mnesia:change_table_copy_type/2</fo:inline> are applied on the
            first fragment, it affects the settings on
            <fo:inline font-family="monospace">n_ram_copies</fo:inline>, <fo:inline font-family="monospace">n_disc_copies</fo:inline>, and
            <fo:inline font-family="monospace">n_disc_only_copies</fo:inline>.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">foreign_key</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The foreign key</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">foreigners</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All other tables that refer to this table in
            their foreign key</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">frag_names</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The names of all fragments</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">frag_dist</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A sorted list of <fo:inline font-family="monospace">{Node, Count}</fo:inline> tuples
            that are sorted in increasing <fo:inline font-family="monospace">Count</fo:inline> order.
            <fo:inline font-family="monospace">Count</fo:inline> is the total number of replicas that this
            fragmented table hosts on each <fo:inline font-family="monospace">Node</fo:inline>. The list
            always contains at least all nodes in
            <fo:inline font-family="monospace">node_pool</fo:inline>. Nodes that do not belong to
            <fo:inline font-family="monospace">node_pool</fo:inline> are put last in the list even if
            their <fo:inline font-family="monospace">Count</fo:inline> is lower.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">frag_size</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A list of <fo:inline font-family="monospace">{Name, Size}</fo:inline> tuples, where
            <fo:inline font-family="monospace">Name</fo:inline> is a fragment <fo:inline font-family="monospace">Name</fo:inline>, and <fo:inline font-family="monospace">Size</fo:inline> is
            how many records it contains</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">frag_memory</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A list of <fo:inline font-family="monospace">{Name, Memory}</fo:inline> tuples, where
            <fo:inline font-family="monospace">Name</fo:inline> is a fragment <fo:inline font-family="monospace">Name</fo:inline>, and <fo:inline font-family="monospace">Memory</fo:inline> is
            how much memory it occupies</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">size</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Total size of all fragments</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">memory</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Total memory of all fragments</fo:block>
        </fo:block></fo:block-container>
      </fo:block>
    

    <fo:block id="idp3034496" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Load Balancing</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are several algorithms for distributing records
        in a fragmented table evenly over a
        pool of nodes. No one is best, it depends on the
        application needs. The following examples of
        situations need some attention:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">permanent change of nodes</fo:inline>. When a new permanent
        <fo:inline font-family="monospace">db_node</fo:inline> is introduced or dropped, it can be time to
        change the pool of nodes and redistribute the replicas
        evenly over the new pool of nodes. It can also be time to
        add or delete a fragment before the replicas are redistributed.
       </fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">size/memory threshold</fo:inline>. When the total size or
        total memory of a fragmented table (or a single
        fragment) exceeds some application-specific threshold, it
        can be time to add a new fragment dynamically to
        obtain a better distribution of records.
       </fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">temporary node down</fo:inline>. When a node temporarily goes
        down, it can be time to compensate some fragments with new
        replicas to keep the desired level of
        redundancy. When the node comes up again, it can be time to
        remove the superfluous replica.
       </fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">overload threshold</fo:inline>. When the load on some node
        exceeds some application-specific threshold, it can be time to
        either add or move some fragment replicas to nodes with lower
        load. Take extra care if the table has a foreign
        key relation to some other table. To avoid severe
        performance penalties, the same redistribution must be
        performed for all the related tables.
       </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Use the function
        <fo:inline font-family="monospace">mnesia:change_table_frag/2</fo:inline> to add new fragments
        and apply the usual schema manipulation functions (such as
        <fo:inline font-style="italic">mnesia:add_table_copy/3</fo:inline>,
        <fo:inline font-style="italic">mnesia:del_table_copy/2</fo:inline>,
        and
        <fo:inline font-style="italic">mnesia:change_table_copy_type/2</fo:inline>)
        on each fragment to perform the actual redistribution.</fo:block>
    
  <fo:block id="idp3044720" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.4 
      Local Content Tables</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Replicated tables have the same content on all nodes where
      they are replicated. However, it is sometimes advantageous to
      have tables, but different content on different nodes.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If attribute <fo:inline font-family="monospace">{local_content, true}</fo:inline> is specified when
      you create the table, the table resides on the nodes where you
      specify the table to exist, but the write operations on the
      table are only performed on the local copy.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Furthermore, when the table is initialized at startup, the
      table is only initialized locally, and the table
      content is not copied from another node.</fo:block>
  <fo:block id="idp3047920" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.5 
      Disc-Less Nodes</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Mnesia</fo:inline> can be run on nodes that do not have a disc.
      Replicas of <fo:inline font-family="monospace">disc_copies</fo:inline> or <fo:inline font-family="monospace">disc_only_copies</fo:inline> are
      not possible on such nodes. This is especially troublesome for
      the <fo:inline font-family="monospace">schema</fo:inline> table, as <fo:inline font-family="monospace">Mnesia</fo:inline> needs the schema
      to initialize itself.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The schema table can, as other tables, reside on one or
      more nodes. The storage type of the schema table can either
      be <fo:inline font-family="monospace">disc_copies</fo:inline> or <fo:inline font-family="monospace">ram_copies</fo:inline>
      (but not <fo:inline font-family="monospace">disc_only_copies</fo:inline>). At
      startup, <fo:inline font-family="monospace">Mnesia</fo:inline> uses its schema to determine with which
      nodes it is to try to establish contact. If any
      other node is started already, the starting node
      merges its table definitions with the table definitions
      brought from the other nodes. This also applies to the
      definition of the schema table itself. Application
      parameter <fo:inline font-family="monospace">extra_db_nodes</fo:inline> contains a list of nodes that
      <fo:inline font-family="monospace">Mnesia</fo:inline> also is to establish contact with besides those
      found in the schema. Default is <fo:inline font-family="monospace">[]</fo:inline> (empty list).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Hence, when a disc-less node needs to find the schema
      definitions from a remote node on the network, this
      information must be supplied through application parameter
      <fo:inline font-family="monospace">-mnesia extra_db_nodes NodeList</fo:inline>. Without this
      configuration parameter set, <fo:inline font-family="monospace">Mnesia</fo:inline> starts as a single
      node system. Also, the function
      <fo:inline font-style="italic">mnesia:change_config/2</fo:inline>
      can be used to assign a value to <fo:inline font-family="monospace">extra_db_nodes</fo:inline> and force
      a connection after <fo:inline font-family="monospace">Mnesia</fo:inline> has been started, that is,
      <fo:inline font-family="monospace">mnesia:change_config(extra_db_nodes, NodeList)</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Application parameter <fo:inline font-family="monospace">schema_location</fo:inline> controls where
      <fo:inline font-family="monospace">Mnesia</fo:inline> searches for its schema. The parameter can be one
      of the following atoms:</fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">disc</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Mandatory disc. The schema is assumed to be located
          in the <fo:inline font-family="monospace">Mnesia</fo:inline> directory. If the schema cannot be found,
          <fo:inline font-family="monospace">Mnesia</fo:inline> refuses to start.</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ram</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Mandatory RAM. The schema resides in RAM
          only. At startup, a tiny new schema is generated. This
          default schema contains only the definition of the schema
          table and resides on the local node only. Since no other
          nodes are found in the default schema, configuration
          parameter <fo:inline font-family="monospace">extra_db_nodes</fo:inline> must be used to let the
          node share its table definitions with other nodes. (Parameter
          <fo:inline font-family="monospace">extra_db_nodes</fo:inline> can also be used on disc-full nodes.)</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">opt_disc</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Optional disc. The schema can reside on either disc or
          RAM. If the schema is found on disc, <fo:inline font-family="monospace">Mnesia</fo:inline> starts as
          a disc-full node (the storage type of the schema table is
          disc_copies). If no schema is found on disc, <fo:inline font-family="monospace">Mnesia</fo:inline>
          starts as a disc-less node (the storage type of the schema
          table is <fo:inline font-family="monospace">ram_copies</fo:inline>). The default for the
          application parameter is <fo:inline font-family="monospace">opt_disc</fo:inline>.</fo:block>
      </fo:block></fo:block-container>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-family="monospace">schema_location</fo:inline> is set to <fo:inline font-family="monospace">opt_disc</fo:inline>, the
      function
      <fo:inline font-style="italic">mnesia:change_table_copy_type/3</fo:inline>
      can be used to change the storage type of the schema.
      This is illustrated as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
        1&gt; mnesia:start().
        ok
        2&gt; mnesia:change_table_copy_type(schema, node(), disc_copies).
        {atomic, ok}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Assuming that the call to
      <fo:inline font-style="italic">mnesia:start/0</fo:inline> does not
      find any schema to read on the disc, <fo:inline font-family="monospace">Mnesia</fo:inline> starts
      as a disc-less node, and then change it to a node that
      use the disc to store the schema locally.</fo:block>
  <fo:block id="idp3074544" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.6 
      More about Schema Management</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Nodes can be added to and removed from a <fo:inline font-family="monospace">Mnesia</fo:inline> system.
      This can be done by adding a copy of the schema to those nodes.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The functions
      <fo:inline font-style="italic">mnesia:add_table_copy/3</fo:inline>
      and
      <fo:inline font-style="italic">mnesia:del_table_copy/2</fo:inline>
      can be used to add and delete
      replicas of the schema table. Adding a node to the list of
      nodes where the schema is replicated affects the following:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>It allows other tables to be replicated to this node.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>It causes <fo:inline font-family="monospace">Mnesia</fo:inline> to try to contact the node at
        startup of disc-full nodes.
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function call <fo:inline font-family="monospace">mnesia:del_table_copy(schema,
      mynode@host)</fo:inline> deletes node <fo:inline font-family="monospace">mynode@host</fo:inline> from the
      <fo:inline font-family="monospace">Mnesia</fo:inline> system. The call fails if <fo:inline font-family="monospace">Mnesia</fo:inline> is running
      on <fo:inline font-family="monospace">mynode@host</fo:inline>. The other <fo:inline font-family="monospace">Mnesia</fo:inline> nodes never try to
      connect to that node again. Notice that if there is a disc resident
      schema on node <fo:inline font-family="monospace">mynode@host</fo:inline>, the entire <fo:inline font-family="monospace">Mnesia</fo:inline>
      directory is to be deleted. This is done with the function
      <fo:inline font-style="italic">mnesia:delete_schema/1</fo:inline>.
      If <fo:inline font-family="monospace">Mnesia</fo:inline> is started again
      on node <fo:inline font-family="monospace">mynode@host</fo:inline> and the directory has not been
      cleared, the behavior of <fo:inline font-family="monospace">Mnesia</fo:inline> is undefined.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the storage type of the schema is <fo:inline font-family="monospace">ram_copies</fo:inline>,
      that is, a disc-less node, <fo:inline font-family="monospace">Mnesia</fo:inline>
      does not use the disc on that particular node. The disc
      use is enabled by changing the storage type of table
      <fo:inline font-family="monospace">schema</fo:inline> to <fo:inline font-family="monospace">disc_copies</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">New schemas are created explicitly with the function
      <fo:inline font-style="italic">mnesia:create_schema/1</fo:inline>
      or implicitly by starting
      <fo:inline font-family="monospace">Mnesia</fo:inline> without a disc resident schema. Whenever
      a table (including the schema table) is created, it is
      assigned its own unique cookie. The schema table is not created
      with the function
      <fo:inline font-style="italic">mnesia:create_table/2</fo:inline>
      as normal tables.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">At startup, <fo:inline font-family="monospace">Mnesia</fo:inline> connects different nodes to each other,
      then they exchange table definitions with each other, and the table
      definitions are merged. During the merge procedure, <fo:inline font-family="monospace">Mnesia</fo:inline>
      performs a sanity test to ensure that the table definitions are
      compatible with each other. If a table exists on several nodes,
      the cookie must be the same, otherwise <fo:inline font-family="monospace">Mnesia</fo:inline> shut down one
      of the nodes. This unfortunate situation occurs if a table
      has been created on two nodes independently of each other while
      they were disconnected. To solve this, one of the tables
      must be deleted (as the cookies differ, it is regarded to be two
      different tables even if they have the same name).</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Merging different versions of the schema table does not
      always require the cookies to be the same. If the storage
      type of the schema table is <fo:inline font-family="monospace">disc_copies</fo:inline>, the cookie is
      immutable, and all other <fo:inline font-family="monospace">db_nodes</fo:inline> must have the same
      cookie. When the schema is stored as type <fo:inline font-family="monospace">ram_copies</fo:inline>,
      its cookie can be replaced with a cookie from another node
      (<fo:inline font-family="monospace">ram_copies</fo:inline> or <fo:inline font-family="monospace">disc_copies</fo:inline>). The cookie replacement
      (during merge of the schema table definition) is performed each
      time a RAM node connects to another node.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Further, the following applies:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">mnesia:system_info(schema_location)</fo:inline>
        and
        <fo:inline font-style="italic">mnesia:system_info(extra_db_nodes)</fo:inline>
        can be used to determine the actual values of <fo:inline font-family="monospace">schema_location</fo:inline>
        and <fo:inline font-family="monospace">extra_db_nodes</fo:inline>, respectively.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">mnesia:system_info(use_dir)</fo:inline>
        can be used to determine whether <fo:inline font-family="monospace">Mnesia</fo:inline> is actually
        using the <fo:inline font-family="monospace">Mnesia</fo:inline> directory.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">use_dir</fo:inline> can be determined even before
        <fo:inline font-family="monospace">Mnesia</fo:inline> is started.
     </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function <fo:inline font-style="italic">mnesia:info/0</fo:inline>
      can now be used to print
      some system information even before <fo:inline font-family="monospace">Mnesia</fo:inline> is started.
      When <fo:inline font-family="monospace">Mnesia</fo:inline> is started, the function prints more
      information.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Transactions that update the definition of a table
      requires that <fo:inline font-family="monospace">Mnesia</fo:inline> is started on all nodes where the
      storage type of the schema is <fo:inline font-family="monospace">disc_copies</fo:inline>. All replicas of
      the table on these nodes must also be loaded. There are a
      few exceptions to these availability rules:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Tables can be created and new replicas can be added
        without starting all the disc-full nodes.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>New replicas can be added before all other replicas of
        the table have been loaded, provided that at least one other
        replica is active.
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp3110768" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.7 
      Mnesia Event Handling</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">System events and table events are the two event categories
      that <fo:inline font-family="monospace">Mnesia</fo:inline> generates in various situations.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A user process can subscribe on the events generated by
      <fo:inline font-family="monospace">Mnesia</fo:inline>. The following two functions are provided:</fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-style="italic">mnesia:subscribe(Event-Category)</fo:inline>
      </fo:block>
      <fo:block-container><fo:block start-indent="2em">Ensures that a copy of all events of type
        <fo:inline font-family="monospace">Event-Category</fo:inline> are sent to the calling process</fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-style="italic">mnesia:unsubscribe(Event-Category)</fo:inline>
      </fo:block>
      <fo:block-container><fo:block start-indent="2em">Removes the subscription on events of type
        <fo:inline font-family="monospace">Event-Category</fo:inline>
      </fo:block></fo:block-container>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Event-Category</fo:inline> can be either of the following:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The atom <fo:inline font-family="monospace">system</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The atom <fo:inline font-family="monospace">activity</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The tuple <fo:inline font-family="monospace">{table, Tab, simple}</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The tuple <fo:inline font-family="monospace">{table, Tab, detailed}</fo:inline>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The old event category <fo:inline font-family="monospace">{table, Tab}</fo:inline> is the same
      event category as <fo:inline font-family="monospace">{table, Tab, simple}</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The subscribe functions activate a subscription
      of events. The events are delivered as messages to the process
      evaluating the function
      <fo:inline font-style="italic">mnesia:subscribe/1</fo:inline>
      The syntax is as follows:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{mnesia_system_event, Event}</fo:inline> for system events
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{mnesia_activity_event, Event}</fo:inline> for activity events
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{mnesia_table_event, Event}</fo:inline> for table events
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The event types are described in the next sections.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All system events are subscribed by the <fo:inline font-family="monospace">Mnesia</fo:inline>
      <fo:inline font-family="monospace">gen_event</fo:inline> handler. The default <fo:inline font-family="monospace">gen_event</fo:inline> handler
      is <fo:inline font-family="monospace">mnesia_event</fo:inline>, but it can be changed by using
      application parameter <fo:inline font-family="monospace">event_module</fo:inline>. The value of this
      parameter must be the name of a module implementing a complete
      handler, as specified by the
      <fo:inline font-style="italic">gen_event</fo:inline> module
      in <fo:inline font-family="monospace">STDLIB</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">mnesia:system_info(subscribers)</fo:inline>
      and
      <fo:inline font-style="italic">mnesia:table_info(Tab, subscribers)</fo:inline>
      can be used to determine which processes are subscribed to
      various events.</fo:block>

    <fo:block id="idp3134928" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">System Events</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The system events are as follows:</fo:block>
      <fo:block space-after="0.25em" space-before="0.25em">
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{mnesia_up, Node}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">Mnesia is started on a node. <fo:inline font-family="monospace">Node</fo:inline> is the node
          name. By default this event is ignored.
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{mnesia_down, Node}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">Mnesia is stopped on a node. <fo:inline font-family="monospace">Node</fo:inline> is the node
          name. By default this event is ignored.
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{mnesia_checkpoint_activated, Checkpoint}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">A checkpoint with the name <fo:inline font-family="monospace">Checkpoint</fo:inline> is
          activated and the current node is involved in the
          checkpoint. Checkpoints can be activated explicitly with
          the function
          <fo:inline font-style="italic">mnesia:activate_checkpoint/1</fo:inline>
          or implicitly at
          backup, when adding table replicas, at internal transfer of
          data between nodes, and so on. By default this event is
          ignored.
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{mnesia_checkpoint_deactivated, Checkpoint}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">A checkpoint with the name <fo:inline font-family="monospace">Checkpoint</fo:inline> is
          deactivated and the current node is involved in the
          checkpoint. Checkpoints can be deactivated explicitly with
          the function
          <fo:inline font-style="italic">mnesia:deactivate/1</fo:inline>
          or implicitly when the last
          replica of a table (involved in the checkpoint) becomes
          unavailable, for example, at node-down. By default this
          event is ignored.
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{mnesia_overload, Details}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Mnesia</fo:inline> on the current node is
          overloaded and the subscriber is to take action.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A typical overload situation occurs when the
            applications perform more updates on disc resident
            tables than <fo:inline font-family="monospace">Mnesia</fo:inline> can handle. Ignoring
            this kind of overload can lead to a situation where
            the disc space is exhausted (regardless of the size of
            the tables stored on disc).</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each update is appended to the transaction log and
            occasionally (depending on how it
            is configured) dumped to the tables files. The
            table file storage is more compact than the transaction
            log storage, especially if the same record is updated
            repeatedly. If the thresholds for dumping the
            transaction log are reached before the previous
            dump is finished, an overload event is triggered.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Another typical overload situation is when the
            transaction manager cannot commit transactions at the
            same pace as the applications perform updates of
            disc resident tables. When this occurs, the message
            queue of the transaction manager continues to grow
            until the memory is exhausted or the load
            decreases.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The same problem can occur for dirty updates. The overload
            is detected locally on the current node, but its cause can
            be on another node. Application processes can cause high
            load if any table resides on another node (replicated
            or not). By default this event
            is reported to <fo:inline font-family="monospace">error_logger.</fo:inline></fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{inconsistent_database, Context, Node}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:inline font-family="monospace">Mnesia</fo:inline> regards the database as potential
          inconsistent and gives its applications a chance to
          recover from the inconsistency. For example, by installing a
          consistent backup as fallback and then restart the system.
          An alternative is to pick a <fo:inline font-family="monospace">MasterNode</fo:inline> from
          <fo:inline font-style="italic">mnesia:system_info(db_nodes)</fo:inline>
          and invoke
          <fo:inline font-style="italic">mnesia:set_master_node([MasterNode])</fo:inline>.
          By default an error is reported to <fo:inline font-family="monospace">error_logger</fo:inline>.
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{mnesia_fatal, Format, Args, BinaryCore}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Mnesia</fo:inline> detected a fatal error and
            terminates soon. The fault reason is explained in
            <fo:inline font-family="monospace">Format</fo:inline> and <fo:inline font-family="monospace">Args</fo:inline>, which can be given as input
            to <fo:inline font-family="monospace">io:format/2</fo:inline> or sent to <fo:inline font-family="monospace">error_logger</fo:inline>. By
            default it is sent to <fo:inline font-family="monospace">error_logger</fo:inline>.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">BinaryCore</fo:inline> is a binary containing a summary of the
            <fo:inline font-family="monospace">Mnesia</fo:inline> internal state at the time when the fatal
            error was detected. By default the binary is written to a
            unique filename on the current directory. On RAM nodes, the
            core is ignored.</fo:block>
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{mnesia_info, Format, Args}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:inline font-family="monospace">Mnesia</fo:inline> detected something that can be of
          interest when debugging the system. This is explained in
          <fo:inline font-family="monospace">Format</fo:inline> and <fo:inline font-family="monospace">Args</fo:inline>, which can appear as input
          to <fo:inline font-family="monospace">io:format/2</fo:inline> or sent to <fo:inline font-family="monospace">error_logger</fo:inline>. By
          default this event is printed with <fo:inline font-family="monospace">io:format/2</fo:inline>.
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{mnesia_error, Format, Args}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em"><fo:inline font-family="monospace">Mnesia</fo:inline> has detected an error. The fault reason is
          explained in <fo:inline font-family="monospace">Format</fo:inline> and <fo:inline font-family="monospace">Args</fo:inline>, which can be
          given as input to <fo:inline font-family="monospace">io:format/2</fo:inline> or sent to
          <fo:inline font-family="monospace">error_logger</fo:inline>. By default this event is reported to
          <fo:inline font-family="monospace">error_logger</fo:inline>.
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{mnesia_user, Event}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">An application started the function
          <fo:inline font-style="italic">mnesia:report_event(Event)</fo:inline>.
          <fo:inline font-family="monospace">Event</fo:inline> can be
          any Erlang data structure. When tracing a system of
          <fo:inline font-family="monospace">Mnesia</fo:inline> applications, it is useful to be able to
          interleave own events of <fo:inline font-family="monospace">Mnesia</fo:inline> with application-related
          events that give information about the application context.
          Whenever the application starts with a new and demanding
          <fo:inline font-family="monospace">Mnesia</fo:inline> activity, or enters a new and interesting
          phase in its execution, it can be a good idea to use
          <fo:inline font-family="monospace">mnesia:report_event/1</fo:inline>.
        </fo:block></fo:block-container>
      </fo:block>
    

    <fo:block id="idp3172048" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Activity Events</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Currently, there is only one type of activity event:</fo:block>
      <fo:block space-after="0.25em" space-before="0.25em">
       <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{complete, ActivityID}</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em">
         <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This event occurs when a transaction that caused a modification
           to the database is completed. It is useful for determining when
           a set of table events (see the next section), caused by a given
           activity, have been sent. Once this event is received, it is
           guaranteed that no further table events with the same
           <fo:inline font-family="monospace">ActivityID</fo:inline> will be received. Notice that this event can
           still be received even if no table events with a corresponding
           <fo:inline font-family="monospace">ActivityID</fo:inline> were received, depending on
           the tables to which the receiving process is subscribed.</fo:block>
         <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Dirty operations always contain only one update and thus no
           activity event is sent.</fo:block>
       </fo:block></fo:block-container>
     </fo:block>
    

    <fo:block id="idp3177312" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Table Events</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Table events are events related to table updates. There are
        two types of table events, simple and detailed.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-weight="bold">simple table events</fo:inline> are tuples like
        <fo:inline font-family="monospace">{Oper, Record, ActivityId}</fo:inline>, where:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Oper</fo:inline> is the operation performed.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Record</fo:inline> is the record involved in the operation.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ActivityId</fo:inline> is the identity of the transaction
          performing the operation.
        </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that the record name is the table name even when
        <fo:inline font-family="monospace">record_name</fo:inline> has another setting.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The table-related events that can occur are as follows:</fo:block>
      <fo:block space-after="0.25em" space-before="0.25em">
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{write, NewRecord, ActivityId}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">A new record has been written. <fo:inline font-family="monospace">NewRecord</fo:inline> contains
          the new record value.
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{delete_object, OldRecord, ActivityId}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">A record has possibly been deleted with
          <fo:inline font-style="italic">mnesia:delete_object/1</fo:inline>.
          <fo:inline font-family="monospace">OldRecord</fo:inline>
          contains the value of the old record, as stated as argument
          by the application. Notice that other records with the same
          key can remain in the table if it is of type <fo:inline font-family="monospace">bag</fo:inline>.
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{delete, {Tab, Key}, ActivityId}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">One or more records have possibly been deleted.
          All records with the key <fo:inline font-family="monospace">Key</fo:inline> in the table
          <fo:inline font-family="monospace">Tab</fo:inline> have been deleted.
        </fo:block></fo:block-container>
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-weight="bold">detailed table events</fo:inline> are tuples like
        <fo:inline font-family="monospace">{Oper, Table, Data, [OldRecs], ActivityId}</fo:inline>, where:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Oper</fo:inline> is the operation performed.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Table</fo:inline> is the table involved in the operation.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Data</fo:inline> is the record/OID written/deleted.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">OldRecs</fo:inline> is the contents before the operation.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ActivityId</fo:inline> is the identity of the transaction
          performing the operation.
        </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The table-related events that can occur are as follows:</fo:block>
      <fo:block space-after="0.25em" space-before="0.25em">
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{write, Table, NewRecord, [OldRecords], ActivityId}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">A new record has been written. <fo:inline font-family="monospace">NewRecord</fo:inline> contains
          the new record value and <fo:inline font-family="monospace">OldRecords</fo:inline> contains the
          records before the operation is performed. Notice that the
          new content depends on the table type.
        </fo:block></fo:block-container>
        <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{delete, Table, What, [OldRecords], ActivityId}</fo:inline></fo:block>
        <fo:block-container><fo:block start-indent="2em">Records have possibly been deleted. <fo:inline font-family="monospace">What</fo:inline> is
          either <fo:inline font-family="monospace">{Table, Key}</fo:inline> or a record
          <fo:inline font-family="monospace">{RecordName, Key, ...}</fo:inline> that was deleted. Notice
          that the new content depends on the table type.
        </fo:block></fo:block-container>
      </fo:block>
    
  <fo:block id="idp3203152" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.8 
      Debugging Mnesia Applications</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Debugging a <fo:inline font-family="monospace">Mnesia</fo:inline> application can be difficult
      for various reasons, primarily related
      to difficulties in understanding how the transaction
      and table load mechanisms work. Another source of
      confusion can be the semantics of nested transactions.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The debug level of <fo:inline font-family="monospace">Mnesia</fo:inline> is set by calling the function
     <fo:inline font-style="italic">mnesia:set_debug_level(Level)</fo:inline>,
      where <fo:inline font-family="monospace">Level</fo:inline>is one of the following:</fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">none</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">No trace outputs. This is the default.
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">verbose</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Activates tracing of important debug events. These
        events generate <fo:inline font-family="monospace">{mnesia_info, Format, Args}</fo:inline>
        system events. Processes can subscribe to these events with
        the function
        <fo:inline font-style="italic">mnesia:subscribe/1</fo:inline>.
        The events are always sent to the <fo:inline font-family="monospace">Mnesia</fo:inline> event handler.
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">debug</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Activates all events at the verbose level plus
          traces of all debug events. These debug events generate
          <fo:inline font-family="monospace">{mnesia_info, Format, Args}</fo:inline> system events. Processes
          can subscribe to these events with <fo:inline font-family="monospace">mnesia:subscribe/1</fo:inline>.
          The events are always sent to the <fo:inline font-family="monospace">Mnesia</fo:inline> event handler.
          On this debug level, the <fo:inline font-family="monospace"> Mnesia</fo:inline> event handler starts
          subscribing to updates in the schema table.
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">trace</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">Activates all events at the debug level. On this
          level, the <fo:inline font-family="monospace">Mnesia</fo:inline> event handler starts subscribing to
          updates on all <fo:inline font-family="monospace">Mnesia</fo:inline> tables. This level is intended
          only for debugging small toy systems, as many large
          events can be generated.
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">false</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">An alias for none.
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">true</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">An alias for debug.
      </fo:block></fo:block-container>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The debug level of <fo:inline font-family="monospace">Mnesia</fo:inline> itself is also an application
      parameter, making it possible to start an Erlang system
      to turn on <fo:inline font-family="monospace">Mnesia</fo:inline> debug in the initial
      startup phase by using the following code:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      % erl -mnesia debug verbose</fo:block>
  <fo:block id="idp3220944" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.9 
      Concurrent Processes in Mnesia</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Programming concurrent Erlang systems is the subject of
      a separate book. However, it is worthwhile to draw attention to
      the following features, which permit concurrent processes to
      exist in a <fo:inline font-family="monospace">Mnesia</fo:inline> system:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A group of functions or processes can be called within a
      transaction. A transaction can include statements that read,
      write, or delete data from the DBMS. Many such
      transactions can run concurrently, and the programmer does not
      need to explicitly synchronize the processes that manipulate
      the data.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All programs accessing the database through the
      transaction system can be written as if they had sole access to
      the data. This is a desirable property, as all
      synchronization is taken care of by the transaction handler. If
      a program reads or writes data, the system ensures that no other
      program tries to manipulate the same data at the same time.</fo:block>
    </fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Tables can be moved or deleted, and the layout of a table
      can be reconfigured in various ways. An important aspect of
      the implementation of these functions is that user programs
      can continue to use a table while it
      is being reconfigured. For example, it is possible to move a
      table and perform write operations to the table at the same
      time. This is important for many applications that require
      continuously available services. For more information, see
      <fo:inline font-style="italic">Transactions and Other Access Contexts</fo:inline>.
    </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp3227200" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.10 
      Prototyping</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If and when you would like to start and manipulate
      <fo:inline font-family="monospace">Mnesia</fo:inline>, it is often easier to write the definitions and
      data into an ordinary text file.
      Initially, no tables and no data exist, or which
      tables are required. At the initial stages of prototyping, it
      is prudent to write all data into one file, process that
      file, and have the data in the file inserted into the database.
      <fo:inline font-family="monospace">Mnesia</fo:inline> can be initialized with data read from a text file.
      The following two functions can be used to work with text
      files.</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:inline font-style="italic">mnesia:load_textfile(Filename)</fo:inline>
        loads a series of local table definitions and data found in the
        file into <fo:inline font-family="monospace">Mnesia</fo:inline>. This function also starts <fo:inline font-family="monospace">Mnesia</fo:inline>
        and possibly creates a new schema. The function operates
        on the local node only.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:inline font-style="italic">mnesia:dump_to_textfile(Filename)</fo:inline>
        dumps all local
        tables of a <fo:inline font-family="monospace">Mnesia</fo:inline> system into a text file, which
        can be edited (with a normal text editor) and later reloaded.
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These functions are much slower than the ordinary store and
      load functions of <fo:inline font-family="monospace">Mnesia</fo:inline>. However, this is mainly intended
      for minor experiments and initial prototyping. The major
      advantage of these functions is that they are easy to use.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The format of the text file is as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      {tables, [{Typename, [Options]},
      {Typename2 ......}]}.
      
      {Typename, Attribute1, Attribute2 ....}.
      {Typename, Attribute1, Attribute2 ....}.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Options</fo:inline> is a list of <fo:inline font-family="monospace">{Key,Value}</fo:inline> tuples conforming
      to the options that you can give to
      <fo:inline font-style="italic">mnesia:create_table/2</fo:inline>.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For example, to start playing with a small database for healthy
      foods, enter the following data into file <fo:inline font-family="monospace">FRUITS</fo:inline>:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

{tables,
 [{fruit, [{attributes, [name, color, taste]}]},
  {vegetable, [{attributes, [name, color, taste, price]}]}]}.


{fruit, orange, orange, sweet}.
{fruit, apple, green, sweet}.
{vegetable, carrot, orange, carrotish, 2.55}.
{vegetable, potato, yellow, none, 0.45}.</fo:block>    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following session with the Erlang shell shows how
      to load the <fo:inline font-family="monospace">FRUITS</fo:inline> database:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      % erl
      Erlang (BEAM) emulator version 4.9
 
      Eshell V4.9  (abort with ^G)
      1&gt; mnesia:load_textfile("FRUITS").
      New table fruit
      New table vegetable
      {atomic,ok}
      2&gt; mnesia:info().
      ---&gt; Processes holding locks &lt;--- 
      ---&gt; Processes waiting for locks &lt;--- 
      ---&gt; Pending (remote) transactions &lt;--- 
      ---&gt; Active (local) transactions &lt;---
      ---&gt; Uncertain transactions &lt;--- 
      ---&gt; Active tables &lt;--- 
      vegetable      : with 2 records occuping 299 words of mem 
      fruit          : with 2 records occuping 291 words of mem 
      schema         : with 3 records occuping 401 words of mem 
      ===&gt; System info in version "1.1", debug level = none &lt;===
      opt_disc. Directory "/var/tmp/Mnesia.nonode@nohost" is used.
      use fallback at restart = false
      running db nodes = [nonode@nohost]
      stopped db nodes = [] 
      remote           = []
      ram_copies       = [fruit,vegetable]
      disc_copies      = [schema]
      disc_only_copies = []
      [{nonode@nohost,disc_copies}] = [schema]
      [{nonode@nohost,ram_copies}] = [fruit,vegetable]
      3 transactions committed, 0 aborted, 0 restarted, 2 logged to disc
      0 held locks, 0 in queue; 0 local transactions, 0 remote
      0 transactions waits for other nodes: []
      ok
      3&gt; 
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It can be seen that the DBMS was initiated from a
      regular text file.</fo:block>
  <fo:block id="idp3244064" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.6.11 
      Object-Based Programming with Mnesia</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Company</fo:inline> database, introduced in
      <fo:inline font-style="italic">Getting Started</fo:inline>,
      has three tables that store records (<fo:inline font-family="monospace">employee</fo:inline>,
      <fo:inline font-family="monospace">dept</fo:inline>, <fo:inline font-family="monospace">project</fo:inline>), and three tables that store
      relationships (<fo:inline font-family="monospace">manager</fo:inline>, <fo:inline font-family="monospace">at_dep</fo:inline>, <fo:inline font-family="monospace">in_proj</fo:inline>).
      This is a normalized data model, which has some advantages over
      a non-normalized data model.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is more efficient to do a
      generalized search in a normalized database. Some operations are
      also easier to perform on a normalized data model. For example,
      one project can easily be removed, as the following example
      illustrates:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

remove_proj(ProjName) -&gt;
    F = fun() -&gt;
                Ip = qlc:e(qlc:q([X || X &lt;- mnesia:table(in_proj),
				       X#in_proj.proj_name == ProjName]
				)),
                mnesia:delete({project, ProjName}),
                del_in_projs(Ip)
        end,
    mnesia:transaction(F).

del_in_projs([Ip|Tail]) -&gt;
    mnesia:delete_object(Ip),
    del_in_projs(Tail);
del_in_projs([]) -&gt;
    done.</fo:block>    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In reality, data models are seldom fully normalized. A
      realistic alternative to a normalized database model would be
      a data model that is not even in first normal form. <fo:inline font-family="monospace">Mnesia</fo:inline>
      is suitable for applications such as telecommunications,
      because it is easy to organize data in a flexible manner. A
      <fo:inline font-family="monospace">Mnesia</fo:inline> database is always organized as a set of tables.
      Each table is filled with rows, objects, and records.
      What sets <fo:inline font-family="monospace">Mnesia</fo:inline> apart is that individual fields in
      a record can contain any type of
      compound data structures. An individual field in a record can
      contain lists, tuples, functions, and even record code.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Many telecommunications applications have unique requirements
      on lookup times for certain types of records. If the <fo:inline font-family="monospace">Company</fo:inline>
      database had been a part of a telecommunications system, it
      could be to minimize the lookup time of an employee
      <fo:inline font-weight="bold">together</fo:inline> with a list of the projects the employee is
      working on. If this is the case, a drastically different data model
      without direct relationships can be chosen. You would then have
      only the records themselves, and different records could contain
      either direct references to other records, or contain other
      records that are not part of the <fo:inline font-family="monospace">Mnesia</fo:inline> schema.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following record definitions can be created:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

-record(employee, {emp_no,
		   name,
		   salary,
		   sex,
		   phone,
		   room_no,
		   dept,
		   projects,
		   manager}).
		   

-record(dept, {id, 
               name}).

-record(project, {name,
                  number,
                  location}).
</fo:block>    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A record that describes an employee can look as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
        Me = #employee{emp_no= 104732,
        name = klacke,
        salary = 7,
        sex = male,
        phone = 99586,
        room_no = {221, 015},
        dept = 'B/SFR',
        projects = [erlang, mnesia, otp],
        manager = 114872},</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This model has only three different tables, and the employee
      records contain references to other records. The record has the
      following references:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">'B/SFR'</fo:inline> refers to a <fo:inline font-family="monospace">dept</fo:inline> record.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">[erlang, mnesia, otp]</fo:inline> is a list of three
       direct references to three different <fo:inline font-family="monospace">projects</fo:inline> records.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">114872</fo:inline> refers to another employee record.
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Mnesia</fo:inline> record identifiers (<fo:inline font-family="monospace">{Tab, Key}</fo:inline>) can
      also be used as references. In this case, attribute <fo:inline font-family="monospace">dept</fo:inline>
      would be set to value <fo:inline font-family="monospace">{dept, 'B/SFR'}</fo:inline> instead of
      <fo:inline font-family="monospace">'B/SFR'</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">With this data model, some operations execute considerably
      faster than they do with the normalized data model in the
      <fo:inline font-family="monospace">Company</fo:inline> database. However, some other operations
      become much more complicated. In particular, it becomes more
      difficult to ensure that records do not contain dangling
      pointers to other non-existent, or deleted, records.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following code exemplifies a search with a non-normalized
      data model. To find all employees at department <fo:inline font-family="monospace">Dep</fo:inline> with
      a salary higher than <fo:inline font-family="monospace">Salary</fo:inline>, use the following code:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

get_emps(Salary, Dep) -&gt;
    Q = qlc:q( 
          [E || E &lt;- mnesia:table(employee),
                E#employee.salary &gt; Salary,
                E#employee.dept == Dep]
	 ),
    F = fun() -&gt; qlc:e(Q) end,
    transaction(F).</fo:block>    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This code is easier to write and to understand, and it
      also executes much faster.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is easy to show examples of code that executes faster if
      a non-normalized data model is used, instead of a normalized
      model. The main reason is that fewer tables are required.
      Therefore, data from different tables can more easily be
      combined in join operations. In the previous example, the
      function <fo:inline font-family="monospace">get_emps/2</fo:inline> is transformed from a join operation
      into a simple query, which consists of a selection and a
      projection on one single table.</fo:block>
  <fo:block id="idp3275280" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.7  Mnesia System Information</fo:marker>1.7  Mnesia System Information</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following topics are included:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Database configuration data</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Core dumps</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Dumping tables</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Checkpoints</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Startup files, log file, and data files</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Loading tables at startup</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Recovery from communication failure</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Recovery of transactions</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Backup, restore, fallback, and disaster recovery</fo:block></fo:list-item-body></fo:list-item>
  </fo:list-block><fo:block id="idp3284176" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.7.1 
      Database Configuration Data</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following two functions can be used to retrieve system
      information. For details, see the Reference Manual.</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">mnesia:table_info(Tab, Key)
       -&gt; Info | exit({aborted,Reason})</fo:inline>
       returns information about one table, for example,
       the current size of the table and on which nodes it resides.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">mnesia:system_info(Key)
       -&gt; Info | exit({aborted, Reason})</fo:inline>
       returns information about the <fo:inline font-family="monospace">Mnesia</fo:inline> system,
       for example, transaction statistics, <fo:inline font-family="monospace">db_nodes</fo:inline>, and
       configuration parameters.
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp3289552" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.7.2 
      Core Dumps</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Mnesia</fo:inline> malfunctions, system information is dumped to
      file <fo:inline font-family="monospace">MnesiaCore.Node.When</fo:inline>. The type of system
      information contained in this file can also be generated with
      the function <fo:inline font-family="monospace">mnesia_lib:coredump()</fo:inline>. If a <fo:inline font-family="monospace">Mnesia</fo:inline>
      system behaves strangely, it is recommended that a <fo:inline font-family="monospace">Mnesia</fo:inline>
      core dump file is included in the bug report.</fo:block>
  <fo:block id="idp3293360" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.7.3 
      Dumping Tables</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tables of type <fo:inline font-family="monospace">ram_copies</fo:inline> are by definition stored in
      memory only. However, these tables can be dumped to
      disc, either at regular intervals or before the system is
      shut down. The function
      <fo:inline font-style="italic">mnesia:dump_tables(TabList)</fo:inline>
      dumps all replicas of a set of RAM tables to disc. The tables can be
      accessed while being dumped to disc. To dump the tables to disc,
      all replicas must have the storage type <fo:inline font-family="monospace">ram_copies</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The table content is placed in a <fo:inline font-family="monospace">.DCD</fo:inline> file on the
      disc. When the <fo:inline font-family="monospace">Mnesia</fo:inline> system is started, the RAM table
      is initially loaded with data from its <fo:inline font-family="monospace">.DCD</fo:inline> file.</fo:block>
  <fo:block id="idp3299136" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.7.4 
      Checkpoints</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A checkpoint is a transaction consistent state that spans over
      one or more tables. When a checkpoint is activated, the system
      remembers the current content of the set of tables. The
      checkpoint retains a transaction consistent state of the tables,
      allowing the tables to be read and updated while the checkpoint
      is active. A checkpoint is typically used to
      back up tables to external media, but they are also used
      internally in <fo:inline font-family="monospace">Mnesia</fo:inline> for other purposes. Each checkpoint
      is independent and a table can be involved in several checkpoints
      simultaneously.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each table retains its old contents in a checkpoint retainer.
      For performance critical applications, it can be important
      to realize the processing overhead associated with checkpoints.
      In a worst case scenario, the checkpoint retainer consumes
      more memory than the table itself. Also, each update becomes
      slightly slower on those nodes where checkpoint
      retainers are attached to the tables.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For each table, it is possible to choose if there is to be one
      checkpoint retainer attached to all replicas of the table, or if
      it is enough to have only one checkpoint retainer attached to a
      single replica. With a single checkpoint retainer per table, the
      checkpoint consumes less memory, but it is vulnerable
      to node crashes. With several redundant checkpoint retainers, the
      checkpoint survives as long as there is at least one active
      checkpoint retainer attached to each table.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Checkpoints can be explicitly deactivated with the function
      <fo:inline font-style="italic">mnesia:deactivate_checkpoint(Name)</fo:inline>,
      where <fo:inline font-family="monospace">Name</fo:inline> is
      the name of an active checkpoint. This function returns
      <fo:inline font-family="monospace">ok</fo:inline> if successful or <fo:inline font-family="monospace">{error, Reason}</fo:inline> if there is
      an error. All tables in a checkpoint must be attached to at
      least one checkpoint retainer. The checkpoint is automatically
      deactivated by <fo:inline font-family="monospace">Mnesia</fo:inline>, when any table lacks a checkpoint
      retainer. This can occur when a node goes down or when a
      replica is deleted. Use arguments <fo:inline font-family="monospace">min</fo:inline> and
      <fo:inline font-family="monospace">max</fo:inline> (described in the following list) to control the
      degree of checkpoint retainer redundancy.</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Checkpoints are activated with the function
      <fo:inline font-style="italic">mnesia:activate_checkpoint(Args)</fo:inline>,
      where <fo:inline font-family="monospace">Args</fo:inline> is a list of the following tuples:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{name,Name}</fo:inline>, where <fo:inline font-family="monospace">Name</fo:inline> specifies a temporary
       name of the checkpoint. The name can be reused when the checkpoint
       has been deactivated. If no name is specified, a name is
       generated automatically.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{max,MaxTabs}</fo:inline>, where <fo:inline font-family="monospace">MaxTabs</fo:inline> is a list of
       tables that are to be included in the checkpoint. Default is
       <fo:inline font-family="monospace">[]</fo:inline> (empty list). For these tables, the redundancy
       is maximized. The old content of the table is
       retained in the checkpoint retainer when the main table is
       updated by the applications. The checkpoint is more fault
       tolerant if the tables have several replicas. When new
       replicas are added by the schema manipulation function
       <fo:inline font-style="italic">mnesia:add_table_copy/3</fo:inline>
       it also attaches a local checkpoint retainer.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{min,MinTabs}</fo:inline>, where <fo:inline font-family="monospace">MinTabs</fo:inline> is a list of
       tables that are to be included in the checkpoint. Default
       is <fo:inline font-family="monospace">[]</fo:inline>. For these tables, the redundancy is minimized,
       and there is to be single checkpoint retainer per table,
       preferably at the local node.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{allow_remote,Bool}</fo:inline>, where <fo:inline font-family="monospace">false</fo:inline> means that
       all checkpoint retainers must be local. If a table does not
       reside locally, the checkpoint cannot be activated. <fo:inline font-family="monospace">true</fo:inline>
       allows checkpoint retainers to be allocated on any node.
       Default is <fo:inline font-family="monospace">true</fo:inline>.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{ram_overrides_dump,Bool}</fo:inline>. This argument only
       applies to tables of type <fo:inline font-family="monospace">ram_copies</fo:inline>. <fo:inline font-family="monospace">Bool</fo:inline>
       specifies if the table state in RAM is to override the table
       state on disc. <fo:inline font-family="monospace">true</fo:inline> means that the latest committed
       records in RAM are included in the checkpoint retainer. These
       are the records that the application accesses. <fo:inline font-family="monospace">false</fo:inline>
       means that the records on the disc <fo:inline font-family="monospace">.DAT</fo:inline> file are
       included in the checkpoint retainer. These records are
       loaded on startup. Default is <fo:inline font-family="monospace">false</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function
      <fo:inline font-style="italic">mnesia:activate_checkpoint(Args)</fo:inline>
      returns one of the following values:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{ok, Name, Nodes}</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{error, Reason}</fo:inline></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Name</fo:inline> is the checkpoint name. <fo:inline font-family="monospace">Nodes</fo:inline> are
      the nodes where the checkpoint is known.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A list of active checkpoints can be obtained with the following
      functions:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">mnesia:system_info(checkpoints)</fo:inline>
       returns all active checkpoints on the current node.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-style="italic">mnesia:table_info(Tab, checkpoints)</fo:inline>
       returns active checkpoints on a specific table.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  <fo:block id="idp3330496" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.7.5 
      Startup Files, Log File, and Data Files</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section describes the internal files that are created
      and maintained by the <fo:inline font-family="monospace">Mnesia</fo:inline> system. In particular,
      the workings of the <fo:inline font-family="monospace">Mnesia</fo:inline> log are described.</fo:block>

    <fo:block id="idp3332688" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Startup Files</fo:block>
      
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">Start Mnesia</fo:inline>
    states the following prerequisites
    for starting <fo:inline font-family="monospace">Mnesia</fo:inline>:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>An Erlang session must be started and a <fo:inline font-family="monospace">Mnesia</fo:inline>
       directory must be specified for the database.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A database schema must be initiated, using the function
       <fo:inline font-style="italic">mnesia:create_schema/1</fo:inline>.
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following example shows how these tasks are performed:</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 1:</fo:inline> Start an Erlang session and specify a
      <fo:inline font-family="monospace">Mnesia</fo:inline> directory for the database:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% <fo:inline font-weight="bold">erl -sname klacke -mnesia dir '"/ldisc/scratch/klacke"'</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
Erlang (BEAM) emulator version 4.9
 
Eshell V4.9  (abort with ^G)
(klacke@gin)1&gt; <fo:inline font-weight="bold">mnesia:create_schema([node()]).</fo:inline>
ok
(klacke@gin)2&gt; 
<fo:inline font-weight="bold">^Z</fo:inline>
Suspended</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 2:</fo:inline> You can inspect the <fo:inline font-family="monospace">Mnesia</fo:inline> directory
      to see what files have been created:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% <fo:inline font-weight="bold">ls -l /ldisc/scratch/klacke</fo:inline>
-rw-rw-r--   1 klacke   staff       247 Aug 12 15:06 FALLBACK.BUP</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The response shows that the file <fo:inline font-family="monospace">FALLBACK.BUP</fo:inline> has
      been created. This is called a backup file, and it contains
      an initial schema. If more than one node in the function
      <fo:inline font-style="italic">mnesia:create_schema/1</fo:inline>
      had been specified, identical
      backup files would have been created on all nodes.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 3:</fo:inline> Start <fo:inline font-family="monospace">Mnesia</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
(klacke@gin)3&gt;<fo:inline font-weight="bold">mnesia:start( ).</fo:inline>
ok</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 4:</fo:inline> You can see the following listing in
      the <fo:inline font-family="monospace">Mnesia</fo:inline> directory:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-rw-rw-r--   1 klacke   staff         86 May 26 19:03 LATEST.LOG
-rw-rw-r--   1 klacke   staff      34507 May 26 19:03 schema.DAT</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The schema in the backup file <fo:inline font-family="monospace">FALLBACK.BUP</fo:inline> has been
      used to generate the file <fo:inline font-family="monospace">schema.DAT</fo:inline>. Since there are
      no other disc resident tables than the schema, no other data
      files were created. The file <fo:inline font-family="monospace">FALLBACK.BUP</fo:inline> was removed
      after the successful "restoration". You also see some files
      that are for internal use by <fo:inline font-family="monospace">Mnesia</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 5:</fo:inline> Create a table:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
(klacke@gin)4&gt; <fo:inline font-weight="bold">mnesia:create_table(foo,[{disc_copies, [node()]}]).</fo:inline>
{atomic,ok}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 6:</fo:inline> You can see the following listing in
      the <fo:inline font-family="monospace">Mnesia</fo:inline> directory:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% <fo:inline font-weight="bold">ls -l /ldisc/scratch/klacke</fo:inline>
-rw-rw-r-- 1 klacke staff    86 May 26 19:07 LATEST.LOG
-rw-rw-r-- 1 klacke staff    94 May 26 19:07 foo.DCD
-rw-rw-r-- 1 klacke staff  6679 May 26 19:07 schema.DAT</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file <fo:inline font-family="monospace">foo.DCD</fo:inline> has been created. This file will
      eventually store all data that is written into the
      <fo:inline font-family="monospace">foo</fo:inline> table.</fo:block>
    

    <fo:block id="idp3357664" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Log File</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When starting <fo:inline font-family="monospace">Mnesia</fo:inline>, a <fo:inline font-family="monospace">.LOG</fo:inline> file called
        <fo:inline font-family="monospace">LATEST.LOG</fo:inline> is created
        and placed in the database directory. This file is used by
        <fo:inline font-family="monospace">Mnesia</fo:inline> to log disc-based transactions. This includes all
        transactions that write at least one record in a table that is
        of storage type <fo:inline font-family="monospace">disc_copies</fo:inline> or <fo:inline font-family="monospace">disc_only_copies</fo:inline>.
        The file also includes all operations that
        manipulate the schema itself, such as creating new tables.
        The log format can vary with different implementations of
        <fo:inline font-family="monospace">Mnesia</fo:inline>. The <fo:inline font-family="monospace">Mnesia</fo:inline> log is currently implemented
        in the standard library module
        <fo:inline font-style="italic">disk_log</fo:inline> in
        <fo:inline font-family="monospace">Kernel</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The log file grows continuously and must be dumped at
        regular intervals. "Dumping the log file" means that <fo:inline font-family="monospace">Mnesia</fo:inline>
        performs all the operations listed in the log and place the
        records in the corresponding <fo:inline font-family="monospace">.DAT</fo:inline>, <fo:inline font-family="monospace">.DCD</fo:inline>, and
        <fo:inline font-family="monospace">.DCL</fo:inline> data files. For example, if the operation "write
        record <fo:inline font-family="monospace">{foo, 4, elvis,  6}</fo:inline>" is listed in the log,
        <fo:inline font-family="monospace">Mnesia</fo:inline> inserts the operation into the file
        <fo:inline font-family="monospace">foo.DCL</fo:inline>. Later, when <fo:inline font-family="monospace">Mnesia</fo:inline> thinks that the
        <fo:inline font-family="monospace">.DCL</fo:inline> file is too large, the data is moved to the
        <fo:inline font-family="monospace">.DCD</fo:inline> file. The dumping operation can be time consuming
        if the log is large. Notice that the <fo:inline font-family="monospace">Mnesia</fo:inline> system
        continues to operate during log dumps.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By default <fo:inline font-family="monospace">Mnesia</fo:inline> either dumps the log whenever
        100 records have
        been written in the log or when three minutes have passed.
        This is controlled by the two application parameters
        <fo:inline font-family="monospace">-mnesia dump_log_write_threshold WriteOperations</fo:inline> and
        <fo:inline font-family="monospace">-mnesia dump_log_time_threshold MilliSecs</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Before the log is dumped, the file <fo:inline font-family="monospace">LATEST.LOG</fo:inline> is
        renamed to <fo:inline font-family="monospace">PREVIOUS.LOG</fo:inline>, and a new <fo:inline font-family="monospace">LATEST.LOG</fo:inline> file
        is created. Once the log has been successfully dumped, the file
        <fo:inline font-family="monospace">PREVIOUS.LOG</fo:inline> is deleted.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The log is also dumped at startup and whenever a schema
        operation is performed.</fo:block>
    

    <fo:block id="idp3374880" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Data Files</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The directory listing also contains one <fo:inline font-family="monospace">.DAT</fo:inline> file,
        which contains the schema itself, contained in the
        <fo:inline font-family="monospace">schema.DAT</fo:inline> file. The <fo:inline font-family="monospace">DAT</fo:inline> files are indexed
        files, and it is efficient to insert and search for records
        in these files with a specific key. The <fo:inline font-family="monospace">.DAT</fo:inline> files
        are used for the schema and for <fo:inline font-family="monospace">disc_only_copies</fo:inline>
        tables. The <fo:inline font-family="monospace">Mnesia</fo:inline> data files are currently implemented
        in the standard library module
        <fo:inline font-style="italic">dets</fo:inline> in
        <fo:inline font-family="monospace">STDLIB</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All operations that can be performed on <fo:inline font-family="monospace">dets</fo:inline> files
        can also be performed on the <fo:inline font-family="monospace">Mnesia</fo:inline> data files. For
        example, <fo:inline font-family="monospace">dets</fo:inline> contains the function
        <fo:inline font-family="monospace">dets:traverse/2</fo:inline>, which can be used to view the
        contents of a <fo:inline font-family="monospace">Mnesia</fo:inline> <fo:inline font-family="monospace">DAT</fo:inline> file. However, this
        can only be done when <fo:inline font-family="monospace">Mnesia</fo:inline> is not running. So, to
        view the schema file, do as follows;</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{ok, N} = dets:open_file(schema, [{file, "./schema.DAT"},{repair,false}, 
{keypos, 2}]),
F = fun(X) -&gt; io:format("~p~n", [X]), continue end,
dets:traverse(N, F),
dets:close(N).</fo:block>
      <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">DAT</fo:inline> files must always be opened with option
          <fo:inline font-family="monospace">{repair, false}</fo:inline>. This ensures that these files are not
          automatically repaired. Without this option, the database can
          become inconsistent, because <fo:inline font-family="monospace">Mnesia</fo:inline> can believe that
          the files were properly closed. For information about
          configuration parameter <fo:inline font-family="monospace">auto_repair</fo:inline>, see the
          Reference Manual.</fo:block>
      </fo:block>
      <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is recommended that the data files are not tampered
          with while <fo:inline font-family="monospace">Mnesia</fo:inline> is running. While not prohibited,
          the behavior of <fo:inline font-family="monospace">Mnesia</fo:inline> is unpredictable.</fo:block>
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">disc_copies</fo:inline> tables are stored on disk with
        <fo:inline font-family="monospace">.DCL</fo:inline> and <fo:inline font-family="monospace">.DCD</fo:inline> files, which are standard
        <fo:inline font-family="monospace">disk_log</fo:inline> files.</fo:block>
    
  <fo:block id="idp3392096" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.7.6 
      Loading Tables at Startup</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">At startup, <fo:inline font-family="monospace">Mnesia</fo:inline> loads tables to make them accessible
      for its applications. Sometimes <fo:inline font-family="monospace">Mnesia</fo:inline> decides to load
      all tables that reside locally, and sometimes the tables are
      not accessible until <fo:inline font-family="monospace">Mnesia</fo:inline> brings a copy of the table
      from another node.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To understand the behavior of <fo:inline font-family="monospace">Mnesia</fo:inline> at startup, it is
      essential to understand how <fo:inline font-family="monospace">Mnesia</fo:inline> reacts when it loses
      contact with <fo:inline font-family="monospace">Mnesia</fo:inline> on another node. At this stage,
      <fo:inline font-family="monospace">Mnesia</fo:inline> cannot distinguish between a communication
      failure and a "normal" node-down. When this occurs,
      <fo:inline font-family="monospace">Mnesia</fo:inline> assumes that the other node is no longer running,
      whereas, in reality, the communication between the nodes has
      failed.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To overcome this situation, try to restart the ongoing
      transactions that are accessing tables on the failing node,
      and write a <fo:inline font-family="monospace">mnesia_down</fo:inline> entry to a log file.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">At startup, notice that all tables residing on nodes
      without a <fo:inline font-family="monospace">mnesia_down</fo:inline> entry can have fresher replicas.
      Their replicas can have been updated after the termination of
      <fo:inline font-family="monospace">Mnesia</fo:inline> on the current node. To catch up with the latest
      updates, transfer a copy of the table from one of these other
      "fresh" nodes. If you are unlucky, other nodes can be down
      and you must wait for the table to be loaded on one of these
      nodes before receiving a fresh copy of the table.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Before an application makes its first access to a table,
      <fo:inline font-style="italic">mnesia:wait_for_tables(TabList, Timeout)</fo:inline>
      is to be executed
      to ensure that the table is accessible from the local node. If
      the function times out, the application can choose to force a
      load of the local replica with
      <fo:inline font-style="italic">mnesia:force_load_table(Tab)</fo:inline>
      and deliberately lose all
      updates that can have been performed on the other nodes while
      the local node was down. If <fo:inline font-family="monospace">Mnesia</fo:inline>
      has loaded the table on another node already, or intends
      to do so, copy the table from that node to
      avoid unnecessary inconsistency.</fo:block>
    <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Only one table is loaded by
      <fo:inline font-style="italic">mnesia:force_load_table(Tab)</fo:inline>.
        Since committed
        transactions can have caused updates in several tables, the
        tables can become inconsistent because of the forced load.</fo:block>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The allowed <fo:inline font-family="monospace">AccessMode</fo:inline> of a table can be defined to be
      <fo:inline font-family="monospace">read_only</fo:inline> or <fo:inline font-family="monospace">read_write</fo:inline>. It can be toggled with
      the function
      <fo:inline font-style="italic">
      mnesia:change_table_access_mode(Tab, AccessMode)</fo:inline>
      in runtime. <fo:inline font-family="monospace">read_only</fo:inline> tables and
      <fo:inline font-family="monospace">local_content</fo:inline> tables are always loaded locally, as
      there is no need for copying the table from other nodes. Other
      tables are primarily loaded remotely from active replicas on
      other nodes if the table has been loaded there already, or if
      the running <fo:inline font-family="monospace">Mnesia</fo:inline> has decided to load the table there
      already.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">At startup, <fo:inline font-family="monospace">Mnesia</fo:inline> assumes that its local replica is the
      most recent version and loads the table from disc if either of
      the following situations is detected:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">mnesia_down</fo:inline> is returned from all other nodes that
       hold a disc resident replica of the table.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>All replicas are <fo:inline font-family="monospace">ram_copies</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is normally a wise decision, but it can be disastrous
      if the nodes have been disconnected because of a communication
      failure, as the <fo:inline font-family="monospace">Mnesia</fo:inline> normal table load
      mechanism does not cope with communication failures.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When <fo:inline font-family="monospace">Mnesia</fo:inline> loads many tables, the default load order
      is used. However, the load order
      can be affected, by explicitly changing property
      <fo:inline font-family="monospace">load_order</fo:inline> for the tables, with the function
      <fo:inline font-style="italic">
      mnesia:change_table_load_order(Tab, LoadOrder)</fo:inline>.
      <fo:inline font-family="monospace">LoadOrder</fo:inline> is by default <fo:inline font-family="monospace">0</fo:inline> for all tables, but
      it can be set to any integer. The table with the highest
      <fo:inline font-family="monospace">load_order</fo:inline> is loaded first. Changing the load order is
      especially useful for applications that need to ensure early
      availability of fundamental tables. Large peripheral tables
      are to have a low load order value, perhaps less than <fo:inline font-family="monospace">0</fo:inline></fo:block>
  <fo:block id="idp3418464" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.7.7 
      Recovery from Communication Failure</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are several occasions when <fo:inline font-family="monospace">Mnesia</fo:inline> can detect
      that the network has been partitioned because of a
      communication failure, for example:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Mnesia</fo:inline> is operational already and the Erlang nodes
       gain contact again. Then <fo:inline font-family="monospace">Mnesia</fo:inline> tries to contact
       <fo:inline font-family="monospace">Mnesia</fo:inline> on the other node to see if it also thinks that
       the network has been partitioned for a while. If <fo:inline font-family="monospace">Mnesia</fo:inline>
       on both nodes has logged <fo:inline font-family="monospace">mnesia_down</fo:inline> entries from each
       other, <fo:inline font-family="monospace">Mnesia</fo:inline> generates a system event, called
       <fo:inline font-family="monospace">{inconsistent_database, running_partitioned_network, Node}</fo:inline>,
       which is sent to the <fo:inline font-family="monospace">Mnesia</fo:inline> event handler and other
       possible subscribers. The default event
       handler reports an error to the error logger.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If <fo:inline font-family="monospace">Mnesia</fo:inline> detects at startup that both the local
       node and another node received <fo:inline font-family="monospace">mnesia_down</fo:inline> from each
       other, <fo:inline font-family="monospace">Mnesia</fo:inline> generates an
       <fo:inline font-family="monospace">{inconsistent_database, starting_partitioned_network, Node}</fo:inline>
       system event and acts as described in the previous item.
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the application detects that there has been a communication
      failure that can have caused an inconsistent database, it can
      use the function
      <fo:inline font-style="italic">mnesia:set_master_nodes(Tab, Nodes)</fo:inline>
      to pinpoint from which nodes each table can be loaded.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">At startup, the <fo:inline font-family="monospace">Mnesia</fo:inline> normal table load algorithm is
      bypassed and the table is loaded from one of the master
      nodes defined for the table, regardless of potential
      <fo:inline font-family="monospace">mnesia_down</fo:inline> entries in the log. <fo:inline font-family="monospace">Nodes</fo:inline> can only
      contain nodes where the table has a replica. If <fo:inline font-family="monospace">Nodes</fo:inline>
      is empty, the master node recovery mechanism for the particular
      table is reset and the normal load mechanism is used at the
      next restart.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function
      <fo:inline font-style="italic">mnesia:set_master_nodes(Nodes)</fo:inline>
      sets master
      nodes for all tables. For each table it determines its replica
      nodes and starts
      <fo:inline font-style="italic">mnesia:set_master_nodes(Tab, TabNodes)</fo:inline>
      with those replica nodes that are included in the <fo:inline font-family="monospace">Nodes</fo:inline>
      list (that is, <fo:inline font-family="monospace">TabNodes</fo:inline> is the intersection of
      <fo:inline font-family="monospace">Nodes</fo:inline> and the replica nodes of the table). If the
      intersection is empty, the master node recovery mechanism for
      the particular table is reset and the normal load mechanism
      is used at the next restart.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The functions
      <fo:inline font-style="italic">mnesia:system_info(master_node_tables)</fo:inline>
      and
      <fo:inline font-style="italic">mnesia:table_info(Tab, master_nodes)</fo:inline>
      can be used to
      obtain information about the potential master nodes.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Determining what data to keep after a communication failure
      is outside the scope of <fo:inline font-family="monospace">Mnesia</fo:inline>. One approach is to
      determine which "island" contains most of the nodes. Using
      option <fo:inline font-family="monospace">{majority,true}</fo:inline> for critical tables can be a way
      to ensure that nodes that are not part of a "majority island"
      cannot update those tables. Notice that this constitutes a
      reduction in service on the minority nodes. This would be a
      tradeoff in favor of higher consistency guarantees.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function
      <fo:inline font-style="italic">mnesia:force_load_table(Tab)</fo:inline>
      can be used to force load the table regardless of which table
      load mechanism that is activated.</fo:block>
  <fo:block id="idp3440480" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.7.8 
      Recovery of Transactions</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-family="monospace">Mnesia</fo:inline> table can reside on one or more nodes. When a
      table is updated, <fo:inline font-family="monospace">Mnesia</fo:inline> ensures that the updates are
      replicated to all nodes where the table resides. If a replica is
      inaccessible (for example, because of a temporary node-down),
      <fo:inline font-family="monospace">Mnesia</fo:inline> performs the replication later.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On the node where the application is started, there is a
      transaction coordinator process. If the transaction is
      distributed, there is also a transaction participant process on
      all the other nodes where commit-work needs to be performed.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Internally <fo:inline font-family="monospace">Mnesia</fo:inline> uses several commit protocols. The
      selected protocol depends on which table that has been updated
      in the transaction. If all the involved tables are symmetrically
      replicated (that is, they all have the same <fo:inline font-family="monospace">ram_nodes</fo:inline>,
      <fo:inline font-family="monospace">disc_nodes</fo:inline>, and <fo:inline font-family="monospace">disc_only_nodes</fo:inline> currently
      accessible from the coordinator node), a lightweight transaction
      commit protocol is used.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The number of messages that the
      transaction coordinator and its participants need to exchange
      is few, as the <fo:inline font-family="monospace">Mnesia</fo:inline> table load mechanism takes care of
      the transaction recovery if the commit protocol gets
      interrupted. Since all involved tables are replicated
      symmetrically, the transaction is automatically recovered by
      loading the involved tables from the same node at startup of a
      failing node. It does not matter if the transaction was
      committed or terminated as long as the ACID properties can be
      ensured. The lightweight commit protocol is non-blocking,
      that is, the surviving participants and their coordinator
      finish the transaction, even if any node crashes in the
      middle of the commit protocol.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a node goes down in the middle of a dirty operation, the
      table load mechanism ensures that the update is
      performed on all replicas, or none. Both asynchronous dirty
      updates and synchronous dirty updates use the same recovery
      principle as lightweight transactions.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a transaction involves updates of asymmetrically replicated
      tables or updates of the schema table, a heavyweight commit
      protocol is used. This protocol can
      finish the transaction regardless of how the tables are
      replicated. The typical use of a heavyweight transaction is
      when a replica is to be moved from one node to another. Then
      ensure that the replica either is entirely moved or left as
      it was. Do never end up in a situation with replicas on both
      nodes, or on no node at all. Even if a node crashes in the middle
      of the commit protocol, the transaction must be guaranteed to be
      atomic. The heavyweight commit protocol involves more messages
      between the transaction coordinator and its participants than
      a lightweight protocol, and it performs recovery work at
      startup to finish the terminating or commit work.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The heavyweight commit protocol is also non-blocking,
      which allows the surviving participants and their coordinator to
      finish the transaction regardless (even if a node crashes in the
      middle of the commit protocol). When a node fails at startup,
      <fo:inline font-family="monospace">Mnesia</fo:inline> determines the outcome of the transaction and
      recovers it. Lightweight protocols, heavyweight protocols, and
      dirty updates, are dependent on other nodes to be operational
      to make the correct heavyweight transaction recovery decision.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Mnesia</fo:inline> has not started on some of the nodes that
      are involved in the transaction <fo:inline font-weight="bold">and</fo:inline> neither the
      local node nor any of the already running nodes know the
      outcome of the transaction, <fo:inline font-family="monospace">Mnesia</fo:inline> waits for one,
      by default. In the worst case scenario, all other involved
      nodes must start before <fo:inline font-family="monospace">Mnesia</fo:inline> can make the correct
      decision about the transaction and finish its startup.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Thus, <fo:inline font-family="monospace">Mnesia</fo:inline> (on one node) can hang if a double fault
      occurs, that is, when two nodes crash simultaneously
      and one attempts to start when the other refuses to
      start, for example, because of a hardware error.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The maximum time that <fo:inline font-family="monospace">Mnesia</fo:inline> waits for other nodes to
      respond with a transaction recovery decision can be specified.
      The configuration parameter <fo:inline font-family="monospace">max_wait_for_decision</fo:inline>
      defaults to <fo:inline font-family="monospace">infinity</fo:inline>, which can cause the indefinite
      hanging as mentioned earlier. However, if the parameter is
      set to a definite time period (for example, three minutes),
      <fo:inline font-family="monospace">Mnesia</fo:inline> then enforces a transaction recovery decision,
      if needed, to allow <fo:inline font-family="monospace">Mnesia</fo:inline> to continue with its startup
      procedure.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The downside of an enforced transaction recovery decision is
      that the decision can be incorrect, because of insufficient
      information about the recovery decisions from the other nodes.
      This can result in an inconsistent database where <fo:inline font-family="monospace">Mnesia</fo:inline>
      has committed the transaction on some nodes but terminated it
      on others.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In fortunate cases, the inconsistency is only visible in
      tables belonging to a specific application. However, if a
      schema transaction is inconsistently recovered because of
      the enforced transaction recovery decision, the
      effects of the inconsistency can be fatal.
      However, if the higher priority is availability rather than
      consistency, it can be worth the risk.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Mnesia</fo:inline> detects an inconsistent transaction decision,
      an <fo:inline font-family="monospace">{inconsistent_database, bad_decision, Node}</fo:inline> system event
      is generated to give the application a chance to install a
      fallback or other appropriate measures to resolve the
      inconsistency. The default behavior of the <fo:inline font-family="monospace">Mnesia</fo:inline>
      event handler is the same as if the database became
      inconsistent as a result of partitioned network (as
      described earlier).</fo:block>
  <fo:block id="idp3462624" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.7.9 
      Backup, Restore, Fallback, and Disaster Recovery</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following functions are used to back up data, to install
      a backup as fallback, and for disaster recovery:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
       <fo:inline font-style="italic">mnesia:backup_checkpoint(Name, Opaque, [Mod])</fo:inline>
       performs a backup of the tables included in the checkpoint.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
       <fo:inline font-style="italic">mnesia:backup(Opaque, [Mod])</fo:inline>
       activates a new
       checkpoint that covers all <fo:inline font-family="monospace">Mnesia</fo:inline> tables and
       performs a backup. It is performed with maximum degree of
       redundancy (see also the function
       <fo:inline font-style="italic">mnesia:activate_checkpoint(Args)</fo:inline>,
       <fo:inline font-family="monospace">{max, MaxTabs} and {min, MinTabs})</fo:inline>.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
       <fo:inline font-style="italic">mnesia:traverse_backup(Source, [SourceMod,] Target, [TargetMod,] Fun, Acc)</fo:inline>
       can be used to read an existing backup, create a backup from an
       existing one, or to copy a backup from one type media to another.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
       <fo:inline font-style="italic">mnesia:uninstall_fallback()</fo:inline>
       removes previously installed fallback files.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
       <fo:inline font-style="italic">mnesia:restore(Opaque, Args)</fo:inline>
       restores a set of tables from a previous backup.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
       <fo:inline font-style="italic">mnesia:install_fallback(Opaque, [Mod])</fo:inline>
       can be configured to restart <fo:inline font-family="monospace">Mnesia</fo:inline> and the reload data
       tables, and possibly the schema tables, from an existing
       backup. This function is typically used for disaster recovery
       purposes, when data or schema tables are corrupted.
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These functions are explained in the following sections.
      See also <fo:inline font-style="italic">Checkpoints</fo:inline>,
      which describes the two functions used
      to activate and deactivate checkpoints.</fo:block>

    <fo:block id="idp3475968" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Backup</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Backup operation are performed with the following functions:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
         <fo:inline font-style="italic">mnesia:backup_checkpoint(Name, Opaque, [Mod])</fo:inline>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
         <fo:inline font-style="italic">mnesia:backup(Opaque, [Mod])</fo:inline>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
         <fo:inline font-style="italic">mnesia:traverse_backup(Source, [SourceMod,] Target, [TargetMod,] Fun, Acc)</fo:inline>
        </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By default, the actual access to the backup media is
        performed through module <fo:inline font-family="monospace">mnesia_backup</fo:inline> for both read
        and write. Currently <fo:inline font-family="monospace">mnesia_backup</fo:inline> is implemented with
        the standard library module <fo:inline font-family="monospace">disc_log</fo:inline>. However, you
        can write your own module with the same interface as
        <fo:inline font-family="monospace">mnesia_backup</fo:inline> and configure <fo:inline font-family="monospace">Mnesia</fo:inline> so that
        the alternative module performs the actual accesses to
        the backup media. The user can
        therefore put the backup on a media that <fo:inline font-family="monospace">Mnesia</fo:inline>
        does not know about, possibly on hosts where Erlang is not
        running. Use configuration parameter
        <fo:inline font-family="monospace">-mnesia backup_module &lt;module&gt;</fo:inline>
        for this purpose.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The source for a backup is an activated checkpoint.
        The backup function
        <fo:inline font-style="italic">mnesia:backup_checkpoint(Name, Opaque,[Mod])</fo:inline>
        is most commonly used and returns <fo:inline font-family="monospace">ok</fo:inline> or
        <fo:inline font-family="monospace">{error,Reason}</fo:inline>. It has the following arguments:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Name</fo:inline> is the name of an activated checkpoint.
         For details on how to include table names in checkpoints,
         see the function <fo:inline font-family="monospace">mnesia:activate_checkpoint(ArgList)</fo:inline>
         in <fo:inline font-style="italic">Checkpoints</fo:inline>.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Opaque</fo:inline>. <fo:inline font-family="monospace">Mnesia</fo:inline> does not interpret this
         argument, but it is forwarded to the backup module. The
         <fo:inline font-family="monospace">Mnesia</fo:inline> default backup module <fo:inline font-family="monospace">mnesia_backup</fo:inline>
         interprets this argument as a local filename.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Mod</fo:inline> is the name of an alternative backup module.
        </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function
        <fo:inline font-style="italic">mnesia:backup(Opaque [,Mod])</fo:inline>
        activates a
        new checkpoint that covers all <fo:inline font-family="monospace">Mnesia</fo:inline> tables with
        maximum degree of redundancy and performs a backup. Maximum
        redundancy means that each table replica has a checkpoint
        retainer. Tables with property <fo:inline font-family="monospace">local_contents</fo:inline> are
        backed up as they look on the current node.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">You can iterate over a backup, either to transform it
        into a new backup, or only read it. The function
        <fo:inline font-style="italic">mnesia:traverse_backup(Source, [SourceMod,] Target, [TargetMod,] Fun, Acc)</fo:inline>,
        which normally returns <fo:inline font-family="monospace">{ok, LastAcc}</fo:inline>,
        is used for both of these purposes.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Before the traversal starts, the source backup media is
        opened with <fo:inline font-family="monospace">SourceMod:open_read(Source)</fo:inline>, and the target
        backup media is opened with
        <fo:inline font-family="monospace">TargetMod:open_write(Target)</fo:inline>. The arguments are as
        follows:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">SourceMod</fo:inline> and <fo:inline font-family="monospace">TargetMod</fo:inline> are module names.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Source</fo:inline> and <fo:inline font-family="monospace">Target</fo:inline> are opaque data used
         exclusively by the modules <fo:inline font-family="monospace">SourceMod</fo:inline> and
         <fo:inline font-family="monospace">TargetMod</fo:inline> for initializing the backup medias.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Acc</fo:inline> is an initial accumulator value.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Fun(BackupItems, Acc)</fo:inline> is applied to each item in
         the backup. The Fun must return a tuple
         <fo:inline font-family="monospace">{ValGoodBackupItems, NewAcc}</fo:inline>,
         where <fo:inline font-family="monospace">ValidBackupItems</fo:inline> is a list of valid
         backup items. <fo:inline font-family="monospace">NewAcc</fo:inline> is a new accumulator value.
         The <fo:inline font-family="monospace">ValidBackupItems</fo:inline> are written to the target backup
         with the function <fo:inline font-family="monospace">TargetMod:write/2</fo:inline>.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">LastAcc</fo:inline> is the last accumulator value, that is,
         the last <fo:inline font-family="monospace">NewAcc</fo:inline> value that was returned by <fo:inline font-family="monospace">Fun</fo:inline>.
        </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Also, a read-only traversal of the source backup can be
        performed without updating a target backup. If
        <fo:inline font-family="monospace">TargetMod==read_only</fo:inline>, no target backup is accessed.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By setting <fo:inline font-family="monospace">SourceMod</fo:inline> and <fo:inline font-family="monospace">TargetMod</fo:inline> to different
        modules, a backup can be copied from one backup
        media to another.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Valid <fo:inline font-family="monospace">BackupItems</fo:inline> are the following tuples:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{schema, Tab}</fo:inline> specifies a table to be deleted.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{schema, Tab, CreateList}</fo:inline> specifies a table to be
         created. For more information about <fo:inline font-family="monospace">CreateList</fo:inline>, see
         <fo:inline font-style="italic">mnesia:create_table/2</fo:inline>.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{Tab, Key}</fo:inline> specifies the full identity of a record
         to be deleted.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{Record}</fo:inline> specifies a record to be inserted. It
         can be a tuple with <fo:inline font-family="monospace">Tab</fo:inline> as first field. Notice that the
         record name is set to the table name regardless of what
         <fo:inline font-family="monospace">record_name</fo:inline> is set to.
        </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The backup data is divided into two sections. The first
        section contains information related to the schema. All
        schema-related items are tuples where the first field equals
        the atom schema. The second section is the record section.
        Schema records cannot be mixed with other records and all
        schema records must be located first in the backup.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The schema itself is a table and is possibly included in
        the backup. Each node where the schema table resides is
        regarded as a <fo:inline font-family="monospace">db_node</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following example shows how
        <fo:inline font-style="italic">mnesia:traverse_backup</fo:inline>
        can be used to rename a <fo:inline font-family="monospace">db_node</fo:inline> in a backup file:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

change_node_name(Mod, From, To, Source, Target) -&gt;
    Switch =
        fun(Node) when Node == From -&gt; To;
           (Node) when Node == To -&gt; throw({error, already_exists});
           (Node) -&gt; Node
        end,
    Convert =
        fun({schema, db_nodes, Nodes}, Acc) -&gt;
                {[{schema, db_nodes, lists:map(Switch,Nodes)}], Acc};
           ({schema, version, Version}, Acc) -&gt;
                {[{schema, version, Version}], Acc};
           ({schema, cookie, Cookie}, Acc) -&gt;
                {[{schema, cookie, Cookie}], Acc};
           ({schema, Tab, CreateList}, Acc) -&gt;
                Keys = [ram_copies, disc_copies, disc_only_copies],
                OptSwitch =
                    fun({Key, Val}) -&gt;
                            case lists:member(Key, Keys) of
                                true -&gt; {Key, lists:map(Switch, Val)};
                                false-&gt; {Key, Val}
                            end
                    end,
                {[{schema, Tab, lists:map(OptSwitch, CreateList)}], Acc};
           (Other, Acc) -&gt;
                {[Other], Acc}
        end,
    mnesia:traverse_backup(Source, Mod, Target, Mod, Convert, switched).

view(Source, Mod) -&gt;
    View = fun(Item, Acc) -&gt;
                   io:format("~p.~n",[Item]),
                   {[Item], Acc + 1}
           end,
    mnesia:traverse_backup(Source, Mod, dummy, read_only, View, 0).</fo:block>    

    <fo:block id="idp3524192" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Restore</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tables can be restored online from a backup without
        restarting <fo:inline font-family="monospace">Mnesia</fo:inline>. A restore is performed with the
        function
        <fo:inline font-style="italic">mnesia:restore(Opaque, Args)</fo:inline>,
        where <fo:inline font-family="monospace">Args</fo:inline> can contain the following tuples:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{module,Mod}</fo:inline>. The backup module <fo:inline font-family="monospace">Mod</fo:inline> is
         used to access the backup media. If omitted, the default
         backup module is used.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{skip_tables, TableList}</fo:inline>, where <fo:inline font-family="monospace">TableList</fo:inline>
         is a list of tables, which is not to be read from the backup.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{clear_tables, TableList}</fo:inline>, where <fo:inline font-family="monospace">TableList</fo:inline>
         is a list of tables, which is to be cleared before the
         records from the backup are inserted. That is, all records in
         the tables are deleted before the tables are restored.
         Schema information about the tables is not cleared or read
         from the backup.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{keep_tables, TableList}</fo:inline>, where <fo:inline font-family="monospace">TableList</fo:inline>
         is a list of tables, which is not to be cleared before
         the records from the backup are inserted. That is, the records
         in the backup are added to the records in the table.
         Schema information about the tables is not cleared or read
         from the backup.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{recreate_tables, TableList}</fo:inline>, where <fo:inline font-family="monospace">TableList</fo:inline>
         is a list of tables, which is to be recreated before the
         records from the backup are inserted. The tables are first
         deleted and then created with the schema information from the
         backup. All the nodes in the backup need to be operational.
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{default_op, Operation}</fo:inline>, where <fo:inline font-family="monospace">Operation</fo:inline> is
         one of the operations <fo:inline font-family="monospace">skip_tables</fo:inline>,
         <fo:inline font-family="monospace">clear_tables</fo:inline>, <fo:inline font-family="monospace">keep_tables</fo:inline>, or
         <fo:inline font-family="monospace">recreate_tables</fo:inline>. The default operation specifies
         which operation is to be used on tables from the backup
         that are not specified in any of the previous lists.
         If omitted, the operation <fo:inline font-family="monospace">clear_tables</fo:inline> is used.
        </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The argument <fo:inline font-family="monospace">Opaque</fo:inline> is forwarded to the backup module.
        It returns <fo:inline font-family="monospace">{atomic, TabList}</fo:inline> if successful, or the
        tuple <fo:inline font-family="monospace">{aborted, Reason}</fo:inline> if there is an error.
        <fo:inline font-family="monospace">TabList</fo:inline> is a list of the restored tables. Tables that
        are restored are write-locked during the restore
        operation. However, regardless of any lock conflict caused by
        this, applications can continue to do their work during the
        restore operation.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The restoration is performed as a single transaction. If the
        database is large, it cannot always be restored
        online. The old database must then be restored by
        installing a fallback, followed by a restart.</fo:block>
    

    <fo:block id="idp3541824" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Fallback</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function
        <fo:inline font-style="italic">mnesia:install_fallback(Opaque, [Mod])</fo:inline>
        installs a backup as fallback. It uses the backup module
        <fo:inline font-family="monospace">Mod</fo:inline>, or the default backup module, to access the backup
        media. The function returns <fo:inline font-family="monospace">ok</fo:inline> if successful, or
        <fo:inline font-family="monospace">{error, Reason}</fo:inline> if there is an error.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Installing a fallback is a distributed operation, which is
        <fo:inline font-weight="bold">only</fo:inline> performed on all <fo:inline font-family="monospace">db_nodes</fo:inline>. The fallback
        restores the database the next time the system is started.
        If a <fo:inline font-family="monospace">Mnesia</fo:inline> node with a fallback installed detects that
        <fo:inline font-family="monospace">Mnesia</fo:inline> on another node has died, it
        unconditionally terminates itself.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A fallback is typically used when a system upgrade is
        performed. A system typically involves the installation of new
        software versions, and <fo:inline font-family="monospace">Mnesia</fo:inline> tables are often transformed
        into new layouts. If the system crashes during an upgrade, it is
        highly probable that reinstallation of the old applications is
        required, and restoration of the database to its previous state.
        This can be done if a backup is performed and
        installed as a fallback before the system upgrade begins.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the system upgrade fails, <fo:inline font-family="monospace">Mnesia</fo:inline> must be restarted
        on all <fo:inline font-family="monospace">db_nodes</fo:inline> to restore the old database. The
        fallback is automatically deinstalled after a successful
        startup. The function
        <fo:inline font-style="italic">mnesia:uninstall_fallback()</fo:inline>
        can also be used to deinstall the fallback after a
        successful system upgrade. Again, this is a distributed
        operation that is either performed on all <fo:inline font-family="monospace">db_nodes</fo:inline> or
        none. Both the installation and deinstallation of fallbacks
        require Erlang to be operational on all <fo:inline font-family="monospace">db_nodes</fo:inline>, but
        it does not matter if <fo:inline font-family="monospace">Mnesia</fo:inline> is running or not.</fo:block>
    

    <fo:block id="idp3553168" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Disaster Recovery</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The system can become inconsistent as a result of a power
        failure. The UNIX feature <fo:inline font-family="monospace">fsck</fo:inline> can possibly repair the
        file system, but there is no guarantee that the file content
        is consistent.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Mnesia</fo:inline> detects that a file has not been properly
        closed, possibly as a result of a power failure, it tries to
        repair the bad file in a similar manner. Data can be lost, but
        <fo:inline font-family="monospace">Mnesia</fo:inline> can be restarted even if the data is inconsistent.
        Configuration parameter
        <fo:inline font-family="monospace">-mnesia auto_repair &lt;bool&gt;</fo:inline> can be used
        to control the behavior of <fo:inline font-family="monospace">Mnesia</fo:inline> at startup. If
        <fo:inline font-family="monospace">&lt;bool&gt;</fo:inline> has the value <fo:inline font-family="monospace">true</fo:inline>,
        <fo:inline font-family="monospace">Mnesia</fo:inline> tries to repair the file. If
        <fo:inline font-family="monospace">&lt;bool&gt;</fo:inline> has the value <fo:inline font-family="monospace">false</fo:inline>,
        <fo:inline font-family="monospace">Mnesia</fo:inline> does not restart if it detects a suspect file.
        This configuration parameter affects the repair behavior of log
        files, <fo:inline font-family="monospace">DAT</fo:inline> files, and the default backup media.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Configuration parameter
        <fo:inline font-family="monospace">-mnesia dump_log_update_in_place &lt;bool&gt;</fo:inline>
        controls the safety level of the function
        <fo:inline font-style="italic">mnesia:dump_log()</fo:inline>
        By default, <fo:inline font-family="monospace">Mnesia</fo:inline> dumps the
        transaction log directly into the <fo:inline font-family="monospace">DAT</fo:inline> files. If a power
        failure occurs during the dump, this can cause the randomly
        accessed <fo:inline font-family="monospace">DAT</fo:inline> files to become corrupt. If the parameter
        is set to <fo:inline font-family="monospace">false</fo:inline>, <fo:inline font-family="monospace">Mnesia</fo:inline> copies the <fo:inline font-family="monospace">DAT</fo:inline>
        files and target the dump
        to the new temporary files. If the dump is successful, the
        temporary files are renamed to their normal <fo:inline font-family="monospace">DAT</fo:inline>
        suffixes. The possibility for unrecoverable inconsistencies in
        the data files becomes much smaller with this strategy.
        However, the actual dumping of the transaction log becomes
        considerably slower. The system designer must decide whether
        speed or safety is the higher priority.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Replicas of type <fo:inline font-family="monospace">disc_only_copies</fo:inline> are only
        affected by this parameter during the initial dump of the log
        file at startup. When designing applications with
        <fo:inline font-weight="bold">very</fo:inline> high requirements, it can be appropriate not to
        use <fo:inline font-family="monospace">disc_only_copies</fo:inline> tables at all. The reason for this
        is the random access nature of normal operating system files. If
        a node goes down for a reason such as a power
        failure, these files can be corrupted because they are not
        properly closed. The <fo:inline font-family="monospace">DAT</fo:inline> files for <fo:inline font-family="monospace">disc_only_copies</fo:inline>
        are updated on a per transaction basis.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a disaster occurs and the <fo:inline font-family="monospace">Mnesia</fo:inline> database is
        corrupted, it can be reconstructed from a backup. Regard
        this as a last resort, as the backup contains old data. The
        data is hopefully consistent, but data is definitely lost
        when an old backup is used to restore the database.</fo:block>
    
  <fo:block id="idp3574816" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.8  Combine Mnesia with SNMP</fo:marker>1.8  Combine Mnesia with SNMP</fo:block><fo:block id="idp3578384" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.8.1 
      Combine Mnesia and SNMP</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Many telecommunications applications must be controlled and
      reconfigured remotely. It is sometimes an advantage to perform
      this remote control with an open protocol such as the Simple
      Network Management Protocol (SNMP). The alternatives to this would
      be the following:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Not being able to control the application remotely
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Using a proprietary control protocol
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Using a bridge that maps control messages in a
       proprietary protocol to a standardized management protocol and
       conversely
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All these approaches have different advantages and
      disadvantages. Mnesia applications can easily be opened to
      the SNMP protocol. A direct 1-to-1 mapping can be established
      between Mnesia tables and SNMP tables. This means
      that a Mnesia table can be configured to be <fo:inline font-weight="bold">both</fo:inline>
      a Mnesia table and an SNMP table. A number of functions to
      control this behavior are described in the Reference Manual.</fo:block>
  <fo:block id="idp3587472" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.9  Appendix A: Backup Callback Interface</fo:marker>1.9  Appendix A: Backup Callback Interface</fo:block><fo:block id="idp3591840" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.9.1 
      mnesia_backup Callback Behavior</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% This module contains one implementation of callback functions
%% used by Mnesia at backup and restore. The user may however
%% write an own module the same interface as mnesia_backup and
%% configure Mnesia so the alternate module performs the actual
%% accesses to the backup media. This means that the user may put
%% the backup on medias that Mnesia does not know about, possibly
%% on hosts where Erlang is not running.
%%
%% The OpaqueData argument is never interpreted by other parts of
%% Mnesia. It is the property of this module. Alternate implementations
%% of this module may have different interpretations of OpaqueData.
%% The OpaqueData argument given to open_write/1 and open_read/1
%% are forwarded directly from the user.
%%
%% All functions must return {ok, NewOpaqueData} or {error, Reason}.
%%
%% The NewOpaqueData arguments returned by backup callback functions will
%% be given as input when the next backup callback function is invoked.
%% If any return value does not match {ok, _} the backup will be aborted.
%%
%% The NewOpaqueData arguments returned by restore callback functions will
%% be given as input when the next restore callback function is invoked
%% If any return value does not match {ok, _} the restore will be aborted.
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-module(mnesia_backup).

-include_lib("kernel/include/file.hrl").

-export([
	 %% Write access
         open_write/1,
	 write/2,
	 commit_write/1,
	 abort_write/1,

	 %% Read access
         open_read/1,
	 read/1,
	 close_read/1
        ]).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Backup callback interface
-record(backup, {tmp_file, file, file_desc}).

%% Opens backup media for write
%%
%% Returns {ok, OpaqueData} or {error, Reason}
open_write(OpaqueData) -&gt;
    File = OpaqueData,
    Tmp = lists:concat([File,".BUPTMP"]),
    file:delete(Tmp),
    file:delete(File),
    case disk_log:open([{name, make_ref()},
			{file, Tmp},
			{repair, false},
			{linkto, self()}]) of
	{ok, Fd} -&gt;
	    {ok, #backup{tmp_file = Tmp, file = File, file_desc = Fd}};
	{error, Reason} -&gt;
	    {error, Reason}
    end.

%% Writes BackupItems to the backup media
%%
%% Returns {ok, OpaqueData} or {error, Reason}
write(OpaqueData, BackupItems) -&gt;
    B = OpaqueData,
    case disk_log:log_terms(B#backup.file_desc, BackupItems) of
        ok -&gt;
            {ok, B};
        {error, Reason} -&gt;
            abort_write(B),
            {error, Reason}
    end.

%% Closes the backup media after a successful backup
%%
%% Returns {ok, ReturnValueToUser} or {error, Reason}
commit_write(OpaqueData) -&gt;
    B = OpaqueData,
    case disk_log:sync(B#backup.file_desc) of
        ok -&gt;
            case disk_log:close(B#backup.file_desc) of
                ok -&gt;
		    case file:rename(B#backup.tmp_file, B#backup.file) of
		       ok -&gt;
			    {ok, B#backup.file};
		       {error, Reason} -&gt;
			    {error, Reason}
		    end;
                {error, Reason} -&gt;
		    {error, Reason}
            end;
        {error, Reason} -&gt;
            {error, Reason}
    end.

%% Closes the backup media after an interrupted backup
%%
%% Returns {ok, ReturnValueToUser} or {error, Reason}
abort_write(BackupRef) -&gt;
    Res = disk_log:close(BackupRef#backup.file_desc),
    file:delete(BackupRef#backup.tmp_file),
    case Res of
        ok -&gt;
            {ok, BackupRef#backup.file};
        {error, Reason} -&gt;
            {error, Reason}
    end.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Restore callback interface

-record(restore, {file, file_desc, cont}).

%% Opens backup media for read
%%
%% Returns {ok, OpaqueData} or {error, Reason}
open_read(OpaqueData) -&gt;
    File = OpaqueData,
    case file:read_file_info(File) of
	{error, Reason} -&gt;
	    {error, Reason};
	_FileInfo -&gt; %% file exists
	    case disk_log:open([{file, File},
				{name, make_ref()},
				{repair, false},
				{mode, read_only},
				{linkto, self()}]) of
		{ok, Fd} -&gt;
		    {ok, #restore{file = File, file_desc = Fd, cont = start}};
		{repaired, Fd, _, {badbytes, 0}} -&gt;
		    {ok, #restore{file = File, file_desc = Fd, cont = start}};
		{repaired, Fd, _, _} -&gt;
		    {ok, #restore{file = File, file_desc = Fd, cont = start}};
		{error, Reason} -&gt;
		    {error, Reason}
	    end
    end.

%% Reads BackupItems from the backup media
%%
%% Returns {ok, OpaqueData, BackupItems} or {error, Reason}
%%
%% BackupItems == [] is interpreted as eof
read(OpaqueData) -&gt;
    R = OpaqueData,
    Fd = R#restore.file_desc,
    case disk_log:chunk(Fd, R#restore.cont) of
        {error, Reason} -&gt;
            {error, {"Possibly truncated", Reason}};
        eof -&gt;
            {ok, R, []};
        {Cont, []} -&gt;
            read(R#restore{cont = Cont});
        {Cont, BackupItems, _BadBytes} -&gt;
            {ok, R#restore{cont = Cont}, BackupItems};
        {Cont, BackupItems} -&gt;
            {ok, R#restore{cont = Cont}, BackupItems}
    end.

%% Closes the backup media after restore
%%
%% Returns {ok, ReturnValueToUser} or {error, Reason}
close_read(OpaqueData) -&gt;
    R = OpaqueData,
    case disk_log:close(R#restore.file_desc) of
        ok -&gt; {ok, R#restore.file};
        {error, Reason} -&gt; {error, Reason}
    end.</fo:block>  <fo:block id="idp3603008" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.10  Appendix B: Activity Access Callback Interface</fo:marker>1.10  Appendix B: Activity Access Callback Interface</fo:block><fo:block id="idp3606560" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.10.1 
      mnesia_access Callback Behavior</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">


-module(mnesia_frag).

%% Callback functions when accessed within an activity
-export([
	 lock/4,
	 write/5, delete/5, delete_object/5,
	 read/5, match_object/5, all_keys/4,
	 select/5,select/6,select_cont/3,
	 index_match_object/6, index_read/6,
	 foldl/6, foldr/6, table_info/4,
	 first/3, next/4, prev/4, last/3,
	 clear_table/4
       ]).
</fo:block>    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">


%% Callback functions which provides transparent
%% access of fragmented tables from any activity
%% access context.

lock(ActivityId, Opaque, {table , Tab}, LockKind) -&gt;
    case frag_names(Tab) of
	[Tab] -&gt;
	    mnesia:lock(ActivityId, Opaque, {table, Tab}, LockKind);
	Frags -&gt;
	    DeepNs = [mnesia:lock(ActivityId, Opaque, {table, F}, LockKind) ||
			 F &lt;- Frags],
	    mnesia_lib:uniq(lists:append(DeepNs))
    end;

lock(ActivityId, Opaque, LockItem, LockKind) -&gt;
    mnesia:lock(ActivityId, Opaque, LockItem, LockKind).

write(ActivityId, Opaque, Tab, Rec, LockKind) -&gt;
    Frag = record_to_frag_name(Tab, Rec),
    mnesia:write(ActivityId, Opaque, Frag, Rec, LockKind).

delete(ActivityId, Opaque, Tab, Key, LockKind) -&gt;
    Frag = key_to_frag_name(Tab, Key),
    mnesia:delete(ActivityId, Opaque, Frag, Key, LockKind).

delete_object(ActivityId, Opaque, Tab, Rec, LockKind) -&gt;
    Frag = record_to_frag_name(Tab, Rec),
    mnesia:delete_object(ActivityId, Opaque, Frag, Rec, LockKind).

read(ActivityId, Opaque, Tab, Key, LockKind) -&gt;
    Frag = key_to_frag_name(Tab, Key),
    mnesia:read(ActivityId, Opaque, Frag, Key, LockKind).

match_object(ActivityId, Opaque, Tab, HeadPat, LockKind) -&gt;
    MatchSpec = [{HeadPat, [], ['$_']}],
    select(ActivityId, Opaque, Tab, MatchSpec, LockKind).

select(ActivityId, Opaque, Tab, MatchSpec, LockKind) -&gt;
    do_select(ActivityId, Opaque, Tab, MatchSpec, LockKind).


select(ActivityId, Opaque, Tab, MatchSpec, Limit, LockKind) -&gt;
    init_select(ActivityId, Opaque, Tab, MatchSpec, Limit, LockKind).


all_keys(ActivityId, Opaque, Tab, LockKind) -&gt;
    Match = [mnesia:all_keys(ActivityId, Opaque, Frag, LockKind)
	     || Frag &lt;- frag_names(Tab)],
    lists:append(Match).

clear_table(ActivityId, Opaque, Tab, Obj) -&gt;
    [mnesia:clear_table(ActivityId, Opaque, Frag, Obj)  || Frag &lt;- frag_names(Tab)],
    ok.

index_match_object(ActivityId, Opaque, Tab, Pat, Attr, LockKind) -&gt;
    Match =
	[mnesia:index_match_object(ActivityId, Opaque, Frag, Pat, Attr, LockKind)
	 || Frag &lt;- frag_names(Tab)],
    lists:append(Match).

index_read(ActivityId, Opaque, Tab, Key, Attr, LockKind) -&gt;
    Match =
	[mnesia:index_read(ActivityId, Opaque, Frag, Key, Attr, LockKind)
	     || Frag &lt;- frag_names(Tab)],
    lists:append(Match).

foldl(ActivityId, Opaque, Fun, Acc, Tab, LockKind) -&gt;
    Fun2 = fun(Frag, A) -&gt;
		   mnesia:foldl(ActivityId, Opaque, Fun, A, Frag, LockKind)
	   end,
    lists:foldl(Fun2, Acc, frag_names(Tab)).

foldr(ActivityId, Opaque, Fun, Acc, Tab, LockKind) -&gt;
    Fun2 = fun(Frag, A) -&gt;
		   mnesia:foldr(ActivityId, Opaque, Fun, A, Frag, LockKind)
	   end,
    lists:foldr(Fun2, Acc, frag_names(Tab)).

table_info(ActivityId, Opaque, {Tab, Key}, Item) -&gt;
    Frag = key_to_frag_name(Tab, Key),
    table_info2(ActivityId, Opaque, Tab, Frag, Item);
table_info(ActivityId, Opaque, Tab, Item) -&gt;
    table_info2(ActivityId, Opaque, Tab, Tab, Item).

table_info2(ActivityId, Opaque, Tab, Frag, Item) -&gt;
    case Item of
	size -&gt;
	    SumFun = fun({_, Size}, Acc) -&gt; Acc + Size end,
	    lists:foldl(SumFun, 0, frag_size(ActivityId, Opaque, Tab));
	memory -&gt;
	    SumFun = fun({_, Size}, Acc) -&gt; Acc + Size end,
	    lists:foldl(SumFun, 0, frag_memory(ActivityId, Opaque, Tab));
	base_table -&gt;
	    lookup_prop(Tab, base_table);
	node_pool -&gt;
	    lookup_prop(Tab, node_pool);
	n_fragments -&gt;
	    FH = lookup_frag_hash(Tab),
	    FH#frag_state.n_fragments;
	foreign_key -&gt;
	    FH = lookup_frag_hash(Tab),
	    FH#frag_state.foreign_key;
	foreigners -&gt;
	    lookup_foreigners(Tab);
	n_ram_copies -&gt;
	    length(val({Tab, ram_copies}));
	n_disc_copies -&gt;
	    length(val({Tab, disc_copies}));
	n_disc_only_copies -&gt;
	    length(val({Tab, disc_only_copies}));
	n_external_copies -&gt;
	    length(val({Tab, external_copies}));

	frag_names -&gt;
	    frag_names(Tab);
	frag_dist -&gt;
	    frag_dist(Tab);
	frag_size -&gt;
	    frag_size(ActivityId, Opaque, Tab);
	frag_memory -&gt;
	    frag_memory(ActivityId, Opaque, Tab);
	_ -&gt;
	    mnesia:table_info(ActivityId, Opaque, Frag, Item)
    end.

first(ActivityId, Opaque, Tab) -&gt;
    case ?catch_val({Tab, frag_hash}) of
	{'EXIT', _} -&gt;
	    mnesia:first(ActivityId, Opaque, Tab);
	FH -&gt;
	    FirstFrag = Tab,
	    case mnesia:first(ActivityId, Opaque, FirstFrag) of
		'$end_of_table' -&gt;
		    search_first(ActivityId, Opaque, Tab, 1, FH);
		Next -&gt;
		    Next
	    end
    end.

search_first(ActivityId, Opaque, Tab, N, FH) when N &lt; FH#frag_state.n_fragments -&gt;
    NextN = N + 1,
    NextFrag = n_to_frag_name(Tab, NextN),
    case mnesia:first(ActivityId, Opaque, NextFrag) of
	'$end_of_table' -&gt;
	    search_first(ActivityId, Opaque, Tab, NextN, FH);
	Next -&gt;
	    Next
    end;
search_first(_ActivityId, _Opaque, _Tab, _N, _FH) -&gt;
    '$end_of_table'.

last(ActivityId, Opaque, Tab) -&gt;
    case ?catch_val({Tab, frag_hash}) of
	{'EXIT', _} -&gt;
	    mnesia:last(ActivityId, Opaque, Tab);
	FH -&gt;
	    LastN = FH#frag_state.n_fragments,
	    search_last(ActivityId, Opaque, Tab, LastN, FH)
    end.

search_last(ActivityId, Opaque, Tab, N, FH) when N &gt;= 1 -&gt;
    Frag = n_to_frag_name(Tab, N),
    case mnesia:last(ActivityId, Opaque, Frag) of
	'$end_of_table' -&gt;
	    PrevN = N - 1,
	    search_last(ActivityId, Opaque, Tab, PrevN, FH);
	Prev -&gt;
	    Prev
    end;
search_last(_ActivityId, _Opaque, _Tab, _N, _FH) -&gt;
    '$end_of_table'.

prev(ActivityId, Opaque, Tab, Key) -&gt;
    case ?catch_val({Tab, frag_hash}) of
	{'EXIT', _} -&gt;
	    mnesia:prev(ActivityId, Opaque, Tab, Key);
	FH -&gt;
	    N = key_to_n(FH, Key),
	    Frag = n_to_frag_name(Tab, N),
	    case mnesia:prev(ActivityId, Opaque, Frag, Key) of
		'$end_of_table' -&gt;
		    search_prev(ActivityId, Opaque, Tab, N);
		Prev -&gt;
		    Prev
	    end
    end.

search_prev(ActivityId, Opaque, Tab, N) when N &gt; 1 -&gt;
    PrevN = N - 1,
    PrevFrag = n_to_frag_name(Tab, PrevN),
    case mnesia:last(ActivityId, Opaque, PrevFrag) of
	'$end_of_table' -&gt;
	    search_prev(ActivityId, Opaque, Tab, PrevN);
	Prev -&gt;
	    Prev
    end;
search_prev(_ActivityId, _Opaque, _Tab, _N) -&gt;
    '$end_of_table'.

next(ActivityId, Opaque, Tab, Key) -&gt;
    case ?catch_val({Tab, frag_hash}) of
	{'EXIT', _} -&gt;
	    mnesia:next(ActivityId, Opaque, Tab, Key);
	FH -&gt;
	    N = key_to_n(FH, Key),
	    Frag = n_to_frag_name(Tab, N),
	    case mnesia:next(ActivityId, Opaque, Frag, Key) of
		'$end_of_table' -&gt;
		    search_next(ActivityId, Opaque, Tab, N, FH);
		Prev -&gt;
		    Prev
	    end
    end.

search_next(ActivityId, Opaque, Tab, N, FH) when N &lt; FH#frag_state.n_fragments -&gt;
    NextN = N + 1,
    NextFrag = n_to_frag_name(Tab, NextN),
    case mnesia:first(ActivityId, Opaque, NextFrag) of
	'$end_of_table' -&gt;
	    search_next(ActivityId, Opaque, Tab, NextN, FH);
	Next -&gt;
	    Next
    end;
search_next(_ActivityId, _Opaque, _Tab, _N, _FH) -&gt;
    '$end_of_table'.
</fo:block>  <fo:block id="idp3620544" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.11  Appendix C: Fragmented Table Hashing Callback Interface</fo:marker>1.11  Appendix C: Fragmented Table Hashing Callback Interface</fo:block><fo:block id="idp3624096" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.11.1 
      mnesia_frag_hash Callback Behavior</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

-module(mnesia_frag_hash).

%% Fragmented Table Hashing callback functions
-export([
	 init_state/2,
	 add_frag/1,
	 del_frag/1,
	 key_to_frag_number/2,
	 match_spec_to_frag_numbers/2
	]).
</fo:block>    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">

-record(hash_state,
	{n_fragments,
	 next_n_to_split,
	 n_doubles,
	 function}).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

init_state(_Tab, State) when State == undefined -&gt;
    #hash_state{n_fragments     = 1,
		next_n_to_split = 1,
		n_doubles       = 0,
		function        = phash2}.

convert_old_state({hash_state, N, P, L}) -&gt;
    #hash_state{n_fragments     = N,
		next_n_to_split = P,
		n_doubles       = L,
		function        = phash}.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

add_frag(#hash_state{next_n_to_split = SplitN, n_doubles = L, n_fragments = N} = State) -&gt;
    P = SplitN + 1,
    NewN = N + 1,
    State2 = case power2(L) + 1 of
		 P2 when P2 == P -&gt;
		     State#hash_state{n_fragments      = NewN,
				      n_doubles        = L + 1,
				      next_n_to_split = 1};
		 _ -&gt;
		     State#hash_state{n_fragments     = NewN,
				      next_n_to_split = P}
	     end,
    {State2, [SplitN], [NewN]};
add_frag(OldState) -&gt;
    State = convert_old_state(OldState),
    add_frag(State).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

del_frag(#hash_state{next_n_to_split = SplitN, n_doubles = L, n_fragments = N} = State) -&gt;
    P = SplitN - 1,
    if
	P &lt; 1 -&gt;
	    L2 = L - 1,
	    MergeN = power2(L2),
	    State2 = State#hash_state{n_fragments     = N - 1,
				      next_n_to_split = MergeN,
				      n_doubles       = L2},
	    {State2, [N], [MergeN]};
	true -&gt;
	    MergeN = P,
	    State2 = State#hash_state{n_fragments     = N - 1,
				      next_n_to_split = MergeN},
	    {State2, [N], [MergeN]}
	end;
del_frag(OldState) -&gt;
    State = convert_old_state(OldState),
    del_frag(State).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

key_to_frag_number(#hash_state{function = phash, n_fragments = N, n_doubles = L}, Key) -&gt;
    A = erlang:phash(Key, power2(L + 1)),
    if
	A &gt; N -&gt;
	    A - power2(L);
	true -&gt;
	    A
    end;
key_to_frag_number(#hash_state{function = phash2, n_fragments = N, n_doubles = L}, Key) -&gt;
    A = erlang:phash2(Key, power2(L + 1)) + 1,
    if
	A &gt; N -&gt;
	    A - power2(L);
	true -&gt;
	    A
    end;
key_to_frag_number(OldState, Key) -&gt;
    State = convert_old_state(OldState),
    key_to_frag_number(State, Key).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

match_spec_to_frag_numbers(#hash_state{n_fragments = N} = State, MatchSpec) -&gt;
    case MatchSpec of
	[{HeadPat, _, _}] when is_tuple(HeadPat), tuple_size(HeadPat) &gt; 2 -&gt;
	    KeyPat = element(2, HeadPat),
	    case has_var(KeyPat) of
		false -&gt;
		    [key_to_frag_number(State, KeyPat)];
		true -&gt;
		    lists:seq(1, N)
	    end;
	_ -&gt; 
	    lists:seq(1, N)
    end;
match_spec_to_frag_numbers(OldState, MatchSpec) -&gt;
    State = convert_old_state(OldState),
    match_spec_to_frag_numbers(State, MatchSpec).

power2(Y) -&gt;
    1 bsl Y. % trunc(math:pow(2, Y)).
</fo:block>  <fo:block id="idp227024" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">2   
      Reference Manual</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Mnesia application is a distributed Database Management
      System (DBMS), appropriate for telecommunications applications and other
      Erlang applications, which require continuous operation and exhibit soft
      real-time properties.</fo:block>
  <fo:block page-break-before="always" id="idp885200" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">mnesia</fo:marker>mnesia</fo:block>Erlang module</fo:block>
  <fo:block/>
  mnesia
  <fo:block/>
  

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following are some of the most important and attractive
      capabilities provided by Mnesia:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A relational/object hybrid data model that is suitable
       for telecommunications applications.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A DBMS query language, Query List Comprehension (QLC) as
       an add-on library.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Persistence. Tables can be coherently kept on disc and
       in the main memory.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Replication. Tables can be replicated at several nodes.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Atomic transactions. A series of table manipulation
       operations can be grouped into a single atomic transaction.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Location transparency. Programs can be written without
       knowledge of the actual data location.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Extremely fast real-time data searches.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Schema manipulation routines. The DBMS can be
       reconfigured at runtime without stopping the system.
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This Reference Manual describes the Mnesia API. This
      includes functions that define and manipulate Mnesia
      tables.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All functions in this Reference Manual can be used in any
      combination with queries using the list comprehension notation.
      For information about the query notation, see the
      <fo:inline font-style="italic">qlc</fo:inline>
      manual page in STDLIB.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Data in Mnesia is organized as a set of tables. Each table
      has a name that must be an atom. Each table is made up of
      Erlang records. The user is responsible for the record
      definitions. Each table also has a set of properties. The
      following are some of the properties that are associated with each
      table:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">type</fo:inline>. Each table can have <fo:inline font-family="monospace">set</fo:inline>,
          <fo:inline font-family="monospace">ordered_set</fo:inline>, or <fo:inline font-family="monospace">bag</fo:inline> semantics. Notice that
          currently <fo:inline font-family="monospace">ordered_set</fo:inline> is not supported for
          <fo:inline font-family="monospace">disc_only_copies</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a table is of type <fo:inline font-family="monospace">set</fo:inline>, each key leads to
          either one or zero records.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a new item is inserted with the same key as an
          existing record, the old record is overwritten. However,
          if a table is of type <fo:inline font-family="monospace">bag</fo:inline>, each key can map to
          several records. All records in type <fo:inline font-family="monospace">bag</fo:inline> tables are
          unique, only the keys can be duplicated.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">record_name</fo:inline>. All records stored in a table must
          have the same name. The records must be instances of the
          same record type.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ram_copies</fo:inline>. A table can be replicated on a number
          of Erlang nodes. Property <fo:inline font-family="monospace">ram_copies</fo:inline> specifies a
          list of Erlang nodes where RAM copies are kept. These
          copies can be dumped to disc at regular intervals. However,
          updates to these copies are not written to disc on a
          transaction basis.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">disc_copies</fo:inline>. This property
          specifies a list of Erlang nodes where the table is kept in
          RAM and on disc. All updates of the table are
          performed in the actual table and are also logged to disc.
          If a table is of type <fo:inline font-family="monospace">disc_copies</fo:inline> at a certain node,
          the entire table is resident in RAM memory and on disc.
          Each transaction performed on the table is appended to a
          <fo:inline font-family="monospace">LOG</fo:inline> file and written into the RAM table.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">disc_only_copies</fo:inline>. Some, or all, table replicas
          can be kept on disc only. These replicas are considerably
          slower than the RAM-based replicas.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">index</fo:inline>. This is a list of attribute names, or
          integers, which specify the tuple positions on which
          Mnesia is to build and maintain an extra index
          table.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">local_content</fo:inline>. When an application requires
          tables whose contents are local to each node,
          <fo:inline font-family="monospace">local_content</fo:inline> tables can be used. The table name
          is known to all Mnesia nodes, but its content is
          unique on each node. This means that access to such a table
          must be done locally. Set field <fo:inline font-family="monospace">local_content</fo:inline> to
          <fo:inline font-family="monospace">true</fo:inline> to enable the <fo:inline font-family="monospace">local_content</fo:inline>
          behavior. Default is <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">majority</fo:inline>. This attribute is <fo:inline font-family="monospace">true</fo:inline> or
        <fo:inline font-family="monospace">false</fo:inline>; default is <fo:inline font-family="monospace">false</fo:inline>. When <fo:inline font-family="monospace">true</fo:inline>,
        a majority of the table replicas must be available for an
        update to succeed. Majority checking can be enabled on
        tables with mission-critical data, where it is vital to
        avoid inconsistencies because of network splits.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">snmp</fo:inline>. Each (set-based) Mnesia table can be
          automatically turned into a Simple Network Management
          Protocol (SNMP) ordered table as well.
          This property specifies the types of the SNMP keys.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">attributes</fo:inline>. The names of the attributes for the
          records that are inserted in the table.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information about the complete set of table properties
      and their details, see <fo:inline font-family="monospace">mnesia:create_table/2</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This Reference Manual uses a table of persons to illustrate
      various examples. The following record definition is assumed:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-record(person, {name,
                 age = 0,
                 address = unknown,
                 salary = 0,
                 children = []}),</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The first record attribute is the primary key, or key
      for short.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function descriptions are sorted in alphabetical order.
      It is recommended to start to read about
      <fo:inline font-family="monospace">mnesia:create_table/2</fo:inline>, <fo:inline font-family="monospace">mnesia:lock/2</fo:inline>, and
      <fo:inline font-family="monospace">mnesia:activity/4</fo:inline> before you continue and learn
      about the rest.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Writing or deleting in transaction-context creates a local
      copy of each modified record during the transaction. During
      iteration, that is, <fo:inline font-family="monospace">mnesia:fold[lr]/4</fo:inline>,
      <fo:inline font-family="monospace">mnesia:next/2</fo:inline>, <fo:inline font-family="monospace">mnesia:prev/2</fo:inline>, and
      <fo:inline font-family="monospace">mnesia:snmp_get_next_index/2</fo:inline>, Mnesia
      compensates for every written or deleted record, which can
      reduce the performance.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If possible, avoid writing or deleting records in the same
      transaction before iterating over the table.</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp717360">abort(Reason) -&gt; transaction abort</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Makes the transaction silently
          return the tuple <fo:inline font-family="monospace">{aborted, Reason}</fo:inline>.
          Termination of a Mnesia transaction means that
          an exception is thrown to an enclosing <fo:inline font-family="monospace">catch</fo:inline>.
          Thus, the expression <fo:inline font-family="monospace">catch mnesia:abort(x)</fo:inline> does
          not terminate the transaction.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp250432">activate_checkpoint(Args) -&gt; {ok,Name,Nodes} | {error,Reason}</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A checkpoint is a consistent view of the system.
          A checkpoint can be activated on a set of tables.
          This checkpoint can then be traversed and
          presents a view of the system as it existed at the time when
          the checkpoint was activated, even if the tables are
          being or have been manipulated.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Args</fo:inline> is a list of the following tuples:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{name,Name}</fo:inline>. <fo:inline font-family="monospace">Name</fo:inline> is the checkpoint name.
              Each checkpoint must have a name that is unique to the
              associated nodes. The name can be reused only once the
              checkpoint has been deactivated. By default, a name
              that is probably unique is generated.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{max,MaxTabs}</fo:inline>. <fo:inline font-family="monospace">MaxTabs</fo:inline> is a list of
              tables that are to be included in the checkpoint.
              Default is <fo:inline font-family="monospace">[]</fo:inline>. For these tables, the redundancy is
              maximized and checkpoint information is retained together
              with all replicas. The checkpoint becomes more fault
              tolerant if the tables have several replicas. When a new
              replica is added by the schema manipulation
              function <fo:inline font-family="monospace">mnesia:add_table_copy/3</fo:inline>, a retainer is
              also attached automatically.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{min,MinTabs}</fo:inline>. <fo:inline font-family="monospace">MinTabs</fo:inline> is a list of
              tables that are to be included in the checkpoint.
              Default is []. For these tables, the redundancy is
              minimized and the checkpoint information is only retained
              with one replica, preferably on the local node.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{allow_remote,Bool}</fo:inline>. <fo:inline font-family="monospace">false</fo:inline> means that
              all retainers must be local. The checkpoint cannot be
              activated if a table does not reside locally.
              <fo:inline font-family="monospace">true</fo:inline> allows retainers to be allocated on any
              node. Default is <fo:inline font-family="monospace">true</fo:inline>.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{ram_overrides_dump,Bool}</fo:inline>. Only applicable
              for <fo:inline font-family="monospace">ram_copies</fo:inline>. <fo:inline font-family="monospace">Bool</fo:inline> allows you to choose
              to back up the table state as it is in RAM, or as it is
              on disc. <fo:inline font-family="monospace">true</fo:inline> means that the latest committed
              records in RAM are to be included in the checkpoint.
              These are the records that the application accesses.
              <fo:inline font-family="monospace">false</fo:inline> means that the records dumped to <fo:inline font-family="monospace">DAT</fo:inline>
              files are to be included in the checkpoint. These
              records are loaded at startup. Default is <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">{ok,Name,Nodes}</fo:inline> or <fo:inline font-family="monospace">{error,Reason}</fo:inline>.
          <fo:inline font-family="monospace">Name</fo:inline> is the (possibly generated) checkpoint name.
          <fo:inline font-family="monospace">Nodes</fo:inline> are the nodes that
          are involved in the checkpoint. Only nodes that keep a
          checkpoint retainer know about the checkpoint.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp746256">activity(AccessContext, Fun [, Args]) -&gt; ResultOfFun | exit(Reason)</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calls <fo:inline font-family="monospace">mnesia:activity(AccessContext, Fun, Args,
          AccessMod)</fo:inline>, where <fo:inline font-family="monospace">AccessMod</fo:inline> is the default
          access callback module obtained by
          <fo:inline font-family="monospace">mnesia:system_info(access_module)</fo:inline>. <fo:inline font-family="monospace">Args</fo:inline>
          defaults to <fo:inline font-family="monospace">[]</fo:inline> (empty list).</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp369744">activity(AccessContext, Fun, Args, AccessMod) -&gt; ResultOfFun | exit(Reason)</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Executes the functional object <fo:inline font-family="monospace">Fun</fo:inline>
          with argument <fo:inline font-family="monospace">Args</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The code that executes inside the activity can
          consist of a series of table manipulation functions, which are
          performed in an <fo:inline font-family="monospace">AccessContext</fo:inline>. Currently, the following
          access contexts are supported:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">transaction</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Short for <fo:inline font-family="monospace">{transaction, infinity}</fo:inline></fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{transaction, Retries}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calls <fo:inline font-family="monospace">mnesia:transaction(Fun, Args, Retries)</fo:inline>.
              Notice that the result from <fo:inline font-family="monospace">Fun</fo:inline> is
              returned if the transaction is successful (atomic),
              otherwise the function exits with an abort reason.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sync_transaction</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Short for <fo:inline font-family="monospace">{sync_transaction, infinity}</fo:inline></fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{sync_transaction, Retries}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calls <fo:inline font-family="monospace">mnesia:sync_transaction(Fun, Args, Retries)</fo:inline>.
              Notice that the result from <fo:inline font-family="monospace">Fun</fo:inline> is
              returned if the transaction is successful (atomic),
              otherwise the function exits with an abort reason.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">async_dirty</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calls <fo:inline font-family="monospace">mnesia:async_dirty(Fun, Args)</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sync_dirty</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calls <fo:inline font-family="monospace">mnesia:sync_dirty(Fun, Args)</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ets</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calls <fo:inline font-family="monospace">mnesia:ets(Fun, Args)</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function (<fo:inline font-family="monospace">mnesia:activity/4</fo:inline>) differs in an
          important way from the functions <fo:inline font-family="monospace">mnesia:transaction</fo:inline>,
          <fo:inline font-family="monospace">mnesia:sync_transaction</fo:inline>,
          <fo:inline font-family="monospace">mnesia:async_dirty</fo:inline>, <fo:inline font-family="monospace">mnesia:sync_dirty</fo:inline>, and
          <fo:inline font-family="monospace">mnesia:ets</fo:inline>. Argument <fo:inline font-family="monospace">AccessMod</fo:inline>
          is the name of a callback module, which implements the
          <fo:inline font-family="monospace">mnesia_access</fo:inline> behavior.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Mnesia forwards calls to the following functions:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>mnesia:lock/2 (read_lock_table/1, write_lock_table/1)
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>mnesia:write/3 (write/1, s_write/1)
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>mnesia:delete/3 (delete/1, s_delete/1)
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>mnesia:delete_object/3 (delete_object/1, s_delete_object/1)
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>mnesia:read/3 (read/1, wread/1)
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>mnesia:match_object/3 (match_object/1)
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>mnesia:all_keys/1
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>mnesia:first/1
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>mnesia:last/1
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>mnesia:prev/2
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>mnesia:next/2
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>mnesia:index_match_object/4 (index_match_object/2)
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>mnesia:index_read/3
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>mnesia:table_info/2
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">to the corresponding:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>AccessMod:lock(ActivityId, Opaque, LockItem, LockKind)
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>AccessMod:write(ActivityId, Opaque, Tab, Rec, LockKind)
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>AccessMod:delete(ActivityId, Opaque, Tab, Key, LockKind)
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>AccessMod:delete_object(ActivityId, Opaque, Tab, RecXS,
           LockKind)
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>AccessMod:read(ActivityId, Opaque, Tab, Key, LockKind)
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>AccessMod:match_object(ActivityId, Opaque, Tab, Pattern,
           LockKind)
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>AccessMod:all_keys(ActivityId, Opaque, Tab, LockKind)
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>AccessMod:first(ActivityId, Opaque, Tab)
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>AccessMod:last(ActivityId, Opaque, Tab)
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>AccessMod:prev(ActivityId, Opaque, Tab, Key)
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>AccessMod:next(ActivityId, Opaque, Tab, Key)
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>AccessMod:index_match_object(ActivityId, Opaque, Tab,
           Pattern, Attr, LockKind)
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>AccessMod:index_read(ActivityId, Opaque, Tab,
           SecondaryKey, Attr, LockKind)
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>AccessMod:table_info(ActivityId, Opaque, Tab, InfoItem)
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ActivityId</fo:inline> is a record that represents the identity
          of the enclosing Mnesia activity. The first field
          (obtained with <fo:inline font-family="monospace">element(1, ActivityId)</fo:inline>) contains an
          atom, which can be interpreted as the activity type:
          <fo:inline font-family="monospace">ets</fo:inline>, <fo:inline font-family="monospace">async_dirty</fo:inline>, <fo:inline font-family="monospace">sync_dirty</fo:inline>, or
          <fo:inline font-family="monospace">tid</fo:inline>. <fo:inline font-family="monospace">tid</fo:inline> means that the activity is a
          transaction. The structure of the rest of the identity
          record is internal to Mnesia.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Opaque</fo:inline> is an opaque data structure that is internal
          to Mnesia.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp508384">add_table_copy(Tab, Node, Type) -&gt; {aborted, R} | {atomic, ok}</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Makes another copy of a table at the node <fo:inline font-family="monospace">Node</fo:inline>.
          Argument <fo:inline font-family="monospace">Type</fo:inline> must be either of the atoms
          <fo:inline font-family="monospace">ram_copies</fo:inline>, <fo:inline font-family="monospace">disc_copies</fo:inline>, or
          <fo:inline font-family="monospace">disc_only_copies</fo:inline>. For example, the following call
          ensures that a disc replica of the <fo:inline font-family="monospace">person</fo:inline> table also
          exists at node <fo:inline font-family="monospace">Node</fo:inline>:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
mnesia:add_table_copy(person, Node, disc_copies)</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function can also be used to add a replica of the
          table named <fo:inline font-family="monospace">schema</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp515600">add_table_index(Tab, AttrName) -&gt; {aborted, R} | {atomic, ok}</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Table indexes can be used whenever the user
          wants to use frequently some other field than the key field
          to look up records. If this other field has an associated
          index, these lookups can occur in constant time
          and space. For example, if your application wishes to use
          field <fo:inline font-family="monospace">age</fo:inline> to find efficiently all persons with
          a specific age, it can be a good idea to have an index on
          field <fo:inline font-family="monospace">age</fo:inline>. This can be done with the following
          call:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
mnesia:add_table_index(person, age)</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Indexes do not come for free. They occupy space that is
	  proportional to the table size, and they cause insertions
          into the table to execute slightly slower.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp634768">all_keys(Tab) -&gt; KeyList | transaction abort</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of all keys in the table named <fo:inline font-family="monospace">Tab</fo:inline>.
          The semantics of this function is context-sensitive.
          For more information, see <fo:inline font-family="monospace">mnesia:activity/4</fo:inline>. In
          transaction-context, it acquires a read lock on the entire
          table.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp638240">async_dirty(Fun, [, Args]) -&gt; ResultOfFun | exit(Reason)</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calls the <fo:inline font-family="monospace">Fun</fo:inline> in a context that is not protected by
          a transaction. The Mnesia function calls performed in
          the <fo:inline font-family="monospace">Fun</fo:inline> are mapped to the corresponding dirty
          functions. This still involves logging, replication, and
          subscriptions, but there is no locking, local transaction
          storage, or commit protocols involved. Checkpoint retainers
          and indexes are updated, but they are updated dirty. As
          for normal <fo:inline font-family="monospace">mnesia:dirty_*</fo:inline> operations, the operations
          are performed semi-asynchronously. For details, see
          <fo:inline font-family="monospace">mnesia:activity/4</fo:inline> and the User's Guide.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Mnesia tables can be manipulated without
          using transactions. This has some serious disadvantages, but
          is considerably faster, as the transaction manager is not
          involved and no locks are set. A dirty operation does,
          however, guarantee a certain level of consistency, and
          the dirty operations cannot return garbled records.
          All dirty operations provide location transparency
          to the programmer, and a program does not have to be aware
          of the whereabouts of a certain table to function.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that it is more than ten times more efficient to
          read records dirty than within a transaction.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Depending on the application, it can be a good idea to use
          the dirty functions for certain operations. Almost all
          Mnesia functions that can be called within
          transactions have a dirty equivalent, which is much more
          efficient.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">However, notice that there is a risk that the database can
          be left in an inconsistent state if dirty operations are
          used to update it. Dirty operations are only to be used
          for performance reasons when it is absolutely necessary.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that calling (nesting) <fo:inline font-family="monospace">mnesia:[a]sync_dirty</fo:inline>
          inside a transaction-context inherits the transaction
          semantics.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp647296">backup(Opaque [, BackupMod]) -&gt; ok | {error,Reason}</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Activates a new checkpoint covering all Mnesia tables,
          including the schema, with maximum degree of redundancy, and
          performs a backup using <fo:inline font-family="monospace">backup_checkpoint/2/3</fo:inline>. The
          default value of the backup callback module <fo:inline font-family="monospace">BackupMod</fo:inline>
          is obtained by <fo:inline font-family="monospace">mnesia:system_info(backup_module)</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1722640">backup_checkpoint(Name, Opaque [, BackupMod]) -&gt; ok | {error,Reason}</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The tables are backed up to external media using backup
          module <fo:inline font-family="monospace">BackupMod</fo:inline>. Tables with the local contents
          property are backed up as they exist on the current
          node. <fo:inline font-family="monospace">BackupMod</fo:inline> is the default backup callback
          module obtained by
          <fo:inline font-family="monospace">mnesia:system_info(backup_module)</fo:inline>. For information
          about the exact callback interface (the
          <fo:inline font-family="monospace">mnesia_backup behavior</fo:inline>), see the User's Guide.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1727136">change_config(Config, Value) -&gt; {error, Reason} | {ok, ReturnValue}</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Config</fo:inline> is to be an atom of the following
          configuration parameters:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">extra_db_nodes</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Value</fo:inline> is a list of nodes that Mnesia
              is to try to connect to. <fo:inline font-family="monospace">ReturnValue</fo:inline> is those
              nodes in <fo:inline font-family="monospace">Value</fo:inline> that Mnesia is connected
              to.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that this function must only be used to connect
              to newly started RAM nodes (N.D.R.S.N.) with an empty
              schema. If, for example, this function is used after
              the network has been partitioned, it can lead to
              inconsistent tables.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that Mnesia can be connected to other
              nodes than those returned in <fo:inline font-family="monospace">ReturnValue</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">dc_dump_limit</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Value</fo:inline> is a number. See the description in
            <fo:inline font-style="italic">Section
            Configuration Parameters</fo:inline>. <fo:inline font-family="monospace">ReturnValue</fo:inline>
            is the new value. Notice that this configuration
            parameter is not persistent. It is lost when
            Mnesia has stopped.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1737600">change_table_access_mode(Tab, AccessMode) -&gt; {aborted, R} | {atomic, ok}</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">AcccessMode</fo:inline> is by default the atom
          <fo:inline font-family="monospace">read_write</fo:inline> but it can also be set to the atom
          <fo:inline font-family="monospace">read_only</fo:inline>. If <fo:inline font-family="monospace">AccessMode</fo:inline> is set to
          <fo:inline font-family="monospace">read_only</fo:inline>, updates to the table cannot be
          performed. At startup, Mnesia always loads
          <fo:inline font-family="monospace">read_only</fo:inline> tables locally regardless of when and if
          Mnesia is terminated on other nodes.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1793360">change_table_copy_type(Tab, Node, To) -&gt; {aborted, R} | {atomic, ok}</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
mnesia:change_table_copy_type(person, node(), disc_copies)</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Transforms the <fo:inline font-family="monospace">person</fo:inline> table from a RAM table into
          a disc-based table at <fo:inline font-family="monospace">Node</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function can also be used to change the storage type
          of the table named <fo:inline font-family="monospace">schema</fo:inline>. The schema table can only
          have <fo:inline font-family="monospace">ram_copies</fo:inline> or <fo:inline font-family="monospace">disc_copies</fo:inline> as the storage
          type. If the storage type of the schema is <fo:inline font-family="monospace">ram_copies</fo:inline>,
          no other table can be disc-resident on that node.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1800032">change_table_load_order(Tab, LoadOrder) -&gt; {aborted, R} | {atomic, ok}</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">LoadOrder</fo:inline> priority is by default <fo:inline font-family="monospace">0</fo:inline> (zero)
          but can be set to any integer. The tables with the highest
          <fo:inline font-family="monospace">LoadOrder</fo:inline> priority are loaded first at startup.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1804000">change_table_majority(Tab, Majority) -&gt; {aborted, R} | {atomic, ok}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Majority</fo:inline> must be a boolean. Default is <fo:inline font-family="monospace">false</fo:inline>.
          When <fo:inline font-family="monospace">true</fo:inline>, a majority of the table replicas must be
          available for an update to succeed. When used on fragmented
          tables, <fo:inline font-family="monospace">Tab</fo:inline> must be the base table name. Directly
          changing the majority setting on individual fragments is
          not allowed.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1808048">clear_table(Tab) -&gt; {aborted, R} | {atomic, ok}</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Deletes all entries in the table <fo:inline font-family="monospace">Tab</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1811184">create_schema(DiscNodes) -&gt; ok | {error,Reason}</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a new database on disc. Various files are
          created in the local Mnesia directory of each node.
          Notice that the directory must be unique for each node.
          Two nodes must never share the same directory. If possible,
          use a local disc device to improve performance.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">mnesia:create_schema/1</fo:inline> fails if any of the
          Erlang nodes given as <fo:inline font-family="monospace">DiscNodes</fo:inline> are not alive, if
          Mnesia is running on any of the nodes, or if any
          of the nodes already have a schema. Use
          <fo:inline font-family="monospace">mnesia:delete_schema/1</fo:inline> to get rid of old faulty
          schemas.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that only nodes with disc are to be included in
          <fo:inline font-family="monospace">DiscNodes</fo:inline>. Disc-less nodes, that is, nodes where
          all tables including the schema only resides in RAM,
          must not be included.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1408624">create_table(Name, TabDef) -&gt; {atomic, ok} | {aborted, Reason}</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a Mnesia table called
          <fo:inline font-family="monospace">Name</fo:inline> according to argument <fo:inline font-family="monospace">TabDef</fo:inline>. This
          list must be a list of <fo:inline font-family="monospace">{Item, Value}</fo:inline> tuples,
          where the following values are allowed:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{access_mode, Atom}</fo:inline>. The access mode is by
              default the atom <fo:inline font-family="monospace">read_write</fo:inline> but it can also be
              set to the atom <fo:inline font-family="monospace">read_only</fo:inline>. If <fo:inline font-family="monospace">AccessMode</fo:inline>
              is set to <fo:inline font-family="monospace">read_only</fo:inline>, updates to the table
              cannot be performed.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">At startup, Mnesia always loads <fo:inline font-family="monospace">read_only</fo:inline>
              table locally regardless of when and if Mnesia is
              terminated on other nodes. This argument returns the
              access mode of the table. The access mode can be
              <fo:inline font-family="monospace">read_only</fo:inline> or <fo:inline font-family="monospace">read_write</fo:inline>.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{attributes, AtomList}</fo:inline> is a list of the
              attribute names for the records that are supposed to
              populate the table. Default is <fo:inline font-family="monospace">[key, val]</fo:inline>.
              The table must at least have one extra attribute in
              addition to the key.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When accessing single attributes in a record, it is
              not necessary, or even recommended, to hard code any
              attribute names as atoms. Use construct
              <fo:inline font-family="monospace">record_info(fields, RecordName)</fo:inline> instead. It can
              be used for records of type <fo:inline font-family="monospace">RecordName</fo:inline>.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{disc_copies, Nodelist}</fo:inline>, where
              <fo:inline font-family="monospace">Nodelist</fo:inline> is a list of the nodes where this table
              is supposed to have disc copies. If a table replica is
              of type <fo:inline font-family="monospace">disc_copies</fo:inline>, all write operations on this
              particular replica of the table are written to disc and
              to the RAM copy of the table.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is possible to have a replicated table of type
              <fo:inline font-family="monospace">disc_copies</fo:inline> on one node and another type on
              another node.  Default is <fo:inline font-family="monospace">[]</fo:inline>.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{disc_only_copies, Nodelist}</fo:inline>, where
              <fo:inline font-family="monospace">Nodelist</fo:inline> is a list of the nodes where this table
              is supposed to have <fo:inline font-family="monospace">disc_only_copies</fo:inline>. A disc only
              table replica is kept on disc only and unlike the other
              replica types, the contents of the replica do not
              reside in RAM. These replicas are considerably slower
              than replicas held in RAM.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{index, Intlist}</fo:inline>, where
              <fo:inline font-family="monospace">Intlist</fo:inline> is a list of attribute names (atoms) or
              record fields for which Mnesia is to build and
              maintain an extra index table. The <fo:inline font-family="monospace">qlc</fo:inline> query
              compiler <fo:inline font-weight="bold">may</fo:inline> be able to optimize queries
              if there are indexes available.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{load_order, Integer}</fo:inline>. The load order
              priority is by default <fo:inline font-family="monospace">0</fo:inline> (zero) but can be set
              to any integer. The tables with the highest load order
              priority are loaded first at startup.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{majority, Flag}</fo:inline>, where <fo:inline font-family="monospace">Flag</fo:inline> must be a
              boolean. If <fo:inline font-family="monospace">true</fo:inline>, any (non-dirty) update to the
              table is aborted, unless a majority of the table
              replicas are available for the commit. When used on a
              fragmented table, all fragments are given the same
              the same majority setting.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{ram_copies, Nodelist}</fo:inline>, where
              <fo:inline font-family="monospace">Nodelist</fo:inline> is a list of the nodes where this table
              is supposed to have RAM copies. A table replica of type
              <fo:inline font-family="monospace">ram_copies</fo:inline> is not written to disc on a per
              transaction basis. <fo:inline font-family="monospace">ram_copies</fo:inline> replicas can be
              dumped to disc with the function
              <fo:inline font-family="monospace">mnesia:dump_tables(Tabs)</fo:inline>. Default value for
              this attribute is <fo:inline font-family="monospace">[node()]</fo:inline>.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{record_name, Name}</fo:inline>, where <fo:inline font-family="monospace">Name</fo:inline> must
              be an atom. All records stored in the table must have
              this name as the first element. It defaults to the same
              name as the table name.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{snmp, SnmpStruct}</fo:inline>. For a description of
              <fo:inline font-family="monospace">SnmpStruct</fo:inline>, see <fo:inline font-family="monospace">mnesia:snmp_open_table/2</fo:inline>.
              If this attribute is present in <fo:inline font-family="monospace">ArgList</fo:inline> to
              <fo:inline font-family="monospace">mnesia:create_table/2</fo:inline>, the table is immediately
              accessible by SNMP. Therefore applications that use
              SNMP to manipulate and control the system can be
              designed easily, since Mnesia provides a
              direct mapping between the logical tables that make up
              an SNMP control application and the physical data that
              makes up a Mnesia table.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{storage_properties, [{Backend, Properties}]</fo:inline>
            forwards more properties to the back end storage.
            <fo:inline font-family="monospace">Backend</fo:inline> can currently be <fo:inline font-family="monospace">ets</fo:inline> or <fo:inline font-family="monospace">dets</fo:inline>.
            <fo:inline font-family="monospace">Properties</fo:inline> is a list of options sent to the
            back end storage during table creation. <fo:inline font-family="monospace">Properties</fo:inline>
            cannot contain properties already used by Mnesia,
            such as <fo:inline font-family="monospace">type</fo:inline> or <fo:inline font-family="monospace">named_table</fo:inline>.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For example:</fo:block>
            <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
mnesia:create_table(table, [{ram_copies, [node()]}, {disc_only_copies, nodes()},
       {storage_properties,
        [{ets, [compressed]}, {dets, [{auto_save, 5000}]} ]}])</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{type, Type}</fo:inline>, where <fo:inline font-family="monospace">Type</fo:inline> must be
              either of the atoms <fo:inline font-family="monospace">set</fo:inline>, <fo:inline font-family="monospace">ordered_set</fo:inline>, or
              <fo:inline font-family="monospace">bag</fo:inline>. Default is <fo:inline font-family="monospace">set</fo:inline>. In a
              <fo:inline font-family="monospace">set</fo:inline>, all records have unique keys. In a
              <fo:inline font-family="monospace">bag</fo:inline>, several records can have the same key, but
              the record content is unique. If a non-unique record is
              stored, the old conflicting records are overwritten.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that currently <fo:inline font-family="monospace">ordered_set</fo:inline> is not
              supported for <fo:inline font-family="monospace">disc_only_copies</fo:inline>.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{local_content, Bool}</fo:inline>, where <fo:inline font-family="monospace">Bool</fo:inline> is
              <fo:inline font-family="monospace">true</fo:inline> or <fo:inline font-family="monospace">false</fo:inline>. Default is <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For example, the following call creates the <fo:inline font-family="monospace">person</fo:inline>
          table (defined earlier) and replicates it on two nodes:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
mnesia:create_table(person,
    [{ram_copies, [N1, N2]},
     {attributes, record_info(fields, person)}]).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If it is required that Mnesia must build and
          maintain an extra index table on attribute <fo:inline font-family="monospace">address</fo:inline>
          of all the <fo:inline font-family="monospace">person</fo:inline> records that are inserted in the
          table, the following code would be issued:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
mnesia:create_table(person,
    [{ram_copies, [N1, N2]},
     {index, [address]},
     {attributes, record_info(fields, person)}]).
   </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The specification of <fo:inline font-family="monospace">index</fo:inline> and <fo:inline font-family="monospace">attributes</fo:inline>
          can be hard-coded as <fo:inline font-family="monospace">{index, [2]}</fo:inline> and
          <fo:inline font-family="monospace">{attributes, [name, age, address, salary, children]}</fo:inline>,
          respectively.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">mnesia:create_table/2</fo:inline> writes records into the
          table <fo:inline font-family="monospace">schema</fo:inline>. This function, and all other
          schema manipulation functions, are implemented with the
          normal transaction management system. This guarantees that
          schema updates are performed on all nodes in an atomic
          manner.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1754608">deactivate_checkpoint(Name) -&gt; ok | {error, Reason}</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The checkpoint is automatically deactivated when some of
          the tables involved have no retainer attached to them. This
          can occur when nodes go down or when a replica is deleted.
          Checkpoints are also deactivated with this function.
          <fo:inline font-family="monospace">Name</fo:inline> is the name of an active checkpoint.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1758000">del_table_copy(Tab, Node) -&gt; {aborted, R} | {atomic, ok}</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Deletes the replica of table <fo:inline font-family="monospace">Tab</fo:inline> at node <fo:inline font-family="monospace">Node</fo:inline>.
          When the last replica is deleted with this
          function, the table disappears entirely.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function can also be used to delete a replica of
          the table named <fo:inline font-family="monospace">schema</fo:inline>. The Mnesia node is
          then removed. Notice that Mnesia must be
          stopped on the node first.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1763536">del_table_index(Tab, AttrName) -&gt; {aborted, R} | {atomic, ok}</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Deletes the index on attribute with name
          <fo:inline font-family="monospace">AttrName</fo:inline> in a table.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1766624">delete({Tab, Key}) -&gt; transaction abort | ok</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calls <fo:inline font-family="monospace">mnesia:delete(Tab, Key, write)</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1770656">delete(Tab, Key, LockKind) -&gt; transaction abort | ok</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Deletes all records in table <fo:inline font-family="monospace">Tab</fo:inline> with the key
          <fo:inline font-family="monospace">Key</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The semantics of this function is context-sensitive.
          For details, see <fo:inline font-family="monospace">mnesia:activity/4</fo:inline>. In
          transaction-context, it acquires a lock of type
          <fo:inline font-family="monospace">LockKind</fo:inline> in the record.
          Currently, the lock types <fo:inline font-family="monospace">write</fo:inline> and
          <fo:inline font-family="monospace">sticky_write</fo:inline> are supported.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1777296">delete_object(Record) -&gt; transaction abort | ok</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calls <fo:inline font-family="monospace">mnesia:delete_object(Tab, Record, write)</fo:inline>, where
          <fo:inline font-family="monospace">Tab</fo:inline> is <fo:inline font-family="monospace">element(1, Record)</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp569296">delete_object(Tab, Record, LockKind) -&gt; transaction abort | ok</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a table is of type <fo:inline font-family="monospace">bag</fo:inline>, it can sometimes be
          needed to delete only some of the records with a certain
          key. This can be done with the function <fo:inline font-family="monospace">delete_object/3</fo:inline>.
          A complete record must be supplied to this function.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The semantics of this function is context-sensitive.
          For details, see <fo:inline font-family="monospace">mnesia:activity/4</fo:inline>. In
          transaction-context, it acquires a lock of type
          <fo:inline font-family="monospace">LockKind</fo:inline> on the record.
          Currently, the lock types <fo:inline font-family="monospace">write</fo:inline> and
          <fo:inline font-family="monospace">sticky_write</fo:inline> are supported.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp575088">delete_schema(DiscNodes) -&gt; ok | {error,Reason}</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Deletes a database created with
          <fo:inline font-family="monospace">mnesia:create_schema/1</fo:inline>.
          <fo:inline font-family="monospace">mnesia:delete_schema/1</fo:inline> fails if any of the Erlang
          nodes given as <fo:inline font-family="monospace">DiscNodes</fo:inline> are not alive, or if
          Mnesia is running on any of the nodes.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">After the database is deleted, it can still be possible
          to start Mnesia as a disc-less node. This depends
          on how configuration parameter <fo:inline font-family="monospace">schema_location</fo:inline> is
          set.</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Use this function with extreme caution, as it makes
            existing persistent data obsolete. Think twice before
            using it.</fo:block>
        </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp581072">delete_table(Tab) -&gt; {aborted, Reason} | {atomic, ok}</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Permanently deletes all replicas of table <fo:inline font-family="monospace">Tab</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp584560">dirty_all_keys(Tab) -&gt; KeyList | exit({aborted, Reason})</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Dirty equivalent of the function <fo:inline font-family="monospace">mnesia:all_keys/1</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp587648">dirty_delete({Tab, Key}) -&gt; ok | exit({aborted, Reason})</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calls <fo:inline font-family="monospace">mnesia:dirty_delete(Tab, Key)</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp590784">dirty_delete(Tab, Key) -&gt; ok | exit({aborted, Reason})</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Dirty equivalent of the function <fo:inline font-family="monospace">mnesia:delete/3</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp593472">dirty_delete_object(Record)</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calls <fo:inline font-family="monospace">mnesia:dirty_delete_object(Tab, Record)</fo:inline>,
          where <fo:inline font-family="monospace">Tab</fo:inline> is <fo:inline font-family="monospace">element(1, Record)</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp597552">dirty_delete_object(Tab, Record)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Dirty equivalent of the function <fo:inline font-family="monospace">mnesia:delete_object/3</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp600288">dirty_first(Tab) -&gt;  Key | exit({aborted, Reason})</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Records in <fo:inline font-family="monospace">set</fo:inline> or <fo:inline font-family="monospace">bag</fo:inline> tables are not ordered. 
          However, there is an ordering of the records that is unknown
          to the user. Therefore, a table can be traversed by this
          function with the function <fo:inline font-family="monospace">mnesia:dirty_next/2</fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If there are no records in the table, this function
          returns the atom <fo:inline font-family="monospace">'$end_of_table'</fo:inline>. It is therefore
          highly undesirable, but not disallowed, to use this atom
          as the key for any user records.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp605424">dirty_index_match_object(Pattern, Pos)</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts
          <fo:inline font-family="monospace">mnesia:dirty_index_match_object(Tab, Pattern, Pos)</fo:inline>,
          where <fo:inline font-family="monospace">Tab</fo:inline> is <fo:inline font-family="monospace">element(1, Pattern)</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp609472">dirty_index_match_object(Tab, Pattern, Pos)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Dirty equivalent of the function
          <fo:inline font-family="monospace">mnesia:index_match_object/4</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp612128">dirty_index_read(Tab, SecondaryKey, Pos)</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Dirty equivalent of the function
          <fo:inline font-family="monospace">mnesia:index_read/3</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp615200">dirty_last(Tab) -&gt; Key | exit({aborted, Reason})</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Works exactly like <fo:inline font-family="monospace">mnesia:dirty_first/1</fo:inline> but returns
          the last object in Erlang term order for the <fo:inline font-family="monospace">ordered_set</fo:inline>
          table type. For all other table types,
          <fo:inline font-family="monospace">mnesia:dirty_first/1</fo:inline> and
          <fo:inline font-family="monospace">mnesia:dirty_last/1</fo:inline> are synonyms.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp619552">dirty_match_object(Pattern) -&gt; RecordList | exit({aborted, Reason})</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calls <fo:inline font-family="monospace">mnesia:dirty_match_object(Tab, Pattern)</fo:inline>,
          where <fo:inline font-family="monospace">Tab</fo:inline> is <fo:inline font-family="monospace">element(1, Pattern)</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1176976">dirty_match_object(Tab, Pattern) -&gt; RecordList | exit({aborted, Reason})</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Dirty equivalent of the function
          <fo:inline font-family="monospace">mnesia:match_object/3</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1179616">dirty_next(Tab, Key) -&gt; Key | exit({aborted, Reason})</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Traverses a table and
          performs operations on all records in the table.
          When the end of the table is reached, the special key
          <fo:inline font-family="monospace">'$end_of_table'</fo:inline> is returned. Otherwise, the function
          returns a key that can be used to read the actual record. The
          behavior is undefined if another Erlang process performs write
          operations on the table while it is being traversed with the
          function <fo:inline font-family="monospace">mnesia:dirty_next/2</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1183584">dirty_prev(Tab, Key) -&gt; Key | exit({aborted, Reason})</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Works exactly like <fo:inline font-family="monospace">mnesia:dirty_next/2</fo:inline> but returns
          the previous object in Erlang term order for the
          <fo:inline font-family="monospace">ordered_set</fo:inline> table type. For all other table types,
          <fo:inline font-family="monospace">mnesia:dirty_next/2</fo:inline> and
          <fo:inline font-family="monospace">mnesia:dirty_prev/2</fo:inline> are synonyms.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1187984">dirty_read({Tab, Key}) -&gt; ValueList | exit({aborted, Reason}</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calls <fo:inline font-family="monospace">mnesia:dirty_read(Tab, Key)</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1191184">dirty_read(Tab, Key) -&gt; ValueList | exit({aborted, Reason}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Dirty equivalent of the function <fo:inline font-family="monospace">mnesia:read/3</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1193936">dirty_select(Tab, MatchSpec) -&gt; ValueList | exit({aborted, Reason}</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Dirty equivalent of the function <fo:inline font-family="monospace">mnesia:select/2</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1198048">dirty_slot(Tab, Slot) -&gt; RecordList | exit({aborted, Reason})</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Traverses a table in a
          manner similar to the function <fo:inline font-family="monospace">mnesia:dirty_next/2</fo:inline>.
          A table has a number of slots that range from 0 (zero) to
          an unknown upper bound. The function
          <fo:inline font-family="monospace">mnesia:dirty_slot/2</fo:inline> returns the special atom
          <fo:inline font-family="monospace">'$end_of_table'</fo:inline> when the end of the table is reached.
          The behavior of this function is undefined if a write
          operation is performed on the table while it is being
          traversed.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1202896">dirty_update_counter({Tab, Key}, Incr) -&gt; NewVal | exit({aborted, Reason})</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calls <fo:inline font-family="monospace">mnesia:dirty_update_counter(Tab, Key, Incr)</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1205984">dirty_update_counter(Tab, Key, Incr) -&gt; NewVal | exit({aborted, Reason})</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Mnesia has no special counter records. However,
          records of the form <fo:inline font-family="monospace">{Tab, Key, Integer}</fo:inline> can be used
          as (possibly disc-resident) counters when <fo:inline font-family="monospace">Tab</fo:inline> is a
          <fo:inline font-family="monospace">set</fo:inline>. This function updates a counter with a positive
          or negative number. However, counters can never become less
          than zero. There are two significant differences between
          this function and the action of first reading the record,
          performing the arithmetics, and then writing the record:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>It is much more efficient.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">mnesia:dirty_update_counter/3</fo:inline> is performed
           as an atomic operation although it is not protected
           by a transaction.
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If two processes perform <fo:inline font-family="monospace">mnesia:dirty_update_counter/3</fo:inline>
          simultaneously, both updates take effect without the
          risk of losing one of the updates. The new value
          <fo:inline font-family="monospace">NewVal</fo:inline> of the counter is returned.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Key</fo:inline> do not exists, a new record is created with
          value <fo:inline font-family="monospace">Incr</fo:inline> if it is larger than 0, otherwise it is
          set to 0.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1214736">dirty_write(Record) -&gt; ok | exit({aborted, Reason})</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calls <fo:inline font-family="monospace">mnesia:dirty_write(Tab, Record)</fo:inline>,
          where <fo:inline font-family="monospace">Tab</fo:inline> is <fo:inline font-family="monospace">element(1, Record)</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1218768">dirty_write(Tab, Record) -&gt; ok | exit({aborted, Reason})</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Dirty equivalent of the function <fo:inline font-family="monospace">mnesia:write/3</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1221536">dump_log() -&gt; dumped</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Performs a user-initiated dump of the local log file.
          This is usually not necessary, as Mnesia by default
          manages this automatically. See configuration parameters
          <fo:inline font-style="italic">dump_log_time_threshold</fo:inline>
          and
          <fo:inline font-style="italic">dump_log_write_threshold</fo:inline>.
          </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1225648">dump_tables(TabList) -&gt; {atomic, ok} | {aborted, Reason}</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Dumps a set of <fo:inline font-family="monospace">ram_copies</fo:inline> tables
          to disc. The next time the system is started, these tables
          are initiated with the data found in the files that are the
          result of this dump. None of the tables can have
          disc-resident replicas.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1229072">dump_to_textfile(Filename)</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Dumps all local tables of a Mnesia system into a
          text file, which can be edited (by a normal text editor)
          and then be reloaded with
          <fo:inline font-family="monospace">mnesia:load_textfile/1</fo:inline>. Only use this function for
          educational purposes. Use other functions to deal with real
          backups.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1232480">error_description(Error) -&gt; String</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All Mnesia transactions, including all the schema
          update functions, either return value <fo:inline font-family="monospace">{atomic, Val}</fo:inline>
          or the tuple <fo:inline font-family="monospace">{aborted, Reason}</fo:inline>. <fo:inline font-family="monospace">Reason</fo:inline> can
          be either of the atoms in the following list. The
          function <fo:inline font-family="monospace">error_description/1</fo:inline> returns a descriptive
          string that describes the error.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">nested_transaction</fo:inline>. Nested transactions are
           not allowed in this context.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">badarg</fo:inline>. Bad or invalid argument, possibly
           bad type.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">no_transaction</fo:inline>. Operation not allowed
           outside transactions.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">combine_error</fo:inline>. Table options illegally
           combined.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">bad_index</fo:inline>. Index already exists, or was out
           of bounds.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">already_exists</fo:inline>. Schema option to be activated
           is already on.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">index_exists</fo:inline>. Some operations cannot be
           performed on tables with an index.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">no_exists</fo:inline>. Tried to perform operation on
           non-existing (not-alive) item.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">system_limit</fo:inline>. A system limit was exhausted.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">mnesia_down</fo:inline>. A transaction involves records
           on a remote node, which became unavailable before the
           transaction was completed. Records are no longer
           available elsewhere in the network.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">not_a_db_node</fo:inline>. A node was mentioned that does
           not exist in the schema.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">bad_type</fo:inline>. Bad type specified in argument.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">node_not_running</fo:inline>. Node is not running.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">truncated_binary_file</fo:inline>. Truncated binary in file.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">active</fo:inline>. Some delete operations require that
           all active records are removed.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">illegal</fo:inline>. Operation not supported on this
           record.
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Error</fo:inline> can be <fo:inline font-family="monospace">Reason</fo:inline>,
          <fo:inline font-family="monospace">{error, Reason}</fo:inline>, or <fo:inline font-family="monospace">{aborted, Reason}</fo:inline>.
          <fo:inline font-family="monospace">Reason</fo:inline> can be an atom or a tuple with <fo:inline font-family="monospace">Reason</fo:inline>
          as an atom in the first field.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following examples illustrate a function that returns an error,
          and the method to retrieve more detailed error information:</fo:block>
          <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The function
             <fo:inline font-style="italic">mnesia:create_table(bar, [{attributes, 3.14}])</fo:inline>
             returns the tuple <fo:inline font-family="monospace">{aborted,Reason}</fo:inline>, where <fo:inline font-family="monospace">Reason</fo:inline> is
             the tuple <fo:inline font-family="monospace">{bad_type,bar,3.14000}</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The function
             <fo:inline font-style="italic">mnesia:error_description(Reason)</fo:inline>
             returns the term <fo:inline font-family="monospace">{"Bad type on some provided
             arguments",bar,3.14000}</fo:inline>, which is an error description
             suitable for display.</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1257824">ets(Fun, [, Args]) -&gt; ResultOfFun | exit(Reason)</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calls the <fo:inline font-family="monospace">Fun</fo:inline> in a raw context that is not protected by
          a transaction. The Mnesia function call is performed in
          the <fo:inline font-family="monospace">Fun</fo:inline> and performed directly on the local ETS
          tables on the assumption that the local storage type is
          <fo:inline font-family="monospace">ram_copies</fo:inline> and the tables are not replicated to other
          nodes. Subscriptions are not triggered and checkpoints are
          not updated, but it is extremely fast. This function can
          also be applied to <fo:inline font-family="monospace">disc_copies</fo:inline> tables if all
          operations are read only. For details, see
          <fo:inline font-family="monospace">mnesia:activity/4</fo:inline> and the User's Guide.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that calling (nesting) a <fo:inline font-family="monospace">mnesia:ets</fo:inline> inside a
          transaction-context inherits the transaction semantics.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1264464">first(Tab) -&gt;  Key | transaction abort</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Records in <fo:inline font-family="monospace">set</fo:inline> or <fo:inline font-family="monospace">bag</fo:inline> tables are not ordered.
          However, there is an ordering of the records that is unknown
          to the user. A table can therefore be traversed by this
          function with the function <fo:inline font-family="monospace">mnesia:next/2</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If there are no records in the table, this function
          returns the atom <fo:inline font-family="monospace">'$end_of_table'</fo:inline>. It is therefore
          highly undesirable, but not disallowed, to use this atom
          as the key for any user records.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1269632">foldl(Function, Acc, Table) -&gt; NewAcc | transaction abort</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Iterates over the table <fo:inline font-family="monospace">Table</fo:inline> and calls
          <fo:inline font-family="monospace">Function(Record, NewAcc)</fo:inline> for each <fo:inline font-family="monospace">Record</fo:inline> in
          the table. The term returned from <fo:inline font-family="monospace">Function</fo:inline> is used
          as the second argument in the next call to <fo:inline font-family="monospace">Function</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">foldl</fo:inline> returns the same term as the last call to
          <fo:inline font-family="monospace">Function</fo:inline> returned.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1276704">foldr(Function, Acc, Table) -&gt; NewAcc | transaction abort</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Works exactly like <fo:inline font-family="monospace">foldl/3</fo:inline> but iterates the table
          in the opposite order for the <fo:inline font-family="monospace">ordered_set</fo:inline> table type.
          For all other table types, <fo:inline font-family="monospace">foldr/3</fo:inline> and
          <fo:inline font-family="monospace">foldl/3</fo:inline> are synonyms.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1282144">force_load_table(Tab) -&gt; yes | ErrorDescription</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Mnesia algorithm for table load can lead to a
          situation where a table cannot be loaded. This situation
          occurs when a node is started and Mnesia concludes, or
          suspects, that another copy of the table was active after
          this local copy became inactive because of a system crash.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If this situation is not acceptable, this function can be
          used to override the strategy of the Mnesia table
          load algorithm. This can lead to a situation where some
          transaction effects are lost with an inconsistent database as
          result, but for some applications high availability is more
          important than consistent data.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1285872">index_match_object(Pattern, Pos) -&gt; transaction abort | ObjList</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts
          <fo:inline font-family="monospace">mnesia:index_match_object(Tab, Pattern, Pos, read)</fo:inline>,
          where <fo:inline font-family="monospace">Tab</fo:inline> is <fo:inline font-family="monospace">element(1, Pattern)</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1289888">index_match_object(Tab, Pattern, Pos, LockKind) -&gt; transaction abort | ObjList</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In a manner similar to the function <fo:inline font-family="monospace">mnesia:index_read/3</fo:inline>,
          any index information can be used when trying to match records.
          This function takes a pattern that obeys the same rules as the
          function <fo:inline font-family="monospace">mnesia:match_object/3</fo:inline>, except that this function
          requires the following conditions:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The table <fo:inline font-family="monospace">Tab</fo:inline> must have an index on
              position <fo:inline font-family="monospace">Pos</fo:inline>.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The element in position <fo:inline font-family="monospace">Pos</fo:inline> in
              <fo:inline font-family="monospace">Pattern</fo:inline> must be bound. <fo:inline font-family="monospace">Pos</fo:inline> is
              an integer (<fo:inline font-family="monospace">#record.Field</fo:inline>) or an attribute name.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The two index search functions described here are
          automatically started when searching tables with <fo:inline font-family="monospace">qlc</fo:inline>
          list comprehensions and also when using the low-level
          <fo:inline font-family="monospace">mnesia:[dirty_]match_object</fo:inline> functions.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The semantics of this function is context-sensitive.
          For details, see <fo:inline font-family="monospace">mnesia:activity/4</fo:inline>. In
          transaction-context, it acquires a lock of type
          <fo:inline font-family="monospace">LockKind</fo:inline> on the entire table or on a single record.
          Currently, the lock type <fo:inline font-family="monospace">read</fo:inline> is supported.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1301760">index_read(Tab, SecondaryKey, Pos) -&gt; transaction abort | RecordList</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Assume that there is an index on position <fo:inline font-family="monospace">Pos</fo:inline> for a
          certain record type. This function can be used to read the
          records without knowing the actual key for the record. For
          example, with an index in position 1 of table <fo:inline font-family="monospace">person</fo:inline>,
          the call <fo:inline font-family="monospace">mnesia:index_read(person, 36, #person.age)</fo:inline>
          returns a list of all persons with age 36. <fo:inline font-family="monospace">Pos</fo:inline> can
          also be an attribute name (atom), but if the notation
          <fo:inline font-family="monospace">mnesia:index_read(person, 36, age)</fo:inline> is used, the
          field position is searched for in runtime, for each call.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The semantics of this function is context-sensitive.
          For details, see <fo:inline font-family="monospace">mnesia:activity/4</fo:inline>. In
          transaction-context, it acquires a read lock on the entire
          table.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1009296">info() -&gt; ok</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Prints system information on the terminal.
          This function can be used even if Mnesia is not
          started. However, more information is displayed if
          Mnesia is started.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1012128">install_fallback(Opaque) -&gt; ok | {error,Reason}</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calls <fo:inline font-family="monospace">mnesia:install_fallback(Opaque, Args)</fo:inline>, where
          <fo:inline font-family="monospace">Args</fo:inline> is <fo:inline font-family="monospace">[{scope, global}]</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1016160">install_fallback(Opaque), BackupMod) -&gt; ok | {error,Reason}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calls <fo:inline font-family="monospace">mnesia:install_fallback(Opaque, Args)</fo:inline>, where
          <fo:inline font-family="monospace">Args</fo:inline> is <fo:inline font-family="monospace">[{scope, global}, {module, BackupMod}]</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1019840">install_fallback(Opaque, Args) -&gt; ok | {error,Reason}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Installs a backup as fallback. The fallback is used to
          restore the database at the next startup. Installation of
          fallbacks requires Erlang to be operational on all the
          involved nodes, but it does not matter if Mnesia
          is running or not. The installation of the fallback fails
          if the local node is not one of the disc-resident nodes
          in the backup.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Args</fo:inline> is a list of the following tuples:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{module, BackupMod}</fo:inline>.
              All accesses of the backup media are performed through
              a callback module named <fo:inline font-family="monospace">BackupMod</fo:inline>. Argument
              <fo:inline font-family="monospace">Opaque</fo:inline> is forwarded to the callback module,
              which can interpret it as it wishes. The default
              callback module is called <fo:inline font-family="monospace">mnesia_backup</fo:inline> and it
              interprets argument <fo:inline font-family="monospace">Opaque</fo:inline> as a local
              filename. The default for this module is also
              configurable through configuration parameter
              <fo:inline font-family="monospace">-mnesia mnesia_backup</fo:inline>.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{scope, Scope}</fo:inline>.
              The <fo:inline font-family="monospace">Scope</fo:inline> of a fallback is either
              <fo:inline font-family="monospace">global</fo:inline> for the entire database or <fo:inline font-family="monospace">local</fo:inline>
              for one node. By default, the installation of a fallback
              is a global operation, which either is performed on all
              nodes with a disc-resident schema or none. Which nodes
              that are disc-resident is determined from the
              schema information in the backup.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Scope</fo:inline> of the operation is <fo:inline font-family="monospace">local</fo:inline>,
              the fallback is only installed on the local node.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{mnesia_dir, AlternateDir}</fo:inline>.
              This argument is only valid if the scope of the
              installation is <fo:inline font-family="monospace">local</fo:inline>. Normally the installation
              of a fallback is targeted to the Mnesia directory,
              as configured with configuration parameter
              <fo:inline font-family="monospace">-mnesia dir</fo:inline>. But by explicitly supplying an
              <fo:inline font-family="monospace">AlternateDir</fo:inline>, the fallback is installed there
              regardless of the Mnesia directory configuration
              parameter setting. After installation of a fallback on
              an alternative Mnesia directory, that directory
              is fully prepared for use as an active Mnesia
              directory.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is a dangerous feature that must be
              used with care. By unintentional mixing of directories,
              you can easily end up with an inconsistent database, if
              the same backup is installed on more than one directory.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1035440">is_transaction() -&gt; boolean</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When this function is executed inside a transaction-context,
          it returns <fo:inline font-family="monospace">true</fo:inline>, otherwise <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1038976">last(Tab) -&gt; Key | transaction abort</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Works exactly like
          <fo:inline font-family="monospace">mnesia:first/1</fo:inline>, but returns the last object in
          Erlang term order for the <fo:inline font-family="monospace">ordered_set</fo:inline> table type.
          For all other table types, <fo:inline font-family="monospace">mnesia:first/1</fo:inline> and
          <fo:inline font-family="monospace">mnesia:last/1</fo:inline> are synonyms.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1043024">load_textfile(Filename)</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Loads a series of definitions and data found in the
          text file (generated with <fo:inline font-family="monospace">mnesia:dump_to_textfile/1</fo:inline>)
          into Mnesia. This function also starts Mnesia
          and possibly creates a new schema. This function is
          intended for educational purposes only. It is recommended
          to use other functions to deal with real backups.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1046384">lock(LockItem, LockKind) -&gt; Nodes | ok | transaction abort</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Write locks are normally acquired on all nodes where a
          replica of the table resides (and is active). Read locks
          are acquired on one node (the local node if a local
          replica exists). Most of the context-sensitive access
          functions acquire an implicit lock if they are started in a
          transaction-context. The granularity of a lock can either
          be a single record or an entire table.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The normal use is to call the function without checking
          the return value, as it exits if it fails and the
          transaction is restarted by the transaction manager. It
          returns all the locked nodes if a write lock is acquired
          and <fo:inline font-family="monospace">ok</fo:inline> if it was a read lock.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function <fo:inline font-family="monospace">mnesia:lock/2</fo:inline> is intended to support
          explicit locking on tables, but is also intended for
          situations when locks need to be acquired regardless of
          how tables are replicated. Currently, two kinds of
          <fo:inline font-family="monospace">LockKind</fo:inline> are supported:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">write</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Write locks are exclusive. This means that if one
              transaction manages to acquire a write lock on an item,
              no other transaction can acquire any kind of lock on
              the same item.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">read</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Read locks can be shared. This means that if one
              transaction manages to acquire a read lock on an item,
              other transactions can also acquire a read lock on the
              same item. However, if someone has a read lock, no one
              can acquire a write lock at the same item. If someone
              has a write lock, no one can acquire either a read lock
              or a write lock at the same item.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Conflicting lock requests are automatically queued if there
          is no risk of a deadlock. Otherwise the transaction must be
          terminated and executed again. Mnesia does this
          automatically as long as the upper limit of the maximum
          <fo:inline font-family="monospace">retries</fo:inline> is not reached. For details, see
          <fo:inline font-family="monospace">mnesia:transaction/3</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For the sake of completeness, sticky write locks are also
          described here even if a sticky write lock is not
          supported by this function:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sticky_write</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sticky write locks are a mechanism that can be used
              to optimize write lock acquisition. If your application
              uses replicated tables mainly for fault tolerance (as
              opposed to read access optimization purpose), sticky
              locks can be the best option available.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a sticky write lock is acquired, all nodes are
              informed which node is locked. Then,
              sticky lock requests from the same node are
              performed as a local operation without any
              communication with other nodes. The sticky lock
              lingers on the node even after the transaction
              ends. For details, see the User's Guide.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Currently, this function supports two kinds of
          <fo:inline font-family="monospace">LockItem</fo:inline>:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{table, Tab}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This acquires a lock of type <fo:inline font-family="monospace">LockKind</fo:inline> on the
              entire table <fo:inline font-family="monospace">Tab</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{global, GlobalKey, Nodes}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This acquires a lock of type <fo:inline font-family="monospace">LockKind</fo:inline> on the
              global resource <fo:inline font-family="monospace">GlobalKey</fo:inline>. The lock is acquired
              on all active nodes in the <fo:inline font-family="monospace">Nodes</fo:inline> list.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Locks are released when the outermost transaction ends.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The semantics of this function is context-sensitive.
          For details, see <fo:inline font-family="monospace">mnesia:activity/4</fo:inline>. In
          transaction-context, it acquires locks, otherwise it
          ignores the request.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1069392">match_object(Pattern) -&gt; transaction abort | RecList</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calls <fo:inline font-family="monospace">mnesia:match_object(Tab, Pattern, read)</fo:inline>, where
          <fo:inline font-family="monospace">Tab</fo:inline> is <fo:inline font-family="monospace">element(1, Pattern)</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1073856">match_object(Tab, Pattern, LockKind) -&gt; transaction abort | RecList</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Takes a pattern with "don't care" variables
          denoted as a <fo:inline font-family="monospace">'_'</fo:inline> parameter. This function returns
          a list of records that matched the pattern.
          Since the second element
          of a record in a table is considered to be the key for the
          record, the performance of this function depends on whether
          this key is bound or not.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For example, the call <fo:inline font-family="monospace">mnesia:match_object(person,
          {person, '_', 36, '_', '_'}, read)</fo:inline> returns a list of
          all person records with an <fo:inline font-family="monospace">age</fo:inline> field of 36.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function <fo:inline font-family="monospace">mnesia:match_object/3</fo:inline>
          automatically uses indexes if these exist. However, no
          heuristics are performed to select the best index.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The semantics of this function is context-sensitive.
          For details, see <fo:inline font-family="monospace">mnesia:activity/4</fo:inline>. In
          transaction-context, it acquires a lock of type
          <fo:inline font-family="monospace">LockKind</fo:inline> on the entire table or a single record.
          Currently, the lock type <fo:inline font-family="monospace">read</fo:inline> is supported.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1081888">move_table_copy(Tab, From, To) -&gt; {aborted, Reason} | {atomic, ok}</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Moves the copy of table <fo:inline font-family="monospace">Tab</fo:inline> from node
          <fo:inline font-family="monospace">From</fo:inline> to node <fo:inline font-family="monospace">To</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The storage type is preserved. For example, a RAM table
          moved from one node remains a RAM on the new node. Other
          transactions can still read and write in
          the table while it is being moved.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function cannot be used on <fo:inline font-family="monospace">local_content</fo:inline> tables.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1088912">next(Tab, Key) -&gt; Key | transaction abort</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Traverses a table and
          performs operations on all records in the table. When
          the end of the table is reached, the special key
          <fo:inline font-family="monospace">'$end_of_table'</fo:inline> is returned. Otherwise the function
          returns a key that can be used to read the actual record.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1092272">prev(Tab, Key) -&gt; Key | transaction abort</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Works exactly like
          <fo:inline font-family="monospace">mnesia:next/2</fo:inline>, but returns the previous object in
          Erlang term order for the <fo:inline font-family="monospace">ordered_set</fo:inline> table type.
          For all other table types, <fo:inline font-family="monospace">mnesia:next/2</fo:inline> and
          <fo:inline font-family="monospace">mnesia:prev/2</fo:inline> are synonyms.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1096240">read({Tab, Key}) -&gt; transaction abort | RecordList</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calls function <fo:inline font-family="monospace">mnesia:read(Tab, Key, read)</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1099376">read(Tab, Key) -&gt; transaction abort | RecordList</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calls function <fo:inline font-family="monospace">mnesia:read(Tab, Key, read)</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1102064">read(Tab, Key, LockKind) -&gt; transaction abort | RecordList</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Reads all records from table <fo:inline font-family="monospace">Tab</fo:inline> with
          key <fo:inline font-family="monospace">Key</fo:inline>. This function has the same semantics
          regardless of the location of <fo:inline font-family="monospace">Tab</fo:inline>. If the table is
          of type <fo:inline font-family="monospace">bag</fo:inline>, the function
          <fo:inline font-family="monospace">mnesia:read(Tab, Key)</fo:inline> can
          return an arbitrarily long list. If the table is of type
          <fo:inline font-family="monospace">set</fo:inline>, the list is either of length 1, or <fo:inline font-family="monospace">[]</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The semantics of this function is context-sensitive.
          For details, see <fo:inline font-family="monospace">mnesia:activity/4</fo:inline>. In
          transaction-context, it acquires a lock of type
          <fo:inline font-family="monospace">LockKind</fo:inline>. Currently, the lock types <fo:inline font-family="monospace">read</fo:inline>,
          <fo:inline font-family="monospace">write</fo:inline>, and <fo:inline font-family="monospace">sticky_write</fo:inline> are supported.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the user wants to update the record, it is more
          efficient to use <fo:inline font-family="monospace">write/sticky_write</fo:inline> as the
          <fo:inline font-family="monospace">LockKind</fo:inline>. If majority checking is active on the
          table, it is checked as soon as a write lock is
          attempted. This can be used to end quickly if the
          majority condition is not met.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1112560">read_lock_table(Tab) -&gt; ok | transaction abort</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calls the function
          <fo:inline font-family="monospace">mnesia:lock({table, Tab}, read)</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1115712">report_event(Event) -&gt; ok</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When tracing a system of Mnesia applications it is
          useful to be able to interleave Mnesia own events with
          application-related events that give information about the
          application context.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Whenever the application begins a
          new and demanding Mnesia task, or if it enters a new
          interesting phase in its execution, it can be a good idea to
          use <fo:inline font-family="monospace">mnesia:report_event/1</fo:inline>. <fo:inline font-family="monospace">Event</fo:inline> can be
          any term and generates a <fo:inline font-family="monospace">{mnesia_user, Event}</fo:inline> event
          for any processes that subscribe to Mnesia system
          events.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1120560">restore(Opaque, Args) -&gt; {atomic, RestoredTabs} |{aborted, Reason}</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">With this function, tables can be restored online from a
          backup without restarting Mnesia.
          <fo:inline font-family="monospace">Opaque</fo:inline> is forwarded to the backup module.
          <fo:inline font-family="monospace">Args</fo:inline> is a list of the following tuples:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:inline font-family="monospace">{module,BackupMod}</fo:inline>. The backup module
              <fo:inline font-family="monospace">BackupMod</fo:inline> is used to access the backup media.
              If omitted, the default backup module is used.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{skip_tables, TabList}</fo:inline>, where <fo:inline font-family="monospace">TabList</fo:inline>
           is a list of tables that is not to be read from the
           backup.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{clear_tables, TabList}</fo:inline>, where
          <fo:inline font-family="monospace">TabList</fo:inline> is a list of tables that is to be
           cleared before the records from the backup are inserted.
           That is, all records in the tables are deleted before the
           tables are restored. Schema information about the tables
           is not cleared or read from the backup.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{keep_tables, TabList}</fo:inline>, where <fo:inline font-family="monospace">TabList</fo:inline>
           is a list of tables that is not to be cleared before the
           records from the backup are inserted. That is, the records
           in the backup are added to the records in the table.
           Schema information about the tables is not cleared or read
           from the backup.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{recreate_tables, TabList}</fo:inline>, where
           <fo:inline font-family="monospace">TabList</fo:inline> is a list of tables that is to be
           recreated before the records from the backup are inserted.
           The tables are first deleted and then created with the
           schema information from the backup. All the nodes in the
           backup need to be operational.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{default_op, Operation}</fo:inline>, where <fo:inline font-family="monospace">Operation</fo:inline>
           is either of the operations <fo:inline font-family="monospace">skip_tables</fo:inline>,
           <fo:inline font-family="monospace">clear_tables</fo:inline>, <fo:inline font-family="monospace">keep_tables</fo:inline>, or
           <fo:inline font-family="monospace">recreate_tables</fo:inline>. The default operation specifies
           which operation that is to be used on tables from the backup
           that is not specified in any of the mentioned lists. If
           omitted, operation <fo:inline font-family="monospace">clear_tables</fo:inline> is used.
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The affected tables are write-locked during the
          restoration. However, regardless of the lock conflicts caused
          by this, the applications can continue to do their work while
          the restoration is being performed. The restoration is
          performed as one single transaction.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the database is huge,
          it it not always possible to restore it online. In such
          cases, restore the old database by installing a
          fallback and then restart.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1136864">s_delete({Tab, Key}) -&gt; ok | transaction abort</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calls the function
          <fo:inline font-family="monospace">mnesia:delete(Tab, Key, sticky_write)</fo:inline></fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1139856">s_delete_object(Record) -&gt; ok | transaction abort</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calls the function
          <fo:inline font-family="monospace">mnesia:delete_object(Tab, Record, sticky_write)</fo:inline>,
          where <fo:inline font-family="monospace">Tab</fo:inline> is <fo:inline font-family="monospace">element(1, Record)</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1143856">s_write(Record) -&gt; ok | transaction abort</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calls the function
          <fo:inline font-family="monospace">mnesia:write(Tab, Record, sticky_write)</fo:inline>,
          where <fo:inline font-family="monospace">Tab</fo:inline> is <fo:inline font-family="monospace">element(1, Record)</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1148336">schema() -&gt; ok</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Prints information about all table definitions on the terminal.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1150672">schema(Tab) -&gt; ok</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Prints information about one table definition on the terminal.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1153008">select(Tab, MatchSpec [, Lock]) -&gt; transaction abort | [Object]</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Matches the objects in table <fo:inline font-family="monospace">Tab</fo:inline> using a
          <fo:inline font-family="monospace">match_spec</fo:inline> as described in the
          <fo:inline font-style="italic">ets:select/3</fo:inline>.
          Optionally a lock
          <fo:inline font-family="monospace">read</fo:inline> or <fo:inline font-family="monospace">write</fo:inline> can be given as the third
          argument. Default is <fo:inline font-family="monospace">read</fo:inline>. The return value depends
          on <fo:inline font-family="monospace">MatchSpec</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that for best performance, <fo:inline font-family="monospace">select</fo:inline> is to be
          used before any modifying operations are done on that table
          in the same transaction. That is, do not use <fo:inline font-family="monospace">write</fo:inline>
          or <fo:inline font-family="monospace">delete</fo:inline> before a <fo:inline font-family="monospace">select</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In its simplest forms, the <fo:inline font-family="monospace">match_spec</fo:inline> look as
          follows:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">MatchSpec = [MatchFunction]</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">MatchFunction = {MatchHead, [Guard], [Result]}</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">MatchHead = tuple() | record()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Guard =  {"Guardtest name", ...}</fo:inline></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Result = "Term construct"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For a complete description of <fo:inline font-family="monospace">select</fo:inline>, see the
          <fo:inline font-style="italic">ERTS</fo:inline> User's Guide and the
          <fo:inline font-style="italic">ets</fo:inline> manual page in
          STDLIB.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For example, to find the names of all male persons older
          than 30 in table <fo:inline font-family="monospace">Tab</fo:inline>:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
MatchHead = #person{name='$1', sex=male, age='$2', _='_'},
Guard = {'&gt;', '$2', 30},
Result = '$1',
mnesia:select(Tab,[{MatchHead, [Guard], [Result]}]),</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1921200">select(Tab, MatchSpec, NObjects, Lock) -&gt; transaction abort | {[Object],Cont} | '$end_of_table'</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Matches the objects in table <fo:inline font-family="monospace">Tab</fo:inline> using a
          <fo:inline font-family="monospace">match_spec</fo:inline> as described in the
          <fo:inline font-style="italic">ERTS</fo:inline> User's Guide,
          and returns a chunk of terms and a continuation.
          The wanted number of returned terms is specified by
          argument <fo:inline font-family="monospace">NObjects</fo:inline>. The lock argument can be
          <fo:inline font-family="monospace">read</fo:inline> or <fo:inline font-family="monospace">write</fo:inline>. The continuation is to be
          used as argument to <fo:inline font-family="monospace">mnesia:select/1</fo:inline>,
          if more or all answers are needed.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that for best performance, <fo:inline font-family="monospace">select</fo:inline> is to be
          used before any modifying operations are done on that table
          in the same transaction. That is, do not use
          <fo:inline font-family="monospace">mnesia:write</fo:inline> or <fo:inline font-family="monospace">mnesia:delete</fo:inline> before a
          <fo:inline font-family="monospace">mnesia:select</fo:inline>. For efficiency, <fo:inline font-family="monospace">NObjects</fo:inline> is
          a recommendation only and the result can contain anything
          from an empty list to all available results.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1931200">select(Cont) -&gt; transaction abort | {[Object],Cont} | '$end_of_table'</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Selects more objects with the match specification initiated
          by <fo:inline font-family="monospace">mnesia:select/4</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that any modifying operations, that is,
          <fo:inline font-family="monospace">mnesia:write</fo:inline> or <fo:inline font-family="monospace">mnesia:delete</fo:inline>, that are done
          between the <fo:inline font-family="monospace">mnesia:select/4</fo:inline> and <fo:inline font-family="monospace">mnesia:select/1</fo:inline>
          calls are not visible in the result.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1936288">set_debug_level(Level) -&gt; OldLevel</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Changes the internal debug level of Mnesia.
          For details, see
          <fo:inline font-style="italic">Section
          Configuration Parameters</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1939728">set_master_nodes(MasterNodes) -&gt; ok | {error, Reason}</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For each table Mnesia determines its replica nodes
          (<fo:inline font-family="monospace">TabNodes</fo:inline>) and starts
          <fo:inline font-family="monospace">mnesia:set_master_nodes(Tab, TabMasterNodes)</fo:inline>. where
          <fo:inline font-family="monospace">TabMasterNodes</fo:inline> is the intersection of
          <fo:inline font-family="monospace">MasterNodes</fo:inline> and <fo:inline font-family="monospace">TabNodes</fo:inline>. For semantics, see
          <fo:inline font-family="monospace">mnesia:set_master_nodes/2</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1945264">set_master_nodes(Tab, MasterNodes) -&gt; ok | {error, Reason}</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the application detects a
          communication failure (in a potentially partitioned network)
          that can have caused an inconsistent database, it can use the
          function <fo:inline font-family="monospace">mnesia:set_master_nodes(Tab, MasterNodes)</fo:inline> to
          define from which nodes each table is to be loaded.
          At startup, the Mnesia normal table load algorithm is
          bypassed and the table is loaded from one of the master nodes
          defined for the table, regardless of when and if Mnesia
          terminated on other nodes. <fo:inline font-family="monospace">MasterNodes</fo:inline> can only
          contain nodes where the table has a replica. If the
          <fo:inline font-family="monospace">MasterNodes</fo:inline> list is empty, the master node recovery
          mechanism for the particular table is reset, and the
          normal load mechanism is used at the next restart.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The master node setting is always local. It can be
          changed regardless if Mnesia is started or not.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The database can also become inconsistent if
          configuration parameter <fo:inline font-family="monospace">max_wait_for_decision</fo:inline> is used
          or if <fo:inline font-family="monospace">mnesia:force_load_table/1</fo:inline> is used.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1952096">snmp_close_table(Tab) -&gt; {aborted, R} | {atomic, ok}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Removes the possibility for SNMP to manipulate the table.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1954400">snmp_get_mnesia_key(Tab, RowIndex) -&gt; {ok, Key} | undefined</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Tab ::= atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">RowIndex ::= [integer()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key ::= key() | {key(), key(), ...}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">key() ::= integer() | string() | [integer()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Transforms an SNMP index to the corresponding Mnesia
          key. If the SNMP table has multiple keys, the key is a tuple
          of the key columns.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1959040">snmp_get_next_index(Tab, RowIndex) -&gt; {ok, NextIndex} | endOfTable</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Tab ::= atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">RowIndex ::= [integer()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NextIndex ::= [integer()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">RowIndex</fo:inline> can specify a non-existing row.
          Specifically, it can be the empty list. Returns the index
          of the next lexicographical row. If <fo:inline font-family="monospace">RowIndex</fo:inline> is the
          empty list, this function returns the index of the first row
          in the table.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1964064">snmp_get_row(Tab, RowIndex) -&gt; {ok, Row} | undefined</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Tab ::= atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">RowIndex ::= [integer()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Row ::= record(Tab)</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Reads a row by its SNMP index. This index is specified as
          an SNMP Object Identifier, a list of integers.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1968144">snmp_open_table(Tab, SnmpStruct) -&gt; {aborted, R} | {atomic, ok}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Tab ::= atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SnmpStruct ::= [{key, type()}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">type() ::= type_spec() | {type_spec(), type_spec(), ...}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">type_spec() ::= fix_string | string | integer</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A direct one-to-one mapping can be established between
          Mnesia tables and SNMP tables. Many telecommunication
          applications are controlled and monitored by the SNMP
          protocol. This connection between Mnesia and SNMP
          makes it simple and convenient to achieve this mapping.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Argument <fo:inline font-family="monospace">SnmpStruct</fo:inline> is a list of SNMP
          information. Currently, the only information needed is
          information about the key types in the table. Multiple
          keys cannot be handled in Mnesia, but many SNMP
          tables have multiple keys. Therefore, the following
          convention is used: if a table has multiple keys, these must
          always be stored as a tuple of the keys. Information about
          the key types is specified as a tuple of atoms describing
          the types. The only significant type is <fo:inline font-family="monospace">fix_string</fo:inline>.
          This means that a string has a fixed size.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For example, the following causes table <fo:inline font-family="monospace">person</fo:inline>
          to be ordered as an SNMP table:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
mnesia:snmp_open_table(person, [{key, string}])</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Consider the following schema for a table of company
          employees. Each employee is identified by department number
          and name. The other table column stores the telephone
          number:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
mnesia:create_table(employee,
    [{snmp, [{key, {integer, string}}]},
     {attributes, record_info(fields, employees)}]),</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The corresponding SNMP table would have three columns:
          <fo:inline font-family="monospace">department</fo:inline>, <fo:inline font-family="monospace">name</fo:inline>, and <fo:inline font-family="monospace">telno</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An option is to have table columns that are not visible
          through the SNMP protocol. These columns must be the last
          columns of the table. In the previous example, the SNMP
          table could have columns <fo:inline font-family="monospace">department</fo:inline> and <fo:inline font-family="monospace">name</fo:inline>
          only. The application could then use column <fo:inline font-family="monospace">telno</fo:inline>
          internally, but it would not be visible to the SNMP
          managers.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In a table monitored by SNMP, all elements must be
          integers, strings, or lists of integers.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a table is SNMP ordered, modifications are more
          expensive than usual, O(logN). Also, more memory is used.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that only the lexicographical SNMP ordering is
          implemented in Mnesia, not the actual SNMP monitoring.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1983280">start() -&gt; ok | {error, Reason}</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The startup procedure for a set of Mnesia nodes is a
          fairly complicated operation. A Mnesia system consists
          of a set of nodes, with Mnesia started locally on all
          participating nodes. Normally, each node has a directory where
          all the Mnesia files are written. This directory is
          referred to as the Mnesia directory. Mnesia can
          also be started on disc-less nodes. For more information
          about disc-less nodes, see <fo:inline font-family="monospace">mnesia:create_schema/1</fo:inline>
          and the User's Guide.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The set of nodes that makes up a Mnesia system is kept
          in a schema. Mnesia nodes can be added to or removed
          from the schema. The initial schema is normally created on
          disc with the function <fo:inline font-family="monospace">mnesia:create_schema/1</fo:inline>. On
          disc-less nodes, a tiny default schema is generated each time
          Mnesia is started. During the startup procedure,
          Mnesia exchanges schema information between the nodes
          to verify that the table definitions are compatible.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each schema has a unique cookie, which can be regarded as a
          unique schema identifier. The cookie must be the same on all
          nodes where Mnesia is supposed to run. For details,
          see the User's Guide.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The schema file and all other files that Mnesia
          needs are kept in the Mnesia directory. The
          command-line option <fo:inline font-family="monospace">-mnesia dir Dir</fo:inline> can be used to
          specify the location of this directory to the Mnesia
          system. If no such command-line option is found, the name
          of the directory defaults to <fo:inline font-family="monospace">Mnesia.Node</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">application:start(mnesia)</fo:inline> can also be used.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1991424">stop() -&gt; stopped</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stops Mnesia locally on the current node.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">application:stop(mnesia)</fo:inline> can also be used.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1994944">subscribe(EventCategory) -&gt; {ok, Node} | {error, Reason}</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Ensures that a copy of all events of type
          <fo:inline font-family="monospace">EventCategory</fo:inline> is sent to the caller. The available
          event types are described in the <fo:inline font-style="italic">User's Guide</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1999472">sync_dirty(Fun, [, Args]) -&gt; ResultOfFun | exit(Reason)</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calls the <fo:inline font-family="monospace">Fun</fo:inline> in a context that is not protected by
          a transaction. The Mnesia function calls performed in
          the <fo:inline font-family="monospace">Fun</fo:inline> are mapped to the corresponding dirty functions.
          It is performed in almost the same context as
          <fo:inline font-family="monospace">mnesia:async_dirty/1,2</fo:inline>. The difference is that the
          operations are performed synchronously. The caller waits for
          the updates to be performed on all active replicas before
          the <fo:inline font-family="monospace">Fun</fo:inline> returns. For details, see
          <fo:inline font-family="monospace">mnesia:activity/4</fo:inline> and the User's Guide.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2005264">sync_log() -&gt; ok | {error, Reason}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Ensures that the local transaction log file is synced to disk.
          On a single node system, data written to disk tables since the
          last dump can be lost if there is a power outage.
          See <fo:inline font-style="italic">dump_log/0</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2008400">sync_transaction(Fun, [[, Args], Retries]) -&gt; {aborted, Reason} | {atomic, ResultOfFun}</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Waits until data have been committed and
          logged to disk (if disk is used) on every involved node before
          it returns, otherwise it behaves as
          <fo:inline font-family="monospace">mnesia:transaction/[1,2,3]</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This functionality can be used to avoid that one process
          overloads a database on another node.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2012448">system_info(InfoKey) -&gt; Info | exit({aborted, Reason})</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns information about the Mnesia system, such as
          transaction statistics, <fo:inline font-family="monospace">db_nodes</fo:inline>, and configuration
          parameters. The valid keys are as follows:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">all</fo:inline>. Returns a list of all local system
              information. Each element is a <fo:inline font-family="monospace">{InfoKey, InfoVal}</fo:inline>
              tuple.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">New <fo:inline font-family="monospace">InfoKey</fo:inline>s can be added and old
              undocumented <fo:inline font-family="monospace">InfoKey</fo:inline>s can be removed without
              notice.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">access_module</fo:inline>. Returns the name of module that is
              configured to be the activity access callback module.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">auto_repair</fo:inline>. Returns <fo:inline font-family="monospace">true</fo:inline> or <fo:inline font-family="monospace">false</fo:inline>
              to indicate if Mnesia is configured to start the
              auto-repair facility on corrupted disc files.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">backup_module</fo:inline>. Returns the name of the module
              that is configured to be the backup callback module.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">checkpoints</fo:inline>. Returns a list of the names of the
              checkpoints currently active on this node.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">event_module</fo:inline>. Returns the name of the module
              that is the event handler callback module.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">db_nodes</fo:inline>. Returns the nodes that make up the
              persistent database. Disc-less nodes are only included
              in the list of nodes if they explicitly have been added
              to the schema, for example, with
              <fo:inline font-family="monospace">mnesia:add_table_copy/3</fo:inline>. The function can be
              started even if Mnesia is not yet running.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">debug</fo:inline>. Returns the current debug level of
              Mnesia.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">directory</fo:inline>. Returns the name of the Mnesia
              directory. It can be called even if Mnesia is
              not yet running.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">dump_log_load_regulation</fo:inline>. Returns a boolean that
              tells if Mnesia is configured to regulate the
              dumper process load.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This feature is temporary and will be removed in future
              releases.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">dump_log_time_threshold</fo:inline>. Returns the time
              threshold for transaction log dumps in milliseconds.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">dump_log_update_in_place</fo:inline>. Returns a boolean that
              tells if Mnesia is configured to perform the
              updates in the Dets files directly, or if the
              updates are to be performed in a copy of the Dets
              files.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">dump_log_write_threshold</fo:inline>.
              Returns the write threshold for transaction log dumps as
              the number of writes to the transaction log.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">extra_db_nodes</fo:inline>. Returns a list
              of extra <fo:inline font-family="monospace">db_nodes</fo:inline> to be contacted at startup.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">fallback_activated</fo:inline>. Returns <fo:inline font-family="monospace">true</fo:inline>
              if a fallback is activated, otherwise <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">held_locks</fo:inline>. Returns a list of all
              locks held by the local Mnesia lock manager.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">is_running</fo:inline>. Returns <fo:inline font-family="monospace">yes</fo:inline> or <fo:inline font-family="monospace">no</fo:inline> to
              indicate if Mnesia is running. It can
              also return <fo:inline font-family="monospace">starting</fo:inline> or <fo:inline font-family="monospace">stopping</fo:inline>. Can be
              called even if Mnesia is not yet running.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">local_tables</fo:inline>. Returns a list
              of all tables that are configured to reside locally.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">lock_queue</fo:inline>. Returns a list of
              all transactions that are queued for execution by the
              local lock manager.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">log_version</fo:inline>. Returns the version
              number of the Mnesia transaction log format.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">master_node_tables</fo:inline>. Returns a
              list of all tables with at least one master node.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">protocol_version</fo:inline>. Returns the version number of
              the Mnesia inter-process communication protocol.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">running_db_nodes</fo:inline>. Returns a list of nodes where
              Mnesia currently is running. This function can be
              called even if Mnesia is not yet running, but it
              then has slightly different semantics.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If Mnesia is down on the local node, the function
              returns those other <fo:inline font-family="monospace">db_nodes</fo:inline> and
              <fo:inline font-family="monospace">extra_db_nodes</fo:inline> that for the moment are
              operational.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If Mnesia is started, the function returns
              those nodes that Mnesia on the local node is fully
              connected to. Only those nodes that Mnesia has
              exchanged schema information with are included as
              <fo:inline font-family="monospace">running_db_nodes</fo:inline>. After the merge of schemas, the
              local Mnesia system is fully operable and
              applications can perform access of remote replicas.
              Before the schema merge, Mnesia only operates
              locally. Sometimes there are more nodes included in the
              <fo:inline font-family="monospace">running_db_nodes</fo:inline> list than all <fo:inline font-family="monospace">db_nodes</fo:inline>
              and <fo:inline font-family="monospace">extra_db_nodes</fo:inline> together.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">schema_location</fo:inline>. Returns the
              initial schema location.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">subscribers</fo:inline>. Returns a list of
              local processes currently subscribing to system events.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">tables</fo:inline>. Returns a list of all
              locally known tables.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">transactions</fo:inline>. Returns a list
              of all currently active local transactions.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">transaction_failures</fo:inline>. Returns a
              number that indicates how many transactions have
              failed since Mnesia was started.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">transaction_commits</fo:inline>. Returns a
              number that indicates how many transactions have
              terminated successfully since Mnesia was started.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">transaction_restarts</fo:inline>. Returns a
              number that indicates how many transactions have been
              restarted since Mnesia was started.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">transaction_log_writes</fo:inline>.
              Returns a number that indicates how many write
              operations that have been performed to the transaction
              log since startup.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">use_dir</fo:inline>. Returns a boolean that indicates if
              the Mnesia directory is used or not. Can be
              started even if Mnesia is not yet running.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">version</fo:inline>. Returns the current
              version number of Mnesia.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2069440">table(Tab [,[Option]]) -&gt; QueryHandle</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a Query List Comprehension (QLC) query handle,
          see the <fo:inline font-style="italic">qlc(3)</fo:inline>
          manual page in STDLIB. The module <fo:inline font-family="monospace">qlc</fo:inline>
          implements a query language that can use Mnesia
          tables as sources of data. Calling
          <fo:inline font-family="monospace">mnesia:table/1,2</fo:inline> is the means to make the
          <fo:inline font-family="monospace">mnesia</fo:inline> table <fo:inline font-family="monospace">Tab</fo:inline> usable to QLC.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Option</fo:inline> can contain Mnesia
          options or QLC options. Mnesia recognizes the
          following options (any other option is forwarded to
          QLC).</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{lock, Lock}</fo:inline>, where <fo:inline font-family="monospace">lock</fo:inline> can be
            <fo:inline font-family="monospace">read</fo:inline> or <fo:inline font-family="monospace">write</fo:inline>. Default is <fo:inline font-family="monospace">read</fo:inline>.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{n_objects,Number}</fo:inline>, where <fo:inline font-family="monospace">n_objects</fo:inline>
            specifies (roughly) the number of objects returned
            from Mnesia to QLC. Queries to remote tables
            can need a larger chunk to reduce network overhead.
            By default, <fo:inline font-family="monospace">100</fo:inline> objects at a time are returned.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{traverse, SelectMethod}</fo:inline>, where
            <fo:inline font-family="monospace">traverse</fo:inline> determines the method to traverse
            the whole table (if needed). The default method is
          <fo:inline font-family="monospace">select</fo:inline>.
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are two alternatives for <fo:inline font-family="monospace">select</fo:inline>:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">select</fo:inline>. The table is traversed by calling
              <fo:inline font-family="monospace">mnesia:select/4</fo:inline> and <fo:inline font-family="monospace">mnesia:select/1</fo:inline>.
              The match specification (the second argument of
              <fo:inline font-family="monospace">select/3</fo:inline>) is assembled by QLC: simple filters
              are translated into equivalent match specifications.
              More complicated filters need to be applied to all
              objects returned by <fo:inline font-family="monospace">select/3</fo:inline> given a match
              specification that matches all objects.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{select, MatchSpec}</fo:inline>. As for <fo:inline font-family="monospace">select</fo:inline>,
              the table is traversed by calling <fo:inline font-family="monospace">mnesia:select/3</fo:inline>
              and <fo:inline font-family="monospace">mnesia:select/1</fo:inline>. The difference is that the
              match specification is explicitly given. This is how to
              state match specifications that cannot easily be
              expressed within the syntax provided by QLC.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1543648">table_info(Tab, InfoKey) -&gt; Info | exit({aborted, Reason})</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">table_info/2</fo:inline> function takes two arguments.
          The first is the name of a Mnesia table.
          The second is one of the following keys:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">all</fo:inline>. Returns a list of all local table
              information. Each element is a
              <fo:inline font-family="monospace">{InfoKey, ItemVal}</fo:inline> tuple.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">New <fo:inline font-family="monospace">InfoItem</fo:inline>s can be added and old undocumented
              <fo:inline font-family="monospace">InfoItem</fo:inline>s can be removed without notice.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">access_mode</fo:inline>. Returns the
              access mode of the table. The access mode can be
              <fo:inline font-family="monospace">read_only</fo:inline> or <fo:inline font-family="monospace">read_write</fo:inline>.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">arity</fo:inline>. Returns the arity of
              records in the table as specified in the schema.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">attributes</fo:inline>. Returns the table
              attribute names that are specified in the schema.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">checkpoints</fo:inline>. Returns the names
              of the currently active checkpoints, which involve this
              table on this node.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">cookie</fo:inline>. Returns a table cookie,
              which is a unique system-generated identifier for the
              table. The cookie is used internally to ensure that two
              different table definitions using the same table name
              cannot accidentally be intermixed. The cookie is
              generated when the table is created initially.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">disc_copies</fo:inline>. Returns the nodes where a
              <fo:inline font-family="monospace">disc_copy</fo:inline> of the table resides according to the
              schema.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">disc_only_copies</fo:inline>. Returns the nodes where a
              <fo:inline font-family="monospace">disc_only_copy</fo:inline> of the table resides
              according to the schema.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">index</fo:inline>. Returns the list of
              index position integers for the table.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">load_node</fo:inline>. Returns the name of
              the node that Mnesia loaded the table from. The
              structure of the returned value is unspecified, but
              can be useful for debugging purposes.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">load_order</fo:inline>. Returns the load
              order priority of the table. It is an integer and
              defaults to <fo:inline font-family="monospace">0</fo:inline> (zero).</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">load_reason</fo:inline>. Returns the
              reason of why Mnesia decided to load the table.
              The structure of the returned value is unspecified, but
              can be useful for debugging purposes.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">local_content</fo:inline>. Returns <fo:inline font-family="monospace">true</fo:inline> or
              <fo:inline font-family="monospace">false</fo:inline> to indicate if the table is configured to
              have locally unique content on each node.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">master_nodes</fo:inline>. Returns the master nodes of a
              table.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">memory</fo:inline>. Returns the number of
              words allocated to the table on this node.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ram_copies</fo:inline>. Returns the nodes where a
              <fo:inline font-family="monospace">ram_copy</fo:inline> of the table resides according to the
              schema.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">record_name</fo:inline>. Returns the
              record name, common for all records in the table.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">size</fo:inline>. Returns the number of
              records inserted in the table.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">snmp</fo:inline>. Returns the SNMP struct. <fo:inline font-family="monospace">[]</fo:inline> means
              that the table currently has no SNMP properties.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">storage_type</fo:inline>. Returns the local
              storage type of the table. It can be <fo:inline font-family="monospace">disc_copies</fo:inline>,
              <fo:inline font-family="monospace">ram_copies</fo:inline>, <fo:inline font-family="monospace">disc_only_copies</fo:inline>, or the atom
              <fo:inline font-family="monospace">unknown</fo:inline>. <fo:inline font-family="monospace">unknown</fo:inline> is returned for all
              tables that only reside remotely.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">subscribers</fo:inline>. Returns a list
              of local processes currently subscribing to local table
              events that involve this table on this node.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">type</fo:inline>. Returns the table type, which is
              <fo:inline font-family="monospace">bag</fo:inline>, <fo:inline font-family="monospace">set</fo:inline>, or <fo:inline font-family="monospace">ordered_set</fo:inline>.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">user_properties</fo:inline>. Returns the
              user-associated table properties of the table. It is a
              list of the stored property records.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">version</fo:inline>. Returns the current
              version of the table definition. The table version is
              incremented when the table definition is changed. The
              table definition can be incremented directly when it
              has been changed in a schema transaction, or
              when a committed table definition is merged with
              table definitions from other nodes during startup.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">where_to_read</fo:inline>. Returns the node
              where the table can be read. If value <fo:inline font-family="monospace">nowhere</fo:inline>
              is returned, either the table is not loaded or it
              resides at a remote node that is not running.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">where_to_write</fo:inline>. Returns a list of the nodes
              that currently hold an active replica of the table.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">wild_pattern</fo:inline>. Returns a
              structure that can be given to the various match
              functions for a certain table. A record tuple is where
              all record fields have value <fo:inline font-family="monospace">'_'</fo:inline>.</fo:block>
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1592784">transaction(Fun [[, Args], Retries]) -&gt; {aborted, Reason} | {atomic, ResultOfFun}</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Executes the functional object <fo:inline font-family="monospace">Fun</fo:inline>
          with arguments <fo:inline font-family="monospace">Args</fo:inline> as a transaction.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The code that executes inside the transaction
          can consist of a series of table manipulation functions.
          If something goes wrong inside the transaction as a result
          of a user error or a certain table not being available, the
          entire transaction is terminated and the function
          <fo:inline font-family="monospace">transaction/1</fo:inline> returns the tuple
          <fo:inline font-family="monospace">{aborted, Reason}</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If all is going well, <fo:inline font-family="monospace">{atomic, ResultOfFun}</fo:inline> is
          returned, where <fo:inline font-family="monospace">ResultOfFun</fo:inline> is the value of the
          last expression in <fo:inline font-family="monospace">Fun</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A function that adds a family to the database can be
          written as follows if there is a structure
          <fo:inline font-family="monospace">{family, Father, Mother, ChildrenList}</fo:inline>:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
add_family({family, F, M, Children}) -&gt;
    ChildOids = lists:map(fun oid/1, Children),
    Trans = fun() -&gt;      
        mnesia:write(F#person{children = ChildOids}, 
        mnesia:write(M#person{children = ChildOids},
        Write = fun(Child) -&gt; mnesia:write(Child) end,
        lists:foreach(Write, Children)
    end,
    mnesia:transaction(Trans).

oid(Rec) -&gt; {element(1, Rec), element(2, Rec)}.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This code adds a set of people to the database. Running
          this code within one transaction ensures that either the whole
          family is added to the database, or the whole transaction
          terminates. For example, if the last child is badly formatted,
          or the executing process terminates because of an
          <fo:inline font-family="monospace">'EXIT'</fo:inline> signal while executing the family code, the
          transaction terminates. Thus, the situation where half a
          family is added can never occur.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is also useful to update the database within a transaction
          if several processes concurrently update the same records.
          For example, the function <fo:inline font-family="monospace">raise(Name, Amount)</fo:inline>, which
          adds <fo:inline font-family="monospace">Amount</fo:inline> to the salary field of a person, is to
          be implemented as follows:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
raise(Name, Amount) -&gt;
    mnesia:transaction(fun() -&gt;
        case mnesia:wread({person, Name}) of
            [P] -&gt;
                Salary = Amount + P#person.salary,
                P2 = P#person{salary = Salary},
                mnesia:write(P2);
            _ -&gt;
                mnesia:abort("No such person")
        end
    end).</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When this function executes within a transaction,
          several processes running on different nodes can concurrently
          execute the function <fo:inline font-family="monospace">raise/2</fo:inline> without interfering
          with each other.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Since Mnesia detects deadlocks, a transaction can be
          restarted any number of times. This function attempts a
          restart as specified in <fo:inline font-family="monospace">Retries</fo:inline>. <fo:inline font-family="monospace">Retries</fo:inline> must
          be an integer greater than 0 or the atom <fo:inline font-family="monospace">infinity</fo:inline>.
          Default is <fo:inline font-family="monospace">infinity</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1609520">transform_table(Tab, Fun, NewAttributeList, NewRecordName) -&gt; {aborted, R} | {atomic, ok}</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Applies argument <fo:inline font-family="monospace">Fun</fo:inline> to all
          records in the table. <fo:inline font-family="monospace">Fun</fo:inline> is a function that takes a
          record of the old type and returns a transformed record of
          the new type. Argument <fo:inline font-family="monospace">Fun</fo:inline> can also be the atom
          <fo:inline font-family="monospace">ignore</fo:inline>, which indicates that only the metadata
          about the table is updated. Use of
          <fo:inline font-family="monospace">ignore</fo:inline> is not recommended, but included
          as a possibility for the user do to an own transformation.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">NewAttributeList</fo:inline> and <fo:inline font-family="monospace">NewRecordName</fo:inline>
          specify the attributes and the new record type of the
          converted table. Table name always remains unchanged. If
          <fo:inline font-family="monospace">record_name</fo:inline> is changed, only the Mnesia
          functions that use table identifiers work, for example,
          <fo:inline font-family="monospace">mnesia:write/3</fo:inline> works, but not <fo:inline font-family="monospace">mnesia:write/1</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1618112">transform_table(Tab, Fun, NewAttributeList) -&gt; {aborted, R} | {atomic, ok}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calls <fo:inline font-family="monospace">mnesia:transform_table(Tab, Fun,
          NewAttributeList, RecName)</fo:inline>, where <fo:inline font-family="monospace">RecName</fo:inline> is
          <fo:inline font-family="monospace">mnesia:table_info(Tab, record_name)</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1622288">traverse_backup(Source, [SourceMod,] Target, [TargetMod,] Fun, Acc) -&gt; {ok, LastAcc} | {error, Reason}</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Iterates over a backup, either to transform it into a
          new backup, or read it. The arguments are explained briefly
          here. For details, see the User's Guide.</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">SourceMod</fo:inline> and <fo:inline font-family="monospace">TargetMod</fo:inline> are the names of
           the modules that actually access the backup media.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Source</fo:inline> and <fo:inline font-family="monospace">Target</fo:inline> are opaque data used
           exclusively by modules <fo:inline font-family="monospace">SourceMod</fo:inline> and <fo:inline font-family="monospace">TargetMod</fo:inline>
           to initialize the backup media.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Acc</fo:inline> is an initial accumulator value.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Fun(BackupItems, Acc)</fo:inline> is applied to each item in
           the backup. The <fo:inline font-family="monospace">Fun</fo:inline> must return a tuple
          <fo:inline font-family="monospace">{BackupItems,NewAcc}</fo:inline>, where <fo:inline font-family="monospace">BackupItems</fo:inline> is
           a list of valid backup items, and <fo:inline font-family="monospace">NewAcc</fo:inline> is a new
           accumulator value. The returned backup items are written
           in the target backup. 
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">LastAcc</fo:inline> is the last accumulator value. This is
           the last <fo:inline font-family="monospace">NewAcc</fo:inline> value that was returned by <fo:inline font-family="monospace">Fun</fo:inline>.
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1634400">uninstall_fallback() -&gt; ok | {error,Reason}</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calls the function
          <fo:inline font-family="monospace">mnesia:uninstall_fallback([{scope, global}])</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1637600">uninstall_fallback(Args) -&gt; ok | {error,Reason}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Deinstalls a fallback before it
          has been used to restore the database. This is normally a
          distributed operation that is either performed on all
          nodes with disc resident schema, or none. Uninstallation of
          fallbacks requires Erlang to be operational on all
          involved nodes, but it does not matter if Mnesia is
          running or not. Which nodes that are considered as
          disc-resident nodes is determined from the schema
          information in the local fallback.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Args</fo:inline> is a list of the following tuples:</fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{module, BackupMod}</fo:inline>. For semantics,
           see <fo:inline font-family="monospace">mnesia:install_fallback/2</fo:inline>.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{scope, Scope}</fo:inline>. For semantics,
           see <fo:inline font-family="monospace">mnesia:install_fallback/2</fo:inline>.
          </fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{mnesia_dir, AlternateDir}</fo:inline>. For semantics,
           see <fo:inline font-family="monospace">mnesia:install_fallback/2</fo:inline>.
          </fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1645456">unsubscribe(EventCategory) -&gt; {ok, Node} | {error, Reason}</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stops sending events of type
          <fo:inline font-family="monospace">EventCategory</fo:inline> to the caller.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Node</fo:inline> is the local node.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1649968">wait_for_tables(TabList, Timeout) -&gt; ok | {timeout, BadTabList} | {error, Reason}</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Some applications need to wait for certain tables to be
          accessible to do useful work. <fo:inline font-family="monospace">mnesia:wait_for_tables/2</fo:inline>
          either hangs until all tables in <fo:inline font-family="monospace">TabList</fo:inline> are accessible,
          or until <fo:inline font-family="monospace">timeout</fo:inline> is reached.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1654272">wread({Tab, Key}) -&gt; transaction abort | RecordList</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calls the function <fo:inline font-family="monospace">mnesia:read(Tab, Key, write)</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1657520">write(Record) -&gt; transaction abort | ok</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calls the function <fo:inline font-family="monospace">mnesia:write(Tab, Record, write)</fo:inline>,
           where <fo:inline font-family="monospace">Tab</fo:inline> is <fo:inline font-family="monospace">element(1, Record)</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1661712">write(Tab, Record, LockKind) -&gt; transaction abort | ok</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Writes record <fo:inline font-family="monospace">Record</fo:inline> to table <fo:inline font-family="monospace">Tab</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function returns <fo:inline font-family="monospace">ok</fo:inline>, or terminates if an error
          occurs. For example, the transaction terminates if no
          <fo:inline font-family="monospace">person</fo:inline> table exists.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The semantics of this function is context-sensitive. For
          details, see <fo:inline font-family="monospace">mnesia:activity/4</fo:inline>. In
          transaction-context, it acquires a lock of type
          <fo:inline font-family="monospace">LockKind</fo:inline>. The lock types <fo:inline font-family="monospace">write</fo:inline> and
          <fo:inline font-family="monospace">sticky_write</fo:inline> are supported.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1669184">write_lock_table(Tab) -&gt; ok | transaction abort</fo:block></fo:block>
      
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calls the function
          <fo:inline font-family="monospace">mnesia:lock({table, Tab}, write)</fo:inline>.</fo:block>
      </fo:block>
  

  <fo:block id="idp1672608" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Configuration Parameters</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Mnesia reads the following application configuration
      parameters:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">-mnesia access_module Module</fo:inline>. The name of the
          Mnesia activity access callback module. Default is
          <fo:inline font-family="monospace">mnesia</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">-mnesia auto_repair true | false</fo:inline>. This flag
          controls if Mnesia automatically tries to repair
          files that have not been properly closed. Default is
          <fo:inline font-family="monospace">true</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">-mnesia backup_module Module</fo:inline>. The name of the
          Mnesia backup callback module. Default is
          <fo:inline font-family="monospace">mnesia_backup</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">-mnesia debug Level</fo:inline>. Controls the debug level
          of Mnesia. The possible values are as follows:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">none</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">No trace outputs. This is the default.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">verbose</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Activates tracing of important debug events. These
              events generate <fo:inline font-family="monospace">{mnesia_info, Format, Args}</fo:inline>
              system events. Processes can subscribe to these events with
              <fo:inline font-family="monospace">mnesia:subscribe/1</fo:inline>. The events are always sent to
              the Mnesia event handler.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">debug</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Activates all events at the verbose level plus full
              trace of all debug events. These debug events generate
              <fo:inline font-family="monospace">{mnesia_info, Format, Args}</fo:inline> system events.
              Processes can subscribe to these events with
              <fo:inline font-family="monospace">mnesia:subscribe/1</fo:inline>. The events are always sent to
              the Mnesia event handler. On this debug level,
              the Mnesia event handler starts subscribing to
              updates in the schema table.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">trace</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Activates all events at the debug level. On this
              level, the Mnesia event handler starts subscribing
              to updates on all Mnesia tables. This level is
              intended only for debugging small toy systems, as many
              large events can be generated.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">false</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">An alias for none.
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">true</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">An alias for debug.
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">-mnesia core_dir Directory</fo:inline>. The name of the
          directory where Mnesia core files is stored, or
          false. Setting it implies that also RAM-only nodes
          generate a core file if a crash occurs.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">-mnesia dc_dump_limit Number</fo:inline>. Controls how often
          <fo:inline font-family="monospace">disc_copies</fo:inline> tables are dumped from memory.
          Tables are dumped when 
          <fo:inline font-family="monospace">filesize(Log) &gt; (filesize(Tab)/Dc_dump_limit)</fo:inline>.
          Lower values reduce CPU overhead but increase disk space
          and startup times. Default is 4.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">-mnesia dir Directory</fo:inline>. The name of the directory
          where all Mnesia data is stored. The directory name
          must be unique for the current node. Two nodes must never
          share the the same Mnesia directory. The results
          are unpredictable.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">-mnesia dump_disc_copies_at_startup true | false</fo:inline>.
          If set to false, this disables the dumping of <fo:inline font-family="monospace">disc_copies</fo:inline>
          tables during startup while tables are being loaded. The default
          is true.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">-mnesia dump_log_load_regulation true | false</fo:inline>.
          Controls if log dumps are to be performed as fast as
          possible, or if the dumper is to do its own load
          regulation. Default is <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This feature is temporary and will be removed in a
          future release</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">-mnesia dump_log_update_in_place true | false</fo:inline>.
          Controls if log dumps are performed on a copy of the
          original data file, or if the log dump is performed
          on the original data file. Default is <fo:inline font-family="monospace">true</fo:inline></fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">-mnesia dump_log_write_threshold Max</fo:inline>.
          <fo:inline font-family="monospace">Max</fo:inline> is an integer that specifies the maximum
          number of writes allowed to the transaction log before
          a new dump of the log is performed. Default is <fo:inline font-family="monospace">100</fo:inline>
          log writes.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">-mnesia dump_log_time_threshold Max</fo:inline>.
          <fo:inline font-family="monospace">Max</fo:inline> is an integer that specifies the dump log
          interval in milliseconds. Default is 3 minutes. If a
          dump has not been performed within
          <fo:inline font-family="monospace">dump_log_time_threshold</fo:inline> milliseconds, a new dump
          is performed regardless of the number of writes
          performed.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">-mnesia event_module Module</fo:inline>. The name of the
          Mnesia event handler callback module. Default is
          <fo:inline font-family="monospace">mnesia_event</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">-mnesia extra_db_nodes Nodes</fo:inline> specifies a list of
          nodes, in addition to the ones found in the schema, with
          which Mnesia is also to establish contact. Default
          is <fo:inline font-family="monospace">[]</fo:inline> (empty list).</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">-mnesia fallback_error_function {UserModule, UserFunc}</fo:inline>.
          Specifies a user-supplied callback function, which is
          called if a fallback is installed and Mnesia goes
          down on another node. Mnesia calls the function
          with one argument, the name of the dying node, for example,
          <fo:inline font-family="monospace">UserModule:UserFunc(DyingNode)</fo:inline>. Mnesia must
          be restarted, otherwise the database can be inconsistent.
          The default behavior is to terminate Mnesia.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">-mnesia max_wait_for_decision Timeout</fo:inline>. Specifies
          how long Mnesia waits for other nodes to share their
          knowledge about the outcome of an unclear transaction. By
          default, <fo:inline font-family="monospace">Timeout</fo:inline> is set to the atom <fo:inline font-family="monospace">infinity</fo:inline>.
          This implies that if Mnesia upon startup detects
          a "heavyweight transaction" whose outcome is unclear, the
          local Mnesia waits until Mnesia is started
          on some (in the worst case all) of the other nodes that were
          involved in the interrupted transaction. This is a rare
          situation, but if it occurs, Mnesia does not guess if
          the transaction on the other nodes was committed or
          terminated. Mnesia waits until it knows the outcome
          and then acts accordingly.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Timeout</fo:inline> is set to an integer value in
          milliseconds, Mnesia forces "heavyweight transactions"
          to be finished, even if the outcome of the transaction for
          the moment is unclear. After <fo:inline font-family="monospace">Timeout</fo:inline> milliseconds,
          Mnesia commits or terminates the transaction and
          continues with the startup. This can lead to a situation
          where the transaction is committed on some nodes and
          terminated on other nodes. If the transaction is a
          schema transaction, the inconsistency can be fatal.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">-mnesia no_table_loaders NUMBER</fo:inline>. Specifies the number
          of parallel table loaders during start. More loaders can be
          good if the network latency is high or if many tables
          contain few records. Default is <fo:inline font-family="monospace">2</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">-mnesia send_compressed Level</fo:inline>. Specifies the level of
          compression to be used when copying a table from the local
          node to another one. Default is <fo:inline font-family="monospace">0</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Level</fo:inline> must be an integer in the interval
          <fo:inline font-family="monospace">[0, 9]</fo:inline>, where <fo:inline font-family="monospace">0</fo:inline> means no compression and
          <fo:inline font-family="monospace">9</fo:inline> means maximum compression. Before setting it to a
          non-zero value, ensure that the remote nodes
          understand this configuration.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">-mnesia schema_location Loc</fo:inline>. Controls where
          Mnesia looks for its schema. Parameter
          <fo:inline font-family="monospace">Loc</fo:inline> can be one of the following atoms:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">disc</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Mandatory disc. The schema is assumed to be located
              in the Mnesia directory. If the schema cannot
              be found, Mnesia refuses to start. This is the
              old behavior.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ram</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Mandatory RAM. The schema resides in RAM
              only. At startup, a tiny new schema is generated. This
              default schema only contains the definition of the schema
              table and only resides on the local node. Since no other
              nodes are found in the default schema, configuration
              parameter <fo:inline font-family="monospace">extra_db_nodes</fo:inline> must be used to let the
              node share its table definitions with other nodes.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parameter <fo:inline font-family="monospace">extra_db_nodes</fo:inline> can also be
              used on disc based nodes.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">opt_disc</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Optional disc. The schema can reside on disc or in
              RAM. If the schema is found on disc, Mnesia
              starts as a disc-based node and the storage type of
              the schema table is <fo:inline font-family="monospace">disc_copies</fo:inline>. If no schema is
              found on disc, Mnesia starts as a disc-less node
              and the storage type of the schema table is
              <fo:inline font-family="monospace">ram_copies</fo:inline>. Default value for the application
              parameter is <fo:inline font-family="monospace">opt_disc</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">First, the SASL application parameters are checked,
      then the command-line flags are checked, and finally, the
      default value is chosen.</fo:block>
  

  <fo:block id="idp4252752" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">See Also</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">application(3)</fo:inline>,
      <fo:inline font-style="italic">dets(3)</fo:inline>,
      <fo:inline font-style="italic">disk_log(3)</fo:inline>,
      <fo:inline font-style="italic">ets(3)</fo:inline>,
      <fo:inline font-style="italic">mnesia_registry(3)</fo:inline>,
      <fo:inline font-style="italic">qlc(3)</fo:inline></fo:block>
  
  
<fo:block page-break-before="always" id="idp4265744" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">mnesia_frag_hash</fo:marker>mnesia_frag_hash</fo:block>Erlang module</fo:block>
  <fo:block/>
  mnesia_frag_hash
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module defines a callback behavior for user-defined hash
      functions of fragmented tables.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Which module that is selected to implement the <fo:inline font-family="monospace">mnesia_frag_hash</fo:inline>
      behavior for a particular fragmented table is specified together
      with the other <fo:inline font-family="monospace">frag_properties</fo:inline>. The <fo:inline font-family="monospace">hash_module</fo:inline> defines
      the module name. The <fo:inline font-family="monospace">hash_state</fo:inline> defines the initial hash state.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module implements dynamic hashing, which is a kind of hashing
      that grows nicely when new fragments are added. It is well
      suited for scalable hash tables.</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4271088">init_state(Tab, State) -&gt; NewState | abort(Reason)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Tab = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">State = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NewState = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts when a fragmented table is
          created with the function <fo:inline font-family="monospace">mnesia:create_table/2</fo:inline> or
          when a normal (unfragmented) table is converted to be a
          fragmented table with <fo:inline font-family="monospace">mnesia:change_table_frag/2</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that the function <fo:inline font-family="monospace">add_frag/2</fo:inline> is started
          one time for each of the other fragments (except number 1)
          as a part of the table creation procedure.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">State</fo:inline> is the initial value of the <fo:inline font-family="monospace">hash_state</fo:inline>
          <fo:inline font-family="monospace">frag_property</fo:inline>. <fo:inline font-family="monospace">NewState</fo:inline> is stored as
          <fo:inline font-family="monospace">hash_state</fo:inline> among the other <fo:inline font-family="monospace">frag_properties</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4280576">add_frag(State) -&gt; {NewState, IterFrags, AdditionalLockFrags} | abort(Reason)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">State = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NewState = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">IterFrags = [integer()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AdditionalLockFrags = [integer()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To scale well, it is a good idea to ensure that the
          records are evenly distributed over all fragments, including
          the new one.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">NewState</fo:inline> is stored as <fo:inline font-family="monospace">hash_state</fo:inline> among the
          other <fo:inline font-family="monospace">frag_properties</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As a part of the <fo:inline font-family="monospace">add_frag</fo:inline> procedure, Mnesia iterates
          over all fragments corresponding to the <fo:inline font-family="monospace">IterFrags</fo:inline> numbers
          and starts <fo:inline font-family="monospace">key_to_frag_number(NewState,RecordKey)</fo:inline> for
          each record. If the new fragment differs from the old
          fragment, the record is moved to the new fragment.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As the <fo:inline font-family="monospace">add_frag</fo:inline> procedure is a part of a schema
          transaction, Mnesia acquires write locks on the
          affected tables. That is, both the fragments corresponding
          to <fo:inline font-family="monospace">IterFrags</fo:inline> and those corresponding to
          <fo:inline font-family="monospace">AdditionalLockFrags</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4291376">del_frag(State) -&gt;  {NewState, IterFrags, AdditionalLockFrags} | abort(Reason)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">State = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NewState = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">IterFrags = [integer()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AdditionalLockFrags = [integer()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">NewState</fo:inline> is stored as <fo:inline font-family="monospace">hash_state</fo:inline> among the
          other <fo:inline font-family="monospace">frag_properties</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As a part of the <fo:inline font-family="monospace">del_frag</fo:inline> procedure, Mnesia iterates
          over all fragments corresponding to the <fo:inline font-family="monospace">IterFrags</fo:inline> numbers
          and starts <fo:inline font-family="monospace">key_to_frag_number(NewState,RecordKey)</fo:inline> for
          each record. If the new fragment differs from the old
          fragment, the record is moved to the new fragment.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that all records in the last fragment must be moved to
          another fragment, as the entire fragment is deleted.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As the <fo:inline font-family="monospace">del_frag</fo:inline> procedure is a part of a schema
          transaction, Mnesia acquires write locks on the
          affected tables. That is, both the fragments corresponding
          to <fo:inline font-family="monospace">IterFrags</fo:inline> and those corresponding to
          <fo:inline font-family="monospace">AdditionalLockFrags</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4302160">key_to_frag_number(State, Key) -&gt; FragNum | abort(Reason)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FragNum = integer()()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts whenever Mnesia needs to determine
          which fragment a certain record belongs to. It is typically
          started at <fo:inline font-family="monospace">read</fo:inline>, <fo:inline font-family="monospace">write</fo:inline>, and <fo:inline font-family="monospace">delete</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4307216">match_spec_to_frag_numbers(State, MatchSpec) -&gt; FragNums | abort(Reason)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MatcSpec = ets_select_match_spec()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FragNums = [FragNum]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FragNum = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is called whenever Mnesia needs to determine
          which fragments that need to be searched for a <fo:inline font-family="monospace">MatchSpec</fo:inline>.
          It is typically called by <fo:inline font-family="monospace">select</fo:inline> and
          <fo:inline font-family="monospace">match_object</fo:inline>.</fo:block>
      </fo:block>
  

  <fo:block id="idp4313856" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">See Also</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">mnesia(3)</fo:inline></fo:block>
  
  
<fo:block page-break-before="always" id="idp4323264" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">mnesia_registry</fo:marker>mnesia_registry</fo:block>Erlang module</fo:block>
  <fo:block/>
  mnesia_registry
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module is usually part of the <fo:inline font-family="monospace">erl_interface</fo:inline>
      application, but is currently part of the Mnesia
      application.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module is mainly intended for internal use within OTP,
      but it has two functions that are exported for public use.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On C-nodes, <fo:inline font-family="monospace">erl_interface</fo:inline> has support for registry
      tables. These tables reside in RAM on the C-node, but can also
      be dumped into Mnesia tables. By default, the dumping
      of registry tables through <fo:inline font-family="monospace">erl_interface</fo:inline> causes a
      corresponding Mnesia table to be created with
      <fo:inline font-family="monospace">mnesia_registry:create_table/1</fo:inline>, if necessary.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tables that are created with these functions can be
      administered as all other Mnesia tables. They can be
      included in backups, replicas can be added, and so on.
      The tables are normal Mnesia tables owned by the user
      of the corresponding <fo:inline font-family="monospace">erl_interface</fo:inline> registries.</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp4329856">create_table(Tab) -&gt; ok | exit(Reason)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A wrapper function for <fo:inline font-family="monospace">mnesia:create_table/2</fo:inline>,
          which creates a table (if there is no existing table)
          with an appropriate set of <fo:inline font-family="monospace">attributes</fo:inline>. The table
          only resides on the local node and its storage type is
          the same as the <fo:inline font-family="monospace">schema</fo:inline> table on the local node,
          that is, <fo:inline font-family="monospace">{ram_copies,[node()]}</fo:inline> or
          <fo:inline font-family="monospace">{disc_copies,[node()]}</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is used by <fo:inline font-family="monospace">erl_interface</fo:inline> to
          create the Mnesia table if it does not already
          exist.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1502816">create_table(Tab, TabDef) -&gt; ok | exit(Reason)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A wrapper function for <fo:inline font-family="monospace">mnesia:create_table/2</fo:inline>,
          which creates a table (if there is no existing table)
          with an appropriate set of <fo:inline font-family="monospace">attributes</fo:inline>. The
          attributes and <fo:inline font-family="monospace">TabDef</fo:inline> are forwarded to
          <fo:inline font-family="monospace">mnesia:create_table/2</fo:inline>. For example, if the table
          is to reside as <fo:inline font-family="monospace">disc_only_copies</fo:inline> on all nodes,
          a call looks as follows:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
          TabDef = [{{disc_only_copies, node()|nodes()]}],
          mnesia_registry:create_table(my_reg, TabDef)</fo:block>
      </fo:block>
  

  <fo:block id="idp1740064" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">See Also</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">erl_interface(3)</fo:inline>,
      <fo:inline font-style="italic">mnesia(3)</fo:inline></fo:block>
  

</fo:flow>
  </fo:page-sequence>
</fo:root>
