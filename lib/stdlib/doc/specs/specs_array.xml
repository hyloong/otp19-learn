<module name="array">
<type>
  <name>array</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-array">array()</marker> = <seealso marker="#type-array">array</seealso>(term())</typehead></typedecl>
</type>
<type>
  <name>array</name>
  <n_vars>1</n_vars>
  <typedecl>
      <typehead><marker id="type-array">array(Type)</marker></typehead></typedecl>
  <anno>Type</anno>
</type>
<type>
  <name>array_indx</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-array_indx">array_indx()</marker> = integer() &gt;= 0</typehead></typedecl>
</type>
<type>
  <name>array_opt</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-array_opt">array_opt()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{fixed, boolean()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>fixed |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{default, Type :: term()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{size, N :: integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>(N :: integer() &gt;= 0)</typehead></typedecl>
  <anno>N</anno>
  <anno>Type</anno>
</type>
<type>
  <name>array_opts</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-array_opts">array_opts()</marker> = <seealso marker="#type-array_opt">array_opt()</seealso> | [<seealso marker="#type-array_opt">array_opt()</seealso>]</typehead></typedecl>
</type>
<type>
  <name>indx_pair</name>
  <n_vars>1</n_vars>
  <typedecl>
      <typehead><marker id="type-indx_pair">indx_pair(Type)</marker> = {Index :: <seealso marker="#type-array_indx">array_indx()</seealso>, Type}</typehead></typedecl>
  <anno>Index</anno>
  <anno>Type</anno>
</type>
<type>
  <name>indx_pairs</name>
  <n_vars>1</n_vars>
  <typedecl>
      <typehead><marker id="type-indx_pairs">indx_pairs(Type)</marker> = [<seealso marker="#type-indx_pair">indx_pair</seealso>(Type)]</typehead></typedecl>
  <anno>Type</anno>
</type>
<spec>
  <name>default</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>default(Array :: <seealso marker="#type-array">array</seealso>(Type)) -&gt; Value :: Type</head></clause>
  </contract>
  <anno>Array</anno>
  <anno>Type</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>fix</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>fix(Array :: <seealso marker="#type-array">array</seealso>(Type)) -&gt; <seealso marker="#type-array">array</seealso>(Type)</head></clause>
  </contract>
  <anno>Array</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>foldl</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>foldl(Function, InitialAcc :: A, Array :: <seealso marker="#type-array">array</seealso>(Type)) -&gt; B</head>
      <guard>
        <subtype><typename>Function</typename><string>Function = <br/><nbsp/><nbsp/><nbsp/><nbsp/>fun((Index :: <seealso marker="#type-array_indx">array_indx()</seealso>, Value :: Type, Acc :: A) -&gt; B)</string></subtype>
      </guard></clause>
  </contract>
  <anno>A</anno>
  <anno>Acc</anno>
  <anno>Array</anno>
  <anno>B</anno>
  <anno>Function</anno>
  <anno>Index</anno>
  <anno>InitialAcc</anno>
  <anno>Type</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>foldr</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>foldr(Function, InitialAcc :: A, Array :: <seealso marker="#type-array">array</seealso>(Type)) -&gt; B</head>
      <guard>
        <subtype><typename>Function</typename><string>Function = <br/><nbsp/><nbsp/><nbsp/><nbsp/>fun((Index :: <seealso marker="#type-array_indx">array_indx()</seealso>, Value :: Type, Acc :: A) -&gt; B)</string></subtype>
      </guard></clause>
  </contract>
  <anno>A</anno>
  <anno>Acc</anno>
  <anno>Array</anno>
  <anno>B</anno>
  <anno>Function</anno>
  <anno>Index</anno>
  <anno>InitialAcc</anno>
  <anno>Type</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>from_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>from_list(List :: [Value :: Type]) -&gt; <seealso marker="#type-array">array</seealso>(Type)</head></clause>
  </contract>
  <anno>List</anno>
  <anno>Type</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>from_list</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>from_list(List :: [Value :: Type], Default :: term()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-array">array</seealso>(Type)</head></clause>
  </contract>
  <anno>Default</anno>
  <anno>List</anno>
  <anno>Type</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>from_orddict</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>from_orddict(Orddict :: <seealso marker="#type-indx_pairs">indx_pairs</seealso>(Value :: Type)) -&gt; <seealso marker="#type-array">array</seealso>(Type)</head></clause>
  </contract>
  <anno>Orddict</anno>
  <anno>Type</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>from_orddict</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>from_orddict(Orddict :: <seealso marker="#type-indx_pairs">indx_pairs</seealso>(Value :: Type),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Default :: Type) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-array">array</seealso>(Type)</head></clause>
  </contract>
  <anno>Default</anno>
  <anno>Orddict</anno>
  <anno>Type</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>get</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>get(I :: <seealso marker="#type-array_indx">array_indx()</seealso>, Array :: <seealso marker="#type-array">array</seealso>(Type)) -&gt; Value :: Type</head></clause>
  </contract>
  <anno>Array</anno>
  <anno>I</anno>
  <anno>Type</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>is_array</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_array(X :: term()) -&gt; boolean()</head></clause>
  </contract>
  <anno>X</anno>
</spec>
<spec>
  <name>is_fix</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_fix(Array :: <seealso marker="#type-array">array()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>Array</anno>
</spec>
<spec>
  <name>map</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>map(Function, Array :: <seealso marker="#type-array">array</seealso>(Type1)) -&gt; <seealso marker="#type-array">array</seealso>(Type2)</head>
      <guard>
        <subtype><typename>Function</typename><string>Function = fun((Index :: <seealso marker="#type-array_indx">array_indx()</seealso>, Type1) -&gt; Type2)</string></subtype>
      </guard></clause>
  </contract>
  <anno>Array</anno>
  <anno>Function</anno>
  <anno>Index</anno>
  <anno>Type1</anno>
  <anno>Type2</anno>
</spec>
<spec>
  <name>new</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>new() -&gt; <seealso marker="#type-array">array()</seealso></head></clause>
  </contract>
</spec>
<spec>
  <name>new</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>new(Options :: <seealso marker="#type-array_opts">array_opts()</seealso>) -&gt; <seealso marker="#type-array">array()</seealso></head></clause>
  </contract>
  <anno>Options</anno>
</spec>
<spec>
  <name>new</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>new(Size :: integer() &gt;= 0, Options :: <seealso marker="#type-array_opts">array_opts()</seealso>) -&gt; <seealso marker="#type-array">array()</seealso></head></clause>
  </contract>
  <anno>Options</anno>
  <anno>Size</anno>
</spec>
<spec>
  <name>relax</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>relax(Array :: <seealso marker="#type-array">array</seealso>(Type)) -&gt; <seealso marker="#type-array">array</seealso>(Type)</head></clause>
  </contract>
  <anno>Array</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>reset</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>reset(I :: <seealso marker="#type-array_indx">array_indx()</seealso>, Array :: <seealso marker="#type-array">array</seealso>(Type)) -&gt; <seealso marker="#type-array">array</seealso>(Type)</head></clause>
  </contract>
  <anno>Array</anno>
  <anno>I</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>resize</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>resize(Array :: <seealso marker="#type-array">array</seealso>(Type)) -&gt; <seealso marker="#type-array">array</seealso>(Type)</head></clause>
  </contract>
  <anno>Array</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>resize</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>resize(Size :: integer() &gt;= 0, Array :: <seealso marker="#type-array">array</seealso>(Type)) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-array">array</seealso>(Type)</head></clause>
  </contract>
  <anno>Array</anno>
  <anno>Size</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>set</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>set(I :: <seealso marker="#type-array_indx">array_indx()</seealso>, Value :: Type, Array :: <seealso marker="#type-array">array</seealso>(Type)) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-array">array</seealso>(Type)</head></clause>
  </contract>
  <anno>Array</anno>
  <anno>I</anno>
  <anno>Type</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>size</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>size(Array :: <seealso marker="#type-array">array()</seealso>) -&gt; integer() &gt;= 0</head></clause>
  </contract>
  <anno>Array</anno>
</spec>
<spec>
  <name>sparse_foldl</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>sparse_foldl(Function, InitialAcc :: A, Array :: <seealso marker="#type-array">array</seealso>(Type)) -&gt; B</head>
      <guard>
        <subtype><typename>Function</typename><string>Function = <br/><nbsp/><nbsp/><nbsp/><nbsp/>fun((Index :: <seealso marker="#type-array_indx">array_indx()</seealso>, Value :: Type, Acc :: A) -&gt; B)</string></subtype>
      </guard></clause>
  </contract>
  <anno>A</anno>
  <anno>Acc</anno>
  <anno>Array</anno>
  <anno>B</anno>
  <anno>Function</anno>
  <anno>Index</anno>
  <anno>InitialAcc</anno>
  <anno>Type</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>sparse_foldr</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>sparse_foldr(Function, InitialAcc :: A, Array :: <seealso marker="#type-array">array</seealso>(Type)) -&gt; B</head>
      <guard>
        <subtype><typename>Function</typename><string>Function = <br/><nbsp/><nbsp/><nbsp/><nbsp/>fun((Index :: <seealso marker="#type-array_indx">array_indx()</seealso>, Value :: Type, Acc :: A) -&gt; B)</string></subtype>
      </guard></clause>
  </contract>
  <anno>A</anno>
  <anno>Acc</anno>
  <anno>Array</anno>
  <anno>B</anno>
  <anno>Function</anno>
  <anno>Index</anno>
  <anno>InitialAcc</anno>
  <anno>Type</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>sparse_map</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>sparse_map(Function, Array :: <seealso marker="#type-array">array</seealso>(Type1)) -&gt; <seealso marker="#type-array">array</seealso>(Type2)</head>
      <guard>
        <subtype><typename>Function</typename><string>Function = fun((Index :: <seealso marker="#type-array_indx">array_indx()</seealso>, Type1) -&gt; Type2)</string></subtype>
      </guard></clause>
  </contract>
  <anno>Array</anno>
  <anno>Function</anno>
  <anno>Index</anno>
  <anno>Type1</anno>
  <anno>Type2</anno>
</spec>
<spec>
  <name>sparse_size</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>sparse_size(Array :: <seealso marker="#type-array">array()</seealso>) -&gt; integer() &gt;= 0</head></clause>
  </contract>
  <anno>Array</anno>
</spec>
<spec>
  <name>sparse_to_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>sparse_to_list(Array :: <seealso marker="#type-array">array</seealso>(Type)) -&gt; [Value :: Type]</head></clause>
  </contract>
  <anno>Array</anno>
  <anno>Type</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>sparse_to_orddict</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>sparse_to_orddict(Array :: <seealso marker="#type-array">array</seealso>(Type)) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-indx_pairs">indx_pairs</seealso>(Value :: Type)</head></clause>
  </contract>
  <anno>Array</anno>
  <anno>Type</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>to_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>to_list(Array :: <seealso marker="#type-array">array</seealso>(Type)) -&gt; [Value :: Type]</head></clause>
  </contract>
  <anno>Array</anno>
  <anno>Type</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>to_orddict</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>to_orddict(Array :: <seealso marker="#type-array">array</seealso>(Type)) -&gt; <seealso marker="#type-indx_pairs">indx_pairs</seealso>(Value :: Type)</head></clause>
  </contract>
  <anno>Array</anno>
  <anno>Type</anno>
  <anno>Value</anno>
</spec>
<timestamp>Generated by EDoc, Jul 12 2017, 20:27:10.</timestamp>
</module>