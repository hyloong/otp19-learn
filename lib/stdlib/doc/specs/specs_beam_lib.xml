<module name="beam_lib">
<type>
  <name>abst_code</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-abst_code">abst_code()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{AbstVersion :: atom(), <seealso marker="#type-forms">forms()</seealso>} | no_abstract_code</typehead></typedecl>
  <anno>AbstVersion</anno>
</type>
<type>
  <name>attrib_entry</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-attrib_entry">attrib_entry()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{Attribute :: atom(), [AttributeValue :: term()]}</typehead></typedecl>
  <anno>Attribute</anno>
  <anno>AttributeValue</anno>
</type>
<type>
  <name>beam</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-beam">beam()</marker> = module() | <seealso marker="file#type-filename">file:filename()</seealso> | binary()</typehead></typedecl>
</type>
<type>
  <name>calls</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-calls">calls()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>clear_crypto_key_fun |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{crypto_key_fun, term()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{get_crypto_key, term()}</typehead></typedecl>
</type>
<type>
  <name>chnk_rsn</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-chnk_rsn">chnk_rsn()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{unknown_chunk, <seealso marker="file#type-filename">file:filename()</seealso>, atom()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{key_missing_or_invalid,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="file#type-filename">file:filename()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>abstract_code | debug_info} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-info_rsn">info_rsn()</seealso></typehead></typedecl>
</type>
<type>
  <name>chunkdata</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-chunkdata">chunkdata()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{<seealso marker="#type-chunkid">chunkid()</seealso>, <seealso marker="#type-dataB">dataB()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{abstract_code, <seealso marker="#type-abst_code">abst_code()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{debug_info, <seealso marker="#type-debug_info">debug_info()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{attributes, [<seealso marker="#type-attrib_entry">attrib_entry()</seealso>]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{compile_info, [<seealso marker="#type-compinfo_entry">compinfo_entry()</seealso>]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{exports, [{atom(), arity()}]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{labeled_exports, [<seealso marker="#type-labeled_entry">labeled_entry()</seealso>]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{imports, [mfa()]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{indexed_imports,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{<seealso marker="#type-index">index()</seealso>, module(), Function :: atom(), arity()}]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{locals, [{atom(), arity()}]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{labeled_locals, [<seealso marker="#type-labeled_entry">labeled_entry()</seealso>]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{atoms, [{integer(), atom()}]}</typehead></typedecl>
  <anno>Function</anno>
</type>
<type>
  <name>chunkid</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-chunkid">chunkid()</marker> = nonempty_string()</typehead></typedecl>
</type>
<type>
  <name>chunkname</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-chunkname">chunkname()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>abstract_code |<br/><nbsp/><nbsp/><nbsp/><nbsp/>debug_info |<br/><nbsp/><nbsp/><nbsp/><nbsp/>attributes |<br/><nbsp/><nbsp/><nbsp/><nbsp/>compile_info |<br/><nbsp/><nbsp/><nbsp/><nbsp/>exports |<br/><nbsp/><nbsp/><nbsp/><nbsp/>labeled_exports |<br/><nbsp/><nbsp/><nbsp/><nbsp/>imports |<br/><nbsp/><nbsp/><nbsp/><nbsp/>indexed_imports |<br/><nbsp/><nbsp/><nbsp/><nbsp/>locals |<br/><nbsp/><nbsp/><nbsp/><nbsp/>labeled_locals |<br/><nbsp/><nbsp/><nbsp/><nbsp/>atoms</typehead></typedecl>
</type>
<type>
  <name>chunkref</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-chunkref">chunkref()</marker> = <seealso marker="#type-chunkname">chunkname()</seealso> | <seealso marker="#type-chunkid">chunkid()</seealso></typehead></typedecl>
</type>
<type>
  <name>cmp_rsn</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-cmp_rsn">cmp_rsn()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{modules_different, module(), module()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{chunks_different, <seealso marker="#type-chunkid">chunkid()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>different_chunks |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-info_rsn">info_rsn()</seealso></typehead></typedecl>
</type>
<type>
  <name>compinfo_entry</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-compinfo_entry">compinfo_entry()</marker> = {InfoKey :: atom(), term()}</typehead></typedecl>
  <anno>InfoKey</anno>
</type>
<type>
  <name>crypto_fun</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-crypto_fun">crypto_fun()</marker> = fun((<seealso marker="#type-crypto_fun_arg">crypto_fun_arg()</seealso>) -&gt; term())</typehead></typedecl>
</type>
<type>
  <name>crypto_fun_arg</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-crypto_fun_arg">crypto_fun_arg()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>init | clear | {debug_info, <seealso marker="#type-mode">mode()</seealso>, module(), <seealso marker="file#type-filename">file:filename()</seealso>}</typehead></typedecl>
</type>
<type>
  <name>dataB</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-dataB">dataB()</marker> = binary()</typehead></typedecl>
</type>
<type>
  <name>debug_info</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-debug_info">debug_info()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{DbgiVersion :: atom(), Backend :: module(), Data :: term()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>no_debug_info</typehead></typedecl>
  <anno>Backend</anno>
  <anno>Data</anno>
  <anno>DbgiVersion</anno>
</type>
<type>
  <name>forms</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-forms">forms()</marker> = [<seealso marker="erl_parse#type-abstract_form">erl_parse:abstract_form()</seealso> | <seealso marker="erl_parse#type-form_info">erl_parse:form_info()</seealso>]</typehead></typedecl>
</type>
<type>
  <name>index</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-index">index()</marker> = integer() &gt;= 0</typehead></typedecl>
</type>
<type>
  <name>info_rsn</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-info_rsn">info_rsn()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{chunk_too_big,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="file#type-filename">file:filename()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-chunkid">chunkid()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ChunkSize :: integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>FileSize :: integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{invalid_beam_file,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="file#type-filename">file:filename()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Position :: integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{invalid_chunk, <seealso marker="file#type-filename">file:filename()</seealso>, <seealso marker="#type-chunkid">chunkid()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{missing_chunk, <seealso marker="file#type-filename">file:filename()</seealso>, <seealso marker="#type-chunkid">chunkid()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{not_a_beam_file, <seealso marker="file#type-filename">file:filename()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{file_error, <seealso marker="file#type-filename">file:filename()</seealso>, <seealso marker="file#type-posix">file:posix()</seealso>}</typehead></typedecl>
  <anno>ChunkSize</anno>
  <anno>FileSize</anno>
  <anno>Position</anno>
</type>
<type>
  <name>label</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-label">label()</marker> = integer()</typehead></typedecl>
</type>
<type>
  <name>labeled_entry</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-labeled_entry">labeled_entry()</marker> = {Function :: atom(), arity(), <seealso marker="#type-label">label()</seealso>}</typehead></typedecl>
  <anno>Function</anno>
</type>
<type>
  <name>mode</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-mode">mode()</marker> = des3_cbc</typehead></typedecl>
</type>
<spec>
  <name>all_chunks</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>all_chunks(File :: <seealso marker="#type-beam">beam()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, beam_lib, [{<seealso marker="#type-chunkid">chunkid()</seealso>, <seealso marker="#type-dataB">dataB()</seealso>}]}</head></clause>
  </contract>
  <anno>File</anno>
</spec>
<spec>
  <name>build_module</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>build_module(Chunks) -&gt; {ok, Binary}</head>
      <guard>
        <subtype><typename>Chunks</typename><string>Chunks = [{<seealso marker="#type-chunkid">chunkid()</seealso>, <seealso marker="#type-dataB">dataB()</seealso>}]</string></subtype>
        <subtype><typename>Binary</typename><string>Binary = binary()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Binary</anno>
  <anno>Chunks</anno>
</spec>
<spec>
  <name>chunks</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>chunks(Beam, ChunkRefs) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, {module(), [<seealso marker="#type-chunkdata">chunkdata()</seealso>]}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, beam_lib, <seealso marker="#type-chnk_rsn">chnk_rsn()</seealso>}</head>
      <guard>
        <subtype><typename>Beam</typename><string>Beam = <seealso marker="#type-beam">beam()</seealso></string></subtype>
        <subtype><typename>ChunkRefs</typename><string>ChunkRefs = [<seealso marker="#type-chunkref">chunkref()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Beam</anno>
  <anno>ChunkRefs</anno>
</spec>
<spec>
  <name>chunks</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>chunks(Beam, ChunkRefs, Options) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, {module(), [ChunkResult]}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, beam_lib, <seealso marker="#type-chnk_rsn">chnk_rsn()</seealso>}</head>
      <guard>
        <subtype><typename>Beam</typename><string>Beam = <seealso marker="#type-beam">beam()</seealso></string></subtype>
        <subtype><typename>ChunkRefs</typename><string>ChunkRefs = [<seealso marker="#type-chunkref">chunkref()</seealso>]</string></subtype>
        <subtype><typename>Options</typename><string>Options = [allow_missing_chunks]</string></subtype>
        <subtype><typename>ChunkResult</typename><string>ChunkResult = <br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-chunkdata">chunkdata()</seealso> | {ChunkRef :: <seealso marker="#type-chunkref">chunkref()</seealso>, missing_chunk}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Beam</anno>
  <anno>ChunkRef</anno>
  <anno>ChunkRefs</anno>
  <anno>ChunkResult</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>clear_crypto_key_fun</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>clear_crypto_key_fun() -&gt; undefined | {ok, Result}</head>
      <guard>
        <subtype><typename>Result</typename><string>Result = undefined | term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Result</anno>
</spec>
<spec>
  <name>cmp</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>cmp(Beam1, Beam2) -&gt; ok | {error, beam_lib, <seealso marker="#type-cmp_rsn">cmp_rsn()</seealso>}</head>
      <guard>
        <subtype><typename>Beam1</typename><string>Beam1 = Beam2 = <seealso marker="#type-beam">beam()</seealso></string></subtype>
        <subtype><typename>Beam2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Beam1</anno>
  <anno>Beam2</anno>
</spec>
<spec>
  <name>cmp_dirs</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>cmp_dirs(Dir1, Dir2) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{Only1, Only2, Different} | {error, beam_lib, Reason}</head>
      <guard>
        <subtype><typename>Dir1</typename><string>Dir1 = Dir2 = atom() | <seealso marker="file#type-filename">file:filename()</seealso></string></subtype>
        <subtype><typename>Dir2</typename><string/></subtype>
        <subtype><typename>Only1</typename><string>Only1 = Only2 = [<seealso marker="file#type-filename">file:filename()</seealso>]</string></subtype>
        <subtype><typename>Only2</typename><string/></subtype>
        <subtype><typename>Different</typename><string>Different = <br/><nbsp/><nbsp/><nbsp/><nbsp/>[{Filename1 :: <seealso marker="file#type-filename">file:filename()</seealso>, Filename2 :: <seealso marker="file#type-filename">file:filename()</seealso>}]</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = {not_a_directory, term()} | <seealso marker="#type-info_rsn">info_rsn()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Different</anno>
  <anno>Dir1</anno>
  <anno>Dir2</anno>
  <anno>Filename1</anno>
  <anno>Filename2</anno>
  <anno>Only1</anno>
  <anno>Only2</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>code_change</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>code_change(OldVsn :: term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>State ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>#state{crypto_key_f = <seealso marker="#type-crypto_fun">crypto_fun()</seealso> | undefined},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Extra :: term()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>#state{crypto_key_f = <seealso marker="#type-crypto_fun">crypto_fun()</seealso> | undefined}}</head></clause>
  </contract>
  <anno>Extra</anno>
  <anno>OldVsn</anno>
  <anno>State</anno>
</spec>
<spec>
  <name>crypto_key_fun</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>crypto_key_fun(CryptoKeyFun) -&gt; ok | {error, Reason}</head>
      <guard>
        <subtype><typename>CryptoKeyFun</typename><string>CryptoKeyFun = <seealso marker="#type-crypto_fun">crypto_fun()</seealso></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = badfun | exists | term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>CryptoKeyFun</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>diff_dirs</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>diff_dirs(Dir1, Dir2) -&gt; ok | {error, beam_lib, Reason}</head>
      <guard>
        <subtype><typename>Dir1</typename><string>Dir1 = Dir2 = atom() | <seealso marker="file#type-filename">file:filename()</seealso></string></subtype>
        <subtype><typename>Dir2</typename><string/></subtype>
        <subtype><typename>Reason</typename><string>Reason = {not_a_directory, term()} | <seealso marker="#type-info_rsn">info_rsn()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Dir1</anno>
  <anno>Dir2</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>format_error</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>format_error(Reason) -&gt; <seealso marker="io_lib#type-chars">io_lib:chars()</seealso></head>
      <guard>
        <subtype><typename>Reason</typename><string>Reason = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Reason</anno>
</spec>
<spec>
  <name>get_crypto_key</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>handle_call</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>handle_call(R :: <seealso marker="#type-calls">calls()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>From :: {pid(), term()},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>State ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>#state{crypto_key_f = <seealso marker="#type-crypto_fun">crypto_fun()</seealso> | undefined}) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{noreply,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>#state{crypto_key_f = <seealso marker="#type-crypto_fun">crypto_fun()</seealso> | undefined}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{reply,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>error | {error, badfun | exists},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>#state{crypto_key_f = <seealso marker="#type-crypto_fun">crypto_fun()</seealso> | undefined}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{stop,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>normal,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>undefined | {ok, term()},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>#state{crypto_key_f = <seealso marker="#type-crypto_fun">crypto_fun()</seealso> | undefined}}</head></clause>
  </contract>
  <anno>From</anno>
  <anno>R</anno>
  <anno>State</anno>
</spec>
<spec>
  <name>handle_cast</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>handle_cast(X1 :: term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>State ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>#state{crypto_key_f = <seealso marker="#type-crypto_fun">crypto_fun()</seealso> | undefined}) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{noreply,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>#state{crypto_key_f = <seealso marker="#type-crypto_fun">crypto_fun()</seealso> | undefined}}</head></clause>
  </contract>
  <anno>State</anno>
  <anno>X1</anno>
</spec>
<spec>
  <name>handle_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>handle_info(X1 :: term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>State ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>#state{crypto_key_f = <seealso marker="#type-crypto_fun">crypto_fun()</seealso> | undefined}) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{noreply,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>#state{crypto_key_f = <seealso marker="#type-crypto_fun">crypto_fun()</seealso> | undefined}}</head></clause>
  </contract>
  <anno>State</anno>
  <anno>X1</anno>
</spec>
<spec>
  <name>info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>info(Beam) -&gt; [InfoPair] | {error, beam_lib, <seealso marker="#type-info_rsn">info_rsn()</seealso>}</head>
      <guard>
        <subtype><typename>Beam</typename><string>Beam = <seealso marker="#type-beam">beam()</seealso></string></subtype>
        <subtype><typename>InfoPair</typename><string>InfoPair = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{file, Filename :: <seealso marker="file#type-filename">file:filename()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{binary, Binary :: binary()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{module, Module :: module()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{chunks,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{ChunkId :: <seealso marker="#type-chunkid">chunkid()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Pos :: integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Size :: integer() &gt;= 0}]}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Beam</anno>
  <anno>Binary</anno>
  <anno>ChunkId</anno>
  <anno>Filename</anno>
  <anno>InfoPair</anno>
  <anno>Module</anno>
  <anno>Pos</anno>
  <anno>Size</anno>
</spec>
<spec>
  <name>init</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>init(X1 :: []) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, #state{crypto_key_f = <seealso marker="#type-crypto_fun">crypto_fun()</seealso> | undefined}}</head></clause>
  </contract>
  <anno>X1</anno>
</spec>
<spec>
  <name>make_crypto_key</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>make_crypto_key(Type :: <seealso marker="#type-mode">mode()</seealso>, String :: string()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{<seealso marker="#type-mode">mode()</seealso>, [binary()], binary(), integer()}</head></clause>
  </contract>
  <anno>String</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>md5</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>md5(Beam) -&gt; {ok, {module(), MD5}} | {error, beam_lib, <seealso marker="#type-chnk_rsn">chnk_rsn()</seealso>}</head>
      <guard>
        <subtype><typename>Beam</typename><string>Beam = <seealso marker="#type-beam">beam()</seealso></string></subtype>
        <subtype><typename>MD5</typename><string>MD5 = binary()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Beam</anno>
  <anno>MD5</anno>
</spec>
<spec>
  <name>strip</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>strip(Beam1) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, {module(), Beam2}} | {error, beam_lib, <seealso marker="#type-info_rsn">info_rsn()</seealso>}</head>
      <guard>
        <subtype><typename>Beam1</typename><string>Beam1 = Beam2 = <seealso marker="#type-beam">beam()</seealso></string></subtype>
        <subtype><typename>Beam2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Beam1</anno>
  <anno>Beam2</anno>
</spec>
<spec>
  <name>strip_files</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>strip_files(Files) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, [{module(), Beam}]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, beam_lib, <seealso marker="#type-info_rsn">info_rsn()</seealso>}</head>
      <guard>
        <subtype><typename>Files</typename><string>Files = [<seealso marker="#type-beam">beam()</seealso>]</string></subtype>
        <subtype><typename>Beam</typename><string>Beam = <seealso marker="#type-beam">beam()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Beam</anno>
  <anno>Files</anno>
</spec>
<spec>
  <name>strip_release</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>strip_release(Dir) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, [{module(), <seealso marker="file#type-filename">file:filename()</seealso>}]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, beam_lib, Reason}</head>
      <guard>
        <subtype><typename>Dir</typename><string>Dir = atom() | <seealso marker="file#type-filename">file:filename()</seealso></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = {not_a_directory, term()} | <seealso marker="#type-info_rsn">info_rsn()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Dir</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>terminate</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>terminate(Reason :: term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>State ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>#state{crypto_key_f = <seealso marker="#type-crypto_fun">crypto_fun()</seealso> | undefined}) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head></clause>
  </contract>
  <anno>Reason</anno>
  <anno>State</anno>
</spec>
<spec>
  <name>version</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>version(Beam) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, {module(), [Version :: term()]}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, beam_lib, <seealso marker="#type-chnk_rsn">chnk_rsn()</seealso>}</head>
      <guard>
        <subtype><typename>Beam</typename><string>Beam = <seealso marker="#type-beam">beam()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Beam</anno>
  <anno>Version</anno>
</spec>
<timestamp>Generated by EDoc, Jul 12 2017, 20:27:11.</timestamp>
</module>