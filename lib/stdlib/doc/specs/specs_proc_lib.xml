<module name="proc_lib">
<type>
  <name>dict_or_pid</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-dict_or_pid">dict_or_pid()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>pid() |<br/><nbsp/><nbsp/><nbsp/><nbsp/>(ProcInfo :: [term()]) |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{X :: integer(), Y :: integer(), Z :: integer()}</typehead></typedecl>
  <anno>ProcInfo</anno>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</type>
<type>
  <name>max_heap_size</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-max_heap_size">max_heap_size()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>integer() &gt;= 0 |<br/><nbsp/><nbsp/><nbsp/><nbsp/>#{size =&gt; integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>kill =&gt; true,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>error_logger =&gt; true}</typehead></typedecl>
</type>
<type>
  <name>priority_level</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-priority_level">priority_level()</marker> = high | low | max | normal</typehead></typedecl>
</type>
<type>
  <name>spawn_option</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-spawn_option">spawn_option()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>link |<br/><nbsp/><nbsp/><nbsp/><nbsp/>monitor |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{priority, <seealso marker="#type-priority_level">priority_level()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{max_heap_size, <seealso marker="#type-max_heap_size">max_heap_size()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{min_heap_size, integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{min_bin_vheap_size, integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{fullsweep_after, integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{message_queue_data, off_heap | on_heap | mixed}</typehead></typedecl>
</type>
<spec>
  <name>format</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>format(CrashReport) -&gt; string()</head>
      <guard>
        <subtype><typename>CrashReport</typename><string>CrashReport = [term()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>CrashReport</anno>
</spec>
<spec>
  <name>format</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>format(CrashReport, Encoding) -&gt; string()</head>
      <guard>
        <subtype><typename>CrashReport</typename><string>CrashReport = [term()]</string></subtype>
        <subtype><typename>Encoding</typename><string>Encoding = latin1 | unicode | utf8</string></subtype>
      </guard></clause>
  </contract>
  <anno>CrashReport</anno>
  <anno>Encoding</anno>
</spec>
<spec>
  <name>format</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>format(CrashReport, Encoding, Depth) -&gt; string()</head>
      <guard>
        <subtype><typename>CrashReport</typename><string>CrashReport = [term()]</string></subtype>
        <subtype><typename>Encoding</typename><string>Encoding = latin1 | unicode | utf8</string></subtype>
        <subtype><typename>Depth</typename><string>Depth = unlimited | integer() &gt;= 1</string></subtype>
      </guard></clause>
  </contract>
  <anno>CrashReport</anno>
  <anno>Depth</anno>
  <anno>Encoding</anno>
</spec>
<spec>
  <name>hibernate</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>hibernate(Module, Function, Args) -&gt; no_return()</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>Function</typename><string>Function = atom()</string></subtype>
        <subtype><typename>Args</typename><string>Args = [term()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
</spec>
<spec>
  <name>init_ack</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>init_ack(Ret) -&gt; ok</head>
      <guard>
        <subtype><typename>Ret</typename><string>Ret = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Ret</anno>
</spec>
<spec>
  <name>init_ack</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>init_ack(Parent, Ret) -&gt; ok</head>
      <guard>
        <subtype><typename>Parent</typename><string>Parent = pid()</string></subtype>
        <subtype><typename>Ret</typename><string>Ret = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Parent</anno>
  <anno>Ret</anno>
</spec>
<spec>
  <name>init_p</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>init_p(Parent :: pid(), Ancestors :: [pid()], Fun :: function()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>term()</head></clause>
  </contract>
  <anno>Ancestors</anno>
  <anno>Fun</anno>
  <anno>Parent</anno>
</spec>
<spec>
  <name>init_p</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>init_p(Parent :: pid(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Ancestors :: [pid()],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>M :: atom(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>F :: atom(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>A :: [term()]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>term()</head></clause>
  </contract>
  <anno>A</anno>
  <anno>Ancestors</anno>
  <anno>F</anno>
  <anno>M</anno>
  <anno>Parent</anno>
</spec>
<spec>
  <name>initial_call</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>initial_call(Process) -&gt; {Module, Function, Args} | false</head>
      <guard>
        <subtype><typename>Process</typename><string>Process = <seealso marker="#type-dict_or_pid">dict_or_pid()</seealso></string></subtype>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>Function</typename><string>Function = atom()</string></subtype>
        <subtype><typename>Args</typename><string>Args = [atom()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>Process</anno>
</spec>
<spec>
  <name>spawn</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>spawn(Fun) -&gt; pid()</head>
      <guard>
        <subtype><typename>Fun</typename><string>Fun = function()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
</spec>
<spec>
  <name>spawn</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>spawn(Node, Fun) -&gt; pid()</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = node()</string></subtype>
        <subtype><typename>Fun</typename><string>Fun = function()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>spawn</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>spawn(Module, Function, Args) -&gt; pid()</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>Function</typename><string>Function = atom()</string></subtype>
        <subtype><typename>Args</typename><string>Args = [term()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
</spec>
<spec>
  <name>spawn</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>spawn(Node, Module, Function, Args) -&gt; pid()</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = node()</string></subtype>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>Function</typename><string>Function = atom()</string></subtype>
        <subtype><typename>Args</typename><string>Args = [term()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>spawn_link</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>spawn_link(Fun) -&gt; pid()</head>
      <guard>
        <subtype><typename>Fun</typename><string>Fun = function()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
</spec>
<spec>
  <name>spawn_link</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>spawn_link(Node, Fun) -&gt; pid()</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = node()</string></subtype>
        <subtype><typename>Fun</typename><string>Fun = function()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>spawn_link</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>spawn_link(Module, Function, Args) -&gt; pid()</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>Function</typename><string>Function = atom()</string></subtype>
        <subtype><typename>Args</typename><string>Args = [term()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
</spec>
<spec>
  <name>spawn_link</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>spawn_link(Node, Module, Function, Args) -&gt; pid()</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = node()</string></subtype>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>Function</typename><string>Function = atom()</string></subtype>
        <subtype><typename>Args</typename><string>Args = [term()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>spawn_opt</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>spawn_opt(Fun, SpawnOpts) -&gt; pid()</head>
      <guard>
        <subtype><typename>Fun</typename><string>Fun = function()</string></subtype>
        <subtype><typename>SpawnOpts</typename><string>SpawnOpts = [<seealso marker="#type-spawn_option">spawn_option()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
  <anno>SpawnOpts</anno>
</spec>
<spec>
  <name>spawn_opt</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>spawn_opt(Node, Function, SpawnOpts) -&gt; pid()</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = node()</string></subtype>
        <subtype><typename>Function</typename><string>Function = function()</string></subtype>
        <subtype><typename>SpawnOpts</typename><string>SpawnOpts = [<seealso marker="#type-spawn_option">spawn_option()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Function</anno>
  <anno>Node</anno>
  <anno>SpawnOpts</anno>
</spec>
<spec>
  <name>spawn_opt</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>spawn_opt(Module, Function, Args, SpawnOpts) -&gt; pid()</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>Function</typename><string>Function = atom()</string></subtype>
        <subtype><typename>Args</typename><string>Args = [term()]</string></subtype>
        <subtype><typename>SpawnOpts</typename><string>SpawnOpts = [<seealso marker="#type-spawn_option">spawn_option()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>SpawnOpts</anno>
</spec>
<spec>
  <name>spawn_opt</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>spawn_opt(Node, Module, Function, Args, SpawnOpts) -&gt; pid()</head>
      <guard>
        <subtype><typename>Node</typename><string>Node = node()</string></subtype>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>Function</typename><string>Function = atom()</string></subtype>
        <subtype><typename>Args</typename><string>Args = [term()]</string></subtype>
        <subtype><typename>SpawnOpts</typename><string>SpawnOpts = [<seealso marker="#type-spawn_option">spawn_option()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>Node</anno>
  <anno>SpawnOpts</anno>
</spec>
<spec>
  <name>start</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>start(Module, Function, Args) -&gt; Ret</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>Function</typename><string>Function = atom()</string></subtype>
        <subtype><typename>Args</typename><string>Args = [term()]</string></subtype>
        <subtype><typename>Ret</typename><string>Ret = term() | {error, Reason :: term()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>Reason</anno>
  <anno>Ret</anno>
</spec>
<spec>
  <name>start</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>start(Module, Function, Args, Time) -&gt; Ret</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>Function</typename><string>Function = atom()</string></subtype>
        <subtype><typename>Args</typename><string>Args = [term()]</string></subtype>
        <subtype><typename>Time</typename><string>Time = timeout()</string></subtype>
        <subtype><typename>Ret</typename><string>Ret = term() | {error, Reason :: term()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>Reason</anno>
  <anno>Ret</anno>
  <anno>Time</anno>
</spec>
<spec>
  <name>start</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>start(Module, Function, Args, Time, SpawnOpts) -&gt; Ret</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>Function</typename><string>Function = atom()</string></subtype>
        <subtype><typename>Args</typename><string>Args = [term()]</string></subtype>
        <subtype><typename>Time</typename><string>Time = timeout()</string></subtype>
        <subtype><typename>SpawnOpts</typename><string>SpawnOpts = [<seealso marker="#type-spawn_option">spawn_option()</seealso>]</string></subtype>
        <subtype><typename>Ret</typename><string>Ret = term() | {error, Reason :: term()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>Reason</anno>
  <anno>Ret</anno>
  <anno>SpawnOpts</anno>
  <anno>Time</anno>
</spec>
<spec>
  <name>start_link</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>start_link(Module, Function, Args) -&gt; Ret</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>Function</typename><string>Function = atom()</string></subtype>
        <subtype><typename>Args</typename><string>Args = [term()]</string></subtype>
        <subtype><typename>Ret</typename><string>Ret = term() | {error, Reason :: term()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>Reason</anno>
  <anno>Ret</anno>
</spec>
<spec>
  <name>start_link</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>start_link(Module, Function, Args, Time) -&gt; Ret</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>Function</typename><string>Function = atom()</string></subtype>
        <subtype><typename>Args</typename><string>Args = [term()]</string></subtype>
        <subtype><typename>Time</typename><string>Time = timeout()</string></subtype>
        <subtype><typename>Ret</typename><string>Ret = term() | {error, Reason :: term()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>Reason</anno>
  <anno>Ret</anno>
  <anno>Time</anno>
</spec>
<spec>
  <name>start_link</name>
  <arity>5</arity>
  <contract>
    <clause>
      <head>start_link(Module, Function, Args, Time, SpawnOpts) -&gt; Ret</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>Function</typename><string>Function = atom()</string></subtype>
        <subtype><typename>Args</typename><string>Args = [term()]</string></subtype>
        <subtype><typename>Time</typename><string>Time = timeout()</string></subtype>
        <subtype><typename>SpawnOpts</typename><string>SpawnOpts = [<seealso marker="#type-spawn_option">spawn_option()</seealso>]</string></subtype>
        <subtype><typename>Ret</typename><string>Ret = term() | {error, Reason :: term()}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>Reason</anno>
  <anno>Ret</anno>
  <anno>SpawnOpts</anno>
  <anno>Time</anno>
</spec>
<spec>
  <name>stop</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>stop(Process) -&gt; ok</head>
      <guard>
        <subtype><typename>Process</typename><string>Process = pid() | RegName | {RegName, node()}</string></subtype>
        <subtype><typename>RegName</typename><string>RegName = atom()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Process</anno>
  <anno>RegName</anno>
</spec>
<spec>
  <name>stop</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>stop(Process, Reason, Timeout) -&gt; ok</head>
      <guard>
        <subtype><typename>Process</typename><string>Process = pid() | RegName | {RegName, node()}</string></subtype>
        <subtype><typename>RegName</typename><string>RegName = atom()</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = term()</string></subtype>
        <subtype><typename>Timeout</typename><string>Timeout = timeout()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Process</anno>
  <anno>Reason</anno>
  <anno>RegName</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>translate_initial_call</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>translate_initial_call(Process) -&gt; {Module, Function, Arity}</head>
      <guard>
        <subtype><typename>Process</typename><string>Process = <seealso marker="#type-dict_or_pid">dict_or_pid()</seealso></string></subtype>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
        <subtype><typename>Function</typename><string>Function = atom()</string></subtype>
        <subtype><typename>Arity</typename><string>Arity = byte()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Arity</anno>
  <anno>Function</anno>
  <anno>Module</anno>
  <anno>Process</anno>
</spec>
<spec>
  <name>wake_up</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>wake_up(M :: atom(), F :: atom(), A :: [term()]) -&gt; term()</head></clause>
  </contract>
  <anno>A</anno>
  <anno>F</anno>
  <anno>M</anno>
</spec>
<timestamp>Generated by EDoc, Jul 12 2017, 20:27:23.</timestamp>
</module>