<module name="maps">
<spec>
  <name>filter</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>filter(Pred, Map1) -&gt; Map2</head>
      <guard>
        <subtype><typename>Pred</typename><string>Pred = fun((Key, Value) -&gt; boolean())</string></subtype>
        <subtype><typename>Key</typename><string>Key = Value = term()</string></subtype>
        <subtype><typename>Value</typename><string/></subtype>
        <subtype><typename>Map1</typename><string>Map1 = Map2 = #{}</string></subtype>
        <subtype><typename>Map2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Map1</anno>
  <anno>Map2</anno>
  <anno>Pred</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>find</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>find(Key, Map) -&gt; {ok, Value} | error</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
        <subtype><typename>Map</typename><string>Map = #{}</string></subtype>
        <subtype><typename>Value</typename><string>Value = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Map</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>fold</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>fold(Fun, Init, Map) -&gt; Acc</head>
      <guard>
        <subtype><typename>Fun</typename><string>Fun = fun((K, V, AccIn) -&gt; AccOut)</string></subtype>
        <subtype><typename>Init</typename><string>Init = Acc = AccIn = AccOut = term()</string></subtype>
        <subtype><typename>Acc</typename><string/></subtype>
        <subtype><typename>AccIn</typename><string/></subtype>
        <subtype><typename>AccOut</typename><string/></subtype>
        <subtype><typename>Map</typename><string>Map = #{}</string></subtype>
        <subtype><typename>K</typename><string>K = V = term()</string></subtype>
        <subtype><typename>V</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Acc</anno>
  <anno>AccIn</anno>
  <anno>AccOut</anno>
  <anno>Fun</anno>
  <anno>Init</anno>
  <anno>K</anno>
  <anno>Map</anno>
  <anno>V</anno>
</spec>
<spec>
  <name>from_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>from_list(List) -&gt; Map</head>
      <guard>
        <subtype><typename>List</typename><string>List = [{Key, Value}]</string></subtype>
        <subtype><typename>Key</typename><string>Key = Value = term()</string></subtype>
        <subtype><typename>Value</typename><string/></subtype>
        <subtype><typename>Map</typename><string>Map = #{}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>List</anno>
  <anno>Map</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>get</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>get(Key, Map) -&gt; Value</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
        <subtype><typename>Map</typename><string>Map = #{}</string></subtype>
        <subtype><typename>Value</typename><string>Value = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Map</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>get</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>get(Key, Map, Default) -&gt; Value | Default</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
        <subtype><typename>Map</typename><string>Map = #{}</string></subtype>
        <subtype><typename>Value</typename><string>Value = Default = term()</string></subtype>
        <subtype><typename>Default</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Default</anno>
  <anno>Key</anno>
  <anno>Map</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>is_key</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>is_key(Key, Map) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
        <subtype><typename>Map</typename><string>Map = #{}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Map</anno>
</spec>
<spec>
  <name>keys</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>keys(Map) -&gt; Keys</head>
      <guard>
        <subtype><typename>Map</typename><string>Map = #{}</string></subtype>
        <subtype><typename>Keys</typename><string>Keys = [Key]</string></subtype>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Keys</anno>
  <anno>Map</anno>
</spec>
<spec>
  <name>map</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>map(Fun, Map1) -&gt; Map2</head>
      <guard>
        <subtype><typename>Fun</typename><string>Fun = fun((K, V1) -&gt; V2)</string></subtype>
        <subtype><typename>Map1</typename><string>Map1 = Map2 = #{}</string></subtype>
        <subtype><typename>Map2</typename><string/></subtype>
        <subtype><typename>K</typename><string>K = V1 = V2 = term()</string></subtype>
        <subtype><typename>V1</typename><string></string></subtype>
        <subtype><typename>V2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
  <anno>K</anno>
  <anno>Map1</anno>
  <anno>Map2</anno>
  <anno>V1</anno>
  <anno>V2</anno>
</spec>
<spec>
  <name>merge</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>merge(Map1, Map2) -&gt; Map3</head>
      <guard>
        <subtype><typename>Map1</typename><string>Map1 = Map2 = Map3 = #{}</string></subtype>
        <subtype><typename>Map2</typename><string></string></subtype>
        <subtype><typename>Map3</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Map1</anno>
  <anno>Map2</anno>
  <anno>Map3</anno>
</spec>
<spec>
  <name>new</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>new() -&gt; Map</head>
      <guard>
        <subtype><typename>Map</typename><string>Map = #{}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Map</anno>
</spec>
<spec>
  <name>put</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>put(Key, Value, Map1) -&gt; Map2</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = Value = term()</string></subtype>
        <subtype><typename>Value</typename><string/></subtype>
        <subtype><typename>Map1</typename><string>Map1 = Map2 = #{}</string></subtype>
        <subtype><typename>Map2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Map1</anno>
  <anno>Map2</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>remove</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>remove(Key, Map1) -&gt; Map2</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
        <subtype><typename>Map1</typename><string>Map1 = Map2 = #{}</string></subtype>
        <subtype><typename>Map2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Map1</anno>
  <anno>Map2</anno>
</spec>
<spec>
  <name>size</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>size(Map) -&gt; integer() &gt;= 0</head>
      <guard>
        <subtype><typename>Map</typename><string>Map = #{}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Map</anno>
</spec>
<spec>
  <name>take</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>take(Key, Map1) -&gt; {Value, Map2} | error</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
        <subtype><typename>Map1</typename><string>Map1 = #{}</string></subtype>
        <subtype><typename>Value</typename><string>Value = term()</string></subtype>
        <subtype><typename>Map2</typename><string>Map2 = #{}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Map1</anno>
  <anno>Map2</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>to_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>to_list(Map) -&gt; [{Key, Value}]</head>
      <guard>
        <subtype><typename>Map</typename><string>Map = #{}</string></subtype>
        <subtype><typename>Key</typename><string>Key = Value = term()</string></subtype>
        <subtype><typename>Value</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Map</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>update</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>update(Key, Value, Map1) -&gt; Map2</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = Value = term()</string></subtype>
        <subtype><typename>Value</typename><string/></subtype>
        <subtype><typename>Map1</typename><string>Map1 = Map2 = #{}</string></subtype>
        <subtype><typename>Map2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Map1</anno>
  <anno>Map2</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>update_with</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>update_with(Key, Fun, Map1) -&gt; Map2</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
        <subtype><typename>Map1</typename><string>Map1 = Map2 = #{}</string></subtype>
        <subtype><typename>Map2</typename><string/></subtype>
        <subtype><typename>Fun</typename><string>Fun = fun((Value1 :: term()) -&gt; Value2 :: term())</string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
  <anno>Key</anno>
  <anno>Map1</anno>
  <anno>Map2</anno>
  <anno>Value1</anno>
  <anno>Value2</anno>
</spec>
<spec>
  <name>update_with</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>update_with(Key, Fun, Init, Map1) -&gt; Map2</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = term()</string></subtype>
        <subtype><typename>Map1</typename><string>Map1 = Map1</string></subtype>
        <subtype><typename>Map2</typename><string>Map2 = Map2</string></subtype>
        <subtype><typename>Fun</typename><string>Fun = fun((Value1 :: term()) -&gt; Value2 :: term())</string></subtype>
        <subtype><typename>Init</typename><string>Init = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Fun</anno>
  <anno>Init</anno>
  <anno>Key</anno>
  <anno>Map1</anno>
  <anno>Map2</anno>
  <anno>Value1</anno>
  <anno>Value2</anno>
</spec>
<spec>
  <name>values</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>values(Map) -&gt; Values</head>
      <guard>
        <subtype><typename>Map</typename><string>Map = #{}</string></subtype>
        <subtype><typename>Values</typename><string>Values = [Value]</string></subtype>
        <subtype><typename>Value</typename><string>Value = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Map</anno>
  <anno>Value</anno>
  <anno>Values</anno>
</spec>
<spec>
  <name>with</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>with(Ks, Map1) -&gt; Map2</head>
      <guard>
        <subtype><typename>Ks</typename><string>Ks = [K]</string></subtype>
        <subtype><typename>Map1</typename><string>Map1 = Map2 = #{}</string></subtype>
        <subtype><typename>Map2</typename><string/></subtype>
        <subtype><typename>K</typename><string>K = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>K</anno>
  <anno>Ks</anno>
  <anno>Map1</anno>
  <anno>Map2</anno>
</spec>
<spec>
  <name>without</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>without(Ks, Map1) -&gt; Map2</head>
      <guard>
        <subtype><typename>Ks</typename><string>Ks = [K]</string></subtype>
        <subtype><typename>Map1</typename><string>Map1 = Map2 = #{}</string></subtype>
        <subtype><typename>Map2</typename><string/></subtype>
        <subtype><typename>K</typename><string>K = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>K</anno>
  <anno>Ks</anno>
  <anno>Map1</anno>
  <anno>Map2</anno>
</spec>
<timestamp>Generated by EDoc, Jul 12 2017, 20:27:22.</timestamp>
</module>