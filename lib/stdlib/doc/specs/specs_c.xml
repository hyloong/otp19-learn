<module name="c">
<spec>
  <name>appcall</name>
  <arity>4</arity>
  <contract/>
</spec>
<spec>
  <name>bi</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>bt</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>bt(Pid) -&gt; ok | undefined</head>
      <guard>
        <subtype><typename>Pid</typename><string>Pid = pid()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Pid</anno>
</spec>
<spec>
  <name>c</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>c(Module) -&gt; {ok, ModuleName} | error</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = <seealso marker="file#type-name">file:name()</seealso></string></subtype>
        <subtype><typename>ModuleName</typename><string>ModuleName = module()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Module</anno>
  <anno>ModuleName</anno>
</spec>
<spec>
  <name>c</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>c(Module, Options) -&gt; {ok, ModuleName} | error</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = <seealso marker="file#type-name">file:name()</seealso></string></subtype>
        <subtype><typename>Options</typename><string>Options = [<seealso marker="compile#type-option">compile:option()</seealso>] | <seealso marker="compile#type-option">compile:option()</seealso></string></subtype>
        <subtype><typename>ModuleName</typename><string>ModuleName = module()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Module</anno>
  <anno>ModuleName</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>c</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>c(Module, Options, Filter) -&gt; {ok, ModuleName} | error</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = atom()</string></subtype>
        <subtype><typename>Options</typename><string>Options = [<seealso marker="compile#type-option">compile:option()</seealso>]</string></subtype>
        <subtype><typename>Filter</typename><string>Filter = fun((<seealso marker="compile#type-option">compile:option()</seealso>) -&gt; boolean())</string></subtype>
        <subtype><typename>ModuleName</typename><string>ModuleName = module()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Filter</anno>
  <anno>Module</anno>
  <anno>ModuleName</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>cd</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>cd(Dir) -&gt; ok</head>
      <guard>
        <subtype><typename>Dir</typename><string>Dir = <seealso marker="file#type-name">file:name()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Dir</anno>
</spec>
<spec>
  <name>display_info</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>erlangrc</name>
  <arity>0</arity>
  <contract/>
</spec>
<spec>
  <name>erlangrc</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>flush</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>flush() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>help</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>help() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>i</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>i() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>i</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>i(Ps :: [pid()]) -&gt; ok</head></clause>
  </contract>
  <anno>Ps</anno>
</spec>
<spec>
  <name>i</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>i(X, Y, Z) -&gt; [{atom(), term()}]</head>
      <guard>
        <subtype><typename>X</typename><string>X = Y = Z = integer() &gt;= 0</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>l</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>l(Module) -&gt; <seealso marker="code#type-load_ret">code:load_ret()</seealso></head>
      <guard>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Module</anno>
</spec>
<spec>
  <name>lc</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>lc(Files) -&gt; ok | error</head>
      <guard>
        <subtype><typename>Files</typename><string>Files = [File :: <seealso marker="erl_compile#type-cmd_line_arg">erl_compile:cmd_line_arg()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>File</anno>
  <anno>Files</anno>
</spec>
<spec>
  <name>lc_batch</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>lc_batch() -&gt; no_return()</head></clause>
  </contract>
</spec>
<spec>
  <name>lc_batch</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>lc_batch(Args :: [<seealso marker="erl_compile#type-cmd_line_arg">erl_compile:cmd_line_arg()</seealso>]) -&gt; no_return()</head></clause>
  </contract>
  <anno>Args</anno>
</spec>
<spec>
  <name>lm</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>lm() -&gt; [<seealso marker="code#type-load_ret">code:load_ret()</seealso>]</head></clause>
  </contract>
</spec>
<spec>
  <name>ls</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>ls() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>ls</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>ls(Dir) -&gt; ok</head>
      <guard>
        <subtype><typename>Dir</typename><string>Dir = <seealso marker="file#type-name">file:name()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Dir</anno>
</spec>
<spec>
  <name>m</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>m() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>m</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>m(Module) -&gt; ok</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Module</anno>
</spec>
<spec>
  <name>memory</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>memory() -&gt; [{Type, Size}]</head>
      <guard>
        <subtype><typename>Type</typename><string>Type = atom()</string></subtype>
        <subtype><typename>Size</typename><string>Size = integer() &gt;= 0</string></subtype>
      </guard></clause>
  </contract>
  <anno>Size</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>memory</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>memory(Type) -&gt; Size</head>
      <guard>
        <subtype><typename>Type</typename><string>Type = atom()</string></subtype>
        <subtype><typename>Size</typename><string>Size = integer() &gt;= 0</string></subtype>
      </guard></clause>
  </contract>
  <anno>Size</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>memory</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>memory(Types) -&gt; [{Type, Size}]</head>
      <guard>
        <subtype><typename>Types</typename><string>Types = [Type]</string></subtype>
        <subtype><typename>Type</typename><string>Type = atom()</string></subtype>
        <subtype><typename>Size</typename><string>Size = integer() &gt;= 0</string></subtype>
      </guard></clause>
  </contract>
  <anno>Size</anno>
  <anno>Type</anno>
  <anno>Types</anno>
</spec>
<spec>
  <name>mm</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>mm() -&gt; [module()]</head></clause>
  </contract>
</spec>
<spec>
  <name>nc</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>nc(File) -&gt; {ok, Module} | error</head>
      <guard>
        <subtype><typename>File</typename><string>File = <seealso marker="file#type-name">file:name()</seealso></string></subtype>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
      </guard></clause>
  </contract>
  <anno>File</anno>
  <anno>Module</anno>
</spec>
<spec>
  <name>nc</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>nc(File, Options) -&gt; {ok, Module} | error</head>
      <guard>
        <subtype><typename>File</typename><string>File = <seealso marker="file#type-name">file:name()</seealso></string></subtype>
        <subtype><typename>Options</typename><string>Options = [Option] | Option</string></subtype>
        <subtype><typename>Option</typename><string>Option = <seealso marker="compile#type-option">compile:option()</seealso></string></subtype>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
      </guard></clause>
  </contract>
  <anno>File</anno>
  <anno>Module</anno>
  <anno>Option</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>ni</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>ni() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>nl</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>nl(Module) -&gt; abcast | error</head>
      <guard>
        <subtype><typename>Module</typename><string>Module = module()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Module</anno>
</spec>
<spec>
  <name>nregs</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>nregs() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>pid</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>pid(X, Y, Z) -&gt; pid()</head>
      <guard>
        <subtype><typename>X</typename><string>X = Y = Z = integer() &gt;= 0</string></subtype>
        <subtype><typename>Y</typename><string></string></subtype>
        <subtype><typename>Z</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>X</anno>
  <anno>Y</anno>
  <anno>Z</anno>
</spec>
<spec>
  <name>pwd</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>pwd() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>q</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>q() -&gt; no_return()</head></clause>
  </contract>
</spec>
<spec>
  <name>regs</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>regs() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>uptime</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>uptime() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>xm</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>y</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>y</name>
  <arity>2</arity>
  <contract/>
</spec>
<timestamp>Generated by EDoc, Jul 12 2017, 20:27:12.</timestamp>
</module>