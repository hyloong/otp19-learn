/*
 *  Warning: Do not edit this file.
 *  Auto-generated by 'beam_makeops'.
 */

OpCase(i_bs_get_binary2_fxIsId):
    { Eterm targ1; Eterm dst; 
    GetR(3, targ1);
    dst = Arg(5);
    BsGetBinary_2(xb(Arg(1)), Arg(2), targ1, Arg(4), dst, StoreResult, ClauseFail());
    Next(6);
    }

OpCase(i_bs_get_binary_all2_fxIId):
    { Eterm dst; 
    dst = Arg(4);
    BsGetBinaryAll_2(xb(Arg(1)), Arg(2), Arg(3), dst, StoreResult, ClauseFail());
    Next(5);
    }

OpCase(i_bs_get_binary_imm2_fxIIId):
    { Eterm dst; 
    dst = Arg(5);
    BsGetBinaryImm_2(xb(Arg(1)), Arg(2), Arg(3), Arg(4), dst, StoreResult, ClauseFail());
    Next(6);
    }

OpCase(i_bs_get_float2_fxIsId):
    { Eterm targ1; Eterm dst; 
    GetR(3, targ1);
    dst = Arg(5);
    BsGetFloat2(xb(Arg(1)), Arg(2), targ1, Arg(4), dst, StoreResult, ClauseFail());
    Next(6);
    }

OpCase(i_bs_skip_bits2_fxxI):
    { 
    BsSkipBits2(xb(Arg(1)), xb(Arg(2)), Arg(3), ClauseFail());
    Next(4);
    }

OpCase(i_bs_skip_bits2_fxyI):
    { 
    BsSkipBits2(xb(Arg(1)), yb(Arg(2)), Arg(3), ClauseFail());
    Next(4);
    }

OpCase(i_bs_skip_bits_all2_fxI):
    { 
    BsSkipBitsAll2(xb(Arg(1)), Arg(2), ClauseFail());
    Next(3);
    }

OpCase(i_bs_skip_bits_imm2_fxI):
    { 
    BsSkipBitsImm2(xb(Arg(1)), Arg(2), ClauseFail());
    Next(3);
    }

OpCase(i_get_tuple_element_xPy):
    { 
    BeamInstr* next;
    PreFetch(3, next);
    GetTupleElement(xb(Arg(0)), Arg(1), yb(Arg(2)));
    NextPF(3, next);
    }

OpCase(i_get_tuple_element_yPy):
    { 
    BeamInstr* next;
    PreFetch(3, next);
    GetTupleElement(yb(Arg(0)), Arg(1), yb(Arg(2)));
    NextPF(3, next);
    }

OpCase(i_make_fun_It):
    { 
    BeamInstr* next;
    PreFetch(2, next);
    MakeFun(Arg(0), Arg(1));
    NextPF(2, next);
    }

OpCase(i_new_bs_put_binary_all_jsI):
    { Eterm targ1; 
    BeamInstr* next;
    PreFetch(3, next);
    GetR(1, targ1);
    NewBsPutBinaryAll(targ1, Arg(2));
    NextPF(3, next);
    }

OpCase(i_new_bs_put_binary_imm_jIs):
    { Eterm targ1; 
    BeamInstr* next;
    PreFetch(3, next);
    GetR(2, targ1);
    NewBsPutBinaryImm(Arg(1), targ1);
    NextPF(3, next);
    }

OpCase(i_new_bs_put_binary_jsIs):
    { Eterm targ1; Eterm targ2; 
    BeamInstr* next;
    PreFetch(4, next);
    GetR(1, targ1);
    GetR(3, targ2);
    NewBsPutBinary(targ1, Arg(2), targ2);
    NextPF(4, next);
    }

OpCase(i_new_bs_put_float_imm_jIIs):
    { Eterm targ1; 
    BeamInstr* next;
    PreFetch(4, next);
    GetR(3, targ1);
    NewBsPutFloatImm(Arg(1), Arg(2), targ1);
    NextPF(4, next);
    }

OpCase(i_new_bs_put_float_jsIs):
    { Eterm targ1; Eterm targ2; 
    BeamInstr* next;
    PreFetch(4, next);
    GetR(1, targ1);
    GetR(3, targ2);
    NewBsPutFloat(targ1, Arg(2), targ2);
    NextPF(4, next);
    }

OpCase(i_new_bs_put_integer_imm_jIIs):
    { Eterm targ1; 
    BeamInstr* next;
    PreFetch(4, next);
    GetR(3, targ1);
    NewBsPutIntegerImm(Arg(1), Arg(2), targ1);
    NextPF(4, next);
    }

OpCase(i_new_bs_put_integer_jsIs):
    { Eterm targ1; Eterm targ2; 
    BeamInstr* next;
    PreFetch(4, next);
    GetR(1, targ1);
    GetR(3, targ2);
    NewBsPutInteger(targ1, Arg(2), targ2);
    NextPF(4, next);
    }

OpCase(is_atom_fy):
    { 
    IsAtom(yb(Arg(1)), ClauseFail());
    Next(2);
    }

OpCase(is_binary_fy):
    { 
    IsBinary(yb(Arg(1)), ClauseFail());
    Next(2);
    }

OpCase(is_bitstring_fy):
    { 
    IsBitstring(yb(Arg(1)), ClauseFail());
    Next(2);
    }

OpCase(is_boolean_fx):
    { 
    IsBoolean(xb(Arg(1)), ClauseFail());
    Next(2);
    }

OpCase(is_boolean_fy):
    { 
    IsBoolean(yb(Arg(1)), ClauseFail());
    Next(2);
    }

OpCase(is_float_fy):
    { 
    IsFloat(yb(Arg(1)), ClauseFail());
    Next(2);
    }

OpCase(is_ge_fss):
    { Eterm targ1; Eterm targ2; 
    GetR(1, targ1);
    GetR(2, targ2);
    IsGreaterEqual(targ1, targ2, ClauseFail());
    Next(3);
    }

OpCase(is_list_fy):
    { 
    IsList(yb(Arg(1)), ClauseFail());
    Next(2);
    }

OpCase(is_lt_fss):
    { Eterm targ1; Eterm targ2; 
    GetR(1, targ1);
    GetR(2, targ2);
    IsLessThan(targ1, targ2, ClauseFail());
    Next(3);
    }

OpCase(is_number_fx):
    { 
    IsNumber(xb(Arg(1)), ClauseFail());
    Next(2);
    }

OpCase(is_number_fy):
    { 
    IsNumber(yb(Arg(1)), ClauseFail());
    Next(2);
    }

OpCase(is_pid_fy):
    { 
    IsPid(yb(Arg(1)), ClauseFail());
    Next(2);
    }

OpCase(is_port_fy):
    { 
    IsPort(yb(Arg(1)), ClauseFail());
    Next(2);
    }

OpCase(is_reference_fy):
    { 
    IsRef(yb(Arg(1)), ClauseFail());
    Next(2);
    }

OpCase(node_y):
    { 
    BeamInstr* next;
    PreFetch(1, next);
    Node(yb(Arg(0)));
    NextPF(1, next);
    }

OpCase(put_list_ssd):
    { Eterm targ1; Eterm targ2; Eterm dst; 
    BeamInstr* next;
    PreFetch(3, next);
    GetR(0, targ1);
    GetR(1, targ2);
    dst = Arg(2);
    PutList(targ1, targ2, dst, StoreResult);
    NextPF(3, next);
    }

