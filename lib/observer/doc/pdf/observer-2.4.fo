<?xml version="1.0"?>
<fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format">
  <fo:layout-master-set>
    <fo:simple-page-master master-name="cover" margin="25mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin="0mm"/>
    </fo:simple-page-master>
    <fo:simple-page-master master-name="left-page" margin-top="25mm" margin-bottom="15mm" margin-left="20mm" margin-right="25mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin-top="15mm" margin-bottom="20mm"/>
      <fo:region-before region-name="left-header" extent="10mm"/>
      <fo:region-after region-name="left-footer" extent="10mm"/>
    </fo:simple-page-master>
    <fo:simple-page-master master-name="right-page" margin-top="25mm" margin-bottom="15mm" margin-left="25mm" margin-right="20mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin-top="15mm" margin-bottom="20mm"/>
      <fo:region-before region-name="right-header" extent="10mm"/>
      <fo:region-after region-name="right-footer" extent="10mm"/>
    </fo:simple-page-master>
    <fo:page-sequence-master master-name="document">
      <fo:repeatable-page-master-alternatives>
        <fo:conditional-page-master-reference master-reference="left-page" odd-or-even="even"/>
        <fo:conditional-page-master-reference master-reference="right-page" odd-or-even="odd"/>
      </fo:repeatable-page-master-alternatives>
    </fo:page-sequence-master>
  </fo:layout-master-set>
  <fo:bookmark-tree>
    <fo:bookmark internal-destination="cover-page" starting-state="show">
      <fo:bookmark-title>Observer</fo:bookmark-title>
      <fo:bookmark internal-destination="idp848528" starting-state="hide">
        <fo:bookmark-title>Observer User's Guide</fo:bookmark-title>
        <fo:bookmark internal-destination="idp842768" starting-state="hide">
          <fo:bookmark-title>Introduction</fo:bookmark-title>
          <fo:bookmark internal-destination="idp839840" starting-state="hide">
            <fo:bookmark-title>Scope</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp836208" starting-state="hide">
            <fo:bookmark-title>Prerequisites</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp606784" starting-state="hide">
          <fo:bookmark-title>Observer</fo:bookmark-title>
          <fo:bookmark internal-destination="idp602528" starting-state="hide">
            <fo:bookmark-title>Introduction</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp600560" starting-state="hide">
            <fo:bookmark-title>Getting Started</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp597728" starting-state="hide">
            <fo:bookmark-title>System Tab</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp595616" starting-state="hide">
            <fo:bookmark-title>Load Charts Tab</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp707408" starting-state="hide">
            <fo:bookmark-title>Memory Allocators Tab</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp703792" starting-state="hide">
            <fo:bookmark-title>Applications Tab</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp685072" starting-state="hide">
            <fo:bookmark-title>Processes Tab</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp502400" starting-state="hide">
            <fo:bookmark-title>Ports Tab</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp14720" starting-state="hide">
            <fo:bookmark-title>Table Viewer Tab</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp718016" starting-state="hide">
            <fo:bookmark-title>Trace Overview Tab</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp569088" starting-state="hide">
          <fo:bookmark-title>Trace Tool Builder</fo:bookmark-title>
          <fo:bookmark internal-destination="idp558064" starting-state="hide">
            <fo:bookmark-title>Introduction</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp492512" starting-state="hide">
            <fo:bookmark-title>Getting Started</fo:bookmark-title>
            <fo:bookmark internal-destination="idp828784" starting-state="hide">
              <fo:bookmark-title>Tracing Local Node from Erlang Shell</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp693024" starting-state="hide">
              <fo:bookmark-title>Build Your Own Tool</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp561264" starting-state="hide">
            <fo:bookmark-title>Running Trace Tool Builder against Remote Node</fo:bookmark-title>
            <fo:bookmark internal-destination="idp254400" starting-state="hide">
              <fo:bookmark-title>Diskless Node</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp249648" starting-state="hide">
            <fo:bookmark-title>More Tracing Options</fo:bookmark-title>
            <fo:bookmark internal-destination="idp26880" starting-state="hide">
              <fo:bookmark-title>Time-Constrained Tracing</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp698048" starting-state="hide">
              <fo:bookmark-title>Overload Protection</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp866256" starting-state="hide">
              <fo:bookmark-title>Autoresume</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp876384" starting-state="hide">
              <fo:bookmark-title>dbg Mode</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1126080" starting-state="hide">
            <fo:bookmark-title>Trace Information and File .ti</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1137424" starting-state="hide">
            <fo:bookmark-title>Wrap Logs</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1141792" starting-state="hide">
            <fo:bookmark-title>Formatting</fo:bookmark-title>
            <fo:bookmark internal-destination="idp1175824" starting-state="hide">
              <fo:bookmark-title>Presenting Trace Logs with Event Tracer</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1208016" starting-state="hide">
            <fo:bookmark-title>Automatically Collect and Format Logs from All Nodes</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1213712" starting-state="hide">
            <fo:bookmark-title>History and Configuration Files</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1250016" starting-state="hide">
            <fo:bookmark-title>Sequential Tracing</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1270992" starting-state="hide">
            <fo:bookmark-title>Multipurpose Trace Tool</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp1285472" starting-state="hide">
          <fo:bookmark-title>Erlang Top</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1287968" starting-state="hide">
            <fo:bookmark-title>Introduction</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1290304" starting-state="hide">
            <fo:bookmark-title>Getting Started</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1294640" starting-state="hide">
            <fo:bookmark-title>Output</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1313648" starting-state="hide">
            <fo:bookmark-title>Configuration</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1328784" starting-state="hide">
            <fo:bookmark-title>Print to File</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1331056" starting-state="hide">
            <fo:bookmark-title>Stop</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp1337184" starting-state="hide">
          <fo:bookmark-title>Crashdump Viewer</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1339680" starting-state="hide">
            <fo:bookmark-title>Introduction</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1341088" starting-state="hide">
            <fo:bookmark-title>Getting Started</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1346560" starting-state="hide">
            <fo:bookmark-title>GUI</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1355504" starting-state="hide">
            <fo:bookmark-title>Tab Content</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1363808" starting-state="hide">
            <fo:bookmark-title>General Tab</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1377360" starting-state="hide">
            <fo:bookmark-title>Processes Tab</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1383312" starting-state="hide">
            <fo:bookmark-title>Ports Tab</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1389744" starting-state="hide">
            <fo:bookmark-title>ETS Tables Tab</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1396464" starting-state="hide">
            <fo:bookmark-title>Timers Tab</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1402000" starting-state="hide">
            <fo:bookmark-title>Schedulers Tab</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1406640" starting-state="hide">
            <fo:bookmark-title>Funs Tab</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1412176" starting-state="hide">
            <fo:bookmark-title>Atoms Tab</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1416512" starting-state="hide">
            <fo:bookmark-title>Nodes Tab</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1427248" starting-state="hide">
            <fo:bookmark-title>Modules Tab</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1431984" starting-state="hide">
            <fo:bookmark-title>Memory Tab</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1441888" starting-state="hide">
            <fo:bookmark-title>Internal Tables Tab</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
      </fo:bookmark>
      <fo:bookmark internal-destination="idp114320" starting-state="hide">
        <fo:bookmark-title>Reference Manual</fo:bookmark-title>
        <fo:bookmark internal-destination="idp396800" starting-state="hide">
          <fo:bookmark-title>Observer</fo:bookmark-title>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp419776" starting-state="hide">
          <fo:bookmark-title>observer</fo:bookmark-title>
          <fo:bookmark internal-destination="idp286896" starting-state="hide">
            <fo:bookmark-title>start/0</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp448480" starting-state="hide">
          <fo:bookmark-title>ttb</fo:bookmark-title>
          <fo:bookmark internal-destination="idp401168" starting-state="hide">
            <fo:bookmark-title>start_trace/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp960848" starting-state="hide">
            <fo:bookmark-title>tracer/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp670992" starting-state="hide">
            <fo:bookmark-title>tracer/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp450752" starting-state="hide">
            <fo:bookmark-title>tracer/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp412160" starting-state="hide">
            <fo:bookmark-title>tracer/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp795760" starting-state="hide">
            <fo:bookmark-title>p/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp806112" starting-state="hide">
            <fo:bookmark-title>/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp970928" starting-state="hide">
            <fo:bookmark-title>list_history/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp975616" starting-state="hide">
            <fo:bookmark-title>run_history/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp979328" starting-state="hide">
            <fo:bookmark-title>write_config/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp618240" starting-state="hide">
            <fo:bookmark-title>write_config/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp629792" starting-state="hide">
            <fo:bookmark-title>run_config/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp633552" starting-state="hide">
            <fo:bookmark-title>run_config/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp639392" starting-state="hide">
            <fo:bookmark-title>list_config/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp643088" starting-state="hide">
            <fo:bookmark-title>write_trace_info/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp649968" starting-state="hide">
            <fo:bookmark-title>seq_trigger_ms/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp652688" starting-state="hide">
            <fo:bookmark-title>seq_trigger_ms/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp900704" starting-state="hide">
            <fo:bookmark-title>stop/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp903392" starting-state="hide">
            <fo:bookmark-title>stop/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp918720" starting-state="hide">
            <fo:bookmark-title>get_et_handler/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp923696" starting-state="hide">
            <fo:bookmark-title>format/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp926832" starting-state="hide">
            <fo:bookmark-title>format/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp958048" starting-state="hide">
          <fo:bookmark-title>etop</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1557760" starting-state="hide">
            <fo:bookmark-title>start/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1561360" starting-state="hide">
            <fo:bookmark-title>start/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1567168" starting-state="hide">
            <fo:bookmark-title>help/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1569872" starting-state="hide">
            <fo:bookmark-title>config/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1575856" starting-state="hide">
            <fo:bookmark-title>dump/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1579504" starting-state="hide">
            <fo:bookmark-title>stop/0</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp1590160" starting-state="hide">
          <fo:bookmark-title>crashdump_viewer</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1594000" starting-state="hide">
            <fo:bookmark-title>start/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1594448" starting-state="hide">
            <fo:bookmark-title>start/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1599088" starting-state="hide">
            <fo:bookmark-title>stop/0</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp1609184" starting-state="hide">
          <fo:bookmark-title>cdv</fo:bookmark-title>
        </fo:bookmark>
      </fo:bookmark>
    </fo:bookmark>
  </fo:bookmark-tree>
  <fo:page-sequence font-family="sans-serif" force-page-count="even" master-reference="cover" font-size="10pt">
    <fo:flow flow-name="xsl-region-body">
      <fo:block space-before="130mm" space-before.conditionality="retain" text-align="end">
        <fo:external-graphic src="/root/download/otp_src_20.0/bootstrap/lib/erl_docgen/priv/images/erlang-logo.gif"/>
      </fo:block>
      <fo:block id="cover-page" border-before-style="solid" border-before-width="10pt" border-color="#960003" font-size="2.3em" padding-before="0.5em" text-align="end">Observer</fo:block>
      <fo:block font-size="0.9em" text-align="end">Copyright © 2002-2017 Ericsson AB. All Rights Reserved.</fo:block>
      <fo:block font-size="0.9em" text-align="end">Observer 2.4</fo:block>
      <fo:block font-size="0.9em" text-align="end">July 12, 2017</fo:block>
      <fo:block padding-before="2.5em" font-size="1.33em" font-weight="bold" color="#C00" text-align="end"/>
      <fo:block break-before="page" border-before-style="solid" border-before-width="1pt" border-color="#960003" font-weight="bold" padding-before="0.5em" space-before="200mm" space-before.conditionality="retain">Copyright © 2002-2017 Ericsson AB. All Rights Reserved.</fo:block>
      <fo:block font-size="0.9em">
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
 
          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
    
    Ericsson AB. All Rights Reserved..
        </fo:block>
      <fo:block font-size="0.9em" font-weight="bold" space-before="2em">July 12, 2017</fo:block>
    </fo:flow>
  </fo:page-sequence>
  <fo:page-sequence font-family="serif" master-reference="document" initial-page-number="1" font-size="10pt">
    <fo:static-content flow-name="left-header">
      <fo:block text-align="start" border-after-style="solid" border-after-width="2pt" border-color="#960003" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">
        <fo:retrieve-marker retrieve-boundary="page-sequence" retrieve-class-name="chapter-title" retrieve-position="first-including-carryover"/>
      </fo:block>
    </fo:static-content>
    <fo:static-content flow-name="right-header">
      <fo:block text-align="end" border-after-style="solid" border-after-width="2pt" border-color="#960003" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">
        <fo:retrieve-marker retrieve-boundary="page-sequence" retrieve-class-name="chapter-title" retrieve-position="first-including-carryover"/>
      </fo:block>
    </fo:static-content>
    <fo:static-content flow-name="left-footer">
      <fo:block text-align="start" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold"><fo:page-number/> | Ericsson AB. All Rights Reserved.:
            Observer</fo:block>
    </fo:static-content>
    <fo:static-content flow-name="right-footer">
      <fo:block text-align="end" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">Ericsson AB. All Rights Reserved.:
            Observer | <fo:page-number/></fo:block>
    </fo:static-content>
    <fo:flow flow-name="xsl-region-body"><fo:block/><fo:block id="idp848528" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">1   
      Observer User's Guide</fo:block>
  <fo:block id="idp842768" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.1  Introduction</fo:marker>1.1  Introduction</fo:block><fo:block id="idp839840" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.1 
      Scope</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Observer application is a container including the following
    tools for tracing and investigation of distributed systems:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Observer</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Trace Tool Builder</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Erlang Top</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Crashdump Viewer</fo:block></fo:list-item-body></fo:list-item>
     </fo:list-block>
  <fo:block id="idp836208" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.2 
      Prerequisites</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is assumed that the reader is familiar with the Erlang
      programming language.</fo:block>
  <fo:block id="idp606784" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.2  Observer</fo:marker>1.2  Observer</fo:block><fo:block id="idp602528" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.1 
      Introduction</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Observer is a graphical tool for observing the characteristics of
    Erlang systems. Observer displays system information, application
    supervisor trees, process information, ETS tables, Mnesia tables
    and contains a front end for Erlang tracing.
    </fo:block>
  <fo:block id="idp600560" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.2 
      Getting Started</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Run Observer from a standalone node to minimize the impact of the 
    system being observed.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% <fo:inline font-weight="bold">erl -sname observer -hidden -setcookie MyCookie -run observer</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Select the node to observe with menu <fo:inline font-weight="bold">Nodes</fo:inline>. 
      Menu <fo:inline font-weight="bold">View &gt; Refresh interval</fo:inline> controls how often 
      the view is to be updated.
      The refresh interval is set per viewer so you can
      have different settings for each viewer. To minimize the system
      impact, only the active viewer is updated. Other views are updated 
      when activated.
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The mouse buttons behave as expected. Use left-click
    to select objects, right-click to get a menu with the most used
    options, and double-click to display information about the
    selected object. In most viewers with many columns, you can change
    the sort order by left-clicking the column header.
    </fo:block>
  <fo:block id="idp597728" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.3 
      System Tab</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tab <fo:inline font-weight="bold">System</fo:inline> displays general information about the active Erlang node 
    and its runtime system, such as build configuration, system capabilities, and 
    overall use statistics.
</fo:block>
  <fo:block id="idp595616" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.4 
      Load Charts Tab</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tab <fo:inline font-weight="bold">Load Charts</fo:inline> displays graphs of the current resource use on 
    the active Erlang node.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Graph <fo:inline font-family="monospace">Scheduler Utilization</fo:inline> shows scheduler use per scheduler, 
    where each scheduler use has a unique color.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Graph <fo:inline font-family="monospace">Memory Usage</fo:inline> shows the total memory use and per memory category
    use, where each category has a unique color. The categories are as 
    follows:</fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
       <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Total</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The sum of all memory categories.</fo:block></fo:block></fo:block-container>
       <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Processes</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The sum of all process memory used.</fo:block></fo:block></fo:block-container>
       <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Atom</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The size used by the atom table.</fo:block></fo:block></fo:block-container>
       <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Binary</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The sum of all off-heap binaries allocated.</fo:block></fo:block></fo:block-container>
       <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Code</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The memory allocated for code storage.</fo:block></fo:block></fo:block-container>
       <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Ets</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The used memory for all ETS tables.</fo:block></fo:block></fo:block-container>
     </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Graph <fo:inline font-family="monospace">IO Usage</fo:inline> shows the current I/O load on the system.</fo:block>
  <fo:block id="idp707408" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.5 
      Memory Allocators Tab</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tab <fo:inline font-weight="bold">Memory Allocators</fo:inline> displays detailed information of the carrier 
    size and current memory carriers. For details about memory carriers, 
    see module
    <fo:inline font-style="italic"><fo:inline font-family="monospace">erts_alloc</fo:inline></fo:inline>
    in application ERTS.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Max Carrier size</fo:inline> column shows the maximum value seen by observer
    since the last node change or since the start of the application, i.e. switching
    nodes will reset the max column. Values are sampled so higher values may have
    existed than what is shown.
    </fo:block>
  <fo:block id="idp703792" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.6 
      Applications Tab</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tab <fo:inline font-weight="bold">Applications</fo:inline> presents application information.
    Select an application in the left list to display its supervisor
    tree. The right-click options in the tree are as follows:
    </fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
    <fo:block keep-with-next.within-page="always">Process info</fo:block>
    <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Opens a detailed information window on the selected process,
    including the following:</fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always">Process Information</fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Shows the process information.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Messages</fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Shows the process messages.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Dictionary</fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Shows the process dictionary.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Stack Trace</fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Shows the process current stack trace.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">State</fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Shows the process state.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Log</fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If enabled and available, shows the process SASL
      log entries.</fo:block></fo:block></fo:block-container>
    </fo:block>
    </fo:block></fo:block-container>
    <fo:block keep-with-next.within-page="always">Trace process</fo:block>
    <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Adds the selected process identifier to tab <fo:inline font-weight="bold">Trace Overview</fo:inline> 
    plus the node that the process resides on.</fo:block></fo:block></fo:block-container>
    <fo:block keep-with-next.within-page="always">Trace named process</fo:block>
    <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Adds the registered name of the process. This can be useful when tracing on
    many nodes, as processes with that name are then traced on all traced nodes.</fo:block></fo:block></fo:block-container>
    <fo:block keep-with-next.within-page="always">Trace process tree</fo:block>
    <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Adds the selected process and all processes below,
    right of it, to tab <fo:inline font-weight="bold">Trace Overview</fo:inline>.</fo:block></fo:block></fo:block-container>
    <fo:block keep-with-next.within-page="always">Trace named process tree</fo:block>
    <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Adds the selected process and all processes below,
    right of it, to tab <fo:inline font-weight="bold">Trace Overview</fo:inline>.</fo:block></fo:block></fo:block-container>
    </fo:block>
  <fo:block id="idp685072" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.7 
      Processes Tab</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tab <fo:inline font-weight="bold">Processes</fo:inline> lists process information in columns.
    For each process the following information is displayed:
    </fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always">Pid</fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The process identifier.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Reds</fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The number of reductions executed on the process. 
      This can be presented as accumulated values or as values since the last update.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Memory</fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The size of the process, in bytes, obtained by a
       call to <fo:inline font-family="monospace">process_info(Pid,memory)</fo:inline>.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">MsgQ</fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The length of the message queue for the process.</fo:block></fo:block></fo:block-container>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Option <fo:inline font-weight="bold">Process info</fo:inline> opens a detailed information window on the process under the mouse pointer,
      including the following:</fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always">Process Information</fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Shows the process information.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Messages</fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Shows the process messages.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Dictionary</fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Shows the process dictionary.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Stack Trace</fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Shows the process current stack trace.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">State</fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Shows the process state.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Log</fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If enabled and available, shows the process SASL log entries.</fo:block></fo:block></fo:block-container>
    </fo:block>
    
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Log</fo:inline> requires application SASL  to be started on the observed node,
      with <fo:inline font-family="monospace">log_mf_h</fo:inline> as log handler.
      The Observed node must be Erlang/OTP R16B02 or higher.
      The <fo:inline font-family="monospace">rb</fo:inline> server must not be started on the observed node when clicking menu 
      <fo:inline font-weight="bold">Log &gt; Toggle log view</fo:inline>. The <fo:inline font-family="monospace">rb</fo:inline> server is stopped on the observed node 
      when exiting or changing the observed node.
      </fo:block>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Option <fo:inline font-weight="bold">Trace selected processes</fo:inline> adds the selected process identifiers to tab
    <fo:inline font-weight="bold">Trace Overview</fo:inline> plus the node that the processes reside on.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Option <fo:inline font-weight="bold">Trace selected processes by name</fo:inline> adds the registered name of the processes. This can be 
    useful when tracing is done on many nodes, as processes with that name are then traced on 
    all traced nodes.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Option <fo:inline font-weight="bold">Kill process</fo:inline> brutally kills the processes under
    the mouse pointer by sending an exit signal with
    reason <fo:inline font-family="monospace">kill</fo:inline>.</fo:block>

  <fo:block id="idp502400" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.8 
      Ports Tab</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tab <fo:inline font-weight="bold">Ports</fo:inline> lists port information in columns.
    For each port the following information is displayed:
    </fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always">Id</fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The port identifier.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Connected</fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The process identifier for the process that owns the
	  port.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Name</fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The registered name of the port, if any.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Controls</fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The name of the command set by <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:open_port/2</fo:inline></fo:inline>.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Slot</fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The internal index of the port.</fo:block></fo:block></fo:block-container>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Option <fo:inline font-weight="bold">Port info</fo:inline> opens a detailed information window
      for the port under the mouse pointer. In addition to the
      information above, it also shows links and monitors.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Option <fo:inline font-weight="bold">Trace selected ports</fo:inline> adds the selected port
      identifiers, and the nodes that the ports reside on,
      to tab <fo:inline font-weight="bold">Trace Overview</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Option <fo:inline font-weight="bold">Trace selected ports by name</fo:inline> adds the
      registered name of the port to tab <fo:inline font-weight="bold">Trace Overview</fo:inline>. This
      can be useful when tracing is done on many nodes, as ports with
      that name are then traced on all traced nodes.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Option <fo:inline font-weight="bold">Close</fo:inline>
      executes <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:port_close/1</fo:inline></fo:inline>
      on the port under the mouse pointer.</fo:block>

  <fo:block id="idp14720" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.9 
      Table Viewer Tab</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tab <fo:inline font-weight="bold">Table Viewer</fo:inline> lists tables. By default, ETS tables
    are displayed whereas unreadable private ETS tables and tables created by OTP
    applications are not diplayed. Use menu <fo:inline font-weight="bold">View</fo:inline> to view "system"
    ETS tables, unreadable ETS tables, or Mnesia tables.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Double-click to view the table content, or right-click and
    select option <fo:inline font-weight="bold">Show Table Content</fo:inline>. To view table
    information, select the table and activate menu <fo:inline font-weight="bold">View &gt;
    Table information</fo:inline>, or right-click and select option <fo:inline font-weight="bold">Table
    info</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">You can use <fo:inline font-style="italic">regular
    expressions</fo:inline> and search for objects, and edit or delete them.
    </fo:block>
  <fo:block id="idp718016" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.10 
      Trace Overview Tab</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tab <fo:inline font-weight="bold">Trace Overview</fo:inline> handles tracing. Trace by selecting
    the processes or ports to be traced and how to trace them. For
    processes, you can trace messages, function calls, scheduling,
    garbage collections, and process-related events such
    as <fo:inline font-family="monospace">spawn</fo:inline>, <fo:inline font-family="monospace">exit</fo:inline>, and many others. For ports, you can
    trace messages, scheduling and port-related events.
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To trace function calls, you also need to set up
    <fo:inline font-weight="bold">trace patterns</fo:inline>. Trace patterns select the function calls
    to be traced. The number of traced function calls can be
    further reduced with <fo:inline font-weight="bold">match specifications</fo:inline>. Match
    specifications can also be used to trigger more information
    in the trace messages.
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">You can also set match specifications on messages. By default,
    if tracing messages, all messages sent and/or received by the
    process or port are traced. Match specifications can be used to
    reduce the number of traced messages and/or to trigger more
    information in the trace messages.</fo:block>

    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Trace patterns only apply to the traced processes and
    ports.</fo:block></fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Processes are added from the <fo:inline font-weight="bold">Applications</fo:inline>
      or <fo:inline font-weight="bold">Processes</fo:inline> tabs. Ports are added from
      the <fo:inline font-weight="bold">Ports</fo:inline> tab.  A special <fo:inline font-weight="bold">new</fo:inline> identifier,
      meaning all processes, or ports, started after trace start, can
      be added with buttons <fo:inline font-weight="bold">Add 'new' Processes</fo:inline> and <fo:inline font-weight="bold">Add
      'new' Ports</fo:inline>, respecively.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      When adding processes or ports, a window with trace options is
      displayed. The chosen options are set for the selected
      processes/ports.  To change the options, right-click the process
      or port and select <fo:inline font-weight="bold">Edit process options</fo:inline>. To remove a
      process or port from the list, right-click and select <fo:inline font-weight="bold">Remove
      process</fo:inline> or <fo:inline font-weight="bold">Remove port</fo:inline>, respectively.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Processes and ports added by process/port identifiers add the
      nodes these processes/ports reside on in the node list. More
      nodes can be added by clicking button <fo:inline font-weight="bold">Add Nodes</fo:inline>, or by
      right-clicking in the <fo:inline font-weight="bold">Nodes</fo:inline> list and select <fo:inline font-weight="bold">Add
      Nodes</fo:inline>. To remove nodes, select them, then right-click and
      choose <fo:inline font-weight="bold">Remove nodes</fo:inline>.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      If function calls are traced, trace patterns must be added by clicking button
      <fo:inline font-weight="bold">Add Trace Pattern</fo:inline>. Select a module, function(s), and a match specification.
      If no functions are selected, all functions in the module are traced.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Trace patterns can also be added for traced messages. Click
      button <fo:inline font-weight="bold">Add Trace Pattern</fo:inline> and select <fo:inline font-weight="bold">Messages
      sent</fo:inline> or <fo:inline font-weight="bold">Messages received</fo:inline>, and a match
      specification.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      A few basic match specifications are provided in the tool, and
      you can provide your own match specifications. The syntax of match
      specifications is described in the <fo:inline font-style="italic"><fo:inline font-family="monospace">ERTS User's Guide</fo:inline></fo:inline>. To simplify
      the writing of a match specification, they can also be written as
      <fo:inline font-family="monospace">fun/1</fo:inline>. For details, see module
      <fo:inline font-style="italic">ms_transform</fo:inline>
      in application STDLIB.
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Click button <fo:inline font-weight="bold">Start Trace</fo:inline> to start the trace.
    By default, trace output is written to a new window. Tracing is stopped 
    when the window is closed, or when clicking button <fo:inline font-weight="bold">Stop Trace</fo:inline>.
    Trace output can be changed with menu <fo:inline font-weight="bold">Options &gt; Output</fo:inline>.
    The trace settings, including match specifications, can be saved to, 
    or loaded from, a file.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details about tracing, see module <fo:inline font-style="italic">dbg</fo:inline> in application Runtime_Tools
    and in section "Match specifications in Erlang" in 
    <fo:inline font-style="italic"><fo:inline font-family="monospace">ERTS User's Guide</fo:inline></fo:inline>
    and in module
    <fo:inline font-style="italic"><fo:inline font-family="monospace">ms_transform</fo:inline></fo:inline>
    in application STDLIB.
    </fo:block>
  <fo:block id="idp569088" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.3  Trace Tool Builder</fo:marker>1.3  Trace Tool Builder</fo:block><fo:block id="idp558064" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.1 
      Introduction</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Trace Tool Builder is a base for building trace tools for
      single node or distributed Erlang systems. It requires the
      Runtime_Tools application to be available on the traced
      node.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following are the main features of Trace Tool Builder:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Start tracing to file ports on many nodes with one
       function call.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Write more information to a trace information file,
       which is read during formatting.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Restore previous configuration by maintaining a
       history buffer and handling configuration files.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Provide some simple support for sequential tracing.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Format binary trace logs and merge logs from
       multiple nodes.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The intention of Trace Tool Builder is to serve
      as a base for tailor-made trace tools, but it can also be used directly
      from the Erlang shell (it can mimic <fo:inline font-family="monospace">dbg</fo:inline> behaviour while
      still providing useful additions, such as match specification shortcuts).
      Trace Tool Builder only allows the use of file port tracer, so to use 
      other types of trace clients it is better to use <fo:inline font-family="monospace">dbg</fo:inline> directly.</fo:block>
  <fo:block id="idp492512" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.2 
      Getting Started</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Module <fo:inline font-family="monospace">ttb</fo:inline> is the interface to all functions in
      Trace Tool Builder.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To get started, the least you need to do is to
      start a tracer with 
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ttb:tracer/0,1,2</fo:inline></fo:inline>, 
      and set the required
      trace flags on the processes you want to trace with 
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ttb:p/2</fo:inline></fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the tracing is completed, stop the tracer with 
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ttb:stop/0,1</fo:inline></fo:inline> 
      and format the trace log with 
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ttb:format/1,2</fo:inline></fo:inline> 
      (if there is anything to format).
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Useful functions:</fo:inline></fo:block>
      <fo:block space-after="0.25em" space-before="0.25em">
       <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ttb:tracer/0,1,2</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Opens a trace port on each node to be traced. By default, 
       trace messages are written to binary files on remote nodes (the 
       binary trace log).</fo:block></fo:block></fo:block-container>
       <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ttb:p/2</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the processes to be traced. Trace flags specified 
       in this call specify what to trace on each process. This function can be 
       called many times if you like different trace flags to be set on different 
       processes.</fo:block></fo:block></fo:block-container>
       <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ttb:tp/2,3,4</fo:inline> or <fo:inline font-family="monospace">ttb:tpl/2,3,4</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you want to trace function calls (that is, if you have
      trace flag <fo:inline font-family="monospace">call</fo:inline> set on any process), you must
      also set trace patterns on the required function(s) with
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ttb:tp/2,3,4</fo:inline></fo:inline> or 
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ttb:tpl/2,3,4</fo:inline></fo:inline>.
      A function is only traced 
      if it has a trace pattern. The trace pattern specifies how to trace the
      function by using match specifications. Match specifications are
      described in the 
      <fo:inline font-style="italic">ERTS User's Guide</fo:inline>.</fo:block></fo:block></fo:block-container>
       <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ttb:stop/0,1</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stops tracing on all nodes, deletes all trace patterns, and 
       flushes the trace port buffer.</fo:block></fo:block></fo:block-container>
       <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ttb:format/1/2</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Translates the binary trace logs into something readable. 
       By default, <fo:inline font-family="monospace">ttb</fo:inline> presents each trace message as a line of text, 
       but you can also write your own handler to make more complex interpretations 
       of the trace information. A trace log can also be presented graphically 
       with application Event Tracer (ET).</fo:block>
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If option <fo:inline font-family="monospace">format</fo:inline> is specified to <fo:inline font-family="monospace">ttb:stop/1</fo:inline>, the formatting 
       is automatically done when stopping <fo:inline font-family="monospace">ttb</fo:inline>.</fo:block></fo:block></fo:block-container>
     </fo:block>
  
    <fo:block id="idp828784" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Tracing Local Node from Erlang Shell</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following small module is used in the subsequent example:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(m).
-export([f/0]).
f() -&gt;
   receive 
      From when is_pid(From) -&gt;
         Now = erlang:now(),
         From ! {self(),Now}
   end.      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following example shows the basic use of <fo:inline font-family="monospace">ttb</fo:inline> from
        the Erlang shell. Default options are used both for starting the
        tracer and for formatting (the custom fetch directory is however provided).
        This gives a trace log named <fo:inline font-family="monospace">Node-ttb</fo:inline> in the newly created
        directory, where <fo:inline font-family="monospace">Node</fo:inline> is the node name. The
        default handler prints the formatted trace messages in the
        shell:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
(tiger@durin)47&gt; %% First I spawn a process running my test function
(tiger@durin)47&gt; <fo:inline font-weight="bold">Pid = spawn(m,f,[]).</fo:inline>
&lt;0.125.0&gt;
(tiger@durin)48&gt; 
(tiger@durin)48&gt; %% Then I start a tracer...
(tiger@durin)48&gt; <fo:inline font-weight="bold">ttb:tracer().</fo:inline>
{ok,[tiger@durin]}
(tiger@durin)49&gt; 
(tiger@durin)49&gt; %% and activate the new process for tracing
(tiger@durin)49&gt; %% function calls and sent messages.
(tiger@durin)49&gt; <fo:inline font-weight="bold">ttb:p(Pid,[call,send]).</fo:inline>
{ok,[{&lt;0.125.0&gt;,[{matched,tiger@durin,1}]}]}
(tiger@durin)50&gt; 
(tiger@durin)50&gt; %% Here I set a trace pattern on erlang:now/0
(tiger@durin)50&gt; %% The trace pattern is a simple match spec
(tiger@durin)50&gt; %% indicating that the return value should be
(tiger@durin)50&gt; %% traced. Refer to the reference_manual for
(tiger@durin)50&gt; %% the full list of match spec shortcuts
(tiger@durin)50&gt; %% available.
(tiger@durin)51&gt; <fo:inline font-weight="bold">ttb:tp(erlang,now,return).</fo:inline>
{ok,[{matched,tiger@durin,1},{saved,1}]}
(tiger@durin)52&gt; 
(tiger@durin)52&gt; %% I run my test (i.e. send a message to
(tiger@durin)52&gt; %% my new process)
(tiger@durin)52&gt; <fo:inline font-weight="bold">Pid ! self().</fo:inline>
&lt;0.72.0&gt;
(tiger@durin)53&gt; 
(tiger@durin)53&gt; %% And then I have to stop ttb in order to flush
(tiger@durin)53&gt; %% the trace port buffer
(tiger@durin)53&gt; <fo:inline font-weight="bold">ttb:stop([return, {fetch_dir, "fetch"}]).</fo:inline>
{stopped, "fetch"}
(tiger@durin)54&gt; 
(tiger@durin)54&gt; %% Finally I format my trace log
(tiger@durin)54&gt; <fo:inline font-weight="bold">ttb:format("fetch").</fo:inline>
({&lt;0.125.0&gt;,{m,f,0},tiger@durin}) call erlang:now()
({&lt;0.125.0&gt;,{m,f,0},tiger@durin}) returned from erlang:now/0 -&gt;
{1031,133451,667611}
({&lt;0.125.0&gt;,{m,f,0},tiger@durin}) &lt;0.72.0&gt; !
{&lt;0.125.0&gt;,{1031,133451,667611}}
ok</fo:block>
    

    <fo:block id="idp693024" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Build Your Own Tool</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following example shows a simple tool for "debug tracing",
        that is, tracing of function calls with return values:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(mydebug).
-export([start/0,trc/1,stop/0,format/1]).
-export([print/4]).
%% Include ms_transform.hrl so that I can use dbg:fun2ms/2 to
%% generate match specifications.
-include_lib("stdlib/include/ms_transform.hrl").
%%% -------------Tool API-------------
%%% ----------------------------------
%%% Star the "mydebug" tool
start() -&gt;
    %% The options specify that the binary log shall be named
    %% &lt;Node&gt;-debug_log and that the print/4 function in this
    %% module shall be used as format handler
    ttb:tracer(all,[{file,"debug_log"},{handler,{{?MODULE,print},0}}]),
    %% All processes (existing and new) shall trace function calls
    %% We want trace messages to be sorted upon format, which requires
    %% timestamp flag. The flag is however enabled by default in ttb.
    ttb:p(all,call).

%%% Set trace pattern on function(s)
trc(M) when is_atom(M) -&gt;
    trc({M,'_','_'});
trc({M,F}) when is_atom(M), is_atom(F) -&gt;
    trc({M,F,'_'});
trc({M,F,_A}=MFA) when is_atom(M), is_atom(F) -&gt;
    %% This match spec shortcut specifies that return values shall
    %% be traced.
    MatchSpec = dbg:fun2ms(fun(_) -&gt; return_trace() end),
    ttb:tpl(MFA,MatchSpec).

%%% Format a binary trace log
format(Dir) -&gt;
    ttb:format(Dir).

%%% Stop the "mydebug" tool
stop() -&gt;
    ttb:stop(return).

%%% --------Internal functions--------
%%% ----------------------------------
%%% Format handler
print(_Out,end_of_trace,_TI,N) -&gt;
    N;
print(Out,Trace,_TI,N) -&gt;
    do_print(Out,Trace,N),
    N+1.

do_print(Out,{trace_ts,P,call,{M,F,A},Ts},N) -&gt;
    io:format(Out,
              "~w: ~w, ~w:~n"
              "Call      : ~w:~w/~w~n"
              "Arguments :~p~n~n",
              [N,Ts,P,M,F,length(A),A]);
do_print(Out,{trace_ts,P,return_from,{M,F,A},R,Ts},N) -&gt;
    io:format(Out,
              "~w: ~w, ~w:~n"
              "Return from  : ~w:~w/~w~n"
              "Return value :~p~n~n",
              [N,Ts,P,M,F,A,R]).      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To distinguish trace logs produced with this tool from other
        logs, option <fo:inline font-family="monospace">file</fo:inline> is used in 
	<fo:inline font-style="italic"><fo:inline font-family="monospace">tracer/2</fo:inline></fo:inline>. The
        logs are therefore fetched to a directory named
        <fo:inline font-family="monospace">ttb_upload_debug_log-YYYYMMDD-HHMMSS</fo:inline>
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By using option <fo:inline font-family="monospace">handler</fo:inline> when starting the tracer,
        the information about how to format the file is stored in the
        trace information file (<fo:inline font-family="monospace">.ti</fo:inline>). This is not necessary, as
        it can be specified when formatting instead. However, It can
        be useful if you, for example, want to format trace logs automatically 
	using option <fo:inline font-family="monospace">format</fo:inline> in <fo:inline font-family="monospace">ttb:stop/1</fo:inline>. Also, you do not need 
	any knowledge of the content of a binary log to format it the way it 
	is intended. If option <fo:inline font-family="monospace">handler</fo:inline> is specified both when starting 
	the tracer and when formatting, the one specified when formatting is used.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Trace flag <fo:inline font-family="monospace">call</fo:inline> is set on all processes. This
        means that any function activated with command <fo:inline font-family="monospace">trc/1</fo:inline>
        is traced on all existing and new processes.
        </fo:block>
    
  <fo:block id="idp561264" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.3 
      Running Trace Tool Builder against Remote Node</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Observer application might not always be available on the
      node to be traced (in the following called the "traced
      node"). However, Trace Tool Builder can still be run from
      another node (in the following called the "trace control node") as
      long as the following is fulfilled:
      </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The Observer application is available on the trace control node.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The Runtime_Tools application is available on both the
       trace control node and the traced node.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If Trace Tool Builder is to be used against a remote node,
      it is highly recommended to start the trace control node as
      <fo:inline font-weight="bold">hidden</fo:inline>. This way it can connect to the traced node
      without being "seen" by it, that is, if the <fo:inline font-family="monospace">nodes()</fo:inline>
      BIF is called on the traced node, the trace control node does not
      show. To start a hidden node, add option <fo:inline font-family="monospace">-hidden</fo:inline> to the
      <fo:inline font-family="monospace">erl</fo:inline> command, for example:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% <fo:inline font-weight="bold">erl -sname trace_control -hidden</fo:inline></fo:block>

    <fo:block id="idp254400" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Diskless Node</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the traced node is diskless, <fo:inline font-family="monospace">ttb</fo:inline> must be started from
        a trace control node with disk access, and option <fo:inline font-family="monospace">file</fo:inline>
        must be specified to function <fo:inline font-family="monospace">tracer/2</fo:inline> with value
        <fo:inline font-family="monospace">{local, File}</fo:inline>, for example:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
(trace_control@durin)1&gt; <fo:inline font-weight="bold">ttb:tracer(mynode@diskless,
                                   {file,{local,{wrap,"mytrace"}}}).</fo:inline>
{ok,[mynode@diskless]}</fo:block>
    
  <fo:block id="idp249648" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.4 
      More Tracing Options</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When setting up a trace, the following features can also be activated:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Time-constrained tracing</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Overload protection</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Autoresume</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">dbg</fo:inline> mode</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
      <fo:block id="idp26880" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Time-Constrained Tracing</fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It can sometimes be helpful to enable trace for a
          specified period of time (for example, to monitor a system for 24 hours
          or half a second). This can be done with option
          <fo:inline font-family="monospace">{timer, TimerSpec}</fo:inline>. If <fo:inline font-family="monospace">TimerSpec</fo:inline> has the
          form of <fo:inline font-family="monospace">MSec</fo:inline>, the trace is stopped after <fo:inline font-family="monospace">MSec</fo:inline>
          milliseconds using 
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">ttb:stop/0</fo:inline></fo:inline>. If more 
	  options are provided (<fo:inline font-family="monospace">TimerSpec = {MSec, Opts}</fo:inline>), 
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">ttb:stop/1</fo:inline></fo:inline>
          is called instead with <fo:inline font-family="monospace">Opts</fo:inline> as argument.</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The timer is started with 
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">ttb:p/2</fo:inline></fo:inline>, so any trace patterns 
	  must be set up in advance. 
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">ttb:start_trace/4</fo:inline></fo:inline>
          always sets up all patterns before invoking <fo:inline font-family="monospace">ttb:p/2</fo:inline>.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following example shows how to set up a trace that is
          automatically stopped and formatted after 5 seconds:
        </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
(tiger@durin)1&gt; <fo:inline font-weight="bold">ttb:start_trace([node()],
                                [{erlang, now,[]}],
                                {all, call},
                                [{timer, {5000, format}}]).</fo:inline></fo:block>
	<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Because of network and processing delays, the period
          of tracing is approximate.</fo:block></fo:block>

        
        <fo:block id="idp698048" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Overload Protection</fo:block>
          
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When tracing live systems, always take special care to not
            overload a node with too heavy tracing. <fo:inline font-family="monospace">ttb</fo:inline> provides
            option <fo:inline font-family="monospace">overload</fo:inline> to address this problem.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{overload, MSec, Module, Function}</fo:inline> instructs the <fo:inline font-family="monospace">ttb</fo:inline> back end
            (a part of the <fo:inline font-style="italic">Runtime_Tools</fo:inline>
            application) to perform overload check every <fo:inline font-family="monospace">MSec</fo:inline> millisecond.
            If the check (named <fo:inline font-family="monospace">Module:Function(check)</fo:inline>) returns
            <fo:inline font-family="monospace">true</fo:inline>, tracing is disabled on the selected node.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Overload protection activated on one node does not
            affect other nodes, where the tracing continues as normal.
            <fo:inline font-family="monospace">ttb:stop/0,1</fo:inline> fetches data from all clients, including everything
            collected before the activation of overload protection.</fo:block>

	  <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
            It is not allowed to change trace details 
	    (with <fo:inline font-family="monospace">ttb:p</fo:inline> and <fo:inline font-family="monospace">ttb:tp/tpl...</fo:inline>) once overload 
	    protection is activated in one of the traced nodes. This is to 
	    avoid trace setup being inconsistent between nodes.</fo:block></fo:block>

          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Module:Function</fo:inline> provided with option <fo:inline font-family="monospace">overload</fo:inline> must
            handle three calls: <fo:inline font-family="monospace">init</fo:inline>, <fo:inline font-family="monospace">check</fo:inline>, and <fo:inline font-family="monospace">stop</fo:inline>. <fo:inline font-family="monospace">init</fo:inline>
            and <fo:inline font-family="monospace">stop</fo:inline> allow some setup and teardown required by
            the check. An overload check module can look as follows:
          </fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(overload).
-export([check/1]).

check(init) -&gt;
    Pid = sophisticated_module:start(),
    put(pid, Pid);
check(check) -&gt;
    get(pid) ! is_overloaded,
    receive
        Reply -&gt;
            Reply
    after 5000 -&gt;
            true
    end;
check(stop) -&gt;
    get(pid) ! stop.</fo:block>
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
            <fo:inline font-family="monospace">check</fo:inline> is always called by the same process, so <fo:inline font-family="monospace">put</fo:inline> and
            <fo:inline font-family="monospace">get</fo:inline> are possible.</fo:block></fo:block>
        
        <fo:block id="idp866256" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Autoresume</fo:block>
          
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A node can crash (probably a buggy one, hence traced).
	    Use <fo:inline font-family="monospace">resume</fo:inline> to resume tracing on the node automatically 
	    when it gets back. The failing node then tries to reconnect
            to trace control node when <fo:inline font-family="monospace">Runtime_Tools</fo:inline> is started.
            This implies that <fo:inline font-family="monospace">Runtime_Tools</fo:inline> must be included in
            the startup chain of other nodes (if not, you can still
            resume tracing by starting <fo:inline font-family="monospace">Runtime_Tools</fo:inline> manually,
            that is, by an RPC call).</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To not lose the data that the failing node stored
            up to the point of crash, the control node tries to fetch
            it before restarting trace. This must occur within the allowed
            time frame, otherwise it is aborted (default is 10 seconds, but it
	    can be changed with <fo:inline font-family="monospace">{resume, MSec}</fo:inline>). The data fetched 
	    this way is then merged with all other traces.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The autostart feature requires more data to be stored on
            traced nodes. By default, the data is stored automatically
            to the file named "ttb_autostart.bin" in the currect working directory
	    (cwd) of the traced node.
            Users can change this behaviour (that is, on diskless
            nodes) by specifying their own module to handle autostart data
            storage and retrieval (<fo:inline font-family="monospace">ttb_autostart_module</fo:inline>
            environment variable of <fo:inline font-family="monospace">runtime_tools</fo:inline>). For information 
	    about the API, see module
	    <fo:inline font-style="italic"><fo:inline font-family="monospace">ttb</fo:inline></fo:inline>. 
	    The following example shows the default handler:</fo:block>
          <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(ttb_autostart).
-export([read_config/0,
         write_config/1,
         delete_config/0]).

-define(AUTOSTART_FILENAME, "ttb_autostart.bin").

delete_config() -&gt;
    file:delete(?AUTOSTART_FILENAME).

read_config() -&gt;
    case file:read_file(?AUTOSTART_FILENAME) of
        {ok, Data} -&gt; {ok, binary_to_term(Data)};
        Error      -&gt; Error
    end.

write_config(Data) -&gt;
    file:write_file(?AUTOSTART_FILENAME, term_to_binary(Data)).</fo:block>

         <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Remember that file trace ports buffer the data
            by default. If the node crashes, trace messages are not
            flushed to the binary log. If the risk of failure is
            high, it can be a good idea to flush the buffers every 
	    now and then automatically. Passing <fo:inline font-family="monospace">{flush, MSec}</fo:inline>
            as an option of <fo:inline font-family="monospace">ttb:tracer/2</fo:inline> flushes all buffers
            every <fo:inline font-family="monospace">MSec</fo:inline> millisecond.</fo:block></fo:block>
        
        <fo:block id="idp876384" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">dbg Mode</fo:block>
          
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Option <fo:inline font-family="monospace">{shell, ShellType}</fo:inline> allows making <fo:inline font-family="monospace">ttb</fo:inline>
            operation similar to 
            <fo:inline font-style="italic"><fo:inline font-family="monospace">dbg</fo:inline></fo:inline>.
	    Using <fo:inline font-family="monospace">{shell, true}</fo:inline>
            displays all trace messages in the shell before storing them.
            <fo:inline font-family="monospace">{shell, only}</fo:inline> additionally disables message storage
            (making the tool to behave exactly like <fo:inline font-family="monospace">dbg</fo:inline>). This is 
	    allowed only with IP trace ports (<fo:inline font-family="monospace">{trace, {local, File}}</fo:inline>).
          </fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Command <fo:inline font-family="monospace">ttb:tracer(dbg)</fo:inline> is a shortcut for the pure
	  <fo:inline font-family="monospace">dbg</fo:inline> mode (<fo:inline font-family="monospace">{shell, only}</fo:inline>).</fo:block>
        
  <fo:block id="idp1126080" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.5 
      Trace Information and File .ti</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In addition to the trace log file(s), a file with extension
      <fo:inline font-family="monospace">.ti</fo:inline> is created when Trace Tool Builder is started. This
      is the trace information file. It is a binary file, which
      contains the process information, trace flags used, the name of
      the node to which it belongs, and all information written with
      function 
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ttb:write_trace_info/2</fo:inline></fo:inline>. 
      <fo:inline font-family="monospace">.ti</fo:inline> files are always fetched with other logs when the trace is stopped.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Except for the process information, everything in the trace
      information file is passed on to the handler function when
      formatting. Parameter <fo:inline font-family="monospace">TI</fo:inline> is a list of
      <fo:inline font-family="monospace">{Key,ValueList}</fo:inline> tuples. The keys <fo:inline font-family="monospace">flags</fo:inline>,
      <fo:inline font-family="monospace">handler</fo:inline>, <fo:inline font-family="monospace">file</fo:inline>, and <fo:inline font-family="monospace">node</fo:inline> are used for
      information written directly by <fo:inline font-family="monospace">ttb</fo:inline>.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Information to the trace information file by
      can be added by calling 
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ttb:write_trace_info/2</fo:inline></fo:inline>. 
      Notice that <fo:inline font-family="monospace">ValueList</fo:inline>
      always is a list, and if you call <fo:inline font-family="monospace">write_trace_info/2</fo:inline>
      many times with the same <fo:inline font-family="monospace">Key</fo:inline>, the <fo:inline font-family="monospace">ValueList</fo:inline> is
      extended with a new value each time.
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ttb:write_trace_info(mykey,1)</fo:inline> gives the entry
      <fo:inline font-family="monospace">{mykey,[1]}</fo:inline> in <fo:inline font-family="monospace">TI</fo:inline>. Another call,
      <fo:inline font-family="monospace">ttb:write_trace_info(mykey,2)</fo:inline>, changes this entry to
      <fo:inline font-family="monospace">{mykey,[1,2]}</fo:inline>.
      </fo:block>
  <fo:block id="idp1137424" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.6 
      Wrap Logs</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you want to limit the size of the trace logs, you can use
      wrap logs. This works almost like a circular buffer. You can
      specify the maximum number of binary logs and the maximum size of
      each log. <fo:inline font-family="monospace">ttb</fo:inline> then creates a new binary log each time a log
      reaches the maximum size. When the maximum number of logs are
      reached, the oldest log is deleted before a new one is created.
    </fo:block>
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The overall size of data generated by <fo:inline font-family="monospace">ttb</fo:inline> can be greater
      than the wrap specification suggests. If a traced node restarts
      and autoresume is enabled, the old wrap log is always stored and
      a new one is created.
    </fo:block></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Wrap logs can be formatted one by one or all at once. See
      <fo:inline font-style="italic">Formatting</fo:inline>.
      </fo:block>
  <fo:block id="idp1141792" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.7 
      Formatting</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Formatting can be done automatically when stopping <fo:inline font-family="monospace">ttb</fo:inline>
      (see section
      <fo:inline font-style="italic">Automatically Collect and Format Logs from All Nodes</fo:inline>), or explicitly by calling function
      <fo:inline font-family="monospace">ttb:format/1,2</fo:inline>.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Formatting means to read a binary log and present it in a
      readable format. You can use the default format handler in
      <fo:inline font-family="monospace">ttb</fo:inline> to present each trace message as a line of text, or
      write your own handler to make more complex interpretations of the
      trace information. You can also use application ET to
      present the trace log graphically (see section
      <fo:inline font-style="italic">Presenting Trace Logs with Event Tracer</fo:inline>).
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The first argument to <fo:inline font-family="monospace">ttb:format/1,2</fo:inline> specifies which
      binary log(s) to format. This is usually the name of a directory
      that <fo:inline font-family="monospace">ttb</fo:inline> created during log fetch. Unless option 
      <fo:inline font-family="monospace">disable_sort</fo:inline> is provided, the logs from different files 
      are always sorted according to time-stamp in traces.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The second argument to <fo:inline font-family="monospace">ttb:format/2</fo:inline> is a list of
      options as follows:
      </fo:block>
      <fo:block space-after="0.25em" space-before="0.25em">
       <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">out</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the destination to write the formatted text. 
       Default destination is <fo:inline font-family="monospace">standard_io</fo:inline>, but a filename can 
       also be specified.</fo:block></fo:block></fo:block-container>
       <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">handler</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the format handler to use. If this option is 
       not specified, option <fo:inline font-family="monospace">handler</fo:inline> that is specified when starting
      the tracer is used. If option <fo:inline font-family="monospace">handler</fo:inline> is not specified
      when starting the tracer either, a default handler is used, which
      prints each trace message as a text line.</fo:block></fo:block></fo:block-container>
       <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">disable_sort</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Indicates that the logs are not to be merged according to
      time-stamp, but processed one file after another (this can be
      a bit faster).</fo:block></fo:block></fo:block-container>
     </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A format handler is a fun taking four arguments. This fun is
      called for each trace message in the binary log(s). A simple
      example that only prints each trace message can be as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
fun(Fd, Trace, _TraceInfo, State) -&gt;
   io:format(Fd, "Trace: ~p~n", [Trace]),
   State
end.    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here, <fo:inline font-family="monospace">Fd</fo:inline> is the file descriptor for the destination file, or
      the atom <fo:inline font-family="monospace">standard_io</fo:inline>. <fo:inline font-family="monospace">_TraceInfo</fo:inline> contains information
      from the trace information file (see section
      <fo:inline font-style="italic">Trace Information and File .ti</fo:inline>). <fo:inline font-family="monospace">State</fo:inline> is a state variable for the format
      handler fun. The initial value of variable <fo:inline font-family="monospace">State</fo:inline> is
      specified with the handler option, for example:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
ttb:format("tiger@durin-ttb", [{handler, {{Mod,Fun}, initial_state}}])
                                                     ^^^^^^^^^^^^^    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Another format handler can be used to calculate the time spent by
      the garbage collector:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
fun(_Fd,{trace_ts,P,gc_start,_Info,StartTs},_TraceInfo,State) -&gt;
      [{P,StartTs}|State];
   (Fd,{trace_ts,P,gc_end,_Info,EndTs},_TraceInfo,State) -&gt;
      {value,{P,StartTs}} = lists:keysearch(P,1,State),
      Time = diff(StartTs,EndTs),
      io:format("GC in process ~w: ~w milliseconds~n", [P,Time]),
      State -- [{P,StartTs}]
end    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A more refined version of this format handler is function
      <fo:inline font-family="monospace">handle_gc/4</fo:inline> in module <fo:inline font-family="monospace">multitrace.erl</fo:inline>
      included in directory <fo:inline font-family="monospace">src</fo:inline> of the Observer application.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The trace message is passed as the second argument (<fo:inline font-family="monospace">Trace</fo:inline>).
      The possible values of <fo:inline font-family="monospace">Trace</fo:inline> are the following:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>All trace messages described in 
	<fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:trace/3</fo:inline></fo:inline>
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{drop, N}</fo:inline> if IP tracer is used (see 
	<fo:inline font-style="italic"><fo:inline font-family="monospace">dbg:trace_port/2</fo:inline></fo:inline>)
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">end_of_trace</fo:inline> received once when all trace messages are
          processed</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By giving the format handler 
    <fo:inline font-style="italic"><fo:inline font-family="monospace">ttb:get_et_handler()</fo:inline></fo:inline>, 
    you can have the trace
      log presented graphically with <fo:inline font-family="monospace">et_viewer</fo:inline> in the ET
      application (see section
      <fo:inline font-style="italic">Presenting Trace Logs with Event Tracer</fo:inline>).
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">You can always decide not to format the whole trace data contained
      in the fetch directory, but analyze single files instead. To do so, 
      a single file (or list of files) must be passed as the first argument 
      to <fo:inline font-family="monospace">format/1,2</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Wrap logs can be formatted one by one or all at once. To
      format one of the wrap logs in a set, specify the exact file name. 
      To format the whole set of wrap logs, specify the name with <fo:inline font-family="monospace">*</fo:inline>
      instead of the wrap count.
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Start tracing:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
(tiger@durin)1&gt; <fo:inline font-weight="bold">ttb:tracer(node(),{file,{wrap,"trace"}}).</fo:inline>
{ok,[tiger@durin]}
(tiger@durin)2&gt; <fo:inline font-weight="bold">ttb:p(...)</fo:inline>
...</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This gives a set of binary logs, for example:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
tiger@durin-trace.0.wrp
tiger@durin-trace.1.wrp
tiger@durin-trace.2.wrp
...    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Format the whole set of logs:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">ttb:format("tiger@durin-trace.*.wrp").</fo:inline>
....
ok
2&gt;    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Format only the first log:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">ttb:format("tiger@durin-trace.0.wrp").</fo:inline>
....
ok
2&gt;    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To merge all wrap logs from two nodes:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">ttb:format(["tiger@durin-trace.*.wrp","lion@durin-trace.*.wrp"]).</fo:inline>
....
ok
2&gt;    </fo:block>

    <fo:block id="idp1175824" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Presenting Trace Logs with Event Tracer</fo:block>
      
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For detailed information about the Event Tracer, see the
      <fo:inline font-style="italic">ET</fo:inline> application.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By giving the format handler 
        <fo:inline font-style="italic"><fo:inline font-family="monospace">ttb:get_et_handler()</fo:inline></fo:inline>, 
        you can have the trace log presented graphically with 
	<fo:inline font-family="monospace">et_viewer</fo:inline> in the ET application.
	<fo:inline font-family="monospace">ttb</fo:inline> provides filters that can be selected from the 
	menu <fo:inline font-weight="bold">Filter</fo:inline> in the <fo:inline font-family="monospace">et_viewer</fo:inline> window. The filters 
	are names according to the type of actors they present 
	(that is, what each vertical line in the sequence diagram represents). 
	Interaction between actors is shown as red arrows between two 
	vertical lines, and activities within an actor are shown as 
	blue text to the right of the actors line.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">processes</fo:inline> filter is the only filter showing all 
        trace messages from a trace log. Each vertical line in
        the sequence diagram represents a process. Erlang messages,
        spawn, and link/unlink are typical interactions between
        processes. Function calls, scheduling, and garbage collection, 
	are typical activities within a process. <fo:inline font-family="monospace">processes</fo:inline> is 
	the default filter.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The remaining filters only show function calls and
        function returns. All other trace message are discarded. To get
        the most out of these filters, <fo:inline font-family="monospace">et_viewer</fo:inline> must know
        the caller of each function and the time of return. This can be
        obtained using both the <fo:inline font-family="monospace">call</fo:inline> and <fo:inline font-family="monospace">return_to</fo:inline>
        flags when tracing. Notice that flag <fo:inline font-family="monospace">return_to</fo:inline> only
        works with local call trace, that is, when trace patterns are set
        with <fo:inline font-family="monospace">ttb:tpl</fo:inline>.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The same result can be obtained by using the flag <fo:inline font-family="monospace">call</fo:inline>
        only and setting a match specification on local or
        global function calls as follows:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">dbg:fun2ms(fun(_) -&gt; return_trace(),message(caller()) end).</fo:inline>
[{'_',[],[{return_trace},{message,{caller}}]}]</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This must however be done with care, as function
        <fo:inline font-family="monospace">{return_trace}</fo:inline> in the match specification
        destroys tail recursiveness.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">modules</fo:inline> filter shows each module as a vertical
        line in the sequence diagram. External function calls/returns
        are shown as interactions between modules, and internal function
        calls/returns are shown as activities within a module.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">functions</fo:inline> filter shows each function as a vertical
        line in the sequence diagram. A function calling itself is shown
        as an activity within a function, and all other function calls
        are shown as interactions between functions.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">mods_and_procs</fo:inline> and <fo:inline font-family="monospace">funcs_and_procs</fo:inline> filters
        are equivalent to the <fo:inline font-family="monospace">modules</fo:inline> and <fo:inline font-family="monospace">functions</fo:inline>
        filters respectively, except that each module or function can
        have many vertical lines, one for each process it resides on.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the following example, modules <fo:inline font-family="monospace">foo</fo:inline> and <fo:inline font-family="monospace">bar</fo:inline> are used:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(foo).
-export([start/0,go/0]).

start() -&gt;
    spawn(?MODULE, go, []).

go() -&gt;
    receive
        stop -&gt;
            ok;
        go -&gt;
            bar:f1(),
            go()
    end.</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(bar).
-export([f1/0,f3/0]).
f1() -&gt;
    f2(),
    ok.
f2() -&gt;
    spawn(?MODULE,f3,[]).
f3() -&gt;
    ok.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Setting up the trace:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
(tiger@durin)1&gt; %%First we retrieve the Pid to limit traced processes set
(tiger@durin)1&gt; <fo:inline font-weight="bold">Pid = foo:start().</fo:inline>
(tiger@durin)2&gt; %%Now we set up tracing
(tiger@durin)2&gt; <fo:inline font-weight="bold">ttb:tracer().</fo:inline>
(tiger@durin)3&gt; <fo:inline font-weight="bold">ttb:p(Pid, [call, return_to, procs, set_on_spawn]).</fo:inline>
(tiger@durin)4&gt; <fo:inline font-weight="bold">ttb:tpl(bar, []).</fo:inline>
(tiger@durin)5&gt; %%Invoke our test function and see output with et viewer
(tiger@durin)5&gt; <fo:inline font-weight="bold">Pid ! go.</fo:inline>
(tiger@durin)6&gt; <fo:inline font-weight="bold">ttb:stop({format, {handler, ttb:get_et_handler()}}).</fo:inline></fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This renders a result similar to the following:
        </fo:block>
      <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="et_processes.gif"/>
        <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        3.1:
         
        Filter: "processes"</fo:block>
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
      <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="et_modsprocs.gif"/>
        <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        3.2:
         
        Filter: "mods_and_procs"</fo:block>
      </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that function 
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ttb:start_trace/4</fo:inline></fo:inline> 
      can be used as help as follows:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
(tiger@durin)1&gt; <fo:inline font-weight="bold">Pid = foo:start().</fo:inline>
(tiger@durin)2&gt; <fo:inline font-weight="bold">ttb:start_trace([node()],
                                [{bar,[]}],
                                {Pid, [call, return_to, procs, set_on_spawn]}
                                {handler, ttb:get_et_handler()}).</fo:inline>
(tiger@durin)3&gt; <fo:inline font-weight="bold">Pid ! go.</fo:inline>
(tiger@durin)4&gt; <fo:inline font-weight="bold">ttb:stop(format).</fo:inline></fo:block>

    
  <fo:block id="idp1208016" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.8 
      Automatically Collect and Format Logs from All Nodes</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By default,

    <fo:inline font-style="italic"><fo:inline font-family="monospace">ttb:stop/1</fo:inline></fo:inline> fetches trace logs 
      and trace information files from all nodes. The logs are stored in a
      new directory named <fo:inline font-family="monospace">ttb_upload-Filename-Timestamp</fo:inline> under the 
      working directory of the trace control node. Fetching can be disabled 
      by providing option <fo:inline font-family="monospace">nofetch</fo:inline> to <fo:inline font-family="monospace">ttb:stop/1</fo:inline>. The user can
      specify a fetch directory by passing option <fo:inline font-family="monospace">{fetch_dir, Dir}</fo:inline>.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If option <fo:inline font-family="monospace">format</fo:inline> is specified to <fo:inline font-family="monospace">ttb:stop/1</fo:inline>, the
      trace logs are automatically formatted after tracing is
      stopped.
    </fo:block>
  <fo:block id="idp1213712" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.9 
      History and Configuration Files</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For the tracing functionality,
      <fo:inline font-style="italic"><fo:inline font-family="monospace">dbg</fo:inline></fo:inline>
      can be used instead
      of <fo:inline font-family="monospace">ttb</fo:inline> for setting trace flags on processes and trace
      patterns for call trace, that is, the functions 
      <fo:inline font-family="monospace">p</fo:inline>, <fo:inline font-family="monospace">tp</fo:inline>, <fo:inline font-family="monospace">tpl</fo:inline>, <fo:inline font-family="monospace">ctp</fo:inline>, <fo:inline font-family="monospace">ctpl</fo:inline>, and <fo:inline font-family="monospace">ctpg</fo:inline>. Only the
      following two things are added by <fo:inline font-family="monospace">ttb</fo:inline> for these functions:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>All calls are stored in the history buffer and can be
          recalled and stored in a configuration file. This makes it
          easy to set up the same trace environment, for example, if you 
	  want to compare two test runs. It also reduces the amount of
          typing when using <fo:inline font-family="monospace">ttb</fo:inline> from the Erlang shell.</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Shortcuts are provided for the most common match
          specifications (to not force you to use
          <fo:inline font-style="italic"><fo:inline font-family="monospace">dbg:fun2ms</fo:inline></fo:inline> 
	  continually).</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Use 
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ttb:list_history/0</fo:inline></fo:inline> 
      to see the content of the history buffer and 
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ttb:run_history/1</fo:inline></fo:inline>
      to re-execute one of the entries.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The main purpose of the history buffer is the possibility to
      create configuration files. Any function stored in the history
      buffer can be written to a configuration file and used for
      creating a specific configuration at any time with a single
      function call.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A configuration file is created or extended with
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ttb:write_config/2,3</fo:inline></fo:inline>. 
      Configuration files are binary files
      and can therefore only be read and written with functions provided
      by <fo:inline font-family="monospace">ttb</fo:inline>.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The complete content of the history buffer can be written to a
      configuration file by calling
      <fo:inline font-family="monospace">ttb:write_config(ConfigFile,all)</fo:inline>. Selected entries from 
      the history can be written by calling
      <fo:inline font-family="monospace">ttb:write_config(ConfigFile,NumList)</fo:inline>, where
      <fo:inline font-family="monospace">NumList</fo:inline> is a list of integers pointing out the history
      entries to write. Moreover, the history buffer is always dumped
      to <fo:inline font-family="monospace">ttb_last_config</fo:inline> when <fo:inline font-family="monospace">ttb:stop/0,1</fo:inline> is called.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">User-defined entries can also be written to a configuration file 
      by calling function
      <fo:inline font-family="monospace">ttb:write_config(ConfigFile,ConfigList)</fo:inline>, where
      <fo:inline font-family="monospace">ConfigList</fo:inline> is a list of <fo:inline font-family="monospace">{Module,Function,Args}</fo:inline>.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Any existing file <fo:inline font-family="monospace">ConfigFile</fo:inline> is deleted and a new file
      is created when <fo:inline font-family="monospace">write_config/2</fo:inline> is called. Option
      <fo:inline font-family="monospace">append</fo:inline> can be used to add something at the end
      of an existing configuration file, for example,
      <fo:inline font-family="monospace">ttb:write_config(ConfigFile,What,[append])</fo:inline>.
      </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See the content of the history buffer:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
(tiger@durin)191&gt; <fo:inline font-weight="bold">ttb:tracer().</fo:inline>
{ok,[tiger@durin]}
(tiger@durin)192&gt; <fo:inline font-weight="bold">ttb:p(self(),[garbage_collection,call]).</fo:inline>
{ok,{[&lt;0.1244.0&gt;],[garbage_collection,call]}}
(tiger@durin)193&gt; <fo:inline font-weight="bold">ttb:tp(ets,new,2,[]).</fo:inline>
{ok,[{matched,1}]}
(tiger@durin)194&gt; <fo:inline font-weight="bold">ttb:list_history().</fo:inline>
[{1,{ttb,tracer,[tiger@durin,[]]}},
 {2,{ttb,p,[&lt;0.1244.0&gt;,[garbage_collection,call]]}},
 {3,{ttb,tp,[ets,new,2,[]]}}]</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Execute an entry from the history buffer:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
(tiger@durin)195&gt; <fo:inline font-weight="bold">ttb:ctp(ets,new,2).</fo:inline>
{ok,[{matched,1}]}
(tiger@durin)196&gt; <fo:inline font-weight="bold">ttb:list_history().</fo:inline>
[{1,{ttb,tracer,[tiger@durin,[]]}},
 {2,{ttb,p,[&lt;0.1244.0&gt;,[garbage_collection,call]]}},
 {3,{ttb,tp,[ets,new,2,[]]}},
 {4,{ttb,ctp,[ets,new,2]}}]
(tiger@durin)197&gt; <fo:inline font-weight="bold">ttb:run_history(3).</fo:inline>
ttb:tp(ets,new,2,[]) -&gt;
{ok,[{matched,1}]}</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Write the content of the history buffer to a configuration
        file:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
(tiger@durin)198&gt; <fo:inline font-weight="bold">ttb:write_config("myconfig",all).</fo:inline>
ok
(tiger@durin)199&gt; <fo:inline font-weight="bold">ttb:list_config("myconfig").</fo:inline>
[{1,{ttb,tracer,[tiger@durin,[]]}},
 {2,{ttb,p,[&lt;0.1244.0&gt;,[garbage_collection,call]]}},
 {3,{ttb,tp,[ets,new,2,[]]}},
 {4,{ttb,ctp,[ets,new,2]}},
 {5,{ttb,tp,[ets,new,2,[]]}}]</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Extend an existing configuration:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
(tiger@durin)200&gt; <fo:inline font-weight="bold">ttb:write_config("myconfig",[{ttb,tp,[ets,delete,1,[]]}],
[append]).</fo:inline>
ok
(tiger@durin)201&gt; <fo:inline font-weight="bold">ttb:list_config("myconfig").</fo:inline>
[{1,{ttb,tracer,[tiger@durin,[]]}},
 {2,{ttb,p,[&lt;0.1244.0&gt;,[garbage_collection,call]]}},
 {3,{ttb,tp,[ets,new,2,[]]}},
 {4,{ttb,ctp,[ets,new,2]}},
 {5,{ttb,tp,[ets,new,2,[]]}},
 {6,{ttb,tp,[ets,delete,1,[]]}}]</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Go back to a previous configuration after stopping Trace Tool
        Builder:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
(tiger@durin)202&gt; <fo:inline font-weight="bold">ttb:stop().</fo:inline>
ok
(tiger@durin)203&gt; <fo:inline font-weight="bold">ttb:run_config("myconfig").</fo:inline>
ttb:tracer(tiger@durin,[]) -&gt;
{ok,[tiger@durin]}

ttb:p(&lt;0.1244.0&gt;,[garbage_collection,call]) -&gt;
{ok,{[&lt;0.1244.0&gt;],[garbage_collection,call]}}

ttb:tp(ets,new,2,[]) -&gt;
{ok,[{matched,1}]}

ttb:ctp(ets,new,2) -&gt;
{ok,[{matched,1}]}

ttb:tp(ets,new,2,[]) -&gt;
{ok,[{matched,1}]}

ttb:tp(ets,delete,1,[]) -&gt;
{ok,[{matched,1}]}

ok</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Write selected entries from the history buffer to a
        configuration file:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
(tiger@durin)204&gt; <fo:inline font-weight="bold">ttb:list_history().</fo:inline>
[{1,{ttb,tracer,[tiger@durin,[]]}},
 {2,{ttb,p,[&lt;0.1244.0&gt;,[garbage_collection,call]]}},
 {3,{ttb,tp,[ets,new,2,[]]}},
 {4,{ttb,ctp,[ets,new,2]}},
 {5,{ttb,tp,[ets,new,2,[]]}},
 {6,{ttb,tp,[ets,delete,1,[]]}}]
(tiger@durin)205&gt; <fo:inline font-weight="bold">ttb:write_config("myconfig",[1,2,3,6]).</fo:inline>
ok
(tiger@durin)206&gt; <fo:inline font-weight="bold">ttb:list_config("myconfig").</fo:inline>
[{1,{ttb,tracer,[tiger@durin,[]]}},
 {2,{ttb,p,[&lt;0.1244.0&gt;,[garbage_collection,call]]}},
 {3,{ttb,tp,[ets,new,2,[]]}},
 {4,{ttb,tp,[ets,delete,1,[]]}}]
(tiger@durin)207&gt;</fo:block>
  <fo:block id="idp1250016" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.10 
      Sequential Tracing</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To learn what sequential tracing is and how it can be used,
      see the Reference Manual for
      <fo:inline font-style="italic"><fo:inline font-family="monospace">seq_trace</fo:inline></fo:inline>.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The support for sequential tracing provided by Trace Tool
      Builder includes the following:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Initiation of the system tracer. This is automatically
       done when a trace port is started with 
      <fo:inline font-style="italic"><fo:inline font-family="monospace">ttb:tracer/0,1,2</fo:inline></fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Creation of match specifications that activates
       sequential tracing.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starting sequential tracing requires that a tracer is
      started with function <fo:inline font-family="monospace">ttb:tracer/0,1,2</fo:inline>. Sequential
      tracing can then be started in either of the following ways:
      </fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Through a trigger function with a match specification 
	created with 
	<fo:inline font-style="italic"><fo:inline font-family="monospace">ttb:seq_trigger_ms/0,1</fo:inline></fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Directly by using module
	<fo:inline font-style="italic"><fo:inline font-family="monospace">seq_trace</fo:inline></fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example 1:</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the following example, function
        <fo:inline font-family="monospace">dbg:get_tracer/0</fo:inline> is used as trigger for sequential
        tracing:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
(tiger@durin)110&gt; <fo:inline font-weight="bold">ttb:tracer().</fo:inline>
{ok,[tiger@durin]}
(tiger@durin)111&gt; <fo:inline font-weight="bold">ttb:p(self(),call).</fo:inline>
{ok,{[&lt;0.158.0&gt;],[call]}}
(tiger@durin)112&gt; <fo:inline font-weight="bold">ttb:tp(dbg,get_tracer,0,ttb:seq_trigger_ms(send)).</fo:inline>
{ok,[{matched,1},{saved,1}]}
(tiger@durin)113&gt; <fo:inline font-weight="bold">dbg:get_tracer(), seq_trace:reset_trace().</fo:inline>
true
(tiger@durin)114&gt; <fo:inline font-weight="bold">ttb:stop(format).</fo:inline>
({&lt;0.158.0&gt;,{shell,evaluator,3},tiger@durin}) call dbg:get_tracer()
SeqTrace [0]: ({&lt;0.158.0&gt;,{shell,evaluator,3},tiger@durin})
{&lt;0.237.0&gt;,dbg,tiger@durin} ! {&lt;0.158.0&gt;,{get_tracer,tiger@durin}}
[Serial: {0,1}]
SeqTrace [0]: ({&lt;0.237.0&gt;,dbg,tiger@durin})
{&lt;0.158.0&gt;,{shell,evaluator,3},tiger@durin} ! {dbg,{ok,#Port&lt;0.222&gt;}}
[Serial: {1,2}]
ok
(tiger@durin)116&gt;</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example 2:</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starting sequential tracing with a trigger is more
        useful if the trigger function is not called directly from the
        shell, but rather implicitly within a larger system. When
        calling a function from the shell, it is simpler to start
        sequential tracing directly, for example, as follows:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
(tiger@durin)116&gt; <fo:inline font-weight="bold">ttb:tracer().</fo:inline>
{ok,[tiger@durin]}
(tiger@durin)117&gt; <fo:inline font-weight="bold">seq_trace:set_token(send,true), dbg:get_tracer(),
seq_trace:reset_trace().</fo:inline>
true
(tiger@durin)118&gt; <fo:inline font-weight="bold">ttb:stop(format).</fo:inline>
SeqTrace [0]: ({&lt;0.158.0&gt;,{shell,evaluator,3},tiger@durin})
{&lt;0.246.0&gt;,dbg,tiger@durin} ! {&lt;0.158.0&gt;,{get_tracer,tiger@durin}}
[Serial: {0,1}]
SeqTrace [0]: ({&lt;0.246.0&gt;,dbg,tiger@durin})
{&lt;0.158.0&gt;,{shell,evaluator,3},tiger@durin} ! {dbg,{ok,#Port&lt;0.229&gt;}}
[Serial: {1,2}]
ok
(tiger@durin)120&gt;</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In both previous examples, <fo:inline font-family="monospace">seq_trace:reset_trace/0</fo:inline>
        resets the trace token immediately after the traced function
        to avoid many trace messages because of the printouts in
        the Erlang shell.
        </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All functions in module <fo:inline font-family="monospace">seq_trace</fo:inline>, except
        <fo:inline font-family="monospace">set_system_tracer/1</fo:inline>, can be used after the trace port
        is started with <fo:inline font-family="monospace">ttb:tracer/0,1,2</fo:inline>.
        </fo:block>
  <fo:block id="idp1270992" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.11 
      Multipurpose Trace Tool</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Module <fo:inline font-family="monospace">multitrace</fo:inline> in
      directory <fo:inline font-family="monospace">src</fo:inline> of the Observer application provides a
      small tool with three possible trace settings. The trace messages
      are written to binary files, which can be formatted with
      function <fo:inline font-family="monospace">multitrace:format/1,2</fo:inline>:
      </fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">multitrace:debug(What)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Start calltrace on all processes and trace the specified
       function(s). The format handler used is
      <fo:inline font-family="monospace">multitrace:handle_debug/4</fo:inline> that prints each call and
       returns. <fo:inline font-family="monospace">What</fo:inline> must be an item or a list of items to trace,
       specified on the format <fo:inline font-family="monospace">{Module,Function,Arity}</fo:inline>,
      <fo:inline font-family="monospace">{Module,Function}</fo:inline>, or only <fo:inline font-family="monospace">Module</fo:inline>.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">multitrace:gc(Procs)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Trace garbage collection on the specified process(es). The
       format handler used is <fo:inline font-family="monospace">multitrace:handle_gc/4</fo:inline> that
       prints start, stop, and the time spent for each garbage collection.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">multitrace:schedule(Procs)</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Trace in-scheduling and out-scheduling on the specified process(es). 
       The format handler used is <fo:inline font-family="monospace">multitrace:handle_schedule/4</fo:inline> that
       prints each in-scheduling and out-scheduling with process, time-stamp, and
       current function. It also prints the total time each traced
       process was scheduled in.</fo:block></fo:block></fo:block-container>
    </fo:block>
  <fo:block id="idp1285472" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.4  Erlang Top</fo:marker>1.4  Erlang Top</fo:block><fo:block id="idp1287968" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.1 
      Introduction</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Erlang Top, <fo:inline font-family="monospace">etop</fo:inline>, is a tool for presenting information
      about Erlang processes similar to the information presented by
      <fo:inline font-family="monospace">top</fo:inline> in UNIX.
      </fo:block>
  <fo:block id="idp1290304" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.2 
      Getting Started</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Start Erlang Top in either of the following ways:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Use script <fo:inline font-family="monospace">etop</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Use batch file <fo:inline font-family="monospace">etop.bat</fo:inline>, for example, 
	<fo:inline font-family="monospace">etop -node tiger@durin</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
  <fo:block id="idp1294640" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.3 
      Output</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The output from Erlang Top is as follows:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
========================================================================================
 tiger@durin                                                               13:40:32
 Load:  cpu         0               Memory:  total        1997    binary         33
        procs     197                        processes       0    code          173
        runq      135                        atom         1002    ets            95

Pid            Name or Initial Func    Time    Reds  Memory    MsgQ Current Function
----------------------------------------------------------------------------------------
&lt;127.23.0&gt;     code_server                0   59585   78064       0 gen_server:loop/6   
&lt;127.21.0&gt;     file_server_2              0   36380   44276       0 gen_server:loop/6   
&lt;127.2.0&gt;      erl_prim_loader            0   27962    3740       0 erl_prim_loader:loop
&lt;127.9.0&gt;      kernel_sup                 0    6998    4676       0 gen_server:loop/6   
&lt;127.17.0&gt;     net_kernel                62    6018    3136       0 gen_server:loop/6   
&lt;127.0.0&gt;      init                       0    4156    4352       0 init:loop/1         
&lt;127.16.0&gt;     auth                       0    1765    1264       0 gen_server:loop/6   
&lt;127.18.0&gt;     inet_tcp_dist:accept       0     660    1416       0 prim_inet:accept0/2 
&lt;127.5.0&gt;      application_controll       0     569    6756       0 gen_server:loop/6   
&lt;127.137.0&gt;    net_kernel:do_spawn_       0     553    5840       0 dbg:do_relay_1/1    
========================================================================================
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The header includes some system information:
      </fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Load</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block space-after="0.25em" space-before="0.25em">
       <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">cpu</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Runtime/Wallclock</fo:inline>, that is, the percentage of time 
       where the node has been active.</fo:block></fo:block></fo:block-container>
       <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">procs</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The number of processes on the node.</fo:block></fo:block></fo:block-container>
       <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">runq</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The number of processes that are ready to run.</fo:block></fo:block></fo:block-container>
	</fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Memory</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The memory allocated by the node in kilobytes.</fo:block></fo:block></fo:block-container>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For each process the following information is presented:
      </fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Time</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The runtime for the process, that is, the time that the process 
      has been scheduled in.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Reds</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The number of reductions executed on the process.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Memory</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The size of the process in bytes, obtained by a
       call to <fo:inline font-family="monospace">process_info(Pid,memory)</fo:inline>.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">MsgQ</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The length of the message queue for the process.</fo:block></fo:block></fo:block-container>
    </fo:block>
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Time</fo:inline> and <fo:inline font-weight="bold">Reds</fo:inline> can be presented as
        accumulated values or as values since the last update.</fo:block>
    </fo:block>
  <fo:block id="idp1313648" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.4 
      Configuration</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All configuration parameters can be set at start by adding
      <fo:inline font-family="monospace">-OptName Value</fo:inline> to the command line, for example:</fo:block> 
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% <fo:inline font-weight="bold">etop -node tiger@durin -setcookie mycookie -lines 15</fo:inline></fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A list of all valid Erlang Top configuration parameters is available in
      module <fo:inline font-style="italic"><fo:inline font-family="monospace">etop</fo:inline></fo:inline>.
      </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The parameters <fo:inline font-family="monospace">lines</fo:inline>, <fo:inline font-family="monospace">interval</fo:inline>, <fo:inline font-family="monospace">accumulate</fo:inline>,
      and <fo:inline font-family="monospace">sort</fo:inline> can be changed during runtime with function 
      <fo:inline font-style="italic"><fo:inline font-family="monospace">etop:config/2</fo:inline></fo:inline>.
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Change configuration parameter <fo:inline font-family="monospace">lines</fo:inline> with text-based presentation. 
      Before the change, 10 lines are presented as follows:</fo:block>
         <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
========================================================================================
 tiger@durin                                                               10:12:39
 Load:  cpu         0               Memory:  total        1858    binary         33
        procs     191                        processes       0    code          173
        runq        2                        atom         1002    ets            95

Pid            Name or Initial Func    Time    Reds  Memory    MsgQ Current Function
----------------------------------------------------------------------------------------
&lt;127.23.0&gt;     code_server                0   60350   71176       0 gen_server:loop/6   
&lt;127.21.0&gt;     file_server_2              0   36380   44276       0 gen_server:loop/6   
&lt;127.2.0&gt;      erl_prim_loader            0   27962    3740       0 erl_prim_loader:loop
&lt;127.17.0&gt;     net_kernel                 0   13808    3916       0 gen_server:loop/6   
&lt;127.9.0&gt;      kernel_sup                 0    6998    4676       0 gen_server:loop/6   
&lt;127.0.0&gt;      init                       0    4156    4352       0 init:loop/1         
&lt;127.18.0&gt;     inet_tcp_dist:accept       0    2196    1416       0 prim_inet:accept0/2 
&lt;127.16.0&gt;     auth                       0    1893    1264       0 gen_server:loop/6   
&lt;127.43.0&gt;     ddll_server                0     582    3744       0 gen_server:loop/6   
&lt;127.5.0&gt;      application_controll       0     569    6756       0 gen_server:loop/6   
========================================================================================      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Function <fo:inline font-family="monospace">etop:config/2</fo:inline> is called to change the number of showed 
      lines to 5:</fo:block>

	 <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">etop:config(lines,5).</fo:inline>
ok</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">After the change, 5 lines are presented as follows:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
(etop@durin)2&gt; 
========================================================================================
 tiger@durin                                                               10:12:44
 Load:  cpu         0               Memory:  total        1859    binary         33
        procs     192                        processes       0    code          173
        runq        2                        atom         1002    ets            95

Pid            Name or Initial Func    Time    Reds  Memory    MsgQ Current Function
----------------------------------------------------------------------------------------
&lt;127.17.0&gt;     net_kernel               183      70    4092       0 gen_server:loop/6   
&lt;127.335.0&gt;    inet_tcp_dist:do_acc     141      22    1856       0 dist_util:con_loop/9
&lt;127.19.0&gt;     net_kernel:ticker/2      155       6    1244       0 net_kernel:ticker1/2
&lt;127.341.0&gt;    net_kernel:do_spawn_       0       0    5840       0 dbg:do_relay_1/1    
&lt;127.43.0&gt;     ddll_server                0       0    3744       0 gen_server:loop/6   
========================================================================================
      </fo:block>
  <fo:block id="idp1328784" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.5 
      Print to File</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">At any time, the current Erlang Top display can be dumped to a
      text file with function 
      <fo:inline font-style="italic"><fo:inline font-family="monospace">etop:dump/1</fo:inline></fo:inline>.
      </fo:block>
  <fo:block id="idp1331056" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.6 
      Stop</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To stop Erlang Top, use function 
    <fo:inline font-style="italic"><fo:inline font-family="monospace">etop:stop/0</fo:inline></fo:inline>.
    </fo:block>
  <fo:block id="idp1337184" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.5  Crashdump Viewer</fo:marker>1.5  Crashdump Viewer</fo:block><fo:block id="idp1339680" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.1 
      Introduction</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Crashdump Viewer is a WxWidgets based tool for browsing
    Erlang crashdumps.
    </fo:block>
  <fo:block id="idp1341088" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.2 
      Getting Started</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The easiest way to start Crashdump Viewer is to use
    shell script <fo:inline font-family="monospace">cdv</fo:inline> with the full path to the
    Erlang crashdump as argument. The script is located in
    directory <fo:inline font-family="monospace">priv</fo:inline> of the Observer application. This starts the
    Crashdump Viewer GUI and loads the specified file. If no filename is
    specified, a file dialog is opened where the file can be
    selected.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Under Windows, the batch file <fo:inline font-family="monospace">cdv.bat</fo:inline> can be used.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Crashdump Viewer can also be started from
    an Erlang node by calling <fo:inline font-style="italic">crashdump_viewer:start/0</fo:inline>
    or <fo:inline font-style="italic">crashdump_viewer:start/1</fo:inline>.</fo:block>
  <fo:block id="idp1346560" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.3 
      GUI</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The GUI main window is opened when Crashdump Viewer has loaded a
    crashdump. It contains a title bar, a menu bar,
    information tabs, and a status bar.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The title bar shows the name of the currently loaded
    crashdump.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The menu bar contains a <fo:inline font-weight="bold">File</fo:inline> menu and a <fo:inline font-weight="bold">Help</fo:inline>
    menu. From the <fo:inline font-weight="bold">File</fo:inline> menu, a new crashdump can be loaded or 
    the tool can be terminated. From the <fo:inline font-weight="bold">Help</fo:inline> menu, this User's Guide 
    and section "How to interpret the Erlang crash dumps" from the
    ERTS application can be opened. "How to interpret
    the Erlang crash dumps" describes the raw crashdumps in
    detail and includes information about each
    field in the information pages."How to interpret the Erlang crash dumps" 
    is also available in the OTP online documentation.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The status bar at the bottom of the window shows a warning
    if the currently loaded dump is truncated.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The center area of the main window contains the information
    tabs. Each tab displays information about a specific item or a
    list of items. Select a tab by clicking the tab title.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">From tabs displaying lists of items, for example, the
    <fo:inline font-weight="bold">Processes</fo:inline> tab or the <fo:inline font-weight="bold">Ports</fo:inline> tab, a new window with 
    more information can be opened by double-clicking a row or by right-
    clicking the row and selecting an item from the drop-down
    menu. The new window is called a detail window. Detail windows can
    be opened for processes, ports, nodes, and modules.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The information shown in a detail window can contain
    links to processes or ports. Clicking one of these links opens
    the detail window for the process or port in question. If the
    process or port resides on a remote node, no
    information is available. Clicking the link then displays a dialog
    where you can choose to open the detail window for the
    remote node.
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Some tabs contain a left-hand menu where subitems of
    the information area can be selected. Click one of the
    rows, and the information is displayed in the right-hand
    information area.</fo:block>
  <fo:block id="idp1355504" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.4 
      Tab Content</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each tab in the main window contains an information
    page. If no information is found for an item, the page is
    empty. The reason for not finding information about an item
    can be the following:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>It is a dump from an old OTP release in which this item was not written.</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The item was not present in the system at the point of failure.</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The dump is truncated. In this case, a warning is displayed in the
       status bar of the main window.</fo:block></fo:list-item-body></fo:list-item>
     </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Even if some information about an item exists, there can be
    empty fields if the dump originates from an old OTP release.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The value <fo:inline font-family="monospace">-1</fo:inline> in any field means "unknown", and in most
    cases it means that the dump was truncated somewhere around this
    field.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following sections describe some of the fields in the
    information tabs. These are fields that do not exist
    in the raw crashdump, or in some way differ from the fields in
    the raw crashdump. For details about other fields, see
    the 
    <fo:inline font-style="italic">ERTS User's Guide</fo:inline>, section
    "How to interpret the Erlang crash dumps". That section can also
    be opened from the <fo:inline font-weight="bold">Help</fo:inline> menu in the main window.
    There are also links from the following sections to related information 
    in "How to interpret the Erlang crash dumps".</fo:block>
  <fo:block id="idp1363808" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.5 
      General Tab</fo:block>
    
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tab <fo:inline font-weight="bold">General</fo:inline> shows a short overview
    of the dump.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following fields are not described in the ERTS
    User's Guide:</fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Crashdump created on</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Time of failure.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Memory allocated</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The total number of bytes allocated, equivalent to
      <fo:inline font-family="monospace">c:memory(total)</fo:inline>.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Memory maximum</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The maximum number of bytes that has been allocated during
      the lifetime of the originating node. This is only shown if
      the Erlang runtime system is run instrumented.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Atoms</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If available in the dump, this is the total number of
      atoms in the atom table. If the size of the atom table is
      unavailable, the number of atoms visible in the dump is
      displayed.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Processes</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The number of processes visible in the dump.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ETS tables</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The number of ETS tables visible in the dump.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Funs</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The number of funs visible in the dump.</fo:block></fo:block></fo:block-container>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details, see
      <fo:inline font-style="italic">General Information</fo:inline>
      in section "How to Interpret the Erlang Crash Dumps" in ERTS.
    </fo:block>
  <fo:block id="idp1377360" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.6 
      Processes Tab</fo:block>
    
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tab <fo:inline font-weight="bold">Processes</fo:inline> shows a list of all processes
    found in the crashdump, including brief information about
    each process. By default, the processes are sorted by their
    pids. To sort by another topic, click the desired column heading.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Column <fo:inline font-weight="bold">Memory</fo:inline> shows the 'Memory' field that was
    added to crashdumps in Erlang/OTP R16B01. This is the total amount of memory
    used by the process. For crashdumps from earlier releases, this
    column shows the 'Stack+heap' field. The value is always in bytes.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To view detailed information about a specific process, double-
    click the row in the list, or right-click the row and select
    <fo:inline font-weight="bold">Properties for &lt;pid&gt;</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details, see
      <fo:inline font-style="italic">Process Information</fo:inline>
      in section "How to Interpret the Erlang Crash Dumps" in ERTS.
    </fo:block>
  <fo:block id="idp1383312" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.7 
      Ports Tab</fo:block>
    
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tab <fo:inline font-weight="bold">Ports</fo:inline> is similar to the <fo:inline font-weight="bold">Processes</fo:inline>
    tab, except it lists all ports found in the crashdump.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To view more details about a specific port, double-click the row
    or right-click it and select <fo:inline font-weight="bold">Properties for &lt;port&gt;</fo:inline>. From
    the right-click menu, you can also select <fo:inline font-weight="bold">Properties for
    &lt;pid&gt;</fo:inline>, where <fo:inline font-family="monospace">&lt;pid&gt;</fo:inline> is the process connected to the
    port.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details, see
      <fo:inline font-style="italic">Port Information</fo:inline>
      in section "How to Interpret the Erlang Crash Dumps" in ERTS.
    </fo:block>
  <fo:block id="idp1389744" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.8 
      ETS Tables Tab</fo:block>
    
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tab <fo:inline font-weight="bold">ETS Tables</fo:inline> shows all ETS table information
    found in the dump. <fo:inline font-weight="bold">Id</fo:inline> is the same as the 'Table' field
    in the raw crashdump. <fo:inline font-weight="bold">Memory</fo:inline> is the 'Words' field from the
    raw crashdump translated into bytes. For tree tables, there is
    no value in the 'Objects' field.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To open the detailed information page about the table, double-
    click, or right-click the row and select <fo:inline font-weight="bold">Properties for
    'Identifier'</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To open the detailed information page about the owner process
    of an ETS table, right-click the row and select <fo:inline font-weight="bold">Properties for
    &lt;pid&gt;</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details, see
      <fo:inline font-style="italic">ETS Tables</fo:inline>
      in section "How to Interpret the Erlang Crash Dumps" in ERTS.
    </fo:block>
  <fo:block id="idp1396464" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.9 
      Timers Tab</fo:block>
    
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tab <fo:inline font-weight="bold">Timers</fo:inline> shows all timer information found in
    the dump.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To open the detailed information page about the owner process
    of a timer, right-click the row and select <fo:inline font-weight="bold">Properties for
    &lt;pid&gt;</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Double-clicking a row in the <fo:inline font-weight="bold">Timers</fo:inline> tab has no effect.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details, see
      <fo:inline font-style="italic">Timers</fo:inline>
      in section "How to Interpret the Erlang Crash Dumps" in ERTS.
    </fo:block>
  <fo:block id="idp1402000" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.10 
      Schedulers Tab</fo:block>
    
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tab <fo:inline font-weight="bold">Schedulers</fo:inline> shows all scheduler information
    found in the dump.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To open the detailed information page about the scheduler,
    double-click, or right-click the row and select <fo:inline font-weight="bold">Properties for
    'Identifier'</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details, see
      <fo:inline font-style="italic">Scheduler Information</fo:inline>
      in section "How to Interpret the Erlang Crash Dumps" in ERTS.
    </fo:block>
  <fo:block id="idp1406640" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.11 
      Funs Tab</fo:block>
    
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tab <fo:inline font-weight="bold">Funs</fo:inline> shows all fun information found in the
    dump.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To open the detailed information page about the module to which
    the fun belongs, right-click the row and select <fo:inline font-weight="bold">Properties for
    &lt;mod&gt;</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Double-clicking a row in the <fo:inline font-weight="bold">Funs</fo:inline> tab has no effect.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details, see
      <fo:inline font-style="italic">Fun Information</fo:inline>
      in section "How to Interpret the Erlang Crash Dumps" in ERTS.
    </fo:block>
  <fo:block id="idp1412176" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.12 
      Atoms Tab</fo:block>
    
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tab <fo:inline font-weight="bold">Atoms</fo:inline> lists all atoms found in the dump. By
    default the atoms are sorted in creation order from first to
    last. This is opposite of the raw crashdump where atoms are listed
    from last to first, meaning that if the dump was truncated in the
    middle of the atom list, only the last created atoms are visible
    in the <fo:inline font-weight="bold">Atoms</fo:inline> tab.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details, see
      <fo:inline font-style="italic">Atoms</fo:inline>
      in section "How to Interpret the Erlang Crash Dumps" in ERTS.
    </fo:block>
  <fo:block id="idp1416512" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.13 
      Nodes Tab</fo:block>
    
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tab <fo:inline font-weight="bold">Nodes</fo:inline> shows a list of all external Erlang
    nodes that are referenced from the crashdump.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the page is empty, it means either of the following:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The crashed node is not distributed.</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The crashed node is distributed but has no references to other nodes.</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The dump is truncated.</fo:block></fo:list-item-body></fo:list-item>
     </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the node is distributed, all referenced nodes are
    visible. Column <fo:inline font-weight="bold">Connection type</fo:inline> shows if the node
    is visible, hidden, or not connected. Visible nodes are alive nodes
    with a living connection to the originating node. Hidden nodes are
    the same as visible nodes, except they are started with flag
    <fo:inline font-family="monospace">-hidden</fo:inline>. Not connected nodes are nodes that are not
    connected to the originating node anymore, but references
    (that is, process or port identifiers) exist.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To see more detailed information about a node, double-click the
    row, or right-click the row and select <fo:inline font-weight="bold">Properties for node
    &lt;node&gt;</fo:inline>. From the right-click menu, you can also select
    <fo:inline font-weight="bold">Properties for &lt;port&gt;</fo:inline>, to open the detailed information
    window for the controlling port.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the detailed information window for a node, any existing
    links and monitors between processes on the originating node and
    the connected node are displayed. <fo:inline font-weight="bold">Extra Info</fo:inline> can contain
    debug information (that is, special information written if the
    emulator is debug-compiled) or error information.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details, see
      <fo:inline font-style="italic">Distribution Information</fo:inline>
      in section "How to Interpret the Erlang Crash Dumps" in ERTS.
    </fo:block>
  <fo:block id="idp1427248" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.14 
      Modules Tab</fo:block>
    
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tab <fo:inline font-weight="bold">Modules</fo:inline> lists all modules loaded
    on the originating node, and the current code size. If old
    code exists, the old size is also shown.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To view detailed information about a specific module, double-
    click the row, or right-click it and select <fo:inline font-weight="bold">Properties for
    &lt;mod&gt;</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details, see
      <fo:inline font-style="italic">Loaded Module Information</fo:inline>
      in section "How to Interpret the Erlang Crash Dumps" in ERTS.
    </fo:block>
  <fo:block id="idp1431984" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.15 
      Memory Tab</fo:block>
    
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tab <fo:inline font-weight="bold">Memory</fo:inline> shows memory and allocator
    information. From the left-hand menu you can select the following:</fo:block>

      <fo:block space-after="0.25em" space-before="0.25em">
	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Memory</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See
	<fo:inline font-style="italic">Memory Information</fo:inline>
	in section "How to Interpret the Erlang Crash Dumps" in ERTS.</fo:block></fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Allocator Summary</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This page presents a summary of values from all allocators underneath it.</fo:block></fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">&lt;Allocator&gt;</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">One entry per allocator. See
	<fo:inline font-style="italic">Allocator</fo:inline>
	in section "How to Interpret the Erlang Crash Dumps" in ERTS.</fo:block></fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Allocated Areas</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See
	<fo:inline font-style="italic">Allocated Areas</fo:inline>
	in section "How to Interpret the Erlang Crash Dumps" in ERTS.</fo:block></fo:block></fo:block-container>

      </fo:block>
  <fo:block id="idp1441888" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.5.16 
      Internal Tables Tab</fo:block>
    
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On tab <fo:inline font-weight="bold">Internal Tables</fo:inline> you can from the
    left-hand menu select <fo:inline font-weight="bold">Hash Tables</fo:inline>, <fo:inline font-weight="bold">Index Tables</fo:inline>, 
    or <fo:inline font-weight="bold">Internal ETS Tables</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details, see
      <fo:inline font-style="italic">Internal Table Information</fo:inline>
      in section "How to Interpret the Erlang Crash Dumps" in ERTS.
    </fo:block>
  <fo:block id="idp114320" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">2   
      Reference Manual</fo:block>
     <fo:block page-break-before="always" id="idp396800" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">Observer</fo:marker>Observer</fo:block>Application</fo:block>
  <fo:block/>
  Observer
  The Observer Application
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Observer application contains tools for tracing and
    investigation of distributed systems.</fo:block>
  

  <fo:block id="idp380400" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Configuration</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">No configuration parameters are available for
      this application.
      </fo:block>
  

<fo:block page-break-before="always" id="idp419776" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">observer</fo:marker>observer</fo:block>Erlang module</fo:block>
  <fo:block/>
  observer
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Observer is a graphical tool for observing the characteristics of
    Erlang systems. The tool Observer displays system information, application
    supervisor trees, process information, ETS tables, Mnesia tables,
    and contains a front end for Erlang tracing with module
    <fo:inline font-style="italic"><fo:inline font-family="monospace">ttb</fo:inline></fo:inline>.
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details about how to get started, see the
    <fo:inline font-style="italic"><fo:inline font-family="monospace">User's Guide</fo:inline></fo:inline>.</fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp286896">start() -&gt; ok</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts the Observer GUI.
	To stop the tool, close the window.
	</fo:block>
      </fo:block>
  
<fo:block page-break-before="always" id="idp448480" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">ttb</fo:marker>ttb</fo:block>Erlang module</fo:block>
  <fo:block/>
  ttb
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Trace Tool Builder, <fo:inline font-family="monospace">ttb</fo:inline>, is a base for building trace
      tools for distributed systems.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When using <fo:inline font-family="monospace">ttb</fo:inline>, do not use module <fo:inline font-family="monospace">dbg</fo:inline> in application
      Runtime_Tools in parallel.</fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp401168">start_trace(Nodes, Patterns, FlagSpec, Opts) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = see p/2</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Nodes = see tracer/2</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Patterns = [tuple()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FlagSpec = {Procs, Flags}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Proc = see p/2</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Flags = see p/2</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opts = see tracer/2</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is a shortcut allowing to start a trace with one command. Each
          tuple in <fo:inline font-family="monospace">Patterns</fo:inline> is converted to a list, which in turn is passed to
          <fo:inline font-family="monospace">ttb:tpl/2,3,4</fo:inline>.</fo:block>
         <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The call:</fo:block>
	 <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">ttb:start_trace([Node, OtherNode],
                  [{mod, foo, []}, {mod, bar, 2}],
                  {all, call},
                  [{file, File}, {handler,{fun myhandler/4, S}}]).</fo:inline></fo:block>
         <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"> is equivalent to:</fo:block>
	 <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
&gt; <fo:inline font-weight="bold">ttb:start_trace([Node, OtherNode],
                  [{file, File}, {handler,{fun myhandler/4, S}}]),
ttb:tpl(mod, foo, []),
ttb:tpl(mod, bar, 2, []),
ttb:p(all, call).</fo:inline></fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp960848">tracer() -&gt; Result</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-family="monospace">tracer(node())</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp670992">tracer(Shortcut) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Shortcut = shell | dbg</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Handy shortcuts for common tracing settings.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">shell</fo:inline> is equivalent to <fo:inline font-family="monospace">tracer(node(),[{file, {local, "ttb"}}, shell])</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">dbg</fo:inline> is equivalent to <fo:inline font-family="monospace">tracer(node(),[{shell, only}])</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp450752">tracer(Nodes) -&gt; Result</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-family="monospace">tracer(Nodes,[])</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp412160">tracer(Nodes,Opts) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = {ok, ActivatedNodes} | {error,Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Nodes   = atom() | [atom()] | all | existing | new</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opts = Opt | [Opt]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opt = {file,Client} | {handler, FormatHandler} | {process_info,PI} |
          shell | {shell, ShellSpec} | {timer, TimerSpec} |
	  {overload_check, {MSec, Module, Function}} |
	{flush, MSec} | resume | {resume, FetchTimeout} |
	{queue_size, QueueSize}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TimerSpec = MSec | {MSec, StopOpts}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MSec = FetchTimeout = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = Function = atom() </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">StopOpts = see stop/2</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Client = File | {local, File}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">File = Filename | Wrap</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Filename = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Wrap = {wrap,Filename} | {wrap,Filename,Size,Count}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FormatHandler = See format/2</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PI = true | false </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ShellSpec = true | false | only</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">QueueSize = non_neg_integer()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts a file trace port on all specified nodes
          and points the system tracer for sequential tracing to
          the same port.
          </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Options:</fo:inline></fo:block>
	<fo:block space-after="0.25em" space-before="0.25em">
       <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Filename</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The specified <fo:inline font-family="monospace">Filename</fo:inline> is prefixed with the node name. 
       Default <fo:inline font-family="monospace">Filename</fo:inline> is <fo:inline font-family="monospace">ttb</fo:inline>.</fo:block></fo:block></fo:block-container>
       <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">File={wrap,Filename,Size,Count}</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Can be used if the size of the trace logs must be limited. 
       Default values are
       <fo:inline font-family="monospace">Size=128*1024</fo:inline> and <fo:inline font-family="monospace">Count=8</fo:inline>.</fo:block></fo:block></fo:block-container>
       <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">Client</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When tracing diskless nodes, <fo:inline font-family="monospace">ttb</fo:inline> must be started
          from an external "trace control node" with disk access, and
          <fo:inline font-family="monospace">Client</fo:inline> must be <fo:inline font-family="monospace">{local, File}</fo:inline>. All
          trace information is then sent to the trace control node where
          it is written to file.</fo:block></fo:block></fo:block-container>
       <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">queue_size</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When tracing to shell or <fo:inline font-family="monospace">{local,File}</fo:inline>, an ip
	  trace driver is used internally. The ip trace driver has a
	  queue of maximum <fo:inline font-family="monospace">QueueSize</fo:inline> messages waiting to be
	  delivered. If the driver cannot deliver messages as fast as
	  they are produced, the queue size might be exceeded and
	  messages are dropped. This parameter is optional, and is
	  only useful if many <fo:inline font-family="monospace">{drop,N}</fo:inline> trace messages are
	  received by the trace handler. It has no meaning if shell
	  or <fo:inline font-family="monospace">{local,File}</fo:inline> is not used. See
	  <fo:inline font-style="italic">dbg:trace_port/2</fo:inline>
	  for more information about the ip trace driver.</fo:block></fo:block></fo:block-container>
       <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">process_info</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Indicates if process
          information is to be collected. If <fo:inline font-family="monospace">PI = true</fo:inline> (which is
          default), each process identifier <fo:inline font-family="monospace">Pid</fo:inline> is replaced by a
          tuple <fo:inline font-family="monospace">{Pid,ProcessInfo,Node}</fo:inline>, where <fo:inline font-family="monospace">ProcessInfo</fo:inline>
          is the registered process name, its globally registered name,
          or its initial function. To turn off this functionality, 
          set <fo:inline font-family="monospace">PI = false</fo:inline>.</fo:block></fo:block></fo:block-container>
       <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{shell, ShellSpec}</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Indicates that trace messages are to be printed on the 
          console as they are received by the tracing process. This implies 
	  trace client <fo:inline font-family="monospace">{local, File}</fo:inline>. If <fo:inline font-family="monospace">ShellSpec</fo:inline>
          is <fo:inline font-family="monospace">only</fo:inline> (instead of <fo:inline font-family="monospace">true</fo:inline>), no trace logs are stored.</fo:block></fo:block></fo:block-container>
       <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">shell</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Shortcut for <fo:inline font-family="monospace">{shell, true}</fo:inline>.</fo:block></fo:block></fo:block-container>
       <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">timer</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Indicates that the trace is to be
          automatically stopped after <fo:inline font-family="monospace">MSec</fo:inline> milliseconds. <fo:inline font-family="monospace">StopOpts</fo:inline>
          are passed to command <fo:inline font-family="monospace">ttb:stop/2</fo:inline> if specified (default is <fo:inline font-family="monospace">[]</fo:inline>).
          Notice that the timing is approximate, as delays related to
          network communication are always present. The timer starts after
          <fo:inline font-family="monospace">ttb:p/2</fo:inline> is issued, so you can set up your trace patterns before.</fo:block></fo:block></fo:block-container>
       <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">overload_check</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allows to enable overload
          checking on the nodes under trace. <fo:inline font-family="monospace">Module:Function(check)</fo:inline>
          is performed each <fo:inline font-family="monospace">MSec</fo:inline> millisecond. If the check returns
          <fo:inline font-family="monospace">true</fo:inline>, the tracing is disabled on a specified node.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Module:Function</fo:inline> must be able to handle at least three
          atoms: <fo:inline font-family="monospace">init</fo:inline>, <fo:inline font-family="monospace">check</fo:inline>, and <fo:inline font-family="monospace">stop</fo:inline>. <fo:inline font-family="monospace">init</fo:inline> and
          <fo:inline font-family="monospace">stop</fo:inline> allows you to initialize and clean
          up the check environment.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a node gets overloaded, it is not possible to issue <fo:inline font-family="monospace">ttb:p/2</fo:inline>
          or any command from the <fo:inline font-family="monospace">ttb:tp/2,3,4</fo:inline> family, as it would lead to
          inconsistent tracing state (different trace specifications on
          different nodes).</fo:block></fo:block></fo:block-container>
       <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">flush</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Periodically flushes all file trace
          port clients (see
	  <fo:inline font-style="italic">
	  <fo:inline font-family="monospace">dbg:flush_trace_port/1</fo:inline></fo:inline>). When enabled,
          the buffers are freed each <fo:inline font-family="monospace">MSec</fo:inline> millisecond. This option is
          not allowed with <fo:inline font-family="monospace">{file, {local, File}}</fo:inline> tracing.</fo:block></fo:block></fo:block-container>
       <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{resume, FetchTimeout}</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Enables the autoresume feature.
          When enabled, remote nodes try to reconnect to the controlling node
          if they are restarted. The feature requires application Runtime_Tools
          to be started (so it has to be present in the <fo:inline font-family="monospace">.boot</fo:inline>
          scripts if the traced nodes run with embedded Erlang). If this is
          not possible, resume can be performed manually by starting
          <fo:inline font-family="monospace">Runtime_Tools</fo:inline> remotely using 
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">rpc:call/4</fo:inline></fo:inline>.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">ttb</fo:inline> tries to fetch all logs from a reconnecting node before
          reinitializing the trace. This must finish within <fo:inline font-family="monospace">FetchTimeout</fo:inline> 
	  milliseconds or is aborted.</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By default, autostart information is stored in a file named
          <fo:inline font-family="monospace">ttb_autostart.bin</fo:inline> on each node. If this is not desired
          (for example, on diskless nodes), a custom module handling autostart
          information storage and retrieval can be provided by specifying
          environment variable <fo:inline font-family="monospace">ttb_autostart_module</fo:inline> for the application
	  Runtime_Tools. The module must respond to the following API:</fo:block>
	  <fo:block space-after="0.25em" space-before="0.25em">
            <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">write_config(Data) -&gt; ok</fo:inline></fo:block>
            <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stores the provided data for further retrieval. It is
              important to realize that the data storage used must not
              be affected by the node crash.</fo:block></fo:block></fo:block-container>
            <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">read_config() -&gt; {ok, Data} | {error, Error}</fo:inline></fo:block>
            <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Retrieves configuration stored with <fo:inline font-family="monospace">write_config(Data)</fo:inline>.</fo:block></fo:block></fo:block-container>
            <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">delete_config() -&gt; ok</fo:inline></fo:block>
            <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Deletes configuration stored with <fo:inline font-family="monospace">write_config(Data)</fo:inline>.
              Notice that after this call any subsequent calls to <fo:inline font-family="monospace">read_config</fo:inline>
              must return <fo:inline font-family="monospace">{error, Error}</fo:inline>.</fo:block>
            </fo:block></fo:block-container>
	  </fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">resume</fo:inline> implies the default <fo:inline font-family="monospace">FetchTimeout</fo:inline>, which is
          10 seconds</fo:block>
       </fo:block></fo:block-container>
     </fo:block>
          
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp795760">p(Item,Flags) -&gt; Return</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Return  = {ok,[{Item,MatchDesc}]}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Items   = Item | [Item]</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Item    = pid() | port() | RegName | {global,GlobalRegName} |
	  all | processes | ports |
	  existing | existing_processes | existing_ports |
	  new | new_processes | new_ports</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">RegName = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">GlobalRegName = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Flags   = Flag | [Flag]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the specified trace flags on the specified processes
          or ports. Flag <fo:inline font-family="monospace">timestamp</fo:inline> is always turned on.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See the Reference Manual for module 
	<fo:inline font-style="italic"><fo:inline font-family="monospace">dbg</fo:inline></fo:inline>
          for the possible trace flags. Parameter
          <fo:inline font-family="monospace">MatchDesc</fo:inline> is the same as returned from 
	<fo:inline font-family="monospace">dbg:p/2</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Processes can be specified as registered names, globally
          registered names, or process identifiers. Ports can be
          specified as registered names or port identifiers. If a
          registered name is specified, the flags are set on
          processes/ports with this name on all active nodes.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Issuing this command starts the timer for this trace if option
          <fo:inline font-family="monospace">timer</fo:inline> is specified with <fo:inline font-family="monospace">tracer/2</fo:inline>.
        </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp806112">tp, tpl, tpe, ctp, ctpl, ctpg, ctpe</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These functions are to be used with trace
          flag <fo:inline font-family="monospace">call</fo:inline>, <fo:inline font-family="monospace">send</fo:inline>, and <fo:inline font-family="monospace">'receive'</fo:inline> for
          setting and clearing trace patterns.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When trace flag <fo:inline font-family="monospace">call</fo:inline> is set on a process,
          function calls are traced on that process if a trace
          pattern is set for the called function.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">send</fo:inline> and <fo:inline font-family="monospace">'receive'</fo:inline> flags enable tracing
	  of all messages sent and received by the process/port. Trace
	  patterns set with <fo:inline font-family="monospace">tpe</fo:inline> may limit traced messages based
	  on the message content, the sender, and/or the receiver.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Trace patterns specify how to trace a function or a message
          by using match specifications. Match specifications are
          described in the
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ERTS User's Guide</fo:inline></fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">These functions are equivalent to the corresponding
          functions in module
	  <fo:inline font-style="italic">dbg</fo:inline>,
	  but all calls are stored in the
          history. The history buffer makes it easy to create configuration
          files; the same trace environment can be set up many
          times, for example, to compare two test runs. It also
          reduces the amount of typing when using <fo:inline font-family="monospace">ttb</fo:inline> from the
          Erlang shell.
          </fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">tp</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets trace patterns on global function calls.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">tpl</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets trace patterns on local and global function calls.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">tpe</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets trace patterns on messages.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ctp</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Clears trace patterns on local and global function
           calls.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ctpl</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Clears trace patterns on local function calls.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ctpg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Clears trace patterns on global function calls.</fo:block></fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ctpe</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Clears trace patterns on messages.</fo:block></fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">With <fo:inline font-family="monospace">tp</fo:inline> and <fo:inline font-family="monospace">tpl</fo:inline>, one of the match specification shortcuts
          can be used (for example, <fo:inline font-family="monospace">ttb:tp(foo_module, caller)</fo:inline>).</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The shortcuts are as follows:</fo:block>
          <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">return</fo:inline> - for <fo:inline font-family="monospace">[{'_',[],[{return_trace}]}]</fo:inline>
              (report the return value from a traced function)</fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">caller</fo:inline> - for <fo:inline font-family="monospace">[{'_',[],[{message,{caller}}]}]</fo:inline>
              (report the calling function)</fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">{codestr, Str}</fo:inline> - for <fo:inline font-family="monospace">dbg:fun2ms/1</fo:inline> arguments
              passed as strings (example: <fo:inline font-family="monospace">"fun(_) -&gt; return_trace() end"</fo:inline>)
            </fo:block></fo:list-item-body></fo:list-item>
          </fo:list-block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp970928">list_history() -&gt; History</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">History = [{N,Func,Args}]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All calls to <fo:inline font-family="monospace">ttb</fo:inline> is stored in the history. This
          function returns the current content of the history. Any entry
          can be reexecuted with <fo:inline font-family="monospace">run_history/1</fo:inline> or stored in a
          configuration file with <fo:inline font-family="monospace">write_config/2,3</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp975616">run_history(N) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">N = integer() | [integer()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Executes the specified entry or entries from the history
          list. To list history, use <fo:inline font-family="monospace">list_history/0</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp979328">write_config(ConfigFile,Config)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-family="monospace">write_config(ConfigFile,Config,[])</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp618240">write_config(ConfigFile,Config,Opts) -&gt; ok | {error,Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConfigFile = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Config = all | [integer()] | [{Mod,Func,Args}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Mod = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Func = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Args = [term()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opts = Opt | [Opt]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opt = append</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates or extends a configuration file, which can be
          used for restoring a specific configuration later.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The contents of the configuration file can either be fetched from
          the history or specified directly as a list of
          <fo:inline font-family="monospace">{Mod,Func,Args}</fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the complete history is to be stored in the configuration file,
          <fo:inline font-family="monospace">Config</fo:inline> must be <fo:inline font-family="monospace">all</fo:inline>. If only a selected number
          of entries from the history are to be stored, <fo:inline font-family="monospace">Config</fo:inline>
          must be a list of integers pointing out the entries to be
          stored.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Opts</fo:inline> is not specified or if it is <fo:inline font-family="monospace">[]</fo:inline>,
          <fo:inline font-family="monospace">ConfigFile</fo:inline> is deleted and a new file is created. If
          <fo:inline font-family="monospace">Opts = [append]</fo:inline>, <fo:inline font-family="monospace">ConfigFile</fo:inline> is not deleted.
          The new information is appended at the end of the file.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp629792">run_config(ConfigFile) -&gt; ok | {error,Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConfigFile = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Executes all entries in the specified configuration file. 
	Notice that the history of the last trace is always available 
	in file <fo:inline font-family="monospace">ttb_last_config</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp633552">run_config(ConfigFile,NumList) -&gt; ok | {error,Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConfigFile = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NumList = [integer()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Executes selected entries from the specified configuration
          file. <fo:inline font-family="monospace">NumList</fo:inline> is a list of integers pointing out the
          entries to be executed.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To list the contents of a configuration file, use
          <fo:inline font-family="monospace">list_config/1</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that the history of the last trace is always available 
	   in file <fo:inline font-family="monospace">ttb_last_config</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp639392">list_config(ConfigFile) -&gt; Config | {error,Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ConfigFile = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Config = [{N,Func,Args}]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Lists all entries in the specified configuration file.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp643088">write_trace_info(Key,Info) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Info = Data | fun() -&gt; Data</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Data = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">File <fo:inline font-family="monospace">.ti</fo:inline> contains <fo:inline font-family="monospace">{Key,ValueList}</fo:inline>
          tuples. This function adds <fo:inline font-family="monospace">Data</fo:inline> to the <fo:inline font-family="monospace">ValueList</fo:inline>
          associated with <fo:inline font-family="monospace">Key</fo:inline>. All information written with this
          function is included in the call to the format handler.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp649968">seq_trigger_ms() -&gt; MatchSpec</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-family="monospace">seq_trigger_ms(all)</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp652688">seq_trigger_ms(Flags) -&gt; MatchSpec</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MatchSpec = match_spec()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Flags = all | SeqTraceFlag | [SeqTraceFlag]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SeqTraceFlag = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A match specification can turn on or off sequential
          tracing. This function returns a match specification, which
          turns on sequential tracing with the specified <fo:inline font-family="monospace">Flags</fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This match specification can be specified as the last argument
          to <fo:inline font-family="monospace">tp</fo:inline> or <fo:inline font-family="monospace">tpl</fo:inline>. The activated <fo:inline font-family="monospace">Item</fo:inline>
          then becomes a <fo:inline font-weight="bold">trigger</fo:inline> for sequential tracing. This
          means that if the item is called on a process with trace flag
          <fo:inline font-family="monospace">call</fo:inline> set, the process is "contaminated"
          with token <fo:inline font-family="monospace">seq_trace</fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Flags = all</fo:inline>, all possible flags are set.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The possible values for <fo:inline font-family="monospace">SeqTraceFlag</fo:inline> are available in
	<fo:inline font-style="italic"><fo:inline font-family="monospace">seq_trace</fo:inline></fo:inline>.</fo:block>
	 <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For a description of the <fo:inline font-family="monospace">match_spec()</fo:inline> syntax, 
	   see section
	   <fo:inline font-style="italic"><fo:inline font-family="monospace">Match Specifications in Erlang</fo:inline></fo:inline>
	   in ERTS, which explains the general match specification "language".
          </fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-weight="bold">system tracer</fo:inline> for sequential tracing is
            automatically initiated by <fo:inline font-family="monospace">ttb</fo:inline> when a trace port is
            started with <fo:inline font-family="monospace">ttb:tracer/0,1,2</fo:inline>.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An example of how to use function <fo:inline font-family="monospace">seq_trigger_ms/0,1</fo:inline> follows:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
(tiger@durin)5&gt; <fo:inline font-weight="bold">ttb:tracer().</fo:inline>
{ok,[tiger@durin]}
(tiger@durin)6&gt; <fo:inline font-weight="bold">ttb:p(all,call).</fo:inline>
{ok,{[all],[call]}}
(tiger@durin)7&gt; <fo:inline font-weight="bold">ttb:tp(mod,func,ttb:seq_trigger_ms()).</fo:inline>
{ok,[{matched,1},{saved,1}]}
(tiger@durin)8&gt;</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Whenever <fo:inline font-family="monospace">mod:func(...)</fo:inline> is called after this,
          token <fo:inline font-family="monospace">seq_trace</fo:inline> is set on the executing process.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp900704">stop()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-family="monospace">stop([])</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp903392">stop(Opts) -&gt; stopped | {stopped, Dir}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opts = Opt | [Opt]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opt = nofetch | {fetch_dir, Dir} | format | {format, FormatOpts} | return_fetch_dir</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Dir = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FormatOpts = see format/2</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stops tracing on all nodes. Logs and
          trace information files are sent to the trace control
          node and stored in a directory named
          <fo:inline font-family="monospace">ttb_upload_FileName-Timestamp</fo:inline>, where <fo:inline font-family="monospace">Filename</fo:inline> is
          the one provided with <fo:inline font-family="monospace">{file, File}</fo:inline> during trace setup
          and <fo:inline font-family="monospace">Timestamp</fo:inline> is of the
          form <fo:inline font-family="monospace">yyyymmdd-hhmmss</fo:inline>. Even logs from nodes on the same
          machine as the trace control node are moved to this directory.
          The history list is saved to a file named <fo:inline font-family="monospace">ttb_last_config</fo:inline>
          for further reference (as it is no longer accessible
          through history and configuration management functions, like
          <fo:inline font-family="monospace">ttb:list_history/0</fo:inline>).
        </fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Options:</fo:inline></fo:block>
	<fo:block space-after="0.25em" space-before="0.25em">
       <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">nofetch</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Indicates that trace logs are not to be
          collected after tracing is stopped.</fo:block></fo:block></fo:block-container>
       <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{fetch, Dir}</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Allows specification of the directory
          to fetch the data to. If the directory already exists, an
          error is thrown.</fo:block></fo:block></fo:block-container>
       <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">format</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Indicates the trace logs to be formatted after tracing 
       is stopped. All logs in the fetch directory are merged.</fo:block></fo:block></fo:block-container>
       <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">return_fetch_dir</fo:inline></fo:block>
       <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Indicates the return value
          to be <fo:inline font-family="monospace">{stopped, Dir}</fo:inline> and not just <fo:inline font-family="monospace">stopped</fo:inline>.
          This implies <fo:inline font-family="monospace">fetch</fo:inline>.</fo:block></fo:block></fo:block-container>
     </fo:block>

      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp918720">get_et_handler()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the <fo:inline font-family="monospace">et</fo:inline> handler, which can be used with <fo:inline font-family="monospace">format/2</fo:inline>
          or <fo:inline font-family="monospace">tracer/2</fo:inline>.</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example: <fo:inline font-family="monospace">ttb:format(Dir, [{handler, ttb:get_et_handler()}])</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp923696">format(File)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-family="monospace">format(File,[])</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp926832">format(File,Options) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">File = string() | [string()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>This can be the name of a binary log, a list of such logs,
	or the name of a directory containing one or more binary logs.</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = Opt | [Opt]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opt = {out,Out} | {handler,FormatHandler} | disable_sort</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Out = standard_io | string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FormatHandler = {Function, InitialState}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Function = fun(Fd,Trace,TraceInfo,State) -&gt; State</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Fd = standard_io | FileDescriptor</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>File descriptor of the destination file <fo:inline font-family="monospace">Out</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Trace = tuple()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The trace message. For details, see the Reference Manual for 
	module <fo:inline font-family="monospace">erlang</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TraceInfo = [{Key,ValueList}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Includes the keys <fo:inline font-family="monospace">flags</fo:inline>, <fo:inline font-family="monospace">client</fo:inline>, and <fo:inline font-family="monospace">node</fo:inline>.
	If <fo:inline font-family="monospace">handler</fo:inline> is specified as option to the tracer function, this 
	is also included. Also, all information written with function
	<fo:inline font-family="monospace">write_trace_info/2</fo:inline> is included.</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Reads the specified binary trace log(s). The logs are processed
          in the order of their time stamps as long as option <fo:inline font-family="monospace">disable_sort</fo:inline>
          is not specified.
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">FormatHandler = {Function,InitialState}</fo:inline>,
          <fo:inline font-family="monospace">Function</fo:inline> is called for each trace message.</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">FormatHandler = get_et_handler()</fo:inline>, <fo:inline font-family="monospace">et_viewer</fo:inline> in
          application ET is used for presenting
          the trace log graphically. <fo:inline font-family="monospace">ttb</fo:inline> provides a few different
          filters that can be selected from menu <fo:inline font-weight="bold">Filters and scaling</fo:inline> 
	  in the <fo:inline font-family="monospace">et_viewer</fo:inline>.</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">FormatHandler</fo:inline> is not specified, a
          default handler is used presenting each trace message as a
          text line.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The state returned from each call of <fo:inline font-family="monospace">Function</fo:inline> is passed to 
	  the next call, even if the next call is to format a message from another 
	  log file.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Out</fo:inline> is specified, <fo:inline font-family="monospace">FormatHandler</fo:inline> gets the
          file descriptor to <fo:inline font-family="monospace">Out</fo:inline> as the first parameter.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Out</fo:inline> is ignored if the <fo:inline font-family="monospace">et</fo:inline> format handler is used.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Wrap logs can be formatted one by one or all at once. To
          format one of the wrap logs in a set, specify the exact file name.
          To format the whole set of wrap logs, specify the name
          with <fo:inline font-family="monospace">*</fo:inline> instead of the wrap count. For examples, see the
          <fo:inline font-style="italic"><fo:inline font-family="monospace">User's Guide</fo:inline></fo:inline>.
	  </fo:block>
      </fo:block>
  
<fo:block page-break-before="always" id="idp958048" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">etop</fo:marker>etop</fo:block>Erlang module</fo:block>
  <fo:block/>
  etop
  <fo:block/>
  

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Start Erlang Top with the provided scripts
      <fo:inline font-family="monospace">etop</fo:inline>. This starts a hidden Erlang node
      that connects to the node to be measured. The measured node is
      specified with option <fo:inline font-family="monospace">-node</fo:inline>. If the measured node has a
      different cookie than the default cookie for the user who
      invokes the script, the cookie must be explicitly specified with
      option <fo:inline font-family="monospace">-setcookie</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Under Windows, batch file <fo:inline font-family="monospace">etop.bat</fo:inline> can be used.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When executing the <fo:inline font-family="monospace">etop</fo:inline> script, configuration
    parameters can be specified as command-line options,
    for example, <fo:inline font-family="monospace">etop -node testnode@myhost -setcookie MyCookie</fo:inline>.
    The following configuration parameters exist for the
    tool:</fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">node</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The measured node.</fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Value: <fo:inline font-family="monospace">atom()</fo:inline></fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Mandatory</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">setcookie</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Cookie to use for the <fo:inline font-family="monospace">etop</fo:inline> node. Must be same as the
      cookie on the measured node.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Value: <fo:inline font-family="monospace">atom()</fo:inline></fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">lines</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Number of lines (processes) to display.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Value: <fo:inline font-family="monospace">integer()</fo:inline></fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default: <fo:inline font-family="monospace">10</fo:inline></fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">interval</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Time interval (in seconds) between each update of
       the display.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Value: <fo:inline font-family="monospace">integer()</fo:inline></fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default: <fo:inline font-family="monospace">5</fo:inline></fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">accumulate</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">true</fo:inline>, the execution time and reductions are
       accumulated.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Value: <fo:inline font-family="monospace">boolean()</fo:inline></fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default: <fo:inline font-family="monospace">false</fo:inline></fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sort</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Identifies what information to sort by.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Value: <fo:inline font-family="monospace">runtime | reductions | memory | msg_q</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default: <fo:inline font-family="monospace">runtime</fo:inline> (<fo:inline font-family="monospace">reductions</fo:inline> if <fo:inline font-family="monospace">tracing=off</fo:inline>)</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">tracing</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">etop</fo:inline> uses the Erlang trace facility, and thus no
       other tracing is possible on the measured node while
      <fo:inline font-family="monospace">etop</fo:inline> is running, unless this option is set to
      <fo:inline font-family="monospace">off</fo:inline>. Also helpful if the <fo:inline font-family="monospace">etop</fo:inline> tracing causes too
       high load on the measured node. With tracing off, runtime is
       not measured.</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Value: <fo:inline font-family="monospace">on | off</fo:inline></fo:block>
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default: <fo:inline font-family="monospace">on</fo:inline></fo:block></fo:block></fo:block-container>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details about Erlang Top, see the
    <fo:inline font-style="italic">User's Guide</fo:inline>.</fo:block>

  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1557760">start() -&gt; ok</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts <fo:inline font-family="monospace">etop</fo:inline>.
        Notice that <fo:inline font-family="monospace">etop</fo:inline> is preferably started with the <fo:inline font-family="monospace">etop</fo:inline> script.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1561360">start(Options) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = [Option]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Option = {Key, Value}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts <fo:inline font-family="monospace">etop</fo:inline>. To view the possible options, use
          <fo:inline font-style="italic"><fo:inline font-family="monospace">help/0</fo:inline></fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1567168">help() -&gt; ok</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Displays the help of <fo:inline font-family="monospace">etop</fo:inline> and
          its options.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1569872">config(Key,Value) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ok | {error,Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = lines | interval | accumulate | sort</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Changes the configuration parameters of the tool during runtime.
	Allowed parameters are <fo:inline font-family="monospace">lines</fo:inline>, <fo:inline font-family="monospace">interval</fo:inline>, <fo:inline font-family="monospace">accumulate</fo:inline>,
	and <fo:inline font-family="monospace">sort</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1575856">dump(File) -&gt; Result</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = ok | {error,Reason}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">File = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Dumps the current display to a text file.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1579504">stop() -&gt; stop</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Terminates <fo:inline font-family="monospace">etop</fo:inline>.</fo:block>
      </fo:block>
  
<fo:block page-break-before="always" id="idp1590160" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">crashdump_viewer</fo:marker>crashdump_viewer</fo:block>Erlang module</fo:block>
  <fo:block/>
  crashdump_viewer
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Crashdump Viewer is a WxWidgets based tool for browsing Erlang
      crashdumps.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details about how to get started with the Crashdump Viewer, see the
    <fo:inline font-style="italic"><fo:inline font-family="monospace">User's Guide</fo:inline></fo:inline>.</fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1594000">start() -&gt; ok</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1594448">start(File) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">File = string()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The filename of the crashdump.</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts the Crashdump Viewer GUI and
        loads the specified crashdump.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">File</fo:inline> is not specified, a file dialog is opened
	where the crashdump can be selected.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1599088">stop() -&gt; ok</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Terminates the Crashdump Viewer and closes
        all GUI windows.</fo:block>
      </fo:block>
  
<fo:block page-break-before="always" id="idp1609184" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">cdv</fo:marker>cdv</fo:block>Command</fo:block>
  <fo:block/>
  cdv
  Script to start the Crashdump Viewer from the
  OS command line.
  

  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">cdv</fo:inline> shell script is located in directory <fo:inline font-family="monospace">priv</fo:inline>
     of the Observer application. The script is used
    for starting the Crashdump Viewer tool from the OS command
    line.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For Windows users, <fo:inline font-family="monospace">cdv.bat</fo:inline> is found in the same
    location.</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1613536">cdv [file]</fo:block></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Argument <fo:inline font-family="monospace">file</fo:inline> is optional. If not specified, a file
	dialog is displayed, allowing you to select a crashdump
	from the file system.</fo:block>
      </fo:block>
  

</fo:flow>
  </fo:page-sequence>
</fo:root>
