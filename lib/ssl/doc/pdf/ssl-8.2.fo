<?xml version="1.0"?>
<fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format">
  <fo:layout-master-set>
    <fo:simple-page-master master-name="cover" margin="25mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin="0mm"/>
    </fo:simple-page-master>
    <fo:simple-page-master master-name="left-page" margin-top="25mm" margin-bottom="15mm" margin-left="20mm" margin-right="25mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin-top="15mm" margin-bottom="20mm"/>
      <fo:region-before region-name="left-header" extent="10mm"/>
      <fo:region-after region-name="left-footer" extent="10mm"/>
    </fo:simple-page-master>
    <fo:simple-page-master master-name="right-page" margin-top="25mm" margin-bottom="15mm" margin-left="25mm" margin-right="20mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin-top="15mm" margin-bottom="20mm"/>
      <fo:region-before region-name="right-header" extent="10mm"/>
      <fo:region-after region-name="right-footer" extent="10mm"/>
    </fo:simple-page-master>
    <fo:page-sequence-master master-name="document">
      <fo:repeatable-page-master-alternatives>
        <fo:conditional-page-master-reference master-reference="left-page" odd-or-even="even"/>
        <fo:conditional-page-master-reference master-reference="right-page" odd-or-even="odd"/>
      </fo:repeatable-page-master-alternatives>
    </fo:page-sequence-master>
  </fo:layout-master-set>
  <fo:bookmark-tree>
    <fo:bookmark internal-destination="cover-page" starting-state="show">
      <fo:bookmark-title>Secure Socket Layer </fo:bookmark-title>
      <fo:bookmark internal-destination="idp604656" starting-state="hide">
        <fo:bookmark-title>SSL User's Guide</fo:bookmark-title>
        <fo:bookmark internal-destination="idp596464" starting-state="hide">
          <fo:bookmark-title>Introduction</fo:bookmark-title>
          <fo:bookmark internal-destination="idp593616" starting-state="hide">
            <fo:bookmark-title>Purpose</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp592096" starting-state="hide">
            <fo:bookmark-title>Prerequisites</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp588016" starting-state="hide">
          <fo:bookmark-title>TLS and its Predecessor, SSL</fo:bookmark-title>
          <fo:bookmark internal-destination="idp562880" starting-state="hide">
            <fo:bookmark-title>Security Overview</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp561616" starting-state="hide">
            <fo:bookmark-title>Data Privacy and Integrity</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp552128" starting-state="hide">
            <fo:bookmark-title>Digital Certificates</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp555600" starting-state="hide">
            <fo:bookmark-title>Peer Authentication</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp551376" starting-state="hide">
            <fo:bookmark-title>TLS Sessions</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp453024" starting-state="hide">
          <fo:bookmark-title>Using SSL API</fo:bookmark-title>
          <fo:bookmark internal-destination="idp446144" starting-state="hide">
            <fo:bookmark-title>Setting up Connections</fo:bookmark-title>
            <fo:bookmark internal-destination="idp444496" starting-state="hide">
              <fo:bookmark-title>Minimal Example</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp8912" starting-state="hide">
              <fo:bookmark-title>Upgrade Example</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp296848" starting-state="hide">
          <fo:bookmark-title>Using SSL for Erlang Distribution</fo:bookmark-title>
          <fo:bookmark internal-destination="idp513056" starting-state="hide">
            <fo:bookmark-title>Building Boot Scripts Including the ssl Application</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp512912" starting-state="hide">
            <fo:bookmark-title>Specifying Distribution Module for net_kernel</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp28176" starting-state="hide">
            <fo:bookmark-title>Specifying SSL Options</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp635584" starting-state="hide">
            <fo:bookmark-title>Setting up Environment to Always Use SSL</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp640192" starting-state="hide">
            <fo:bookmark-title>Using SSL distribution over IPv6</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
      </fo:bookmark>
      <fo:bookmark internal-destination="idp114320" starting-state="hide">
        <fo:bookmark-title>Reference Manual</fo:bookmark-title>
        <fo:bookmark internal-destination="idp743600" starting-state="hide">
          <fo:bookmark-title>ssl</fo:bookmark-title>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp681136" starting-state="hide">
          <fo:bookmark-title>ssl</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1085872" starting-state="hide">
            <fo:bookmark-title>cipher_suites/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1086320" starting-state="hide">
            <fo:bookmark-title>cipher_suites/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1091856" starting-state="hide">
            <fo:bookmark-title>eccs/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1092304" starting-state="hide">
            <fo:bookmark-title>eccs/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1095312" starting-state="hide">
            <fo:bookmark-title>clear_pem_cache/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1097632" starting-state="hide">
            <fo:bookmark-title>connect/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1098096" starting-state="hide">
            <fo:bookmark-title>connect/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1103824" starting-state="hide">
            <fo:bookmark-title>connect/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1104288" starting-state="hide">
            <fo:bookmark-title>connect/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp968128" starting-state="hide">
            <fo:bookmark-title>close/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp971552" starting-state="hide">
            <fo:bookmark-title>close/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp976304" starting-state="hide">
            <fo:bookmark-title>controlling_process/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp980240" starting-state="hide">
            <fo:bookmark-title>connection_information/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp984640" starting-state="hide">
            <fo:bookmark-title>connection_information/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp990096" starting-state="hide">
            <fo:bookmark-title>format_error/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp993232" starting-state="hide">
            <fo:bookmark-title>getopts/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp996720" starting-state="hide">
            <fo:bookmark-title>getstat/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp997136" starting-state="hide">
            <fo:bookmark-title>getstat/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1001456" starting-state="hide">
            <fo:bookmark-title>listen/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1005504" starting-state="hide">
            <fo:bookmark-title>negotiated_protocol/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1008992" starting-state="hide">
            <fo:bookmark-title>peercert/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1012992" starting-state="hide">
            <fo:bookmark-title>peername/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1016976" starting-state="hide">
            <fo:bookmark-title>prf/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1023792" starting-state="hide">
            <fo:bookmark-title>recv/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1024256" starting-state="hide">
            <fo:bookmark-title>recv/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1033568" starting-state="hide">
            <fo:bookmark-title>renegotiate/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1487296" starting-state="hide">
            <fo:bookmark-title>send/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1492208" starting-state="hide">
            <fo:bookmark-title>setopts/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1496688" starting-state="hide">
            <fo:bookmark-title>shutdown/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1502256" starting-state="hide">
            <fo:bookmark-title>ssl_accept/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1502704" starting-state="hide">
            <fo:bookmark-title>ssl_accept/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1508064" starting-state="hide">
            <fo:bookmark-title>ssl_accept/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1508528" starting-state="hide">
            <fo:bookmark-title>ssl_accept/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1517552" starting-state="hide">
            <fo:bookmark-title>sockname/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp662944" starting-state="hide">
            <fo:bookmark-title>start/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp371552" starting-state="hide">
            <fo:bookmark-title>start/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp833360" starting-state="hide">
            <fo:bookmark-title>stop/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp381888" starting-state="hide">
            <fo:bookmark-title>transport_accept/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp659520" starting-state="hide">
            <fo:bookmark-title>transport_accept/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1521184" starting-state="hide">
            <fo:bookmark-title>versions/0</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp1535504" starting-state="hide">
          <fo:bookmark-title>ssl_crl_cache</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1538192" starting-state="hide">
            <fo:bookmark-title>delete/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1542288" starting-state="hide">
            <fo:bookmark-title>insert/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1542672" starting-state="hide">
            <fo:bookmark-title>insert/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp1551472" starting-state="hide">
          <fo:bookmark-title>ssl_crl_cache_api</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1558320" starting-state="hide">
            <fo:bookmark-title>fresh_crl/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1565184" starting-state="hide">
            <fo:bookmark-title>lookup/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1565680" starting-state="hide">
            <fo:bookmark-title>lookup/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1576640" starting-state="hide">
            <fo:bookmark-title>select/2</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp1587952" starting-state="hide">
          <fo:bookmark-title>ssl_session_cache_api</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1599344" starting-state="hide">
            <fo:bookmark-title>delete/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1602992" starting-state="hide">
            <fo:bookmark-title>foldl/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1607776" starting-state="hide">
            <fo:bookmark-title>init/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1614000" starting-state="hide">
            <fo:bookmark-title>lookup/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1618128" starting-state="hide">
            <fo:bookmark-title>select_session/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1622288" starting-state="hide">
            <fo:bookmark-title>size/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1625680" starting-state="hide">
            <fo:bookmark-title>terminate/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1628976" starting-state="hide">
            <fo:bookmark-title>update/3</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
      </fo:bookmark>
    </fo:bookmark>
  </fo:bookmark-tree>
  <fo:page-sequence font-family="sans-serif" force-page-count="even" master-reference="cover" font-size="10pt">
    <fo:flow flow-name="xsl-region-body">
      <fo:block space-before="130mm" space-before.conditionality="retain" text-align="end">
        <fo:external-graphic src="/root/download/otp_src_20.0/bootstrap/lib/erl_docgen/priv/images/erlang-logo.gif"/>
      </fo:block>
      <fo:block id="cover-page" border-before-style="solid" border-before-width="10pt" border-color="#960003" font-size="2.3em" padding-before="0.5em" text-align="end">Secure Socket Layer </fo:block>
      <fo:block font-size="0.9em" text-align="end">Copyright © 1999-2017 Ericsson AB. All Rights Reserved.</fo:block>
      <fo:block font-size="0.9em" text-align="end">Secure Socket Layer  8.2</fo:block>
      <fo:block font-size="0.9em" text-align="end">July 12, 2017</fo:block>
      <fo:block padding-before="2.5em" font-size="1.33em" font-weight="bold" color="#C00" text-align="end"/>
      <fo:block break-before="page" border-before-style="solid" border-before-width="1pt" border-color="#960003" font-weight="bold" padding-before="0.5em" space-before="200mm" space-before.conditionality="retain">Copyright © 1999-2017 Ericsson AB. All Rights Reserved.</fo:block>
      <fo:block font-size="0.9em">
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
 
          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
    
    Ericsson AB. All Rights Reserved..
        </fo:block>
      <fo:block font-size="0.9em" font-weight="bold" space-before="2em">July 12, 2017</fo:block>
    </fo:flow>
  </fo:page-sequence>
  <fo:page-sequence font-family="serif" master-reference="document" initial-page-number="1" font-size="10pt">
    <fo:static-content flow-name="left-header">
      <fo:block text-align="start" border-after-style="solid" border-after-width="2pt" border-color="#960003" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">
        <fo:retrieve-marker retrieve-boundary="page-sequence" retrieve-class-name="chapter-title" retrieve-position="first-including-carryover"/>
      </fo:block>
    </fo:static-content>
    <fo:static-content flow-name="right-header">
      <fo:block text-align="end" border-after-style="solid" border-after-width="2pt" border-color="#960003" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">
        <fo:retrieve-marker retrieve-boundary="page-sequence" retrieve-class-name="chapter-title" retrieve-position="first-including-carryover"/>
      </fo:block>
    </fo:static-content>
    <fo:static-content flow-name="left-footer">
      <fo:block text-align="start" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold"><fo:page-number/> | Ericsson AB. All Rights Reserved.:
            Secure Socket Layer </fo:block>
    </fo:static-content>
    <fo:static-content flow-name="right-footer">
      <fo:block text-align="end" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">Ericsson AB. All Rights Reserved.:
            Secure Socket Layer  | <fo:page-number/></fo:block>
    </fo:static-content>
    <fo:flow flow-name="xsl-region-body"><fo:block/><fo:block id="idp604656" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">1   
      SSL User's Guide</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Secure Socket Layer (SSL) application provides secure communication over
      sockets.
      </fo:block>
  <fo:block id="idp596464" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.1  Introduction</fo:marker>1.1  Introduction</fo:block><fo:block id="idp593616" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.1 
      Purpose</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Transport Layer Security (TLS) and its predecessor, the Secure
    Sockets Layer (SSL), are cryptographic protocols designed to
    provide communications security over a computer network. The protocols use
    use X.509 certificates and hence public key (asymmetric) cryptography to
    authenticate the counterpart with whom they communicate,
    and to exchange a symmetric key for payload encryption. The protocol provides
    data/message confidentiality (encryption), integrity (through message authentication code checks)
    and host verification (through certificate path validation).</fo:block>
  <fo:block id="idp592096" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.2 
      Prerequisites</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is assumed that the reader is familiar with the Erlang
    programming language, the concepts of OTP, and has a basic
    understanding of SSL/TLS.</fo:block>
  <fo:block id="idp588016" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.2  TLS and its Predecessor, SSL</fo:marker>1.2  TLS and its Predecessor, SSL</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Erlang SSL application implements the SSL/TLS protocol
  for the currently supported versions,  see the
  <fo:inline font-style="italic">ssl(3)</fo:inline> manual page.
  </fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By default SSL/TLS is run over the TCP/IP protocol even
  though you can plug in any other reliable transport protocol
  with the same Application Programming Interface (API) as the
  <fo:inline font-family="monospace">gen_tcp</fo:inline> module in Kernel.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a client and a server wants to use an upgrade mechanism, such as
  defined by RFC 2817, to upgrade a regular TCP/IP connection to an SSL
  connection, this is supported by the Erlang SSL application API. This can be 
  useful for, for example, supporting HTTP and HTTPS on the same port and
  implementing virtual hosting.
  </fo:block><fo:block id="idp562880" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.1 
      Security Overview</fo:block>
    
      
   <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To achieve authentication and privacy, the client and server
    perform a TLS handshake procedure before transmitting or receiving
    any data. During the handshake, they agree on a protocol version and
    cryptographic algorithms, generate shared secrets using public
    key cryptographies, and optionally authenticate each other with
    digital certificates.</fo:block>
  <fo:block id="idp561616" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.2 
      Data Privacy and Integrity</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-weight="bold">symmetric key</fo:inline> algorithm has one key only. The key is
    used for both encryption and decryption. These algorithms are fast,
    compared to public key algorithms (using two keys, one public and one
    private) and are therefore typically used for encrypting bulk
    data.
    </fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The keys for the symmetric encryption are generated uniquely
    for each connection and are based on a secret negotiated
    in the TLS handshake.</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The TLS handshake protocol and data transfer is run on top of
    the TLS Record Protocol, which uses a keyed-hash Message
    Authenticity Code (MAC), or a Hash-based MAC (HMAC),
    to protect the message data
    integrity. From the TLS RFC: "A Message Authentication Code is a
    one-way hash computed from a message and some secret data. It is
    difficult to forge without knowing the secret data. Its purpose is
    to detect if the message has been altered."
    </fo:block>
    
  <fo:block id="idp552128" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.3 
      Digital Certificates</fo:block>
     
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A certificate is similar to a driver's license, or a
     passport. The holder of the certificate is called the
     <fo:inline font-weight="bold">subject</fo:inline>. The certificate is signed 
     with the private key of the issuer of the certificate. A chain
     of trust is built by having the issuer in its turn being
     certified by another certificate, and so on, until you reach the
     so called root certificate, which is self-signed, that is, issued
     by itself.</fo:block>
     
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Certificates are issued by Certification Authorities (CAs) only. 
     A handful of top CAs in the world issue root certificates. You can
     examine several of these certificates by clicking
     through the menus of your web browser.
     </fo:block>
   <fo:block id="idp555600" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.4 
      Peer Authentication</fo:block>
     
      
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Authentication of the peer is done by public key path
     validation as defined in RFC 3280. This means basically 
     the following:</fo:block>
     <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Each certificate in the certificate chain is issued by the 
       previous one.</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The certificates attributes are valid.</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The root certificate is a trusted certificate that is present 
       in the trusted certificate database kept by the peer.</fo:block></fo:list-item-body></fo:list-item>
     </fo:list-block>
     
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The server always sends a certificate chain as part of
     the TLS handshake, but the client only sends one if requested
     by the server. If the client does not have
     an appropriate certificate, it can send an "empty" certificate
     to the server.</fo:block>
     
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The client can choose to accept some path evaluation errors,
     for example, a web browser can ask the user whether to
     accept an unknown CA root certificate. The server, if it requests
     a certificate, does however not accept any path validation
     errors. It is configurable if the server is to accept
     or reject an "empty" certificate as response to
     a certificate request.</fo:block>
   <fo:block id="idp551376" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.5 
      TLS Sessions</fo:block>
     
     
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">From the TLS RFC: "A TLS session is an association between a
     client and a server. Sessions are created by the handshake
     protocol. Sessions define a set of cryptographic security
     parameters, which can be shared among multiple
     connections. Sessions are used to avoid the expensive negotiation
     of new security parameters for each connection."</fo:block>

     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Session data is by default kept by the SSL application in a
     memory storage, hence session data is lost at application
     restart or takeover. Users can define their own callback module
     to handle session data storage if persistent data storage is
     required. Session data is also invalidated after 24 hours
     from it was saved, for security reasons. The amount of time the 
     session data is to be saved can be configured.</fo:block>

     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By default the SSL clients try to reuse an available session and 
     by default the SSL servers agree to reuse sessions when clients
     ask for it.</fo:block>

   <fo:block id="idp453024" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.3  Using SSL API</fo:marker>1.3  Using SSL API</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To see relevant version information for ssl, call
  <fo:inline font-style="italic"><fo:inline font-family="monospace">ssl:versions/0</fo:inline></fo:inline>
  .</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To see all supported cipher suites, call  <fo:inline font-style="italic"><fo:inline font-family="monospace">ssl:cipher_suites(all)</fo:inline> </fo:inline>. 
  The available cipher suites for a connection depend on your certificate. 
  Specific cipher suites that you want your connection to use can also be 
  specified. Default is to use the strongest available.</fo:block><fo:block id="idp446144" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.1 
      Setting up Connections</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section shows a small example of how to set up client/server connections
    using the Erlang shell. The returned value of the <fo:inline font-family="monospace">sslsocket</fo:inline> is abbreviated
    with <fo:inline font-family="monospace">[...]</fo:inline> as it can be fairly large and is opaque.</fo:block>
    
    <fo:block id="idp444496" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Minimal Example</fo:block>
      
      
      <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"> The minimal setup is not the most secure setup of SSL.</fo:block>    
      </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To set up client/server connections:</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 1:</fo:inline> Start the server side:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">1 server&gt; ssl:start().
ok</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 2:</fo:inline> Create an SSL listen socket:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">2 server&gt; {ok, ListenSocket} =
ssl:listen(9999, [{certfile, "cert.pem"}, {keyfile, "key.pem"},{reuseaddr, true}]).
{ok,{sslsocket, [...]}}</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 3:</fo:inline> Do a transport accept on the SSL listen socket:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">3 server&gt; {ok, Socket} = ssl:transport_accept(ListenSocket).
{ok,{sslsocket, [...]}}</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 4:</fo:inline> Start the client side:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">1 client&gt; ssl:start().
ok</fo:block>
      
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">2 client&gt; {ok, Socket} = ssl:connect("localhost", 9999,  [], infinity).
{ok,{sslsocket, [...]}}</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 5:</fo:inline> Do the SSL handshake:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">4 server&gt; ok = ssl:ssl_accept(Socket).
ok</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 6:</fo:inline> Send a message over SSL:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">5 server&gt; ssl:send(Socket, "foo").
ok</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 7:</fo:inline> Flush the shell message queue to see that the message
      was sent on the server side:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">3 client&gt; flush().
Shell got {ssl,{sslsocket,[...]},"foo"}
ok</fo:block>
    
    
    <fo:block id="idp8912" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Upgrade Example</fo:block>
      
      
      <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To upgrade a TCP/IP connection to an SSL connection, the
      client and server must agree to do so. The agreement
      can be accomplished by using a protocol, for example, the one used by HTTP
      specified in RFC 2817.</fo:block></fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To upgrade to an SSL connection:</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 1:</fo:inline> Start the server side:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">1 server&gt; ssl:start().
ok</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 2:</fo:inline> Create a normal TCP listen socket:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">2 server&gt; {ok, ListenSocket} = gen_tcp:listen(9999, [{reuseaddr, true}]).
{ok, #Port&lt;0.475&gt;}</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 3:</fo:inline> Accept client connection:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">3 server&gt; {ok, Socket} = gen_tcp:accept(ListenSocket).
{ok, #Port&lt;0.476&gt;}</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 4:</fo:inline> Start the client side:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">1 client&gt; ssl:start().
ok</fo:block>
      
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">2 client&gt; {ok, Socket} = gen_tcp:connect("localhost", 9999,  [], infinity).</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 5:</fo:inline> Ensure <fo:inline font-family="monospace">active</fo:inline> is set to <fo:inline font-family="monospace">false</fo:inline> before trying
      to upgrade a connection to an SSL connection, otherwise
      SSL handshake messages can be delivered to the wrong process:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">4 server&gt; inet:setopts(Socket, [{active, false}]).
ok</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 6:</fo:inline> Do the SSL handshake:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">5 server&gt; {ok, SSLSocket} = ssl:ssl_accept(Socket, [{cacertfile, "cacerts.pem"},
{certfile, "cert.pem"}, {keyfile, "key.pem"}]).
{ok,{sslsocket,[...]}}</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 7:</fo:inline> Upgrade to an SSL connection. The client and server
      must agree upon the upgrade. The server must call
      <fo:inline font-family="monospace">ssl:accept/2</fo:inline> before the client calls <fo:inline font-family="monospace">ssl:connect/3.</fo:inline></fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">3 client&gt;{ok, SSLSocket} = ssl:connect(Socket, [{cacertfile, "cacerts.pem"},
{certfile, "cert.pem"}, {keyfile, "key.pem"}], infinity).
{ok,{sslsocket,[...]}}</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 8:</fo:inline> Send a message over SSL:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">4 client&gt; ssl:send(SSLSocket, "foo").
ok</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 9:</fo:inline> Set <fo:inline font-family="monospace">active true</fo:inline> on the SSL socket:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">4 server&gt; ssl:setopts(SSLSocket, [{active, true}]).
ok</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 10:</fo:inline> Flush the shell message queue to see that the message
      was sent on the client side:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">5 server&gt; flush().
Shell got {ssl,{sslsocket,[...]},"foo"}
ok</fo:block>
    
  <fo:block id="idp296848" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.4  Using SSL for Erlang Distribution</fo:marker>1.4  Using SSL for Erlang Distribution</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section describes how the Erlang distribution can use 
    SSL to get extra verification and security.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Erlang distribution can in theory use almost any 
      connection-based protocol as bearer. However, a module that 
      implements the protocol-specific parts of the connection setup is 
      needed. The default distribution module is <fo:inline font-family="monospace">inet_tcp_dist</fo:inline> 
      in the Kernel application. When starting an
      Erlang node distributed, <fo:inline font-family="monospace">net_kernel</fo:inline> uses this module to
      set up listen ports and connections.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the SSL application, an extra distribution
      module, <fo:inline font-family="monospace">inet_tls_dist</fo:inline>, can be used as an
      alternative. All distribution connections will use SSL and
      all participating Erlang nodes in a distributed system must use
      this distribution module.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The security level depends on the parameters provided to the
      SSL connection setup. Erlang node cookies are however always
      used, as they can be used to differentiate between two different
      Erlang networks.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To set up Erlang distribution over SSL:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Step 1:</fo:inline> Build boot scripts including the
      SSL application.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Step 2:</fo:inline> Specify the distribution module for 
      <fo:inline font-family="monospace">net_kernel</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Step 3:</fo:inline> Specify the security options and other 
      SSL options.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Step 4:</fo:inline> Set up the environment to always use SSL.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following sections describe these steps.</fo:block><fo:block id="idp513056" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.1 
      Building Boot Scripts Including the ssl Application</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Boot scripts are built using the <fo:inline font-family="monospace">systools</fo:inline> utility in the
      SASL application. For more information on <fo:inline font-family="monospace">systools</fo:inline>,
      see the SASL documentation. This is only an example of
      what can be done.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The simplest boot script possible includes only the Kernel 
      and STDLIB applications. Such a script is located in the 
      <fo:inline font-family="monospace">bin</fo:inline> directory of the Erlang distribution. The source for the 
      script is found under the Erlang installation top directory under
      <fo:inline font-family="monospace">releases/&lt;OTP version&gt;/start_clean.rel</fo:inline>.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Do the following:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Copy that script to another location (and preferably another 
      name).</fo:block></fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Add the applications Crypto, Public Key, and 
	SSL with their current version numbers after the 
	STDLIB application.</fo:block></fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following shows an example <fo:inline font-family="monospace">.rel</fo:inline> file with SSL 
    added:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
      {release, {"OTP  APN 181 01","R15A"}, {erts, "5.9"},
      [{kernel,"2.15"},
      {stdlib,"1.18"},
      {crypto, "2.0.3"},
      {public_key, "0.12"},
      {asn1, "4.0"},
      {ssl, "5.0"}
      ]}.
   </fo:block>

   <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The version numbers differ in your system. Whenever one of the 
   applications included in the script is upgraded, change the script.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Do the following:</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Build the boot script.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Assuming the <fo:inline font-family="monospace">.rel file</fo:inline> is stored in a file
	<fo:inline font-family="monospace">start_ssl.rel</fo:inline> in the current directory, a boot script
	can be built as follows:</fo:block></fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
   <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
   1&gt; systools:make_script("start_ssl",[]).    </fo:block>

   <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There is now a <fo:inline font-family="monospace">start_ssl.boot</fo:inline> file in the current
   directory.</fo:block>

   <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Do the following:</fo:block>
   <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
     <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Test the boot script. To do this, start Erlang with the
     <fo:inline font-family="monospace">-boot</fo:inline> command-line parameter specifying this boot script
     (with its full path, but without the <fo:inline font-family="monospace">.boot</fo:inline> suffix). In
     UNIX it can look as follows:</fo:block></fo:block></fo:list-item-body></fo:list-item>
   </fo:list-block>
   <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ erl -boot /home/me/ssl/start_ssl
Erlang (BEAM) emulator version 5.0
 
Eshell V5.0  (abort with ^G)
1&gt; whereis(ssl_manager).
&lt;0.41.0&gt;    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">whereis</fo:inline> function-call verifies that the SSL 
      application is started.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As an alternative to building a bootscript, you can explicitly
      add the path to the SSL <fo:inline font-family="monospace">ebin</fo:inline> directory on the command
      line. This is done with command-line option <fo:inline font-family="monospace">-pa</fo:inline>. This
      works as the SSL application does not need to be started for the
      distribution to come up, as a clone of the SSL application is
      hooked into the Kernel application. So, as long as the
      SSL application code can be reached, the distribution starts. 
      The <fo:inline font-family="monospace">-pa</fo:inline> method is only recommended for testing purposes.</fo:block>

      <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The clone of the SSL application must
      enable the use of the SSL code in such an early bootstage as
      needed to set up the distribution. However, this makes it
      impossible to soft upgrade the SSL application.</fo:block></fo:block>
  <fo:block id="idp512912" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.2 
      Specifying Distribution Module for net_kernel</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The distribution module for SSL is named <fo:inline font-family="monospace">inet_tls_dist</fo:inline>
      and is specified on the command line with option <fo:inline font-family="monospace">-proto_dist</fo:inline>.
      The argument to <fo:inline font-family="monospace">-proto_dist</fo:inline> is to be the module
      name without suffix <fo:inline font-family="monospace">_dist</fo:inline>. So, this distribution
      module is specified with <fo:inline font-family="monospace">-proto_dist inet_tls</fo:inline> on the
      command line.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Extending the command line gives the following:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ erl -boot /home/me/ssl/start_ssl -proto_dist inet_tls    </fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For the distribution to be started, give the emulator a name as well:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ erl -boot /home/me/ssl/start_ssl -proto_dist inet_tls -sname ssl_test
Erlang (BEAM) emulator version 5.0 [source]
 
Eshell V5.0  (abort with ^G)
(ssl_test@myhost)1&gt;     </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">However, a node started in this way refuses to talk
      to other nodes, as no SSL parameters are supplied
      (see the next section).</fo:block>
  <fo:block id="idp28176" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.3 
      Specifying SSL Options</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For SSL to work, at least
    a public key and a certificate must be specified for the server
    side. In the following example, the PEM-files consist of two
    entries, the server certificate and its private key.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On the <fo:inline font-family="monospace">erl</fo:inline> command line you can specify options that the
    SSL distribution adds when creating a socket.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The simplest SSL options in the following list can be specified 
    by adding the 
    prefix <fo:inline font-family="monospace">server_</fo:inline> or <fo:inline font-family="monospace">client_</fo:inline> to the option name:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">certfile</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">keyfile</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">password</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">cacertfile</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">verify</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">verify_fun</fo:inline> (write as <fo:inline font-family="monospace">{Module, Function, InitialUserState}</fo:inline>)</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">crl_check</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">crl_cache</fo:inline> (write as Erlang term)</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">reuse_sessions</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">secure_renegotiate</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">depth</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">hibernate_after</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">ciphers</fo:inline> (use old string format)</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that <fo:inline font-family="monospace">verify_fun</fo:inline> needs to be written in a different
    form than the corresponding SSL option, since funs are not
    accepted on the command line.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The server can also take the options <fo:inline font-family="monospace">dhfile</fo:inline> and
    <fo:inline font-family="monospace">fail_if_no_peer_cert</fo:inline> (also prefixed).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">client_</fo:inline>-prefixed options are used when the distribution 
    initiates a connection to another node. <fo:inline font-family="monospace">server_</fo:inline>-prefixed 
    options are used when accepting a connection from a remote node.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Raw socket options, such as <fo:inline font-family="monospace">packet</fo:inline> and <fo:inline font-family="monospace">size</fo:inline> must not 
    be specified on the command line.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The command-line argument for specifying the SSL options is named
    <fo:inline font-family="monospace">-ssl_dist_opt</fo:inline> and is to be followed by pairs of
    SSL options and their values. Argument <fo:inline font-family="monospace">-ssl_dist_opt</fo:inline> can
    be repeated any number of times.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An example command line can now look as follows
      (line breaks in the command are for readability, 
      and are not be there when typed):</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ erl -boot /home/me/ssl/start_ssl -proto_dist inet_tls
  -ssl_dist_opt server_certfile "/home/me/ssl/erlserver.pem" 
  -ssl_dist_opt server_secure_renegotiate true client_secure_renegotiate true
  -sname ssl_test
Erlang (BEAM) emulator version 5.0 [source]
 
Eshell V5.0  (abort with ^G)
(ssl_test@myhost)1&gt;     </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A node started in this way is fully functional, using SSL
      as the distribution protocol.</fo:block>
  <fo:block id="idp635584" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.4 
      Setting up Environment to Always Use SSL</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A convenient way to specify arguments to Erlang is to use environment 
      variable <fo:inline font-family="monospace">ERL_FLAGS</fo:inline>. All the flags needed to
      use the SSL distribution can be specified in that variable and are
      then interpreted as command-line arguments for all
      subsequent invocations of Erlang.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In a Unix (Bourne) shell, it can look as follows (line breaks are for
      readability, they are not to be there when typed):</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ ERL_FLAGS="-boot /home/me/ssl/start_ssl -proto_dist inet_tls
  -ssl_dist_opt server_certfile /home/me/ssl/erlserver.pem
  -ssl_dist_opt server_secure_renegotiate true client_secure_renegotiate true"
$ export ERL_FLAGS
$ erl -sname ssl_test
Erlang (BEAM) emulator version 5.0 [source]
 
Eshell V5.0  (abort with ^G)
(ssl_test@myhost)1&gt; init:get_arguments().
[{root,["/usr/local/erlang"]},
 {progname,["erl "]},
 {sname,["ssl_test"]},
 {boot,["/home/me/ssl/start_ssl"]},
 {proto_dist,["inet_tls"]},
 {ssl_dist_opt,["server_certfile","/home/me/ssl/erlserver.pem"]},
 {ssl_dist_opt,["server_secure_renegotiate","true",
                "client_secure_renegotiate","true"]
 {home,["/home/me"]}]    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">init:get_arguments()</fo:inline> call verifies that the correct
      arguments are supplied to the emulator.</fo:block>
  <fo:block id="idp640192" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.4.5 
      Using SSL distribution over IPv6</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is possible to use SSL distribution over IPv6 instead of
    IPv4. To do this, pass the option <fo:inline font-family="monospace">-proto_dist inet6_tls</fo:inline>
    instead of <fo:inline font-family="monospace">-proto_dist inet_tls</fo:inline> when starting Erlang,
    either on the command line or in the <fo:inline font-family="monospace">ERL_FLAGS</fo:inline> environment
    variable.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An example command line with this option would look like this:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
$ erl -boot /home/me/ssl/start_ssl -proto_dist inet6_tls
  -ssl_dist_opt server_certfile "/home/me/ssl/erlserver.pem"
  -ssl_dist_opt server_secure_renegotiate true client_secure_renegotiate true
  -sname ssl_test
Erlang (BEAM) emulator version 5.0 [source]

Eshell V5.0  (abort with ^G)
(ssl_test@myhost)1&gt;     </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A node started in this way will only be able to communicate with
    other nodes using SSL distribution over IPv6.</fo:block>
  <fo:block id="idp114320" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">2   
      Reference Manual</fo:block><fo:block page-break-before="always" id="idp743600" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">ssl</fo:marker>ssl</fo:block>Application</fo:block>
  <fo:block/>
  ssl
  The ssl application provides secure communication over
  sockets.

  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      The ssl application is an implementation of the SSL/TLS protocol in Erlang.
    </fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Supported SSL/TLS-versions are SSL-3.0, TLS-1.0,
      TLS-1.1, and TLS-1.2.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>For security reasons SSL-2.0 is not supported.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>For security reasons SSL-3.0 is no longer supported by default,
      but can be configured.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>For security reasons DES cipher suites are no longer supported by default,
      but can be configured.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block> Renegotiation Indication Extension <fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC 5746</fo:basic-link></fo:inline> is supported
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Ephemeral Diffie-Hellman cipher suites are supported,
      but not Diffie Hellman Certificates cipher suites.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Elliptic Curve cipher suites are supported if the Crypto 
      application supports it and named curves are used.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Export cipher suites are not supported as the
      U.S. lifted its export restrictions in early 2000.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>IDEA cipher suites are not supported as they have
      become deprecated by the latest TLS specification so it is not 
      motivated to implement them.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Compression is not supported.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>CRL validation is supported.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Policy certificate extensions are not supported.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>'Server Name Indication' extension
      (<fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC 6066</fo:basic-link></fo:inline>) is supported.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Application Layer Protocol Negotiation (ALPN) and its successor Next Protocol Negotiation (NPN)
      are supported. </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>It is possible to use Pre-Shared Key (PSK) and Secure Remote Password (SRP)
      cipher suites, but they are not enabled by default.
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
   

  <fo:block id="idp703280" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">DEPENDENCIES</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The SSL application uses the <fo:inline font-family="monospace">public_key</fo:inline> and
    Crypto application to handle public keys and encryption, hence
    these applications must be loaded for the SSL application to work. 
    In an embedded environment this means they must be started with
    <fo:inline font-family="monospace">application:start/[1,2]</fo:inline> before the SSL application is 
    started.</fo:block>
  

  <fo:block id="idp701232" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">CONFIGURATION</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The application environment configuration parameters in this section 
    are defined for the SSL application. For more information 
    about configuration parameters, see the 
    <fo:inline font-style="italic">application(3)</fo:inline>
    manual page in Kernel.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The environment parameters can be set on the command line,
    for example:</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erl -ssl protocol_version "['tlsv1.2', 'tlsv1.1']"</fo:inline></fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">protocol_version = </fo:inline><fo:inline font-style="italic">ssl:protocol()</fo:inline><fo:inline font-family="monospace">&lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Protocol supported by started clients and
      servers. If this option is not set, it defaults to all
      protocols currently supported by the SSL application.
      This option can be overridden by the version option
      to <fo:inline font-family="monospace">ssl:connect/[2,3]</fo:inline> and <fo:inline font-family="monospace">ssl:listen/2</fo:inline>.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">session_lifetime = integer() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Maximum lifetime of the session data in seconds. Defaults to 24 hours which is the maximum
      recommended lifetime by <fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC 5246</fo:basic-link></fo:inline>. However
      sessions may be invalidated earlier due to the maximum limitation of the session cache table.
      </fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">session_cb = atom() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Name of the session cache callback module that implements
      the <fo:inline font-family="monospace">ssl_session_cache_api</fo:inline> behavior. Defaults to
      <fo:inline font-family="monospace">ssl_session_cache</fo:inline>.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">session_cb_init_args = proplist:proplist() &lt;optional&gt;</fo:inline></fo:block>

      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">List of extra user-defined arguments to the <fo:inline font-family="monospace">init</fo:inline> function
      in the session cache callback module. Defaults to <fo:inline font-family="monospace">[]</fo:inline>.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">session_cache_client_max = integer() &lt;optional&gt;</fo:inline><fo:block/></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Limits the growth of the clients session cache, that is
      how many sessions towards servers that are cached to be used by
      new client connections.  If the maximum number of sessions is
      reached, the current cache entries will be invalidated
      regardless of their remaining lifetime. Defaults to
      1000.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"> <fo:inline font-family="monospace">session_cache_server_max = integer() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Limits the growth of the servers session cache, that is
      how many client sessions are cached by the server. If the
      maximum number of sessions is reached, the current cache entries
      will be invalidated regardless of their remaining
      lifetime. Defaults to 1000.</fo:block></fo:block></fo:block-container>
      
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ssl_pem_cache_clean = integer() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	  Number of milliseconds between PEM cache validations. Defaults to 2 minutes.
	</fo:block>
	<fo:inline font-style="italic">ssl:clear_pem_cache/0</fo:inline>
	
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">bypass_pem_cache = boolean() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Introduced in ssl-8.0.2. Disables the PEM-cache.
	The PEM cache has proven to be a bottleneck, until the
	implementation has been improved this can be used as
	a workaround. Defaults to false.
	</fo:block>
      </fo:block></fo:block-container>
      
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">alert_timeout = integer() &lt;optional&gt;</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	  Number of milliseconds between sending of a fatal alert and
	  closing the connection. Waiting a little while improves the
	  peers chances to properly receiving the alert so it may
	  shutdown gracefully. Defaults to 5000 milliseconds.   
	</fo:block>
      </fo:block></fo:block-container>
    </fo:block>
  

  <fo:block id="idp1049616" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">ERROR LOGGER AND EVENT HANDLERS</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The SSL application uses the default <fo:inline font-style="italic">OTP error logger</fo:inline> to log
    unexpected errors and TLS alerts. The logging of TLS alerts may be
    turned off with the <fo:inline font-family="monospace">log_alert</fo:inline> option. </fo:block>
  

  <fo:block id="idp339776" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">SEE ALSO</fo:block>
    
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">application(3)</fo:inline></fo:block>
  
  
<fo:block page-break-before="always" id="idp681136" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">ssl</fo:marker>ssl</fo:block>Erlang module</fo:block>
  <fo:block/>
  ssl
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      This module contains interface functions for the SSL/TLS protocol.
      For detailed information about the supported standards see 
      <fo:inline font-style="italic">ssl(6)</fo:inline>.
    </fo:block>
  
    
  <fo:block id="idp375728" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">DATA TYPES</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following data types are used in the functions for SSL:</fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">boolean() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">true | false</fo:inline></fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">option() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">socketoption() | ssl_option() | transport_option()</fo:inline></fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">socketoption() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">proplists:property()</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default socket options are
      <fo:inline font-family="monospace">[{mode,list},{packet, 0},{header, 0},{active, true}]</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For valid options, see the
      <fo:inline font-style="italic">inet(3)</fo:inline> and
      <fo:inline font-style="italic">gen_tcp(3)</fo:inline> manual pages
      in Kernel.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ssl_option() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{verify, verify_type()}</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| {verify_fun, {fun(), term()}}</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| {fail_if_no_peer_cert, boolean()}</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| {depth, integer()}</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| {cert, public_key:der_encoded()}</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| {certfile, path()}</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| {key, {'RSAPrivateKey'| 'DSAPrivateKey' | 'ECPrivateKey' 
	| 'PrivateKeyInfo', public_key:der_encoded()}}</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| {keyfile, path()}</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| {password, string()}</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| {cacerts, [public_key:der_encoded()]}</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| {cacertfile, path()}</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| {dh, public_key:der_encoded()}</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| {dhfile, path()}</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| {ciphers, ciphers()}</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| {user_lookup_fun, {fun(), term()}}, {psk_identity, string()},
	{srp_identity, {string(), string()}}</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| {reuse_sessions, boolean()}</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| {reuse_session, fun()} {next_protocols_advertised, [binary()]}</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| {client_preferred_next_protocols, {client | server,
	[binary()]} | {client | server, [binary()], binary()}}</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| {log_alert, boolean()}</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| {server_name_indication, hostname() | disable}</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| {sni_hosts, [{hostname(), [ssl_option()]}]}</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| {sni_fun, SNIfun::fun()}</fo:inline></fo:block>
      </fo:block></fo:block-container>
      
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">transport_option() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{cb_info, {CallbackModule::atom(), DataTag::atom(),

      ClosedTag::atom(), ErrTag:atom()}}</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Defaults to <fo:inline font-family="monospace">{gen_tcp, tcp, tcp_closed, tcp_error}</fo:inline>. Can be used
      to customize the transport layer. The callback module must implement a
      reliable transport protocol, behave as <fo:inline font-family="monospace">gen_tcp</fo:inline>, and have functions
      corresponding to <fo:inline font-family="monospace">inet:setopts/2</fo:inline>, <fo:inline font-family="monospace">inet:getopts/2</fo:inline>,
      <fo:inline font-family="monospace">inet:peername/1</fo:inline>, <fo:inline font-family="monospace">inet:sockname/1</fo:inline>, and <fo:inline font-family="monospace">inet:port/1</fo:inline>.
      The callback <fo:inline font-family="monospace">gen_tcp</fo:inline> is treated specially and calls <fo:inline font-family="monospace">inet</fo:inline>
      directly.</fo:block>
      <fo:block space-after="0.25em" space-before="0.25em">
	<fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">CallbackModule =</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">atom()</fo:inline></fo:block></fo:block></fo:block-container>
	<fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">DataTag =</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">atom()</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Used in socket data message.</fo:block></fo:block></fo:block-container>
	<fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ClosedTag =</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">atom()</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Used in socket close message.</fo:block></fo:block></fo:block-container>
      </fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">verify_type() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">verify_none | verify_peer</fo:inline></fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">path() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">string()</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Represents a file path.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">public_key:der_encoded() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">binary()</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">ASN.1 DER-encoded entity as an Erlang binary.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">host() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">hostname() | ipaddress()</fo:inline></fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">hostname() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">string() - DNS hostname</fo:inline></fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ip_address() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{N1,N2,N3,N4} % IPv4 | {K1,K2,K3,K4,K5,K6,K7,K8} % IPv6
      </fo:inline></fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sslsocket() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">opaque()</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">protocol() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">sslv3 | tlsv1 | 'tlsv1.1' | 'tlsv1.2'</fo:inline></fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ciphers() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">= [ciphersuite()] | string()</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">According to old API.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ciphersuite() =</fo:inline></fo:block>

      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{key_exchange(), cipher(), MAC::hash()} |
      {key_exchange(), cipher(), MAC::hash(), PRF::hash()}</fo:inline></fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">key_exchange()=</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">rsa | dhe_dss | dhe_rsa | dh_anon | psk | dhe_psk
      | rsa_psk | srp_anon | srp_dss | srp_rsa | ecdh_anon | ecdh_ecdsa
      | ecdhe_ecdsa | ecdh_rsa | ecdhe_rsa</fo:inline></fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">cipher() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">rc4_128 | des_cbc | '3des_ede_cbc'
      | aes_128_cbc | aes_256_cbc | aes_128_gcm | aes_256_gcm | chacha20_poly1305</fo:inline></fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">hash() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">md5 | sha | sha224 | sha256 | sha348 | sha512</fo:inline></fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">prf_random() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">client_random | server_random</fo:inline></fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">srp_param_type() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">srp_1024 | srp_1536 | srp_2048 | srp_3072
      | srp_4096 | srp_6144 | srp_8192</fo:inline></fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">SNIfun::fun()</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">= fun(ServerName :: string()) -&gt; [ssl_option()]</fo:inline></fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">named_curve() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">sect571r1 | sect571k1 | secp521r1 | brainpoolP512r1
       | sect409k1 | sect409r1 | brainpoolP384r1 | secp384r1
       | sect283k1 | sect283r1 | brainpoolP256r1 | secp256k1 | secp256r1
       | sect239k1 | sect233k1 | sect233r1 | secp224k1 | secp224r1
       | sect193r1 | sect193r2 | secp192k1 | secp192r1 | sect163k1
       | sect163r1 | sect163r2 | secp160k1 | secp160r1 | secp160r2</fo:inline></fo:block></fo:block></fo:block-container>

    </fo:block>
  

  <fo:block id="idp1044768" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">SSL OPTION DESCRIPTIONS - COMMON for SERVER and CLIENT</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following options have the same meaning in the client and 
    the server:</fo:block>
    
    <fo:block space-after="0.25em" space-before="0.25em">

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{protocol, tls | dtls}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Choose TLS or DTLS protocol for the transport layer security.
      Defaults to <fo:inline font-family="monospace">tls</fo:inline> Introduced in OTP 20, DTLS support is considered
      experimental in this release. DTLS over other transports than UDP are not yet supported.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{cert, public_key:der_encoded()}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The DER-encoded users certificate. If this option
      is supplied, it overrides option <fo:inline font-family="monospace">certfile</fo:inline>.</fo:block></fo:block></fo:block-container>
      
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{certfile, path()}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Path to a file containing the user certificate.</fo:block></fo:block></fo:block-container>
      
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{key, {'RSAPrivateKey'| 'DSAPrivateKey' | 'ECPrivateKey'
      |'PrivateKeyInfo', public_key:der_encoded()}}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The DER-encoded user's private key. If this option 
      is supplied, it overrides option <fo:inline font-family="monospace">keyfile</fo:inline>.</fo:block></fo:block></fo:block-container>
      
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{keyfile, path()}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Path to the file containing the user's
      private PEM-encoded key. As PEM-files can contain several
      entries, this option defaults to the same file as given by
      option <fo:inline font-family="monospace">certfile</fo:inline>.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{password, string()}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">String containing the user's password. Only used if the 
      private keyfile is password-protected.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{ciphers, ciphers()}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Supported cipher suites. The function
      <fo:inline font-family="monospace">cipher_suites/0</fo:inline> can be used to find all ciphers that are
      supported by default. <fo:inline font-family="monospace">cipher_suites(all)</fo:inline> can be called
      to find all available cipher suites. Pre-Shared Key 
      (<fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC 4279</fo:basic-link></fo:inline> and
      <fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC 5487</fo:basic-link></fo:inline>), 
      Secure Remote Password 
      (<fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC 5054</fo:basic-link></fo:inline>), RC4 cipher suites,
      and anonymous cipher suites only work if explicitly enabled by
      this option; they are supported/enabled by the peer also.
      Anonymous cipher suites are supported for testing purposes
      only and are not be used when security matters.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{eccs, [named_curve()]}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"> Allows to specify the order of preference for named curves
      and to restrict their usage when using a cipher suite supporting them.
      </fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{secure_renegotiate, boolean()}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies if to reject renegotiation attempt that does
      not live up to 
      <fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC 5746</fo:basic-link></fo:inline>. 
      By default <fo:inline font-family="monospace">secure_renegotiate</fo:inline> is set to <fo:inline font-family="monospace">false</fo:inline>, 
      that is, secure renegotiation is used if possible,
      but it falls back to insecure renegotiation if the peer
      does not support 
      <fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC 5746</fo:basic-link></fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{depth, integer()}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Maximum number of non-self-issued
      intermediate certificates that can follow the peer certificate 
      in a valid certification path. So, if depth is 0 the PEER must 
      be signed by the trusted ROOT-CA directly; if 1 the path can 
      be PEER, CA, ROOT-CA; if 2 the path can be PEER, CA, CA, 
      ROOT-CA, and so on. The default value is 1.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{verify_fun, {Verifyfun :: fun(), InitialUserState ::
      term()}}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The verification fun is to be defined as follows:</fo:block>

	<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
fun(OtpCert :: #'OTPCertificate'{}, Event :: {bad_cert, Reason :: atom() | {revoked,
atom()}} |
	     {extension, #'Extension'{}}, InitialUserState :: term()) -&gt;
	{valid, UserState :: term()} | {valid_peer, UserState :: term()} |
	{fail, Reason :: term()} | {unknown, UserState :: term()}.
	</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The verification fun is called during the X509-path
	validation when an error or an extension unknown to the SSL
	application is encountered. It is also called
	when a certificate is considered valid by the path validation
	to allow access to each certificate in the path to the user
	application. It differentiates between the peer
	certificate and the CA certificates by using <fo:inline font-family="monospace">valid_peer</fo:inline> or
	<fo:inline font-family="monospace">valid</fo:inline> as second argument to the verification fun. See the
	<fo:inline font-style="italic">public_key User's
	Guide</fo:inline> for definition of <fo:inline font-family="monospace">#'OTPCertificate'{}</fo:inline> and
	<fo:inline font-family="monospace">#'Extension'{}</fo:inline>.</fo:block>

	<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the verify callback fun returns <fo:inline font-family="monospace">{fail, Reason}</fo:inline>,
	  the verification process is immediately stopped, an alert is
	  sent to the peer, and the TLS/SSL handshake terminates.</fo:block></fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the verify callback fun returns <fo:inline font-family="monospace">{valid, UserState}</fo:inline>,
	  the verification process continues.</fo:block></fo:block></fo:list-item-body></fo:list-item> 
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the verify callback fun always returns
	  <fo:inline font-family="monospace">{valid, UserState}</fo:inline>, the TLS/SSL handshake does not
	  terminate regarding verification failures and the connection is
	  established.</fo:block></fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If called with an extension unknown to the user application,
	  return value <fo:inline font-family="monospace">{unknown, UserState}</fo:inline> is to be used.</fo:block>

	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that if the fun returns <fo:inline font-family="monospace">unknown</fo:inline> for an extension marked
	  as critical, validation will fail.</fo:block>
	  </fo:block></fo:list-item-body></fo:list-item>
	</fo:list-block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default option <fo:inline font-family="monospace">verify_fun</fo:inline> in <fo:inline font-family="monospace">verify_peer mode</fo:inline>:</fo:block>

      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{fun(_,{bad_cert, _} = Reason, _) -&gt;
	 {fail, Reason};
    (_,{extension, _}, UserState) -&gt;
	 {unknown, UserState};
    (_, valid, UserState) -&gt;
	 {valid, UserState};
    (_, valid_peer, UserState) -&gt;
         {valid, UserState}
 end, []}
      </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Default option <fo:inline font-family="monospace">verify_fun</fo:inline> in mode <fo:inline font-family="monospace">verify_none</fo:inline>:</fo:block>

       <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
{fun(_,{bad_cert, _}, UserState) -&gt;
	 {valid, UserState};
    (_,{extension, #'Extension'{critical = true}}, UserState) -&gt;
	 {valid, UserState};
    (_,{extension, _}, UserState) -&gt;
	 {unknown, UserState};
    (_, valid, UserState) -&gt;
	 {valid, UserState};
    (_, valid_peer, UserState) -&gt;
         {valid, UserState}
 end, []}
      </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The possible path validation errors are given on form
      <fo:inline font-family="monospace">{bad_cert, Reason}</fo:inline> where <fo:inline font-family="monospace">Reason</fo:inline> is:</fo:block>

      <fo:block space-after="0.25em" space-before="0.25em">
	<fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">unknown_ca</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">No trusted CA was found in the trusted store. The trusted CA is
	normally a so called ROOT CA, which is a self-signed certificate. Trust can
	be claimed for an intermediate CA (trusted anchor does not have to be
	self-signed according to X-509) by using option <fo:inline font-family="monospace">partial_chain</fo:inline>.</fo:block>
	</fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">selfsigned_peer</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The chain consisted only of one self-signed certificate.</fo:block></fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">PKIX X-509-path validation error</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For possible reasons, see <fo:inline font-style="italic">public_key:pkix_path_validation/3</fo:inline>
	</fo:block></fo:block></fo:block-container>
      </fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{crl_check, boolean() | peer | best_effort }</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Perform CRL (Certificate Revocation List) verification
	<fo:inline font-style="italic">
	(public_key:pkix_crls_validate/3)</fo:inline> on all the certificates during the path validation
	<fo:inline font-style="italic">(public_key:pkix_path_validation/3)
	</fo:inline>
	of the certificate chain. Defaults to <fo:inline font-family="monospace">false</fo:inline>.</fo:block>
	
	<fo:block space-after="0.25em" space-before="0.25em">
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">peer</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">check is only performed on the peer certificate.</fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">best_effort</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">if certificate revocation status can not be determined
	  it will be accepted as valid.</fo:block></fo:block-container>
	</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The CA certificates specified for the connection will be used to 
	construct the certificate chain validating the CRLs.</fo:block>
 	
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The CRLs will be fetched from a local or external cache. See
	<fo:inline font-style="italic">ssl_crl_cache_api(3)</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{crl_cache, {Module :: atom(), {DbHandle :: internal | term(), Args :: list()}}}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specify how to perform lookup and caching of certificate revocation lists.
	<fo:inline font-family="monospace">Module</fo:inline> defaults to <fo:inline font-style="italic">ssl_crl_cache</fo:inline>
	with <fo:inline font-family="monospace"> DbHandle </fo:inline> being <fo:inline font-family="monospace">internal</fo:inline> and an
	empty argument list.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are two implementations available:</fo:block>

	<fo:block space-after="0.25em" space-before="0.25em">
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ssl_crl_cache</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module maintains a cache of CRLs.  CRLs can be
	    added to the cache using the function <fo:inline font-style="italic">ssl_crl_cache:insert/1</fo:inline>,
	    and optionally automatically fetched through HTTP if the
	    following argument is specified:</fo:block>

	    <fo:block space-after="0.25em" space-before="0.25em">
	      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{http, timeout()}</fo:inline></fo:block>
	      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
		Enables fetching of CRLs specified as http URIs in<fo:inline font-style="italic">X509 certificate extensions</fo:inline>.
		Requires the OTP inets application.</fo:block>
	      </fo:block></fo:block-container>
	    </fo:block>
	  </fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ssl_crl_hash_dir</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module makes use of a directory where CRLs are
	    stored in files named by the hash of the issuer name.</fo:block>

	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file names consist of eight hexadecimal digits
	    followed by <fo:inline font-family="monospace">.rN</fo:inline>, where <fo:inline font-family="monospace">N</fo:inline> is an integer,
	    e.g. <fo:inline font-family="monospace">1a2b3c4d.r0</fo:inline>.  For the first version of the
	    CRL, <fo:inline font-family="monospace">N</fo:inline> starts at zero, and for each new version,
	    <fo:inline font-family="monospace">N</fo:inline> is incremented by one.  The OpenSSL utility
	    <fo:inline font-family="monospace">c_rehash</fo:inline> creates symlinks according to this
	    pattern.</fo:block>

	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For a given hash value, this module finds all
	    consecutive <fo:inline font-family="monospace">.r*</fo:inline> files starting from zero, and those
	    files taken together make up the revocation list.  CRL
	    files whose <fo:inline font-family="monospace">nextUpdate</fo:inline> fields are in the past, or
	    that are issued by a different CA that happens to have the
	    same name hash, are excluded.</fo:block>

	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following argument is required:</fo:block>

	    <fo:block space-after="0.25em" space-before="0.25em">
	      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{dir, string()}</fo:inline></fo:block>
	      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the directory in which the CRLs can be found.</fo:block></fo:block></fo:block-container>
	    </fo:block>

	  </fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">max_handshake_size</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">
	    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Integer (24 bits unsigned). Used to limit the size of
	    valid TLS handshake packets to avoid DoS attacks.
	    Defaults to 256*1024.</fo:block>
          </fo:block></fo:block-container>
          
	</fo:block>

      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{partial_chain, fun(Chain::[DerCert]) -&gt; {trusted_ca, DerCert} |
      unknown_ca }</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Claim an intermediate CA in the chain as trusted. TLS then
      performs <fo:inline font-style="italic">public_key:pkix_path_validation/3</fo:inline>
      with the selected CA as trusted anchor and the rest of the chain.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{versions, [protocol()]}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">TLS protocol versions supported by started clients and servers.
      This option overrides the application environment option
      <fo:inline font-family="monospace">protocol_version</fo:inline>. If the environment option is not set, it defaults
      to all versions, except SSL-3.0, supported by the SSL application.
      See also <fo:inline font-style="italic">ssl(6).</fo:inline></fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{hibernate_after, integer()|undefined}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When an integer-value is specified, <fo:inline font-family="monospace">ssl_connection</fo:inline>
      goes into hibernation after the specified number of milliseconds
      of inactivity, thus reducing its memory footprint. When
      <fo:inline font-family="monospace">undefined</fo:inline> is specified (this is the default), the process
      never goes into hibernation.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{user_lookup_fun, {Lookupfun :: fun(), UserState :: term()}}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The lookup fun is to defined as follows:</fo:block>

	<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
fun(psk, PSKIdentity ::string(), UserState :: term()) -&gt;
	{ok, SharedSecret :: binary()} | error;
fun(srp, Username :: string(), UserState :: term()) -&gt;
	{ok, {SRPParams :: srp_param_type(), Salt :: binary(), DerivedKey :: binary()}} | error.
	</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For Pre-Shared Key (PSK) cipher suites, the lookup fun is
	called by the client and server to determine the shared
	secret. When called by the client, <fo:inline font-family="monospace">PSKIdentity</fo:inline> is set to the
	hint presented by the server or to undefined. When called by the
	server, <fo:inline font-family="monospace">PSKIdentity</fo:inline> is the identity presented by the client.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For Secure Remote Password (SRP), the fun is only used by the server to
	obtain parameters that it uses to generate its session keys.
	<fo:inline font-family="monospace">DerivedKey</fo:inline> is to be derived according to
	<fo:inline font-weight="bold"><fo:basic-link external-destination="href"> RFC 2945</fo:basic-link></fo:inline> and
	<fo:inline font-weight="bold"><fo:basic-link external-destination="href"> RFC 5054</fo:basic-link></fo:inline>:
	<fo:inline font-family="monospace">crypto:sha([Salt, crypto:sha([Username, &lt;&lt;$:&gt;&gt;, Password])])</fo:inline>
	</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{padding_check, boolean()}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Affects TLS-1.0 connections only.
      If set to <fo:inline font-family="monospace">false</fo:inline>, it disables the block cipher padding check
      to be able to interoperate with legacy software.</fo:block>
      <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Using <fo:inline font-family="monospace">{padding_check, boolean()}</fo:inline> makes TLS
	vulnerable to the Poodle attack.</fo:block></fo:block>
      </fo:block></fo:block-container>

      

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{beast_mitigation, one_n_minus_one | zero_n | disabled}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Affects SSL-3.0 and TLS-1.0 connections only. Used to change the BEAST
       mitigation strategy to interoperate with legacy software.
       Defaults to <fo:inline font-family="monospace">one_n_minus_one</fo:inline>.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">one_n_minus_one</fo:inline> - Perform 1/n-1 BEAST mitigation.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">zero_n</fo:inline> - Perform 0/n BEAST mitigation.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">disabled</fo:inline> - Disable BEAST mitigation.</fo:block>

      <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Using <fo:inline font-family="monospace">{beast_mitigation, disabled}</fo:inline> makes SSL or TLS
        vulnerable to the BEAST attack.</fo:block></fo:block>
      </fo:block></fo:block-container>
      </fo:block>

  
  
  <fo:block id="idp874368" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">SSL OPTION DESCRIPTIONS - CLIENT SIDE</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following options are client-specific or have a slightly different
    meaning in the client than in the server:</fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{verify, verify_type()}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In mode <fo:inline font-family="monospace">verify_none</fo:inline> the default behavior is to allow
      all x509-path validation errors. See also option <fo:inline font-family="monospace">verify_fun</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{reuse_sessions, boolean()}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies if the client is to try to reuse sessions
      when possible.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{cacerts, [public_key:der_encoded()]}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The DER-encoded trusted certificates. If this option
      is supplied it overrides option <fo:inline font-family="monospace">cacertfile</fo:inline>.</fo:block></fo:block></fo:block-container>
      
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{cacertfile, path()}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Path to a file containing PEM-encoded CA certificates. The CA
      certificates are used during server authentication and when building the
      client certificate chain.</fo:block>
    </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{alpn_advertised_protocols, [binary()]}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The list of protocols supported by the client to be sent to the
      server to be used for an Application-Layer Protocol Negotiation (ALPN).
      If the server supports ALPN then it will choose a protocol from this
      list; otherwise it will fail the connection with a "no_application_protocol"
      alert. A server that does not support ALPN will ignore this value.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The list of protocols must not contain an empty binary.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The negotiated protocol can be retrieved using the <fo:inline font-family="monospace">negotiated_protocol/1</fo:inline> function.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{client_preferred_next_protocols, {Precedence :: server | client, ClientPrefs :: [binary()]}}</fo:inline><fo:block/>
      <fo:inline font-family="monospace">{client_preferred_next_protocols, {Precedence :: server | client, ClientPrefs :: [binary()], Default :: binary()}}</fo:inline></fo:block>
	   <fo:block-container><fo:block start-indent="2em">
	   <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Indicates that the client is to try to perform Next Protocol
	   Negotiation.</fo:block>

	   <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If precedence is server, the negotiated protocol is the
	   first protocol to be shown on the server advertised list, which is
	   also on the client preference list.</fo:block>

	   <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If precedence is client, the negotiated protocol is the
	   first protocol to be shown on the client preference list, which is
	   also on the server advertised list.</fo:block>

	   <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the client does not support any of the server advertised
	   protocols or the server does not advertise any protocols, the
	   client falls back to the first protocol in its list or to the
	   default protocol (if a default is supplied). If the
	   server does not support Next Protocol Negotiation, the
	   connection terminates if no default protocol is supplied.</fo:block>
	   </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{psk_identity, string()}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the identity the client presents to the server.
      The matching secret is found by calling <fo:inline font-family="monospace">user_lookup_fun</fo:inline>.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{srp_identity, {Username :: string(), Password :: string()}
      </fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the username and password to use to authenticate
      to the server.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{server_name_indication, HostName :: hostname()}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specify the hostname to be used in TLS Server Name Indication extension.
      Is usefull when upgrading a TCP socket to a TLS socket or if the hostname can not be 
      derived from the Host argument to <fo:inline font-style="italic">ssl:connect/3</fo:inline>.
      Will also cause the client to preform host name verification of the peer certificate
      <fo:inline font-style="italic">public_key:pkix_verify_hostname(PeerCert, [{dns_id, HostName}])</fo:inline>
      </fo:block> during the x509-path validation. If the check fails the error {bad_cert, hostname_check_failiure} will be
      propagated to the path validation fun <fo:inline font-style="italic">verify_fun</fo:inline>
      </fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{server_name_indication, disable}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When starting a TLS connection without upgrade, the Server Name
        Indication extension is sent if possible that is can be derived from the Host argument 
        to <fo:inline font-style="italic">ssl:connect/3</fo:inline>.  
	This option can be used to disable that behavior.</fo:block>
	<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"> Note that this also disables the default host name verification check of the peer certificate.</fo:block></fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{fallback, boolean()}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"> Send special cipher suite TLS_FALLBACK_SCSV to avoid undesired TLS version downgrade.
	Defaults to false</fo:block>
	<fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note this option is not needed in normal TLS usage and should not be used
	to implement new clients. But legacy clients that retries connections in the following manner</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace"> ssl:connect(Host, Port, [...{versions, ['tlsv2', 'tlsv1.1', 'tlsv1', 'sslv3']}])</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">  ssl:connect(Host, Port, [...{versions, [tlsv1.1', 'tlsv1', 'sslv3']}, {fallback, true}])</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">  ssl:connect(Host, Port, [...{versions, ['tlsv1', 'sslv3']}, {fallback, true}]) </fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">  ssl:connect(Host, Port, [...{versions, ['sslv3']}, {fallback, true}]) </fo:inline></fo:block>
	 
	 <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">may use it to avoid undesired TLS version downgrade. Note that TLS_FALLBACK_SCSV must also
	 be supported by the server for the prevention to work.
	</fo:block></fo:block>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{signature_algs, [{hash(), ecdsa | rsa | dsa}]}</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In addition to the algorithms negotiated by the cipher
	suite used for key exchange, payload encryption, message
	authentication and pseudo random calculation, the TLS signature
	algorithm extension <fo:inline font-weight="bold"><fo:basic-link external-destination="href">Section 7.4.1.4.1 in RFC 5246</fo:basic-link></fo:inline> may be
	used, from TLS 1.2, to negotiate which signature algorithm to use during the
	TLS handshake. If no lower TLS versions than 1.2 are supported,
	the client will send a TLS signature algorithm extension
	with the algorithms specified by this option.
	Defaults to</fo:block>
	
	<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">[
%% SHA2
{sha512, ecdsa},
{sha512, rsa},
{sha384, ecdsa},
{sha384, rsa},
{sha256, ecdsa},
{sha256, rsa},
{sha224, ecdsa},
{sha224, rsa},
%% SHA
{sha, ecdsa},
{sha, rsa},
{sha, dsa},
]</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	The algorithms should be in the preferred order.
	Selected signature algorithm can restrict which hash functions
	that may be selected. Default support for {md5, rsa} removed in ssl-8.0
	</fo:block>
	</fo:block></fo:block-container>
      </fo:block>
   
   
  <fo:block id="idp944864" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">SSL OPTION DESCRIPTIONS - SERVER SIDE</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following options are server-specific or have a slightly different
    meaning in the server than in the client:</fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{cacerts, [public_key:der_encoded()]}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The DER-encoded trusted certificates. If this option
      is supplied it overrides option <fo:inline font-family="monospace">cacertfile</fo:inline>.</fo:block></fo:block></fo:block-container>
      
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{cacertfile, path()}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Path to a file containing PEM-encoded CA
      certificates. The CA certificates are used to build the server
      certificate chain and for client authentication. The CAs are
      also used in the list of acceptable client CAs passed to the
      client when a certificate is requested. Can be omitted if there
      is no need to verify the client and if there are no
      intermediate CAs for the server certificate.</fo:block></fo:block></fo:block-container>
  
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{dh, public_key:der_encoded()}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The DER-encoded Diffie-Hellman parameters. If specified,
      it overrides option <fo:inline font-family="monospace">dhfile</fo:inline>.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{dhfile, path()}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Path to a file containing PEM-encoded Diffie Hellman parameters
      to be used by the server if a cipher suite using Diffie Hellman key
      exchange is negotiated. If not specified, default parameters are used.
      </fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{verify, verify_type()}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A server only does x509-path validation in mode <fo:inline font-family="monospace">verify_peer</fo:inline>,
      as it then sends a certificate request to the client
      (this message is not sent if the verify option is <fo:inline font-family="monospace">verify_none</fo:inline>).
      You can then also want to specify option <fo:inline font-family="monospace">fail_if_no_peer_cert</fo:inline>.
      </fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{fail_if_no_peer_cert, boolean()}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Used together with <fo:inline font-family="monospace">{verify, verify_peer}</fo:inline> by an SSL server.
      If set to <fo:inline font-family="monospace">true</fo:inline>, the server fails if the client does not have
      a certificate to send, that is, sends an empty certificate. If set to
      <fo:inline font-family="monospace">false</fo:inline>, it fails only if the client sends an invalid
      certificate (an empty certificate is considered valid). Defaults to false.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{reuse_sessions, boolean()}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies if the server is to agree to reuse sessions
      when requested by the clients. See also option <fo:inline font-family="monospace">reuse_session</fo:inline>.
      </fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{reuse_session, fun(SuggestedSessionId,
      PeerCert, Compression, CipherSuite) -&gt; boolean()}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Enables the SSL server to have a local policy
      for deciding if a session is to be reused or not.
      Meaningful only if <fo:inline font-family="monospace">reuse_sessions</fo:inline> is set to <fo:inline font-family="monospace">true</fo:inline>.
      <fo:inline font-family="monospace">SuggestedSessionId</fo:inline> is a <fo:inline font-family="monospace">binary()</fo:inline>, <fo:inline font-family="monospace">PeerCert</fo:inline> is
      a DER-encoded certificate, <fo:inline font-family="monospace">Compression</fo:inline> is an enumeration integer,
      and <fo:inline font-family="monospace">CipherSuite</fo:inline> is of type <fo:inline font-family="monospace">ciphersuite()</fo:inline>.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{alpn_preferred_protocols, [binary()]}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Indicates the server will try to perform Application-Layer
      Protocol Negotiation (ALPN).</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The list of protocols is in order of preference. The protocol
      negotiated will be the first in the list that matches one of the
      protocols advertised by the client. If no protocol matches, the
      server will fail the connection with a "no_application_protocol" alert.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The negotiated protocol can be retrieved using the <fo:inline font-family="monospace">negotiated_protocol/1</fo:inline> function.</fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{next_protocols_advertised, Protocols :: [binary()]}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">List of protocols to send to the client if the client indicates that
      it supports the Next Protocol extension. The client can select a protocol
      that is not on this list. The list of protocols must not contain an empty
      binary. If the server negotiates a Next Protocol, it can be accessed
      using the <fo:inline font-family="monospace">negotiated_next_protocol/1</fo:inline> method.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{psk_identity, string()}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Specifies the server identity hint, which the server presents to
      the client.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{log_alert, boolean()}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If set to <fo:inline font-family="monospace">false</fo:inline>, error reports are not displayed.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{honor_cipher_order, boolean()}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If set to <fo:inline font-family="monospace">true</fo:inline>, use the server preference for cipher
      selection. If set to <fo:inline font-family="monospace">false</fo:inline> (the default), use the client
      preference.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{sni_hosts, [{hostname(), [ssl_option()]}]}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the server receives a SNI (Server Name Indication) from the client
      matching a host listed in the <fo:inline font-family="monospace">sni_hosts</fo:inline> option, the specific options for
      that host will override previously specified options.

      The option <fo:inline font-family="monospace">sni_fun</fo:inline>, and <fo:inline font-family="monospace">sni_hosts</fo:inline> are mutually exclusive.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{sni_fun, SNIfun::fun()}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the server receives a SNI (Server Name Indication) from the client,
      the given function will be called to retrieve <fo:inline font-family="monospace">[ssl_option()]</fo:inline> for the indicated server.
      These options will be merged into predefined <fo:inline font-family="monospace">[ssl_option()]</fo:inline>.

      The function should be defined as:
        <fo:inline font-family="monospace">fun(ServerName :: string()) -&gt; [ssl_option()]</fo:inline>
      and can be specified as a fun or as named <fo:inline font-family="monospace">fun module:function/1</fo:inline>

      The option <fo:inline font-family="monospace">sni_fun</fo:inline>, and <fo:inline font-family="monospace">sni_hosts</fo:inline> are mutually exclusive.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{client_renegotiation, boolean()}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">In protocols that support client-initiated renegotiation, the cost
      of resources of such an operation is higher for the server than the
      client. This can act as a vector for denial of service attacks. The SSL
      application already takes measures to counter-act such attempts,
      but client-initiated renegotiation can be strictly disabled by setting
      this option to <fo:inline font-family="monospace">false</fo:inline>. The default value is <fo:inline font-family="monospace">true</fo:inline>.
      Note that disabling renegotiation can result in long-lived connections
      becoming unusable due to limits on the number of messages the underlying
      cipher suite can encipher.
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{honor_cipher_order, boolean()}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">If true, use the server's preference for cipher selection. If false
      (the default), use the client's preference.
      </fo:block></fo:block-container>
      
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{honor_ecc_order, boolean()}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">If true, use the server's preference for ECC curve selection. If false
      (the default), use the client's preference.
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{signature_algs, [{hash(), ecdsa | rsa | dsa}]}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"> The algorithms specified by
      this option will be the ones accepted by the server in a signature algorithm
      negotiation, introduced in TLS-1.2. The algorithms will also be offered to the client if a
      client certificate is requested. For more details see the <fo:inline font-style="italic">corresponding client option</fo:inline>.
      </fo:block> </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{v2_hello_compatible, boolean()}</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">If true, the server accepts clients that send hello messages on SSL-2.0 format but offers 
      supported SSL/TLS versions. Defaults to false, that is the server will not interoperate with clients that
      offers SSL-2.0.
      </fo:block></fo:block-container>
     
    </fo:block>
  
  
  <fo:block id="idp1079616" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">General</fo:block>
    
      
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When an SSL socket is in active mode (the default), data from the
      socket is delivered to the owner of the socket in the form of
      messages:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{ssl, Socket, Data}</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{ssl_closed, Socket}</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{ssl_error, Socket, Reason}</fo:inline></fo:block></fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A <fo:inline font-family="monospace">Timeout</fo:inline> argument specifies a time-out in milliseconds. The
      default value for argument <fo:inline font-family="monospace">Timeout</fo:inline> is <fo:inline font-family="monospace">infinity</fo:inline>.</fo:block>
  
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1085872">cipher_suites() -&gt;</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1086320">cipher_suites(Type) -&gt; ciphers()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Type = erlang | openssl | all</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of supported cipher suites.
	<fo:inline font-family="monospace">cipher_suites()</fo:inline> is equivalent to <fo:inline font-family="monospace">cipher_suites(erlang).</fo:inline>
	Type <fo:inline font-family="monospace">openssl</fo:inline> is provided for backwards compatibility with the
	old SSL, which used OpenSSL. <fo:inline font-family="monospace">cipher_suites(all)</fo:inline> returns
	all available cipher suites. The cipher suites not present
	in <fo:inline font-family="monospace">cipher_suites(erlang)</fo:inline> but included in
	<fo:inline font-family="monospace">cipher_suites(all)</fo:inline> are not used unless explicitly configured
	by the user.</fo:block>
    </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1091856">eccs() -&gt;</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1092304">eccs(protocol()) -&gt; [named_curve()]</fo:block></fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of supported ECCs. <fo:inline font-family="monospace">eccs()</fo:inline>
      is equivalent to calling <fo:inline font-family="monospace">eccs(Protocol)</fo:inline> with all
      supported protocols and then deduplicating the output.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1095312">clear_pem_cache() -&gt; ok </fo:block></fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">PEM files, used by ssl API-functions, are cached. The
      cache is regularly checked to see if any cache entries should be
      invalidated, however this function provides a way to
      unconditionally clear the whole cache.
      </fo:block>
      </fo:block>
   
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1097632">connect(Socket, SslOptions) -&gt; </fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1098096">connect(Socket, SslOptions, Timeout) -&gt; {ok, SslSocket}
	| {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Socket = socket()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SslOptions = [ssl_option()]</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = integer() | infinity</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SslSocket = sslsocket()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Upgrades a <fo:inline font-family="monospace">gen_tcp</fo:inline>, or equivalent,
	  connected socket to an SSL socket, that is, performs the
	  client-side ssl handshake.</fo:block>
    </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1103824">connect(Host, Port, Options) -&gt;</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1104288">connect(Host, Port, Options, Timeout) -&gt;
	  {ok, SslSocket} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Host = host()</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Port = integer()</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = [option()]</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = integer() | infinity</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SslSocket = sslsocket()</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Opens an SSL connection to <fo:inline font-family="monospace">Host</fo:inline>, <fo:inline font-family="monospace">Port</fo:inline>.</fo:block></fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp968128">close(SslSocket) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SslSocket = sslsocket()</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Closes an SSL connection.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp971552">close(SslSocket, How) -&gt; ok | {ok, port()} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SslSocket = sslsocket()</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">How =  timeout() | {NewController::pid(), timeout()} </fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Closes or downgrades an SSL connection. In the latter case the transport
      connection will be handed over to the <fo:inline font-family="monospace">NewController</fo:inline> process after receiving
      the TLS close alert from the peer. The returned transport socket will have
      the following options set: <fo:inline font-family="monospace">[{active, false}, {packet, 0}, {mode, binary}]</fo:inline></fo:block>
      </fo:block>
    
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp976304">controlling_process(SslSocket, NewOwner) -&gt;
	ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SslSocket = sslsocket()</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">NewOwner = pid()</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
	</fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Assigns a new controlling process to the SSL socket. A
	controlling process is the owner of an SSL socket, and receives
	all messages from the socket.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp980240">connection_information(SslSocket) -&gt;
        {ok, Result} |  {error, Reason} </fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Item = protocol | cipher_suite | sni_hostname | ecc | session_id | atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Meaningful atoms, not specified above, are the ssl option names.</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = [{Item::atom(), Value::term()}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the most relevant information about the connection, ssl options that
      are undefined will be filtered out. Note that values that affect the security of the
      connection will only be returned if explicitly requested by connection_information/2.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp984640">connection_information(SslSocket, Items) -&gt;
        {ok, Result} |  {error, Reason} </fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Items = [Item]</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Item = protocol | cipher_suite | sni_hostname | ecc | session_id | client_random 
          | server_random  | master_secret | atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Note that client_random, server_random  and master_secret are values
        that affect the security of connection. Meaningful atoms, not specified above, are the ssl option names.</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Result = [{Item::atom(), Value::term()}]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the requested information items about the connection,
      if they are defined.</fo:block>
      <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If only undefined options are requested the
      resulting list can be empty.</fo:block></fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp990096">format_error(Reason) -&gt; string()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Presents the error returned by an SSL function as a printable string.</fo:block>
      </fo:block>
   
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp993232">getopts(Socket, OptionNames) -&gt;
	{ok, [socketoption()]} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Socket = sslsocket()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OptionNames = [atom()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gets the values of the specified socket options.
	</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp996720">getstat(Socket) -&gt;
        {ok, OptionValues} | {error, inet:posix()}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp997136">getstat(Socket, OptionNames) -&gt;
        {ok, OptionValues} | {error, inet:posix()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Socket = sslsocket()</fo:block></fo:list-item-body></fo:list-item>
    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OptionNames = [atom()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OptionValues = [{inet:stat_option(), integer()}]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gets one or more statistic options for the underlying TCP socket.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See inet:getstat/2 for statistic options description.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1001456">listen(Port, Options) -&gt;
	{ok, ListenSocket} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Port = integer()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = options()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ListenSocket = sslsocket()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates an SSL listen socket.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1005504">negotiated_protocol(Socket) -&gt; {ok, Protocol} | {error, protocol_not_negotiated}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Socket = sslsocket()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Protocol = binary()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
          Returns the protocol negotiated through ALPN or NPN extensions.
        </fo:block>
      </fo:block>
    
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1008992">peercert(Socket) -&gt; {ok, Cert} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Socket = sslsocket()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Cert = binary()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The peer certificate is returned as a DER-encoded binary.
	  The certificate can be decoded with
	  <fo:inline font-family="monospace">public_key:pkix_decode_cert/2</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1012992">peername(Socket) -&gt; {ok, {Address, Port}} |
	{error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Socket = sslsocket()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Address = ipaddress()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Port = integer()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the address and port number of the peer.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1016976">prf(Socket, Secret, Label, Seed, WantedLength) -&gt; {ok, binary()} | {error, reason()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Socket = sslsocket()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Secret = binary() | master_secret</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Label = binary()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Seed = [binary() | prf_random()]</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">WantedLength = non_neg_integer()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Uses the Pseudo-Random Function (PRF) of a TLS session to generate
	  extra key material. It either takes user-generated values for
	  <fo:inline font-family="monospace">Secret</fo:inline> and <fo:inline font-family="monospace">Seed</fo:inline> or atoms directing it to use a specific
	  value from the session security parameters.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Can only be used with TLS connections; <fo:inline font-family="monospace">{error, undefined}</fo:inline>
	  is returned for SSLv3 connections.</fo:block>
      </fo:block>
    
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1023792">recv(Socket, Length) -&gt; </fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1024256">recv(Socket, Length, Timeout) -&gt; {ok, Data} | {error,
	Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Socket = sslsocket()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Length = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Data = [char()] | binary()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Receives a packet from a socket in passive
          mode. A closed socket is indicated by return value
          <fo:inline font-family="monospace">{error, closed}</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Argument <fo:inline font-family="monospace">Length</fo:inline> is meaningful only when
          the socket is in mode <fo:inline font-family="monospace">raw</fo:inline> and denotes the number of
          bytes to read. If <fo:inline font-family="monospace">Length</fo:inline> = 0, all available bytes are
          returned. If <fo:inline font-family="monospace">Length</fo:inline> &gt; 0, exactly <fo:inline font-family="monospace">Length</fo:inline>
          bytes are returned, or an error; possibly discarding less
          than <fo:inline font-family="monospace">Length</fo:inline> bytes of data when the socket gets closed
          from the other side.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Optional argument <fo:inline font-family="monospace">Timeout</fo:inline> specifies a time-out in
          milliseconds. The default value is <fo:inline font-family="monospace">infinity</fo:inline>.</fo:block>
      </fo:block>
    
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1033568">renegotiate(Socket) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Socket = sslsocket()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Initiates a new handshake. A notable return value is
      <fo:inline font-family="monospace">{error, renegotiation_rejected}</fo:inline> indicating that the peer
      refused to go through with the renegotiation, but the connection
      is still active using the previously negotiated session.</fo:block>
      </fo:block>
    
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1487296">send(Socket, Data) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Socket = sslsocket()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Data = iodata()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Writes <fo:inline font-family="monospace">Data</fo:inline> to <fo:inline font-family="monospace">Socket</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A notable return value is <fo:inline font-family="monospace">{error, closed}</fo:inline> indicating that
          the socket is closed.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1492208">setopts(Socket, Options) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Socket = sslsocket()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = [socketoption]()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets options according to <fo:inline font-family="monospace">Options</fo:inline> for socket
          <fo:inline font-family="monospace">Socket</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1496688">shutdown(Socket, How) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Socket = sslsocket()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">How = read | write | read_write</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = reason()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Immediately closes a socket in one or two directions.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">How == write</fo:inline> means closing the socket for writing,
          reading from it is still possible.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To be able to handle that the peer has done a shutdown on
          the write side, option <fo:inline font-family="monospace">{exit_on_close, false}</fo:inline>
          is useful.</fo:block>
      </fo:block>
    
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1502256">ssl_accept(Socket) -&gt; </fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1502704">ssl_accept(Socket, Timeout) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Socket = sslsocket()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Performs the SSL/TLS server-side handshake.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Socket</fo:inline> is a socket as returned by
	<fo:inline font-style="italic">ssl:transport_accept/[1,2]</fo:inline>
	</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1508064">ssl_accept(Socket, SslOptions) -&gt; </fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1508528">ssl_accept(Socket, SslOptions, Timeout) -&gt; {ok, Socket} | ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Socket = socket() | sslsocket() </fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SslOptions = [ssl_option()]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Socket</fo:inline> is a <fo:inline font-family="monospace">socket()</fo:inline>: upgrades a <fo:inline font-family="monospace">gen_tcp</fo:inline>,
	or equivalent, socket to an SSL socket, that is, performs
        the SSL/TLS server-side handshake and returns the SSL socket.</fo:block>
	
	<fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The listen socket is to be in mode <fo:inline font-family="monospace">{active, false}</fo:inline>
	before telling the client that the server is ready to upgrade
	by calling this function, else the upgrade succeeds or does not
	succeed depending on timing.</fo:block></fo:block>
	
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Socket</fo:inline> is an <fo:inline font-family="monospace">sslsocket()</fo:inline>: provides extra SSL/TLS
	options to those specified in
	<fo:inline font-style="italic">ssl:listen/2 </fo:inline> and then performs
	the SSL/TLS handshake.
	</fo:block>
      </fo:block>
    
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1517552">sockname(Socket) -&gt; {ok, {Address, Port}} |
	{error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Socket = sslsocket()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Address = ipaddress()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Port = integer()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the local address and port number of socket
          <fo:inline font-family="monospace">Socket</fo:inline>.</fo:block>
      </fo:block>
    
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp662944">start() -&gt; </fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp371552">start(Type) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Type = permanent | transient | temporary</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts the SSL application. Default type
          is <fo:inline font-family="monospace">temporary</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp833360">stop() -&gt; ok </fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stops the SSL application.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp381888">transport_accept(ListenSocket) -&gt;</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp659520">transport_accept(ListenSocket, Timeout) -&gt;
	{ok, NewSocket} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ListenSocket = NewSocket = sslsocket()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Timeout = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = reason()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Accepts an incoming connection request on a listen socket.
	<fo:inline font-family="monospace">ListenSocket</fo:inline> must be a socket returned from
	<fo:inline font-style="italic"> ssl:listen/2</fo:inline>.
	The socket returned is to be passed to
	<fo:inline font-style="italic"> ssl:ssl_accept[2,3]</fo:inline>
	to complete handshaking, that is,
	establishing the SSL/TLS connection.</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The socket returned can only be used with
	  <fo:inline font-style="italic"> ssl:ssl_accept[2,3]</fo:inline>.
	  No traffic can be sent or received before that call.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The accepted socket inherits the options set for
	<fo:inline font-family="monospace">ListenSocket</fo:inline> in
	<fo:inline font-style="italic"> ssl:listen/2</fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default
	value for <fo:inline font-family="monospace">Timeout</fo:inline> is <fo:inline font-family="monospace">infinity</fo:inline>. If
	<fo:inline font-family="monospace">Timeout</fo:inline> is specified and no connection is accepted
	within the given time, <fo:inline font-family="monospace">{error, timeout}</fo:inline> is
	returned.</fo:block>
      </fo:block>
    
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1521184">versions() -&gt; [versions_info()]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">versions_info() = {app_vsn, string()} | {supported | available, [protocol()] </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns version information relevant for the SSL
	application.</fo:block>
	<fo:block space-after="0.25em" space-before="0.25em">
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">app_vsn</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">The application version of the SSL application.</fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">supported</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">TLS/SSL versions supported by default.
	  Overridden by a version option on
	  <fo:inline font-style="italic"> connect/[2,3,4]</fo:inline>,
	  <fo:inline font-style="italic"> listen/2</fo:inline>, and <fo:inline font-style="italic">ssl_accept/[1,2,3]</fo:inline>.
	  For the negotiated TLS/SSL version, see <fo:inline font-style="italic">ssl:connection_information/1
	  </fo:inline>.</fo:block></fo:block-container>
  
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">available</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em">All TLS/SSL versions supported by the SSL application.
	  TLS 1.2 requires sufficient support from the Crypto
	  application.</fo:block></fo:block-container>
	</fo:block>
      </fo:block>
   
   

  <fo:block id="idp1529264" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">SEE ALSO</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">inet(3)</fo:inline> and
      <fo:inline font-style="italic">gen_tcp(3)</fo:inline>
    </fo:block>
  

<fo:block page-break-before="always" id="idp1535504" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">ssl_crl_cache</fo:marker>ssl_crl_cache</fo:block>Erlang module</fo:block>
  <fo:block/>
  
  ssl_crl_cache
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Implements an internal CRL (Certificate Revocation List) cache.
      In addition to implementing the <fo:inline font-style="italic"> ssl_crl_cache_api</fo:inline> behaviour
      the following functions are available.
    </fo:block>
  
  
    <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
      <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1538192">delete(Entries) -&gt; ok |  {error, Reason} </fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> Entries =  <fo:inline font-style="italic">http_uri:uri() </fo:inline> | {file, string()} | {der, [<fo:inline font-style="italic"> public_key:der_encoded() </fo:inline>]}</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> Reason = term()</fo:block></fo:list-item-body></fo:list-item>
	</fo:list-block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Delete CRLs from the ssl applications local cache. </fo:block>
	</fo:block>     
      <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1542288">insert(CRLSrc) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1542672">insert(URI, CRLSrc) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> CRLSrc = {file, string()} | {der, [ <fo:inline font-style="italic"> public_key:der_encoded() </fo:inline> ]}</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> URI = <fo:inline font-style="italic">http_uri:uri() </fo:inline> </fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> Reason = term()</fo:block></fo:list-item-body></fo:list-item>
	</fo:list-block>
	 <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Insert CRLs into the ssl applications local cache. </fo:block>
	</fo:block>
    
<fo:block page-break-before="always" id="idp1551472" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">ssl_crl_cache_api</fo:marker>ssl_crl_cache_api</fo:block>Erlang module</fo:block>
  <fo:block/>
  
  ssl_crl_cache_api
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      When SSL/TLS performs certificate path validation according to
      <fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC 5280 </fo:basic-link></fo:inline>
      it should also perform CRL validation checks. To enable the CRL
      checks the application needs access to CRLs. A database of CRLs
      can be set up in many different ways. This module provides the
      behavior of the API needed to integrate an arbitrary CRL cache
      with the erlang ssl application. It is also used by the
      application itself to provide a simple default implementation of
      a CRL cache.
    </fo:block>
  
  
  <fo:block id="idp1554224" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">DATA TYPES</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following data types are used in the functions below:
    </fo:block>
    
    <fo:block space-after="0.25em" space-before="0.25em">
      
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">cache_ref() =</fo:inline></fo:block> 
    <fo:block-container><fo:block start-indent="2em">opaque()</fo:block></fo:block-container>
    <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">dist_point() =</fo:inline></fo:block>
    <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">#'DistributionPoint'{} see <fo:inline font-style="italic"> X509 certificates records</fo:inline></fo:block></fo:block></fo:block-container>
    
    </fo:block>
    
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
      <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1558320">fresh_crl(DistributionPoint, CRL) -&gt; FreshCRL</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> DistributionPoint = dist_point() </fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> CRL = [<fo:inline font-style="italic">public_key:der_encoded()</fo:inline>] </fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> FreshCRL = [<fo:inline font-style="italic">public_key:der_encoded()</fo:inline>] </fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"> <fo:inline font-family="monospace">fun fresh_crl/2 </fo:inline> will be used as input option <fo:inline font-family="monospace">update_crl</fo:inline> to
	<fo:inline font-style="italic">public_key:pkix_crls_validate/3 </fo:inline> </fo:block>
      </fo:block>
    
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1565184">lookup(DistributionPoint, Issuer, DbHandle) -&gt; not_available | CRLs </fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1565680">lookup(DistributionPoint, DbHandle) -&gt; not_available | CRLs </fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> DistributionPoint = dist_point() </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> Issuer = <fo:inline font-style="italic">public_key:issuer_name()</fo:inline> </fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> DbHandle  = cache_ref() </fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> CRLs = [<fo:inline font-style="italic">public_key:der_encoded()</fo:inline>] </fo:block></fo:list-item-body></fo:list-item>
	</fo:list-block> <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Lookup the CRLs belonging to the distribution point <fo:inline font-family="monospace"> Distributionpoint</fo:inline>.
	This function may choose to only look in the cache or to follow distribution point
	links depending on how the cache is administrated. </fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">Issuer</fo:inline> argument contains the issuer name of the
	certificate to be checked.  Normally the returned CRL should
	be issued by this issuer, except if the <fo:inline font-family="monospace">cRLIssuer</fo:inline> field
	of <fo:inline font-family="monospace">DistributionPoint</fo:inline> has a value, in which case that
	value should be used instead.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In an earlier version of this API, the <fo:inline font-family="monospace">lookup</fo:inline>
	function received two arguments, omitting <fo:inline font-family="monospace">Issuer</fo:inline>.  For
	compatibility, this is still supported: if there is no
	<fo:inline font-family="monospace">lookup/3</fo:inline> function in the callback module,
	<fo:inline font-family="monospace">lookup/2</fo:inline> is called instead.</fo:block>
	</fo:block>
    
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1576640">select(Issuer, DbHandle) -&gt; CRLs </fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> Issuer = <fo:inline font-style="italic">public_key:issuer_name()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> DbHandle  = cache_ref() </fo:block></fo:list-item-body></fo:list-item>
	</fo:list-block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Select the CRLs in the cache that are issued by <fo:inline font-family="monospace">Issuer</fo:inline> </fo:block>
	</fo:block>
  
<fo:block page-break-before="always" id="idp1587952" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">ssl_session_cache_api</fo:marker>ssl_session_cache_api</fo:block>Erlang module</fo:block>
  <fo:block/>
  ssl_session_cache_api
  <fo:block/>

  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      Defines the API for the TLS session cache so
      that the data storage scheme can be replaced by
      defining a new callback module implementing this API.
    </fo:block>
  
  <fo:block id="idp1590192" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">DATA TYPES</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following data types are used in the functions for
    <fo:inline font-family="monospace">ssl_session_cache_api</fo:inline>:</fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">cache_ref() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">opaque()</fo:inline></fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">key() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{partialkey(), session_id()}</fo:inline></fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">partialkey() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">opaque()</fo:inline></fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">session_id() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">binary()</fo:inline></fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">session()</fo:inline> =</fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">opaque()</fo:inline></fo:block></fo:block></fo:block-container>
    </fo:block>

  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1599344">delete(Cache, Key) -&gt; _</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Cache = cache_ref()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = key()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Deletes a cache entry. Is only called from the cache
	handling process.
	</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1602992">foldl(Fun, Acc0, Cache) -&gt; Acc</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"/></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calls <fo:inline font-family="monospace">Fun(Elem, AccIn)</fo:inline> on successive elements of the
	cache, starting with <fo:inline font-family="monospace">AccIn == Acc0</fo:inline>. <fo:inline font-family="monospace">Fun/2</fo:inline> must
	return a new accumulator, which is passed to the next call.
	The function returns the final value of the accumulator.
	<fo:inline font-family="monospace">Acc0</fo:inline> is returned if the cache is empty.
	</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1607776">init(Args) -&gt; opaque() </fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Args = proplists:proplist()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Includes property <fo:inline font-family="monospace">{role, client | server}</fo:inline>.
	Currently this is the only predefined property,
	there can also be user-defined properties. See also
	application environment variable
	<fo:inline font-style="italic">session_cb_init_args</fo:inline>.
	</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Performs possible initializations of the cache and returns
	a reference to it that is used as parameter to the other
	API functions. Is called by the cache handling processes
	<fo:inline font-family="monospace">init</fo:inline> function, hence putting the same requirements on it
	as a normal process <fo:inline font-family="monospace">init</fo:inline> function. This function is
	called twice when starting the SSL application, once with
	the role client and once with the role server, as the SSL
	application must be prepared to take on both roles.
	</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1614000">lookup(Cache, Key) -&gt; Entry</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Cache = cache_ref()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = key()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Entry = session() | undefined</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Looks up a cache entry. Is to be callable from any
         process.
         </fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1618128">select_session(Cache, PartialKey) -&gt; [session()]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Cache = cache_ref()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PartialKey = partialkey()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Session = session()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Selects sessions that can be reused. Is to be callable
	from any process.
	</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1622288">size(Cache) -&gt; integer()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Cache = cache_ref()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the number of sessions in the cache. If size
	exceeds the maximum number of sessions, the current cache
	entries will be invalidated regardless of their remaining
	lifetime. Is to be callable from any process.
	</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1625680">terminate(Cache) -&gt; _</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Cache = term() - as returned by init/0</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Takes care of possible cleanup that is needed when the
	cache handling process terminates.
	</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1628976">update(Cache, Key, Session) -&gt; _</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Cache = cache_ref()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = key()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Session = session()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Caches a new session or updates an already cached one. Is
	only called from the cache handling process.
	</fo:block>
      </fo:block>

  

</fo:flow>
  </fo:page-sequence>
</fo:root>
