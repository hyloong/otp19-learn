<module name="igor">
<type>
  <name>attribute</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-attribute">attribute()</marker> = {atom(), term()}</typehead></typedecl>
</type>
<type>
  <name>functionName</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-functionName">functionName()</marker> = {atom(), arity()}</typehead></typedecl>
</type>
<type>
  <name>functionPair</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-functionPair">functionPair()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{<seealso marker="#type-functionName">functionName()</seealso>, {<seealso marker="#type-moduleName">moduleName()</seealso>, <seealso marker="#type-functionName">functionName()</seealso>}}</typehead></typedecl>
</type>
<type>
  <name>moduleName</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-moduleName">moduleName()</marker> = atom()</typehead></typedecl>
</type>
<type>
  <name>option</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-option">option()</marker> = atom() | {atom(), term()}</typehead></typedecl>
</type>
<type>
  <name>renamings</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-renamings">renamings()</marker> = [{atom(), atom()}]</typehead></typedecl>
</type>
<type>
  <name>stubDescriptor</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-stubDescriptor">stubDescriptor()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{<seealso marker="#type-moduleName">moduleName()</seealso>, [<seealso marker="#type-functionPair">functionPair()</seealso>], [<seealso marker="#type-attribute">attribute()</seealso>]}</typehead></typedecl>
</type>
<spec>
  <name>create_stubs</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>create_stubs(Stubs :: [<seealso marker="#type-stubDescriptor">stubDescriptor()</seealso>], Opts :: [<seealso marker="#type-option">option()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[string()]</head></clause>
  </contract>
  <anno>Opts</anno>
  <anno>Stubs</anno>
</spec>
<spec>
  <name>merge</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>merge(Name :: atom(), Files :: [<seealso marker="file#type-filename">file:filename()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[<seealso marker="file#type-filename">file:filename()</seealso>, ...]</head></clause>
  </contract>
  <anno>Files</anno>
  <anno>Name</anno>
</spec>
<spec>
  <name>merge</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>merge(Name :: atom(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Files :: [<seealso marker="file#type-filename">file:filename()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Opts :: [<seealso marker="#type-option">option()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[<seealso marker="file#type-filename">file:filename()</seealso>, ...]</head></clause>
  </contract>
  <anno>Files</anno>
  <anno>Name</anno>
  <anno>Opts</anno>
</spec>
<spec>
  <name>merge_files</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>merge_files(Name :: atom(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Files :: [<seealso marker="file#type-filename">file:filename()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Options :: [<seealso marker="#type-option">option()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{<seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>, [<seealso marker="#type-stubDescriptor">stubDescriptor()</seealso>]}</head></clause>
  </contract>
  <anno>Files</anno>
  <anno>Name</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>merge_files</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>merge_files(Name :: atom(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Trees :: <seealso marker="erl_syntax#type-forms">erl_syntax:forms()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Files :: [<seealso marker="file#type-filename">file:filename()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Opts :: [<seealso marker="#type-option">option()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{<seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>, [<seealso marker="#type-stubDescriptor">stubDescriptor()</seealso>]}</head></clause>
  </contract>
  <anno>Files</anno>
  <anno>Name</anno>
  <anno>Opts</anno>
  <anno>Trees</anno>
</spec>
<spec>
  <name>merge_sources</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>merge_sources(Name :: atom(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Sources :: [<seealso marker="erl_syntax#type-forms">erl_syntax:forms()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Opts :: [<seealso marker="#type-option">option()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{<seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>, [<seealso marker="#type-stubDescriptor">stubDescriptor()</seealso>]}</head></clause>
  </contract>
  <anno>Name</anno>
  <anno>Opts</anno>
  <anno>Sources</anno>
</spec>
<spec>
  <name>parse_transform</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>parse_transform(Forms :: <seealso marker="erl_syntax#type-forms">erl_syntax:forms()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Options :: [<seealso marker="#type-option">option()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[<seealso marker="erl_syntax#type-syntaxTree">erl_syntax:syntaxTree()</seealso>]</head></clause>
  </contract>
  <anno>Forms</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>rename</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>rename(Files :: [<seealso marker="file#type-filename">file:filename()</seealso>], Renamings :: <seealso marker="#type-renamings">renamings()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[string()]</head></clause>
  </contract>
  <anno>Files</anno>
  <anno>Renamings</anno>
</spec>
<spec>
  <name>rename</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>rename(Files :: [<seealso marker="file#type-filename">file:filename()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Renamings :: <seealso marker="#type-renamings">renamings()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Opts :: [term()]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[string()]</head></clause>
  </contract>
  <anno>Files</anno>
  <anno>Opts</anno>
  <anno>Renamings</anno>
</spec>
<timestamp>Generated by EDoc, Jul 12 2017, 20:31:55.</timestamp>
</module>