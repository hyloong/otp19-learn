<module name="erl_syntax">
<type>
  <name>encoding</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-encoding">encoding()</marker> = utf8 | unicode | latin1</typehead></typedecl>
</type>
<type>
  <name>erl_parse</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-erl_parse">erl_parse()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="erl_parse#type-abstract_clause">erl_parse:abstract_clause()</seealso> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="erl_parse#type-abstract_expr">erl_parse:abstract_expr()</seealso> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="erl_parse#type-abstract_form">erl_parse:abstract_form()</seealso> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="erl_parse#type-abstract_type">erl_parse:abstract_type()</seealso> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="erl_parse#type-form_info">erl_parse:form_info()</seealso> |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{bin_element, term(), term(), term(), term()}</typehead></typedecl>
</type>
<type>
  <name>forms</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-forms">forms()</marker> = <seealso marker="#type-syntaxTree">syntaxTree()</seealso> | [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]</typehead></typedecl>
</type>
<type>
  <name>guard</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-guard">guard()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>none | <seealso marker="#type-syntaxTree">syntaxTree()</seealso> | [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>] | [[<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]]</typehead></typedecl>
</type>
<type>
  <name>padding</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-padding">padding()</marker> = none | integer()</typehead></typedecl>
</type>
<type>
  <name>syntaxTree</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-syntaxTree">syntaxTree()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#tree{type = atom(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>attr =<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>#attr{pos = term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ann = [term()],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>com =<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>none |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>#com{pre = [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>post = [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]}},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>data = term()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>#wrapper{type = atom(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>attr =<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>#attr{pos = term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ann = [term()],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>com =<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>none |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>#com{pre = [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>post = [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]}},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>tree = <seealso marker="#type-erl_parse">erl_parse()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-erl_parse">erl_parse()</seealso></typehead></typedecl>
</type>
<type>
  <name>syntaxTreeAttributes</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-syntaxTreeAttributes">syntaxTreeAttributes()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#attr{pos = term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ann = [term()],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>com =<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>none |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>#com{pre = [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>], post = [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]}}</typehead></typedecl>
</type>
<spec>
  <name>abstract</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>abstract(T :: term()) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>T</anno>
</spec>
<spec>
  <name>add_ann</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>add_ann(A :: term(), Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>A</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>add_postcomments</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>add_postcomments(Cs :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>], Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Cs</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>add_precomments</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>add_precomments(Cs :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>], Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Cs</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>annotated_type</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>annotated_type(Name :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, Type :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Name</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>annotated_type_body</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>annotated_type_body(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>annotated_type_name</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>annotated_type_name(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>application</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>application(Operator :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, Arguments :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Arguments</anno>
  <anno>Operator</anno>
</spec>
<spec>
  <name>application</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>application(Module :: none | <seealso marker="#type-syntaxTree">syntaxTree()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Name :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Arguments :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Arguments</anno>
  <anno>Module</anno>
  <anno>Name</anno>
</spec>
<spec>
  <name>application_arguments</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>application_arguments(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>application_operator</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>application_operator(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>arity_qualifier</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>arity_qualifier(Body :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, Arity :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Arity</anno>
  <anno>Body</anno>
</spec>
<spec>
  <name>arity_qualifier_argument</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>arity_qualifier_argument(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>arity_qualifier_body</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>arity_qualifier_body(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>atom</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>atom(Name :: atom() | string()) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Name</anno>
</spec>
<spec>
  <name>atom_literal</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>atom_literal(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; string()</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>atom_literal</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>atom_name</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>atom_name(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; string()</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>atom_value</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>atom_value(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; atom()</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>attribute</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>attribute(Name :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Name</anno>
</spec>
<spec>
  <name>attribute</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>attribute(Name :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, Args :: none | [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Args</anno>
  <anno>Name</anno>
</spec>
<spec>
  <name>attribute_arguments</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>attribute_arguments(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; none | [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>attribute_name</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>attribute_name(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>binary</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>binary(List :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>List</anno>
</spec>
<spec>
  <name>binary_comp</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>binary_comp(Template :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, Body :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Body</anno>
  <anno>Template</anno>
</spec>
<spec>
  <name>binary_comp_body</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>binary_comp_body(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>binary_comp_template</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>binary_comp_template(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>binary_field</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>binary_field(Body :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Body</anno>
</spec>
<spec>
  <name>binary_field</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>binary_field(Body :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, Types :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Body</anno>
  <anno>Types</anno>
</spec>
<spec>
  <name>binary_field</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>binary_field(Body :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Size :: none | <seealso marker="#type-syntaxTree">syntaxTree()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Types :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Body</anno>
  <anno>Size</anno>
  <anno>Types</anno>
</spec>
<spec>
  <name>binary_field_body</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>binary_field_body(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>binary_field_size</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>binary_field_size(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; none | <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>binary_field_types</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>binary_field_types(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>binary_fields</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>binary_fields(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>binary_generator</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>binary_generator(Pattern :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, Body :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Body</anno>
  <anno>Pattern</anno>
</spec>
<spec>
  <name>binary_generator_body</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>binary_generator_body(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>binary_generator_pattern</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>binary_generator_pattern(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>bitstring_type</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>bitstring_type(M :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, N :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>M</anno>
  <anno>N</anno>
</spec>
<spec>
  <name>bitstring_type_m</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>bitstring_type_m(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>bitstring_type_n</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>bitstring_type_n(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>block_expr</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>block_expr(Body :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Body</anno>
</spec>
<spec>
  <name>block_expr_body</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>block_expr_body(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>case_expr</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>case_expr(Argument :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, Clauses :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Argument</anno>
  <anno>Clauses</anno>
</spec>
<spec>
  <name>case_expr_argument</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>case_expr_argument(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>case_expr_clauses</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>case_expr_clauses(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>catch_expr</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>catch_expr(Expr :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Expr</anno>
</spec>
<spec>
  <name>catch_expr_body</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>catch_expr_body(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>char</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>char(Char :: char()) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Char</anno>
</spec>
<spec>
  <name>char_literal</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>char_literal(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; nonempty_string()</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>char_literal</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>char_literal(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, X2 :: <seealso marker="#type-encoding">encoding()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>nonempty_string()</head></clause>
  </contract>
  <anno>Node</anno>
  <anno>X2</anno>
</spec>
<spec>
  <name>char_value</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>char_value(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; char()</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>class_qualifier</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>class_qualifier(Class :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, Body :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Body</anno>
  <anno>Class</anno>
</spec>
<spec>
  <name>class_qualifier_argument</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>class_qualifier_argument(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>class_qualifier_body</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>class_qualifier_body(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>clause</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>clause(Guard :: <seealso marker="#type-guard">guard()</seealso>, Body :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Body</anno>
  <anno>Guard</anno>
</spec>
<spec>
  <name>clause</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>clause(Patterns :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Guard :: <seealso marker="#type-guard">guard()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Body :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Body</anno>
  <anno>Guard</anno>
  <anno>Patterns</anno>
</spec>
<spec>
  <name>clause_body</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>clause_body(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>clause_guard</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>clause_guard(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; none | <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>clause_patterns</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>clause_patterns(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>comment</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>comment(Strings :: [string()]) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Strings</anno>
</spec>
<spec>
  <name>comment</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>comment(Pad :: <seealso marker="#type-padding">padding()</seealso>, Strings :: [string()]) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Pad</anno>
  <anno>Strings</anno>
</spec>
<spec>
  <name>comment_padding</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>comment_padding(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-padding">padding()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>comment_text</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>comment_text(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; [string()]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>compact_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>compact_list(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>concrete</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>concrete(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; term()</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>cond_expr</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>cond_expr(Clauses :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Clauses</anno>
</spec>
<spec>
  <name>cond_expr_clauses</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>cond_expr_clauses(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>conjunction</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>conjunction(Tests :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Tests</anno>
</spec>
<spec>
  <name>conjunction_body</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>conjunction_body(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>cons</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>cons(Head :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, Tail :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Head</anno>
  <anno>Tail</anno>
</spec>
<spec>
  <name>constrained_function_type</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>constrained_function_type(FunctionType :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>FunctionConstraint :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>FunctionConstraint</anno>
  <anno>FunctionType</anno>
</spec>
<spec>
  <name>constrained_function_type_argument</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>constrained_function_type_argument(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>constrained_function_type_body</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>constrained_function_type_body(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>constraint</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>constraint(Name :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, Types :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Name</anno>
  <anno>Types</anno>
</spec>
<spec>
  <name>constraint_argument</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>constraint_argument(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>constraint_body</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>constraint_body(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>copy_ann</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>copy_ann(Source :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, Target :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Source</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>copy_attrs</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>copy_attrs(S :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, T :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>S</anno>
  <anno>T</anno>
</spec>
<spec>
  <name>copy_comments</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>copy_comments(Source :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, Target :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Source</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>copy_pos</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>copy_pos(Source :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, Target :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Source</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>data</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>data(Tree :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; term()</head></clause>
  </contract>
  <anno>Tree</anno>
</spec>
<spec>
  <name>disjunction</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>disjunction(Tests :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Tests</anno>
</spec>
<spec>
  <name>disjunction_body</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>disjunction_body(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>eof_marker</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>eof_marker() -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
</spec>
<spec>
  <name>error_marker</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>error_marker(Error :: term()) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Error</anno>
</spec>
<spec>
  <name>error_marker_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>error_marker_info(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; term()</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>flatten_form_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>flatten_form_list(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>float</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>float(Value :: float()) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Value</anno>
</spec>
<spec>
  <name>float_literal</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>float_literal(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; string()</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>float_value</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>float_value(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; float()</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>form_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>form_list(Forms :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Forms</anno>
</spec>
<spec>
  <name>form_list_elements</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>form_list_elements(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>fun_expr</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>fun_expr(Clauses :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Clauses</anno>
</spec>
<spec>
  <name>fun_expr_arity</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>fun_expr_arity(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; arity()</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>fun_expr_clauses</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>fun_expr_clauses(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>fun_type</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>fun_type() -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
</spec>
<spec>
  <name>function</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>function(Name :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, Clauses :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Clauses</anno>
  <anno>Name</anno>
</spec>
<spec>
  <name>function_arity</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>function_arity(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; arity()</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>function_clauses</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>function_clauses(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>function_name</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>function_name(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>function_type</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>function_type</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>function_type(Arguments :: any_arity | <seealso marker="#type-syntaxTree">syntaxTree()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Return :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Arguments</anno>
  <anno>Return</anno>
</spec>
<spec>
  <name>function_type_arguments</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>function_type_arguments(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>any_arity | [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>function_type_return</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>function_type_return(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>generator</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>generator(Pattern :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, Body :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Body</anno>
  <anno>Pattern</anno>
</spec>
<spec>
  <name>generator_body</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>generator_body(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>generator_pattern</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>generator_pattern(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>get_ann</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_ann(Tree :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; [term()]</head></clause>
  </contract>
  <anno>Tree</anno>
</spec>
<spec>
  <name>get_attrs</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_attrs(Tree :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTreeAttributes">syntaxTreeAttributes()</seealso></head></clause>
  </contract>
  <anno>Tree</anno>
</spec>
<spec>
  <name>get_pos</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_pos(Tree :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; term()</head></clause>
  </contract>
  <anno>Tree</anno>
</spec>
<spec>
  <name>get_postcomments</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_postcomments(Tree :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]</head></clause>
  </contract>
  <anno>Tree</anno>
</spec>
<spec>
  <name>get_precomments</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_precomments(Tree :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]</head></clause>
  </contract>
  <anno>Tree</anno>
</spec>
<spec>
  <name>has_comments</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>has_comments(Tree :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>Tree</anno>
</spec>
<spec>
  <name>if_expr</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>if_expr(Clauses :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Clauses</anno>
</spec>
<spec>
  <name>if_expr_clauses</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>if_expr_clauses(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>implicit_fun</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>implicit_fun(Name :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Name</anno>
</spec>
<spec>
  <name>implicit_fun</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>implicit_fun(Name :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, Arity :: none | <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Arity</anno>
  <anno>Name</anno>
</spec>
<spec>
  <name>implicit_fun</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>implicit_fun(Module :: none | <seealso marker="#type-syntaxTree">syntaxTree()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Name :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Arity :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Arity</anno>
  <anno>Module</anno>
  <anno>Name</anno>
</spec>
<spec>
  <name>implicit_fun_name</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>implicit_fun_name(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>infix_expr</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>infix_expr(Left :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Operator :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Right :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Left</anno>
  <anno>Operator</anno>
  <anno>Right</anno>
</spec>
<spec>
  <name>infix_expr_left</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>infix_expr_left(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>infix_expr_operator</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>infix_expr_operator(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>infix_expr_right</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>infix_expr_right(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>integer</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>integer(Value :: integer()) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Value</anno>
</spec>
<spec>
  <name>integer_literal</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>integer_literal(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; string()</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>integer_range_type</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>integer_range_type(Low :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, High :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>High</anno>
  <anno>Low</anno>
</spec>
<spec>
  <name>integer_range_type_high</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>integer_range_type_high(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>integer_range_type_low</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>integer_range_type_low(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>integer_value</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>integer_value(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; integer()</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>is_atom</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>is_atom(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, Value :: atom()) -&gt; boolean()</head></clause>
  </contract>
  <anno>Node</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>is_char</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>is_char(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, Value :: char()) -&gt; boolean()</head></clause>
  </contract>
  <anno>Node</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>is_form</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_form(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>is_integer</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>is_integer(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, Value :: integer()) -&gt; boolean()</head></clause>
  </contract>
  <anno>Node</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>is_leaf</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_leaf(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>is_list_skeleton</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_list_skeleton(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>is_literal</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_literal(T :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>T</anno>
</spec>
<spec>
  <name>is_proper_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_proper_list(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>is_string</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>is_string(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, Value :: string()) -&gt; boolean()</head></clause>
  </contract>
  <anno>Node</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>is_tree</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>is_tree(Tree :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>Tree</anno>
</spec>
<spec>
  <name>join_comments</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>join_comments(Source :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, Target :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Source</anno>
  <anno>Target</anno>
</spec>
<spec>
  <name>list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>list(List :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>List</anno>
</spec>
<spec>
  <name>list</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>list(Elements :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>], Tail :: none | <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Elements</anno>
  <anno>Tail</anno>
</spec>
<spec>
  <name>list_comp</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>list_comp(Template :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, Body :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Body</anno>
  <anno>Template</anno>
</spec>
<spec>
  <name>list_comp_body</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>list_comp_body(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>list_comp_template</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>list_comp_template(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>list_elements</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>list_elements(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>list_head</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>list_head(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>list_length</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>list_length(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; integer() &gt;= 0</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>list_prefix</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>list_prefix(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>list_suffix</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>list_suffix(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; none | <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>list_tail</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>list_tail(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>macro</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>macro(Name :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Name</anno>
</spec>
<spec>
  <name>macro</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>macro(Name :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, Arguments :: none | [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Arguments</anno>
  <anno>Name</anno>
</spec>
<spec>
  <name>macro_arguments</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>macro_arguments(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; none | [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>macro_name</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>macro_name(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>make_tree</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>make_tree(X1 :: atom(), X2 :: [[<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]]) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>X1</anno>
  <anno>X2</anno>
</spec>
<spec>
  <name>map_expr</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>map_expr(Fields :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Fields</anno>
</spec>
<spec>
  <name>map_expr</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>map_expr(Argument :: none | <seealso marker="#type-syntaxTree">syntaxTree()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Fields :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Argument</anno>
  <anno>Fields</anno>
</spec>
<spec>
  <name>map_expr_argument</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>map_expr_argument(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; none | <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>map_expr_fields</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>map_expr_fields(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>map_field_assoc</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>map_field_assoc(Name :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, Value :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Name</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>map_field_assoc_name</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>map_field_assoc_name(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>map_field_assoc_value</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>map_field_assoc_value(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>map_field_exact</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>map_field_exact(Name :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, Value :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Name</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>map_field_exact_name</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>map_field_exact_name(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>map_field_exact_value</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>map_field_exact_value(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>map_type</name>
  <arity>0</arity>
  <contract/>
</spec>
<spec>
  <name>map_type</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>map_type(Fields :: any_size | [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Fields</anno>
</spec>
<spec>
  <name>map_type_assoc</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>map_type_assoc(Name :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, Value :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Name</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>map_type_assoc_name</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>map_type_assoc_name(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>map_type_assoc_value</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>map_type_assoc_value(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>map_type_exact</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>map_type_exact(Name :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, Value :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Name</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>map_type_exact_name</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>map_type_exact_name(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>map_type_exact_value</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>map_type_exact_value(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>map_type_fields</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>map_type_fields(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; any_size | [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>match_expr</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>match_expr(Pattern :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, Body :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Body</anno>
  <anno>Pattern</anno>
</spec>
<spec>
  <name>match_expr_body</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>match_expr_body(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>match_expr_pattern</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>match_expr_pattern(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>meta</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>meta(T :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>T</anno>
</spec>
<spec>
  <name>module_qualifier</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>module_qualifier(Module :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, Body :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Body</anno>
  <anno>Module</anno>
</spec>
<spec>
  <name>module_qualifier_argument</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>module_qualifier_argument(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>module_qualifier_body</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>module_qualifier_body(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>named_fun_expr</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>named_fun_expr(Name :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, Clauses :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Clauses</anno>
  <anno>Name</anno>
</spec>
<spec>
  <name>named_fun_expr_arity</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>named_fun_expr_arity(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; arity()</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>named_fun_expr_clauses</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>named_fun_expr_clauses(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>named_fun_expr_name</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>named_fun_expr_name(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>nil</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>nil() -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
</spec>
<spec>
  <name>normalize_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>normalize_list(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>operator</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>operator(Name :: atom() | string()) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Name</anno>
</spec>
<spec>
  <name>operator_literal</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>operator_literal(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; string()</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>operator_name</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>operator_name(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; atom()</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>parentheses</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>parentheses(Expr :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Expr</anno>
</spec>
<spec>
  <name>parentheses_body</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>parentheses_body(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>prefix_expr</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>prefix_expr(Operator :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, Argument :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Argument</anno>
  <anno>Operator</anno>
</spec>
<spec>
  <name>prefix_expr_argument</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>prefix_expr_argument(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>prefix_expr_operator</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>prefix_expr_operator(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>receive_expr</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>receive_expr(Clauses :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Clauses</anno>
</spec>
<spec>
  <name>receive_expr</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>receive_expr(Clauses :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Timeout :: none | <seealso marker="#type-syntaxTree">syntaxTree()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Action :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Action</anno>
  <anno>Clauses</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>receive_expr_action</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>receive_expr_action(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>receive_expr_clauses</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>receive_expr_clauses(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>receive_expr_timeout</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>receive_expr_timeout(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; none | <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>record_access</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>record_access(Argument :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Type :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Field :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Argument</anno>
  <anno>Field</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>record_access_argument</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>record_access_argument(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>record_access_field</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>record_access_field(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>record_access_type</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>record_access_type(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>record_expr</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>record_expr(Type :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, Fields :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Fields</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>record_expr</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>record_expr(Argument :: none | <seealso marker="#type-syntaxTree">syntaxTree()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Type :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Fields :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Argument</anno>
  <anno>Fields</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>record_expr_argument</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>record_expr_argument(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; none | <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>record_expr_fields</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>record_expr_fields(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>record_expr_type</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>record_expr_type(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>record_field</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>record_field(Name :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Name</anno>
</spec>
<spec>
  <name>record_field</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>record_field(Name :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, Value :: none | <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Name</anno>
  <anno>Value</anno>
</spec>
<spec>
  <name>record_field_name</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>record_field_name(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>record_field_value</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>record_field_value(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; none | <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>record_index_expr</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>record_index_expr(Type :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, Field :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Field</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>record_index_expr_field</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>record_index_expr_field(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>record_index_expr_type</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>record_index_expr_type(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>record_type</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>record_type(Name :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, Fields :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Fields</anno>
  <anno>Name</anno>
</spec>
<spec>
  <name>record_type_field</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>record_type_field(Name :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, Type :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Name</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>record_type_field_name</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>record_type_field_name(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>record_type_field_type</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>record_type_field_type(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>record_type_fields</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>record_type_fields(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>record_type_name</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>record_type_name(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>remove_comments</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>remove_comments(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>revert</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>revert(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>revert_forms</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>revert_forms(Forms :: <seealso marker="#type-forms">forms()</seealso>) -&gt; [<seealso marker="#type-erl_parse">erl_parse()</seealso>]</head></clause>
  </contract>
  <anno>Forms</anno>
</spec>
<spec>
  <name>set_ann</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>set_ann(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, As :: [term()]) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>As</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>set_attrs</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>set_attrs(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, Attr :: <seealso marker="#type-syntaxTreeAttributes">syntaxTreeAttributes()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Attr</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>set_pos</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>set_pos(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, Pos :: term()) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
  <anno>Pos</anno>
</spec>
<spec>
  <name>set_postcomments</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>set_postcomments(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, Cs :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Cs</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>set_precomments</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>set_precomments(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, Cs :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Cs</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>size_qualifier</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>size_qualifier(Body :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, Size :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Body</anno>
  <anno>Size</anno>
</spec>
<spec>
  <name>size_qualifier_argument</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>size_qualifier_argument(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>size_qualifier_body</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>size_qualifier_body(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>string</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>string(String :: string()) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>String</anno>
</spec>
<spec>
  <name>string_literal</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>string_literal(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; nonempty_string()</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>string_literal</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>string_literal(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, X2 :: <seealso marker="#type-encoding">encoding()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>nonempty_string()</head></clause>
  </contract>
  <anno>Node</anno>
  <anno>X2</anno>
</spec>
<spec>
  <name>string_value</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>string_value(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; string()</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>subtrees</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>subtrees(T :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; [[<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]]</head></clause>
  </contract>
  <anno>T</anno>
</spec>
<spec>
  <name>text</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>text(String :: string()) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>String</anno>
</spec>
<spec>
  <name>text_string</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>text_string(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; string()</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>tree</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>tree(Type :: atom()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>#tree{type = atom(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>attr =<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>#attr{pos = term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ann = [term()],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>com =<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>none |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>#com{pre = [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>post = [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]}},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>data = term()}</head></clause>
  </contract>
  <anno>Type</anno>
</spec>
<spec>
  <name>tree</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>tree(Type :: atom(), Data :: term()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>#tree{type = atom(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>attr =<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>#attr{pos = term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ann = [term()],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>com =<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>none |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>#com{pre = [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>post = [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]}},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>data = term()}</head></clause>
  </contract>
  <anno>Data</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>try_after_expr</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>try_after_expr(Body :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>], After :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>After</anno>
  <anno>Body</anno>
</spec>
<spec>
  <name>try_expr</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>try_expr(Body :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>], Handlers :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Body</anno>
  <anno>Handlers</anno>
</spec>
<spec>
  <name>try_expr</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>try_expr(Body :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Clauses :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Handlers :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Body</anno>
  <anno>Clauses</anno>
  <anno>Handlers</anno>
</spec>
<spec>
  <name>try_expr</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>try_expr(Body :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Clauses :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Handlers :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>After :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>After</anno>
  <anno>Body</anno>
  <anno>Clauses</anno>
  <anno>Handlers</anno>
</spec>
<spec>
  <name>try_expr_after</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>try_expr_after(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>try_expr_body</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>try_expr_body(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>try_expr_clauses</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>try_expr_clauses(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>try_expr_handlers</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>try_expr_handlers(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>tuple</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>tuple(List :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>List</anno>
</spec>
<spec>
  <name>tuple_elements</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>tuple_elements(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>tuple_size</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>tuple_size(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; integer() &gt;= 0</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>tuple_type</name>
  <arity>0</arity>
  <contract/>
</spec>
<spec>
  <name>tuple_type</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>tuple_type(Elements :: any_size | [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Elements</anno>
</spec>
<spec>
  <name>tuple_type_elements</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>tuple_type_elements(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>any_size | [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>type</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>type(Tree :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; atom()</head></clause>
  </contract>
  <anno>Tree</anno>
</spec>
<spec>
  <name>type_application</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>type_application(TypeName :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Arguments :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Arguments</anno>
  <anno>TypeName</anno>
</spec>
<spec>
  <name>type_application</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>type_application(Module :: none | <seealso marker="#type-syntaxTree">syntaxTree()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>TypeName :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Arguments :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Arguments</anno>
  <anno>Module</anno>
  <anno>TypeName</anno>
</spec>
<spec>
  <name>type_application_arguments</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>type_application_arguments(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>type_application_name</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>type_application_name(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>type_union</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>type_union(Types :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Types</anno>
</spec>
<spec>
  <name>type_union_types</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>type_union_types(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>typed_record_field</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>typed_record_field(Field :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, Type :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Field</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>typed_record_field_body</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>typed_record_field_body(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>typed_record_field_type</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>typed_record_field_type(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>underscore</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>underscore() -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
</spec>
<spec>
  <name>update_tree</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>update_tree(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>, Groups :: [[<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Groups</anno>
  <anno>Node</anno>
</spec>
<spec>
  <name>user_type_application</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>user_type_application(TypeName :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Arguments :: [<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Arguments</anno>
  <anno>TypeName</anno>
</spec>
<spec>
  <name>user_type_application_arguments</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>user_type_application_arguments(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[<seealso marker="#type-syntaxTree">syntaxTree()</seealso>]</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>user_type_application_name</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>user_type_application_name(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>variable</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>variable(Name :: atom() | string()) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Name</anno>
</spec>
<spec>
  <name>variable_literal</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>variable_literal(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; string()</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>variable_name</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>variable_name(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; atom()</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<spec>
  <name>warning_marker</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>warning_marker(Warning :: term()) -&gt; <seealso marker="#type-syntaxTree">syntaxTree()</seealso></head></clause>
  </contract>
  <anno>Warning</anno>
</spec>
<spec>
  <name>warning_marker_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>warning_marker_info(Node :: <seealso marker="#type-syntaxTree">syntaxTree()</seealso>) -&gt; term()</head></clause>
  </contract>
  <anno>Node</anno>
</spec>
<timestamp>Generated by EDoc, Jul 12 2017, 20:31:53.</timestamp>
</module>