<?xml version="1.0"?>
<fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format">
  <fo:layout-master-set>
    <fo:simple-page-master master-name="cover" margin="25mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin="0mm"/>
    </fo:simple-page-master>
    <fo:simple-page-master master-name="left-page" margin-top="25mm" margin-bottom="15mm" margin-left="20mm" margin-right="25mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin-top="15mm" margin-bottom="20mm"/>
      <fo:region-before region-name="left-header" extent="10mm"/>
      <fo:region-after region-name="left-footer" extent="10mm"/>
    </fo:simple-page-master>
    <fo:simple-page-master master-name="right-page" margin-top="25mm" margin-bottom="15mm" margin-left="25mm" margin-right="20mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin-top="15mm" margin-bottom="20mm"/>
      <fo:region-before region-name="right-header" extent="10mm"/>
      <fo:region-after region-name="right-footer" extent="10mm"/>
    </fo:simple-page-master>
    <fo:page-sequence-master master-name="document">
      <fo:repeatable-page-master-alternatives>
        <fo:conditional-page-master-reference master-reference="left-page" odd-or-even="even"/>
        <fo:conditional-page-master-reference master-reference="right-page" odd-or-even="odd"/>
      </fo:repeatable-page-master-alternatives>
    </fo:page-sequence-master>
  </fo:layout-master-set>
  <fo:bookmark-tree>
    <fo:bookmark internal-destination="cover-page" starting-state="show">
      <fo:bookmark-title>public_key</fo:bookmark-title>
      <fo:bookmark internal-destination="idp589056" starting-state="hide">
        <fo:bookmark-title>public_key User's Guide</fo:bookmark-title>
        <fo:bookmark internal-destination="idp579440" starting-state="hide">
          <fo:bookmark-title>Introduction</fo:bookmark-title>
          <fo:bookmark internal-destination="idp575488" starting-state="hide">
            <fo:bookmark-title>Purpose</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp573264" starting-state="hide">
            <fo:bookmark-title>Prerequisites</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp572080" starting-state="hide">
            <fo:bookmark-title>Performance Tips</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp566688" starting-state="hide">
          <fo:bookmark-title>Public-Key Records</fo:bookmark-title>
          <fo:bookmark internal-destination="idp746288" starting-state="hide">
            <fo:bookmark-title>Data Types</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp692512" starting-state="hide">
            <fo:bookmark-title>RSA</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp690032" starting-state="hide">
            <fo:bookmark-title>DSA</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp686944" starting-state="hide">
            <fo:bookmark-title>ECDSA </fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp684000" starting-state="hide">
            <fo:bookmark-title>PKIX Certificates</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp494208" starting-state="hide">
            <fo:bookmark-title>Standard Certificate Extensions</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp473168" starting-state="hide">
            <fo:bookmark-title>Private Internet Extensions</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp466000" starting-state="hide">
            <fo:bookmark-title>CRL and CRL Extensions Profile</fo:bookmark-title>
            <fo:bookmark internal-destination="idp335840" starting-state="hide">
              <fo:bookmark-title>CRL Extensions</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp551696" starting-state="hide">
              <fo:bookmark-title>CRL Entry Extensions</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp625920" starting-state="hide">
              <fo:bookmark-title>PKCS#10 Certification Request</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp633072" starting-state="hide">
          <fo:bookmark-title>Getting Started</fo:bookmark-title>
          <fo:bookmark internal-destination="idp636720" starting-state="hide">
            <fo:bookmark-title>PEM Files</fo:bookmark-title>
            <fo:bookmark internal-destination="idp641248" starting-state="hide">
              <fo:bookmark-title>DSA Private Key</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp646352" starting-state="hide">
              <fo:bookmark-title>RSA Private Key with Password</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1061856" starting-state="hide">
              <fo:bookmark-title>X509 Certificates</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1080304" starting-state="hide">
              <fo:bookmark-title>Encoding Public-Key Data to PEM Format</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1086592" starting-state="hide">
            <fo:bookmark-title>RSA Public-Key Cryptography</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1093280" starting-state="hide">
            <fo:bookmark-title>Digital Signatures</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1101808" starting-state="hide">
            <fo:bookmark-title>Verifying a certificate hostname</fo:bookmark-title>
            <fo:bookmark internal-destination="idp1102448" starting-state="hide">
              <fo:bookmark-title>Background</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1111584" starting-state="hide">
              <fo:bookmark-title>The verification process</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1133184" starting-state="hide">
              <fo:bookmark-title>Function call examples</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1143888" starting-state="hide">
              <fo:bookmark-title>Extending the search mechanism</fo:bookmark-title>
              <fo:bookmark internal-destination="idp1145792" starting-state="hide">
                <fo:bookmark-title>Hostname extraction</fo:bookmark-title>
              </fo:bookmark>
              <fo:bookmark internal-destination="idp1151488" starting-state="hide">
                <fo:bookmark-title>Re-defining the match operations</fo:bookmark-title>
              </fo:bookmark>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1162080" starting-state="hide">
              <fo:bookmark-title>"Pinning" a Certificate</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1169680" starting-state="hide">
            <fo:bookmark-title>SSH Files</fo:bookmark-title>
            <fo:bookmark internal-destination="idp1171472" starting-state="hide">
              <fo:bookmark-title>RFC 4716 SSH Public-Key Files</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1175504" starting-state="hide">
              <fo:bookmark-title>OpenSSH Public-Key Format</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1179600" starting-state="hide">
              <fo:bookmark-title>Known Hosts - OpenSSH Format</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1183488" starting-state="hide">
              <fo:bookmark-title>Authorized Keys - OpenSSH Format</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp1187520" starting-state="hide">
              <fo:bookmark-title>Creating an SSH File from Public-Key Data</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
        </fo:bookmark>
      </fo:bookmark>
      <fo:bookmark internal-destination="idp35408" starting-state="hide">
        <fo:bookmark-title>Reference Manual</fo:bookmark-title>
        <fo:bookmark internal-destination="idp1238208" starting-state="hide">
          <fo:bookmark-title>public_key</fo:bookmark-title>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp1216352" starting-state="hide">
          <fo:bookmark-title>public_key</fo:bookmark-title>
          <fo:bookmark internal-destination="idp999520" starting-state="hide">
            <fo:bookmark-title>compute_key/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp999296" starting-state="hide">
            <fo:bookmark-title>compute_key/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp995552" starting-state="hide">
            <fo:bookmark-title>decrypt_private/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp994944" starting-state="hide">
            <fo:bookmark-title>decrypt_private/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp990784" starting-state="hide">
            <fo:bookmark-title>decrypt_public/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp990400" starting-state="hide">
            <fo:bookmark-title>decrypt_public/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp985328" starting-state="hide">
            <fo:bookmark-title>der_decode/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp980800" starting-state="hide">
            <fo:bookmark-title>der_encode/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp975872" starting-state="hide">
            <fo:bookmark-title>dh_gex_group/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp965328" starting-state="hide">
            <fo:bookmark-title>encrypt_private/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp961184" starting-state="hide">
            <fo:bookmark-title>encrypt_public/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp957520" starting-state="hide">
            <fo:bookmark-title>generate_key/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp953792" starting-state="hide">
            <fo:bookmark-title>pem_decode/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp950320" starting-state="hide">
            <fo:bookmark-title>pem_encode/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp947536" starting-state="hide">
            <fo:bookmark-title>pem_entry_decode/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp947056" starting-state="hide">
            <fo:bookmark-title>pem_entry_decode/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp942192" starting-state="hide">
            <fo:bookmark-title>pem_entry_encode/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp941760" starting-state="hide">
            <fo:bookmark-title>pem_entry_encode/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp933760" starting-state="hide">
            <fo:bookmark-title>pkix_decode_cert/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp929376" starting-state="hide">
            <fo:bookmark-title>pkix_encode/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp925792" starting-state="hide">
            <fo:bookmark-title>pkix_is_issuer/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp876480" starting-state="hide">
            <fo:bookmark-title>pkix_is_fixed_dh_cert/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp873648" starting-state="hide">
            <fo:bookmark-title>pkix_is_self_signed/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp868912" starting-state="hide">
            <fo:bookmark-title>pkix_issuer_id/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp865584" starting-state="hide">
            <fo:bookmark-title>pkix_normalize_name/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp862176" starting-state="hide">
            <fo:bookmark-title>pkix_path_validation/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp604736" starting-state="hide">
            <fo:bookmark-title>pkix_crl_issuer/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp600512" starting-state="hide">
            <fo:bookmark-title>pkix_crls_validate/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp665392" starting-state="hide">
            <fo:bookmark-title>pkix_crl_verify/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp660416" starting-state="hide">
            <fo:bookmark-title>pkix_dist_point/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp655152" starting-state="hide">
            <fo:bookmark-title>pkix_dist_points/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp652160" starting-state="hide">
            <fo:bookmark-title>pkix_match_dist_point/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp304720" starting-state="hide">
            <fo:bookmark-title>pkix_sign/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp301968" starting-state="hide">
            <fo:bookmark-title>pkix_sign_types/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp298256" starting-state="hide">
            <fo:bookmark-title>pkix_verify/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp295056" starting-state="hide">
            <fo:bookmark-title>pkix_verify_hostname/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp294384" starting-state="hide">
            <fo:bookmark-title>pkix_verify_hostname/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp122256" starting-state="hide">
            <fo:bookmark-title>sign/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp118768" starting-state="hide">
            <fo:bookmark-title>ssh_decode/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp760256" starting-state="hide">
            <fo:bookmark-title>ssh_encode/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp902144" starting-state="hide">
            <fo:bookmark-title>ssh_hostkey_fingerprint/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp856928" starting-state="hide">
            <fo:bookmark-title>ssh_hostkey_fingerprint/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp809056" starting-state="hide">
            <fo:bookmark-title>ssh_hostkey_fingerprint/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp818320" starting-state="hide">
            <fo:bookmark-title>verify/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp401824" starting-state="hide">
            <fo:bookmark-title>short_name_hash/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
      </fo:bookmark>
    </fo:bookmark>
  </fo:bookmark-tree>
  <fo:page-sequence font-family="sans-serif" force-page-count="even" master-reference="cover" font-size="10pt">
    <fo:flow flow-name="xsl-region-body">
      <fo:block space-before="130mm" space-before.conditionality="retain" text-align="end">
        <fo:external-graphic src="/root/download/otp_src_20.0/bootstrap/lib/erl_docgen/priv/images/erlang-logo.gif"/>
      </fo:block>
      <fo:block id="cover-page" border-before-style="solid" border-before-width="10pt" border-color="#960003" font-size="2.3em" padding-before="0.5em" text-align="end">public_key</fo:block>
      <fo:block font-size="0.9em" text-align="end">Copyright © 2008-2017 Ericsson AB, All Rights Reserved</fo:block>
      <fo:block font-size="0.9em" text-align="end">public_key 1.4.1</fo:block>
      <fo:block font-size="0.9em" text-align="end">July 12, 2017</fo:block>
      <fo:block padding-before="2.5em" font-size="1.33em" font-weight="bold" color="#C00" text-align="end"/>
      <fo:block break-before="page" border-before-style="solid" border-before-width="1pt" border-color="#960003" font-weight="bold" padding-before="0.5em" space-before="200mm" space-before.conditionality="retain">Copyright © 2008-2017 Ericsson AB, All Rights Reserved</fo:block>
      <fo:block font-size="0.9em">
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
 
      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  The Initial Developer of the Original Code is Ericsson AB.
    Ericsson AB, All Rights Reserved.
        </fo:block>
      <fo:block font-size="0.9em" font-weight="bold" space-before="2em">July 12, 2017</fo:block>
    </fo:flow>
  </fo:page-sequence>
  <fo:page-sequence font-family="serif" master-reference="document" initial-page-number="1" font-size="10pt">
    <fo:static-content flow-name="left-header">
      <fo:block text-align="start" border-after-style="solid" border-after-width="2pt" border-color="#960003" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">
        <fo:retrieve-marker retrieve-boundary="page-sequence" retrieve-class-name="chapter-title" retrieve-position="first-including-carryover"/>
      </fo:block>
    </fo:static-content>
    <fo:static-content flow-name="right-header">
      <fo:block text-align="end" border-after-style="solid" border-after-width="2pt" border-color="#960003" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">
        <fo:retrieve-marker retrieve-boundary="page-sequence" retrieve-class-name="chapter-title" retrieve-position="first-including-carryover"/>
      </fo:block>
    </fo:static-content>
    <fo:static-content flow-name="left-footer">
      <fo:block text-align="start" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold"><fo:page-number/> | Ericsson AB, All Rights Reserved:
            public_key</fo:block>
    </fo:static-content>
    <fo:static-content flow-name="right-footer">
      <fo:block text-align="end" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">Ericsson AB, All Rights Reserved:
            public_key | <fo:page-number/></fo:block>
    </fo:static-content>
    <fo:flow flow-name="xsl-region-body"><fo:block/><fo:block id="idp589056" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">1   
      public_key User's Guide</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This application provides an API to public-key infrastructure
    from <fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC
    5280</fo:basic-link></fo:inline> (X.509 certificates) and public-key formats defined by
    the <fo:inline font-weight="bold"><fo:basic-link external-destination="href">
    PKCS</fo:basic-link></fo:inline> standard.</fo:block>
  <fo:block id="idp579440" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.1  Introduction</fo:marker>1.1  Introduction</fo:block><fo:block id="idp575488" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.1 
      Purpose</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Public Key application deals with public-key related file 
    formats, digital signatures, and <fo:inline font-weight="bold"><fo:basic-link external-destination="href">
    X-509 certificates</fo:basic-link></fo:inline>. It is a library application that
    provides encode/decode, sign/verify, encrypt/decrypt, and similar
    functionality. It does not read or write files, it expects or returns
    file contents or partial file contents as binaries.
    </fo:block>
  <fo:block id="idp573264" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.2 
      Prerequisites</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is assumed that the reader is familiar with the Erlang programming 
    language and has a basic understanding of the concepts of using public-keys 
    and digital certificates.</fo:block>
  <fo:block id="idp572080" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.3 
      Performance Tips</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Public Key decode- and encode-functions try to use the NIFs
    in the ASN.1 compilers runtime modules, if they can be found.
    Thus, to have the ASN1 application in the
    path of your system gives the best performance.</fo:block>
  <fo:block id="idp566688" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.2  Public-Key Records</fo:marker>1.2  Public-Key Records</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This chapter briefly describes Erlang records derived from ASN.1
  specifications used to handle public key infrastructure.
  The scope is to describe the data types of each component,
  not the semantics. For information on the
  semantics, refer to the relevant standards and RFCs linked in the sections below.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Use the following include directive to get access to the
  records and constant macros described in the following sections:</fo:block><fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap"> -include_lib("public_key/include/public_key.hrl"). </fo:block><fo:block id="idp746288" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.1 
      Data Types</fo:block>
       

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Common non-standard Erlang
    data types used to describe the record fields in the
    following sections and which are not defined in the Public Key <fo:inline font-style="italic">Reference Manual</fo:inline>
    follows here:</fo:block>
    
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">time() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">utc_time() | general_time()</fo:inline></fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">utc_time() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{utcTime, "YYMMDDHHMMSSZ"}</fo:inline></fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">general_time() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{generalTime, "YYYYMMDDHHMMSSZ"}</fo:inline></fo:block></fo:block></fo:block-container>
 
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">general_name() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{rfc822Name, string()}</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| {dNSName, string()}</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| {x400Address, string()}</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| {directoryName, {rdnSequence, [#AttributeTypeAndValue'{}]}}</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| {eidPartyName, special_string()}</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| {eidPartyName, special_string(), special_string()}</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| {uniformResourceIdentifier, string()}</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| {ipAddress, string()}</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| {registeredId, oid()}</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| {otherName, term()}</fo:inline></fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">special_string() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{teletexString, string()}</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| {printableString, string()}</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| {universalString, string()}</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| {utf8String, binary()}</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| {bmpString, string()}</fo:inline></fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">dist_reason() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">unused</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| keyCompromise</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| cACompromise</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| affiliationChanged</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| superseded</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| cessationOfOperation</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| certificateHold</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| privilegeWithdrawn</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| aACompromise</fo:inline></fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">OID_macro() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">?OID_name()</fo:inline></fo:block>
      </fo:block></fo:block-container>
      
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">OID_name() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">atom()</fo:inline></fo:block>
      </fo:block></fo:block-container>
      
    </fo:block>

  <fo:block id="idp692512" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.2 
      RSA</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Erlang representation of <fo:inline font-weight="bold"><fo:basic-link external-destination="href"> 
    Rivest-Shamir-Adleman cryptosystem (RSA)</fo:basic-link></fo:inline> keys follows:</fo:block>
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#'RSAPublicKey'{
	  modulus,       % integer()
	  publicExponent % integer()
	  }.

#'RSAPrivateKey'{
          version,         % two-prime | multi
	  modulus,         % integer()
	  publicExponent,  % integer()
	  privateExponent, % integer()
	  prime1,          % integer() 
	  prime2,          % integer()
	  exponent1,       % integer()
	  exponent2,       % integer()
	  coefficient,     % integer()
	  otherPrimeInfos  % [#OtherPrimeInfo{}] | asn1_NOVALUE
	 }.

#'OtherPrimeInfo'{
	prime,           % integer()
	exponent,        % integer()
	coefficient      % integer()
 	 }.	 </fo:block>

  <fo:block id="idp690032" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.3 
      DSA</fo:block>
    
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Erlang representation of <fo:inline font-weight="bold"><fo:basic-link external-destination="href">Digital Signature Algorithm (DSA)</fo:basic-link></fo:inline> keys</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">	 
#'DSAPrivateKey',{
	  version,      % integer()
	  p,            % integer()
	  q,            % integer()
	  g,            % integer()
	  y,            % integer()
	  x             % integer()
	  }.

#'Dss-Parms',{
         p,         % integer()
	 q,         % integer()
	 g          % integer()
	 }. </fo:block>
	
  <fo:block id="idp686944" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.4 
      ECDSA </fo:block>
       
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Erlang representation of  <fo:inline font-weight="bold"><fo:basic-link external-destination="href">Elliptic Curve Digital Signature Algorithm (ECDSA)</fo:basic-link></fo:inline> keys follows:</fo:block> 
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">	 
#'ECPrivateKey'{
          version,       % integer()
	  privateKey,    % binary()  
	  parameters,    % der_encoded() - {'EcpkParameters', #'ECParameters'{}} |
	                                   {'EcpkParameters', {namedCurve, oid()}} |
	                                   {'EcpkParameters', 'NULL'} % Inherited by CA
	  publicKey      % bitstring()
	  }.
	  
#'ECParameters'{
      version,    % integer()
      fieldID,    % #'FieldID'{}
      curve,      % #'Curve'{}
      base,       % binary()       
      order,      % integer()        
      cofactor    % integer()
      }.
      
#'Curve'{
	a,        % binary()
	b,        % binary() 
	seed      % bitstring() - optional

	}.

#'FieldID'{
	fieldType,    % oid()
	parameters    % Depending on fieldType
	}.

#'ECPoint'{
      point %  binary() - the public key
      }.</fo:block>
  <fo:block id="idp684000" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.5 
      PKIX Certificates</fo:block>
       
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Erlang representation of PKIX certificates derived from ASN.1 
    specifications see also <fo:inline font-weight="bold"><fo:basic-link external-destination="href">X509 certificates (RFC 5280)</fo:basic-link></fo:inline>, also referred to as <fo:inline font-family="monospace">plain</fo:inline> type,  are as follows:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#'Certificate'{
		tbsCertificate,        % #'TBSCertificate'{}
		signatureAlgorithm,    % #'AlgorithmIdentifier'{} 
		signature              % bitstring()
	       }.

#'TBSCertificate'{
	  version,              % v1 | v2 | v3 
	  serialNumber,         % integer() 
	  signature,            % #'AlgorithmIdentifier'{} 
	  issuer,               % {rdnSequence, [#AttributeTypeAndValue'{}]} 
	  validity,             % #'Validity'{}
	  subject,              % {rdnSequence, [#AttributeTypeAndValue'{}]} 
	  subjectPublicKeyInfo, % #'SubjectPublicKeyInfo'{}
	  issuerUniqueID,       % binary() | asn1_novalue
	  subjectUniqueID,      % binary() | asn1_novalue
	  extensions            % [#'Extension'{}] 
	 }.
	  
#'AlgorithmIdentifier'{
	  algorithm,  % oid() 
	  parameters  % der_encoded()
	 }.</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Erlang alternate representation of PKIX certificate, also referred to as <fo:inline font-family="monospace">otp</fo:inline> type</fo:block>
	 
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#'OTPCertificate'{
		tbsCertificate,        % #'OTPTBSCertificate'{}
		signatureAlgorithm,    % #'SignatureAlgorithm'
		signature              % bitstring()
	       }.

#'OTPTBSCertificate'{
	  version,              % v1 | v2 | v3 
	  serialNumber,         % integer() 
	  signature,            % #'SignatureAlgorithm'
	  issuer,               % {rdnSequence, [#AttributeTypeAndValue'{}]} 
	  validity,             % #'Validity'{}
	  subject,              % {rdnSequence, [#AttributeTypeAndValue'{}]} 
	  subjectPublicKeyInfo, % #'OTPSubjectPublicKeyInfo'{}
	  issuerUniqueID,       % binary() | asn1_novalue
	  subjectUniqueID,      % binary() | asn1_novalue
	  extensions            % [#'Extension'{}] 
	 }.
	  
#'SignatureAlgorithm'{
	  algorithm,  % id_signature_algorithm()
	  parameters  % asn1_novalue | #'Dss-Parms'{}
	 }.</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">id_signature_algorithm() = OID_macro()</fo:inline></fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The available OID names are as follows:</fo:block>
<fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">OID Name</fo:inline></fo:block></fo:table-cell>
  </fo:table-row><fo:table-row>
    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-dsa-with-sha1</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-dsaWithSHA1 (ISO or OID to above)</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">md2WithRSAEncryption</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">md5WithRSAEncryption</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">sha1WithRSAEncryption</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">sha-1WithRSAEncryption (ISO or OID to above)</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">sha224WithRSAEncryption</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">sha256WithRSAEncryption</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">sha512WithRSAEncryption</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	  <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">ecdsa-with-SHA1</fo:block></fo:table-cell>
     </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        2.1:
         
        Signature Algorithm OIDs </fo:block>
    
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The data type <fo:inline font-family="monospace">'AttributeTypeAndValue'</fo:inline>, is represented as
 the following erlang record:</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#'AttributeTypeAndValue'{
	  type,   % id_attributes()
	  value   % term() 
	 }.</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The attribute OID name atoms and their corresponding value types
are as follows:</fo:block>
<fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">OID Name</fo:inline></fo:block></fo:table-cell>
    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Value Type</fo:inline></fo:block></fo:table-cell>
  </fo:table-row><fo:table-row>
    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-at-name</fo:block></fo:table-cell>
    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">special_string()</fo:block></fo:table-cell>
  </fo:table-row><fo:table-row>
    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-at-surname</fo:block></fo:table-cell>
    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">special_string()</fo:block></fo:table-cell>
  </fo:table-row><fo:table-row>
    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-at-givenName</fo:block></fo:table-cell>
    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">special_string()</fo:block></fo:table-cell>
  </fo:table-row><fo:table-row>
    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-at-initials </fo:block></fo:table-cell>
    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">special_string()</fo:block></fo:table-cell>
  </fo:table-row><fo:table-row>
    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-at-generationQualifier</fo:block></fo:table-cell>
    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">special_string()</fo:block></fo:table-cell>
  </fo:table-row><fo:table-row>
    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-at-commonName</fo:block></fo:table-cell>
    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">special_string()</fo:block></fo:table-cell>
  </fo:table-row><fo:table-row>
    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-at-localityName</fo:block></fo:table-cell>
    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">special_string()</fo:block></fo:table-cell>
  </fo:table-row><fo:table-row>
    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-at-stateOrProvinceName</fo:block></fo:table-cell>
    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">special_string()</fo:block></fo:table-cell>
  </fo:table-row><fo:table-row>
    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-at-organizationName</fo:block></fo:table-cell>
    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">special_string()</fo:block></fo:table-cell>
  </fo:table-row><fo:table-row>
    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-at-title</fo:block></fo:table-cell>
    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">special_string()</fo:block></fo:table-cell>
  </fo:table-row><fo:table-row>
    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-at-dnQualifier</fo:block></fo:table-cell>
    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">{printableString, string()}</fo:block></fo:table-cell>
  </fo:table-row><fo:table-row>
    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-at-countryName</fo:block></fo:table-cell>
    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">{printableString, string()}</fo:block></fo:table-cell>
  </fo:table-row><fo:table-row>
    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-at-serialNumber</fo:block></fo:table-cell>
    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">{printableString, string()}</fo:block></fo:table-cell>
  </fo:table-row><fo:table-row>
    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-at-pseudonym</fo:block></fo:table-cell>
    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">special_string()</fo:block></fo:table-cell>
  </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        2.2:
         
        Attribute OIDs</fo:block>
    
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The data types <fo:inline font-family="monospace">'Validity'</fo:inline>, <fo:inline font-family="monospace">'SubjectPublicKeyInfo'</fo:inline>, and 
<fo:inline font-family="monospace">'SubjectPublicKeyInfoAlgorithm'</fo:inline> are represented as the following Erlang records:</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#'Validity'{ 
	  notBefore, % time()
	  notAfter   % time()
	 }.
	 
#'SubjectPublicKeyInfo'{
	  algorithm,       % #AlgorithmIdentifier{} 
	  subjectPublicKey % binary() 
	 }.

#'SubjectPublicKeyInfoAlgorithm'{
	  algorithm,  % id_public_key_algorithm()
	  parameters  % public_key_params()
	 }.</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The public-key algorithm OID name atoms are as follows:</fo:block>
<fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">OID Name</fo:inline></fo:block></fo:table-cell>
  </fo:table-row><fo:table-row>
    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">rsaEncryption</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-dsa</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">dhpublicnumber</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-keyExchangeAlgorithm</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-ecPublicKey</fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        2.3:
         
        Public-Key Algorithm OIDs</fo:block>
    
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#'Extension'{
	  extnID,    % id_extensions() | oid() 
	  critical,  % boolean()
	  extnValue  % der_encoded()
	 }.</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">id_extensions()</fo:inline>  
  <fo:inline font-style="italic">Standard Certificate Extensions</fo:inline>, 
  <fo:inline font-style="italic">Private Internet Extensions</fo:inline>,  
  <fo:inline font-style="italic">CRL Extensions</fo:inline> and 
  <fo:inline font-style="italic">CRL Entry Extensions</fo:inline>.
</fo:block>
    
<fo:block id="idp494208" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.6 
      Standard Certificate Extensions</fo:block>
  
  
    
  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The standard certificate extensions OID name atoms and their 
  corresponding value types are as follows:</fo:block>

  <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">OID Name</fo:inline></fo:block></fo:table-cell>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Value Type</fo:inline></fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-ce-authorityKeyIdentifier</fo:block></fo:table-cell>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">#'AuthorityKeyIdentifier'{}</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-ce-subjectKeyIdentifier</fo:block></fo:table-cell>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">oid()</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-ce-keyUsage</fo:block></fo:table-cell>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">[key_usage()]</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-ce-privateKeyUsagePeriod</fo:block></fo:table-cell>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">#'PrivateKeyUsagePeriod'{}</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-ce-certificatePolicies</fo:block></fo:table-cell>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">#'PolicyInformation'{}</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-ce-policyMappings</fo:block></fo:table-cell>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">#'PolicyMappings_SEQOF'{}</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-ce-subjectAltName</fo:block></fo:table-cell>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">general_name()</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-ce-issuerAltName</fo:block></fo:table-cell>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">general_name()</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-ce-subjectDirectoryAttributes</fo:block></fo:table-cell>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"> [#'Attribute'{}]</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-ce-basicConstraints</fo:block></fo:table-cell>
	  <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">#'BasicConstraints'{}</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-ce-nameConstraints</fo:block></fo:table-cell>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">#'NameConstraints'{}</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-ce-policyConstraints</fo:block></fo:table-cell>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">#'PolicyConstraints'{}</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-ce-extKeyUsage</fo:block></fo:table-cell>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">[id_key_purpose()]</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-ce-cRLDistributionPoints</fo:block></fo:table-cell>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">[#'DistributionPoint'{}]</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-ce-inhibitAnyPolicy</fo:block></fo:table-cell>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">integer()</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-ce-freshestCRL</fo:block></fo:table-cell>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">[#'DistributionPoint'{}]</fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        2.4:
         
        Standard Certificate Extensions</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here:</fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">key_usage()</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">= <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">digitalSignature</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| nonRepudiation</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| keyEncipherment</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| dataEncipherment</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| keyAgreement</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| keyCertSign</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| cRLSign</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| encipherOnly</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| decipherOnly </fo:inline></fo:block>
      </fo:block></fo:block-container>
    </fo:block>
   
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">And for <fo:inline font-family="monospace">id_key_purpose()</fo:inline>:</fo:block>
    
<fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">OID Name</fo:inline></fo:block></fo:table-cell>
  </fo:table-row><fo:table-row>
    <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-kp-serverAuth</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-kp-clientAuth</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-kp-codeSigning</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-kp-emailProtection</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-kp-timeStamping</fo:block></fo:table-cell>
      </fo:table-row><fo:table-row>
	<fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-kp-OCSPSigning</fo:block></fo:table-cell>
      </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        2.5:
         
        Key Purpose OIDs</fo:block>
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#'AuthorityKeyIdentifier'{
	  keyIdentifier,	    % oid()
	  authorityCertIssuer,      % general_name()
	  authorityCertSerialNumber % integer() 
	 }.

#'PrivateKeyUsagePeriod'{
	  notBefore,   % general_time()
	  notAfter     % general_time()
	 }.

#'PolicyInformation'{
	  policyIdentifier,  % oid()
	  policyQualifiers   % [#PolicyQualifierInfo{}]
	 }.

#'PolicyQualifierInfo'{
	  policyQualifierId,   % oid()
	  qualifier            % string() | #'UserNotice'{}
	 }.

#'UserNotice'{
         noticeRef,   % #'NoticeReference'{}
	 explicitText % string()
	 }.

#'NoticeReference'{
         organization,    % string()
	 noticeNumbers    % [integer()]
	 }.

#'PolicyMappings_SEQOF'{
	  issuerDomainPolicy,  % oid()
	  subjectDomainPolicy  % oid()
	 }.

#'Attribute'{
          type,  % oid()
	  values % [der_encoded()]
	  }).

#'BasicConstraints'{
	  cA,		    % boolean()
	  pathLenConstraint % integer()
	 }).

#'NameConstraints'{
	  permittedSubtrees, % [#'GeneralSubtree'{}]
	  excludedSubtrees   % [#'GeneralSubtree'{}]
	 }).

#'GeneralSubtree'{
	  base,    % general_name()
	  minimum, % integer()
	  maximum  % integer()
	 }).

#'PolicyConstraints'{
	  requireExplicitPolicy, % integer()
	  inhibitPolicyMapping   % integer()
	 }).

#'DistributionPoint'{
	  distributionPoint, % {fullName, [general_name()]} | {nameRelativeToCRLIssuer,
	  [#AttributeTypeAndValue{}]}
	  reasons,           % [dist_reason()]
	  cRLIssuer          % [general_name()]
	 }).</fo:block>

<fo:block id="idp473168" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.7 
      Private Internet Extensions</fo:block>
   
      

   <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The private internet extensions OID name atoms and their corresponding value 
   types are as follows:</fo:block>

   <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">OID Name</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Value Type</fo:inline></fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-pe-authorityInfoAccess</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">[#'AccessDescription'{}]</fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-pe-subjectInfoAccess</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">[#'AccessDescription'{}]</fo:block></fo:table-cell>
        </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        2.6:
         
        Private Internet Extensions</fo:block>   
 
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#'AccessDescription'{
           accessMethod,    % oid()
	   accessLocation   % general_name()
	 }).</fo:block>

 <fo:block id="idp466000" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.8 
      CRL and CRL Extensions Profile</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Erlang representation of CRL and CRL extensions profile 
    derived from ASN.1 specifications and RFC 5280 are as follows:</fo:block>

 <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#'CertificateList'{
          tbsCertList,        % #'TBSCertList{}
          signatureAlgorithm, % #'AlgorithmIdentifier'{} 
          signature           % bitstring()
	  }).

#'TBSCertList'{
      version,             % v2 (if defined)
      signature,           % #AlgorithmIdentifier{}
      issuer,              % {rdnSequence, [#AttributeTypeAndValue'{}]} 
      thisUpdate,          % time()
      nextUpdate,          % time() 
      revokedCertificates, % [#'TBSCertList_revokedCertificates_SEQOF'{}]
      crlExtensions        % [#'Extension'{}]
      }).

#'TBSCertList_revokedCertificates_SEQOF'{
         userCertificate,      % integer()
 	 revocationDate,       % timer()
	 crlEntryExtensions    % [#'Extension'{}]
	 }).</fo:block>
 
 <fo:block id="idp335840" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">CRL Extensions</fo:block>
   
   

   <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The CRL extensions OID name atoms and their corresponding value types are as follows:</fo:block>
   
   
        <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">OID Name</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Value Type</fo:inline></fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-ce-authorityKeyIdentifier</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">#'AuthorityKeyIdentifier{}</fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-ce-issuerAltName</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">{rdnSequence, [#AttributeTypeAndValue'{}]}</fo:block></fo:table-cell>
           </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-ce-cRLNumber</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">integer()</fo:block></fo:table-cell>
           </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-ce-deltaCRLIndicator</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">integer()</fo:block></fo:table-cell>
           </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-ce-issuingDistributionPoint</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">#'IssuingDistributionPoint'{}</fo:block></fo:table-cell>
           </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-ce-freshestCRL</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">[#'Distributionpoint'{}]</fo:block></fo:table-cell>
           </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        2.7:
         
        CRL Extensions</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here, the data type <fo:inline font-family="monospace">'IssuingDistributionPoint'</fo:inline> is represented as 
      the following Erlang record:</fo:block>

      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#'IssuingDistributionPoint'{
          distributionPoint,         % {fullName, [general_name()]} | {nameRelativeToCRLIssuer,
	  [#AttributeTypeAndValue'{}]}
	  onlyContainsUserCerts,     % boolean()
	  onlyContainsCACerts,       % boolean()
	  onlySomeReasons,           % [dist_reason()]
	  indirectCRL,               % boolean()
	  onlyContainsAttributeCerts % boolean()
	  }).</fo:block> 
 
 
 <fo:block id="idp551696" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">CRL Entry Extensions</fo:block>
   
   

   <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The CRL entry extensions OID name atoms and their corresponding value types are as follows:</fo:block>

       <fo:table border-collapse="separate" space-after="1em" space-before="1em" table-layout="fixed" inline-progression-dimension="100%"><fo:table-body><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">OID Name</fo:inline></fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start"><fo:inline font-weight="bold">Value Type</fo:inline></fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-ce-cRLReason</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">crl_reason()</fo:block></fo:table-cell>
        </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-ce-holdInstructionCode</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">oid()</fo:block></fo:table-cell>
           </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-ce-invalidityDate</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">general_time()</fo:block></fo:table-cell>
           </fo:table-row><fo:table-row>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">id-ce-certificateIssuer</fo:block></fo:table-cell>
          <fo:table-cell border-style="solid" border-width="0.5pt" display-align="center" padding-after="0.5em" padding-before="0.5em" padding-end="0.3em" padding-start="0.3em" text-align="start"><fo:block text-align="start">general_name()</fo:block></fo:table-cell>
           </fo:table-row></fo:table-body></fo:table><fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Table
        2.8:
         
        CRL Entry Extensions</fo:block>


       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here:</fo:block>
       <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">crl_reason()</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">= <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">unspecified</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| keyCompromise</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| cACompromise</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| affiliationChanged</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| superseded</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| cessationOfOperation</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| certificateHold</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| removeFromCRL</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| privilegeWithdrawn</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| aACompromise</fo:inline></fo:block>
      </fo:block></fo:block-container>
       </fo:block>

 

 <fo:block id="idp625920" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">PKCS#10 Certification Request</fo:block>
   
   
   <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Erlang representation of a PKCS#10 certification request 
   derived from ASN.1 specifications and RFC 5280 are as follows:</fo:block>
   <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
#'CertificationRequest'{
          certificationRequestInfo #'CertificationRequestInfo'{},
	  signatureAlgorithm	   #'CertificationRequest_signatureAlgorithm'{}}.
	  signature                bitstring()
	  }

#'CertificationRequestInfo'{
	  version       atom(),
	  subject       {rdnSequence, [#AttributeTypeAndValue'{}]} ,
	  subjectPKInfo #'CertificationRequestInfo_subjectPKInfo'{},
	  attributes    [#'AttributePKCS-10' {}]
	  }

#'CertificationRequestInfo_subjectPKInfo'{
          algorithm		#'CertificationRequestInfo_subjectPKInfo_algorithm'{}
	  subjectPublicKey 	  bitstring()
	  }

#'CertificationRequestInfo_subjectPKInfo_algorithm'{
     algorithm = oid(),
     parameters = der_encoded()
}	  

#'CertificationRequest_signatureAlgorithm'{
     algorithm = oid(),
     parameters = der_encoded()
     }

#'AttributePKCS-10'{
    type = oid(),
    values = [der_encoded()]
}  </fo:block> 
 
<fo:block id="idp633072" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.3  Getting Started</fo:marker>1.3  Getting Started</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This section describes examples of how to use the 
    Public Key API. Keys and certificates used in the following 
    sections are generated only for testing the Public Key 
    application.</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Some shell printouts in the following examples
    are abbreviated for increased readability.</fo:block><fo:block id="idp636720" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.1 
      PEM Files</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Public-key data (keys, certificates, and so on) can be stored in 
    Privacy Enhanced Mail (PEM) format. 
    The PEM files have the following structure:</fo:block>
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
    &lt;text&gt;
    -----BEGIN &lt;SOMETHING&gt;-----
    &lt;Attribute&gt; : &lt;Value&gt;
    &lt;Base64 encoded DER data&gt;
    -----END &lt;SOMETHING&gt;-----
    &lt;text&gt;</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A file can contain several <fo:inline font-family="monospace">BEGIN/END</fo:inline> blocks. Text lines between
    blocks are ignored. Attributes, if present, are ignored except
    for <fo:inline font-family="monospace">Proc-Type</fo:inline> and <fo:inline font-family="monospace">DEK-Info</fo:inline>, which are used when <fo:inline font-family="monospace">DER</fo:inline> 
    data is encrypted.</fo:block>

    <fo:block id="idp641248" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">DSA Private Key</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A DSA private key can look as follows:</fo:block>
      <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">File handling is not done by the Public Key application.</fo:block></fo:block>
      
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">1&gt; {ok, PemBin} = file:read_file("dsa.pem").
{ok,&lt;&lt;"-----BEGIN DSA PRIVATE KEY-----\nMIIBuw"...&gt;&gt;}</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following PEM file has only one entry, a private DSA key:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">2&gt; [DSAEntry] =  public_key:pem_decode(PemBin).
[{'DSAPrivateKey',&lt;&lt;48,130,1,187,2,1,0,2,129,129,0,183,
                    179,230,217,37,99,144,157,21,228,204,
		    162,207,61,246,...&gt;&gt;,
		    not_encrypted}]</fo:block>
      
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">3&gt; Key = public_key:pem_entry_decode(DSAEntry).
#'DSAPrivateKey'{version = 0,
                 p = 12900045185019966618...6593,
                 q = 1216700114794736143432235288305776850295620488937,
                 g = 10442040227452349332...47213,
                 y = 87256807980030509074...403143,
                 x = 510968529856012146351317363807366575075645839654}</fo:block>
    

    <fo:block id="idp646352" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">RSA Private Key with Password</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An RSA private key encrypted with a password can look as follows:</fo:block>
      
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">1&gt; {ok, PemBin} = file:read_file("rsa.pem").
{ok,&lt;&lt;"Bag Attribut"...&gt;&gt;}</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following PEM file has only one entry, a private RSA key:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">2&gt;[RSAEntry] = public_key:pem_decode(PemBin).
[{'RSAPrivateKey',&lt;&lt;224,108,117,203,152,40,15,77,128,126,
                    221,195,154,249,85,208,202,251,109,
                    119,120,57,29,89,19,9,...&gt;&gt;,
                  {"DES-EDE3-CBC",&lt;&lt;"kÙeø¼pµL"&gt;&gt;}}]</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this following example, the password is <fo:inline font-family="monospace">"abcd1234"</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">3&gt; Key = public_key:pem_entry_decode(RSAEntry, "abcd1234").
    #'RSAPrivateKey'{version = 'two-prime',
                 modulus = 1112355156729921663373...2737107,
                 publicExponent = 65537,
                 privateExponent = 58064406231183...2239766033,
                 prime1 = 11034766614656598484098...7326883017,
                 prime2 = 10080459293561036618240...77738643771,
                 exponent1 = 77928819327425934607...22152984217,
                 exponent2 = 36287623121853605733...20588523793,
                 coefficient = 924840412626098444...41820968343,
                 otherPrimeInfos = asn1_NOVALUE}</fo:block>
    
  
  <fo:block id="idp1061856" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">X509 Certificates</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following is an example of X509 certificates:</fo:block>
    
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">1&gt; {ok, PemBin} = file:read_file("cacerts.pem").
{ok,&lt;&lt;"-----BEGIN CERTIFICATE-----\nMIIC7jCCAl"...&gt;&gt;}</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following file includes two certificates:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">2&gt; [CertEntry1, CertEntry2] = public_key:pem_decode(PemBin).
[{'Certificate',&lt;&lt;48,130,2,238,48,130,2,87,160,3,2,1,2,2,
                  9,0,230,145,97,214,191,2,120,150,48,13,
                  ...&gt;&gt;,
                not_encrypted},
 {'Certificate',&lt;&lt;48,130,3,200,48,130,3,49,160,3,2,1,2,2,1,
                  1,48,13,6,9,42,134,72,134,247,...&gt;&gt;,
                not_encrypted}]</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Certificates can be decoded as usual:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">2&gt; Cert = public_key:pem_entry_decode(CertEntry1).
#'Certificate'{
    tbsCertificate =
        #'TBSCertificate'{
            version = v3,serialNumber = 16614168075301976214,
            signature =
                #'AlgorithmIdentifier'{
                    algorithm = {1,2,840,113549,1,1,5},
                    parameters = &lt;&lt;5,0&gt;&gt;},
            issuer =
                {rdnSequence,
                    [[#'AttributeTypeAndValue'{
                          type = {2,5,4,3},
                          value = &lt;&lt;19,8,101,114,108,97,110,103,67,65&gt;&gt;}],
                     [#'AttributeTypeAndValue'{
                          type = {2,5,4,11},
                          value = &lt;&lt;19,10,69,114,108,97,110,103,32,79,84,80&gt;&gt;}],
                     [#'AttributeTypeAndValue'{
                          type = {2,5,4,10},
                          value = &lt;&lt;19,11,69,114,105,99,115,115,111,110,32,65,66&gt;&gt;}],
                     [#'AttributeTypeAndValue'{
                          type = {2,5,4,7},
                          value = &lt;&lt;19,9,83,116,111,99,107,104,111,108,109&gt;&gt;}],
                     [#'AttributeTypeAndValue'{
                          type = {2,5,4,6},
                          value = &lt;&lt;19,2,83,69&gt;&gt;}],
                     [#'AttributeTypeAndValue'{
                          type = {1,2,840,113549,1,9,1},
                          value = &lt;&lt;22,22,112,101,116,101,114,64,101,114,...&gt;&gt;}]]},
            validity =
                #'Validity'{
                    notBefore = {utcTime,"080109082929Z"},
                    notAfter = {utcTime,"080208082929Z"}},
            subject =
                {rdnSequence,
                    [[#'AttributeTypeAndValue'{
                          type = {2,5,4,3},
                          value = &lt;&lt;19,8,101,114,108,97,110,103,67,65&gt;&gt;}],
                     [#'AttributeTypeAndValue'{
                          type = {2,5,4,11},
                          value = &lt;&lt;19,10,69,114,108,97,110,103,32,79,84,80&gt;&gt;}],
                     [#'AttributeTypeAndValue'{
                          type = {2,5,4,10},
                          value = &lt;&lt;19,11,69,114,105,99,115,115,111,110,32,...&gt;&gt;}],
                     [#'AttributeTypeAndValue'{
                          type = {2,5,4,7},
                          value = &lt;&lt;19,9,83,116,111,99,107,104,111,108,...&gt;&gt;}],
                     [#'AttributeTypeAndValue'{
                          type = {2,5,4,6},
                          value = &lt;&lt;19,2,83,69&gt;&gt;}],
                     [#'AttributeTypeAndValue'{
                          type = {1,2,840,113549,1,9,1},
                          value = &lt;&lt;22,22,112,101,116,101,114,64,...&gt;&gt;}]]},
            subjectPublicKeyInfo =
                #'SubjectPublicKeyInfo'{
                    algorithm =
                        #'AlgorithmIdentifier'{
                            algorithm = {1,2,840,113549,1,1,1},
                            parameters = &lt;&lt;5,0&gt;&gt;},
                    subjectPublicKey =
                        {0,&lt;&lt;48,129,137,2,129,129,0,203,209,187,77,73,231,90,...&gt;&gt;}},
            issuerUniqueID = asn1_NOVALUE,
            subjectUniqueID = asn1_NOVALUE,
            extensions =
                [#'Extension'{
                     extnID = {2,5,29,19},
                     critical = true,
                     extnValue = [48,3,1,1,255]},
                 #'Extension'{
                     extnID = {2,5,29,15},
                     critical = false,
                     extnValue = [3,2,1,6]},
                 #'Extension'{
                     extnID = {2,5,29,14},
                     critical = false,
                     extnValue = [4,20,27,217,65,152,6,30,142|...]},
                 #'Extension'{
                     extnID = {2,5,29,17},
                     critical = false,
                     extnValue = [48,24,129,22,112,101,116,101|...]}]},
    signatureAlgorithm =
        #'AlgorithmIdentifier'{
            algorithm = {1,2,840,113549,1,1,5},
            parameters = &lt;&lt;5,0&gt;&gt;},
    signature =
    &lt;&lt;163,186,7,163,216,152,63,47,154,234,139,73,154,96,120,
    165,2,52,196,195,109,167,192,...&gt;&gt;}</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Parts of certificates can be decoded with
      <fo:inline font-family="monospace">public_key:der_decode/2</fo:inline>, using the ASN.1 type of that part.
      However, an application-specific certificate extension requires 
      application-specific ASN.1 decode/encode-functions.
      In the recent example, the first value of <fo:inline font-family="monospace">rdnSequence</fo:inline> is 
      of ASN.1 type <fo:inline font-family="monospace">'X520CommonName'. ({2,5,4,3} = ?id-at-commonName)</fo:inline>:</fo:block>
      
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">public_key:der_decode('X520CommonName', &lt;&lt;19,8,101,114,108,97,110,103,67,65&gt;&gt;).
{printableString,"erlangCA"}</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">However, certificates can also be decoded using <fo:inline font-family="monospace">pkix_decode_cert/2</fo:inline>, 
      which can customize and recursively decode standard parts of a certificate:</fo:block>

      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">3&gt;{_, DerCert, _} = CertEntry1.</fo:block>

      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">4&gt; public_key:pkix_decode_cert(DerCert, otp).
#'OTPCertificate'{
    tbsCertificate =
        #'OTPTBSCertificate'{
            version = v3,serialNumber = 16614168075301976214,
            signature =
                #'SignatureAlgorithm'{
                    algorithm = {1,2,840,113549,1,1,5},
                    parameters = 'NULL'},
            issuer =
                {rdnSequence,
                    [[#'AttributeTypeAndValue'{
                          type = {2,5,4,3},
                          value = {printableString,"erlangCA"}}],
                     [#'AttributeTypeAndValue'{
                          type = {2,5,4,11},
                          value = {printableString,"Erlang OTP"}}],
                     [#'AttributeTypeAndValue'{
                          type = {2,5,4,10},
                          value = {printableString,"Ericsson AB"}}],
                     [#'AttributeTypeAndValue'{
                          type = {2,5,4,7},
                          value = {printableString,"Stockholm"}}],
                     [#'AttributeTypeAndValue'{type = {2,5,4,6},value = "SE"}],
                     [#'AttributeTypeAndValue'{
                          type = {1,2,840,113549,1,9,1},
                          value = "peter@erix.ericsson.se"}]]},
            validity =
                #'Validity'{
                    notBefore = {utcTime,"080109082929Z"},
                    notAfter = {utcTime,"080208082929Z"}},
            subject =
                {rdnSequence,
                    [[#'AttributeTypeAndValue'{
                          type = {2,5,4,3},
                          value = {printableString,"erlangCA"}}],
                     [#'AttributeTypeAndValue'{
                          type = {2,5,4,11},
                          value = {printableString,"Erlang OTP"}}],
                     [#'AttributeTypeAndValue'{
                          type = {2,5,4,10},
                          value = {printableString,"Ericsson AB"}}],
                     [#'AttributeTypeAndValue'{
                          type = {2,5,4,7},
                          value = {printableString,"Stockholm"}}],
                     [#'AttributeTypeAndValue'{type = {2,5,4,6},value = "SE"}],
                     [#'AttributeTypeAndValue'{
                          type = {1,2,840,113549,1,9,1},
                          value = "peter@erix.ericsson.se"}]]},
            subjectPublicKeyInfo =
                #'OTPSubjectPublicKeyInfo'{
                    algorithm =
                        #'PublicKeyAlgorithm'{
                            algorithm = {1,2,840,113549,1,1,1},
                            parameters = 'NULL'},
                    subjectPublicKey =
                        #'RSAPublicKey'{
                            modulus =
                                1431267547247997...37419,
                            publicExponent = 65537}},
            issuerUniqueID = asn1_NOVALUE,
            subjectUniqueID = asn1_NOVALUE,
            extensions =
                [#'Extension'{
                     extnID = {2,5,29,19},
                     critical = true,
                     extnValue =
                         #'BasicConstraints'{
                             cA = true,pathLenConstraint = asn1_NOVALUE}},
                 #'Extension'{
                     extnID = {2,5,29,15},
                     critical = false,
                     extnValue = [keyCertSign,cRLSign]},
                 #'Extension'{
                     extnID = {2,5,29,14},
                     critical = false,
                     extnValue = [27,217,65,152,6,30,142,132,245|...]},
                 #'Extension'{
                     extnID = {2,5,29,17},
                     critical = false,
                     extnValue = [{rfc822Name,"peter@erix.ericsson.se"}]}]},
    signatureAlgorithm =
        #'SignatureAlgorithm'{
            algorithm = {1,2,840,113549,1,1,5},
            parameters = 'NULL'},
    signature =
         &lt;&lt;163,186,7,163,216,152,63,47,154,234,139,73,154,96,120,
           165,2,52,196,195,109,167,192,...&gt;&gt;}</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This call is equivalent to <fo:inline font-family="monospace">public_key:pem_entry_decode(CertEntry1)</fo:inline>:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">5&gt; public_key:pkix_decode_cert(DerCert, plain).
#'Certificate'{ ...}</fo:block>
  

  <fo:block id="idp1080304" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Encoding Public-Key Data to PEM Format</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you have public-key data and want to create a PEM file
    this can be done by calling functions
    <fo:inline font-family="monospace">public_key:pem_entry_encode/2</fo:inline> and <fo:inline font-family="monospace">pem_encode/1</fo:inline> and 
    saving the result to a file. For example, assume that you have 
    <fo:inline font-family="monospace">PubKey = 'RSAPublicKey'{}</fo:inline>. Then you can create a PEM-"RSA PUBLIC KEY" 
    file (ASN.1 type <fo:inline font-family="monospace">'RSAPublicKey'</fo:inline>) or a PEM-"PUBLIC KEY" file
    (<fo:inline font-family="monospace">'SubjectPublicKeyInfo'</fo:inline> ASN.1 type).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The second element of the PEM-entry is the ASN.1 <fo:inline font-family="monospace">DER</fo:inline> encoded
    key data:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">1&gt; PemEntry = public_key:pem_entry_encode('RSAPublicKey', RSAPubKey).
{'RSAPublicKey', &lt;&lt;48,72,...&gt;&gt;, not_encrypted}

2&gt; PemBin = public_key:pem_encode([PemEntry]).
&lt;&lt;"-----BEGIN RSA PUBLIC KEY-----\nMEgC...&gt;&gt;

3&gt; file:write_file("rsa_pub_key.pem", PemBin).
ok</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">or:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">1&gt; PemEntry = public_key:pem_entry_encode('SubjectPublicKeyInfo', RSAPubKey).
{'SubjectPublicKeyInfo', &lt;&lt;48,92...&gt;&gt;, not_encrypted}

2&gt; PemBin = public_key:pem_encode([PemEntry]).
&lt;&lt;"-----BEGIN PUBLIC KEY-----\nMFw...&gt;&gt;

3&gt; file:write_file("pub_key.pem", PemBin).
ok</fo:block>

  
<fo:block id="idp1086592" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.2 
      RSA Public-Key Cryptography</fo:block>
      
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Suppose you have the following private key and a corresponding public key:</fo:block>
       <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	 <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">PrivateKey = #'RSAPrivateKey{}'</fo:inline> and 
	 the plaintext <fo:inline font-family="monospace">Msg = binary()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
	 <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">PublicKey = #'RSAPublicKey'{}</fo:inline>
	 </fo:block></fo:list-item-body></fo:list-item>
       </fo:list-block>
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Then you can proceed as follows:</fo:block>

       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encrypt with the private key:</fo:block>
       <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">RsaEncrypted = public_key:encrypt_private(Msg, PrivateKey),
Msg = public_key:decrypt_public(RsaEncrypted, PublicKey),</fo:block>

       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encrypt with the public key:</fo:block>
       <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">RsaEncrypted = public_key:encrypt_public(Msg, PublicKey),
Msg = public_key:decrypt_private(RsaEncrypted, PrivateKey),</fo:block>

      <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">You normally do only one of the encrypt or decrypt operations, 
      and the peer does the other. This normaly used in legacy applications
      as a primitive digital signature.
      </fo:block></fo:block>

  <fo:block id="idp1093280" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.3 
      Digital Signatures</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Suppose you have the following private key and a corresponding public key:</fo:block>
    
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">PrivateKey = #'RSAPrivateKey{}'</fo:inline> or
       <fo:inline font-family="monospace">#'DSAPrivateKey'{}</fo:inline> and the plaintext <fo:inline font-family="monospace">Msg = binary()</fo:inline></fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">PublicKey = #'RSAPublicKey'{}</fo:inline> or
       <fo:inline font-family="monospace">{integer(), #'DssParams'{}}</fo:inline></fo:block></fo:list-item-body></fo:list-item>
     </fo:list-block>
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Then you can proceed as follows:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">Signature = public_key:sign(Msg, sha, PrivateKey),
true = public_key:verify(Msg, sha, Signature, PublicKey),</fo:block>

    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">You normally do only one of the sign or verify operations,
    and the peer does the other.</fo:block></fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It can be appropriate to calculate the message digest before
    calling <fo:inline font-family="monospace">sign</fo:inline> or <fo:inline font-family="monospace">verify</fo:inline>, and then use <fo:inline font-family="monospace">none</fo:inline> as 
    second argument:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">Digest = crypto:sha(Msg),
Signature = public_key:sign(Digest, none, PrivateKey),
true = public_key:verify(Digest, none, Signature, PublicKey),</fo:block>
    
  <fo:block id="idp1101808" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.4 
      Verifying a certificate hostname</fo:block>
   
   
   <fo:block id="idp1102448" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Background</fo:block>
     
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a client checks a server certificate there are a number of checks available like
     checks that the certificate is not revoked, not forged or not out-of-date.
     </fo:block>
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are however attacks that are not detected by those checks. Suppose a bad guy has
     succeded with a DNS infection. Then the client could belive it is connecting to one host but
     ends up at another but evil one. Though it is evil, it could have a perfectly legal
     certificate! The certificate has a valid signature, it is not revoked, the certificate chain
     is not faked and has a trusted root and so on.
     </fo:block>
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To detect that the server is not the intended one, the client must additionaly perform
     a <fo:inline font-style="italic">hostname verification</fo:inline>. This procedure is described in
     <fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC 6125</fo:basic-link></fo:inline>. The idea is that the certificate
     lists the hostnames it could be fetched from. This is checked by the certificate issuer when
     the certificate is signed. So if the certificate is issued by a trusted root the client 
     could trust the host names signed in it.
     </fo:block>
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There is a default hostname matching procedure defined in
     <fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC 6125, section 6</fo:basic-link></fo:inline>
     as well as protocol dependent variations defined in
     <fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC 6125 appendix B</fo:basic-link></fo:inline>.
     The default procedure is implemented in
     <fo:inline font-style="italic">public_key:pkix_verify_hostname/2,3</fo:inline>.
     It is possible for a client to hook in modified rules using the options list.
     </fo:block>
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Some terminology is needed: the certificate presents hostname(s) on which it is valid.
     Those are called <fo:inline font-style="italic">Presented IDs</fo:inline>. The hostname(s) the client belives it connects to
     are called <fo:inline font-style="italic">Reference IDs</fo:inline>. The matching rules aims to verify that there is at least
     one of the Reference IDs that matches one of the Presented IDs. If not, the verification fails.
     </fo:block>
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The IDs contains normal fully qualified domain names like e.g <fo:inline font-family="monospace">foo.example.com</fo:inline>,
     but IP addresses are not recommended. The rfc describes why this is not recommended as well
     as security considerations about how to aquire the Reference IDs.
     </fo:block>
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Internationalized domain names are not supported.
     </fo:block>
   
   <fo:block id="idp1111584" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">The verification process</fo:block>
     
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Traditionally the Presented IDs were found in the <fo:inline font-family="monospace">Subject</fo:inline> certificate field as <fo:inline font-family="monospace">CN</fo:inline>
     names. This is still quite common. When printing a certificate they show up as:
     </fo:block>
     <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 $ openssl x509 -text &lt; cert.pem
 ...
 Subject: C=SE, CN=example.com, CN=*.example.com, O=erlang.org
 ...
     </fo:block>
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The example <fo:inline font-family="monospace">Subject</fo:inline> field has one C, two CN and one O part. It is only the
     CN (Common Name) that is used by hostname verification. The two other (C and O) is not used
     here even when they contain a domain name like the O part. The C and O parts are defined
     elsewhere and meaningful only for other functions.
     </fo:block>
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the example the Presented IDs are <fo:inline font-family="monospace">example.com</fo:inline> as well as hostnames matching
     <fo:inline font-family="monospace">*.example.com</fo:inline>. For example <fo:inline font-family="monospace">foo.example.com</fo:inline> and <fo:inline font-family="monospace">bar.example.com</fo:inline> both
     matches but not <fo:inline font-family="monospace">foo.bar.example.com</fo:inline>. The name <fo:inline font-family="monospace">erlang.org</fo:inline> matches neither
     since it is not a CN.
     </fo:block>
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In case where the Presented IDs are fetched from the <fo:inline font-family="monospace">Subject</fo:inline> certificate field, the
     names may contain wildcard characters. The function handles this as defined in
     <fo:inline font-weight="bold"><fo:basic-link external-destination="href">chapter 6.4.3 in RFC 6125</fo:basic-link></fo:inline>.
     </fo:block>
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There may only be one wildcard character and that is in the first label, for example:
     <fo:inline font-family="monospace">*.example.com</fo:inline>. This matches <fo:inline font-family="monospace">foo.example.com</fo:inline> but neither <fo:inline font-family="monospace">example.com</fo:inline> nor
     <fo:inline font-family="monospace">foo.bar.example.com</fo:inline>.
     </fo:block>
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There may be label characters before or/and after the wildcard. For example:
     <fo:inline font-family="monospace">a*d.example.com</fo:inline> matches <fo:inline font-family="monospace">abcd.example.com</fo:inline> and <fo:inline font-family="monospace">ad.example.com</fo:inline>,
     but not <fo:inline font-family="monospace">ab.cd.example.com</fo:inline>.
     </fo:block>
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the previous example there is no indication of which protocols are expected. So a client
     has no indication of whether it is a web server, an ldap server or maybe a sip server it is
     connected to.
     There are fields in the certificate that can indicate this. To be more exact, the rfc
     introduces the usage of the <fo:inline font-family="monospace">X509v3 Subject Alternative Name</fo:inline> in the <fo:inline font-family="monospace">X509v3 extensions</fo:inline>
     field:
     </fo:block>
     <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 $ openssl x509 -text &lt; cert.pem
 ...
 X509v3 extensions:
     X509v3 Subject Alternative Name:
         DNS:kb.example.org, URI:https://www.example.org
 ...
     </fo:block>
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here <fo:inline font-family="monospace">kb.example.org</fo:inline> serves any protocol while <fo:inline font-family="monospace">www.example.org</fo:inline> presents a secure
     web server.
     </fo:block>

     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The next example has both <fo:inline font-family="monospace">Subject</fo:inline> and <fo:inline font-family="monospace">Subject Alternate Name</fo:inline> present:</fo:block>
     <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 $ openssl x509 -text &lt; cert.pem
 ...
 Subject: C=SE, CN=example.com, CN=*.example.com, O=erlang.org
 ...
 X509v3 extensions:
     X509v3 Subject Alternative Name:
         DNS:kb.example.org, URI:https://www.example.org
 ...
     </fo:block>
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The RFC states that if a certificate defines Reference IDs in a <fo:inline font-family="monospace">Subject Alternate Name</fo:inline>
     field, the <fo:inline font-family="monospace">Subject</fo:inline> field MUST NOT be used for host name checking, even if it contains
     valid CN names.
     Therefore only <fo:inline font-family="monospace">kb.example.org</fo:inline> and <fo:inline font-family="monospace">https://www.example.org</fo:inline> matches. The match fails
     both for <fo:inline font-family="monospace">example.com</fo:inline> and <fo:inline font-family="monospace">foo.example.com</fo:inline> becuase they are in the <fo:inline font-family="monospace">Subject</fo:inline>
     field which is not checked because the <fo:inline font-family="monospace">Subject Alternate Name</fo:inline> field is present.
     </fo:block>
   

   <fo:block id="idp1133184" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Function call examples</fo:block>
    
     
     <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Other applications like ssl/tls or https might have options that are passed
       down to the <fo:inline font-family="monospace">public_key:pkix_verify_hostname</fo:inline>. You will probably not
       have to call it directly</fo:block>
     </fo:block>
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Suppose our client expects to connect to the web server https://www.example.net. This
     URI is therefore the Reference IDs of the client.
     The call will be:
     </fo:block>
     <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 public_key:pkix_verify_hostname(CertFromHost,
                                 [{uri_id, "https://www.example.net"}
                                 ]).
     </fo:block>
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The call will return <fo:inline font-family="monospace">true</fo:inline> or <fo:inline font-family="monospace">false</fo:inline> depending on the check. The caller
     do not need to handle the matching rules in the rfc. The matching will proceed as:
     </fo:block>
     <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If there is a <fo:inline font-family="monospace">Subject Alternate Name</fo:inline> field, the <fo:inline font-family="monospace">{uri_id,string()}</fo:inline> in the
       function call will be compared to any
       <fo:inline font-family="monospace">{uniformResourceIdentifier,string()}</fo:inline> in the Certificate field.
       If the two <fo:inline font-family="monospace">strings()</fo:inline> are equal (case insensitive), there is a match.
       The same applies for any <fo:inline font-family="monospace">{dns_id,string()}</fo:inline> in the call which is compared
       with all <fo:inline font-family="monospace">{dNSName,string()}</fo:inline> in the Certificate field.
       </fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If there is NO <fo:inline font-family="monospace">Subject Alternate Name</fo:inline> field, the <fo:inline font-family="monospace">Subject</fo:inline> field will be
       checked. All <fo:inline font-family="monospace">CN</fo:inline> names will be compared to all hostnames <fo:inline font-style="italic">extracted</fo:inline> from 
       <fo:inline font-family="monospace">{uri_id,string()}</fo:inline> and from <fo:inline font-family="monospace">{dns_id,string()}</fo:inline>.
       </fo:block></fo:list-item-body></fo:list-item>
     </fo:list-block>
   
   <fo:block id="idp1143888" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Extending the search mechanism</fo:block>
     
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The caller can use own extraction and matching rules. This is done with the two options
     <fo:inline font-family="monospace">fqdn_fun</fo:inline> and <fo:inline font-family="monospace">match_fun</fo:inline>.
     </fo:block>
     <fo:block id="idp1145792" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Hostname extraction</fo:block>
       
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">fqdn_fun</fo:inline> extracts hostnames (Fully Qualified Domain Names) from uri_id
       or other ReferenceIDs that are not pre-defined in the public_key function.
       Suppose you have some URI with a very special protocol-part:
       <fo:inline font-family="monospace">myspecial://example.com"</fo:inline>. Since this a non-standard URI there will be no hostname 
       extracted for matching CN-names in the <fo:inline font-family="monospace">Subject</fo:inline>.</fo:block>
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To "teach" the function how to extract, you can give a fun which replaces the default
       extraction function.
       The  <fo:inline font-family="monospace">fqdn_fun</fo:inline> takes one argument and returns
       either a <fo:inline font-family="monospace">string()</fo:inline> to be matched to each CN-name or the atom <fo:inline font-family="monospace">default</fo:inline> which will invoke
       the default fqdn extraction function. The return value <fo:inline font-family="monospace">undefined</fo:inline> removes the current
       URI from the fqdn extraction.
       </fo:block>
       <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 ...
 Extract = fun({uri_id, "myspecial://"++HostName}) -&gt; HostName;
              (_Else) -&gt; default
           end,
 ...	 
 public_key:pkix_verify_hostname(CertFromHost, RefIDs,
                                 [{fqdn_fun, Extract}])
 ...
       </fo:block>
     
     <fo:block id="idp1151488" font-family="DejaVuSans, sans-serif" font-size="1em" font-weight="bold" keep-with-next.within-page="always" space-after="0.2em" space-before="0.4em">Re-defining the match operations</fo:block>
       
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default matching handles dns_id and uri_id. In an uri_id the value is tested for
       equality with a value from the <fo:inline font-family="monospace">Subject Alternate Name</fo:inline>. If som other kind of matching
       is needed, use the  <fo:inline font-family="monospace">match_fun</fo:inline> option.
       </fo:block>
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The  <fo:inline font-family="monospace">match_fun</fo:inline> takes two arguments and returns either <fo:inline font-family="monospace">true</fo:inline>,
       <fo:inline font-family="monospace">false</fo:inline> or <fo:inline font-family="monospace">default</fo:inline>. The value  <fo:inline font-family="monospace">default</fo:inline> will invoke the default
       match function.
       </fo:block>
       <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 ...
 Match = fun({uri_id,"myspecial://"++A},
             {uniformResourceIdentifier,"myspecial://"++B}) -&gt;
                                                    my_match(A,B);
            (_RefID, _PresentedID) -&gt;
                                default
         end,
 ...
 public_key:pkix_verify_hostname(CertFromHost, RefIDs,
                                 [{match_fun, Match}]),
 ...
       </fo:block>
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In case of a match operation between a ReferenceID and a CN value from the <fo:inline font-family="monospace">Subject</fo:inline>
       field, the first argument to the fun is the extracted hostname from the ReferenceID, and the
       second argument is the tuple <fo:inline font-family="monospace">{cn, string()}</fo:inline> taken from the <fo:inline font-family="monospace">Subject</fo:inline> field. That
       makes it possible to have separate matching rules for Presented IDs from the  <fo:inline font-family="monospace">Subject</fo:inline>
       field and from the <fo:inline font-family="monospace">Subject Alternate Name</fo:inline> field.
       </fo:block>
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default matching transformes the ascii values in strings to lowercase before comparing.
       The  <fo:inline font-family="monospace">match_fun</fo:inline> is however called without any transfomation applied to the strings.  The
       reason is to enable the user to do unforseen handling of the strings where the original format
       is needed.
       </fo:block>
     
   
   <fo:block id="idp1162080" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">"Pinning" a Certificate</fo:block>
     
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC 6125</fo:basic-link></fo:inline> defines <fo:inline font-style="italic">pinning</fo:inline>
     as:</fo:block>
     <fo:block font-style="italic">
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">"The act of establishing a cached name association between
       the application service's certificate and one of the client's
       reference identifiers, despite the fact that none of the presented
       identifiers matches the given reference identifier. ..."
       </fo:block>
     </fo:block>
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The purpose is to have a mechanism for a human to accept an otherwise faulty Certificate.
     In for example a web browser, you could get a question like </fo:block>
     <fo:block font-style="italic">
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Warning: you wanted to visit the site www.example.com,
       but the certificate is for shop.example.com. Accept anyway (yes/no)?"
       </fo:block>
     </fo:block>
     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This could be accomplished with the option <fo:inline font-family="monospace">fail_callback</fo:inline> which will
     be called if the hostname verification fails:
     </fo:block>
     <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 -include_lib("public_key/include/public_key.hrl"). % Record def
 ...
 Fail = fun(#'OTPCertificate'{}=C) -&gt;
              case in_my_cache(C) orelse my_accept(C) of
                  true -&gt;
                       enter_my_cache(C),
                       true;
                  false -&gt;
                       false
         end,
 ...
 public_key:pkix_verify_hostname(CertFromHost, RefIDs,
                                 [{fail_callback, Fail}]),
 ...
     </fo:block>
   
 <fo:block id="idp1169680" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.5 
      SSH Files</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">SSH typically uses PEM files for private keys but has its
    own file format for storing public keys. The <fo:inline font-family="monospace">public_key</fo:inline>
    application can be used to parse the content of SSH public-key files.</fo:block>

    <fo:block id="idp1171472" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">RFC 4716 SSH Public-Key Files</fo:block>
   

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">RFC 4716 SSH files looks confusingly like PEM files,
       but there are some differences:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">1&gt; {ok, SshBin} = file:read_file("ssh2_rsa_pub").
{ok, &lt;&lt;"---- BEGIN SSH2 PUBLIC KEY ----\nAAAA"...&gt;&gt;}</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is equivalent to calling <fo:inline font-family="monospace">public_key:ssh_decode(SshBin, rfc4716_public_key)</fo:inline>:
    </fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">2&gt; public_key:ssh_decode(SshBin, public_key).
[{#'RSAPublicKey'{modulus = 794430685...91663,
                  publicExponent = 35}, []}]</fo:block>

 

 <fo:block id="idp1175504" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">OpenSSH Public-Key Format</fo:block>
   
   <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">OpenSSH public-key format looks as follows:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">1&gt; {ok, SshBin} = file:read_file("openssh_dsa_pub").
{ok,&lt;&lt;"ssh-dss AAAAB3Nza"...&gt;&gt;}</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is equivalent to calling <fo:inline font-family="monospace">public_key:ssh_decode(SshBin, openssh_public_key)</fo:inline>:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">2&gt;  public_key:ssh_decode(SshBin, public_key).
[{{15642692...694280725,
   #'Dss-Parms'{p = 17291273936...696123221,
                q = 1255626590179665817295475654204371833735706001853,
                g = 10454211196...480338645}},
  [{comment,"dhopson@VMUbuntu-DSH"}]}]</fo:block>
 

 <fo:block id="idp1179600" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Known Hosts - OpenSSH Format</fo:block>
   
   <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Known hosts - OpenSSH format looks as follows:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">1&gt; {ok, SshBin} = file:read_file("known_hosts").
{ok,&lt;&lt;"hostname.domain.com,192.168.0.1 ssh-rsa AAAAB...&gt;&gt;}</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of public keys and their related attributes.
    Each pair of key and attribute corresponds to one entry in
    the known hosts file:</fo:block>
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">2&gt;  public_key:ssh_decode(SshBin, known_hosts).
[{#'RSAPublicKey'{modulus = 1498979460408...72721699,
                  publicExponent = 35},
  [{hostnames,["hostname.domain.com","192.168.0.1"]}]},
 {#'RSAPublicKey'{modulus = 14989794604088...2721699,
                  publicExponent = 35},
  [{comment,"foo@bar.com"},
   {hostnames,["|1|BWO5qDxk/cFH0wa05JLdHn+j6xQ=|rXQvIxh5cDD3C43k5DPDamawVNA="]}]}]</fo:block>
  

  <fo:block id="idp1183488" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Authorized Keys - OpenSSH Format</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Authorized keys - OpenSSH format looks as follows:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">1&gt; {ok, SshBin} = file:read_file("auth_keys").
{ok, &lt;&lt;"command=\"dump /home\",no-pty,no-port-forwarding ssh-rsa AAA...&gt;&gt;}</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of public keys and their related attributes.
    Each pair of key and attribute corresponds to one entry in
    the authorized key file:</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">2&gt; public_key:ssh_decode(SshBin, auth_keys).
[{#'RSAPublicKey'{modulus = 794430685...691663,
                  publicExponent = 35},
  [{comment,"dhopson@VMUbuntu-DSH"},
   {options,["command=\"dump/home\"","no-pty",
             "no-port-forwarding"]}]},
 {{1564269258491...607694280725,
   #'Dss-Parms'{p = 17291273936185...763696123221,
                q = 1255626590179665817295475654204371833735706001853,
                g = 10454211195705...60511039590076780999046480338645}},
  [{comment,"dhopson@VMUbuntu-DSH"}]}]</fo:block>
    

    <fo:block id="idp1187520" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Creating an SSH File from Public-Key Data</fo:block>
      

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you got a public key <fo:inline font-family="monospace">PubKey</fo:inline> and a related list of
      attributes <fo:inline font-family="monospace">Attributes</fo:inline> as returned
      by <fo:inline font-family="monospace">ssh_decode/2</fo:inline>, you can create a new SSH file, for example:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">N&gt; SshBin = public_key:ssh_encode([{PubKey, Attributes}], openssh_public_key),
&lt;&lt;"ssh-rsa "...&gt;&gt;
N+1&gt; file:write_file("id_rsa.pub", SshBin).
ok</fo:block>
    
  <fo:block id="idp35408" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">2   
      Reference Manual</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">public_key</fo:inline> application provides functions to handle public-key infrastructure
    from RFC 3280 (X.509 certificates) and parts of the PKCS standard.
    </fo:block>
  <fo:block page-break-before="always" id="idp1238208" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">public_key</fo:marker>public_key</fo:block>Application</fo:block>
  <fo:block/>
  public_key
  Provides functions to handle public-key infrastructure. 
  
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"> Provides encode/decode of different file formats (PEM, OpenSSH),
    digital signature and verification functions, 
    validation of certificate paths and certificate revocation lists (CRLs) and
    other functions for handling of certificates, keys and CRLs.</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Supports <fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC 5280 </fo:basic-link></fo:inline> -
      Internet X.509 Public-Key Infrastructure Certificate and Certificate Revocation List 
      (CRL) Profile. Certificate policies are currently not supported. </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Supports <fo:inline font-weight="bold"><fo:basic-link external-destination="href"> PKCS-1 </fo:basic-link></fo:inline> - 
      RSA Cryptography Standard </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Supports <fo:inline font-weight="bold"><fo:basic-link external-destination="href"> DSS</fo:basic-link></fo:inline> - 
      Digital Signature Standard (DSA - Digital Signature Algorithm)</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Supports 
      <fo:inline font-weight="bold"><fo:basic-link external-destination="href"> PKCS-3 </fo:basic-link></fo:inline> - 
      Diffie-Hellman Key Agreement Standard </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Supports <fo:inline font-weight="bold"><fo:basic-link external-destination="href"> PKCS-5</fo:basic-link></fo:inline> - 
      Password-Based Cryptography Standard </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Supports <fo:inline font-weight="bold"><fo:basic-link external-destination="href"> PKCS-8</fo:basic-link></fo:inline> - 
      Private-Key Information Syntax Standard</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Supports <fo:inline font-weight="bold"><fo:basic-link external-destination="href"> PKCS-10</fo:basic-link></fo:inline> - 
      Certification Request Syntax Standard</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
   

  <fo:block id="idp1228080" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">DEPENDENCIES</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">public_key</fo:inline> application uses the 
    Crypto application to perform cryptographic operations and the
    ASN-1 application to handle PKIX-ASN-1 specifications, hence
    these applications must be loaded for the <fo:inline font-family="monospace">public_key</fo:inline> application to work. 
    In an embedded environment this means they must be started with
    <fo:inline font-family="monospace">application:start/[1,2]</fo:inline> before the <fo:inline font-family="monospace">public_key</fo:inline> application is 
    started.</fo:block>
  
 
  <fo:block id="idp1225392" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">ERROR LOGGER AND EVENT HANDLERS</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"> The <fo:inline font-family="monospace">public_key</fo:inline> application is a library application
    and does not use the error logger. The functions will either succeed
    or fail with a runtime error.
    </fo:block>
  

  <fo:block id="idp1223936" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">SEE ALSO</fo:block>
    
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">application(3)</fo:inline></fo:block>
  
  
<fo:block page-break-before="always" id="idp1216352" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">public_key</fo:marker>public_key</fo:block>Erlang module</fo:block>
  <fo:block/>
  public_key
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Provides functions to handle public-key infrastructure,
    for details see
    <fo:inline font-style="italic">public_key(6)</fo:inline>.
    </fo:block>
  

  <fo:block id="idp1214064" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">DATA TYPES</fo:block>
     
    
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All records used in this Reference Manual 
    
    are generated from ASN.1 specifications
    and are documented in the User's Guide. See <fo:inline font-style="italic">Public-key Records</fo:inline>.
    </fo:block></fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Use the following include directive to get access to the 
    records and constant macros described here and in the User's Guide:</fo:block>
    
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap"> -include_lib("public_key/include/public_key.hrl").</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following data types are used in the functions for <fo:inline font-family="monospace">public_key</fo:inline>:</fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">oid()</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Object identifier, a tuple of integers as generated by the <fo:inline font-family="monospace">ASN.1</fo:inline> compiler.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">boolean() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">true | false</fo:inline></fo:block></fo:block></fo:block-container>
      
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">string() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">[bytes()]</fo:inline></fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">der_encoded() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">binary()</fo:inline></fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">pki_asn1_type() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">'Certificate'</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| 'RSAPrivateKey'</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| 'RSAPublicKey'</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| 'DSAPrivateKey'</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| 'DSAPublicKey'</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| 'DHParameter'</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| 'SubjectPublicKeyInfo'</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| 'PrivateKeyInfo'</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| 'CertificationRequest'</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| 'CertificateList'</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| 'ECPrivateKey'</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| 'EcpkParameters'</fo:inline></fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">pem_entry () =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{pki_asn1_type(), binary(), %% DER or encrypted DER</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace"> not_encrypted | cipher_info()}</fo:inline></fo:block></fo:block></fo:block-container>
      
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">cipher_info() = </fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{"RC2-CBC" | "DES-CBC" | "DES-EDE3-CBC", crypto:strong_rand_bytes(8)</fo:inline></fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| {#'PBEParameter{}, digest_type()} | #'PBES2-params'{}}</fo:inline></fo:block>
      </fo:block></fo:block-container>
      
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">public_key() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">rsa_public_key() | dsa_public_key() | ec_public_key()</fo:inline></fo:block></fo:block></fo:block-container>
      
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">private_key() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">rsa_private_key() | dsa_private_key() | ec_private_key()</fo:inline></fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">rsa_public_key() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">#'RSAPublicKey'{}</fo:inline></fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">rsa_private_key() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">#'RSAPrivateKey'{}</fo:inline></fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">dsa_public_key() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{integer(),  #'Dss-Parms'{}}</fo:inline></fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">dsa_private_key() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">#'DSAPrivateKey'{}</fo:inline></fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ec_public_key()</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">= <fo:inline font-family="monospace">{#'ECPoint'{}, #'ECParameters'{} | {namedCurve, oid()}}</fo:inline></fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ec_private_key() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">#'ECPrivateKey'{}</fo:inline></fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">public_crypt_options() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">[{rsa_pad, rsa_padding()}]</fo:inline></fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">rsa_padding() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">'rsa_pkcs1_padding'</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| 'rsa_pkcs1_oaep_padding'</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| 'rsa_no_padding'</fo:inline></fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">digest_type() = </fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Union of <fo:inline font-family="monospace">rsa_digest_type()</fo:inline>, <fo:inline font-family="monospace">dss_digest_type()</fo:inline>, 
      and <fo:inline font-family="monospace">ecdsa_digest_type()</fo:inline>.</fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">rsa_digest_type() = </fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">'md5' | 'sha' | 'sha224' | 'sha256' | 'sha384' | 'sha512'</fo:inline></fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">dss_digest_type() = </fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">'sha'</fo:inline></fo:block></fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ecdsa_digest_type() = </fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">'sha'| 'sha224' | 'sha256' | 'sha384' | 'sha512'</fo:inline></fo:block></fo:block></fo:block-container>
      
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">crl_reason() = </fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">unspecified</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| keyCompromise</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| cACompromise</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| affiliationChanged</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| superseded</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| cessationOfOperation</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| certificateHold</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| privilegeWithdrawn</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| aACompromise</fo:inline></fo:block>
      </fo:block></fo:block-container>

      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">issuer_name() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">{rdnSequence,[#'AttributeTypeAndValue'{}]}</fo:inline></fo:block>  
      </fo:block></fo:block-container>
      
      <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ssh_file() =</fo:inline></fo:block>
      <fo:block-container><fo:block start-indent="2em">
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">openssh_public_key</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| rfc4716_public_key</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| known_hosts</fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">| auth_keys</fo:inline></fo:block>
      </fo:block></fo:block-container>
    </fo:block>
    
    

    



	

    

      



      



      




      




   

<fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>    

  <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp999520">compute_key(OthersKey, MyKey)-&gt;</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp999296">compute_key(OthersKey, MyKey, Params)-&gt;</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OthersKey = #'ECPoint'{} | binary(), MyKey = #'ECPrivateKey'{} | binary()</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Params =  #'DHParameter'{}</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Computes shared secret.</fo:block>
  </fo:block>

  <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp995552">decrypt_private(CipherText, Key) -&gt; binary()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp994944">decrypt_private(CipherText, Key, Options) -&gt; binary()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CipherText = binary()</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = rsa_private_key()</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = public_crypt_options()</fo:block></fo:list-item-body></fo:list-item>
  </fo:list-block> 
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Public-key decryption using the private key. See also <fo:inline font-style="italic">crypto:private_decrypt/4</fo:inline></fo:block> 
  </fo:block>

  <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp990784">decrypt_public(CipherText, Key) - &gt; binary()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp990400">decrypt_public(CipherText, Key, Options) - &gt; binary()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CipherText = binary()</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = rsa_public_key()</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = public_crypt_options()</fo:block></fo:list-item-body></fo:list-item>
  </fo:list-block> 
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Public-key decryption using the public key. See also <fo:inline font-style="italic">crypto:public_decrypt/4</fo:inline></fo:block> 
  </fo:block> 

  <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp985328">der_decode(Asn1type, Der) -&gt; term()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Asn1Type = atom()</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>ASN.1 type present in the Public Key applications
      ASN.1 specifications.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Der = der_encoded()</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block> 
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decodes a public-key ASN.1 DER encoded entity.</fo:block>
    </fo:block>
    
  <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp980800">der_encode(Asn1Type, Entity) -&gt; der_encoded()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Asn1Type = atom()</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>ASN.1 type present in the Public Key applications
	 ASN.1 specifications.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Entity = term()</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Erlang representation of <fo:inline font-family="monospace">Asn1Type</fo:inline></fo:block></fo:list-item-body></fo:list-item>
  </fo:list-block> 
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encodes a public-key entity with ASN.1 DER encoding.</fo:block>
  </fo:block>

  <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp975872">dh_gex_group(MinSize, SuggestedSize, MaxSize, Groups) -&gt; {ok, {Size,Group}} | {error,Error}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MinSize = positive_integer()</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SuggestedSize = positive_integer()</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MaxSize = positive_integer()</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Groups = undefined | [{Size,[{G,P}]}]</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Size = positive_integer()</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Group = {G,P}</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">G = positive_integer()</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">P = positive_integer()</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Selects a group for Diffie-Hellman key exchange with the key size in the range <fo:inline font-family="monospace">MinSize...MaxSize</fo:inline>
      and as close to <fo:inline font-family="monospace">SuggestedSize</fo:inline> as possible. If <fo:inline font-family="monospace">Groups == undefined</fo:inline> a default set will be
      used, otherwise the group is selected from <fo:inline font-family="monospace">Groups</fo:inline>.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">First a size, as close as possible to SuggestedSize, is selected. Then one group with that key size
      is randomly selected from the specified set of groups. If no size within the limits of <fo:inline font-family="monospace">MinSize</fo:inline>
      and <fo:inline font-family="monospace">MaxSize</fo:inline> is available, <fo:inline font-family="monospace">{error,no_group_found}</fo:inline> is returned.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The default set of groups is listed in <fo:inline font-family="monospace">lib/public_key/priv/moduli</fo:inline>. This file may be regenerated like this:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
	$&gt; cd $ERL_TOP/lib/public_key/priv/
	$&gt; generate
         ---- wait until all background jobs has finished. It may take several days !
	$&gt; cat moduli-* &gt; moduli
	$&gt; cd ..; make 
      </fo:block>
    </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp965328">encrypt_private(PlainText, Key) -&gt; binary()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PlainText = binary()</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = rsa_private_key()</fo:block></fo:list-item-body></fo:list-item> 
  </fo:list-block> 
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Public-key encryption using the private key.
     See also <fo:inline font-style="italic">crypto:private_encrypt/4</fo:inline>.</fo:block> 
  </fo:block>   

  <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp961184">encrypt_public(PlainText, Key) -&gt; binary()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PlainText = binary()</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = rsa_public_key()</fo:block></fo:list-item-body></fo:list-item> 
  </fo:list-block> 
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Public-key encryption using the public key. See also <fo:inline font-style="italic">crypto:public_encrypt/4</fo:inline>.</fo:block> 
  </fo:block>   
  
  <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp957520">generate_key(Params) -&gt; {Public::binary(), Private::binary()}  | #'ECPrivateKey'{} | #'RSAPrivateKey'{}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Params = #'DHParameter'{} |  {namedCurve, oid()} |  #'ECParameters'{} 
      | {rsa, Size::integer(), PubExp::integer} </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Generates a new keypair. Note that except for Diffie-Hellman
    the public key is included in the private key structure. See also
    <fo:inline font-style="italic">crypto:generate_key/2</fo:inline>
    </fo:block>
  </fo:block>

  <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp953792">pem_decode(PemBin) -&gt; [pem_entry()]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PemBin = binary()</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Example {ok, PemBin} = file:read_file("cert.pem").</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block> 
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decodes PEM binary data and returns
    entries as ASN.1 DER encoded entities.</fo:block>
  </fo:block> 
    
   <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp950320">pem_encode(PemEntries) -&gt; binary()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> PemEntries = [pem_entry()] </fo:block></fo:list-item-body></fo:list-item> 
  </fo:list-block> 
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a PEM binary.</fo:block> 
  </fo:block>

   <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp947536">pem_entry_decode(PemEntry) -&gt; term()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp947056">pem_entry_decode(PemEntry, Password) -&gt; term()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PemEntry = pem_entry()</fo:block></fo:list-item-body></fo:list-item> 
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Password = string()</fo:block></fo:list-item-body></fo:list-item> 
  </fo:list-block> 
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decodes a PEM entry. <fo:inline font-family="monospace">pem_decode/1</fo:inline> returns a list of PEM
    entries. Notice that if the PEM entry is of type
    'SubjectPublickeyInfo', it is further decoded to an
    <fo:inline font-family="monospace">rsa_public_key()</fo:inline> or <fo:inline font-family="monospace">dsa_public_key()</fo:inline>.</fo:block>
  </fo:block>

   <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp942192">pem_entry_encode(Asn1Type, Entity) -&gt; pem_entry()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp941760">pem_entry_encode(Asn1Type, Entity, {CipherInfo, Password}) -&gt; pem_entry()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Asn1Type = pki_asn1_type()</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Entity = term()</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Erlang representation of
      <fo:inline font-family="monospace">Asn1Type</fo:inline>.  If <fo:inline font-family="monospace">Asn1Type</fo:inline> is 'SubjectPublicKeyInfo',
      <fo:inline font-family="monospace">Entity</fo:inline> must be either an <fo:inline font-family="monospace">rsa_public_key()</fo:inline>, 
      <fo:inline font-family="monospace">dsa_public_key()</fo:inline> or an <fo:inline font-family="monospace">ec_public_key()</fo:inline>
      and this function creates the appropriate
      'SubjectPublicKeyInfo' entry.
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CipherInfo = cipher_info()</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Password = string()</fo:block></fo:list-item-body></fo:list-item> 
    </fo:list-block> 
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a PEM entry that can be feed to <fo:inline font-family="monospace">pem_encode/1</fo:inline>.</fo:block>
  </fo:block>
  
  <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp933760">pkix_decode_cert(Cert, otp|plain) -&gt;  #'Certificate'{} | #'OTPCertificate'{}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Cert = der_encoded()</fo:block></fo:list-item-body></fo:list-item> 
  </fo:list-block> 
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decodes an ASN.1 DER-encoded PKIX certificate. Option <fo:inline font-family="monospace">otp</fo:inline>
    uses the customized ASN.1 specification OTP-PKIX.asn1 for
    decoding and also recursively decode most of the standard
    parts.</fo:block>
  </fo:block>

  <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp929376">pkix_encode(Asn1Type, Entity, otp | plain) -&gt; der_encoded()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Asn1Type = atom()</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The ASN.1 type can be 'Certificate', 'OTPCertificate' or a subtype of either.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Entity = #'Certificate'{} | #'OTPCertificate'{} | a valid subtype</fo:block></fo:list-item-body></fo:list-item>
  </fo:list-block> 
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">DER encodes a PKIX x509 certificate or part of such a
    certificate. This function must be used for encoding certificates or parts of certificates
    that are decoded/created in the <fo:inline font-family="monospace">otp</fo:inline> format, whereas for the plain format this
    function directly calls <fo:inline font-family="monospace">der_encode/2</fo:inline>.</fo:block> 
  </fo:block>

 <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp925792">pkix_is_issuer(Cert, IssuerCert) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Cert = der_encoded() | #'OTPCertificate'{} | #'CertificateList'{}</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">IssuerCert = der_encoded() | #'OTPCertificate'{}</fo:block></fo:list-item-body></fo:list-item>
  </fo:list-block> 
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Checks if <fo:inline font-family="monospace">IssuerCert</fo:inline> issued <fo:inline font-family="monospace">Cert</fo:inline>.</fo:block> 
  </fo:block>
  
  <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp876480">pkix_is_fixed_dh_cert(Cert) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Cert = der_encoded() | #'OTPCertificate'{}</fo:block></fo:list-item-body></fo:list-item>
  </fo:list-block> 
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Checks if a certificate is a fixed Diffie-Hellman certificate.</fo:block> 
  </fo:block>  
  
  <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp873648">pkix_is_self_signed(Cert) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Cert = der_encoded() | #'OTPCertificate'{}</fo:block></fo:list-item-body></fo:list-item>
  </fo:list-block> 
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Checks if a certificate is self-signed.</fo:block> 
  </fo:block>

  <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp868912">pkix_issuer_id(Cert, IssuedBy) -&gt; {ok, IssuerID} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Cert = der_encoded() | #'OTPCertificate'{}</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">IssuedBy = self | other</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">IssuerID = {integer(), issuer_name()}</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The issuer id consists of the serial number and the issuers name.</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block> 
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the issuer id.</fo:block> 
    </fo:block>
  
 
  <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp865584">pkix_normalize_name(Issuer) -&gt; Normalized</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Issuer = issuer_name()</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Normalized = issuer_name()</fo:block></fo:list-item-body></fo:list-item>
  </fo:list-block> 
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Normalizes an issuer name so that it can be easily
    compared to another issuer name.</fo:block> 
  </fo:block>
   
  <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp862176">pkix_path_validation(TrustedCert, CertChain, Options) -&gt; {ok, {PublicKeyInfo, PolicyTree}} | {error, {bad_cert, Reason}} </fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TrustedCert =  #'OTPCertificate'{} | der_encoded() | atom()</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Normally a trusted certificate, but it can also be a path-validation
       error that can be discovered while
       constructing the input to this function and that is to be run through the <fo:inline font-family="monospace">verify_fun</fo:inline>.
       Examples are <fo:inline font-family="monospace">unknown_ca</fo:inline> and <fo:inline font-family="monospace">selfsigned_peer.</fo:inline>
       </fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CertChain = [der_encoded()]</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A list of DER-encoded certificates in trust order ending with the peer certificate.</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = proplists:proplist()</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PublicKeyInfo = {?'rsaEncryption' | ?'id-dsa',
       rsa_public_key() | integer(), 'NULL' | 'Dss-Parms'{}}</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PolicyTree = term()</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>At the moment this is always an empty list as policies are not currently supported.</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = cert_expired | invalid_issuer | invalid_signature | name_not_permitted |
       missing_basic_constraint | invalid_key_usage | {revoked, crl_reason()} | atom()
       </fo:block></fo:list-item-body></fo:list-item>
     </fo:list-block>
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
	 Performs a basic path validation according to
	 <fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC 5280.</fo:basic-link></fo:inline>
	 However, CRL validation is done separately by <fo:inline font-style="italic">pkix_crls_validate/3 </fo:inline> and is to be called
	 from the supplied <fo:inline font-family="monospace">verify_fun</fo:inline>.
       </fo:block>

       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Available options:</fo:block>

       <fo:block space-after="0.25em" space-before="0.25em">
	<fo:block keep-with-next.within-page="always">{verify_fun, fun()}</fo:block>
	<fo:block-container><fo:block start-indent="2em">
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The fun must be defined as:</fo:block>

	  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
fun(OtpCert :: #'OTPCertificate'{},
    Event :: {bad_cert, Reason :: atom() | {revoked, atom()}} |
             {extension, #'Extension'{}},
    InitialUserState :: term()) -&gt;
	{valid, UserState :: term()} |
	{valid_peer, UserState :: term()} |
	{fail, Reason :: term()} |
	{unknown, UserState :: term()}.
	  </fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the verify callback fun returns <fo:inline font-family="monospace">{fail, Reason}</fo:inline>, the
	verification process is immediately stopped. If the verify
	callback fun returns <fo:inline font-family="monospace">{valid, UserState}</fo:inline>, the verification
	process is continued. This can be used to accept specific path
	validation errors, such as <fo:inline font-family="monospace">selfsigned_peer</fo:inline>, as well as
	verifying application-specific extensions. If called with an
	extension unknown to the user application, the return value
	<fo:inline font-family="monospace">{unknown, UserState}</fo:inline> is to be used.</fo:block>

	</fo:block></fo:block-container>
	<fo:block keep-with-next.within-page="always">{max_path_length, integer()}</fo:block>
	<fo:block-container><fo:block start-indent="2em">
	  The <fo:inline font-family="monospace">max_path_length</fo:inline> is the maximum number of non-self-issued
	  intermediate certificates that can follow the peer certificate
	  in a valid certification path. So, if <fo:inline font-family="monospace">max_path_length</fo:inline> is 0, the PEER must
	  be signed by the trusted ROOT-CA directly, if it is 1, the path can
	  be PEER, CA, ROOT-CA, if it is 2, the path can
	  be PEER, CA, CA, ROOT-CA, and so on.
	</fo:block></fo:block-container>
      </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Possible reasons for a bad certificate: </fo:block>
      <fo:block space-after="0.25em" space-before="0.25em">
	<fo:block keep-with-next.within-page="always">cert_expired</fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Certificate is no longer valid as its expiration date has passed.</fo:block></fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always">invalid_issuer</fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Certificate issuer name does not match the name of the issuer certificate in the chain.</fo:block></fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always">invalid_signature</fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Certificate was not signed by its issuer certificate in the chain.</fo:block></fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always">name_not_permitted</fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Invalid Subject Alternative Name extension.</fo:block></fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always">missing_basic_constraint</fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Certificate, required to have the basic constraints extension, does not have
	a basic constraints extension.</fo:block></fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always">invalid_key_usage</fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Certificate key is used in an invalid way according to the key-usage extension.</fo:block></fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always">{revoked, crl_reason()}</fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Certificate has been revoked.</fo:block></fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always">atom()</fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Application-specific error reason that is to be checked by the <fo:inline font-family="monospace">verify_fun</fo:inline>.</fo:block></fo:block></fo:block-container>
      </fo:block>

    </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp604736">pkix_crl_issuer(CRL) -&gt; issuer_name()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CRL = der_encoded() | #'CertificateList'{} </fo:block></fo:list-item-body></fo:list-item> 
      </fo:list-block> 
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the issuer of the <fo:inline font-family="monospace">CRL</fo:inline>.</fo:block>
      </fo:block> 
   
   <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp600512">pkix_crls_validate(OTPCertificate, DPAndCRLs, Options) -&gt; CRLStatus()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">OTPCertificate =  #'OTPCertificate'{}</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DPAndCRLs  = [{DP::#'DistributionPoint'{}, {DerCRL::der_encoded(), CRL::#'CertificateList'{}}}] </fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Options = proplists:proplist()</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CRLStatus() =  valid | {bad_cert, revocation_status_undetermined} |
       {bad_cert, {revoked, crl_reason()}}</fo:block></fo:list-item-body></fo:list-item>
     </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Performs CRL validation. It is intended to be called from
      the verify fun of  <fo:inline font-style="italic"> pkix_path_validation/3
       </fo:inline>.</fo:block>

       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Available options:</fo:block>

      <fo:block space-after="0.25em" space-before="0.25em">
	
	<fo:block keep-with-next.within-page="always">{update_crl, fun()}</fo:block>
	<fo:block-container><fo:block start-indent="2em">
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The fun has the following type specification:</fo:block>

	  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap"> fun(#'DistributionPoint'{}, #'CertificateList'{}) -&gt;
        #'CertificateList'{}</fo:block>

	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The fun uses the information in the distribution point to access
	  the latest possible version of the CRL. If this fun is not specified,
	  Public Key uses the default implementation:
	  </fo:block>
	  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap"> fun(_DP, CRL) -&gt; CRL end</fo:block>
	</fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always">{issuer_fun, fun()}</fo:block>
	<fo:block-container><fo:block start-indent="2em">
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The fun has the following type specification:</fo:block>

	  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
fun(#'DistributionPoint'{}, #'CertificateList'{},
    {rdnSequence,[#'AttributeTypeAndValue'{}]}, term()) -&gt;
	{ok, #'OTPCertificate'{}, [der_encoded]}</fo:block>

	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The fun returns the root certificate and certificate chain
	  that has signed the CRL. 
	  </fo:block>
	  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap"> fun(DP, CRL, Issuer, UserState) -&gt; {ok, RootCert, CertChain}</fo:block>
	</fo:block></fo:block-container>	
      </fo:block>
    </fo:block>
   
   <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp665392">pkix_crl_verify(CRL, Cert) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CRL = der_encoded() | #'CertificateList'{} </fo:block></fo:list-item-body></fo:list-item> 
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Cert = der_encoded() | #'OTPCertificate'{} </fo:block></fo:list-item-body></fo:list-item> 
     </fo:list-block> 
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Verify that <fo:inline font-family="monospace">Cert</fo:inline> is the <fo:inline font-family="monospace">CRL</fo:inline> signer.</fo:block>
     </fo:block>

   <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp660416">pkix_dist_point(Cert) -&gt; DistPoint</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> Cert  = der_encoded() | #'OTPCertificate'{} </fo:block></fo:list-item-body></fo:list-item> 
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> DistPoint =  #'DistributionPoint'{}</fo:block></fo:list-item-body></fo:list-item> 
     </fo:list-block> 
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a distribution point for CRLs issued by the same issuer as <fo:inline font-family="monospace">Cert</fo:inline>.
       Can be used as input to <fo:inline font-style="italic">pkix_crls_validate/3 </fo:inline>
       </fo:block>
     </fo:block>
   
   <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp655152">pkix_dist_points(Cert) -&gt; DistPoints</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> Cert  = der_encoded() | #'OTPCertificate'{} </fo:block></fo:list-item-body></fo:list-item> 
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> DistPoints =  [#'DistributionPoint'{}]</fo:block></fo:list-item-body></fo:list-item> 
     </fo:list-block> 
       <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"> Extracts distribution points from the certificates extensions.</fo:block>
     </fo:block>
   
  <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp652160">pkix_match_dist_point(CRL, DistPoint) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">CRL = der_encoded() | #'CertificateList'{} </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DistPoint = #'DistributionPoint'{}</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Checks whether the given distribution point matches the
      Issuing Distribution Point of the CRL, as described in RFC 5280.
      If the CRL doesn't have an Issuing Distribution Point extension,
      the distribution point always matches.</fo:block>
    </fo:block>

  <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp304720">pkix_sign(#'OTPTBSCertificate'{}, Key) -&gt; der_encoded()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = rsa_private_key() | dsa_private_key()</fo:block></fo:list-item-body></fo:list-item> 
    </fo:list-block> 
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Signs an 'OTPTBSCertificate'. Returns the corresponding
      DER-encoded certificate.</fo:block> 
    </fo:block> 

  <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp301968">pkix_sign_types(AlgorithmId) -&gt; {DigestType, SignatureType}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AlgorithmId = oid()</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Signature OID from a certificate or a certificate revocation list.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DigestType = rsa_digest_type() | dss_digest_type()</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SignatureType = rsa | dsa | ecdsa</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Translates signature algorithm OID to Erlang digest and signature types.
      </fo:block>
    </fo:block>

  <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp298256">pkix_verify(Cert, Key) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Cert = der_encoded()</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = rsa_public_key() | dsa_public_key() | ec_public_key()</fo:block></fo:list-item-body></fo:list-item> 
    </fo:list-block> 
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Verifies PKIX x.509 certificate signature.</fo:block>
  </fo:block> 

  <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp295056">pkix_verify_hostname(Cert, ReferenceIDs) -&gt; boolean()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp294384">pkix_verify_hostname(Cert, ReferenceIDs, Opts) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Cert = der_encoded() | #'OTPCertificate'{} </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ReferenceIDs = [ RefID ]</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">RefID = {IdType,string()}</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">IdType = dns_id | srv_id | uri_id</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Opts = [ PvhOpt() ]</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PvhOpt = [MatchOpt | FailCallBackOpt | FqdnExtractOpt]</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MatchOpt = {fun(RefId | FQDN::string(), PresentedID) -&gt; boolean() | default}</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PresentedID = {dNSName,string()} | {uniformResourceIdentifier,string()}</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FailCallBackOpt = {fail_callback, fun(#'OTPCertificate'{}) -&gt; boolean()}</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FqdnExtractOpt = {fqdn_fun, fun(RefID) -&gt; FQDN::string() | default | undefined}</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function checks that the <fo:inline font-style="italic">Presented Identifier</fo:inline> (e.g hostname) in a peer certificate
      conforms with the Expected Identifier that the client wants to connect to.
      This functions is intended to be added as an extra client check to the peer certificate when performing
      <fo:inline font-style="italic">public_key:pkix_path_validation/3</fo:inline>
      </fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See <fo:inline font-weight="bold"><fo:basic-link external-destination="href">RFC 6125</fo:basic-link></fo:inline>
      for detailed information about hostname verification.
      The <fo:inline font-style="italic">User's Manual</fo:inline>
      and
      <fo:inline font-style="italic">code examples</fo:inline>
      describes this function more detailed.
      </fo:block>
    </fo:block>

  <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp122256">sign(Msg, DigestType, Key) -&gt; binary()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Msg = binary() | {digest,binary()}</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The <fo:inline font-family="monospace">Msg</fo:inline> is either the binary "plain text" data to be
       signed or it is the hashed value of "plain text", that is, the
       digest.</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DigestType = rsa_digest_type() | dss_digest_type() | ecdsa_digest_type()</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = rsa_private_key() | dsa_private_key() | ec_private_key()</fo:block></fo:list-item-body></fo:list-item>
  </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a digital signature.</fo:block> 
  </fo:block>   

  <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp118768">ssh_decode(SshBin,  Type) -&gt; [{public_key(), Attributes::list()}]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">SshBin = binary()</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Example <fo:inline font-family="monospace">{ok, SshBin} = file:read_file("known_hosts")</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Type = public_key | ssh_file()</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>If <fo:inline font-family="monospace">Type</fo:inline> is <fo:inline font-family="monospace">public_key</fo:inline> the binary can be either
      an RFC4716 public key or an OpenSSH public key.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Decodes an SSH file-binary. In the case of <fo:inline font-family="monospace">known_hosts</fo:inline> or
    <fo:inline font-family="monospace">auth_keys</fo:inline>, the binary can include one or more lines of the
    file. Returns a list of public keys and their attributes, possible
    attribute values depends on the file type represented by the
    binary.
    </fo:block>

    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always">RFC4716 attributes - see RFC 4716.</fo:block>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">{headers, [{string(), utf8_string()}]}</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">auth_key attributes - see manual page for sshd.</fo:block>
      <fo:block-container><fo:block start-indent="2em">{comment, string()}</fo:block></fo:block-container>
      <fo:block-container><fo:block start-indent="2em">{options, [string()]}</fo:block></fo:block-container>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">{bits, integer()} - In SSH version 1 files.</fo:block></fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">known_host attributes - see manual page for sshd.</fo:block>
      <fo:block-container><fo:block start-indent="2em">{hostnames, [string()]}</fo:block></fo:block-container>
      <fo:block-container><fo:block start-indent="2em">{comment, string()}</fo:block></fo:block-container>
      <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">{bits, integer()} - In SSH version 1 files.</fo:block></fo:block></fo:block-container>
    </fo:block>

  </fo:block>

  <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp760256">ssh_encode([{Key, Attributes}], Type) -&gt; binary()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = public_key()</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Attributes = list()</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Type = ssh_file()</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Encodes a list of SSH file entries (public keys and attributes) to a binary. Possible
    attributes depend on the file type, see <fo:inline font-style="italic"> ssh_decode/2 </fo:inline>.</fo:block>
  </fo:block>

  <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp902144">ssh_hostkey_fingerprint(HostKey) -&gt; string()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp856928">ssh_hostkey_fingerprint(DigestType, HostKey) -&gt; string()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp809056">ssh_hostkey_fingerprint([DigestType], HostKey) -&gt; [string()]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = public_key()</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DigestType = digest_type()</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calculates a ssh fingerprint from a public host key as openssh does.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The algorithm in <fo:inline font-family="monospace">ssh_hostkey_fingerprint/1</fo:inline> is md5 to be compatible with older
    ssh-keygen commands. The string from the second variant is prepended by the algorithm name
    in uppercase as in newer ssh-keygen commands.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Examples:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
 2&gt; public_key:ssh_hostkey_fingerprint(Key).    
 "f5:64:a6:c1:5a:cb:9f:0a:10:46:a2:5c:3e:2f:57:84"

 3&gt; public_key:ssh_hostkey_fingerprint(md5,Key).
 "MD5:f5:64:a6:c1:5a:cb:9f:0a:10:46:a2:5c:3e:2f:57:84"

 4&gt; public_key:ssh_hostkey_fingerprint(sha,Key).
 "SHA1:bSLY/C4QXLDL/Iwmhyg0PGW9UbY"

 5&gt; public_key:ssh_hostkey_fingerprint(sha256,Key).
 "SHA256:aZGXhabfbf4oxglxltItWeHU7ub3Dc31NcNw2cMJePQ"

 6&gt; public_key:ssh_hostkey_fingerprint([sha,sha256],Key).
 ["SHA1:bSLY/C4QXLDL/Iwmhyg0PGW9UbY",
  "SHA256:aZGXhabfbf4oxglxltItWeHU7ub3Dc31NcNw2cMJePQ"]
    </fo:block>
  </fo:block>

  <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp818320">verify(Msg, DigestType, Signature, Key) -&gt; boolean()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Msg = binary() | {digest,binary()}</fo:block></fo:list-item-body></fo:list-item>
       <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The <fo:inline font-family="monospace">Msg</fo:inline> is either the binary "plain text" data 
        or it is the hashed value of "plain text", that is, the digest.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">DigestType = rsa_digest_type() | dss_digest_type() | ecdsa_digest_type()</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Signature = binary()</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Key = rsa_public_key() | dsa_public_key() | ec_public_key()</fo:block></fo:list-item-body></fo:list-item>
  </fo:list-block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Verifies a digital signature.</fo:block>
  </fo:block>

  <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp401824">short_name_hash(Name) -&gt; string()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = issuer_name()</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Generates a short hash of an issuer name.  The hash is
      returned as a string containing eight hexadecimal digits.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The return value of this function is the same as the result
      of the commands <fo:inline font-family="monospace">openssl crl -hash</fo:inline> and
      <fo:inline font-family="monospace">openssl x509 -issuer_hash</fo:inline>, when passed the issuer name of
      a CRL or a certificate, respectively.  This hash is used by the
      <fo:inline font-family="monospace">c_rehash</fo:inline> tool to maintain a directory of symlinks to CRL
      files, in order to facilitate looking up a CRL by its issuer
      name.</fo:block>
    </fo:block>



</fo:flow>
  </fo:page-sequence>
</fo:root>
