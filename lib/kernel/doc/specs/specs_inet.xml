<module name="inet">
<type>
  <name>address_family</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-address_family">address_family()</marker> = inet | inet6 | local</typehead></typedecl>
</type>
<type>
  <name>ether_address</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-ether_address">ether_address()</marker> = [0..255]</typehead></typedecl>
</type>
<type>
  <name>hostent</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-hostent">hostent()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#hostent{h_name = <seealso marker="inet#type-hostname">inet:hostname()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>h_aliases = [<seealso marker="inet#type-hostname">inet:hostname()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>h_addrtype = inet | inet6,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>h_length = integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>h_addr_list = [<seealso marker="inet#type-ip_address">inet:ip_address()</seealso>]}</typehead></typedecl>
</type>
<type>
  <name>hostname</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-hostname">hostname()</marker> = atom() | string()</typehead></typedecl>
</type>
<type>
  <name>if_getopt</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-if_getopt">if_getopt()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>addr | broadaddr | dstaddr | mtu | netmask | flags | hwaddr</typehead></typedecl>
</type>
<type>
  <name>if_getopt_result</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-if_getopt_result">if_getopt_result()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{addr, <seealso marker="#type-ip_address">ip_address()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{broadaddr, <seealso marker="#type-ip_address">ip_address()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{dstaddr, <seealso marker="#type-ip_address">ip_address()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{mtu, integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{netmask, <seealso marker="#type-ip_address">ip_address()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{flags,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[up |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>down |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>broadcast |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>no_broadcast |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>pointtopoint |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>no_pointtopoint |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>running |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>multicast |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>loopback]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{hwaddr, <seealso marker="#type-ether_address">ether_address()</seealso>}</typehead></typedecl>
</type>
<type>
  <name>if_setopt</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-if_setopt">if_setopt()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{addr, <seealso marker="#type-ip_address">ip_address()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{broadaddr, <seealso marker="#type-ip_address">ip_address()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{dstaddr, <seealso marker="#type-ip_address">ip_address()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{mtu, integer() &gt;= 0} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{netmask, <seealso marker="#type-ip_address">ip_address()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{flags,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[up |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>down |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>broadcast |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>no_broadcast |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>pointtopoint |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>no_pointtopoint |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>running |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>multicast]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{hwaddr, <seealso marker="#type-ether_address">ether_address()</seealso>}</typehead></typedecl>
</type>
<type>
  <name>ip4_address</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-ip4_address">ip4_address()</marker> = {0..255, 0..255, 0..255, 0..255}</typehead></typedecl>
</type>
<type>
  <name>ip6_address</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-ip6_address">ip6_address()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{0..65535,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>0..65535,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>0..65535,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>0..65535,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>0..65535,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>0..65535,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>0..65535,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>0..65535}</typehead></typedecl>
</type>
<type>
  <name>ip_address</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-ip_address">ip_address()</marker> = <seealso marker="#type-ip4_address">ip4_address()</seealso> | <seealso marker="#type-ip6_address">ip6_address()</seealso></typehead></typedecl>
</type>
<type>
  <name>local_address</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-local_address">local_address()</marker> = {local, File :: binary() | string()}</typehead></typedecl>
  <anno>File</anno>
</type>
<type>
  <name>port_number</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-port_number">port_number()</marker> = 0..65535</typehead></typedecl>
</type>
<type>
  <name>posix</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-posix">posix()</marker> = exbadport | exbadseq | <seealso marker="file#type-posix">file:posix()</seealso></typehead></typedecl>
</type>
<type>
  <name>returned_non_ip_address</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-returned_non_ip_address">returned_non_ip_address()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{local, binary()} | {unspec, &lt;&lt;&gt;&gt;} | {undefined, any()}</typehead></typedecl>
</type>
<type>
  <name>socket</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-socket">socket()</marker> = port()</typehead></typedecl>
</type>
<type>
  <name>socket_address</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-socket_address">socket_address()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-ip_address">ip_address()</seealso> | any | loopback | <seealso marker="#type-local_address">local_address()</seealso></typehead></typedecl>
</type>
<type>
  <name>socket_getopt</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-socket_getopt">socket_getopt()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="gen_sctp#type-option_name">gen_sctp:option_name()</seealso> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="gen_tcp#type-option_name">gen_tcp:option_name()</seealso> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="gen_udp#type-option_name">gen_udp:option_name()</seealso></typehead></typedecl>
</type>
<type>
  <name>socket_protocol</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-socket_protocol">socket_protocol()</marker> = tcp | udp | sctp</typehead></typedecl>
</type>
<type>
  <name>socket_setopt</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-socket_setopt">socket_setopt()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="gen_sctp#type-option">gen_sctp:option()</seealso> | <seealso marker="gen_tcp#type-option">gen_tcp:option()</seealso> | <seealso marker="gen_udp#type-option">gen_udp:option()</seealso></typehead></typedecl>
</type>
<type>
  <name>socket_type</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-socket_type">socket_type()</marker> = stream | dgram | seqpacket</typehead></typedecl>
</type>
<type>
  <name>stat_option</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-stat_option">stat_option()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>recv_cnt |<br/><nbsp/><nbsp/><nbsp/><nbsp/>recv_max |<br/><nbsp/><nbsp/><nbsp/><nbsp/>recv_avg |<br/><nbsp/><nbsp/><nbsp/><nbsp/>recv_oct |<br/><nbsp/><nbsp/><nbsp/><nbsp/>recv_dvi |<br/><nbsp/><nbsp/><nbsp/><nbsp/>send_cnt |<br/><nbsp/><nbsp/><nbsp/><nbsp/>send_max |<br/><nbsp/><nbsp/><nbsp/><nbsp/>send_avg |<br/><nbsp/><nbsp/><nbsp/><nbsp/>send_oct |<br/><nbsp/><nbsp/><nbsp/><nbsp/>send_pend</typehead></typedecl>
</type>
<spec>
  <name>close</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>close(Socket) -&gt; ok</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seealso marker="#type-socket">socket()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Socket</anno>
</spec>
<spec>
  <name>connect_options</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>fdopen</name>
  <arity>6</arity>
  <contract>
    <clause>
      <head>fdopen(Fd :: integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Opts :: [<seealso marker="#type-socket_setopt">socket_setopt()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Protocol :: <seealso marker="#type-socket_protocol">socket_protocol()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Family :: <seealso marker="#type-address_family">address_family()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Type :: <seealso marker="#type-socket_type">socket_type()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Module :: atom()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, <seealso marker="#type-socket">socket()</seealso>} | {error, <seealso marker="#type-posix">posix()</seealso>}</head></clause>
  </contract>
  <anno>Family</anno>
  <anno>Fd</anno>
  <anno>Module</anno>
  <anno>Opts</anno>
  <anno>Protocol</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>format_error</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>format_error(Reason) -&gt; string()</head>
      <guard>
        <subtype><typename>Reason</typename><string>Reason = <seealso marker="#type-posix">posix()</seealso> | system_limit</string></subtype>
      </guard></clause>
  </contract>
  <anno>Reason</anno>
</spec>
<spec>
  <name>get_rc</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>get_rc() -&gt; [{Par :: any(), Val :: any()}]</head></clause>
  </contract>
  <anno>Par</anno>
  <anno>Val</anno>
</spec>
<spec>
  <name>getaddr</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getaddr(Host, Family) -&gt; {ok, Address} | {error, <seealso marker="#type-posix">posix()</seealso>}</head>
      <guard>
        <subtype><typename>Host</typename><string>Host = <seealso marker="#type-ip_address">ip_address()</seealso> | <seealso marker="#type-hostname">hostname()</seealso></string></subtype>
        <subtype><typename>Family</typename><string>Family = <seealso marker="#type-address_family">address_family()</seealso></string></subtype>
        <subtype><typename>Address</typename><string>Address = <seealso marker="#type-ip_address">ip_address()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Address</anno>
  <anno>Family</anno>
  <anno>Host</anno>
</spec>
<spec>
  <name>getaddr</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>getaddr(Host :: <seealso marker="#type-ip_address">ip_address()</seealso> | <seealso marker="#type-hostname">hostname()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Family :: <seealso marker="#type-address_family">address_family()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Timeout :: integer() &gt;= 0 | infinity) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, <seealso marker="#type-ip_address">ip_address()</seealso>} | {error, <seealso marker="#type-posix">posix()</seealso>}</head></clause>
  </contract>
  <anno>Family</anno>
  <anno>Host</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>getaddr_tm</name>
  <arity>3</arity>
  <contract/>
</spec>
<spec>
  <name>getaddrs</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getaddrs(Host, Family) -&gt; {ok, Addresses} | {error, <seealso marker="#type-posix">posix()</seealso>}</head>
      <guard>
        <subtype><typename>Host</typename><string>Host = <seealso marker="#type-ip_address">ip_address()</seealso> | <seealso marker="#type-hostname">hostname()</seealso></string></subtype>
        <subtype><typename>Family</typename><string>Family = <seealso marker="#type-address_family">address_family()</seealso></string></subtype>
        <subtype><typename>Addresses</typename><string>Addresses = [<seealso marker="#type-ip_address">ip_address()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Addresses</anno>
  <anno>Family</anno>
  <anno>Host</anno>
</spec>
<spec>
  <name>getaddrs</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>getaddrs(Host :: <seealso marker="#type-ip_address">ip_address()</seealso> | string() | atom(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Family :: <seealso marker="#type-address_family">address_family()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Timeout :: integer() &gt;= 0 | infinity) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, [<seealso marker="#type-ip_address">ip_address()</seealso>]} | {error, <seealso marker="#type-posix">posix()</seealso>}</head></clause>
  </contract>
  <anno>Family</anno>
  <anno>Host</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>getaddrs_tm</name>
  <arity>3</arity>
  <contract/>
</spec>
<spec>
  <name>getfd</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>getfd(Socket :: <seealso marker="#type-socket">socket()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, integer() &gt;= 0} | {error, <seealso marker="#type-posix">posix()</seealso>}</head></clause>
  </contract>
  <anno>Socket</anno>
</spec>
<spec>
  <name>gethostbyaddr</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>gethostbyaddr(Address) -&gt; {ok, Hostent} | {error, <seealso marker="#type-posix">posix()</seealso>}</head>
      <guard>
        <subtype><typename>Address</typename><string>Address = string() | <seealso marker="#type-ip_address">ip_address()</seealso></string></subtype>
        <subtype><typename>Hostent</typename><string>Hostent = <seealso marker="#type-hostent">hostent()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Address</anno>
  <anno>Hostent</anno>
</spec>
<spec>
  <name>gethostbyaddr</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>gethostbyaddr(Address :: string() | <seealso marker="#type-ip_address">ip_address()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Timeout :: integer() &gt;= 0 | infinity) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>#hostent{h_name = <seealso marker="inet#type-hostname">inet:hostname()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>h_aliases = [<seealso marker="inet#type-hostname">inet:hostname()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>h_addrtype = inet | inet6,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>h_length = integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>h_addr_list = [<seealso marker="inet#type-ip_address">inet:ip_address()</seealso>]}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, <seealso marker="#type-posix">posix()</seealso>}</head></clause>
  </contract>
  <anno>Address</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>gethostbyaddr_tm</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>gethostbyname</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>gethostbyname(Hostname) -&gt; {ok, Hostent} | {error, <seealso marker="#type-posix">posix()</seealso>}</head>
      <guard>
        <subtype><typename>Hostname</typename><string>Hostname = <seealso marker="#type-hostname">hostname()</seealso></string></subtype>
        <subtype><typename>Hostent</typename><string>Hostent = <seealso marker="#type-hostent">hostent()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Hostent</anno>
  <anno>Hostname</anno>
</spec>
<spec>
  <name>gethostbyname</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>gethostbyname(Hostname, Family) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Hostent} | {error, <seealso marker="#type-posix">posix()</seealso>}</head>
      <guard>
        <subtype><typename>Hostname</typename><string>Hostname = <seealso marker="#type-hostname">hostname()</seealso></string></subtype>
        <subtype><typename>Family</typename><string>Family = <seealso marker="#type-address_family">address_family()</seealso></string></subtype>
        <subtype><typename>Hostent</typename><string>Hostent = <seealso marker="#type-hostent">hostent()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Family</anno>
  <anno>Hostent</anno>
  <anno>Hostname</anno>
</spec>
<spec>
  <name>gethostbyname</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>gethostbyname(Name :: <seealso marker="#type-hostname">hostname()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Family :: <seealso marker="#type-address_family">address_family()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Timeout :: integer() &gt;= 0 | infinity) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>#hostent{h_name = <seealso marker="inet#type-hostname">inet:hostname()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>h_aliases = [<seealso marker="inet#type-hostname">inet:hostname()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>h_addrtype = inet | inet6,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>h_length = integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>h_addr_list = [<seealso marker="inet#type-ip_address">inet:ip_address()</seealso>]}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, <seealso marker="#type-posix">posix()</seealso>}</head></clause>
  </contract>
  <anno>Family</anno>
  <anno>Name</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>gethostbyname_self</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>gethostbyname_string</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>gethostbyname_tm</name>
  <arity>3</arity>
  <contract/>
</spec>
<spec>
  <name>gethostname</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>gethostname() -&gt; {ok, Hostname}</head>
      <guard>
        <subtype><typename>Hostname</typename><string>Hostname = string()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Hostname</anno>
</spec>
<spec>
  <name>gethostname</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>gethostname(Socket :: <seealso marker="#type-socket">socket()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, string()} | {error, <seealso marker="#type-posix">posix()</seealso>}</head></clause>
  </contract>
  <anno>Socket</anno>
</spec>
<spec>
  <name>getif</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>getif() -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{<seealso marker="#type-ip_address">ip_address()</seealso>, <seealso marker="#type-ip_address">ip_address()</seealso> | undefined, <seealso marker="#type-ip_address">ip_address()</seealso>}]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, <seealso marker="#type-posix">posix()</seealso>}</head></clause>
  </contract>
</spec>
<spec>
  <name>getif</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>getif(Socket :: <seealso marker="#type-socket">socket()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{<seealso marker="#type-ip_address">ip_address()</seealso>, <seealso marker="#type-ip_address">ip_address()</seealso> | undefined, <seealso marker="#type-ip_address">ip_address()</seealso>}]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, <seealso marker="#type-posix">posix()</seealso>}</head></clause>
  </contract>
  <anno>Socket</anno>
</spec>
<spec>
  <name>getifaddrs</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>getifaddrs() -&gt; {ok, Iflist} | {error, <seealso marker="#type-posix">posix()</seealso>}</head>
      <guard>
        <subtype><typename>Iflist</typename><string>Iflist = [{Ifname, [Ifopt]}]</string></subtype>
        <subtype><typename>Ifname</typename><string>Ifname = string()</string></subtype>
        <subtype><typename>Ifopt</typename><string>Ifopt = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{flags, [Flag]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{addr, Addr} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{netmask, Netmask} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{broadaddr, Broadaddr} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{dstaddr, Dstaddr} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{hwaddr, Hwaddr}</string></subtype>
        <subtype><typename>Flag</typename><string>Flag = <br/><nbsp/><nbsp/><nbsp/><nbsp/>up | broadcast | loopback | pointtopoint | running | multicast</string></subtype>
        <subtype><typename>Addr</typename><string>Addr = Netmask = Broadaddr = Dstaddr = <seealso marker="#type-ip_address">ip_address()</seealso></string></subtype>
        <subtype><typename>Netmask</typename><string/></subtype>
        <subtype><typename>Broadaddr</typename><string/></subtype>
        <subtype><typename>Dstaddr</typename><string/></subtype>
        <subtype><typename>Hwaddr</typename><string>Hwaddr = [byte()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Addr</anno>
  <anno>Broadaddr</anno>
  <anno>Dstaddr</anno>
  <anno>Flag</anno>
  <anno>Hwaddr</anno>
  <anno>Iflist</anno>
  <anno>Ifname</anno>
  <anno>Ifopt</anno>
  <anno>Netmask</anno>
</spec>
<spec>
  <name>getifaddrs</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>getifaddrs(Socket :: <seealso marker="#type-socket">socket()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, [string()]} | {error, <seealso marker="#type-posix">posix()</seealso>}</head></clause>
  </contract>
  <anno>Socket</anno>
</spec>
<spec>
  <name>getiflist</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>getiflist() -&gt; {ok, [string()]} | {error, <seealso marker="#type-posix">posix()</seealso>}</head></clause>
  </contract>
</spec>
<spec>
  <name>getiflist</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>getiflist(Socket :: <seealso marker="#type-socket">socket()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, [string()]} | {error, <seealso marker="#type-posix">posix()</seealso>}</head></clause>
  </contract>
  <anno>Socket</anno>
</spec>
<spec>
  <name>getll</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>getll(Socket :: <seealso marker="#type-socket">socket()</seealso>) -&gt; {ok, <seealso marker="#type-socket">socket()</seealso>}</head></clause>
  </contract>
  <anno>Socket</anno>
</spec>
<spec>
  <name>getopts</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getopts(Socket, Options) -&gt; {ok, OptionValues} | {error, <seealso marker="#type-posix">posix()</seealso>}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seealso marker="#type-socket">socket()</seealso></string></subtype>
        <subtype><typename>Options</typename><string>Options = [<seealso marker="#type-socket_getopt">socket_getopt()</seealso>]</string></subtype>
        <subtype><typename>OptionValues</typename><string>OptionValues = [<seealso marker="#type-socket_setopt">socket_setopt()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>OptionValues</anno>
  <anno>Options</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>getservbyname</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getservbyname(Name :: atom() | string(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Protocol :: atom() | string()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, <seealso marker="#type-port_number">port_number()</seealso>} | {error, <seealso marker="#type-posix">posix()</seealso>}</head></clause>
  </contract>
  <anno>Name</anno>
  <anno>Protocol</anno>
</spec>
<spec>
  <name>getservbyport</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getservbyport(Port :: <seealso marker="#type-port_number">port_number()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Protocol :: atom() | string()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, string()} | {error, <seealso marker="#type-posix">posix()</seealso>}</head></clause>
  </contract>
  <anno>Port</anno>
  <anno>Protocol</anno>
</spec>
<spec>
  <name>getstat</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>getstat(Socket) -&gt; {ok, OptionValues} | {error, <seealso marker="#type-posix">posix()</seealso>}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seealso marker="#type-socket">socket()</seealso></string></subtype>
        <subtype><typename>OptionValues</typename><string>OptionValues = [{<seealso marker="#type-stat_option">stat_option()</seealso>, integer()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>OptionValues</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>getstat</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getstat(Socket, Options) -&gt; {ok, OptionValues} | {error, <seealso marker="#type-posix">posix()</seealso>}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seealso marker="#type-socket">socket()</seealso></string></subtype>
        <subtype><typename>Options</typename><string>Options = [<seealso marker="#type-stat_option">stat_option()</seealso>]</string></subtype>
        <subtype><typename>OptionValues</typename><string>OptionValues = [{<seealso marker="#type-stat_option">stat_option()</seealso>, integer()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>OptionValues</anno>
  <anno>Options</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>i</name>
  <arity>0</arity>
  <contract/>
</spec>
<spec>
  <name>i</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>i</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>ifget</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>ifget(Name :: string() | atom(), Opts :: [<seealso marker="#type-if_getopt">if_getopt()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, [<seealso marker="#type-if_getopt_result">if_getopt_result()</seealso>]} | {error, <seealso marker="#type-posix">posix()</seealso>}</head></clause>
  </contract>
  <anno>Name</anno>
  <anno>Opts</anno>
</spec>
<spec>
  <name>ifget</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>ifget(Socket :: <seealso marker="#type-socket">socket()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Name :: string() | atom(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Opts :: [<seealso marker="#type-if_getopt">if_getopt()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, [<seealso marker="#type-if_getopt_result">if_getopt_result()</seealso>]} | {error, <seealso marker="#type-posix">posix()</seealso>}</head></clause>
  </contract>
  <anno>Name</anno>
  <anno>Opts</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>ifset</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>ifset(Name :: string() | atom(), Opts :: [<seealso marker="#type-if_setopt">if_setopt()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok | {error, <seealso marker="#type-posix">posix()</seealso>}</head></clause>
  </contract>
  <anno>Name</anno>
  <anno>Opts</anno>
</spec>
<spec>
  <name>ifset</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>ifset(Socket :: <seealso marker="#type-socket">socket()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Name :: string() | atom(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Opts :: [<seealso marker="#type-if_setopt">if_setopt()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok | {error, <seealso marker="#type-posix">posix()</seealso>}</head></clause>
  </contract>
  <anno>Name</anno>
  <anno>Opts</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>ip</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>ip(Ip :: <seealso marker="#type-ip_address">ip_address()</seealso> | string() | atom()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, <seealso marker="#type-ip_address">ip_address()</seealso>} | {error, <seealso marker="#type-posix">posix()</seealso>}</head></clause>
  </contract>
  <anno>Ip</anno>
</spec>
<spec>
  <name>listen_options</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>lock_socket</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>ntoa</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>ntoa(IpAddress) -&gt; Address | {error, einval}</head>
      <guard>
        <subtype><typename>Address</typename><string>Address = string()</string></subtype>
        <subtype><typename>IpAddress</typename><string>IpAddress = <seealso marker="#type-ip_address">ip_address()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Address</anno>
  <anno>IpAddress</anno>
</spec>
<spec>
  <name>open</name>
  <arity>8</arity>
  <contract>
    <clause>
      <head>open(Fd_or_OpenOpts :: integer() | list(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Addr ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-socket_address">socket_address()</seealso> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{<seealso marker="#type-ip_address">ip_address()</seealso> | any | loopback, <seealso marker="#type-port_number">port_number()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{inet, {<seealso marker="#type-ip4_address">ip4_address()</seealso> | any | loopback, <seealso marker="#type-port_number">port_number()</seealso>}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{inet6, {<seealso marker="#type-ip6_address">ip6_address()</seealso> | any | loopback, <seealso marker="#type-port_number">port_number()</seealso>}} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>undefined,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Port :: <seealso marker="#type-port_number">port_number()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Opts :: [<seealso marker="#type-socket_setopt">socket_setopt()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Protocol :: <seealso marker="#type-socket_protocol">socket_protocol()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Family :: <seealso marker="#type-address_family">address_family()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Type :: <seealso marker="#type-socket_type">socket_type()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Module :: atom()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, <seealso marker="#type-socket">socket()</seealso>} | {error, <seealso marker="#type-posix">posix()</seealso>}</head></clause>
  </contract>
  <anno>Addr</anno>
  <anno>Family</anno>
  <anno>Fd_or_OpenOpts</anno>
  <anno>Module</anno>
  <anno>Opts</anno>
  <anno>Port</anno>
  <anno>Protocol</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>options</name>
  <arity>0</arity>
  <contract/>
</spec>
<spec>
  <name>parse_address</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>parse_address(Address) -&gt; {ok, IPAddress} | {error, einval}</head>
      <guard>
        <subtype><typename>Address</typename><string>Address = string()</string></subtype>
        <subtype><typename>IPAddress</typename><string>IPAddress = <seealso marker="#type-ip_address">ip_address()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Address</anno>
  <anno>IPAddress</anno>
</spec>
<spec>
  <name>parse_ipv4_address</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>parse_ipv4_address(Address) -&gt; {ok, IPv4Address} | {error, einval}</head>
      <guard>
        <subtype><typename>Address</typename><string>Address = string()</string></subtype>
        <subtype><typename>IPv4Address</typename><string>IPv4Address = <seealso marker="#type-ip_address">ip_address()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Address</anno>
  <anno>IPv4Address</anno>
</spec>
<spec>
  <name>parse_ipv4strict_address</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>parse_ipv4strict_address(Address) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, IPv4Address} | {error, einval}</head>
      <guard>
        <subtype><typename>Address</typename><string>Address = string()</string></subtype>
        <subtype><typename>IPv4Address</typename><string>IPv4Address = <seealso marker="#type-ip_address">ip_address()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Address</anno>
  <anno>IPv4Address</anno>
</spec>
<spec>
  <name>parse_ipv6_address</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>parse_ipv6_address(Address) -&gt; {ok, IPv6Address} | {error, einval}</head>
      <guard>
        <subtype><typename>Address</typename><string>Address = string()</string></subtype>
        <subtype><typename>IPv6Address</typename><string>IPv6Address = <seealso marker="#type-ip_address">ip_address()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Address</anno>
  <anno>IPv6Address</anno>
</spec>
<spec>
  <name>parse_ipv6strict_address</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>parse_ipv6strict_address(Address) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, IPv6Address} | {error, einval}</head>
      <guard>
        <subtype><typename>Address</typename><string>Address = string()</string></subtype>
        <subtype><typename>IPv6Address</typename><string>IPv6Address = <seealso marker="#type-ip_address">ip_address()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Address</anno>
  <anno>IPv6Address</anno>
</spec>
<spec>
  <name>parse_strict_address</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>parse_strict_address(Address) -&gt; {ok, IPAddress} | {error, einval}</head>
      <guard>
        <subtype><typename>Address</typename><string>Address = string()</string></subtype>
        <subtype><typename>IPAddress</typename><string>IPAddress = <seealso marker="#type-ip_address">ip_address()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Address</anno>
  <anno>IPAddress</anno>
</spec>
<spec>
  <name>peername</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>peername(Socket :: <seealso marker="#type-socket">socket()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{<seealso marker="#type-ip_address">ip_address()</seealso>, <seealso marker="#type-port_number">port_number()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-returned_non_ip_address">returned_non_ip_address()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, <seealso marker="#type-posix">posix()</seealso>}</head></clause>
  </contract>
  <anno>Socket</anno>
</spec>
<spec>
  <name>peernames</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>peernames(Socket :: <seealso marker="#type-socket">socket()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{<seealso marker="#type-ip_address">ip_address()</seealso>, <seealso marker="#type-port_number">port_number()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-returned_non_ip_address">returned_non_ip_address()</seealso>]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, <seealso marker="#type-posix">posix()</seealso>}</head></clause>
  </contract>
  <anno>Socket</anno>
</spec>
<spec>
  <name>peernames</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>peernames(Socket, Assoc) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, [{Address, Port}]} | {error, <seealso marker="#type-posix">posix()</seealso>}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seealso marker="#type-socket">socket()</seealso></string></subtype>
        <subtype><typename>Assoc</typename><string>Assoc = #sctp_assoc_change{} | <seealso marker="gen_sctp#type-assoc_id">gen_sctp:assoc_id()</seealso></string></subtype>
        <subtype><typename>Address</typename><string>Address = <seealso marker="#type-ip_address">ip_address()</seealso></string></subtype>
        <subtype><typename>Port</typename><string>Port = integer() &gt;= 0</string></subtype>
      </guard></clause>
  </contract>
  <anno>Address</anno>
  <anno>Assoc</anno>
  <anno>Port</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>popf</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>port</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>port(Socket) -&gt; {ok, Port} | {error, any()}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seealso marker="#type-socket">socket()</seealso></string></subtype>
        <subtype><typename>Port</typename><string>Port = <seealso marker="#type-port_number">port_number()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Port</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>pushf</name>
  <arity>3</arity>
  <contract/>
</spec>
<spec>
  <name>sctp_module</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>sctp_options</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>send</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>send(Socket :: <seealso marker="#type-socket">socket()</seealso>, Packet :: iolist()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok | {error, <seealso marker="#type-posix">posix()</seealso>}</head></clause>
  </contract>
  <anno>Packet</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>setopts</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>setopts(Socket, Options) -&gt; ok | {error, <seealso marker="#type-posix">posix()</seealso>}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seealso marker="#type-socket">socket()</seealso></string></subtype>
        <subtype><typename>Options</typename><string>Options = [<seealso marker="#type-socket_setopt">socket_setopt()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Options</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>setpeername</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>setpeername(Socket :: <seealso marker="#type-socket">socket()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Address ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{<seealso marker="#type-ip_address">ip_address()</seealso> | any | loopback, <seealso marker="#type-port_number">port_number()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-socket_address">socket_address()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok | {error, any()}</head></clause>
  </contract>
  <anno>Address</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>setsockname</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>setsockname(Socket :: <seealso marker="#type-socket">socket()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Address ::<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{<seealso marker="#type-ip_address">ip_address()</seealso> | any | loopback, <seealso marker="#type-port_number">port_number()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-socket_address">socket_address()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok | {error, any()}</head></clause>
  </contract>
  <anno>Address</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>sockname</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>sockname(Socket :: <seealso marker="#type-socket">socket()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{<seealso marker="#type-ip_address">ip_address()</seealso>, <seealso marker="#type-port_number">port_number()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-returned_non_ip_address">returned_non_ip_address()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, <seealso marker="#type-posix">posix()</seealso>}</head></clause>
  </contract>
  <anno>Socket</anno>
</spec>
<spec>
  <name>socknames</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>socknames(Socket :: <seealso marker="#type-socket">socket()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{<seealso marker="#type-ip_address">ip_address()</seealso>, <seealso marker="#type-port_number">port_number()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-returned_non_ip_address">returned_non_ip_address()</seealso>]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, <seealso marker="#type-posix">posix()</seealso>}</head></clause>
  </contract>
  <anno>Socket</anno>
</spec>
<spec>
  <name>socknames</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>socknames(Socket, Assoc) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, [{Address, Port}]} | {error, <seealso marker="#type-posix">posix()</seealso>}</head>
      <guard>
        <subtype><typename>Socket</typename><string>Socket = <seealso marker="#type-socket">socket()</seealso></string></subtype>
        <subtype><typename>Assoc</typename><string>Assoc = #sctp_assoc_change{} | <seealso marker="gen_sctp#type-assoc_id">gen_sctp:assoc_id()</seealso></string></subtype>
        <subtype><typename>Address</typename><string>Address = <seealso marker="#type-ip_address">ip_address()</seealso></string></subtype>
        <subtype><typename>Port</typename><string>Port = integer() &gt;= 0</string></subtype>
      </guard></clause>
  </contract>
  <anno>Address</anno>
  <anno>Assoc</anno>
  <anno>Port</anno>
  <anno>Socket</anno>
</spec>
<spec>
  <name>start_timer</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>stats</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>stats() -&gt; [<seealso marker="#type-stat_option">stat_option()</seealso>, ...]</head></clause>
  </contract>
</spec>
<spec>
  <name>stop_timer</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>tcp_close</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>tcp_controlling_process</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>tcp_module</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>tcp_module</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>timeout</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>timeout</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>translate_ip</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>udp_close</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>udp_controlling_process</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>udp_module</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>udp_options</name>
  <arity>2</arity>
  <contract/>
</spec>
<timestamp>Generated by EDoc, Jul 12 2017, 20:27:42.</timestamp>
</module>