<?xml version="1.0"?>
<fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format">
  <fo:layout-master-set>
    <fo:simple-page-master master-name="cover" margin="25mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin="0mm"/>
    </fo:simple-page-master>
    <fo:simple-page-master master-name="left-page" margin-top="25mm" margin-bottom="15mm" margin-left="20mm" margin-right="25mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin-top="15mm" margin-bottom="20mm"/>
      <fo:region-before region-name="left-header" extent="10mm"/>
      <fo:region-after region-name="left-footer" extent="10mm"/>
    </fo:simple-page-master>
    <fo:simple-page-master master-name="right-page" margin-top="25mm" margin-bottom="15mm" margin-left="25mm" margin-right="20mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin-top="15mm" margin-bottom="20mm"/>
      <fo:region-before region-name="right-header" extent="10mm"/>
      <fo:region-after region-name="right-footer" extent="10mm"/>
    </fo:simple-page-master>
    <fo:page-sequence-master master-name="document">
      <fo:repeatable-page-master-alternatives>
        <fo:conditional-page-master-reference master-reference="left-page" odd-or-even="even"/>
        <fo:conditional-page-master-reference master-reference="right-page" odd-or-even="odd"/>
      </fo:repeatable-page-master-alternatives>
    </fo:page-sequence-master>
  </fo:layout-master-set>
  <fo:bookmark-tree>
    <fo:bookmark internal-destination="cover-page" starting-state="show">
      <fo:bookmark-title>Debugger</fo:bookmark-title>
      <fo:bookmark internal-destination="idp756976" starting-state="hide">
        <fo:bookmark-title>Debugger User's Guide</fo:bookmark-title>
        <fo:bookmark internal-destination="idp749744" starting-state="hide">
          <fo:bookmark-title>Introduction</fo:bookmark-title>
          <fo:bookmark internal-destination="idp747520" starting-state="hide">
            <fo:bookmark-title>Scope</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp743664" starting-state="hide">
            <fo:bookmark-title>Prerequisites</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp738480" starting-state="hide">
          <fo:bookmark-title>Debugger</fo:bookmark-title>
          <fo:bookmark internal-destination="idp729776" starting-state="hide">
            <fo:bookmark-title>Getting Started</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp719040" starting-state="hide">
            <fo:bookmark-title>Breakpoints and Break Dialog Windows</fo:bookmark-title>
            <fo:bookmark internal-destination="idp714720" starting-state="hide">
              <fo:bookmark-title>Executable Lines</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp711328" starting-state="hide">
              <fo:bookmark-title>Status and Trigger Action</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp706176" starting-state="hide">
              <fo:bookmark-title>Line Breakpoints</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp702976" starting-state="hide">
              <fo:bookmark-title>Conditional Breakpoints</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp681008" starting-state="hide">
              <fo:bookmark-title>Function Breakpoints</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp673424" starting-state="hide">
            <fo:bookmark-title>Stack Trace</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp662928" starting-state="hide">
            <fo:bookmark-title>Monitor Window</fo:bookmark-title>
            <fo:bookmark internal-destination="idp654848" starting-state="hide">
              <fo:bookmark-title>Process Grid</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp638224" starting-state="hide">
              <fo:bookmark-title>File Menu</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp631936" starting-state="hide">
              <fo:bookmark-title>Edit Menu</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp627696" starting-state="hide">
              <fo:bookmark-title>Module Menu</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp619536" starting-state="hide">
              <fo:bookmark-title>Process Menu</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp609744" starting-state="hide">
              <fo:bookmark-title>Break Menu</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp599472" starting-state="hide">
              <fo:bookmark-title>Options Menu</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp582016" starting-state="hide">
              <fo:bookmark-title>Windows Menu</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp535344" starting-state="hide">
              <fo:bookmark-title>Help Menu</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp532592" starting-state="hide">
            <fo:bookmark-title>Interpret Modules Window</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp514752" starting-state="hide">
            <fo:bookmark-title>Attach Process Window</fo:bookmark-title>
            <fo:bookmark internal-destination="idp22592" starting-state="hide">
              <fo:bookmark-title>File Menu</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp20128" starting-state="hide">
              <fo:bookmark-title>Edit Menu</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp16160" starting-state="hide">
              <fo:bookmark-title>Process Menu</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp255024" starting-state="hide">
              <fo:bookmark-title>Options Menu</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idp265648" starting-state="hide">
              <fo:bookmark-title>Break, Windows, and Help Menus</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp565536" starting-state="hide">
            <fo:bookmark-title>View Module Window</fo:bookmark-title>
            <fo:bookmark internal-destination="idp461712" starting-state="hide">
              <fo:bookmark-title>File and Edit Menus</fo:bookmark-title>
            </fo:bookmark>
            <fo:bookmark internal-destination="idm19744" starting-state="hide">
              <fo:bookmark-title>Break, Windows, and Help Menus</fo:bookmark-title>
            </fo:bookmark>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp567808" starting-state="hide">
            <fo:bookmark-title>Performance</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp486672" starting-state="hide">
            <fo:bookmark-title>Code Loading Mechanism</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp482048" starting-state="hide">
            <fo:bookmark-title>Debugging Remote Nodes</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
      </fo:bookmark>
      <fo:bookmark internal-destination="idp34848" starting-state="hide">
        <fo:bookmark-title>Reference Manual</fo:bookmark-title>
        <fo:bookmark internal-destination="idp1086496" starting-state="hide">
          <fo:bookmark-title>debugger</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1084192" starting-state="hide">
            <fo:bookmark-title>start/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1083776" starting-state="hide">
            <fo:bookmark-title>start/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1083312" starting-state="hide">
            <fo:bookmark-title>start/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1082768" starting-state="hide">
            <fo:bookmark-title>start/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1077008" starting-state="hide">
            <fo:bookmark-title>quick/3</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp1056064" starting-state="hide">
          <fo:bookmark-title>i</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1050528" starting-state="hide">
            <fo:bookmark-title>im/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1047200" starting-state="hide">
            <fo:bookmark-title>ii/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1048416" starting-state="hide">
            <fo:bookmark-title>ii/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1048000" starting-state="hide">
            <fo:bookmark-title>ini/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1047584" starting-state="hide">
            <fo:bookmark-title>ini/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1041168" starting-state="hide">
            <fo:bookmark-title>iq/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1040720" starting-state="hide">
            <fo:bookmark-title>inq/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1036096" starting-state="hide">
            <fo:bookmark-title>il/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1034000" starting-state="hide">
            <fo:bookmark-title>ip/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1031904" starting-state="hide">
            <fo:bookmark-title>ic/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1029824" starting-state="hide">
            <fo:bookmark-title>iaa/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1029376" starting-state="hide">
            <fo:bookmark-title>iaa/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1024144" starting-state="hide">
            <fo:bookmark-title>ist/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1020624" starting-state="hide">
            <fo:bookmark-title>ia/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1017680" starting-state="hide">
            <fo:bookmark-title>ia/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1013568" starting-state="hide">
            <fo:bookmark-title>ia/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp907936" starting-state="hide">
            <fo:bookmark-title>ia/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp901792" starting-state="hide">
            <fo:bookmark-title>ib/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp897008" starting-state="hide">
            <fo:bookmark-title>ib/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp893488" starting-state="hide">
            <fo:bookmark-title>ir/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp891568" starting-state="hide">
            <fo:bookmark-title>ir/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp887984" starting-state="hide">
            <fo:bookmark-title>ir/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp846496" starting-state="hide">
            <fo:bookmark-title>ir/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp841216" starting-state="hide">
            <fo:bookmark-title>ibd/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp837616" starting-state="hide">
            <fo:bookmark-title>ibe/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp833264" starting-state="hide">
            <fo:bookmark-title>iba/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp405248" starting-state="hide">
            <fo:bookmark-title>ibc/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp398288" starting-state="hide">
            <fo:bookmark-title>ipb/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp396176" starting-state="hide">
            <fo:bookmark-title>ipb/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp947088" starting-state="hide">
            <fo:bookmark-title>iv/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp943216" starting-state="hide">
            <fo:bookmark-title>help/0</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp857264" starting-state="hide">
          <fo:bookmark-title>int</fo:bookmark-title>
          <fo:bookmark internal-destination="idp931008" starting-state="hide">
            <fo:bookmark-title>i/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp930304" starting-state="hide">
            <fo:bookmark-title>i/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp930720" starting-state="hide">
            <fo:bookmark-title>ni/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp929472" starting-state="hide">
            <fo:bookmark-title>ni/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp807296" starting-state="hide">
            <fo:bookmark-title>n/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp94160" starting-state="hide">
            <fo:bookmark-title>nn/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp270992" starting-state="hide">
            <fo:bookmark-title>interpreted/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp949440" starting-state="hide">
            <fo:bookmark-title>file/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp829184" starting-state="hide">
            <fo:bookmark-title>interpretable/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1009440" starting-state="hide">
            <fo:bookmark-title>auto_attach/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1009856" starting-state="hide">
            <fo:bookmark-title>auto_attach/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1010304" starting-state="hide">
            <fo:bookmark-title>auto_attach/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1066528" starting-state="hide">
            <fo:bookmark-title>stack_trace/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1066976" starting-state="hide">
            <fo:bookmark-title>stack_trace/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp786288" starting-state="hide">
            <fo:bookmark-title>break/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp790752" starting-state="hide">
            <fo:bookmark-title>delete_break/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idm16736" starting-state="hide">
            <fo:bookmark-title>break_in/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idm12800" starting-state="hide">
            <fo:bookmark-title>del_break_in/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idm8864" starting-state="hide">
            <fo:bookmark-title>no_break/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idm8416" starting-state="hide">
            <fo:bookmark-title>no_break/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idm5760" starting-state="hide">
            <fo:bookmark-title>disable_break/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1241168" starting-state="hide">
            <fo:bookmark-title>enable_break/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1245696" starting-state="hide">
            <fo:bookmark-title>action_at_break/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1251040" starting-state="hide">
            <fo:bookmark-title>test_at_break/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1257360" starting-state="hide">
            <fo:bookmark-title>get_binding/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1261808" starting-state="hide">
            <fo:bookmark-title>all_breaks/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1262256" starting-state="hide">
            <fo:bookmark-title>all_breaks/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1269936" starting-state="hide">
            <fo:bookmark-title>snapshot/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1288944" starting-state="hide">
            <fo:bookmark-title>clear/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1291264" starting-state="hide">
            <fo:bookmark-title>continue/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1291680" starting-state="hide">
            <fo:bookmark-title>continue/3</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
      </fo:bookmark>
    </fo:bookmark>
  </fo:bookmark-tree>
  <fo:page-sequence font-family="sans-serif" force-page-count="even" master-reference="cover" font-size="10pt">
    <fo:flow flow-name="xsl-region-body">
      <fo:block space-before="130mm" space-before.conditionality="retain" text-align="end">
        <fo:external-graphic src="/root/download/otp_src_20.0/bootstrap/lib/erl_docgen/priv/images/erlang-logo.gif"/>
      </fo:block>
      <fo:block id="cover-page" border-before-style="solid" border-before-width="10pt" border-color="#960003" font-size="2.3em" padding-before="0.5em" text-align="end">Debugger</fo:block>
      <fo:block font-size="0.9em" text-align="end">Copyright © 1997-2017 Ericsson AB. All Rights Reserved.</fo:block>
      <fo:block font-size="0.9em" text-align="end">Debugger 4.2.2</fo:block>
      <fo:block font-size="0.9em" text-align="end">July 12, 2017</fo:block>
      <fo:block padding-before="2.5em" font-size="1.33em" font-weight="bold" color="#C00" text-align="end"/>
      <fo:block break-before="page" border-before-style="solid" border-before-width="1pt" border-color="#960003" font-weight="bold" padding-before="0.5em" space-before="200mm" space-before.conditionality="retain">Copyright © 1997-2017 Ericsson AB. All Rights Reserved.</fo:block>
      <fo:block font-size="0.9em">
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
 
          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
    
    Ericsson AB. All Rights Reserved..
        </fo:block>
      <fo:block font-size="0.9em" font-weight="bold" space-before="2em">July 12, 2017</fo:block>
    </fo:flow>
  </fo:page-sequence>
  <fo:page-sequence font-family="serif" master-reference="document" initial-page-number="1" font-size="10pt">
    <fo:static-content flow-name="left-header">
      <fo:block text-align="start" border-after-style="solid" border-after-width="2pt" border-color="#960003" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">
        <fo:retrieve-marker retrieve-boundary="page-sequence" retrieve-class-name="chapter-title" retrieve-position="first-including-carryover"/>
      </fo:block>
    </fo:static-content>
    <fo:static-content flow-name="right-header">
      <fo:block text-align="end" border-after-style="solid" border-after-width="2pt" border-color="#960003" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">
        <fo:retrieve-marker retrieve-boundary="page-sequence" retrieve-class-name="chapter-title" retrieve-position="first-including-carryover"/>
      </fo:block>
    </fo:static-content>
    <fo:static-content flow-name="left-footer">
      <fo:block text-align="start" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold"><fo:page-number/> | Ericsson AB. All Rights Reserved.:
            Debugger</fo:block>
    </fo:static-content>
    <fo:static-content flow-name="right-footer">
      <fo:block text-align="end" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">Ericsson AB. All Rights Reserved.:
            Debugger | <fo:page-number/></fo:block>
    </fo:static-content>
    <fo:flow flow-name="xsl-region-body"><fo:block/><fo:block id="idp756976" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">1   
      Debugger User's Guide</fo:block><fo:block id="idp749744" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.1  Introduction</fo:marker>1.1  Introduction</fo:block><fo:block id="idp747520" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.1 
      Scope</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Debugger is a graphical user interface for the Erlang
      interpreter, which can be used for debugging and testing of
      Erlang programs. For example, breakpoints can be set, code can be
      single-stepped and variable values can be displayed and changed.
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Erlang interpreter can also be accessed through the interface
      module <fo:inline font-style="italic"><fo:inline font-family="monospace">int(3)</fo:inline></fo:inline>.
    </fo:block>

    <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Debugger might at some point
      start tracing on the processes that execute the interpreted
      code. This means that a conflict occurs if tracing by other
      means is started on any of these processes.</fo:block>
    </fo:block>
  <fo:block id="idp743664" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.2 
      Prerequisites</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is assumed that the reader is familiar with the Erlang
      programming language.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Modules to be debugged must include debug information,
      for example, <fo:inline font-family="monospace">erlc +debug_info MODULE.erl</fo:inline>.</fo:block>
  <fo:block id="idp738480" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.2  Debugger</fo:marker>1.2  Debugger</fo:block><fo:block id="idp729776" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.1 
      Getting Started</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To use Debugger, the basic steps are as follows:</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 1.</fo:inline> Start Debugger by calling
      <fo:inline font-family="monospace">debugger:start()</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-style="italic">Monitor window</fo:inline> is
      displayed with information about all debugged processes,
      interpreted modules, and selected options. Initially there are
      normally no debugged processes. First, it must be specified which
      modules that are to be <fo:inline font-weight="bold">debugged</fo:inline> (also called
      <fo:inline font-weight="bold">interpreted</fo:inline>). Proceed as follows:</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 2.</fo:inline> Select <fo:inline font-weight="bold">Module &gt; Interpret...</fo:inline> in the
      Monitor window.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-style="italic">Interpret Modules window</fo:inline>
      is displayed.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 3.</fo:inline> Select the appropriate modules from the Interpret
      Dialog window.</fo:block>

    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Only modules compiled with option <fo:inline font-family="monospace">debug_info</fo:inline> set can be
        interpreted. Non-interpretable modules are displayed within
        parenthesis in the Interpret Modules window.</fo:block>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 4.</fo:inline> In the Monitor window, select
      <fo:inline font-weight="bold">Module &gt; the module to be interpreted &gt; View</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The contents of the source file is displayed in the
      <fo:inline font-style="italic">View Module window</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 5.</fo:inline> Set the
      <fo:inline font-style="italic">breakpoints</fo:inline>, if any.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 6.</fo:inline> Start the program to be debugged. This is done
      the normal way from the Erlang shell.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All processes executing code in interpreted modules are displayed
      in the Monitor window.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 7.</fo:inline> To <fo:inline font-weight="bold">attach</fo:inline> to one of these processes,
      double-click it, or select the process and then choose
      <fo:inline font-weight="bold">Process &gt; Attach</fo:inline>. Attaching to a process opens an
      <fo:inline font-style="italic">Attach Process window</fo:inline> for this
      process.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Step 8.</fo:inline> From the Attach Process window, you can control
      the process execution, inspect variable values, set breakpoints,
      and so on.</fo:block>
  <fo:block id="idp719040" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.2 
      Breakpoints and Break Dialog Windows</fo:block>
    
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Once the appropriate modules are interpreted, breakpoints can
      be set at relevant locations in the source code. Breakpoints are
      specified on a line basis. When a process reaches a breakpoint,
      it stops and waits for commands (<fo:inline font-weight="bold">Step</fo:inline>, <fo:inline font-weight="bold">Skip</fo:inline>,
      <fo:inline font-weight="bold">Continue</fo:inline> ...) from the user.</fo:block>

    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When a process reaches a breakpoint, only that process is
        stopped. Other processes are not affected.</fo:block>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Breakpoints are created and deleted using the <fo:inline font-weight="bold">Break</fo:inline> menu of
      either the Monitor window, View Module window, or Attach Process
      window.</fo:block>

    <fo:block id="idp714720" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Executable Lines</fo:block>
      

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To have an effect, a breakpoint must be set at an
        <fo:inline font-weight="bold">executable line</fo:inline>, which is a line of code containing an
        executable expression such as a matching or a function call.
        A blank line or a line containing a comment, function head, or
        pattern in a <fo:inline font-family="monospace">case</fo:inline> statement or <fo:inline font-family="monospace">receive</fo:inline> statement is not
        executable.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the following example, lines 2, 4, 6, 8, and 11 are
        executable lines:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1: is_loaded(Module,Compiled) -&gt;
2:   case get_file(Module,Compiled) of
3:     {ok,File} -&gt;
4:       case code:which(Module) of
5:         ?TAG -&gt;
6:           {loaded,File};
7:         _ -&gt;
8:           unloaded
9:       end;
10:    false -&gt;
11:      false
12:  end.</fo:block>
    
    
    <fo:block id="idp711328" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Status and Trigger Action</fo:block>		  
      

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A breakpoint can be either <fo:inline font-weight="bold">active</fo:inline> or
        <fo:inline font-weight="bold">inactive</fo:inline>. Inactive breakpoints are ignored.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each breakpoint has a <fo:inline font-weight="bold">trigger action</fo:inline> that specifies
        what is to happen when a process has reached it (and stopped):</fo:block>
      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Enable</fo:inline> - Breakpoint is to remain active (default).
        </fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Disable</fo:inline> - Breakpoint is to be made inactive.</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-weight="bold">Delete</fo:inline> - Breakpoint is to be deleted.</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
    

    <fo:block id="idp706176" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Line Breakpoints</fo:block>
      

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A line breakpoint is created at a certain line in a module.</fo:block>

      <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="images/line_break_dialog.jpg"/>
        <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        2.1:
         
        Line Break Dialog Window</fo:block>
      </fo:block>

     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Right-click the <fo:inline font-weight="bold">Module</fo:inline> entry to open a popup menu from
       which the appropriate module can be selected.</fo:block>

     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A line breakpoint can also be created (and deleted) by
       double-clicking the line when the module is displayed in
       the View Module window or Attach Process window.</fo:block>
    

    <fo:block id="idp702976" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Conditional Breakpoints</fo:block>
      

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A conditional breakpoint is created at a certain line in
        the module, but a process reaching the breakpoint stops
        only if a specified condition is true.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The condition is specified by the user as a module name
        <fo:inline font-family="monospace">CModule</fo:inline> and a function name <fo:inline font-family="monospace">CFunction</fo:inline>. When a
        process reaches the breakpoint,
        <fo:inline font-family="monospace">CModule:CFunction(Bindings)</fo:inline> is evaluated. If and
        only if this function call returns <fo:inline font-family="monospace">true</fo:inline>, the process
        stops. If the function call returns <fo:inline font-family="monospace">false</fo:inline>,
        the breakpoint is silently ignored.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Bindings</fo:inline> is a list of variable bindings. To retrieve the
        value of <fo:inline font-family="monospace">Variable</fo:inline> (given as an atom), use function
        <fo:inline font-style="italic"><fo:inline font-family="monospace">int:get_binding(Variable,Bindings)</fo:inline></fo:inline>.
        The function returns <fo:inline font-family="monospace">unbound</fo:inline> or <fo:inline font-family="monospace">{value,Value}</fo:inline>.</fo:block>
	
      <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="images/cond_break_dialog.jpg"/>
        <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        2.2:
         
        Conditional Break Dialog Window</fo:block>
      </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Right-click the <fo:inline font-weight="bold">Module</fo:inline> entry to open a popup menu from
        which the appropriate module can be selected.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Example:</fo:inline></fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A conditional breakpoint calling
        <fo:inline font-family="monospace">c_test:c_break/1</fo:inline> is added at line 6 in module
	<fo:inline font-family="monospace">fact</fo:inline>. Each time the breakpoint is reached, the function is
	called. When <fo:inline font-family="monospace">N</fo:inline> is equal to 3, the function returns
        <fo:inline font-family="monospace">true</fo:inline> and the process stops.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Extract from <fo:inline font-family="monospace">fact.erl</fo:inline>:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
5. fac(0) -&gt; 1;
6. fac(N) when N &gt; 0, is_integer(N) -&gt; N * fac(N-1).</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Definition of <fo:inline font-family="monospace">c_test:c_break/1</fo:inline>:</fo:block>
      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-module(c_test).
-export([c_break/1]).

c_break(Bindings) -&gt;
    case int:get_binding('N', Bindings) of
        {value, 3} -&gt;
            true;
        _ -&gt;
            false
    end.</fo:block>
    

    <fo:block id="idp681008" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Function Breakpoints</fo:block>
      

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A function breakpoint is a set of line breakpoints, one at
        the first line of each clause in the specified function.</fo:block>

      <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="images/function_break_dialog.jpg"/>
        <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        2.3:
         
        Function Break Dialog Window</fo:block>
      </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To open a popup menu from which the appropriate module can be
        selected, right-click the <fo:inline font-weight="bold">Module</fo:inline> entry.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To bring up all functions of the module in the listbox,
        click the <fo:inline font-weight="bold">OK</fo:inline> button (or press the <fo:inline font-weight="bold">Return</fo:inline>
        or <fo:inline font-weight="bold">Tab</fo:inline> key) when a module name has been specified,.</fo:block>
    
  <fo:block id="idp673424" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.3 
      Stack Trace</fo:block>
    
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Erlang emulator keeps track of a <fo:inline font-weight="bold">stack trace</fo:inline>,
      information about recent function calls. This information is
      used if an error occurs, for example:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">catch a+1.</fo:inline>
{'EXIT',{badarith,[{erlang,'+',[a,1],[]},
                   {erl_eval,do_apply,6,[{file,"erl_eval.erl"},{line,573}]},
                   {erl_eval,expr,5,[{file,"erl_eval.erl"},{line,357}]},
                   {shell,exprs,7,[{file,"shell.erl"},{line,674}]},
                   {shell,eval_exprs,7,[{file,"shell.erl"},{line,629}]},
                   {shell,eval_loop,3,[{file,"shell.erl"},{line,614}]}]}}</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details about the stack trace, see section
      <fo:inline font-style="italic">Errors and Error Handling</fo:inline>
      in the Erlang Reference Manual.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Debugger emulates the stack trace by keeping track of recently
      called interpreted functions. (The real stack trace cannot be
      used, as it shows which functions of Debugger have been
      called, rather than which interpreted functions.)</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This information can be used to traverse the chain of function
      calls, using the <fo:inline font-weight="bold">Up</fo:inline> and <fo:inline font-weight="bold">Down</fo:inline> buttons in the
      <fo:inline font-style="italic">Attach Process window</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By default, Debugger only saves information about recursive
      function calls, that is, function calls that have not yet returned
      a value (option <fo:inline font-weight="bold">Stack On, No Tail</fo:inline>).</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sometimes, however, it can be useful to save all calls, even
      tail-recursive calls. This is done with option
      <fo:inline font-weight="bold">Stack On, Tail</fo:inline>. Notice that this option consumes more
      memory and slows down execution of interpreted functions when there
      are many tail-recursive calls.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To turn off the Debugger stack trace facility, select option
      <fo:inline font-weight="bold">Stack Off</fo:inline>.</fo:block>

    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If an error occurs, the stack trace becomes empty in this
        case.</fo:block>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For information about how to change the stack trace option, see
      section <fo:inline font-style="italic">Monitor Window</fo:inline>.</fo:block>
  <fo:block id="idp662928" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.4 
      Monitor Window</fo:block>
    
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Monitor window is the main window of Debugger and displays the
      following:</fo:block>

    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A listbox containing the names of all interpreted
        modules</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Double-clicking a module brings up the View Module window.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Which options are selected</fo:block></fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Information about all debugged processes, that is, all
        processes that have been or are executing code in interpreted
        modules</fo:block></fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>

    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="images/monitor.jpg"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        2.4:
         
        Monitor Window</fo:block>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-weight="bold">Auto Attach</fo:inline> boxes, <fo:inline font-weight="bold">Stack Trace</fo:inline> label,
      <fo:inline font-weight="bold">Back Trace Size</fo:inline> label, and <fo:inline font-weight="bold">Strings</fo:inline> box display
      some options set. For details about these options, see section
      <fo:inline font-style="italic">Options Menu</fo:inline>.</fo:block>

    <fo:block id="idp654848" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Process Grid</fo:block>
      
      <fo:block space-after="0.25em" space-before="0.25em">
	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Pid</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The process identifier.</fo:block></fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Initial Call</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The first call to an interpreted function by this
          process. (<fo:inline font-family="monospace">Module:Function/Arity</fo:inline>)</fo:block></fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Name</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The registered name, if any. If a registered name is not
          displayed, it can be that Debugger received information about
          the process before the name was registered. Try selecting
          <fo:inline font-weight="bold">Edit &gt; Refresh</fo:inline>.</fo:block></fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Status</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The current status, one of the following:</fo:block>
	  <fo:block space-after="0.25em" space-before="0.25em">
	    <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">idle</fo:inline></fo:block>
	    <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The interpreted function call has returned a value, and
	      the process is no longer executing interpreted code.</fo:block></fo:block></fo:block-container>

	    <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">running</fo:inline></fo:block>
	    <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The process is running.</fo:block></fo:block></fo:block-container>

	    <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">waiting</fo:inline></fo:block>
	    <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The process is waiting in a <fo:inline font-family="monospace">receive</fo:inline>
	      statement.</fo:block></fo:block></fo:block-container>

	    <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">break</fo:inline></fo:block>
	    <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The process is stopped at a breakpoint.</fo:block></fo:block></fo:block-container>

	    <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">exit</fo:inline></fo:block>
	    <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The process has terminated.</fo:block></fo:block></fo:block-container>

	    <fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">no_conn</fo:inline></fo:block>
	    <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There is no connection to the node where
	      the process is located.</fo:block></fo:block></fo:block-container>
	  </fo:block>
	</fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Information</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">More information, if any. If the process is
	  stopped at a breakpoint, the field contains information
	  about the location <fo:inline font-family="monospace">{Module,Line}</fo:inline>. If the process has
	  terminated, the field contains the exit reason.</fo:block></fo:block></fo:block-container>
      </fo:block>
    

    <fo:block id="idp638224" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">File Menu</fo:block>
      

      <fo:block space-after="0.25em" space-before="0.25em">
	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Load Settings...</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Tries to load and restore Debugger settings from a file
	  previously saved using <fo:inline font-weight="bold">Save Settings...</fo:inline> (see below).
	  Any errors are silently ignored.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that settings saved by Erlang/OTP R16B01 or later
	  cannot be read by Erlang/OTP R16B or earlier.</fo:block>
	</fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Save Settings...</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Saves Debugger settings to a file. The settings include
	  the set of interpreted files, breakpoints, and the selected
	  options. The settings can be restored in a later Debugger
	  session using <fo:inline font-weight="bold">Load Settings...</fo:inline> (see above).
	  Any errors are silently ignored.</fo:block>
	</fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Exit</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stops Debugger.</fo:block></fo:block></fo:block-container>
      </fo:block>
    

    <fo:block id="idp631936" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Edit Menu</fo:block>
      
      <fo:block space-after="0.25em" space-before="0.25em">
	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Refresh</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Updates information about debugged processes. Information
	  about all terminated processes are removed from the window. All
	  Attach Process windows for terminated processes are closed.</fo:block></fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Kill All</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Terminates all processes listed in the window using
	  <fo:inline font-family="monospace">exit(Pid,kill)</fo:inline>.</fo:block></fo:block></fo:block-container>
      </fo:block>
    

    <fo:block id="idp627696" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Module Menu</fo:block>
      
      <fo:block space-after="0.25em" space-before="0.25em">
	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Interpret...</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Opens the
	  <fo:inline font-style="italic">Interpret Modules window</fo:inline>,
	  where new modules to be interpreted can be specified.</fo:block></fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Delete All</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stops interpreting all modules. Processes executing in
	  interpreted modules terminate.</fo:block></fo:block></fo:block-container>
      </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For each interpreted module, a corresponding entry is added to
        the <fo:inline font-weight="bold">Module</fo:inline> menu, with the following submenu:</fo:block>
      <fo:block space-after="0.25em" space-before="0.25em">
	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Delete</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stops interpreting the selected module. Processes
	  executing in this module terminate.</fo:block></fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">View</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Opens a
	  <fo:inline font-style="italic">View Module window</fo:inline>, displaying the
	  contents of the selected module.</fo:block></fo:block></fo:block-container>
      </fo:block>
    

    <fo:block id="idp619536" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Process Menu</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following menu items apply to the currently selected
        process, provided it is stopped at a breakpoint (for details, see
	section 
	<fo:inline font-style="italic">Attach Process window</fo:inline>):</fo:block>
      <fo:block space-after="0.25em" space-before="0.25em">
	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Step</fo:inline></fo:block><fo:block-container><fo:block start-indent="2em"/></fo:block-container>
	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Next</fo:inline></fo:block><fo:block-container><fo:block start-indent="2em"/></fo:block-container>
	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Continue</fo:inline></fo:block><fo:block-container><fo:block start-indent="2em"/></fo:block-container>
	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Finish</fo:inline></fo:block><fo:block-container><fo:block start-indent="2em"/></fo:block-container>
      </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following menu items apply to the currently selected
        process:</fo:block>
      <fo:block space-after="0.25em" space-before="0.25em">
	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Attach</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Attaches to the process and open an
	  <fo:inline font-style="italic">Attach Process window</fo:inline>.</fo:block></fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Kill</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Terminates the process using <fo:inline font-family="monospace">exit(Pid,kill)</fo:inline>.</fo:block></fo:block></fo:block-container>
      </fo:block>
    

    <fo:block id="idp609744" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Break Menu</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The items in this menu are used to create and delete breakpoints.
        For details, see section
	<fo:inline font-style="italic">Breakpoints</fo:inline>.</fo:block>

      <fo:block space-after="0.25em" space-before="0.25em">
	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Line Break...</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets a line breakpoint.</fo:block></fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Conditional Break...</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets a conditional breakpoint.</fo:block></fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Function Break...</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets a function breakpoint.</fo:block></fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Enable All</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Enables all breakpoints.</fo:block></fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Disable All</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Disables all breakpoints.</fo:block></fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Delete All</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Removes all breakpoints.</fo:block></fo:block></fo:block-container>
      </fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For each breakpoint, a corresponding entry is added to the
        <fo:inline font-weight="bold">Break</fo:inline> menu, from which it is possible to disable, enable,
	or delete the breakpoint, and to change its trigger action.</fo:block>
    

    <fo:block id="idp599472" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Options Menu</fo:block>
      
      

      <fo:block space-after="0.25em" space-before="0.25em">
	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Trace Window</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the areas to be visible in an
	  <fo:inline font-style="italic">Attach Process window</fo:inline>.
	  Does not affect existing Attach Process windows.</fo:block>
	</fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Auto Attach</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the events a debugged process is to be attached
	  to automatically. Affects existing debugged processes.</fo:block>
	  <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">First Call</fo:inline> - The first time a process calls
	      a function in an interpreted module.</fo:block></fo:block></fo:list-item-body></fo:list-item>
	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">On Exit</fo:inline> - At process termination.</fo:block></fo:block></fo:list-item-body></fo:list-item>
	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">On Break</fo:inline> - When a process reaches a
	      breakpoint.</fo:block></fo:block></fo:list-item-body></fo:list-item>
	  </fo:list-block>
	</fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Stack Trace</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the stack trace option, see section
	  <fo:inline font-style="italic">Stack Trace</fo:inline>. Does not
	    affect existing debugged processes.</fo:block>
	  <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Stack On, Tail</fo:inline> - Saves information about all
	      current calls.</fo:block></fo:block></fo:list-item-body></fo:list-item>
	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Stack On, No Tail</fo:inline> - Saves information about
	      current calls, discarding previous information when a tail
	      recursive call is made.</fo:block></fo:block></fo:list-item-body></fo:list-item>
	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Stack Off</fo:inline> - Does not save any information about
	      current calls.</fo:block></fo:block></fo:list-item-body></fo:list-item>
	  </fo:list-block>
	</fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Strings</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the integer lists to be printed as strings.
	  Does not affect existing debugged processes.</fo:block>
	  <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	    <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Use range of +pc flag</fo:inline> - Uses the printable
	      character range set by the <fo:inline font-family="monospace">erl(1)</fo:inline> flag
	      <fo:inline font-style="italic"><fo:inline font-family="monospace">+pc</fo:inline></fo:inline>.</fo:block>
	    </fo:block></fo:list-item-body></fo:list-item>
	  </fo:list-block>
	</fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Back Trace Size...</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets how many call frames to be fetched when
	  inspecting the call stack from the Attach Process window.
	  Does not affect existing Attach Process windows.</fo:block>
	</fo:block></fo:block-container>
      </fo:block>
    

    <fo:block id="idp582016" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Windows Menu</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Contains a menu item for each open Debugger window. Selecting
        one of the items raises the corresponding window.</fo:block>
    

    <fo:block id="idp535344" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Help Menu</fo:block>
      
      <fo:block space-after="0.25em" space-before="0.25em">
	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Help</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Shows the Debugger documentation. This function requires a
	  web browser.</fo:block></fo:block></fo:block-container>
      </fo:block>
    
  <fo:block id="idp532592" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.5 
      Interpret Modules Window</fo:block>
    
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Interpret Modules window is used for selecting which modules
      to interpret. Initially, the window displays the modules (<fo:inline font-family="monospace">erl</fo:inline>
     files) and subdirectories of the current working directory.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Interpretable modules are modules for which a <fo:inline font-family="monospace">.beam</fo:inline> file,
      compiled with option <fo:inline font-family="monospace">debug_info</fo:inline> set, is located in the same
      directory as the source code, or in an <fo:inline font-family="monospace">ebin</fo:inline> directory next
      to it.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Modules for which these requirements are not fulfilled are
      not interpretable and are therefore displayed within parentheses.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Option <fo:inline font-family="monospace">debug_info</fo:inline> causes <fo:inline font-weight="bold">debug information</fo:inline> or
      <fo:inline font-weight="bold">abstract code</fo:inline> to be added to the <fo:inline font-family="monospace">.beam</fo:inline> file.
      This increases the file size and makes it possible to
      reconstruct the source code. It is therefore recommended not to
      include debug information in code aimed for target systems.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An example of how to compile code with debug information using
      <fo:inline font-family="monospace">erlc</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
% erlc +debug_info module.erl</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An example of how to compile code with debug information from
      the Erlang shell:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
4&gt; c(module, debug_info).</fo:block>

    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="images/interpret.jpg"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        2.5:
         
        Interpret Modules Window</fo:block>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To browse the file hierarchy and interpret the appropriate modules,
      either select a module name and click <fo:inline font-weight="bold">Choose</fo:inline> (or
      press carriage return), or double-click the module name.
      Interpreted modules have the type <fo:inline font-family="monospace">erl src</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To interpret all displayed modules in the chosen directory, click
      <fo:inline font-weight="bold">All</fo:inline>.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To close the window, click <fo:inline font-weight="bold">Done</fo:inline>.</fo:block>

    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When Debugger is started in global mode (which is the default, see
        <fo:inline font-style="italic">debugger:start/0</fo:inline>),
        modules added (or deleted) for interpretation are added (or
        deleted) on all known Erlang nodes.</fo:block>
    </fo:block>
  <fo:block id="idp514752" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.6 
      Attach Process Window</fo:block>
    
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">From an Attach Process window, you can interact with a
      debugged process. One window is opened for each process that has
      been attached to. Notice that when attaching to a process, its
      execution is automatically stopped.</fo:block>

    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="images/attach.jpg"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        2.6:
         
        Attach Process Window</fo:block>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The window is divided into the following five parts:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Code area, displaying the code being executed. The code
        is indented and each line is prefixed with its line number.
        If the process execution is stopped, the current line is
        marked with <fo:inline font-family="monospace">--&gt;</fo:inline>. An existing break point at a line
        is marked with a stop symbol. In the example shown in the
        illustration, the execution stopped at line 6, before
        the execution of <fo:inline font-family="monospace">fac/1</fo:inline>.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Active breakpoints are displayed in red and inactive
          breakpoints in blue.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Button area, with buttons for quick access to frequently
        used functions in the <fo:inline font-weight="bold">Process</fo:inline> menu.</fo:block></fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Evaluator area, where you can evaluate functions
        within the context of the debugged process, if that
        process execution is stopped.</fo:block></fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Bindings area, displaying all variables bindings. If you
        click a variable name, the value is displayed in the Evaluator area.
	Double-click a variable name to open a window where
        the variable value can be edited. Notice however that pid, port,
	reference, or fun
        values cannot be edited unless they can be represented in the
        running system.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>

      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Trace area, which displays a trace output for the
        process.</fo:block>
	<fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">++ (N) &lt;L&gt;</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Function call, where <fo:inline font-family="monospace">N</fo:inline> is the call level and
            <fo:inline font-family="monospace">L</fo:inline> the line number.</fo:block></fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">-- (N)</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Function return value</fo:block>.</fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">==&gt; Pid : Msg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The message <fo:inline font-family="monospace">Msg</fo:inline> is sent to process
            <fo:inline font-family="monospace">Pid</fo:inline>.</fo:block></fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">&lt;== Msg</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The message <fo:inline font-family="monospace">Msg</fo:inline> is received.</fo:block></fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">++ (N) receive</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Waiting in a <fo:inline font-family="monospace">receive</fo:inline>.</fo:block></fo:block></fo:block-container>

          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">++ (N) receive with timeout</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Waiting in a <fo:inline font-family="monospace">receive...after</fo:inline>.</fo:block></fo:block></fo:block-container>
        </fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Trace area also displays Back Trace, a summary of the
          current function calls on the stack.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Using the <fo:inline font-weight="bold">Options</fo:inline> menu, you can set which areas to be
      displayed. By default, all areas except the Trace area are displayed.</fo:block>

    <fo:block id="idp22592" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">File Menu</fo:block>
      

      <fo:block space-after="0.25em" space-before="0.25em">
	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Close</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Closes this window and detach from the process.</fo:block>
	</fo:block></fo:block-container>
      </fo:block>
    

    <fo:block id="idp20128" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Edit Menu</fo:block>
      

      <fo:block space-after="0.25em" space-before="0.25em">
	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Go to line...</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Goes to a specified line number.</fo:block></fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Search...</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Searches for a specified string.</fo:block></fo:block></fo:block-container>
      </fo:block>
    

    <fo:block id="idp16160" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Process Menu</fo:block>
      

      <fo:block space-after="0.25em" space-before="0.25em">
	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Step</fo:inline></fo:block> 
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Executes the current code line, stepping into any
	    (interpreted) function calls.</fo:block></fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Next</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Executes the current code line and stop at the next
	    line.</fo:block></fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Continue</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Continues the execution.</fo:block></fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Finish</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Continues the execution until the current function
	    returns.</fo:block></fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Skip</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Skips the current code line and stop at the next
	    line. If used on the last line in a function body,
	    the function returns <fo:inline font-family="monospace">skipped</fo:inline>.</fo:block></fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Time Out</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Simulates a time-out when executing a
	    <fo:inline font-family="monospace">receive...after</fo:inline> statement.</fo:block></fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Stop</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stops the execution of a running process, that is, make
	    the process stop at a breakpoint. The command takes
	    effect (visibly) the next time the process receives a
	    message.</fo:block></fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Where</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Verifies that the current location of the execution is
	    visible in the code area.</fo:block></fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Kill</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Terminates the process using <fo:inline font-family="monospace">exit(Pid,kill)</fo:inline>.</fo:block>
	</fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Messages</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Inspects the message queue of the process. The queue is
	    displayed in the Evaluator area.</fo:block></fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Back Trace</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Displays the back trace of the process, a summary of
	    the current function calls on the stack, in the Trace area.
	    Requires that the Trace area is visible and that the Stack
	    Trace option is <fo:inline font-weight="bold">Stack On, Tail</fo:inline> or
	    <fo:inline font-weight="bold">Stack On, No Tail</fo:inline>.</fo:block>
	</fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Up</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Inspects the previous function call on the stack,
	    showing the location and variable bindings.</fo:block></fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Down</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Inspects the next function call on the stack, showing
	    the location and variable bindings.</fo:block></fo:block></fo:block-container>
      </fo:block>
    

    <fo:block id="idp255024" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Options Menu</fo:block>
      

      <fo:block space-after="0.25em" space-before="0.25em">
	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Trace Window</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets which areas are to be visible. Does not affect
	    other Attach Process windows.</fo:block></fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Stack Trace</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as in the <fo:inline font-style="italic">Monitor
	    window</fo:inline>, but only affects the debugged
	    process the window is attached to.</fo:block></fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Strings</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as in the <fo:inline font-style="italic">Monitor
	    window</fo:inline>, but only affects the debugged
	    process the window is attached to.</fo:block></fo:block></fo:block-container>

	<fo:block keep-with-next.within-page="always"><fo:inline font-weight="bold">Back Trace Size...</fo:inline></fo:block>
	<fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets how many call frames are to be fetched when
	    inspecting the call stack. Does not affect other Attach
	    Process windows.</fo:block></fo:block></fo:block-container>
      </fo:block>
    

    <fo:block id="idp265648" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Break, Windows, and Help Menus</fo:block>
      

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-weight="bold">Break</fo:inline>, <fo:inline font-weight="bold">Windows</fo:inline>, and <fo:inline font-weight="bold">Help</fo:inline> menus
        are the same as in the
        <fo:inline font-style="italic">Monitor Window</fo:inline>, except
        that the <fo:inline font-weight="bold">Breaks</fo:inline> menu applies only to local
        breakpoints.</fo:block>
    
  <fo:block id="idp565536" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.7 
      View Module Window</fo:block>
    
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The View Module window displays the contents of an interpreted
      module and makes it possible to set breakpoints.</fo:block>

    <fo:block space-after="0.5em" space-before="0.5em"><fo:external-graphic content-width="scale-down-to-fit" inline-progression-dimension.maximum="100%" src="images/view.jpg"/>
      <fo:block font-family="DejaVuSans, sans-serif" font-size="0.8em" font-weight="bold" keep-with-previous.within-page="always" space-after="2.5em" space-before="0em">
        Figure
        2.7:
         
        View Module Window</fo:block>
    </fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The source code is indented and each line is prefixed with its
      line number.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Clicking a line highlights it and selects it to be the target
      of the breakpoint functions available from the <fo:inline font-weight="bold">Break</fo:inline> menu.
      To set a line breakpoint on a line, double-click it.
      To remove the breakpoint, double-click the line with an existing
       breakpoint.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Breakpoints are marked with a stop symbol.</fo:block>

    <fo:block id="idp461712" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">File and Edit Menus</fo:block>
      
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-weight="bold">File</fo:inline> and <fo:inline font-weight="bold">Edit</fo:inline> menus are the same as in the
      <fo:inline font-style="italic">Attach Process Window</fo:inline>.</fo:block>
    

    <fo:block id="idm19744" font-family="DejaVuSans, sans-serif" font-size="1.17em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.6em">Break, Windows, and Help Menus</fo:block>
      

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-weight="bold">Break</fo:inline>, <fo:inline font-weight="bold">Windows</fo:inline>, and <fo:inline font-weight="bold">Help</fo:inline> menus
        are the same as in the
        <fo:inline font-style="italic">Monitor Window</fo:inline>, except
	that the <fo:inline font-weight="bold">Break</fo:inline> menu applies only to local breakpoints.</fo:block>
    
  <fo:block id="idp567808" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.8 
      Performance</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Execution of interpreted code is naturally slower than for
      regularly compiled modules. Using Debugger also increases
      the number of processes in the system, as for each debugged
      process another process (the meta process) is created.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is also worth to keep in mind that programs with timers can
      behave differently when debugged. This is especially true when
      stopping the execution of a process (for example, at a
      breakpoint). Time-outs can then occur in other processes that
      continue execution as normal.</fo:block>
  <fo:block id="idp486672" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.9 
      Code Loading Mechanism</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Code loading works almost as usual, except that interpreted
      modules are also stored in a database and debugged processes
      use only this stored code. Reinterpreting an interpreted
      module results in the new version being stored as well, but
      does not affect existing processes executing an older version
      of the code. This means that the code replacement mechanism of
      Erlang does not work for debugged processes.</fo:block>
  <fo:block id="idp482048" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.10 
      Debugging Remote Nodes</fo:block>
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By using
      <fo:inline font-style="italic">debugger:start/1</fo:inline>,
      you can specify if Debugger is to be started in local or global
      mode:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
debugger:start(local | global)</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If no argument is provided, Debugger starts in global mode.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In local mode, code is interpreted only at the current node.
      In global mode, code is interpreted at all known nodes. Processes
      at other nodes executing interpreted code are automatically
      displayed in the Monitor window and can be attached to like any other
      debugged process.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is possible, but definitely not recommended, to start Debugger
      in global mode on more than one node in a network, as the nodes
      interfere with each other, leading to inconsistent behavior.</fo:block>
  <fo:block id="idp34848" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">2   
      Reference Manual</fo:block><fo:block page-break-before="always" id="idp1086496" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">debugger</fo:marker>debugger</fo:block>Erlang module</fo:block>
  <fo:block/>
  debugger
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Erlang Debugger for debugging and testing of Erlang programs.</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1084192">start()</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1083776">start(File)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1083312">start(Mode)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1082768">start(Mode, File)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Mode = local | global</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">File = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts Debugger.</fo:block>
	
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a filename is specified as argument, Debugger tries to load
	  its settings from this file. For details about settings, see
	  the User's Guide.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">local</fo:inline> is specified as argument, Debugger interprets
	  code only at the current node. If <fo:inline font-family="monospace">global</fo:inline> is specified as
	  argument, Debugger interprets code at all known nodes, this
	  is the default.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1077008">quick(Module, Name, Args)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = Name = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Args = [term()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Debugs a single process. The module <fo:inline font-family="monospace">Module</fo:inline> is interpreted
	  and <fo:inline font-family="monospace">apply(Module,Name,Args)</fo:inline> is called. This opens an
	  Attach Process window. For details, see the User's Guide.</fo:block>
      </fo:block>
  
<fo:block page-break-before="always" id="idp1056064" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">i</fo:marker>i</fo:block>Erlang module</fo:block>
  <fo:block/>
  i
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">i</fo:inline> module provides short forms for some of
      the functions used by the graphical Debugger and some of
      the functions in module
      <fo:inline font-style="italic"><fo:inline font-family="monospace">int</fo:inline></fo:inline>, the Erlang interpreter.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module also provides facilities for displaying status
      information about interpreted processes and break points.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is possible to attach to interpreted processes by giving
      the corresponding process identity only. By default, an attachment
      window is displayed. Processes at other Erlang nodes can be
      attached manually or automatically.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By preference, these functions can be included in module
      <fo:inline font-style="italic"><fo:inline font-family="monospace">shell_default</fo:inline></fo:inline>.
      By default, they are included in that module.</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1050528">im() -&gt; pid()</fo:block></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Starts a new graphical monitor. This is the Monitor window,
	  the main window of Debugger. All the Debugger and
	  interpreter functionality is accessed from the Monitor window.
	  This window displays the status of all processes that 
	  have been or are executing interpreted modules.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1047200">ii(AbsModules) -&gt; ok</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1048416">ii(AbsModule) -&gt; {module, Module} | error</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1048000">ini(AbsModules) -&gt; ok</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1047584">ini(AbsModule) -&gt; {module, Module} | error</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AbsModules = [AbsModule]</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AbsModule = Module | File</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> Module = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> File = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Interprets the specified module(s). <fo:inline font-family="monospace">ii/1</fo:inline> interprets
	  the module(s) only at the current node, see
	  <fo:inline font-style="italic">int:i/1</fo:inline>. <fo:inline font-family="monospace">ini/1</fo:inline>
	  interprets the module(s) at all known nodes, see
	  <fo:inline font-style="italic">int:ni/1</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1041168">iq(AbsModule) -&gt; ok</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1040720">inq(AbsModule) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AbsModule = Module | File</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> Module = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> File = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stops interpreting the specified module. <fo:inline font-family="monospace">iq/1</fo:inline> stops
	  interpreting the module only at the current node. <fo:inline font-family="monospace">inq/1</fo:inline>
	  stops interpreting the module at all known nodes.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1036096">il() -&gt; ok</fo:block></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Makes a printout of all interpreted modules.
	  Modules are printed together with the full path name of the 
	  corresponding source code file.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1034000">ip() -&gt; ok</fo:block></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Prints the current status of all interpreted processes.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1031904">ic() -&gt; ok</fo:block></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Clears information about processes executing interpreted code
	  by removing all information about terminated processes.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1029824">iaa(Flags) -&gt; true</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1029376">iaa(Flags, Function) -&gt; true</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Flags = [init | break | exit]</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Function = {Module,Name,Args}</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> Module = Name = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> Args = [term()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets when and how to attach to a debugged process
          automatically, see
	  <fo:inline font-style="italic">int:auto_attach/2</fo:inline>.
	  <fo:inline font-family="monospace">Function</fo:inline> defaults to the standard function used by
	  Debugger.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1024144">ist(Flag) -&gt; true</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Flag = all | no_tail | false</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets how to save call frames in the stack, see
	  <fo:inline font-style="italic">int:stack_trace/1</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1020624">ia(Pid) -&gt; ok | no_proc</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Pid = pid()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Attaches to the debugged process <fo:inline font-family="monospace">Pid</fo:inline>. An
	  Attach Process window is opened for the process.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1017680">ia(X,Y,Z) -&gt; ok | no_proc</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">X = Y = Z = int()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-family="monospace">ia(Pid)</fo:inline>, where <fo:inline font-family="monospace">Pid</fo:inline> is the result of
	  calling the shell function <fo:inline font-family="monospace">pid(X,Y,Z)</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1013568">ia(Pid, Function) -&gt; ok | no_proc</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Pid = pid()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Function = {Module,Name}</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> Module = Name = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Attaches to the debugged process <fo:inline font-family="monospace">Pid</fo:inline>. The interpreter
	  calls <fo:inline font-family="monospace">spawn(Module, Name, [Pid])</fo:inline> (and ignores
	  the result).</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp907936">ia(X,Y,Z, Function) -&gt; ok | no_proc</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">X = Y = Z = int()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Function = {Module,Name}</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> Module = Name = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as <fo:inline font-family="monospace">ia(Pid, Function)</fo:inline>, where <fo:inline font-family="monospace">Pid</fo:inline> is
	  the result of calling the shell function <fo:inline font-family="monospace">pid(X,Y,Z)</fo:inline>.
	  An attached process is expected to call the unofficial
	  function <fo:inline font-family="monospace">int:attached(Pid)</fo:inline> and to be able to handle
	  messages from the interpreter. For an example, see
	  <fo:inline font-family="monospace">dbg_wx_trace.erl</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp901792">ib(Module, Line) -&gt; ok | {error, break_exists}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Line = int()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a breakpoint at <fo:inline font-family="monospace">Line</fo:inline> in <fo:inline font-family="monospace">Module</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp897008">ib(Module, Name, Arity) -&gt; ok | {error, function_not_found}
      </fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = Name = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Arity = int()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates breakpoints at the first line of every clause of 
	  function <fo:inline font-family="monospace">Module:Name/Arity</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp893488">ir() -&gt; ok</fo:block></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Deletes all breakpoints.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp891568">ir(Module) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Deletes all breakpoints in <fo:inline font-family="monospace">Module</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp887984">ir(Module, Line) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Line = int()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Deletes the breakpoint at <fo:inline font-family="monospace">Line</fo:inline> in <fo:inline font-family="monospace">Module</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp846496">ir(Module, Name, Arity) -&gt; ok | {error, function_not_found}
      </fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = Name = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Arity = int()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Deletes the breakpoints at the first line of every clause of 
	  function <fo:inline font-family="monospace">Module:Name/Arity</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp841216">ibd(Module, Line) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Line = int()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Makes the breakpoint at <fo:inline font-family="monospace">Line</fo:inline> in <fo:inline font-family="monospace">Module</fo:inline> inactive.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp837616">ibe(Module, Line) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Line = int()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Makes the breakpoint at <fo:inline font-family="monospace">Line</fo:inline> in <fo:inline font-family="monospace">Module</fo:inline> active.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp833264">iba(Module, Line, Action) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Line = int()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Action = enable | disable | delete</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the trigger action of the breakpoint at <fo:inline font-family="monospace">Line</fo:inline> in
	  <fo:inline font-family="monospace">Module</fo:inline> to <fo:inline font-family="monospace">Action</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp405248">ibc(Module, Line, Function) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Line = int()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Function = {Module,Name}</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> Name = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the conditional test of the breakpoint at <fo:inline font-family="monospace">Line</fo:inline> in
	  <fo:inline font-family="monospace">Module</fo:inline> to <fo:inline font-family="monospace">Function</fo:inline>.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The conditional test is performed by calling
	  <fo:inline font-family="monospace">Module:Name(Bindings)</fo:inline>, where <fo:inline font-family="monospace">Bindings</fo:inline> is
	  the current variable bindings. The function must return
	  <fo:inline font-family="monospace">true</fo:inline> (break) or <fo:inline font-family="monospace">false</fo:inline> (do not break).
	  To retrieve the value of a variable <fo:inline font-family="monospace">Var</fo:inline>, use
	  <fo:inline font-style="italic">int:get_binding(Var, Bindings)</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp398288">ipb() -&gt; ok</fo:block></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Prints all existing breakpoints.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp396176">ipb(Module) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Prints all existing breakpoints in <fo:inline font-family="monospace">Module</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp947088">iv() -&gt; atom()</fo:block></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the current version number of the interpreter.
	  Same as the version number of the Debugger application.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp943216">help() -&gt; ok</fo:block></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Prints help text.</fo:block>
      </fo:block>
  

  <fo:block id="idp942544" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">See Also</fo:block>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic"><fo:inline font-family="monospace">int(3)</fo:inline></fo:inline></fo:block>
  
<fo:block page-break-before="always" id="idp857264" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">int</fo:marker>int</fo:block>Erlang module</fo:block>
  <fo:block/>
  int
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Erlang interpreter provides mechanisms for breakpoints and
      stepwise execution of code. It is primarily intended to be used by
      Debugger, see the User's Guide and
      <fo:inline font-style="italic"><fo:inline font-family="monospace">debugger(3)</fo:inline></fo:inline>.</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following can be done from the shell:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Specify the modules to be interpreted.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Specify breakpoints.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Monitor the current status of all processes executing code
	in interpreted modules, also processes at other Erlang nodes.
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By <fo:inline font-weight="bold">attaching to</fo:inline> a process executing interpreted code, it
      is possible to examine variable bindings and order stepwise
      execution. This is done by sending and receiving information
      to/from the process through a third process, called the meta
      process. You can implement your own attached process. See
      <fo:inline font-family="monospace">int.erl</fo:inline> for available functions and <fo:inline font-family="monospace">dbg_wx_trace.erl</fo:inline>
      for possible messages.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The interpreter depends on the Kernel, STDLIB, and
      GS applications. This means that modules belonging to any of
      these applications are not allowed to be interpreted, as it could lead
      to a deadlock or emulator crash. This also applies to modules
      belonging to the Debugger application.</fo:block>
  

  <fo:block id="idp916608" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Breakpoints</fo:block>
    
    

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Breakpoints are specified on a line basis. When a process
      executing code in an interpreted module reaches a breakpoint, it
      stops. This means that a breakpoint must be set at an
      executable line, that is, a code line containing an executable
      expression.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A breakpoint has the following:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A status, which is <fo:inline font-weight="bold">active</fo:inline> or <fo:inline font-weight="bold">inactive</fo:inline>. An
        inactive breakpoint is ignored.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>A trigger action. When a breakpoint is reached, the trigger
        action specifies if the breakpoint is to continue as active
        (<fo:inline font-weight="bold">enable</fo:inline>), or to become inactive (<fo:inline font-weight="bold">disable</fo:inline>), or
        to be removed (<fo:inline font-weight="bold">delete</fo:inline>).</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Optionally an associated condition. A condition is a tuple
        <fo:inline font-family="monospace">{Module,Name}</fo:inline>. When the breakpoint is reached,
        <fo:inline font-family="monospace">Module:Name(Bindings)</fo:inline> is called. If it evaluates to
        <fo:inline font-family="monospace">true</fo:inline>, execution stops. If it evaluates to <fo:inline font-family="monospace">false</fo:inline>,
        the breakpoint is ignored. <fo:inline font-family="monospace">Bindings</fo:inline> contains the current
        variable bindings. To retrieve the value for a specified variable,
        use <fo:inline font-family="monospace">get_binding</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">By default, a breakpoint is active, has trigger action
      <fo:inline font-family="monospace">enable</fo:inline>, and has no associated condition. For details
      about breakpoints, see the User's Guide.</fo:block>
  

  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp931008">i(AbsModule) -&gt; {module,Module} | error</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp930304">i(AbsModules) -&gt; ok</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp930720">ni(AbsModule) -&gt; {module,Module} | error</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp929472">ni(AbsModules) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AbsModules = [AbsModule]</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AbsModule = Module | File | [Module | File]</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> Module = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> File = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Interprets the specified module(s). <fo:inline font-family="monospace">i/1</fo:inline> interprets
	  the module only at the current node. <fo:inline font-family="monospace">ni/1</fo:inline> interprets
	  the module at all known nodes.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A module can be specified by its module name (atom) or
	  filename.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If specified by its module name, the object code
	  <fo:inline font-family="monospace">Module.beam</fo:inline> is searched for in the current path.
	  The source code <fo:inline font-family="monospace">Module.erl</fo:inline> is searched for first in
	  the same directory as the object code, then in an <fo:inline font-family="monospace">src</fo:inline>
	  directory next to it.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If specified by its filename, the filename can include a path
	  and the <fo:inline font-family="monospace">.erl</fo:inline> extension can  be omitted. The object code
	  <fo:inline font-family="monospace">Module.beam</fo:inline> is searched for first in the same directory
	  as the source code, then in an <fo:inline font-family="monospace">ebin</fo:inline> directory next to
	  it, and then in the current path.</fo:block>

	<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The interpreter requires both the source code and the object
	    code. The object code <fo:inline font-weight="bold">must</fo:inline> include debug
	    information, that is, only modules compiled with option
	    <fo:inline font-family="monospace">debug_info</fo:inline> set can be interpreted.</fo:block>
	</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The functions returns <fo:inline font-family="monospace">{module,Module}</fo:inline> if the module
	  was interpreted, otherwise <fo:inline font-family="monospace">error</fo:inline> is returned.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The argument can also be a list of modules or filenames, in
	  which case the function tries to interpret each module as
	  specified earlier. The function then always returns <fo:inline font-family="monospace">ok</fo:inline>,
	  but prints some information to <fo:inline font-family="monospace">stdout</fo:inline> if a module
	  cannot be interpreted.</fo:block>
      </fo:block>
	
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp807296">n(AbsModule) -&gt; ok</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp94160">nn(AbsModule) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AbsModule = Module | File | [Module | File]</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> Module = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> File = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stops interpreting the specified module. <fo:inline font-family="monospace">n/1</fo:inline> stops
	  interpreting the module only at the current node. <fo:inline font-family="monospace">nn/1</fo:inline>
	  stops interpreting the module at all known nodes.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As for <fo:inline font-family="monospace">i/1</fo:inline> and <fo:inline font-family="monospace">ni/1</fo:inline>, a module can be specified by
	  its module name or filename.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp270992">interpreted() -&gt; [Module]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list with all interpreted modules.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp949440">file(Module) -&gt; File | {error,not_loaded}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">File = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the source code filename <fo:inline font-family="monospace">File</fo:inline> for an
	  interpreted module <fo:inline font-family="monospace">Module</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp829184">interpretable(AbsModule) -&gt; true | {error,Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">AbsModule = Module | File</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> Module = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> File = string()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = no_src | no_beam | no_debug_info | badarg
	  | {app,App}</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> App = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Checks if a module can be interpreted. The module can be
	  specified by its module name <fo:inline font-family="monospace">Module</fo:inline> or its source
	  filename <fo:inline font-family="monospace">File</fo:inline>. If specified by a module name, the module
	  is searched for in the code path.</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function returns <fo:inline font-family="monospace">true</fo:inline> if all of the following
          apply:</fo:block>
	<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Both source code and object code for the module is
            found.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The module has been compiled with option <fo:inline font-family="monospace">debug_info</fo:inline>
            set.</fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>The module does not belong to any of the applications
            Kernel, STDLIB, GS, or Debugger.</fo:block></fo:list-item-body></fo:list-item>
	</fo:list-block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function returns <fo:inline font-family="monospace">{error,Reason}</fo:inline> if the module cannot
	  be interpreted. <fo:inline font-family="monospace">Reason</fo:inline> can have the following values:</fo:block>
	<fo:block space-after="0.25em" space-before="0.25em">
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">no_src</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">No source code is found.
	    It is assumed that the source code and object code are located
	    either in the same directory, or in <fo:inline font-family="monospace">src</fo:inline> and <fo:inline font-family="monospace">ebin</fo:inline>
	    directories next to each other.</fo:block></fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">no_beam</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">No object code is found.
	    It is assumed that the source code and object code are located
	    either in the same directory, or in <fo:inline font-family="monospace">src</fo:inline> and <fo:inline font-family="monospace">ebin</fo:inline>
	    directories next to each other.</fo:block></fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">no_debug_info</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The module has not been compiled with option
	    <fo:inline font-family="monospace">debug_info</fo:inline> set.</fo:block></fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">badarg</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">AbsModule</fo:inline> is not found. This could be because
	    the specified file does not exist, or because
	    <fo:inline font-family="monospace">code:which/1</fo:inline> does not return a BEAM filename,
	    which is the case not only for non-existing modules but also
	    for modules that are preloaded or cover-compiled.</fo:block></fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{app,App}</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">App</fo:inline> is <fo:inline font-family="monospace">kernel</fo:inline>, <fo:inline font-family="monospace">stdlib</fo:inline>, <fo:inline font-family="monospace">gs</fo:inline>,
	  or <fo:inline font-family="monospace">debugger</fo:inline> if <fo:inline font-family="monospace">AbsModule</fo:inline> belongs to one of these
	  applications.</fo:block></fo:block></fo:block-container>
	</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Notice that the function can return <fo:inline font-family="monospace">true</fo:inline> for a module
	  that in fact is not interpretable in the case where
	  the module is marked as sticky or resides in a directory
	  marked as sticky. The reason is that this is not discovered
	  until the interpreter tries to load the module.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1009440">auto_attach() -&gt; false | {Flags,Function}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1009856">auto_attach(false)</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1010304">auto_attach(Flags, Function)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Flags = [init | break | exit]</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Function = {Module,Name,Args}</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> Module = Name = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> Args = [term()]</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gets and sets when and how to attach automatically to a
	  process executing code in interpreted modules. <fo:inline font-family="monospace">false</fo:inline>
	  means never attach automatically, this is the default.
	  Otherwise automatic attach is defined by a list of flags and
	  a function. The following flags can be specified:</fo:block>
	<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">init</fo:inline> - Attach when a process for the first
	    time calls an interpreted function.</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">break</fo:inline> - Attach whenever a process reaches a
	    breakpoint.</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">exit</fo:inline> - Attach when a process terminates.</fo:block></fo:list-item-body></fo:list-item>
	</fo:list-block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When the specified event occurs, the function <fo:inline font-family="monospace">Function</fo:inline>
	  is called as:</fo:block>
	<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
spawn(Module, Name, [Pid | Args])</fo:block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Pid</fo:inline> is the pid of the process executing interpreted
	  code.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1066528">stack_trace() -&gt; Flag</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1066976">stack_trace(Flag)</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Flag = all | no_tail | false</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gets and sets how to save call frames in the stack. Saving
	  call frames makes it possible to inspect the call chain of a
	  process, and is also used to emulate the stack trace if an
	  error (an exception of class error) occurs. The following
	  flags can be specified:</fo:block>
	<fo:block space-after="0.25em" space-before="0.25em">
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">all</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Save information about all current calls,
	    that is, function calls that have not yet returned a value.</fo:block>
	  </fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">no_tail</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Save information about current calls,
	    but discard previous information when a tail recursive call
	    is made. This option consumes less memory and can be
	    necessary to use for processes with long lifetimes and many
	    tail recursive calls. This is the default.</fo:block></fo:block></fo:block-container>

	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">false</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Save no information about currentcalls.</fo:block></fo:block></fo:block-container>
	</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp786288">break(Module, Line) -&gt; ok | {error,break_exists}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Line = int()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a breakpoint at <fo:inline font-family="monospace">Line</fo:inline> in <fo:inline font-family="monospace">Module</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp790752">delete_break(Module, Line) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Line = int()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Deletes the breakpoint at <fo:inline font-family="monospace">Line</fo:inline> in <fo:inline font-family="monospace">Module</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idm16736">break_in(Module, Name, Arity) -&gt; ok
	| {error,function_not_found}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = Name = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Arity = int()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Creates a breakpoint at the first line of every clause of 
	  function <fo:inline font-family="monospace">Module:Name/Arity</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idm12800">del_break_in(Module, Name, Arity) -&gt; ok
	| {error,function_not_found}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = Name = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Arity = int()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Deletes the breakpoints at the first line of every clause of 
	  function <fo:inline font-family="monospace">Module:Name/Arity</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idm8864">no_break() -&gt; ok</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idm8416">no_break(Module) -&gt; ok</fo:block></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Deletes all breakpoints, or all breakpoints in <fo:inline font-family="monospace">Module</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idm5760">disable_break(Module, Line) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Line = int()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Makes the breakpoint at <fo:inline font-family="monospace">Line</fo:inline> in <fo:inline font-family="monospace">Module</fo:inline> inactive.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1241168">enable_break(Module, Line) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Line = int()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Makes the breakpoint at <fo:inline font-family="monospace">Line</fo:inline> in <fo:inline font-family="monospace">Module</fo:inline> active.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1245696">action_at_break(Module, Line, Action) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Line = int()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Action = enable | disable | delete</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the trigger action of the breakpoint at <fo:inline font-family="monospace">Line</fo:inline> in
	  <fo:inline font-family="monospace">Module</fo:inline> to <fo:inline font-family="monospace">Action</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1251040">test_at_break(Module, Line, Function) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Line = int()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Function = {Module,Name}</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> Name = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets the conditional test of the breakpoint at <fo:inline font-family="monospace">Line</fo:inline> in
	  <fo:inline font-family="monospace">Module</fo:inline> to <fo:inline font-family="monospace">Function</fo:inline>. The function must
	  fulfill the requirements specified in section
          <fo:inline font-style="italic">Breakpoints</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1257360">get_binding(Var, Bindings) -&gt; {value,Value} | unbound</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Var = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Bindings = term()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Value = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Retrieves the binding of <fo:inline font-family="monospace">Var</fo:inline>. This function is
	  intended to be used by the conditional function of a
	  breakpoint.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1261808">all_breaks() -&gt; [Break]</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1262256">all_breaks(Module) -&gt; [Break]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Break = {Point,Options}</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> Point = {Module,Line}</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">  Module = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">  Line = int()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> Options = [Status,Trigger,null,Cond|]</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">  Status = active | inactive</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">  Trigger = enable | disable | delete</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">  Cond = null | Function</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">   Function = {Module,Name}</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">    Name = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gets all breakpoints, or all breakpoints in <fo:inline font-family="monospace">Module</fo:inline>.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1269936">snapshot() -&gt; [Snapshot]</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Snapshot = {Pid, Function, Status, Info}</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> Pid = pid()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> Function = {Module,Name,Args}</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">  Module = Name = atom()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">  Args = [term()]</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> Status = idle | running | waiting | break | exit
	  | no_conn</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace"> Info = {} | {Module,Line} | ExitReason</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">  Line = int()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">  ExitReason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gets information about all processes executing interpreted code.
	</fo:block>
	<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Pid</fo:inline> - Process identifier.</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Function</fo:inline> - First interpreted function called by
	    the process.</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Status</fo:inline> - Current status of the process.</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">Info</fo:inline> - More information.</fo:block></fo:list-item-body></fo:list-item>
	</fo:list-block>

	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Status</fo:inline> is one of the following:</fo:block>
	<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">idle</fo:inline> - The process is no longer executing
	    interpreted code. <fo:inline font-family="monospace">Info={}</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">running</fo:inline> - The process is running. <fo:inline font-family="monospace">Info={}</fo:inline>.
	  </fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">waiting</fo:inline> - The process is waiting at a
	    <fo:inline font-family="monospace">receive</fo:inline>. <fo:inline font-family="monospace">Info={}</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">break</fo:inline> - Process execution is stopped,
	    normally at a breakpoint. <fo:inline font-family="monospace">Info={Module,Line}</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">exit</fo:inline> - The process is terminated.
	    <fo:inline font-family="monospace">Info=ExitReason</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
	  <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">no_conn</fo:inline> - The connection is down to the node
	    where the process is running. <fo:inline font-family="monospace">Info={}</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
	</fo:list-block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1288944">clear() -&gt; ok</fo:block></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Clears information about processes executing interpreted code
	  by removing all information about terminated processes.</fo:block>
      </fo:block>

    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1291264">continue(Pid) -&gt; ok | {error,not_interpreted}</fo:block></fo:block><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1291680">continue(X,Y,Z) -&gt; ok | {error,not_interpreted}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Pid = pid()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">X = Y = Z = int()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Resumes process execution for <fo:inline font-family="monospace">Pid</fo:inline> or
	  <fo:inline font-family="monospace">c:pid(X,Y,Z)</fo:inline>.</fo:block>
      </fo:block>
  
</fo:flow>
  </fo:page-sequence>
</fo:root>
