<?xml version="1.0"?>
<fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format">
  <fo:layout-master-set>
    <fo:simple-page-master master-name="cover" margin="25mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin="0mm"/>
    </fo:simple-page-master>
    <fo:simple-page-master master-name="left-page" margin-top="25mm" margin-bottom="15mm" margin-left="20mm" margin-right="25mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin-top="15mm" margin-bottom="20mm"/>
      <fo:region-before region-name="left-header" extent="10mm"/>
      <fo:region-after region-name="left-footer" extent="10mm"/>
    </fo:simple-page-master>
    <fo:simple-page-master master-name="right-page" margin-top="25mm" margin-bottom="15mm" margin-left="25mm" margin-right="20mm" page-height="297mm" page-width="210mm">
      <fo:region-body margin-top="15mm" margin-bottom="20mm"/>
      <fo:region-before region-name="right-header" extent="10mm"/>
      <fo:region-after region-name="right-footer" extent="10mm"/>
    </fo:simple-page-master>
    <fo:page-sequence-master master-name="document">
      <fo:repeatable-page-master-alternatives>
        <fo:conditional-page-master-reference master-reference="left-page" odd-or-even="even"/>
        <fo:conditional-page-master-reference master-reference="right-page" odd-or-even="odd"/>
      </fo:repeatable-page-master-alternatives>
    </fo:page-sequence-master>
  </fo:layout-master-set>
  <fo:bookmark-tree>
    <fo:bookmark internal-destination="cover-page" starting-state="show">
      <fo:bookmark-title>Runtime_Tools</fo:bookmark-title>
      <fo:bookmark internal-destination="idp595856" starting-state="hide">
        <fo:bookmark-title>Runtime Tools User's Guide</fo:bookmark-title>
        <fo:bookmark internal-destination="idp572944" starting-state="hide">
          <fo:bookmark-title>LTTng and Erlang/OTP</fo:bookmark-title>
          <fo:bookmark internal-destination="idp569424" starting-state="hide">
            <fo:bookmark-title>Introduction</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp567040" starting-state="hide">
            <fo:bookmark-title>Building Erlang/OTP with LTTng support</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp472640" starting-state="hide">
            <fo:bookmark-title>Dyntrace Tracepoints</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp509872" starting-state="hide">
            <fo:bookmark-title>BEAM Tracepoints</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp733200" starting-state="hide">
            <fo:bookmark-title>Example of process tracing</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp751952" starting-state="hide">
          <fo:bookmark-title>DTrace and Erlang/OTP</fo:bookmark-title>
          <fo:bookmark internal-destination="idp756992" starting-state="hide">
            <fo:bookmark-title>History</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp760896" starting-state="hide">
            <fo:bookmark-title>Goals</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp765248" starting-state="hide">
            <fo:bookmark-title>Supported platforms</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp771648" starting-state="hide">
            <fo:bookmark-title>Status</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp773824" starting-state="hide">
            <fo:bookmark-title>Implementation summary</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1085584" starting-state="hide">
            <fo:bookmark-title>Example DTrace probe specification</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1094256" starting-state="hide">
            <fo:bookmark-title>Guide to efile_drv.c probe arguments</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp1104432" starting-state="hide">
          <fo:bookmark-title>SystemTap and Erlang/OTP</fo:bookmark-title>
          <fo:bookmark internal-destination="idp1109488" starting-state="hide">
            <fo:bookmark-title>Introduction</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1112288" starting-state="hide">
            <fo:bookmark-title>Requisites</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1118560" starting-state="hide">
            <fo:bookmark-title>Building Erlang</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1121280" starting-state="hide">
            <fo:bookmark-title>Testing</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1127392" starting-state="hide">
            <fo:bookmark-title>Running SystemTap scripts</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
      </fo:bookmark>
      <fo:bookmark internal-destination="idp495728" starting-state="hide">
        <fo:bookmark-title>Reference Manual</fo:bookmark-title>
        <fo:bookmark internal-destination="idp930560" starting-state="hide">
          <fo:bookmark-title>runtime_tools</fo:bookmark-title>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp1001792" starting-state="hide">
          <fo:bookmark-title>dbg</fo:bookmark-title>
          <fo:bookmark internal-destination="idp830432" starting-state="hide">
            <fo:bookmark-title>fun2ms/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp923312" starting-state="hide">
            <fo:bookmark-title>h/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp836256" starting-state="hide">
            <fo:bookmark-title>h/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp911088" starting-state="hide">
            <fo:bookmark-title>p/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp249888" starting-state="hide">
            <fo:bookmark-title>p/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1333760" starting-state="hide">
            <fo:bookmark-title>c/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1337344" starting-state="hide">
            <fo:bookmark-title>c/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1341392" starting-state="hide">
            <fo:bookmark-title>i/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1343648" starting-state="hide">
            <fo:bookmark-title>tp/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1345952" starting-state="hide">
            <fo:bookmark-title>tp/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1348272" starting-state="hide">
            <fo:bookmark-title>tp/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1350592" starting-state="hide">
            <fo:bookmark-title>tp/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1180400" starting-state="hide">
            <fo:bookmark-title>tpl/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1182720" starting-state="hide">
            <fo:bookmark-title>tpl/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1185056" starting-state="hide">
            <fo:bookmark-title>tpl/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1187392" starting-state="hide">
            <fo:bookmark-title>tpl/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1040128" starting-state="hide">
            <fo:bookmark-title>tpe/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1061488" starting-state="hide">
            <fo:bookmark-title>ctp/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1063776" starting-state="hide">
            <fo:bookmark-title>ctp/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1066064" starting-state="hide">
            <fo:bookmark-title>ctp/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1068352" starting-state="hide">
            <fo:bookmark-title>ctp/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1070656" starting-state="hide">
            <fo:bookmark-title>ctp/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1201120" starting-state="hide">
            <fo:bookmark-title>ctpl/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1203408" starting-state="hide">
            <fo:bookmark-title>ctpl/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1205696" starting-state="hide">
            <fo:bookmark-title>ctpl/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1207984" starting-state="hide">
            <fo:bookmark-title>ctpl/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1210288" starting-state="hide">
            <fo:bookmark-title>ctpl/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1215200" starting-state="hide">
            <fo:bookmark-title>ctpg/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1217488" starting-state="hide">
            <fo:bookmark-title>ctpg/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1219776" starting-state="hide">
            <fo:bookmark-title>ctpg/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1222064" starting-state="hide">
            <fo:bookmark-title>ctpg/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1224368" starting-state="hide">
            <fo:bookmark-title>ctpg/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1229280" starting-state="hide">
            <fo:bookmark-title>ctpe/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1235600" starting-state="hide">
            <fo:bookmark-title>ltp/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1246912" starting-state="hide">
            <fo:bookmark-title>dtp/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1251920" starting-state="hide">
            <fo:bookmark-title>dtp/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1256000" starting-state="hide">
            <fo:bookmark-title>wtp/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1264112" starting-state="hide">
            <fo:bookmark-title>rtp/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1271696" starting-state="hide">
            <fo:bookmark-title>n/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1287296" starting-state="hide">
            <fo:bookmark-title>cn/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1293136" starting-state="hide">
            <fo:bookmark-title>ln/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1295440" starting-state="hide">
            <fo:bookmark-title>tracer/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1301536" starting-state="hide">
            <fo:bookmark-title>tracer/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1837280" starting-state="hide">
            <fo:bookmark-title>tracer/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1846912" starting-state="hide">
            <fo:bookmark-title>trace_port/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1876080" starting-state="hide">
            <fo:bookmark-title>flush_trace_port/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1878800" starting-state="hide">
            <fo:bookmark-title>flush_trace_port/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1881584" starting-state="hide">
            <fo:bookmark-title>trace_port_control/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1884336" starting-state="hide">
            <fo:bookmark-title>trace_port_control/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1896096" starting-state="hide">
            <fo:bookmark-title>trace_client/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1921536" starting-state="hide">
            <fo:bookmark-title>trace_client/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1933824" starting-state="hide">
            <fo:bookmark-title>stop_trace_client/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1939248" starting-state="hide">
            <fo:bookmark-title>get_tracer/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1941952" starting-state="hide">
            <fo:bookmark-title>get_tracer/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1945712" starting-state="hide">
            <fo:bookmark-title>stop/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp1949552" starting-state="hide">
            <fo:bookmark-title>stop_clear/0</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp2007904" starting-state="hide">
          <fo:bookmark-title>dyntrace</fo:bookmark-title>
          <fo:bookmark internal-destination="idp2021888" starting-state="hide">
            <fo:bookmark-title>available/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2026016" starting-state="hide">
            <fo:bookmark-title>p/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2028480" starting-state="hide">
            <fo:bookmark-title>p/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2030992" starting-state="hide">
            <fo:bookmark-title>p/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2035392" starting-state="hide">
            <fo:bookmark-title>p/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2038736" starting-state="hide">
            <fo:bookmark-title>p/4</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2042112" starting-state="hide">
            <fo:bookmark-title>p/5</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2046064" starting-state="hide">
            <fo:bookmark-title>p/6</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2050032" starting-state="hide">
            <fo:bookmark-title>p/7</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2053984" starting-state="hide">
            <fo:bookmark-title>p/8</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2056560" starting-state="hide">
            <fo:bookmark-title>get_tag/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2059232" starting-state="hide">
            <fo:bookmark-title>get_tag/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2063600" starting-state="hide">
            <fo:bookmark-title>put_tag/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2068976" starting-state="hide">
            <fo:bookmark-title>spread_tag/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2079056" starting-state="hide">
            <fo:bookmark-title>restore_tag/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp2092144" starting-state="hide">
          <fo:bookmark-title>erts_alloc_config</fo:bookmark-title>
          <fo:bookmark internal-destination="idp2122960" starting-state="hide">
            <fo:bookmark-title>save_scenario/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2129728" starting-state="hide">
            <fo:bookmark-title>make_config/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2133648" starting-state="hide">
            <fo:bookmark-title>make_config/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2143728" starting-state="hide">
            <fo:bookmark-title>stop/0</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp2157712" starting-state="hide">
          <fo:bookmark-title>msacc</fo:bookmark-title>
          <fo:bookmark internal-destination="idp2193760" starting-state="hide">
            <fo:bookmark-title>available/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2196480" starting-state="hide">
            <fo:bookmark-title>start/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2199200" starting-state="hide">
            <fo:bookmark-title>start/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2201920" starting-state="hide">
            <fo:bookmark-title>stop/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2204640" starting-state="hide">
            <fo:bookmark-title>reset/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2207360" starting-state="hide">
            <fo:bookmark-title>print/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2211264" starting-state="hide">
            <fo:bookmark-title>print/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2215152" starting-state="hide">
            <fo:bookmark-title>print/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2223632" starting-state="hide">
            <fo:bookmark-title>print/3</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2227248" starting-state="hide">
            <fo:bookmark-title>stats/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2230944" starting-state="hide">
            <fo:bookmark-title>stats/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2236848" starting-state="hide">
            <fo:bookmark-title>stats/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2239696" starting-state="hide">
            <fo:bookmark-title>stats/2</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2242544" starting-state="hide">
            <fo:bookmark-title>to_file/1</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2245808" starting-state="hide">
            <fo:bookmark-title>from_file/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
        <fo:bookmark internal-destination="idp2256176" starting-state="hide">
          <fo:bookmark-title>system_information</fo:bookmark-title>
          <fo:bookmark internal-destination="idp2258384" starting-state="hide">
            <fo:bookmark-title>sanity_check/0</fo:bookmark-title>
          </fo:bookmark>
          <fo:bookmark internal-destination="idp2276480" starting-state="hide">
            <fo:bookmark-title>to_file/1</fo:bookmark-title>
          </fo:bookmark>
        </fo:bookmark>
      </fo:bookmark>
    </fo:bookmark>
  </fo:bookmark-tree>
  <fo:page-sequence font-family="sans-serif" force-page-count="even" master-reference="cover" font-size="10pt">
    <fo:flow flow-name="xsl-region-body">
      <fo:block space-before="130mm" space-before.conditionality="retain" text-align="end">
        <fo:external-graphic src="/root/download/otp_src_20.0/bootstrap/lib/erl_docgen/priv/images/erlang-logo.gif"/>
      </fo:block>
      <fo:block id="cover-page" border-before-style="solid" border-before-width="10pt" border-color="#960003" font-size="2.3em" padding-before="0.5em" text-align="end">Runtime_Tools</fo:block>
      <fo:block font-size="0.9em" text-align="end">Copyright © 1999-2017 Ericsson AB. All Rights Reserved.</fo:block>
      <fo:block font-size="0.9em" text-align="end">Runtime_Tools 1.12</fo:block>
      <fo:block font-size="0.9em" text-align="end">July 12, 2017</fo:block>
      <fo:block padding-before="2.5em" font-size="1.33em" font-weight="bold" color="#C00" text-align="end"/>
      <fo:block break-before="page" border-before-style="solid" border-before-width="1pt" border-color="#960003" font-weight="bold" padding-before="0.5em" space-before="200mm" space-before.conditionality="retain">Copyright © 1999-2017 Ericsson AB. All Rights Reserved.</fo:block>
      <fo:block font-size="0.9em">
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
 
          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
    
    Ericsson AB. All Rights Reserved..
        </fo:block>
      <fo:block font-size="0.9em" font-weight="bold" space-before="2em">July 12, 2017</fo:block>
    </fo:flow>
  </fo:page-sequence>
  <fo:page-sequence font-family="serif" master-reference="document" initial-page-number="1" font-size="10pt">
    <fo:static-content flow-name="left-header">
      <fo:block text-align="start" border-after-style="solid" border-after-width="2pt" border-color="#960003" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">
        <fo:retrieve-marker retrieve-boundary="page-sequence" retrieve-class-name="chapter-title" retrieve-position="first-including-carryover"/>
      </fo:block>
    </fo:static-content>
    <fo:static-content flow-name="right-header">
      <fo:block text-align="end" border-after-style="solid" border-after-width="2pt" border-color="#960003" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">
        <fo:retrieve-marker retrieve-boundary="page-sequence" retrieve-class-name="chapter-title" retrieve-position="first-including-carryover"/>
      </fo:block>
    </fo:static-content>
    <fo:static-content flow-name="left-footer">
      <fo:block text-align="start" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold"><fo:page-number/> | Ericsson AB. All Rights Reserved.:
            Runtime_Tools</fo:block>
    </fo:static-content>
    <fo:static-content flow-name="right-footer">
      <fo:block text-align="end" font-family="DejaVuSans, sans-serif" font-size="0.9em" font-weight="bold">Ericsson AB. All Rights Reserved.:
            Runtime_Tools | <fo:page-number/></fo:block>
    </fo:static-content>
    <fo:flow flow-name="xsl-region-body"><fo:block/><fo:block id="idp595856" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">1   
      Runtime Tools User's Guide</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Runtime Tools</fo:inline></fo:block>
  <fo:block id="idp572944" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.1  LTTng and Erlang/OTP</fo:marker>1.1  LTTng and Erlang/OTP</fo:block><fo:block id="idp569424" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.1 
      Introduction</fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Linux Trace Toolkit: next generation is an open source system software package
            for correlated tracing of the Linux kernel, user applications and libraries. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For more information, please visit <fo:inline font-weight="bold"><fo:basic-link external-destination="href">http://lttng.org</fo:basic-link></fo:inline></fo:block>
    <fo:block id="idp567040" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.2 
      Building Erlang/OTP with LTTng support</fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
            Configure and build Erlang with LTTng support:
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For LTTng to work properly with Erlang/OTP you need
            the following packages installed:</fo:block>

      <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">LTTng-tools: a command line interface to control tracing sessions.</fo:block></fo:block></fo:list-item-body></fo:list-item>
          <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">LTTng-UST: user space tracing library.</fo:block></fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On Ubuntu this can be installed via <fo:inline font-family="monospace">aptitude</fo:inline>:</fo:block>

      <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">$ sudo aptitude install lttng-tools liblttng-ust-dev</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">See <fo:inline font-weight="bold"><fo:basic-link external-destination="href">Installing LTTng</fo:basic-link></fo:inline>
          for more information on how to install LTTng on your system.</fo:block>

      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">After LTTng is properly installed on the system Erlang/OTP can be built with LTTng support.</fo:block>
 

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">$ ./configure --with-dynamic-trace=lttng
$ make </fo:block>
    <fo:block id="idp472640" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.3 
      Dyntrace Tracepoints</fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All tracepoints are in the domain of <fo:inline font-family="monospace">org_erlang_dyntrace</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All Erlang types are the string equivalent in LTTng.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">process_spawn</fo:inline></fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">pid : string</fo:inline> :: Process ID. Ex. <fo:inline font-family="monospace">"&lt;0.131.0&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">parent : string</fo:inline> :: Process ID. Ex. <fo:inline font-family="monospace">"&lt;0.131.0&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">entry : string</fo:inline> :: Code Location. Ex. <fo:inline font-family="monospace">"lists:sort/1"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
            Available through
            <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:trace/3</fo:inline></fo:inline> with trace flag <fo:inline font-family="monospace">procs</fo:inline> and <fo:inline font-family="monospace">{tracer,dyntrace,[]}</fo:inline> as tracer module.
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">process_spawn: { cpu_id = 3 }, { pid = "&lt;0.131.0&gt;", parent = "&lt;0.130.0&gt;", entry = "erlang:apply/2" }</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">process_link</fo:inline></fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">to : string</fo:inline> :: Process ID or Port ID. Ex. <fo:inline font-family="monospace">"&lt;0.131.0&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">from : string</fo:inline> :: Process ID or Port ID. Ex. <fo:inline font-family="monospace">"&lt;0.131.0&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">type : string</fo:inline> :: <fo:inline font-family="monospace">"link" | "unlink"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
            Available through
            <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:trace/3</fo:inline></fo:inline> with trace flag <fo:inline font-family="monospace">procs</fo:inline> and <fo:inline font-family="monospace">{tracer,dyntrace,[]}</fo:inline> as tracer module.
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">process_link: { cpu_id = 3 }, { from = "&lt;0.130.0&gt;", to = "&lt;0.131.0&gt;", type = "link" }</fo:block>


        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">process_exit</fo:inline></fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">pid : string</fo:inline> :: Process ID. Ex. <fo:inline font-family="monospace">"&lt;0.131.0&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">reason : string</fo:inline> :: Exit reason. Ex. <fo:inline font-family="monospace">"normal"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
            Available through
            <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:trace/3</fo:inline></fo:inline> with trace flag <fo:inline font-family="monospace">procs</fo:inline> and <fo:inline font-family="monospace">{tracer,dyntrace,[]}</fo:inline> as tracer module.
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">process_exit: { cpu_id = 3 }, { pid = "&lt;0.130.0&gt;", reason = "normal" }</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">process_register</fo:inline></fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">pid : string</fo:inline> :: Process ID. Ex. <fo:inline font-family="monospace">"&lt;0.131.0&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">name : string</fo:inline> :: Registered name. Ex. <fo:inline font-family="monospace">"error_logger"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">type : string</fo:inline> :: <fo:inline font-family="monospace">"register" | "unregister"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">process_register: { cpu_id = 0 }, { pid = "&lt;0.128.0&gt;", name = "dyntrace_lttng_SUITE" type = "register" }</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">process_scheduled</fo:inline></fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">pid : string</fo:inline> :: Process ID. Ex. <fo:inline font-family="monospace">"&lt;0.131.0&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">entry : string</fo:inline> :: Code Location. Ex. <fo:inline font-family="monospace">"lists:sort/1"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">type : string</fo:inline> :: <fo:inline font-family="monospace">"in" | "out" | "in_exiting" | "out_exiting" | "out_exited"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
            Available through
            <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:trace/3</fo:inline></fo:inline> with trace flag <fo:inline font-family="monospace">running</fo:inline> and <fo:inline font-family="monospace">{tracer,dyntrace,[]}</fo:inline> as tracer module.
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">process_scheduled: { cpu_id = 0 }, { pid = "&lt;0.136.0&gt;", entry = "erlang:apply/2", type = "in" }</fo:block>


        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">port_open</fo:inline></fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">pid : string</fo:inline> :: Process ID. Ex. <fo:inline font-family="monospace">"&lt;0.131.0&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">driver : string</fo:inline> :: Driver name. Ex. <fo:inline font-family="monospace">"efile"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">port : string</fo:inline> :: Port ID. Ex. <fo:inline font-family="monospace">"#Port&lt;0.1031&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
            Available through
            <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:trace/3</fo:inline></fo:inline> with trace flag <fo:inline font-family="monospace">ports</fo:inline> and <fo:inline font-family="monospace">{tracer,dyntrace,[]}</fo:inline> as tracer module.
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">port_open: { cpu_id = 5 }, { pid = "&lt;0.131.0&gt;", driver = "'/bin/sh -s unix:cmd'", port = "#Port&lt;0.1887&gt;" }</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">port_exit</fo:inline></fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">port : string</fo:inline> :: Port ID. Ex. <fo:inline font-family="monospace">"#Port&lt;0.1031&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">reason : string</fo:inline> :: Exit reason. Ex. <fo:inline font-family="monospace">"normal"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
            Available through
            <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:trace/3</fo:inline></fo:inline> with trace flag <fo:inline font-family="monospace">ports</fo:inline> and <fo:inline font-family="monospace">{tracer,dyntrace,[]}</fo:inline> as tracer module.
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">port_exit: { cpu_id = 5 }, { port = "#Port&lt;0.1887&gt;", reason = "normal" }</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">port_link</fo:inline></fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">to : string</fo:inline> :: Process ID. Ex. <fo:inline font-family="monospace">"&lt;0.131.0&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">from : string</fo:inline> :: Process ID. Ex. <fo:inline font-family="monospace">"&lt;0.131.0&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">type : string</fo:inline> :: <fo:inline font-family="monospace">"link" | "unlink"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
            Available through
            <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:trace/3</fo:inline></fo:inline> with trace flag <fo:inline font-family="monospace">ports</fo:inline> and <fo:inline font-family="monospace">{tracer,dyntrace,[]}</fo:inline> as tracer module.
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">port_link: { cpu_id = 5 }, { from = "#Port&lt;0.1887&gt;", to = "&lt;0.131.0&gt;", type = "unlink" }</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">port_scheduled</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
            Available through
            <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:trace/3</fo:inline></fo:inline> with trace flag <fo:inline font-family="monospace">running</fo:inline> and <fo:inline font-family="monospace">{tracer,dyntrace,[]}</fo:inline> as tracer module.
        </fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">port : string</fo:inline> :: Port ID. Ex. <fo:inline font-family="monospace">"#Port&lt;0.1031&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">entry : string</fo:inline> :: Callback. Ex. <fo:inline font-family="monospace">"open"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">type : string</fo:inline> :: <fo:inline font-family="monospace">"in" | "out" | "in_exiting" | "out_exiting" | "out_exited"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">port_scheduled: { cpu_id = 5 }, { pid = "#Port&lt;0.1905&gt;", entry = "close", type = "out" }</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
            Available through
            <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:trace/3</fo:inline></fo:inline> with trace flag <fo:inline font-family="monospace">running</fo:inline> and <fo:inline font-family="monospace">{tracer,dyntrace,[]}</fo:inline> as tracer module.
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">function_call</fo:inline></fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">pid : string</fo:inline> :: Process ID. Ex. <fo:inline font-family="monospace">"&lt;0.131.0&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">entry : string</fo:inline> :: Code Location. Ex. <fo:inline font-family="monospace">"lists:sort/1"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">depth : integer</fo:inline> :: Stack depth. Ex. <fo:inline font-family="monospace">0</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
            Available through
            <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:trace/3</fo:inline></fo:inline> with trace flag <fo:inline font-family="monospace">call</fo:inline> and <fo:inline font-family="monospace">{tracer,dyntrace,[]}</fo:inline> as tracer module.
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">function_call: { cpu_id = 5 }, { pid = "&lt;0.145.0&gt;", entry = "dyntrace_lttng_SUITE:'-t_call/1-fun-1-'/0", depth = 0 }</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">function_return</fo:inline></fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">pid : string</fo:inline> :: Process ID. Ex. <fo:inline font-family="monospace">"&lt;0.131.0&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">entry : string</fo:inline> :: Code Location. Ex. <fo:inline font-family="monospace">"lists:sort/1"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">depth : integer</fo:inline> :: Stack depth. Ex. <fo:inline font-family="monospace">0</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
            Available through
            <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:trace/3</fo:inline></fo:inline> with trace flag <fo:inline font-family="monospace">call</fo:inline> or <fo:inline font-family="monospace">return_to</fo:inline> and <fo:inline font-family="monospace">{tracer,dyntrace,[]}</fo:inline> as tracer module.
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">function_return: { cpu_id = 5 }, { pid = "&lt;0.145.0&gt;", entry = "dyntrace_lttng_SUITE:waiter/0", depth = 0 }</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">function_exception</fo:inline></fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">pid : string</fo:inline> :: Process ID. Ex. <fo:inline font-family="monospace">"&lt;0.131.0&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">entry : string</fo:inline> :: Code Location. Ex. <fo:inline font-family="monospace">"lists:sort/1"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">class : string</fo:inline> :: Error reason. Ex. <fo:inline font-family="monospace">"error"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
            Available through
            <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:trace/3</fo:inline></fo:inline> with trace flag <fo:inline font-family="monospace">call</fo:inline> and <fo:inline font-family="monospace">{tracer,dyntrace,[]}</fo:inline> as tracer module.
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">function_exception: { cpu_id = 5 }, { pid = "&lt;0.144.0&gt;", entry = "t:call_exc/1", class = "error" }</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">message_send</fo:inline></fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">from : string</fo:inline> :: Process ID or Port ID. Ex. <fo:inline font-family="monospace">"&lt;0.131.0&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">to : string</fo:inline> :: Process ID or Port ID. Ex. <fo:inline font-family="monospace">"&lt;0.131.0&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">message : string</fo:inline> :: Message sent. Ex. <fo:inline font-family="monospace">"{&lt;0.162.0&gt;,ok}"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
            Available through
            <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:trace/3</fo:inline></fo:inline> with trace flag <fo:inline font-family="monospace">send</fo:inline> and <fo:inline font-family="monospace">{tracer,dyntrace,[]}</fo:inline> as tracer module.
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">message_send: { cpu_id = 3 }, { from = "#Port&lt;0.1938&gt;", to = "&lt;0.160.0&gt;", message = "{#Port&lt;0.1938&gt;,eof}" }</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">message_receive</fo:inline></fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">to : string</fo:inline> :: Process ID or Port ID. Ex. <fo:inline font-family="monospace">"&lt;0.131.0&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">message : string</fo:inline> :: Message received. Ex. <fo:inline font-family="monospace">"{&lt;0.162.0&gt;,ok}"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
            Available through
            <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:trace/3</fo:inline></fo:inline> with trace flag <fo:inline font-family="monospace">'receive'</fo:inline> and <fo:inline font-family="monospace">{tracer,dyntrace,[]}</fo:inline> as tracer module.
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">message_receive: { cpu_id = 7 }, { to = "&lt;0.167.0&gt;", message = "{&lt;0.165.0&gt;,ok}" }</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">gc_minor_start</fo:inline></fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">pid : string</fo:inline> :: Process ID. Ex. <fo:inline font-family="monospace">"&lt;0.131.0&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">need : integer</fo:inline> :: Heap need. Ex. <fo:inline font-family="monospace">2</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">heap : integer</fo:inline> :: Young heap word size. Ex. <fo:inline font-family="monospace">233</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">old_heap : integer</fo:inline> :: Old heap word size. Ex. <fo:inline font-family="monospace">233</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
            Available through
            <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:trace/3</fo:inline></fo:inline> with trace flag <fo:inline font-family="monospace">garbage_collection</fo:inline> and <fo:inline font-family="monospace">{tracer,dyntrace,[]}</fo:inline> as tracer module.
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">gc_minor_start: { cpu_id = 0 }, { pid = "&lt;0.172.0&gt;", need = 0, heap = 610, old_heap = 0 }</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">gc_minor_end</fo:inline></fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">pid : string</fo:inline> :: Process ID. Ex. <fo:inline font-family="monospace">"&lt;0.131.0&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">reclaimed : integer</fo:inline> :: Heap reclaimed. Ex. <fo:inline font-family="monospace">2</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">heap : integer</fo:inline> :: Young heap word size. Ex. <fo:inline font-family="monospace">233</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">old_heap : integer</fo:inline> :: Old heap word size. Ex. <fo:inline font-family="monospace">233</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
            Available through
            <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:trace/3</fo:inline></fo:inline> with trace flag <fo:inline font-family="monospace">garbage_collection</fo:inline> and <fo:inline font-family="monospace">{tracer,dyntrace,[]}</fo:inline> as tracer module.
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">gc_minor_end: { cpu_id = 0 }, { pid = "&lt;0.172.0&gt;", reclaimed = 120, heap = 1598, old_heap = 1598 }</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">gc_major_start</fo:inline></fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">pid : string</fo:inline> :: Process ID. Ex. <fo:inline font-family="monospace">"&lt;0.131.0&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">need : integer</fo:inline> :: Heap need. Ex. <fo:inline font-family="monospace">2</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">heap : integer</fo:inline> :: Young heap word size. Ex. <fo:inline font-family="monospace">233</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">old_heap : integer</fo:inline> :: Old heap word size. Ex. <fo:inline font-family="monospace">233</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
            Available through
            <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:trace/3</fo:inline></fo:inline> with trace flag <fo:inline font-family="monospace">garbage_collection</fo:inline> and <fo:inline font-family="monospace">{tracer,dyntrace,[]}</fo:inline> as tracer module.
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">gc_major_start: { cpu_id = 0 }, { pid = "&lt;0.172.0&gt;", need = 8, heap = 2586, old_heap = 1598 }</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">gc_major_end</fo:inline></fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">pid : string</fo:inline> :: Process ID. Ex. <fo:inline font-family="monospace">"&lt;0.131.0&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">reclaimed : integer</fo:inline> :: Heap reclaimed. Ex. <fo:inline font-family="monospace">2</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">heap : integer</fo:inline> :: Young heap word size. Ex. <fo:inline font-family="monospace">233</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">old_heap : integer</fo:inline> :: Old heap word size. Ex. <fo:inline font-family="monospace">233</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
            Available through
            <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:trace/3</fo:inline></fo:inline> with trace flag <fo:inline font-family="monospace">garbage_collection</fo:inline> and <fo:inline font-family="monospace">{tracer,dyntrace,[]}</fo:inline> as tracer module.
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">gc_major_end: { cpu_id = 0 }, { pid = "&lt;0.172.0&gt;", reclaimed = 240, heap = 4185, old_heap = 0 }</fo:block>

    <fo:block id="idp509872" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.4 
      BEAM Tracepoints</fo:block>
        
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All tracepoints are in the domain of <fo:inline font-family="monospace">org_erlang_otp</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All Erlang types are the string equivalent in LTTng.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">scheduler_poll</fo:inline></fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">scheduler : integer</fo:inline> :: Scheduler ID. Ex. <fo:inline font-family="monospace">1</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">runnable : integer</fo:inline> :: Runnable. Ex. <fo:inline font-family="monospace">1</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">scheduler_poll: { cpu_id = 4 }, { scheduler = 1, runnable = 1 }</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">driver_init</fo:inline></fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">driver : string</fo:inline> :: Driver name. Ex. <fo:inline font-family="monospace">"efile"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">major : integer</fo:inline> :: Major version. Ex. <fo:inline font-family="monospace">3</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">minor : integer</fo:inline> :: Minor version. Ex. <fo:inline font-family="monospace">1</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">flags : integer</fo:inline> :: Flags. Ex. <fo:inline font-family="monospace">1</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">driver_init: { cpu_id = 2 }, { driver = "caller_drv", major = 3, minor = 3, flags = 1 }</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">driver_start</fo:inline></fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">pid : string</fo:inline> :: Process ID. Ex. <fo:inline font-family="monospace">"&lt;0.131.0&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">driver : string</fo:inline> :: Driver name. Ex. <fo:inline font-family="monospace">"efile"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">port : string</fo:inline> :: Port ID. Ex. <fo:inline font-family="monospace">"#Port&lt;0.1031&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">driver_start: { cpu_id = 2 }, { pid = "&lt;0.198.0&gt;", driver = "caller_drv", port = "#Port&lt;0.3676&gt;" }</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">driver_output</fo:inline></fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">pid : string</fo:inline> :: Process ID. Ex. <fo:inline font-family="monospace">"&lt;0.131.0&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">port : string</fo:inline> :: Port ID. Ex. <fo:inline font-family="monospace">"#Port&lt;0.1031&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">driver : string</fo:inline> :: Driver name. Ex. <fo:inline font-family="monospace">"efile"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">bytes : integer</fo:inline> :: Size of data returned. Ex. <fo:inline font-family="monospace">82</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">driver_output: { cpu_id = 2 }, { pid = "&lt;0.198.0&gt;", port = "#Port&lt;0.3677&gt;", driver = "/bin/sh -s unix:cmd", bytes = 36 }</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">driver_outputv</fo:inline></fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">pid : string</fo:inline> :: Process ID. Ex. <fo:inline font-family="monospace">"&lt;0.131.0&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">port : string</fo:inline> :: Port ID. Ex. <fo:inline font-family="monospace">"#Port&lt;0.1031&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">driver : string</fo:inline> :: Driver name. Ex. <fo:inline font-family="monospace">"efile"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">bytes : integer</fo:inline> :: Size of data returned. Ex. <fo:inline font-family="monospace">82</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">driver_outputv: { cpu_id = 5 }, { pid = "&lt;0.194.0&gt;", port = "#Port&lt;0.3663&gt;", driver = "tcp_inet", bytes = 3 }</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">driver_ready_input</fo:inline></fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">pid : string</fo:inline> :: Process ID. Ex. <fo:inline font-family="monospace">"&lt;0.131.0&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">port : string</fo:inline> :: Port ID. Ex. <fo:inline font-family="monospace">"#Port&lt;0.1031&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">driver : string</fo:inline> :: Driver name. Ex. <fo:inline font-family="monospace">"efile"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">driver_ready_input: { cpu_id = 5 }, { pid = "&lt;0.189.0&gt;", port = "#Port&lt;0.3637&gt;", driver = "inet_gethost 4 " }</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">driver_ready_output</fo:inline></fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">pid : string</fo:inline> :: Process ID. Ex. <fo:inline font-family="monospace">"&lt;0.131.0&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">port : string</fo:inline> :: Port ID. Ex. <fo:inline font-family="monospace">"#Port&lt;0.1031&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">driver : string</fo:inline> :: Driver name. Ex. <fo:inline font-family="monospace">"efile"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">driver_ready_output: { cpu_id = 5 }, { pid = "&lt;0.194.0&gt;", port = "#Port&lt;0.3663&gt;", driver = "tcp_inet" }</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">driver_timeout</fo:inline></fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">pid : string</fo:inline> :: Process ID. Ex. <fo:inline font-family="monospace">"&lt;0.131.0&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">port : string</fo:inline> :: Port ID. Ex. <fo:inline font-family="monospace">"#Port&lt;0.1031&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">driver : string</fo:inline> :: Driver name. Ex. <fo:inline font-family="monospace">"efile"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">driver_timeout: { cpu_id = 5 }, { pid = "&lt;0.196.0&gt;", port = "#Port&lt;0.3664&gt;", driver = "tcp_inet" }</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">driver_stop_select</fo:inline></fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">driver : string</fo:inline> :: Driver name. Ex. <fo:inline font-family="monospace">"efile"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">driver_stop_select: { cpu_id = 5 }, { driver = "unknown" }</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">driver_flush</fo:inline></fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">pid : string</fo:inline> :: Process ID. Ex. <fo:inline font-family="monospace">"&lt;0.131.0&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">port : string</fo:inline> :: Port ID. Ex. <fo:inline font-family="monospace">"#Port&lt;0.1031&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">driver : string</fo:inline> :: Driver name. Ex. <fo:inline font-family="monospace">"efile"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">driver_flush: { cpu_id = 7 }, { pid = "&lt;0.204.0&gt;", port = "#Port&lt;0.3686&gt;", driver = "tcp_inet" }</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">driver_stop</fo:inline></fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">pid : string</fo:inline> :: Process ID. Ex. <fo:inline font-family="monospace">"&lt;0.131.0&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">port : string</fo:inline> :: Port ID. Ex. <fo:inline font-family="monospace">"#Port&lt;0.1031&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">driver : string</fo:inline> :: Driver name. Ex. <fo:inline font-family="monospace">"efile"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">driver_stop: { cpu_id = 5 }, { pid = "[]", port = "#Port&lt;0.3673&gt;", driver = "efile" }</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">driver_process_exit</fo:inline></fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">pid : string</fo:inline> :: Process ID. Ex. <fo:inline font-family="monospace">"&lt;0.131.0&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">port : string</fo:inline> :: Port ID. Ex. <fo:inline font-family="monospace">"#Port&lt;0.1031&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">driver : string</fo:inline> :: Driver name. Ex. <fo:inline font-family="monospace">"efile"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">driver_ready_async</fo:inline></fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">pid : string</fo:inline> :: Process ID. Ex. <fo:inline font-family="monospace">"&lt;0.131.0&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">port : string</fo:inline> :: Port ID. Ex. <fo:inline font-family="monospace">"#Port&lt;0.1031&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">driver : string</fo:inline> :: Driver name. Ex. <fo:inline font-family="monospace">"efile"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">driver_ready_async: { cpu_id = 3 }, { pid = "&lt;0.181.0&gt;", port = "#Port&lt;0.3622&gt;", driver = "efile" }</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">driver_call</fo:inline></fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">pid : string</fo:inline> :: Process ID. Ex. <fo:inline font-family="monospace">"&lt;0.131.0&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">port : string</fo:inline> :: Port ID. Ex. <fo:inline font-family="monospace">"#Port&lt;0.1031&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">driver : string</fo:inline> :: Driver name. Ex. <fo:inline font-family="monospace">"efile"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">command : integer</fo:inline> :: Command integer. Ex. <fo:inline font-family="monospace">1</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">bytes : integer</fo:inline> :: Size of data returned. Ex. <fo:inline font-family="monospace">82</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">driver_call: { cpu_id = 2 }, { pid = "&lt;0.202.0&gt;", port = "#Port&lt;0.3676&gt;", driver = "caller_drv", command = 0, bytes = 2 }</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">driver_control</fo:inline></fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">pid : string</fo:inline> :: Process ID. Ex. <fo:inline font-family="monospace">"&lt;0.131.0&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">port : string</fo:inline> :: Port ID. Ex. <fo:inline font-family="monospace">"#Port&lt;0.1031&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">driver : string</fo:inline> :: Driver name. Ex. <fo:inline font-family="monospace">"efile"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">command : integer</fo:inline> :: Command integer. Ex. <fo:inline font-family="monospace">1</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">bytes : integer</fo:inline> :: Size of data returned. Ex. <fo:inline font-family="monospace">82</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">driver_control: { cpu_id = 3 }, { pid = "&lt;0.32767.8191&gt;", port = "#Port&lt;0.0&gt;", driver = "forker", command = 83, bytes = 32 }</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">aio_pool_get</fo:inline></fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">port : string</fo:inline> :: Port ID. Ex. <fo:inline font-family="monospace">"#Port&lt;0.1031&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">length : integer</fo:inline> :: Async queue length. Ex. <fo:inline font-family="monospace">0</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">aio_pool_get: { cpu_id = 4 }, { port = "#Port&lt;0.3614&gt;", length = 0 }</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">aio_pool_put</fo:inline></fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">port : string</fo:inline> :: Port ID. Ex. <fo:inline font-family="monospace">"#Port&lt;0.1031&gt;"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">length : integer</fo:inline> :: Async queue length. Ex. <fo:inline font-family="monospace">-1</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Async queue length is not defined for <fo:inline font-family="monospace">put</fo:inline> operations.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">aio_pool_put: { cpu_id = 3 }, { port = "#Port&lt;0.3614&gt;", length = -1 }</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">carrier_create</fo:inline></fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">type : string</fo:inline> :: Carrier type. Ex. <fo:inline font-family="monospace">"ets_alloc"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">instance : integer</fo:inline> :: Allocator instance. Ex. <fo:inline font-family="monospace">1</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">size : integer</fo:inline> :: Carrier size. Ex. <fo:inline font-family="monospace">262144</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">mbc_carriers : integer</fo:inline> :: Number of multiblock carriers in instance. Ex. <fo:inline font-family="monospace">3</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">mbc_carriers_size : integer</fo:inline> :: Total size of multiblock blocks carriers in instance. Ex. <fo:inline font-family="monospace">1343488</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">mbc_blocks : integer</fo:inline> :: Number of multiblock blocks in instance. Ex. <fo:inline font-family="monospace">122</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">mbc_blocks_size : integer</fo:inline> :: Total size of all multiblock blocks in instance. Ex. <fo:inline font-family="monospace">285296</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">sbc_carriers : integer</fo:inline> :: Number of singleblock carriers in instance. Ex. <fo:inline font-family="monospace">1</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">sbc_carriers_size : integer</fo:inline> :: Total size of singleblock blocks carriers in instance. Ex. <fo:inline font-family="monospace">1343488</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">sbc_blocks : integer</fo:inline> :: Number of singleblocks in instance. Ex. <fo:inline font-family="monospace">1</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">sbc_blocks_size : integer</fo:inline> :: Total size of all singleblock blocks in instance. Ex. <fo:inline font-family="monospace">285296</fo:inline></fo:block></fo:list-item-body></fo:list-item>

        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">carrier_create: { cpu_id = 2 }, { type = "ets_alloc", instance = 7, size = 2097152, mbc_carriers = 4, mbc_carriers_size = 3440640, mbc_blocks = 526, mbc_blocks_size = 1278576, sbc_carriers = 0, sbc_carriers_size = 0, sbc_blocks = 0, sbc_blocks_size = 0 }</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">carrier_destroy</fo:inline></fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">type : string</fo:inline> :: Carrier type. Ex. <fo:inline font-family="monospace">"ets_alloc"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">instance : integer</fo:inline> :: Allocator instance. Ex. <fo:inline font-family="monospace">1</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">size : integer</fo:inline> :: Carrier size. Ex. <fo:inline font-family="monospace">262144</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">mbc_carriers : integer</fo:inline> :: Number of multiblock carriers in instance. Ex. <fo:inline font-family="monospace">3</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">mbc_carriers_size : integer</fo:inline> :: Total size of multiblock blocks carriers in instance. Ex. <fo:inline font-family="monospace">1343488</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">mbc_blocks : integer</fo:inline> :: Number of multiblock blocks in instance. Ex. <fo:inline font-family="monospace">122</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">mbc_blocks_size : integer</fo:inline> :: Total size of all multiblock blocks in instance. Ex. <fo:inline font-family="monospace">285296</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">sbc_carriers : integer</fo:inline> :: Number of singleblock carriers in instance. Ex. <fo:inline font-family="monospace">1</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">sbc_carriers_size : integer</fo:inline> :: Total size of singleblock blocks carriers in instance. Ex. <fo:inline font-family="monospace">1343488</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">sbc_blocks : integer</fo:inline> :: Number of singleblocks in instance. Ex. <fo:inline font-family="monospace">1</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">sbc_blocks_size : integer</fo:inline> :: Total size of all singleblock blocks in instance. Ex. <fo:inline font-family="monospace">285296</fo:inline></fo:block></fo:list-item-body></fo:list-item>

        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">carrier_destroy: { cpu_id = 6 }, { type = "ets_alloc", instance = 7, size = 262144, mbc_carriers = 3, mbc_carriers_size = 3178496, mbc_blocks = 925, mbc_blocks_size = 2305336, sbc_carriers = 0, sbc_carriers_size = 0, sbc_blocks = 0, sbc_blocks_size = 0 }</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">carrier_pool_put</fo:inline></fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">type : string</fo:inline> :: Carrier type. Ex. <fo:inline font-family="monospace">"ets_alloc"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">instance : integer</fo:inline> :: Allocator instance. Ex. <fo:inline font-family="monospace">1</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">size : integer</fo:inline> :: Carrier size. Ex. <fo:inline font-family="monospace">262144</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">carrier_pool_put: { cpu_id = 3 }, { type = "ets_alloc", instance = 5, size = 1048576 }</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">carrier_pool_get</fo:inline></fo:block>
        <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">type : string</fo:inline> :: Carrier type. Ex. <fo:inline font-family="monospace">"ets_alloc"</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">instance : integer</fo:inline> :: Allocator instance. Ex. <fo:inline font-family="monospace">1</fo:inline></fo:block></fo:list-item-body></fo:list-item>
            <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block><fo:inline font-family="monospace">size : integer</fo:inline> :: Carrier size. Ex. <fo:inline font-family="monospace">262144</fo:inline></fo:block></fo:list-item-body></fo:list-item>
        </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">carrier_pool_get: { cpu_id = 7 }, { type = "ets_alloc", instance = 4, size = 3208 }</fo:block>
    <fo:block id="idp733200" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.1.5 
      Example of process tracing</fo:block>
        
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An example of process tracing of <fo:inline font-family="monospace">os_mon</fo:inline> and friends.</fo:block>

    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Clean start of lttng in a bash shell.</fo:block>

    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">$ lttng create erlang-demo
Spawning a session daemon
Session erlang-demo created.
Traces will be written in /home/egil/lttng-traces/erlang-demo-20160526-165920</fo:block>

     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Start an Erlang node with lttng enabled.</fo:block>

     <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">$ erl
Erlang/OTP 19 [erts-8.0] [source-4d7b24d] [64-bit] [smp:8:8] [async-threads:10] [hipe] [kernel-poll:false] [lttng]

Eshell V8.0  (abort with ^G)
1&gt;</fo:block>

     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Load the <fo:inline font-family="monospace">dyntrace</fo:inline> module.</fo:block>

     <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">1&gt; <fo:inline font-weight="bold">l(dyntrace).</fo:inline>
{module,dyntrace}</fo:block>

     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All tracepoints via dyntrace are now visibile and can be listed through <fo:inline font-family="monospace">lttng list -u</fo:inline>.</fo:block>

     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Enable the process_register LTTng tracepoint for Erlang.</fo:block>

     <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">$ lttng enable-event -u org_erlang_dyntrace:process_register
UST event org_erlang_dyntrace:process_register created in channel channel0</fo:block>

     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Enable process tracing for new processes and use <fo:inline font-family="monospace">dyntrace</fo:inline> as tracer backend.</fo:block>

     <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">2&gt; <fo:inline font-weight="bold">erlang:trace(new,true,[procs,{tracer,dyntrace,[]}]).</fo:inline>
0</fo:block>

     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Start LTTng tracing.</fo:block>

     <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">$ lttng start
Tracing started for session erlang-demo</fo:block>

     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Start the <fo:inline font-family="monospace">os_mon</fo:inline> application in Erlang.</fo:block>

     <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">3&gt; <fo:inline font-weight="bold">application:ensure_all_started(os_mon).</fo:inline>
{ok,[sasl,os_mon]}</fo:block>

     <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stop LTTng tracing and view the result.</fo:block>

     <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">$ lttng stop
Tracing stopped for session erlang-demo
$ lttng view
[17:20:42.561168759] (+?.?????????) elxd1168lx9 org_erlang_dyntrace:process_register: \
    { cpu_id = 5 }, { pid = "&lt;0.66.0&gt;", name = "sasl_sup", type = "register" }
[17:20:42.561215519] (+0.000046760) elxd1168lx9 org_erlang_dyntrace:process_register: \
    { cpu_id = 5 }, { pid = "&lt;0.67.0&gt;", name = "sasl_safe_sup", type = "register" }
[17:20:42.562149024] (+0.000933505) elxd1168lx9 org_erlang_dyntrace:process_register: \
    { cpu_id = 5 }, { pid = "&lt;0.68.0&gt;", name = "alarm_handler", type = "register" }
[17:20:42.571035803] (+0.008886779) elxd1168lx9 org_erlang_dyntrace:process_register: \
    { cpu_id = 5 }, { pid = "&lt;0.69.0&gt;", name = "release_handler", type = "register" }
[17:20:42.574939868] (+0.003904065) elxd1168lx9 org_erlang_dyntrace:process_register: \
    { cpu_id = 5 }, { pid = "&lt;0.74.0&gt;", name = "os_mon_sup", type = "register" }
[17:20:42.576818712] (+0.001878844) elxd1168lx9 org_erlang_dyntrace:process_register: \
    { cpu_id = 5 }, { pid = "&lt;0.75.0&gt;", name = "disksup", type = "register" }
[17:20:42.580032013] (+0.003213301) elxd1168lx9 org_erlang_dyntrace:process_register: \
    { cpu_id = 5 }, { pid = "&lt;0.76.0&gt;", name = "memsup", type = "register" }
[17:20:42.583046339] (+0.003014326) elxd1168lx9 org_erlang_dyntrace:process_register: \
    { cpu_id = 5 }, { pid = "&lt;0.78.0&gt;", name = "cpu_sup", type = "register" }
[17:20:42.586206242] (+0.003159903) elxd1168lx9 org_erlang_dyntrace:process_register: \
    { cpu_id = 5 }, { pid = "&lt;0.82.0&gt;", name = "timer_server", type = "register" }</fo:block>
    <fo:block id="idp751952" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.2  DTrace and Erlang/OTP</fo:marker>1.2  DTrace and Erlang/OTP</fo:block><fo:block id="idp756992" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.1 
      History</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
The first implementation of DTrace probes for the Erlang virtual
machine was presented at the <fo:inline font-weight="bold"><fo:basic-link external-destination="href">2008 Erlang User Conference</fo:basic-link></fo:inline>.  That
work, based on the Erlang/OTP R12 release, was discontinued due to
what appears to be miscommunication with the original developers.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Several users have created Erlang port drivers, linked-in drivers, or
NIFs that allow Erlang code to try to activate a probe,
e.g. <fo:inline font-family="monospace">foo_module:dtrace_probe("message goes here!")</fo:inline>.
</fo:block>

<fo:block id="idp760896" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.2 
      Goals</fo:block>



<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
Annotate as much of the Erlang VM as is practical.

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
The initial goal is to trace file I/O operations.

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
Support all platforms that implement DTrace: OS X, Solaris,
and (I hope) FreeBSD and NetBSD.

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
To the extent that it's practical, support SystemTap on Linux
via DTrace provider compatibility.

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
Allow Erlang code to supply annotations.

</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
<fo:block id="idp765248" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.3 
      Supported platforms</fo:block>



<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
OS X 10.6.x / Snow Leopard, OS X 10.7.x / Lion and probably newer versions.

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
Solaris 10.  I have done limited testing on Solaris 11 and
OpenIndiana release 151a, and both appear to work.

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
FreeBSD 9.0 and 10.0.

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
Linux via SystemTap compatibility.  Please see
<fo:inline font-style="italic">$ERL_TOP/HOWTO/SYSTEMTAP.md</fo:inline> for more details.

</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Just add the <fo:inline font-family="monospace">--with-dynamic-trace=dtrace</fo:inline> option to your command when you 
run the <fo:inline font-family="monospace">configure</fo:inline> script. If you are using systemtap, the configure option 
is <fo:inline font-family="monospace">--with-dynamic-trace=systemtap</fo:inline>
</fo:block>

<fo:block id="idp771648" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.4 
      Status</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
As of R15B01, the dynamic trace code is included in the OTP source distribution,
although it's considered experimental. The main development of the dtrace code 
still happens outside of Ericsson, but there is no need to fetch a patched 
version of the OTP source to get the basic funtionality.
</fo:block>

<fo:block id="idp773824" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.5 
      Implementation summary</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
So far, most effort has been focused on the <fo:inline font-family="monospace">efile_drv.c</fo:inline> code,
which implements most file I/O on behalf of the Erlang virtual
machine.  This driver also presents a big challenge: its use of an I/O
worker pool (enabled by using the <fo:inline font-family="monospace">erl +A 8</fo:inline> flag, for example) makes
it much more difficult to trace I/O activity because each of the
following may be executed in a different Pthread:
</fo:block>

<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
I/O initiation (Erlang code)

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
I/O proxy process handling, e.g. read/write when file is not opened
in <fo:inline font-family="monospace">raw</fo:inline> mode, operations executed by the code &amp; file server processes.
(Erlang code)

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">efile_drv</fo:inline> command setup (C code)

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">efile_drv</fo:inline> command execution (C code)

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">efile_drv</fo:inline> status return (C code)

</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Example output from <fo:inline font-family="monospace">lib/runtime_tools/examples/efile_drv.d</fo:inline> while executing
<fo:inline font-family="monospace">file:rename("old-name", "new-name")</fo:inline>:
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
efile_drv enter tag={3,84} user tag some-user-tag | RENAME (12) | args: old-name new-name ,\
      0 0 (port #Port&lt;0.59&gt;)
async I/O worker tag={3,83} | RENAME (12) | efile_drv-int_entry
async I/O worker tag={3,83} | RENAME (12) | efile_drv-int_return
efile_drv return tag={3,83} user tag  | RENAME (12) | errno 2
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
... where the following key can help decipher the output:
</fo:block>

<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">{3,83}</fo:inline> is the Erlang scheduler thread number (3) and operation
counter number (83) assigned to this I/O operation.  Together,
these two numbers form a unique ID for the I/O operation.

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">12</fo:inline> is the command number for the rename operation.  See the
definition for <fo:inline font-family="monospace">FILE_RENAME</fo:inline> in the source code file <fo:inline font-family="monospace">efile_drv.c</fo:inline>
or the <fo:inline font-family="monospace">BEGIN</fo:inline> section of the D script <fo:inline font-family="monospace">lib/runtime_tools/examples/efile_drv.d</fo:inline>.

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:inline font-family="monospace">old-name</fo:inline> and <fo:inline font-family="monospace">new-name</fo:inline> are the two string arguments for the
source and destination of the <fo:inline font-family="monospace">rename(2)</fo:inline> system call.
The two integer arguments are unused; the simple formatting code
prints the arguments anyway, 0 and 0.

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
The worker pool code was called on behalf of Erlang port <fo:inline font-family="monospace">#Port&lt;0.59&gt;</fo:inline>.

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
The system call failed with a POSIX errno value of 2: <fo:inline font-family="monospace">ENOENT</fo:inline>,
because the path <fo:inline font-family="monospace">old-name</fo:inline> does not exist.

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
The <fo:inline font-family="monospace">efile_drv-int_entry</fo:inline> and <fo:inline font-family="monospace">efile_drv_int_return</fo:inline> probes are
provided in case the user is
interested in measuring only the latency of code executed by
<fo:inline font-family="monospace">efile_drv</fo:inline> asynchronous functions by I/O worker pool threads
and the OS system call that they encapsulate.

</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
So, where does the <fo:inline font-family="monospace">some-user-tag</fo:inline> string come from?
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
At the moment, the user tag comes from code like the following:
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
dyntrace:put_tag("some-user-tag"),
file:rename("old-name", "new-name"),
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
This method of tagging I/O at the Erlang level is subject to change.
</fo:block>

<fo:block id="idp1085584" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.6 
      Example DTrace probe specification</fo:block>



<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
/**
 * Fired when a message is sent from one local process to another.
 *
 * NOTE: The 'size' parameter is in machine-dependent words and
 *       that the actual size of any binary terms in the message
 *       are not included.
 *
 * @param sender the PID (string form) of the sender
 * @param receiver the PID (string form) of the receiver
 * @param size the size of the message being delivered (words)
 * @param token_label for the sender's sequential trace token
 * @param token_previous count for the sender's sequential trace token
 * @param token_current count for the sender's sequential trace token
 */
probe message__send(char *sender, char *receiver, uint32_t size,
                    int token_label, int token_previous, int token_current);

/**
 * Fired when a message is sent from a local process to a remote process.
 *
 * NOTE: The 'size' parameter is in machine-dependent words and
 *       that the actual size of any binary terms in the message
 *       are not included.
 *
 * @param sender the PID (string form) of the sender
 * @param node_name the Erlang node name (string form) of the receiver
 * @param receiver the PID/name (string form) of the receiver
 * @param size the size of the message being delivered (words)
 * @param token_label for the sender's sequential trace token
 * @param token_previous count for the sender's sequential trace token
 * @param token_current count for the sender's sequential trace token
 */
probe message__send__remote(char *sender, char *node_name, char *receiver,
                            uint32_t size,
                    int token_label, int token_previous, int token_current);

/**
 * Fired when a message is queued to a local process.  This probe
 * will not fire if the sender's pid == receiver's pid.
 *
 * NOTE: The 'size' parameter is in machine-dependent words and
 *       that the actual size of any binary terms in the message
 *       are not included.
 *
 * @param receiver the PID (string form) of the receiver
 * @param size the size of the message being delivered (words)
 * @param queue_len length of the queue of the receiving process
 * @param token_label for the sender's sequential trace token
 * @param token_previous count for the sender's sequential trace token
 * @param token_current count for the sender's sequential trace token
 */
probe message__queued(char *receiver, uint32_t size, uint32_t queue_len,
                    int token_label, int token_previous, int token_current);

/**
 * Fired when a message is 'receive'd by a local process and removed
 * from its mailbox.
 *
 * NOTE: The 'size' parameter is in machine-dependent words and
 *       that the actual size of any binary terms in the message
 *       are not included.
 *
 * @param receiver the PID (string form) of the receiver
 * @param size the size of the message being delivered (words)
 * @param queue_len length of the queue of the receiving process
 * @param token_label for the sender's sequential trace token
 * @param token_previous count for the sender's sequential trace token
 * @param token_current count for the sender's sequential trace token
 */
probe message__receive(char *receiver, uint32_t size, uint32_t queue_len,
                    int token_label, int token_previous, int token_current);

/* ... */

/* Async driver pool */

/**
 * Show the post-add length of the async driver thread pool member's queue.
 *
 * NOTE: The port name is not available: additional lock(s) must
 *       be acquired in order to get the port name safely in an SMP
 *       environment.  The same is true for the aio__pool_get probe.
 *
 * @param port the Port (string form)
 * @param new queue length
 */
probe aio_pool__add(char *, int);

/**
 * Show the post-get length of the async driver thread pool member's queue.
 *
 * @param port the Port (string form)
 * @param new queue length
 */
probe aio_pool__get(char *, int);

/* Probes for efile_drv.c */

/**
 * Entry into the efile_drv.c file I/O driver
 *
 * For a list of command numbers used by this driver, see the section
 * "Guide to probe arguments" in ../../../README.md.  That section
 * also contains explanation of the various integer and string
 * arguments that may be present when any particular probe fires.
 *
 * TODO: Adding the port string, args[10], is a pain.  Making that
 *       port string available to all the other efile_drv.c probes
 *       will be more pain.  Is the pain worth it?  If yes, then
 *       add them everywhere else and grit our teeth.  If no, then
 *       rip it out.
 *
 * @param thread-id number of the scheduler Pthread                   arg0
 * @param tag number: {thread-id, tag} uniquely names a driver operation
 * @param user-tag string                                             arg2
 * @param command number                                              arg3
 * @param string argument 1                                           arg4
 * @param string argument 2                                           arg5
 * @param integer argument 1                                          arg6
 * @param integer argument 2                                          arg7
 * @param integer argument 3                                          arg8
 * @param integer argument 4                                          arg9
 * @param port the port ID of the busy port                       args[10]
 */
probe efile_drv__entry(int, int, char *, int, char *, char *,
                       int64_t, int64_t, int64_t, int64_t, char *);

/**
 * Entry into the driver's internal work function.  Computation here
 * is performed by a async worker pool Pthread.
 *
 * @param thread-id number
 * @param tag number
 * @param command number
 */
probe efile_drv__int_entry(int, int, int);

/**
 * Return from the driver's internal work function.
 *
 * @param thread-id number
 * @param tag number
 * @param command number
 */
probe efile_drv__int_return(int, int, int);

/**
 * Return from the efile_drv.c file I/O driver
 *
 * @param thread-id number                                            arg0
 * @param tag number                                                  arg1
 * @param user-tag string                                             arg2
 * @param command number                                              arg3
 * @param Success? 1 is success, 0 is failure                         arg4
 * @param If failure, the errno of the error.                         arg5
 */
probe efile_drv__return(int, int, char *, int, int, int);
</fo:block>
<fo:block id="idp1094256" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.2.7 
      Guide to efile_drv.c probe arguments</fo:block>



<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
/* Driver op code: used by efile_drv-entry      arg3 */
/*                 used by efile_drv-int_entry  arg3 */
/*                 used by efile_drv-int_return arg3 */
/*                 used by efile_drv-return     arg3 */

#define FILE_OPEN            1                 (probe arg3)
        probe arg6 = C driver dt_i1 = flags;
        probe arg4 = C driver dt_s1 = path;

#define FILE_READ            2                 (probe arg3)
        probe arg6 = C driver dt_i1 = fd;
        probe arg7 = C driver dt_i2 = flags;
        probe arg8 = C driver dt_i3 = size;

#define FILE_LSEEK           3                 (probe arg3)
        probe arg6 = C driver dt_i1 = fd;
        probe arg7 = C driver dt_i2 = offset;
        probe arg8 = C driver dt_i3 = origin;

#define FILE_WRITE           4                 (probe arg3)
        probe arg6 = C driver dt_i1 = fd;
        probe arg7 = C driver dt_i2 = flags;
        probe arg8 = C driver dt_i3 = size;

#define FILE_FSTAT           5                 (probe arg3)
        probe arg6 = C driver dt_i1 = fd;

#define FILE_PWD             6                 (probe arg3)
        none

#define FILE_READDIR         7                 (probe arg3)
        probe arg4 = C driver dt_s1 = path;

#define FILE_CHDIR           8                 (probe arg3)
        probe arg4 = C driver dt_s1 = path;

#define FILE_FSYNC           9                 (probe arg3)
            probe arg6 = C driver dt_i1 = fd;

#define FILE_MKDIR          10                 (probe arg3)
        probe arg4 = C driver dt_s1 = path;

#define FILE_DELETE         11                 (probe arg3)
        probe arg4 = C driver dt_s1 = path;

#define FILE_RENAME         12                 (probe arg3)
        probe arg4 = C driver dt_s1 = old_name;
        probe arg5 = C driver dt_s2 = new_name;

#define FILE_RMDIR          13                 (probe arg3)
        probe arg4 = C driver dt_s1 = path;

#define FILE_TRUNCATE       14                 (probe arg3)
        probe arg6 = C driver dt_i1 = fd;
        probe arg7 = C driver dt_i2 = flags;

#define FILE_READ_FILE      15                 (probe arg3)
        probe arg4 = C driver dt_s1 = path;

#define FILE_WRITE_INFO     16                 (probe arg3)
        probe arg6 = C driver dt_i1 = mode;
        probe arg7 = C driver dt_i2 = uid;
        probe arg8 = C driver dt_i3 = gid;

#define FILE_LSTAT          19                 (probe arg3)
        probe arg4 = C driver dt_s1 = path;

#define FILE_READLINK       20                 (probe arg3)
        probe arg4 = C driver dt_s1 = path;

#define FILE_LINK           21                 (probe arg3)
        probe arg4 = C driver dt_s1 = existing_path;
        probe arg5 = C driver dt_s2 = new_path;

#define FILE_SYMLINK        22                 (probe arg3)
        probe arg4 = C driver dt_s1 = existing_path;
        probe arg5 = C driver dt_s2 = new_path;

#define FILE_CLOSE          23                 (probe arg3)
        probe arg6 = C driver dt_i1 = fd;
        probe arg7 = C driver dt_i2 = flags;

#define FILE_PWRITEV        24                 (probe arg3)
        probe arg6 = C driver dt_i1 = fd;
        probe arg7 = C driver dt_i2 = flags;
        probe arg8 = C driver dt_i3 = size;

#define FILE_PREADV         25                 (probe arg3)
        probe arg6 = C driver dt_i1 = fd;
        probe arg7 = C driver dt_i2 = flags;
        probe arg8 = C driver dt_i3 = size;

#define FILE_SETOPT         26                 (probe arg3)
        probe arg6 = C driver dt_i1 = opt_name;
        probe arg7 = C driver dt_i2 = opt_specific_value;

#define FILE_IPREAD         27                 (probe arg3)
        probe arg6 = C driver dt_i1 = fd;
        probe arg7 = C driver dt_i2 = flags;
        probe arg8 = C driver dt_i3 = offsets[0];
        probe arg9 = C driver dt_i4 = size;

#define FILE_ALTNAME        28                 (probe arg3)
        probe arg4 = C driver dt_s1 = path;

#define FILE_READ_LINE      29                 (probe arg3)
        probe arg6 = C driver dt_i1 = fd;
        probe arg7 = C driver dt_i2 = flags;
        probe arg8 = C driver dt_i3 = read_offset;
        probe arg9 = C driver dt_i4 = read_ahead;

#define FILE_FDATASYNC      30                 (probe arg3)
        probe arg6 = C driver dt_i1 = fd;

#define FILE_FADVISE        31                 (probe arg3)
        probe arg6 = C driver dt_i1 = fd;
        probe arg7 = C driver dt_i2 = offset;
        probe arg8 = C driver dt_i3 = length;
        probe arg9 = C driver dt_i4 = advise_type;
</fo:block>
<fo:block id="idp1104432" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">1.3  SystemTap and Erlang/OTP</fo:marker>1.3  SystemTap and Erlang/OTP</fo:block><fo:block id="idp1109488" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.1 
      Introduction</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
SystemTap is DTrace for Linux. In fact Erlang's SystemTap support
is build using SystemTap's DTrace compatibility's layer. For an
introduction to Erlang DTrace support read <fo:inline font-style="italic">$ERL_TOP/HOWTO/DTRACE.md</fo:inline>.
</fo:block>

<fo:block id="idp1112288" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.2 
      Requisites</fo:block>



<fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Linux Kernel with UTRACE support
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">check for UTRACE support in your current kernel:
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
# grep CONFIG_UTRACE /boot/config-`uname -r`
CONFIG_UTRACE=y
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Fedora 16 is known to contain UTRACE, for most other Linux distributions
a custom build kernel will be required.
Check Fedora's SystemTap documentation for additional required packages
(e.g. Kernel Debug Symbols)
</fo:block>

</fo:block></fo:list-item-body></fo:list-item>
<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">SystemTap &gt; 1.6
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A the time of writing this, the latest released version of SystemTap is
version 1.6. Erlang's DTrace support requires a MACRO that was introduced
after that release. So either get a newer release or build SystemTap from
git yourself (see: http://sourceware.org/systemtap/getinvolved.html)
</fo:block>
</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
<fo:block id="idp1118560" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.3 
      Building Erlang</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Configure and build Erlang with SystemTap support:
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
# ./configure --with-dynamic-trace=systemtap + whatever args you need
# make
</fo:block>
<fo:block id="idp1121280" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.4 
      Testing</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
SystemTap, unlike DTrace, needs to know what binary it is tracing and has to
be able to read that binary before it starts tracing. Your probe script
therefor has to reference the correct beam emulator and stap needs to be able
to find that binary.
The examples are written for "beam", but other versions such as "beam.smp" or
"beam.debug.smp" might exist (depending on your configuration). Make sure you
either specify the full the path of the binary in the probe or your "beam"
binary is in the search path.
</fo:block>

<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
All available probes can be listed like this:
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
# stap -L 'process("beam").mark("*")'
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
or:
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
# PATH=/path/to/beam:$PATH stap -L 'process("beam").mark("*")'
</fo:block>
<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Probes in the dtrace.so NIF library like this:
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
# PATH=/path/to/dtrace/priv/lib:$PATH stap -L 'process("dtrace.so").mark("*")'
</fo:block>
<fo:block id="idp1127392" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">1.3.5 
      Running SystemTap scripts</fo:block>



<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
Adjust the process("beam") reference to your beam version and attach the script
to a running "beam" instance:
</fo:block>

<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
# stap /path/to/probe/script/port1.systemtap -x &lt;pid of beam&gt;
</fo:block>
<fo:block id="idp495728" border-after-style="solid" border-after-width="1pt" border-color="#960003" break-before="page" font-family="DejaVuSans, sans-serif" font-size="1.83em" font-weight="normal" space-after="1em" space-before="2em" space-before.conditionality="retain">2   
      Reference Manual</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Runtime_Tools</fo:inline> provides low footprint tracing/debugging
      tools suitable for inclusion in a production system.</fo:block>
  <fo:block page-break-before="always" id="idp930560" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">runtime_tools</fo:marker>runtime_tools</fo:block>Application</fo:block>
  <fo:block/>
  runtime_tools
  The Runtime tools Application
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This chapter describes the Runtime_Tools application in OTP,
      which provides low footprint tracing/debugging tools suitable
      for inclusion in a production system.</fo:block>
  

  <fo:block id="idp928224" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Configuration</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are currently no configuration parameters available for
      this application.
      </fo:block>
  

  <fo:block id="idp121440" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">SEE ALSO</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">application(3)</fo:block>
  
<fo:block page-break-before="always" id="idp1001792" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">dbg</fo:marker>dbg</fo:block>Erlang module</fo:block>
  <fo:block/>
  dbg
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module implements a text based interface to the
      <fo:inline font-style="italic"><fo:inline font-family="monospace">trace/3</fo:inline></fo:inline> and the
      <fo:inline font-style="italic"><fo:inline font-family="monospace">trace_pattern/2</fo:inline></fo:inline> BIFs.  It makes it
      possible to trace functions, processes, ports and messages.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      To quickly get started on tracing function calls you can use the following
      code in the Erlang shell:
    </fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; dbg:tracer(). %% Start the default trace message receiver
{ok,&lt;0.36.0&gt;}
2&gt; dbg:p(all, c). %% Setup call (c) tracing on all processes
{ok,[{matched,nonode@nohost,26}]}
3&gt; dbg:tp(lists, seq, x). %% Setup an exception return trace (x) on lists:seq
{ok,[{matched,nonode@nohost,2},{saved,x}]}
4&gt; lists:seq(1,10).
(&lt;0.34.0&gt;) call lists:seq(1,10)
(&lt;0.34.0&gt;) returned from lists:seq/2 -&gt; [1,2,3,4,5,6,7,8,9,10]
[1,2,3,4,5,6,7,8,9,10]
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
      For more examples of how to use <fo:inline font-family="monospace">dbg</fo:inline> from the Erlang
      shell, see the <fo:inline font-style="italic">simple example</fo:inline> section.
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The utilities are also suitable to use in system testing on
      large systems, where other tools have too much impact on the
      system performance.  Some primitive support for sequential tracing
      is also included, see the <fo:inline font-style="italic">advanced topics</fo:inline> section.
      </fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp830432">fun2ms(LiteralFun) -&gt; MatchSpec</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">LiteralFun = fun() literal</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MatchSpec = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Pseudo function that by means of a <fo:inline font-family="monospace">parse_transform</fo:inline>
          translates the <fo:inline font-weight="bold">literal</fo:inline><fo:inline font-family="monospace">fun()</fo:inline> typed as parameter in
          the function call to a match specification as described in
          the <fo:inline font-family="monospace">match_spec</fo:inline> manual of ERTS users guide.
          (with literal I mean that the <fo:inline font-family="monospace">fun()</fo:inline> needs to
          textually be written as the parameter of the function, it
          cannot be held in a variable which in turn is passed to the 
          function). </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The parse transform is implemented in the module
          <fo:inline font-family="monospace">ms_transform</fo:inline> and the source <fo:inline font-weight="bold">must</fo:inline> include the
          file <fo:inline font-family="monospace">ms_transform.hrl</fo:inline> in STDLIB for this
          pseudo function to work. Failing to include the hrl file in
          the source will result in a runtime error, not a compile
          time ditto. The include file is easiest included by adding
          the line
          <fo:inline font-family="monospace">-include_lib("stdlib/include/ms_transform.hrl").</fo:inline> to
          the source file.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">fun()</fo:inline> is very restricted, it can take only a
          single parameter (the parameter list to match), a sole variable or a
          list. It needs to use the <fo:inline font-family="monospace">is_</fo:inline>XXX guard tests and one
          cannot use language constructs that have no representation
          in a match_spec (like <fo:inline font-family="monospace">if</fo:inline>, <fo:inline font-family="monospace">case</fo:inline>,
          <fo:inline font-family="monospace">receive</fo:inline> etc). The return value from the fun will be
          the return value of the resulting match_spec.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">dbg:fun2ms(fun([M,N]) when N &gt; 3 -&gt; return_trace() end).</fo:inline>
[{['$1','$2'],[{'&gt;','$2',3}],[{return_trace}]}]</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Variables from the environment can be imported, so that this
          works:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
2&gt; <fo:inline font-weight="bold">X=3.</fo:inline>
3
3&gt; <fo:inline font-weight="bold">dbg:fun2ms(fun([M,N]) when N &gt; X  -&gt; return_trace() end).</fo:inline>
[{['$1','$2'],[{'&gt;','$2',{const,3}}],[{return_trace}]}]</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The imported variables will be replaced by match_spec
          <fo:inline font-family="monospace">const</fo:inline> expressions, which is consistent with the
          static scoping for Erlang <fo:inline font-family="monospace">fun()</fo:inline>s. Local or global
          function calls can not be in the guard or body of the fun
          however. Calls to builtin match_spec functions of course is
          allowed:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
4&gt; <fo:inline font-weight="bold">dbg:fun2ms(fun([M,N]) when N &gt; X, is_atomm(M)  -&gt; return_trace() end).</fo:inline>
Error: fun containing local erlang function calls ('is_atomm' called in guard)\
 cannot be translated into match_spec
{error,transform_error}
5&gt; <fo:inline font-weight="bold">dbg:fun2ms(fun([M,N]) when N &gt; X, is_atom(M)  -&gt; return_trace() end).</fo:inline>
[{['$1','$2'],[{'&gt;','$2',{const,3}},{is_atom,'$1'}],[{return_trace}]}]</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As you can see by the example, the function can be called from
          the shell too. The <fo:inline font-family="monospace">fun()</fo:inline> needs to be literally in the
          call when used from the shell as well. Other means than the 
          parse_transform are used in the shell case, but more or less
          the same restrictions apply (the exception being records,
          as they are not handled by the shell).</fo:block>
        <fo:block background-color="#ffd6d6" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Warning:</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the parse_transform is not applied to a module which calls this
            pseudo function, the call will fail in runtime (with a 
            <fo:inline font-family="monospace">badarg</fo:inline>). The module <fo:inline font-family="monospace">dbg</fo:inline> actually exports a
            function with this name, but it should never really be called
            except for when using the function in the shell. If the
            <fo:inline font-family="monospace">parse_transform</fo:inline> is properly applied by including
            the <fo:inline font-family="monospace">ms_transform.hrl</fo:inline> header file, compiled code
            will never call the function, but the function call is
            replaced by a literal match_spec.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">More information is provided by the <fo:inline font-family="monospace">ms_transform</fo:inline>
          manual page in STDLIB.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp923312">h() -&gt; ok </fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gives a list of items for brief online help.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp836256">h(Item) -&gt; ok </fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Item = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Gives a brief help text for functions in the dbg module. The
          available items can be listed with <fo:inline font-family="monospace">dbg:h/0</fo:inline></fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp911088">p(Item) -&gt; {ok, MatchDesc} | {error, term()} </fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-family="monospace">p(Item, [m])</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp249888">p(Item, Flags) -&gt; {ok, MatchDesc} | {error, term()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MatchDesc = [MatchNum]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MatchNum = {matched, node(), integer()} | {matched, node(), 0, RPCError}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">RPCError = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Traces <fo:inline font-family="monospace">Item</fo:inline> in accordance to the value specified
          by <fo:inline font-family="monospace">Flags</fo:inline>. The variation of <fo:inline font-family="monospace">Item</fo:inline> is listed below:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">pid()</fo:inline> or <fo:inline font-family="monospace">port()</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The corresponding process or port is traced. The process or port may
           be a remote process or port (on another Erlang node). The node must
           be in the list of traced nodes (see <fo:inline font-style="italic"><fo:inline font-family="monospace">n/1</fo:inline></fo:inline>
           and <fo:inline font-style="italic"><fo:inline font-family="monospace">tracer/3</fo:inline></fo:inline>).</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">all</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">All processes and ports in the system as well as all processes and ports
           created hereafter are to be traced.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">processes</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">All processes in the system as well as all processes created hereafter are to be traced.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ports</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">All ports in the system as well as all ports created hereafter are to be traced.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">new</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">All processes and ports created after the call is are to be traced.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">new_processes</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">All processes created after the call is are to be traced.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">new_ports</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">All ports created after the call is are to be traced.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">existing</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">All existing processes and ports are traced.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">existing_processes</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">All existing processes are traced.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">existing_ports</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">All existing ports are traced.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">atom()</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The process or port with the corresponding registered name is traced. The process or
           port may be a remote process (on another Erlang node). The node must be
           added with the <fo:inline font-style="italic"><fo:inline font-family="monospace">n/1</fo:inline></fo:inline> or
           <fo:inline font-style="italic"><fo:inline font-family="monospace">tracer/3</fo:inline></fo:inline> function.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">integer()</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The process <fo:inline font-family="monospace">&lt;0.Item.0&gt;</fo:inline> is traced.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">{X, Y, Z}</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">The process <fo:inline font-family="monospace">&lt;X.Y.Z&gt;</fo:inline> is traced. </fo:block></fo:block-container>
              <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">string()</fo:inline></fo:block>
              <fo:block-container><fo:block start-indent="2em">If the <fo:inline font-family="monospace">Item</fo:inline> is a string "&lt;X.Y.Z&gt;"
                      as returned from <fo:inline font-style="italic"><fo:inline font-family="monospace">pid_to_list/1</fo:inline></fo:inline>,
                      the process <fo:inline font-family="monospace">&lt;X.Y.Z&gt;</fo:inline> is traced.
              </fo:block></fo:block-container>
          </fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When enabling an <fo:inline font-family="monospace">Item</fo:inline> that represents a group of processes,
        the <fo:inline font-family="monospace">Item</fo:inline> is enabled on all nodes added with the
        <fo:inline font-style="italic"><fo:inline font-family="monospace">n/1</fo:inline></fo:inline> or
        <fo:inline font-style="italic"><fo:inline font-family="monospace">tracer/3</fo:inline></fo:inline> function.</fo:block>

        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">Flags</fo:inline> can be a single atom,
          or a list of flags. The available flags are:
          </fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">s (send)</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Traces the messages the process or port sends.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">r (receive)</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Traces the messages the process or port receives.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">m (messages)</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Traces the messages the process or port receives and sends.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">c (call)</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Traces global function calls for the process
              according to the trace patterns set in the system (see tp/2).</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">p (procs)</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Traces process related events to the process.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">ports</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Traces port related events to the port.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sos (set on spawn)</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Lets all processes created by the traced
              process inherit the trace flags 
              of the traced process.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sol (set on link)</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Lets another process, <fo:inline font-family="monospace">P2</fo:inline>, inherit the
              trace flags of the traced 
              process whenever the traced process links to <fo:inline font-family="monospace">P2</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sofs (set on first spawn)</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is the same as <fo:inline font-family="monospace">sos</fo:inline>, but only 
              for the first process spawned by the traced process.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">sofl (set on first link)</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is the same as <fo:inline font-family="monospace">sol</fo:inline>, but only for
              the first call to
              <fo:inline font-style="italic"><fo:inline font-family="monospace">link/1</fo:inline></fo:inline> by the traced process.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">all</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Sets all flags except <fo:inline font-family="monospace">silent</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">clear</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Clears all flags.
              </fo:block>
          </fo:block></fo:block-container>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The list can also include any of the flags allowed in 
            <fo:inline font-style="italic"><fo:inline font-family="monospace">erlang:trace/3</fo:inline></fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function returns either an error tuple or a tuple
          <fo:inline font-family="monospace">{ok, List}</fo:inline>. The <fo:inline font-family="monospace">List</fo:inline> consists of
          specifications of how many processes and ports that matched (in the
          case of a pure pid() exactly 1). The specification of
          matched processes is <fo:inline font-family="monospace">{matched, Node, N}</fo:inline>. If the
          remote processor call,<fo:inline font-family="monospace">rpc</fo:inline>, to a remote node fails,
          the <fo:inline font-family="monospace">rpc</fo:inline> error message is delivered as a fourth
          argument and the number of matched processes are 0. Note
          that the result {ok, List} may contain a list where
          <fo:inline font-family="monospace">rpc</fo:inline> calls to one, several or even all nodes failed.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1333760">c(Mod, Fun, Args)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-family="monospace">c(Mod, Fun, Args, all)</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1337344">c(Mod, Fun, Args, Flags)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Evaluates the expression <fo:inline font-family="monospace">apply(Mod, Fun, Args)</fo:inline> with the trace
          flags in <fo:inline font-family="monospace">Flags</fo:inline> set. This is a convenient way to trace processes 
          from the Erlang shell.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1341392">i() -&gt; ok</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Displays information about all traced processes and ports.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1343648">tp(Module,MatchSpec)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as tp({Module, '_', '_'}, MatchSpec)</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1345952">tp(Module,Function,MatchSpec)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as tp({Module, Function, '_'}, MatchSpec)</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1348272">tp(Module, Function, Arity, MatchSpec)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as tp({Module, Function, Arity}, MatchSpec)</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1350592">tp({Module, Function, Arity}, MatchSpec) -&gt; {ok, MatchDesc} | {error, term()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = atom() | '_'</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Function = atom() | '_'</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Arity = integer() |'_'</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MatchSpec = integer() | Built-inAlias | [] | match_spec()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Built-inAlias = x | c | cx</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MatchDesc = [MatchInfo]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MatchInfo = {saved, integer()} | MatchNum</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MatchNum = {matched, node(), integer()} | {matched, node(), 0, RPCError}</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function enables call trace for one or more
          functions. All exported functions matching the <fo:inline font-family="monospace">{Module, Function, Arity}</fo:inline>
          argument will be concerned, but the
          <fo:inline font-family="monospace">match_spec()</fo:inline> may further narrow down the set of function
          calls generating trace messages.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For a description of the <fo:inline font-family="monospace">match_spec()</fo:inline> syntax,
          please turn to the
          <fo:inline font-weight="bold">User's guide</fo:inline> part of the online
          documentation for the runtime system (<fo:inline font-weight="bold">erts</fo:inline>). The
          chapter <fo:inline font-style="italic"><fo:inline font-weight="bold">Match Specifications in Erlang</fo:inline></fo:inline>
          explains the general match specification "language".
          The most common generic match specifications used can be
          found as <fo:inline font-family="monospace">Built-inAlias</fo:inline>', see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ltp/0</fo:inline></fo:inline> below for details.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The Module, Function and/or Arity parts of the tuple may
          be specified as the atom <fo:inline font-family="monospace">'_'</fo:inline> which is a "wild-card"
          matching all modules/functions/arities. Note, if the
          Module is specified as <fo:inline font-family="monospace">'_'</fo:inline>, the Function and Arity
          parts have to be specified as '_' too. The same holds for the
          Functions relation to the Arity.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All nodes added with <fo:inline font-style="italic"><fo:inline font-family="monospace">n/1</fo:inline></fo:inline> or
            <fo:inline font-style="italic"><fo:inline font-family="monospace">tracer/3</fo:inline></fo:inline> will
          be affected by this call, and if Module is not <fo:inline font-family="monospace">'_'</fo:inline>
          the module will be loaded on all nodes.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function returns either an error tuple or a tuple
          <fo:inline font-family="monospace">{ok, List}</fo:inline>. The <fo:inline font-family="monospace">List</fo:inline> consists of specifications of how
          many functions that matched, in the same way as the processes and ports
          are presented in the return value of <fo:inline font-style="italic"><fo:inline font-family="monospace">p/2</fo:inline></fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There may be a tuple <fo:inline font-family="monospace">{saved, N}</fo:inline> in the return value,
          if the MatchSpec is other
          than []. The integer <fo:inline font-family="monospace">N</fo:inline> may then be used in
          subsequent calls to this function and will stand as an
          "alias" for the given expression. There are also a couple of
          built-in aliases for common expressions, see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">ltp/0</fo:inline></fo:inline> below for details.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If an error is returned, it can be due to errors in
          compilation of the match specification. Such errors are
          presented as a list of tuples <fo:inline font-family="monospace">{error, string()}</fo:inline> where
          the string is a textual explanation of the compilation
          error. An example:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
(x@y)4&gt; <fo:inline font-weight="bold">dbg:tp({dbg,ltp,0},[{[],[],[{message, two, arguments}, {noexist}]}]).</fo:inline>
{error,
 [{error,"Special form 'message' called with wrong number of
          arguments in {message,two,arguments}."},
  {error,"Function noexist/1 does_not_exist."}]}</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1180400">tpl(Module,MatchSpec)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as tpl({Module, '_', '_'}, MatchSpec)</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1182720">tpl(Module,Function,MatchSpec)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as tpl({Module, Function, '_'}, MatchSpec)</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1185056">tpl(Module, Function, Arity, MatchSpec)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as tpl({Module, Function, Arity}, MatchSpec)</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1187392">tpl({Module, Function, Arity}, MatchSpec) -&gt; {ok, MatchDesc} | {error, term()}</fo:block></fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function works as <fo:inline font-style="italic"><fo:inline font-family="monospace">tp/2</fo:inline></fo:inline>, but enables
          tracing for local calls (and local functions) as well as for
          global calls (and functions).</fo:block>
      </fo:block>


    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1040128">tpe(Event, MatchSpec) -&gt; {ok, MatchDesc} | {error, term()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Event = send | 'receive'</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MatchSpec = integer() | Built-inAlias | [] | match_spec()</fo:block></fo:list-item-body></fo:list-item>
	<fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Built-inAlias = x | c | cx</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MatchDesc = [MatchInfo]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MatchInfo = {saved, integer()} | MatchNum</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MatchNum = {matched, node(), 1} | {matched, node(), 0, RPCError}</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function associates a match specification with trace event
	  <fo:inline font-family="monospace">send</fo:inline> or <fo:inline font-family="monospace">'receive'</fo:inline>. By default all executed <fo:inline font-family="monospace">send</fo:inline>
	  and <fo:inline font-family="monospace">'receive'</fo:inline> events are traced if enabled for a process.
	  A match specification can be used to filter traced events
	  based on sender, receiver and/or message content.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For a description of the <fo:inline font-family="monospace">match_spec()</fo:inline> syntax,
          please turn to the <fo:inline font-weight="bold">User's guide</fo:inline> part of the online
          documentation for the runtime system (<fo:inline font-weight="bold">erts</fo:inline>). The
          chapter <fo:inline font-style="italic"><fo:inline font-weight="bold">Match Specifications in Erlang</fo:inline></fo:inline>
          explains the general match specification "language".</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For <fo:inline font-family="monospace">send</fo:inline>, the matching is done on the list <fo:inline font-family="monospace">[Receiver, Msg]</fo:inline>.
	  <fo:inline font-family="monospace">Receiver</fo:inline> is the process or port identity of the receiver and
	  <fo:inline font-family="monospace">Msg</fo:inline> is the message term. The pid of the sending process can be
	  accessed with the guard function <fo:inline font-family="monospace">self/0</fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For <fo:inline font-family="monospace">'receive'</fo:inline>, the matching is done on the list <fo:inline font-family="monospace">[Node, Sender, Msg]</fo:inline>.
	  <fo:inline font-family="monospace">Node</fo:inline> is the node name of the sender. <fo:inline font-family="monospace">Sender</fo:inline> is the
	  process or port identity of the sender, or the atom
	  <fo:inline font-family="monospace">undefined</fo:inline> if the sender is not known (which may
	  be the case for remote senders). <fo:inline font-family="monospace">Msg</fo:inline> is the
	  message term. The pid of the receiving process can be
	  accessed with the guard function <fo:inline font-family="monospace">self/0</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All nodes added with <fo:inline font-style="italic"><fo:inline font-family="monospace">n/1</fo:inline></fo:inline> or
          <fo:inline font-style="italic"><fo:inline font-family="monospace">tracer/3</fo:inline></fo:inline> will
          be affected by this call.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The return value is the same as for
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">tp/2</fo:inline></fo:inline>. The number of matched
	  events are never larger than 1 as <fo:inline font-family="monospace">tpe/2</fo:inline> does not
	  accept any form of wildcards for argument <fo:inline font-family="monospace">Event</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1061488">ctp()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as ctp({'_', '_', '_'})</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1063776">ctp(Module)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as ctp({Module, '_', '_'})</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1066064">ctp(Module, Function)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as ctp({Module, Function, '_'})</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1068352">ctp(Module, Function, Arity)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as ctp({Module, Function, Arity})</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1070656">ctp({Module, Function, Arity}) -&gt; {ok, MatchDesc} | {error, term()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Module = atom() | '_'</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Function = atom() | '_'</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Arity = integer() | '_'</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MatchDesc = [MatchNum]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MatchNum = {matched, node(), integer()} | {matched, node(), 0, RPCError}</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function disables call tracing on the specified
          functions. The semantics of the parameter is the same
          as for the corresponding function specification in
          <fo:inline font-style="italic"><fo:inline font-family="monospace">tp/2</fo:inline></fo:inline> or <fo:inline font-style="italic"><fo:inline font-family="monospace">tpl/2</fo:inline></fo:inline>. Both local and global call trace
          is disabled. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The return value reflects how many functions that matched,
            and is constructed as described in <fo:inline font-style="italic"><fo:inline font-family="monospace">tp/2</fo:inline></fo:inline>. No tuple
          <fo:inline font-family="monospace">{saved, N}</fo:inline> is however ever returned (for obvious reasons).</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1201120">ctpl()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as ctpl({'_', '_', '_'})</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1203408">ctpl(Module)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as ctpl({Module, '_', '_'})</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1205696">ctpl(Module, Function)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as ctpl({Module, Function, '_'})</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1207984">ctpl(Module, Function, Arity)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as ctpl({Module, Function, Arity})</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1210288">ctpl({Module, Function, Arity}) -&gt; {ok, MatchDesc} | {error, term()}</fo:block></fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function works as <fo:inline font-style="italic"><fo:inline font-family="monospace">ctp/1</fo:inline></fo:inline>, but only disables
              tracing set up with <fo:inline font-style="italic"><fo:inline font-family="monospace">tpl/2</fo:inline></fo:inline>
              (not with <fo:inline font-style="italic"><fo:inline font-family="monospace">tp/2</fo:inline></fo:inline>).</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1215200">ctpg()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as ctpg({'_', '_', '_'})</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1217488">ctpg(Module)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as ctpg({Module, '_', '_'})</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1219776">ctpg(Module, Function)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as ctpg({Module, Function, '_'})</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1222064">ctpg(Module, Function, Arity)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as ctpg({Module, Function, Arity})</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1224368">ctpg({Module, Function, Arity}) -&gt; {ok, MatchDesc} | {error, term()}</fo:block></fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function works as <fo:inline font-style="italic"><fo:inline font-family="monospace">ctp/1</fo:inline></fo:inline>, but only disables
              tracing set up with <fo:inline font-style="italic"><fo:inline font-family="monospace">tp/2</fo:inline></fo:inline>
              (not with <fo:inline font-style="italic"><fo:inline font-family="monospace">tpl/2</fo:inline></fo:inline>).</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1229280">ctpe(Event) -&gt; {ok, MatchDesc} | {error, term()}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Event = send | 'receive'</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MatchDesc = [MatchNum]</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">MatchNum = {matched, node(), 1} | {matched, node(), 0, RPCError}</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function clears match specifications for the specified
	  trace event (<fo:inline font-family="monospace">send</fo:inline> or <fo:inline font-family="monospace">'receive'</fo:inline>). It will revert back
	  to the default behavior of tracing all triggered events.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The return value follow the same style as for
	  <fo:inline font-style="italic"><fo:inline font-family="monospace">ctp/1</fo:inline></fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1235600">ltp() -&gt; ok</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Use this function to recall all match specifications previously
          used in the session (i. e. previously saved during calls
          to <fo:inline font-style="italic"><fo:inline font-family="monospace">tp/2</fo:inline></fo:inline>, and built-in match specifications.
          This is very useful, as a complicated
          match_spec can be quite awkward to write. Note that the
          match specifications are lost if <fo:inline font-style="italic"><fo:inline font-family="monospace">stop/0</fo:inline></fo:inline> is called.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Match specifications used can be saved in a file (if a
          read-write file system is present) for use in later
          debugging sessions, see <fo:inline font-style="italic"><fo:inline font-family="monospace">wtp/1</fo:inline></fo:inline>
          and <fo:inline font-style="italic"><fo:inline font-family="monospace">rtp/1</fo:inline></fo:inline></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There are three built-in trace patterns:
	  <fo:inline font-family="monospace">exception_trace</fo:inline>, <fo:inline font-family="monospace">caller_trace</fo:inline> 
	  and <fo:inline font-family="monospace">caller_exception_trace</fo:inline> (or <fo:inline font-family="monospace">x</fo:inline>, <fo:inline font-family="monospace">c</fo:inline> and 
	  <fo:inline font-family="monospace">cx</fo:inline> respectively). 
	  Exception trace sets a trace which will show function names, 
	  parameters, return values and exceptions thrown from functions. 
	  Caller traces display function names, parameters and information 
	  about which function called it. An example using a built-in alias:</fo:block>
	  <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
(x@y)4&gt; <fo:inline font-weight="bold">dbg:tp(lists,sort,cx).</fo:inline>
{ok,[{matched,nonode@nohost,2},{saved,cx}]}
(x@y)4&gt; <fo:inline font-weight="bold">lists:sort([2,1]).</fo:inline>
(&lt;0.32.0&gt;) call lists:sort([2,1]) ({erl_eval,do_apply,5})
(&lt;0.32.0&gt;) returned from lists:sort/1 -&gt; [1,2]
[1,2]</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1246912">dtp() -&gt; ok</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Use this function to "forget" all match specifications
            saved during calls to <fo:inline font-style="italic"><fo:inline font-family="monospace">tp/2</fo:inline></fo:inline>.
            This is useful when one wants to restore other match
            specifications from a file with <fo:inline font-style="italic"><fo:inline font-family="monospace">rtp/1</fo:inline></fo:inline>. Use
            <fo:inline font-style="italic"><fo:inline font-family="monospace">dtp/1</fo:inline></fo:inline> to delete specific saved match specifications.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1251920">dtp(N) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">N = integer()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Use this function to "forget" a specific match specification
            saved during calls to <fo:inline font-style="italic"><fo:inline font-family="monospace">tp/2</fo:inline></fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1256000">wtp(Name) -&gt; ok | {error, IOError}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">IOError = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function will save all match specifications saved
            during the session (during calls to <fo:inline font-style="italic"><fo:inline font-family="monospace">tp/2</fo:inline></fo:inline>)
          and built-in match specifications in a text
          file with the name designated by <fo:inline font-family="monospace">Name</fo:inline>. The format
          of the file is textual, why it can be edited with an
          ordinary text editor, and then restored with
          <fo:inline font-style="italic"><fo:inline font-family="monospace">rtp/1</fo:inline></fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Each match spec in the file ends with a full stop
          (<fo:inline font-family="monospace">.</fo:inline>) and new (syntactically correct) match
          specifications can be added to the file manually.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function returns <fo:inline font-family="monospace">ok</fo:inline> or an error tuple where the
          second element contains the I/O error that made the
          writing impossible.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1264112">rtp(Name) -&gt; ok | {error, Error}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Name = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Error = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function reads match specifications from a file
           (possibly) generated by the <fo:inline font-style="italic"><fo:inline font-family="monospace">wtp/1</fo:inline></fo:inline>
           function. It checks
          the syntax of all match specifications and verifies that
          they are correct. The error handling principle is "all or
          nothing", i. e. if some of the match specifications are
          wrong, none of the specifications are added to the list of
          saved match specifications for the running system. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The match specifications in the file are <fo:inline font-weight="bold">merged</fo:inline>
          with the current match specifications, so that no duplicates
          are generated. Use <fo:inline font-style="italic"><fo:inline font-family="monospace">ltp/0</fo:inline></fo:inline>
          to see what numbers were
          assigned to the specifications from the file.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function will return an error, either due to I/O
          problems (like a non existing or non readable file) or due
          to file format problems. The errors from a bad format file
          are in a more or less textual format, which will give a hint
          to what's causing the problem.
        </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1271696">n(Nodename) -&gt; {ok, Nodename} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Nodename = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Reason = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">dbg</fo:inline> server keeps a list of nodes where tracing
            should be performed. Whenever a <fo:inline font-style="italic"><fo:inline font-family="monospace">tp/2</fo:inline></fo:inline> call or a
            <fo:inline font-style="italic"><fo:inline font-family="monospace">p/2</fo:inline></fo:inline> call is made, it is executed for all nodes in this
            list including the local node (except for <fo:inline font-style="italic"><fo:inline font-family="monospace">p/2</fo:inline></fo:inline> with a
          specific <fo:inline font-family="monospace">pid()</fo:inline> or <fo:inline font-family="monospace">port()</fo:inline> as first argument, in which case the
          command is executed only on the node where the designated
          process or port resides).
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function adds a remote node (<fo:inline font-family="monospace">Nodename</fo:inline>) to the
          list of nodes where tracing is performed. It starts a tracer
          process on the remote node, which will send all trace messages
          to the tracer process on the local node (via the Erlang
          distribution). If no tracer process is running on the local
          node, the error reason <fo:inline font-family="monospace">no_local_tracer</fo:inline> is returned. The
          tracer process on the local node must be started with the
          <fo:inline font-style="italic"><fo:inline font-family="monospace">tracer/0/2</fo:inline></fo:inline> function.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Nodename</fo:inline> is the local node, the error reason
          <fo:inline font-family="monospace">cant_add_local_node</fo:inline> is returned.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If a trace port (see <fo:inline font-style="italic"><fo:inline font-family="monospace">trace_port/2</fo:inline></fo:inline>) is
          running on the local node, remote nodes can not be traced with
          a tracer process. The error reason
          <fo:inline font-family="monospace">cant_trace_remote_pid_to_local_port</fo:inline> is returned. A
          trace port can however be started on the remote node with the
          <fo:inline font-style="italic"><fo:inline font-family="monospace">tracer/3</fo:inline></fo:inline> function.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function will also return an error if the node
          <fo:inline font-family="monospace">Nodename</fo:inline> is not reachable.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1287296">cn(Nodename) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Nodename = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Clears a node from the list of traced nodes. Subsequent
            calls to <fo:inline font-style="italic"><fo:inline font-family="monospace">tp/2</fo:inline></fo:inline> and
            <fo:inline font-style="italic"><fo:inline font-family="monospace">p/2</fo:inline></fo:inline> will not consider that
            node, but tracing already activated on the node will continue
            to be in effect.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">ok</fo:inline>, cannot fail.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1293136">ln() -&gt; ok</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Shows the list of traced nodes on the console.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1295440">tracer() -&gt; {ok, pid()} | {error, already_started}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function starts a server on the local node that will
          be the recipient of all trace messages. All subsequent calls
          to <fo:inline font-style="italic"><fo:inline font-family="monospace">p/2</fo:inline></fo:inline> will result in messages sent to the newly
          started trace server.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A trace server started in this way will simply display the
          trace messages in a formatted way in the Erlang shell
          (i. e. use io:format). See <fo:inline font-style="italic"><fo:inline font-family="monospace">tracer/2</fo:inline></fo:inline>
          for a description of how the trace message handler can be customized.
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To start a similar tracer on a remote node, use <fo:inline font-style="italic"><fo:inline font-family="monospace">n/1</fo:inline></fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1301536">tracer(Type, Data) -&gt; {ok, pid()} | {error, Error}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Type = port | process | module</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Data = PortGenerator | HandlerSpec | ModuleSpec</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PortGenerator = fun() (no arguments)</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Error = term()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">HandlerSpec = {HandlerFun, InitialData}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">HandlerFun = fun() (two arguments)</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ModuleSpec = fun() (no arguments) | {TracerModule, TracerState}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">ModuleModule = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">InitialData = TracerState = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function starts a tracer server with additional
          parameters on the local node. The first parameter, the
          <fo:inline font-family="monospace">Type</fo:inline>, indicates if trace messages should be handled
          by a receiving process (<fo:inline font-family="monospace">process</fo:inline>), by a tracer port
          (<fo:inline font-family="monospace">port</fo:inline>) or by a tracer module
          (<fo:inline font-family="monospace">module</fo:inline>). For a description about tracer ports see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">trace_port/2</fo:inline></fo:inline>
          and for a tracer modules see
          <fo:inline font-style="italic"><fo:inline font-family="monospace">erl_tracer</fo:inline></fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Type</fo:inline> is <fo:inline font-family="monospace">process</fo:inline>, a message handler function can
          be specified (<fo:inline font-family="monospace">HandlerSpec</fo:inline>). The handler function, which
          should be a <fo:inline font-family="monospace">fun</fo:inline> taking two arguments, will be called
          for each trace message, with the first argument containing the
          message as it is and the second argument containing the return
          value from the last invocation of the fun. The initial value
          of the second parameter is specified in the <fo:inline font-family="monospace">InitialData</fo:inline>
          part of the <fo:inline font-family="monospace">HandlerSpec</fo:inline>. The <fo:inline font-family="monospace">HandlerFun</fo:inline> may
          choose any appropriate action to take when invoked, and can
          save a state for the next invocation by returning it.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Type</fo:inline> is <fo:inline font-family="monospace">port</fo:inline>, then the second parameter should
          be a <fo:inline font-weight="bold">fun</fo:inline> which takes no arguments and returns a
          newly opened trace port when called. Such a <fo:inline font-weight="bold">fun</fo:inline> is
          preferably generated by calling <fo:inline font-style="italic"><fo:inline font-family="monospace">trace_port/2</fo:inline></fo:inline>.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">if <fo:inline font-family="monospace">Type</fo:inline> is <fo:inline font-family="monospace">module</fo:inline>, then the second parameter should
            be either a tuple describing the <fo:inline font-style="italic"><fo:inline font-family="monospace">erl_tracer</fo:inline></fo:inline>
          module to be used for tracing and the state to be used for
          that tracer module or a fun returning the same tuple.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If an error is returned, it can either be due to a tracer
          server already running (<fo:inline font-family="monospace">{error,already_started}</fo:inline>) or
          due to the <fo:inline font-family="monospace">HandlerFun</fo:inline> throwing an exception.
          </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">To start a similar tracer on a remote node, use
            <fo:inline font-style="italic"><fo:inline font-family="monospace">tracer/3</fo:inline></fo:inline>.
        </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1837280">tracer(Nodename, Type, Data) -&gt; {ok, Nodename} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Nodename = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is equivalent to <fo:inline font-style="italic"><fo:inline font-family="monospace">tracer/2</fo:inline></fo:inline>, but acts on
          the given node. A tracer is started on the node
          (<fo:inline font-family="monospace">Nodename</fo:inline>) and the node is added to the list of traced nodes.
          </fo:block>
        <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is not equivalent to <fo:inline font-style="italic"><fo:inline font-family="monospace">n/1</fo:inline></fo:inline>. While
                <fo:inline font-style="italic"><fo:inline font-family="monospace">n/1</fo:inline></fo:inline> starts a process tracer which redirects all trace
            information to a process tracer on the local node (i.e. the
            trace control node), <fo:inline font-style="italic"><fo:inline font-family="monospace">tracer/3</fo:inline></fo:inline> starts a tracer of any
            type which is independent of the tracer on the trace control
            node.</fo:block>
        </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For details, see <fo:inline font-style="italic"><fo:inline font-family="monospace">tracer/2</fo:inline></fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1846912">trace_port(Type, Parameters) -&gt; fun()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Type = ip | file</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Parameters = Filename | WrapFilesSpec | IPPortSpec</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Filename = string() | [string()] | atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">WrapFilesSpec = {Filename, wrap, Suffix} | {Filename, wrap, Suffix, WrapSize} | {Filename, wrap, Suffix, WrapSize, WrapCnt}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Suffix = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">WrapSize = integer() &gt;= 0 | {time, WrapTime}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">WrapTime = integer() &gt;= 1</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">WrapCnt = integer() &gt;= 1</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">IpPortSpec = PortNumber | {PortNumber, QueSize}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PortNumber = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">QueSize = integer()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function creates a trace port generating <fo:inline font-weight="bold">fun</fo:inline>.
          The <fo:inline font-weight="bold">fun</fo:inline> takes no arguments and returns a newly opened
          trace port. The return value from this function is suitable as
          a second parameter to tracer/2, i.e. <fo:inline font-family="monospace">dbg:tracer(port, dbg:trace_port(ip, 4711))</fo:inline>. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A trace port is an
          Erlang port to a dynamically linked in driver that handles
          trace messages directly, without the overhead of sending them
          as messages in the Erlang virtual machine.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Two trace drivers are currently implemented, the
          <fo:inline font-family="monospace">file</fo:inline> and the <fo:inline font-family="monospace">ip</fo:inline> trace drivers. The file driver
          sends all trace messages into one or several binary files, 
          from where they later can be fetched and processed with the
          <fo:inline font-style="italic"><fo:inline font-family="monospace">trace_client/2</fo:inline></fo:inline> function. The ip driver opens a TCP/IP
          port where it listens for connections. When a client
          (preferably started by calling <fo:inline font-style="italic"><fo:inline font-family="monospace">trace_client/2</fo:inline></fo:inline> on
          another Erlang node) connects, all trace messages are sent
          over the IP network for further processing by the remote
          client. </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Using a trace port significantly lowers the overhead
          imposed by using tracing.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The file trace driver expects a filename or a wrap files 
          specification as parameter. A file is written with a high
          degree of buffering, why all trace messages are <fo:inline font-weight="bold">not</fo:inline>
          guaranteed to be saved in the file in case of a system
          crash. That is the price to pay for low tracing overhead.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A wrap files specification is used to limit the disk
          space consumed by the trace. The trace is written to a
          limited number of files each with a limited size. 
          The actual filenames are <fo:inline font-family="monospace">Filename ++ SeqCnt ++ Suffix</fo:inline>, where <fo:inline font-family="monospace">SeqCnt</fo:inline> counts as a decimal string
          from <fo:inline font-family="monospace">0</fo:inline> to <fo:inline font-family="monospace">WrapCnt</fo:inline> and then around again from
          <fo:inline font-family="monospace">0</fo:inline>. When a trace term written to 
          the current file makes it longer than <fo:inline font-family="monospace">WrapSize</fo:inline>,
          that file is closed, if the number of files in this 
          wrap trace is as many as <fo:inline font-family="monospace">WrapCnt</fo:inline> the oldest file
          is deleted then a new file is opened to become the current.
          Thus, when a wrap trace has been stopped, there are at most
          <fo:inline font-family="monospace">WrapCnt</fo:inline> trace files saved with a size of at least
          <fo:inline font-family="monospace">WrapSize</fo:inline> (but not much bigger), except for 
          the last file that might even be empty. The default values
          are <fo:inline font-family="monospace">WrapSize = 128*1024</fo:inline> and <fo:inline font-family="monospace">WrapCnt = 8</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">SeqCnt</fo:inline> values in the filenames are all in the
          range <fo:inline font-family="monospace">0</fo:inline> through <fo:inline font-family="monospace">WrapCnt</fo:inline> with a gap in the
          circular sequence. The gap is needed to find the end of the
          trace.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If the <fo:inline font-family="monospace">WrapSize</fo:inline> is specified as 
          <fo:inline font-family="monospace">{time, WrapTime}</fo:inline>, the current file is closed when it
          has been open more than <fo:inline font-family="monospace">WrapTime</fo:inline> milliseconds,
          regardless of it being empty or not.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The ip trace driver has a queue of <fo:inline font-family="monospace">QueSize</fo:inline> messages
          waiting to be delivered. If the driver cannot deliver messages
          as fast as they are produced by the runtime system, a special
          message is sent, which indicates how many messages that are
          dropped. That message will arrive at the handler function
          specified in <fo:inline font-style="italic"><fo:inline font-family="monospace">trace_client/3</fo:inline></fo:inline>
          as the tuple <fo:inline font-family="monospace">{drop, N}</fo:inline> where <fo:inline font-family="monospace">N</fo:inline> is the number of consecutive messages
          dropped. In case of heavy tracing, drop's are likely to occur,
          and they surely occur if no client is reading the trace
          messages. The default value of <fo:inline font-family="monospace">QueSize</fo:inline> is 200.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1876080">flush_trace_port()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-family="monospace">flush_trace_port(node())</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1878800">flush_trace_port(Nodename) -&gt; ok | {error, Reason}</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-family="monospace">trace_port_control(Nodename,flush)</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1881584">trace_port_control(Operation)</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-family="monospace">trace_port_control(node(),Operation)</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1884336">trace_port_control(Nodename,Operation) -&gt;  ok | {ok, Result} | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Nodename = atom()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is used to do a control operation on the
          active trace port driver on the given node
          (<fo:inline font-family="monospace">Nodename</fo:inline>). Which operations are allowed as well
          as their return values depend on which trace driver
          is used.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns either <fo:inline font-family="monospace">ok</fo:inline> or <fo:inline font-family="monospace">{ok, Result}</fo:inline> 
          if the operation was successful, or <fo:inline font-family="monospace">{error, Reason}</fo:inline> 
          if the current tracer is a process 
          or if it is a port not supporting the operation.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The allowed values for <fo:inline font-family="monospace">Operation</fo:inline> are:</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">flush</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function is used to flush the internal buffers 
              held by a trace port driver. Currently only the 
              file trace driver supports this operation. 
              Returns <fo:inline font-family="monospace">ok</fo:inline>.</fo:block>
          </fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">get_listen_port</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">
            <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns <fo:inline font-family="monospace">{ok, IpPort}</fo:inline> where <fo:inline font-family="monospace">IpPort</fo:inline> is
              the IP port number used by the driver listen socket.
              Only the ip trace driver supports this operation.</fo:block>
          </fo:block></fo:block-container>
        </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1896096">trace_client(Type, Parameters) -&gt; pid()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Type = ip | file | follow_file</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Parameters = Filename | WrapFilesSpec | IPClientPortSpec</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Filename = string() | [string()] | atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">WrapFilesSpec = see trace_port/2</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Suffix = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">IpClientPortSpec = PortNumber | {Hostname, PortNumber}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PortNumber = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Hostname = string()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function starts a trace client that reads the output
          created by a trace port driver and handles it in mostly the
          same way as a tracer process created by the
          <fo:inline font-style="italic"><fo:inline font-family="monospace">tracer/0</fo:inline></fo:inline> function.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Type</fo:inline> is <fo:inline font-family="monospace">file</fo:inline>, the client reads all trace
          messages stored in the file named <fo:inline font-family="monospace">Filename</fo:inline> or 
          specified by <fo:inline font-family="monospace">WrapFilesSpec</fo:inline> (must be the same as used
          when creating the trace, see trace_port/2)
          and let's the default handler function format the
          messages on the console. This is one way to interpret the data
          stored in a file by the file trace port driver.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Type</fo:inline> is <fo:inline font-family="monospace">follow_file</fo:inline>, the client behaves as
          in the <fo:inline font-family="monospace">file</fo:inline> case, but keeps trying to read (and
          process) more data
          from the file until stopped by <fo:inline font-style="italic"><fo:inline font-family="monospace">stop_trace_client/1</fo:inline></fo:inline>.
          <fo:inline font-family="monospace">WrapFilesSpec</fo:inline> is not allowed as second argument 
          for this <fo:inline font-family="monospace">Type</fo:inline>.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">Type</fo:inline> is <fo:inline font-family="monospace">ip</fo:inline>, the client connects to the
          TCP/IP port <fo:inline font-family="monospace">PortNumber</fo:inline> on the host <fo:inline font-family="monospace">Hostname</fo:inline>,
          from where it reads trace messages until the TCP/IP connection
          is closed. If no <fo:inline font-family="monospace">Hostname</fo:inline> is specified, the local host
          is assumed.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As an example, one can let trace messages be sent over the
          network to another Erlang node (preferably <fo:inline font-weight="bold">not</fo:inline>
          distributed), where the formatting occurs:</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">On the node <fo:inline font-family="monospace">stack</fo:inline> there's an Erlang node
          <fo:inline font-family="monospace">ant@stack</fo:inline>, in the shell, type the following:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
ant@stack&gt; <fo:inline font-weight="bold">dbg:tracer(port, dbg:trace_port(ip,4711)).</fo:inline>
&lt;0.17.0&gt;
ant@stack&gt; <fo:inline font-weight="bold">dbg:p(self(), send).</fo:inline>
{ok,1}</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">All trace messages are now sent to the trace port driver,
          which in turn listens for connections on the TCP/IP port
          4711. If we want to see the messages on another node,
          preferably on another host, we do like this:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
-&gt; <fo:inline font-weight="bold">dbg:trace_client(ip, {"stack", 4711}).</fo:inline>
&lt;0.42.0&gt;</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If we now send a message from the shell on the node
          <fo:inline font-family="monospace">ant@stack</fo:inline>, where all sends from the shell are traced:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
ant@stack&gt; <fo:inline font-weight="bold">self() ! hello.</fo:inline>
hello</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The following will appear at the console on the node that
          started the trace client:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
(&lt;0.23.0&gt;) &lt;0.23.0&gt; ! hello
(&lt;0.23.0&gt;) &lt;0.22.0&gt; ! {shell_rep,&lt;0.23.0&gt;,{value,hello,[],[]}}</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The last line is generated due to internal message passing
          in the Erlang shell. The process id's will vary.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1921536">trace_client(Type, Parameters, HandlerSpec) -&gt; pid()</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Type = ip | file | follow_file</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Parameters = Filename | WrapFilesSpec | IPClientPortSpec</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Filename = string() | [string()] | atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">WrapFilesSpec = see trace_port/2</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Suffix = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">IpClientPortSpec = PortNumber | {Hostname, PortNumber}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">PortNumber = integer()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Hostname = string()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">HandlerSpec = {HandlerFun, InitialData}</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">HandlerFun = fun() (two arguments)</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">InitialData = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function works exactly as <fo:inline font-style="italic"><fo:inline font-family="monospace">trace_client/2</fo:inline></fo:inline>,
          but allows you to write your own handler function. The handler
          function works mostly as the one described in
          <fo:inline font-style="italic"><fo:inline font-family="monospace">tracer/2</fo:inline></fo:inline>, but will also have to be prepared to handle
          trace messages of the form <fo:inline font-family="monospace">{drop, N}</fo:inline>, where <fo:inline font-family="monospace">N</fo:inline> is
          the number of dropped messages. This pseudo trace message will
          only occur if the ip trace driver is used.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">For trace type <fo:inline font-family="monospace">file</fo:inline>, the pseudo trace message
          <fo:inline font-family="monospace">end_of_trace</fo:inline> will appear at the end of the trace. The
          return value from the handler function is in this case
          ignored.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1933824">stop_trace_client(Pid) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Pid = pid()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function shuts down a previously started trace
          client. The <fo:inline font-family="monospace">Pid</fo:inline> argument is the process id returned
          from the <fo:inline font-style="italic"><fo:inline font-family="monospace">trace_client/2</fo:inline></fo:inline>
          or <fo:inline font-style="italic"><fo:inline font-family="monospace">trace_client/3</fo:inline></fo:inline> call.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1939248">get_tracer()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Equivalent to <fo:inline font-family="monospace">get_tracer(node())</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1941952">get_tracer(Nodename) -&gt; {ok, Tracer}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Nodename = atom()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Tracer = port() | pid() | {module(), term()}</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the process, port or tracer module to which all trace
          messages are sent.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1945712">stop() -&gt; ok</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stops the <fo:inline font-family="monospace">dbg</fo:inline> server and clears all trace flags for
          all processes and all local trace patterns for all functions. Also
          shuts down all trace clients and closes all trace ports.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that no global trace patterns are affected by this
          function.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp1949552">stop_clear() -&gt; ok</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Same as stop/0, but also clears all trace patterns on global functions calls.</fo:block>
      </fo:block>
  

  <fo:block id="idp1953072" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Simple examples - tracing from the shell</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The simplest way of tracing from the Erlang shell is to use
      <fo:inline font-family="monospace">dbg:c/3</fo:inline> or <fo:inline font-family="monospace">dbg:c/4</fo:inline>, e.g. tracing the function
      <fo:inline font-family="monospace">dbg:get_tracer/0</fo:inline>:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
(tiger@durin)84&gt; <fo:inline font-weight="bold">dbg:c(dbg,get_tracer,[]).</fo:inline>
(&lt;0.154.0&gt;) &lt;0.152.0&gt; ! {&lt;0.154.0&gt;,{get_tracer,tiger@durin}}
(&lt;0.154.0&gt;) out {dbg,req,1}
(&lt;0.154.0&gt;) &lt;&lt; {dbg,{ok,&lt;0.153.0&gt;}}
(&lt;0.154.0&gt;) in {dbg,req,1}
(&lt;0.154.0&gt;) &lt;&lt; timeout
{ok,&lt;0.153.0&gt;}
(tiger@durin)85&gt;</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Another way of tracing from the shell is to explicitly start a
      <fo:inline font-weight="bold">tracer</fo:inline> and then set the <fo:inline font-weight="bold">trace flags</fo:inline> of your
      choice on the processes you want to trace, e.g. trace messages and
      process events:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
(tiger@durin)66&gt; <fo:inline font-weight="bold">Pid = spawn(fun() -&gt; receive {From,Msg} -&gt; From ! Msg end end).</fo:inline>
&lt;0.126.0&gt;
(tiger@durin)67&gt; <fo:inline font-weight="bold">dbg:tracer().</fo:inline>
{ok,&lt;0.128.0&gt;}
(tiger@durin)68&gt; <fo:inline font-weight="bold">dbg:p(Pid,[m,procs]).</fo:inline>
{ok,[{matched,tiger@durin,1}]}
(tiger@durin)69&gt; <fo:inline font-weight="bold">Pid ! {self(),hello}.</fo:inline>
(&lt;0.126.0&gt;) &lt;&lt; {&lt;0.116.0&gt;,hello}
{&lt;0.116.0&gt;,hello}
(&lt;0.126.0&gt;) &lt;&lt; timeout
(&lt;0.126.0&gt;) &lt;0.116.0&gt; ! hello
(&lt;0.126.0&gt;) exit normal
(tiger@durin)70&gt; <fo:inline font-weight="bold">flush().</fo:inline>
Shell got hello
ok
(tiger@durin)71&gt;</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you set the <fo:inline font-family="monospace">call</fo:inline> trace flag, you also have to set a
      <fo:inline font-weight="bold">trace pattern</fo:inline> for the functions you want to trace:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
(tiger@durin)77&gt; <fo:inline font-weight="bold">dbg:tracer().</fo:inline>
{ok,&lt;0.142.0&gt;}
(tiger@durin)78&gt; <fo:inline font-weight="bold">dbg:p(all,call).</fo:inline>
{ok,[{matched,tiger@durin,3}]}
(tiger@durin)79&gt; <fo:inline font-weight="bold">dbg:tp(dbg,get_tracer,0,[]).</fo:inline>
{ok,[{matched,tiger@durin,1}]}
(tiger@durin)80&gt; <fo:inline font-weight="bold">dbg:get_tracer().</fo:inline>
(&lt;0.116.0&gt;) call dbg:get_tracer()
{ok,&lt;0.143.0&gt;}
(tiger@durin)81&gt; <fo:inline font-weight="bold">dbg:tp(dbg,get_tracer,0,[{'_',[],[{return_trace}]}]).</fo:inline>
{ok,[{matched,tiger@durin,1},{saved,1}]}
(tiger@durin)82&gt; <fo:inline font-weight="bold">dbg:get_tracer().</fo:inline>
(&lt;0.116.0&gt;) call dbg:get_tracer()
(&lt;0.116.0&gt;) returned from dbg:get_tracer/0 -&gt; {ok,&lt;0.143.0&gt;}
{ok,&lt;0.143.0&gt;}
(tiger@durin)83&gt;</fo:block>
  

  <fo:block id="idp1966800" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Advanced topics - combining with seq_trace</fo:block>
    
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-family="monospace">dbg</fo:inline> module is primarily targeted towards
      tracing through the <fo:inline font-family="monospace">erlang:trace/3</fo:inline> function. It is
      sometimes desired to trace messages in a more delicate way, which
      can be done with the help of the <fo:inline font-family="monospace">seq_trace</fo:inline> module. 
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">seq_trace</fo:inline> implements sequential tracing (known in the
      AXE10 world, and sometimes called "forlopp tracing"). <fo:inline font-family="monospace">dbg</fo:inline>
      can interpret messages generated from <fo:inline font-family="monospace">seq_trace</fo:inline> and the
      same tracer function for both types of tracing can be used. The
      <fo:inline font-family="monospace">seq_trace</fo:inline> messages can even be sent to a trace port for
      further analysis.
      </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">As a match specification can turn on sequential tracing, the
      combination of <fo:inline font-family="monospace">dbg</fo:inline> and <fo:inline font-family="monospace">seq_trace</fo:inline> can be quite
      powerful.  This brief example shows a session where sequential
      tracing is used:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
1&gt; <fo:inline font-weight="bold">dbg:tracer().</fo:inline>
{ok,&lt;0.30.0&gt;}
2&gt; <fo:inline font-weight="bold">{ok, Tracer} = dbg:get_tracer().</fo:inline>
{ok,&lt;0.31.0&gt;}
3&gt; <fo:inline font-weight="bold">seq_trace:set_system_tracer(Tracer).</fo:inline>
false
4&gt; <fo:inline font-weight="bold">dbg:tp(dbg, get_tracer, 0, [{[],[],[{set_seq_token, send, true}]}]).</fo:inline>
{ok,[{matched,nonode@nohost,1},{saved,1}]}
5&gt; <fo:inline font-weight="bold">dbg:p(all,call).</fo:inline>
{ok,[{matched,nonode@nohost,22}]}
6&gt; <fo:inline font-weight="bold">dbg:get_tracer(), seq_trace:set_token([]).</fo:inline>
(&lt;0.25.0&gt;) call dbg:get_tracer()
SeqTrace [0]: (&lt;0.25.0&gt;) &lt;0.30.0&gt; ! {&lt;0.25.0&gt;,get_tracer} [Serial: {2,4}]
SeqTrace [0]: (&lt;0.30.0&gt;) &lt;0.25.0&gt; ! {dbg,{ok,&lt;0.31.0&gt;}} [Serial: {4,5}]
{1,0,5,&lt;0.30.0&gt;,4}</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This session sets the system_tracer to the same process as
      the ordinary tracer process (i. e. &lt;0.31.0&gt;) and sets the
      trace pattern for the function <fo:inline font-family="monospace">dbg:get_tracer</fo:inline> to one that
      has the action of setting a sequential token. When the function
      is called by a traced process (all processes are traced in this
      case), the process gets "contaminated" by the token and
      <fo:inline font-family="monospace">seq_trace</fo:inline> messages are sent both for the server request
      and the response. The <fo:inline font-family="monospace">seq_trace:set_token([])</fo:inline> after the
      call clears the <fo:inline font-family="monospace">seq_trace</fo:inline> token, why no messages are sent
      when the answer propagates via the shell to the console port. 
      The output would otherwise have been more noisy.</fo:block>
  

  <fo:block id="idp1979808" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Note of caution</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When tracing function calls on a group leader process (an IO process), there is risk 
      of causing a deadlock. This will happen if a group leader process generates a trace 
      message and the tracer process, by calling the trace handler function, sends an IO 
      request to the same group leader. The problem can only occur if the trace handler 
      prints to tty using an <fo:inline font-family="monospace">io</fo:inline> function such as <fo:inline font-style="italic"><fo:inline font-family="monospace">format/2</fo:inline></fo:inline>.
      Note that when
      <fo:inline font-family="monospace">dbg:p(all,call)</fo:inline> is called, IO processes are also traced.
      Here's an example:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
%% Using a default line editing shell
1&gt; <fo:inline font-weight="bold">dbg:tracer(process, {fun(Msg,_) -&gt; io:format("~p~n", [Msg]), 0 end, 0}).</fo:inline>
{ok,&lt;0.37.0&gt;}
2&gt; <fo:inline font-weight="bold">dbg:p(all, [call]).</fo:inline>
{ok,[{matched,nonode@nohost,25}]}
3&gt; <fo:inline font-weight="bold">dbg:tp(mymod,[{'_',[],[]}]).</fo:inline>
{ok,[{matched,nonode@nohost,0},{saved,1}]}
4&gt; <fo:inline font-weight="bold">mymod:</fo:inline> % TAB pressed here
%% -- Deadlock --</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here's another example:</fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
%% Using a shell without line editing (oldshell)
1&gt; <fo:inline font-weight="bold">dbg:tracer(process).</fo:inline>
{ok,&lt;0.31.0&gt;}
2&gt; <fo:inline font-weight="bold">dbg:p(all, [call]).</fo:inline>
{ok,[{matched,nonode@nohost,25}]}
3&gt; <fo:inline font-weight="bold">dbg:tp(lists,[{'_',[],[]}]).</fo:inline>
{ok,[{matched,nonode@nohost,0},{saved,1}]}
% -- Deadlock --</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The reason we get a deadlock in the first example is because when TAB is pressed 
      to expand the function name, the group leader (which handles character input) calls
      <fo:inline font-family="monospace">mymod:module_info()</fo:inline>. This generates a trace message which, in turn, causes the 
      tracer process to send an IO request to the group leader (by calling <fo:inline font-family="monospace">io:format/2</fo:inline>).
      We end up in a deadlock.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In the second example we use the default trace handler function. This handler
      prints to tty by sending IO requests to the <fo:inline font-family="monospace">user</fo:inline> process. When Erlang is
      started in oldshell mode, the shell process will have <fo:inline font-family="monospace">user</fo:inline> as its
      group leader and so will the tracer process in this example. Since <fo:inline font-family="monospace">user</fo:inline> calls 
      functions in <fo:inline font-family="monospace">lists</fo:inline> we end up in a deadlock as soon as the first IO request is sent.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Here are a few suggestions for how to avoid deadlock:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Don't trace the group leader of the tracer process. If tracing has been switched on
       for all processes, call <fo:inline font-family="monospace">dbg:p(TracerGLPid,clear)</fo:inline> to stop tracing the group leader
       (<fo:inline font-family="monospace">TracerGLPid</fo:inline>). <fo:inline font-family="monospace">process_info(TracerPid,group_leader)</fo:inline> tells you 
       which process this is (<fo:inline font-family="monospace">TracerPid</fo:inline> is returned from <fo:inline font-family="monospace">dbg:get_tracer/0</fo:inline>).</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Don't trace the <fo:inline font-family="monospace">user</fo:inline> process if using the default trace handler function.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>In your own trace handler function, call <fo:inline font-family="monospace">erlang:display/1</fo:inline> instead of an
      <fo:inline font-family="monospace">io</fo:inline> function or, if <fo:inline font-family="monospace">user</fo:inline> is not used as group leader, print to 
      <fo:inline font-family="monospace">user</fo:inline> instead of the default group leader. Example:
      <fo:inline font-family="monospace">io:format(user,Str,Args)</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
  
<fo:block page-break-before="always" id="idp2007904" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">dyntrace</fo:marker>dyntrace</fo:block>Erlang module</fo:block>
  <fo:block/>
  dyntrace
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module implements interfaces to dynamic tracing, should such be compiled into the virtual machine. For a standard and/or commercial build, no dynamic tracing is available, in which case none of the functions in this module is usable or give any effect.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Should dynamic tracing be enabled in the current build, either by configuring with <fo:inline font-family="monospace">./configure --with-dynamic-trace=dtrace</fo:inline> or with  <fo:inline font-family="monospace">./configure --with-dynamic-trace=systemtap</fo:inline>, the module can be used for two things:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Trigger the user-probe <fo:inline font-family="monospace">user_trace_i4s4</fo:inline> in the NIF library <fo:inline font-family="monospace">dyntrace.so</fo:inline> by calling <fo:inline font-family="monospace">dyntrace:p/{1,2,3,4,5,6,7,8}</fo:inline>.</fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>Set a user specified tag that will be present in the trace messages of both the <fo:inline font-family="monospace">efile_drv</fo:inline> and the user-probe mentioned above.</fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Both building with dynamic trace probes and using them is experimental and unsupported by Erlang/OTP. It is included as an option for the developer to trace and debug performance issues in their systems.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The original implementation is mostly done by Scott Lystiger Fritchie as an Open Source Contribution and it should be viewed as such even though the source for dynamic tracing as well as this module is included in the main distribution. However, the ability to use dynamic tracing of the virtual machine is a very valuable contribution which OTP has every intention to maintain as a tool for the developer.</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">How to write <fo:inline font-family="monospace">d</fo:inline> programs or <fo:inline font-family="monospace">systemtap</fo:inline> scripts can be learned from books and from a lot of pages on the Internet. This manual page does not include any documentation about using the dynamic trace tools of respective platform. The <fo:inline font-family="monospace">examples</fo:inline> directory of the <fo:inline font-family="monospace">runtime_tools</fo:inline> application however contains comprehensive examples of both <fo:inline font-family="monospace">d</fo:inline> and <fo:inline font-family="monospace">systemtap</fo:inline> programs that will help you get started. Another source of information is the <fo:inline font-style="italic">dtrace</fo:inline> and <fo:inline font-style="italic">systemtap</fo:inline> chapters in the Runtime Tools Users' Guide.</fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2021888">available() -&gt; boolean()</fo:block></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function uses the NIF library to determine if dynamic
	tracing is available. Usually calling <fo:inline font-style="italic">erlang:system_info/1</fo:inline>
	is a better indicator of the availability of dynamic
	tracing.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The function will throw an exception if the <fo:inline font-family="monospace">dyntrace</fo:inline> NIF library could not be loaded by the on_load function of this module.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2026016">p() -&gt; true | false | error | badarg</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calling this function will trigger the "user" trace probe user_trace_i4s4 in the dyntrace NIF module, sending a trace message only containing the user tag and zeroes/empty strings in all other fields.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2028480">p(integer() | string()) -&gt; true | false | error | badarg</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calling this function will trigger the "user" trace probe user_trace_i4s4 in the dyntrace NIF module, sending a trace message containing the user tag and the integer or string parameter in the first integer/string field.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2030992">p(integer() | string(), integer() | string()) -&gt; true | false | error | badarg</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calling this function will trigger the "user" trace probe user_trace_i4s4 in the dyntrace NIF module, sending a trace message containing the user tag and the integer() or string() parameters as the first fields of respective type. integer() parameters should be put before any string() parameters. I.e. <fo:inline font-family="monospace">p(1,"Hello")</fo:inline> is ok, as is <fo:inline font-family="monospace">p(1,1)</fo:inline> and <fo:inline font-family="monospace">p("Hello","Again")</fo:inline>, but not <fo:inline font-family="monospace">p("Hello",1)</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2035392">p(integer() | string(), integer() | string(), integer() | string()) -&gt; true | false | error | badarg</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calling this function will trigger the "user" trace probe user_trace_i4s4 in the dyntrace NIF module, sending a trace message containing the user tag and the integer() or string() parameters as the first fields of respective type. integer() parameters should be put before any string() parameters, as in <fo:inline font-style="italic">p/2</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2038736">p(integer() | string(), integer() | string(), integer() | string(), integer() | string()) -&gt; true | false | error | badarg</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calling this function will trigger the "user" trace probe user_trace_i4s4 in the dyntrace NIF module, sending a trace message containing the user tag and the integer() or string() parameters as the first fields of respective type. integer() parameters should be put before any string() parameters, as in <fo:inline font-style="italic">p/2</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2042112">p(integer(), integer() | string(), integer() | string(), integer() | string(), string()) -&gt; true | false | error | badarg</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calling this function will trigger the "user" trace probe user_trace_i4s4 in the dyntrace NIF module, sending a trace message containing the user tag and the integer() or string() parameters as the first fields of respective type. integer() parameters should be put before any string() parameters, as in <fo:inline font-style="italic">p/2</fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There can be no more than four parameters of any type (integer() or string()), so the first parameter has to be an integer() and the last a string().</fo:block> 
      </fo:block>
     <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2046064">p(integer(), integer(), integer() | string(), integer() | string(), string(), string()) -&gt; true | false | error | badarg</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calling this function will trigger the "user" trace probe user_trace_i4s4 in the dyntrace NIF module, sending a trace message containing the user tag and the integer() or string() parameters as the first fields of respective type. integer() parameters should be put before any string() parameters, as in <fo:inline font-style="italic">p/2</fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There can be no more than four parameters of any type (integer() or string()), so the first two parameters has to be integer()'s and the last two string()'s.</fo:block> 
      </fo:block>
     <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2050032">p(integer(), integer(), integer(), integer() | string(), string(), string(), string()) -&gt; true | false | error | badarg</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calling this function will trigger the "user" trace probe user_trace_i4s4 in the dyntrace NIF module, sending a trace message containing the user tag and the integer() or string() parameters as the first fields of respective type. integer() parameters should be put before any string() parameters, as in <fo:inline font-style="italic">p/2</fo:inline>.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">There can be no more than four parameters of any type (integer() or string()), so the first three parameters has to be integer()'s and the last three string()'s.</fo:block> 
      </fo:block>
     <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2053984">p(integer(), integer(), integer(), integer(), string(), string(), string(), string()) -&gt; true | false | error | badarg</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Calling this function will trigger the "user" trace probe user_trace_i4s4 in the dyntrace NIF module, sending a trace message containing all the integer()'s and string()'s provided, as well as any user tag set in the current process.</fo:block> 
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2056560">get_tag() -&gt; binary() | undefined</fo:block></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function returns the user tag set in the current
	process. If no tag is set or dynamic tracing is not available,
	it returns <fo:inline font-family="monospace">undefined</fo:inline></fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2059232">get_tag() -&gt; binary() | undefined</fo:block></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function returns the user tag set in the current
	process or, if no user tag is present, the last user tag sent
	to the process together with a message (in the same way as
	<fo:inline font-style="italic">sequential trace
	tokens</fo:inline> are spread to other processes together with
	messages. For an explanation of how user tags can be spread
	together with messages, see <fo:inline font-style="italic">spread_tag/1</fo:inline>. If no tag is
	found or dynamic tracing is not available, it returns
	<fo:inline font-family="monospace">undefined</fo:inline></fo:block>
      </fo:block>
    
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2063600">put_tag(Item) -&gt; binary() | undefined </fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Item = iodata()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function sets the user tag of the current process. The user tag is a binary(), but can be specified as any iodata(), which is automatically converted to a binary by this function.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The user tag is provided to the user probes triggered by calls top <fo:inline font-family="monospace">dyntrace:p/{1,2,3,4,5,6,7,8}</fo:inline> as well as probes in the efile_driver. In the future, user tags might be added to more probes.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The old user tag (if any) is returned, or <fo:inline font-family="monospace">undefined</fo:inline> if no user tag was present or dynamic tracing is not enabled.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2068976">spread_tag(boolean()) -&gt; TagData</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TagData = opaque data that can be used as parameter to <fo:inline font-style="italic">restore_tag/1</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function controls if user tags are to be spread to other processes with the next message. Spreading of user tags work like spreading of sequential trace tokens, so that a received user tag will be active in the process until the next message arrives (if that message does not also contain the user tag.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This functionality is used when a client process communicates with a file i/o-server to spread the user tag to the I/O-server and then down to the efile_drv driver. By using <fo:inline font-family="monospace">spread_tag/1</fo:inline> and <fo:inline font-family="monospace">restore_tag/1</fo:inline>, one can enable or disable spreading of user tags to other processes and then restore the previous state of the user tag. The TagData returned from this call contains all previous information so the state (including any previously spread user tags) will be completely restored by a later call to <fo:inline font-family="monospace">restore_tag/1</fo:inline>.</fo:block> 
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The <fo:inline font-style="italic">file</fo:inline> module already spread's tags, so there is noo need to manually call these function to get user tags spread to the efile driver through that module.</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The most use of this function would be if one for example uses the <fo:inline font-style="italic">io</fo:inline> module to communicate with an I/O-server for a regular file, like in the following example:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
f() -&gt;
   {ok, F} = file:open("test.tst",[write]),
   Saved = dyntrace:spread_tag(true),
   io:format(F,"Hello world!",[]),
   dyntrace:restore_tag(Saved),
   file:close(F).
</fo:block>
          <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">In this example, any user tag set in the calling process will be spread to the I/O-server when the io:format call is done.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2079056">restore_tag(TagData) -&gt; true</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">TagData = opaque data returned by <fo:inline font-style="italic">spread_tag/1</fo:inline></fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Restores the previous state of user tags and their spreading as it was before a call to <fo:inline font-style="italic">spread_tag/1</fo:inline>. Note that the restoring is not limited to the same process, one can utilize this to turn off spreding in one process and restore it in a newly created, the one that actually is going to send messages:</fo:block>
<fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">
f() -&gt;
    TagData=dyntrace:spread_tag(false),
    spawn(fun() -&gt;
             dyntrace:restore_tag(TagData),
             do_something()
          end),
    do_something_else(),
    dyntrace:restore_tag(TagData).
</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Correctly handling user tags and their spreading might take some effort, as Erlang programs tend to send and receive messages so that sometimes the user tag gets lost due to various things, like double receives or communication with a port (ports do not handle user tags, in the same way as they do not handle regular sequential trace tokens).</fo:block>
      </fo:block>
  
 <fo:block page-break-before="always" id="idp2092144" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">erts_alloc_config</fo:marker>erts_alloc_config</fo:block>Erlang module</fo:block>
  <fo:block/>
  erts_alloc_config
  <fo:block/>
  
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erts_alloc_config</fo:inline> is currently an experimental
        tool and might be subject to backward incompatible
        changes.</fo:block>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">erts_alloc(3)</fo:inline> is an
      Erlang Run-Time System internal memory allocator library.
      <fo:inline font-family="monospace">erts_alloc_config</fo:inline> is intended to be used to aid creation
      of an <fo:inline font-style="italic">erts_alloc(3)</fo:inline>
      configuration that is suitable for a limited number of runtime
      scenarios. The configuration that <fo:inline font-family="monospace">erts_alloc_config</fo:inline>
      produce is intended as a suggestion, and may need to be
      adjusted manually.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The configuration is created based on information about a number
      of runtime scenarios. It is obviously impossible to foresee every
      runtime scenario that can occur. The important scenarios are
      those that cause maximum or minimum load on specific memory
      allocators. Load in this context is total size of memory blocks
      allocated.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The current implementation of <fo:inline font-family="monospace">erts_alloc_config</fo:inline> concentrate
      on configuration of multi-block carriers. Information gathered
      when a runtime scenario is saved is mainly current and maximum use
      of multi-block carriers. If a parameter that change the use of
      multi-block carriers is changed, a previously generated
      configuration is invalid and <fo:inline font-family="monospace">erts_alloc_config</fo:inline> needs
      to be run again. It is mainly the single block carrier threshold
      that effects the use of multi-block carriers, but other
      single-block carrier parameters might as well. If another value of
      a single block carrier parameter than the default is desired, use
      the desired value when running <fo:inline font-family="monospace">erts_alloc_config</fo:inline>.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A configuration is created in the following way:</fo:block>
    <fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Pass the <fo:inline font-style="italic">+Mea config</fo:inline>
	   command-line flag to the Erlang runtime system you are going
	   to use for creation of the allocator configuration. It will
	   disable features that prevent <fo:inline font-family="monospace">erts_alloc_config</fo:inline> from
	   doing its job. Note, you should <fo:inline font-weight="bold">not</fo:inline> use this flag
	   when using the created configuration. Also note that it is
	   important that you use the same
	   <fo:inline font-style="italic">amount of schedulers</fo:inline>
	   when creating the configuration as you are going the use on
	   the system using the configuration.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Run your applications with different scenarios (the more
          the better) and save information about each scenario by calling
          <fo:inline font-style="italic">save_scenario/0</fo:inline>.
          It may be hard to know when the applications are at an (for
          <fo:inline font-family="monospace">erts_alloc_config</fo:inline>) important runtime scenario. A good
          approach may therefore be to call
          <fo:inline font-style="italic">save_scenario/0</fo:inline>
          repeatedly, e.g. once every tenth second. Note that it is
          important that your applications reach the runtime scenarios
          that are important for <fo:inline font-family="monospace">erts_alloc_config</fo:inline> when you are
          saving scenarios; otherwise, the configuration may perform
          bad.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">When you have covered all scenarios, call
          <fo:inline font-style="italic">make_config/1</fo:inline>
          in order to create a configuration. The configuration is
          written to a file that you have chosen. This configuration
          file can later be read by an Erlang runtime-system at
          startup. Pass the command line argument 
          <fo:inline font-style="italic">-args_file FileName</fo:inline>
          to the <fo:inline font-style="italic">erl(1)</fo:inline> command.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
      <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block>
          •
        </fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The configuration produced by <fo:inline font-family="monospace">erts_alloc_config</fo:inline> may
          need to be manually adjusted as already stated. Do not modify the
          file produced by <fo:inline font-family="monospace">erts_alloc_config</fo:inline>; instead, put your
          modifications in another file and load this file after the
          file produced by <fo:inline font-family="monospace">erts_alloc_config</fo:inline>. That is, put the
          <fo:inline font-style="italic">-args_file FileName</fo:inline>
          argument that reads your modification file later on the
          command-line than the 
          <fo:inline font-style="italic">-args_file FileName</fo:inline>
          argument that reads the configuration file produced by
          <fo:inline font-family="monospace">erts_alloc_config</fo:inline>. If a memory allocation parameter
          appear multiple times, the last version of will be used, i.e.,
          you can override parameters in the configuration file produced
          by <fo:inline font-family="monospace">erts_alloc_config</fo:inline>. Doing it this way simplifies
          things when you want to rerun <fo:inline font-family="monospace">erts_alloc_config</fo:inline>.</fo:block>
      </fo:block></fo:list-item-body></fo:list-item>
    </fo:list-block>
    <fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block>
      <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The configuration created by <fo:inline font-family="monospace">erts_alloc_config</fo:inline> may
        perform bad, ever horrible, for runtime scenarios that are very
        different from the ones saved when creating the
        configuration. You are, therefore, advised to rerun
        <fo:inline font-family="monospace">erts_alloc_config</fo:inline> if the applications run when the
        configuration was made are changed, or if the load on the
        applications have changed since the configuration was made. You
        are also advised to rerun <fo:inline font-family="monospace">erts_alloc_config</fo:inline> if the Erlang
        runtime system used is changed.</fo:block>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">erts_alloc_config</fo:inline> saves information about runtime scenarios
      and performs computations in a server that is automatically
      started. The server register itself under the name
      <fo:inline font-family="monospace">'__erts_alloc_config__'</fo:inline>.</fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2122960">save_scenario() -&gt; ok | {error, Error}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Error = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">save_scenario/0</fo:inline> saves information about the current
          runtime scenario. This information will later be used when
          <fo:inline font-style="italic">make_config/0</fo:inline>,
          or <fo:inline font-style="italic">make_config/1</fo:inline>
          is called.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The first time <fo:inline font-family="monospace">save_scenario/0</fo:inline> is called a server
          will be started. This server will save runtime scenarios. All
          saved scenarios can be removed by calling
          <fo:inline font-style="italic">stop/0</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2129728">make_config() -&gt; ok | {error, Error}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Error = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This is the same as calling
          <fo:inline font-style="italic">make_config(group_leader())</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2133648">make_config(FileNameOrIODev) -&gt; ok | {error, Error}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">FileNameOrIODev = string() | io_device()</fo:block></fo:list-item-body></fo:list-item>
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Error = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-family="monospace">make_config/1</fo:inline> uses the information previously saved by
          <fo:inline font-style="italic">save_scenario/0</fo:inline>
          in order to produce an <fo:inline font-family="monospace">erts_alloc</fo:inline> configuration. At
          least one scenario have had to be saved. All scenarios
          previously saved will be used when creating the
          configuration.  </fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If <fo:inline font-family="monospace">FileNameOrIODev</fo:inline> is a <fo:inline font-family="monospace">string()</fo:inline>,
          <fo:inline font-family="monospace">make_config/1</fo:inline> will use <fo:inline font-family="monospace">FileNameOrIODev</fo:inline> as a
          filename. A file named <fo:inline font-family="monospace">FileNameOrIODev</fo:inline> is created and
          the configuration will be written to that file. If
          <fo:inline font-family="monospace">FileNameOrIODev</fo:inline> is an
          <fo:inline font-style="italic">io_device()</fo:inline> (see the
          documentation of the module
          <fo:inline font-style="italic">io</fo:inline>), the configuration
          will be written to the io device.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em"><fo:block id="idp2143728">stop() -&gt; ok | {error, Error}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em">
        <fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="monospace">Error = term()</fo:block></fo:list-item-body></fo:list-item>
      </fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stops the server that saves runtime scenarios.</fo:block>
      </fo:block>
  

  <fo:block id="idp2146912" font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">See Also</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-style="italic">erts_alloc(3)</fo:inline>,
      <fo:inline font-style="italic">erl(1)</fo:inline>,
      <fo:inline font-style="italic">io(3)</fo:inline></fo:block>
  
<fo:block page-break-before="always" id="idp2157712" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">msacc</fo:marker>msacc</fo:block>Erlang module</fo:block>
  <fo:block/>
  msacc
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This module implements some convenience functions for analyzing
    microstate accounting data. For details about how to use the basic api and
    what the different states represent see
    <fo:inline font-style="italic"><fo:inline font-family="monospace">
    erlang:statistics(microstate_accounting)</fo:inline></fo:inline>.</fo:block>
    
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Basic Scenario</fo:inline></fo:block>
    <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap">1&gt; <fo:inline font-weight="bold">msacc:start(1000).</fo:inline>
ok
2&gt; <fo:inline font-weight="bold">msacc:print().</fo:inline>
Average thread real-time    : 1000513 us
Accumulated system run-time :    2213 us
Average scheduler run-time  :    1076 us

        Thread      aux check_io emulator       gc    other     port    sleep

Stats per thread:
     async( 0)    0.00%    0.00%    0.00%    0.00%    0.00%    0.00%  100.00%
     async( 1)    0.00%    0.00%    0.00%    0.00%    0.00%    0.00%  100.00%
       aux( 1)    0.00%    0.00%    0.00%    0.00%    0.00%    0.00%   99.99%
 scheduler( 1)    0.00%    0.03%    0.13%    0.00%    0.01%    0.00%   99.82%
 scheduler( 2)    0.00%    0.00%    0.00%    0.00%    0.03%    0.00%   99.97%

Stats per type:
         async    0.00%    0.00%    0.00%    0.00%    0.00%    0.00%  100.00%
           aux    0.00%    0.00%    0.00%    0.00%    0.00%    0.00%   99.99%
     scheduler    0.00%    0.02%    0.06%    0.00%    0.02%    0.00%   99.89%
ok
</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This first command enables microstate accounting for 1000 milliseconds.
    See <fo:inline font-style="italic"><fo:inline font-family="monospace">start/0</fo:inline></fo:inline>,
    <fo:inline font-style="italic"><fo:inline font-family="monospace">stop/0</fo:inline></fo:inline>,
    <fo:inline font-style="italic"><fo:inline font-family="monospace">reset/0</fo:inline></fo:inline> and
    <fo:inline font-style="italic"><fo:inline font-family="monospace">start/1</fo:inline></fo:inline> for more details.
    The second command prints the statistics gathered during that time.
    First three general statistics are printed.</fo:block>
    <fo:block space-after="0.25em" space-before="0.25em">
      <fo:block keep-with-next.within-page="always">Average real-time</fo:block>
      <fo:block-container><fo:block start-indent="2em">The average time spent collecting data in the threads.
      This should be close to the time which data was collected.
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">System run-time</fo:block>
      <fo:block-container><fo:block start-indent="2em">The total run-time of all threads in the system.
      This is what you get if you call <fo:inline font-family="monospace">msacc:stats(total_runtime,Stats).</fo:inline>
      </fo:block></fo:block-container>
      <fo:block keep-with-next.within-page="always">Average scheduler run-time</fo:block>
      <fo:block-container><fo:block start-indent="2em">The average run-time for the schedulers.
      This is the average amount of time the schedulers did not sleep.</fo:block></fo:block-container>
    </fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Then one column per state is printed with a the percentage of time this
    thread spent in the state out of it's own real-time. After the thread
    specific time, the accumulated time for each type of thread is printed in
    a similar format.</fo:block>
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Since we have the average real-time and the percentage spent in each
    state we can easily calculate the time spent in each state by multiplying
    <fo:inline font-family="monospace">Average thread real-time</fo:inline> with <fo:inline font-family="monospace">Thread state %</fo:inline>, i.e. to
    get the time Scheduler 1 spent in the emulator state we do
    <fo:inline font-family="monospace">1000513us * 0.13% = 1300us</fo:inline>.</fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Data Types</fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">msacc_data() = [<fo:inline font-style="italic">msacc_data_thread()</fo:inline>]</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">msacc_data_thread() = <fo:block/>    #{'$type' := msacc_data,<fo:block/>      type := <fo:inline font-style="italic">msacc_type()</fo:inline>,<fo:block/>      id := <fo:inline font-style="italic">msacc_id()</fo:inline>,<fo:block/>      counters := <fo:inline font-style="italic">msacc_data_counters()</fo:inline>}</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">msacc_data_counters() = #{<fo:inline font-style="italic">msacc_state()</fo:inline> =&gt; integer() &gt;= 0}</fo:block></fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A map containing the different microstate accounting states and
      the number of microseconds spent in it.</fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">msacc_stats() = [<fo:inline font-style="italic">msacc_stats_thread()</fo:inline>]</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">msacc_stats_thread() = <fo:block/>    #{'$type' := msacc_stats,<fo:block/>      type := <fo:inline font-style="italic">msacc_type()</fo:inline>,<fo:block/>      id := <fo:inline font-style="italic">msacc_id()</fo:inline>,<fo:block/>      system := float(),<fo:block/>      counters := <fo:inline font-style="italic">msacc_stats_counters()</fo:inline>}</fo:block></fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A map containing information about a specific thread. The
      percentages in the map can be either run-time or real-time depending
      on if <fo:inline font-family="monospace">runtime</fo:inline> or <fo:inline font-family="monospace">realtime</fo:inline> was requested from
      <fo:inline font-style="italic">stats/2</fo:inline>. <fo:inline font-family="monospace">system</fo:inline> is the
      percentage of total system time for this specific thread.</fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">msacc_stats_counters() = <fo:block/>    #{<fo:inline font-style="italic">msacc_state()</fo:inline> =&gt; #{thread := float(), system := float()}}</fo:block></fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">A map containing the different microstate accounting states. Each
      value in the map contains another map with the percentage of time that
      this thread has spent in the specific state. Both the percentage of
      <fo:inline font-family="monospace">system</fo:inline> time and the time for that specific <fo:inline font-family="monospace">thread</fo:inline> is part of
      the map.</fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">msacc_type() = scheduler | aux | async</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">msacc_id() = integer() &gt;= 0</fo:block></fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">msacc_state() = <fo:block/>    alloc |<fo:block/>    aux |<fo:block/>    bif |<fo:block/>    busy_wait |<fo:block/>    check_io |<fo:block/>    emulator |<fo:block/>    ets |<fo:block/>    gc |<fo:block/>    gc_fullsweep |<fo:block/>    nif |<fo:block/>    other |<fo:block/>    port |<fo:block/>    send |<fo:block/>    sleep |<fo:block/>    timers</fo:block></fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The different states that a thread can be in. See
      <fo:inline font-style="italic">
        erlang:statistics(microstate_accounting)</fo:inline> for details.
      </fo:block>
    <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">
      <fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">msacc_print_options() = #{system =&gt; boolean()}</fo:block></fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">The different options that can be given to
      <fo:inline font-style="italic"><fo:inline font-family="monospace">print/2</fo:inline></fo:inline>.
      </fo:block>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp2193760"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">available() -&gt; boolean()</fo:block></fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">This function checks whether microstate accounting
        is available or not.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp2196480"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">start() -&gt; boolean()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Start microstate accounting. Returns whether it was
        previously enabled or disabled.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp2199200"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">start(Time) -&gt; true</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Time = timeout()</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Resets all counters and then starts microstate accounting
        for the given milliseconds.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp2201920"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">stop() -&gt; boolean()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Stop microstate accounting.
        Returns whether is was previously enabled or disabled.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp2204640"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">reset() -&gt; boolean()</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Reset microstate accounting counters.
        Returns whether is was enabled or disabled.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp2207360"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">print() -&gt; ok</fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">
          Prints the current microstate accounting to standard out.
          Same as
          <fo:inline font-style="italic">
            <fo:inline font-family="monospace">msacc:print(msacc:stats(),#{}).</fo:inline>
          </fo:inline>
        </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp2211264"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">print(DataOrStats) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">DataOrStats = <fo:inline font-style="italic">msacc_data()</fo:inline> | <fo:inline font-style="italic">msacc_stats()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Print the given microstate statistics values to stdout.
        Same as
        <fo:inline font-style="italic">
          <fo:inline font-family="monospace">msacc:print(DataOrStats,#{}).</fo:inline>
        </fo:inline>
        </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp2215152"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">print(DataOrStats, Options) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">DataOrStats = <fo:inline font-style="italic">msacc_data()</fo:inline> | <fo:inline font-style="italic">msacc_stats()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Options = <fo:inline font-style="italic">msacc_print_options()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Print the given microstate statistics values to standard out.
        With many states this can be quite verbose. See the top of this
        reference manual for a brief description of what the fields mean.</fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">It is possible to print more specific types of statistics by
        first manipulating the <fo:inline font-family="monospace">DataOrStats</fo:inline> using
        <fo:inline font-style="italic"><fo:inline font-family="monospace">stats/2</fo:inline></fo:inline>.
        For instance if you want to print the percentage of run-time for each
        thread you can do:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap"><fo:inline font-weight="bold">msacc:print(msacc:stats(runtime,msacc:stats())).</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">If you want to only print run-time per thread type you can do:</fo:block>
        <fo:block background-color="#e0e0ff" font-family="DejaVuSansMono, monospace" font-size="0.8em" keep-together.within-page="auto" linefeed-treatment="preserve" padding-before="0em" padding-after="1em" space-after="1em" space-before="2em" margin-left="0.5em" margin-right="0.5em" white-space-collapse="false" white-space-treatment="preserve" wrap-option="no-wrap"><fo:inline font-weight="bold">msacc:print(msacc:stats(type,msacc:stats(runtime,msacc:stats()))).</fo:inline></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"><fo:inline font-weight="bold">Options</fo:inline></fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">system</fo:inline></fo:block><fo:block-container><fo:block start-indent="2em">Print percentage of time spent in each
          state out of system time as well as thread time.
          Default: false.</fo:block></fo:block-container>
        </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp2223632"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">print(FileOrDevice, DataOrStats, Options) -&gt; ok</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">FileOrDevice = <fo:inline font-style="italic">file:filename()</fo:inline> | <fo:inline font-style="italic">io:device()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">DataOrStats = <fo:inline font-style="italic">msacc_data()</fo:inline> | <fo:inline font-style="italic">msacc_stats()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Options = <fo:inline font-style="italic">msacc_print_options()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Print the given microstate statistics values to the given file
        or device. The other arguments behave the same way as for
        <fo:inline font-style="italic"><fo:inline font-family="monospace">print/2</fo:inline></fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp2227248"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">stats() -&gt; <fo:inline font-style="italic">msacc_data()</fo:inline></fo:block></fo:block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a runtime system independent version of the microstate
        statistics data presented by
        <fo:inline font-style="italic">
        <fo:inline font-family="monospace">erlang:statistics(microstate_accounting)</fo:inline></fo:inline>.
        All counters have been normalized to be in microsecond resolution.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp2230944"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">stats(Analysis, Stats) -&gt; integer() &gt;= 0</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Analysis = system_realtime | system_runtime</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Stats = <fo:inline font-style="italic">msacc_data()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns the system time for the given microstate statistics values.
        System time is the accumulated time of all threads.</fo:block>
        <fo:block space-after="0.25em" space-before="0.25em">
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">realtime</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Returns all time recorded for all threads.</fo:block></fo:block-container>
          <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">runtime</fo:inline></fo:block>
          <fo:block-container><fo:block start-indent="2em">Returns all time spent doing work for all threads, i.e.
          all time not spent in the <fo:inline font-family="monospace">sleep</fo:inline> state.</fo:block></fo:block-container>
        </fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp2236848"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">stats(Analysis, Stats) -&gt; <fo:inline font-style="italic">msacc_stats()</fo:inline></fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Analysis = realtime | runtime</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Stats = <fo:inline font-style="italic">msacc_data()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns fractions of real-time or run-time spent in the various
        threads from the given microstate statistics values.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp2239696"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">stats(Analysis, StatsOrData) -&gt; <fo:inline font-style="italic">msacc_data()</fo:inline> | <fo:inline font-style="italic">msacc_stats()</fo:inline></fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Analysis = type</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">StatsOrData = <fo:inline font-style="italic">msacc_data()</fo:inline> | <fo:inline font-style="italic">msacc_stats()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Returns a list of microstate statistics values where the values
        for all threads of the same type has been merged.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp2242544"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">to_file(Filename) -&gt; ok | {error, <fo:inline font-style="italic">file:posix()</fo:inline>}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filename = <fo:inline font-style="italic">file:name_all()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Dumps the current microstate statistics counters to a file that can
        be parsed with <fo:inline font-style="italic">
        file:consult/1</fo:inline>.</fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp2245808"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">from_file(Filename) -&gt; <fo:inline font-style="italic">msacc_data()</fo:inline></fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Filename = <fo:inline font-style="italic">file:name_all()</fo:inline></fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Read a file dump produced by <fo:inline font-style="italic">
        to_file(Filename)</fo:inline>.</fo:block>
      </fo:block>
  
<fo:block page-break-before="always" id="idp2256176" keep-with-next.within-page="always" space-after="2em" space-before="1em"><fo:block border-after-style="solid" border-after-width="1pt" font-family="DejaVuSans, sans-serif" font-size="1.5em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="1em"><fo:marker marker-class-name="chapter-title">system_information</fo:marker>system_information</fo:block>Erlang module</fo:block>
  <fo:block/>
  system_information
  <fo:block/>
  
    <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify"/>
  
  <fo:block font-family="DejaVuSans, sans-serif" font-size="1.33em" font-weight="normal" keep-with-next.within-page="always" space-after="0.3em" space-before="0.8em">Exports</fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp2258384"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">sanity_check() -&gt; ok | {failed, Failures}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Application = atom()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">ApplicationVersion = string()</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">MissingRuntimeDependencies = <fo:block/>    {missing_runtime_dependencies,<fo:block/>     ApplicationVersion,<fo:block/>     [ApplicationVersion]}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">InvalidApplicationVersion = <fo:block/>    {invalid_application_version, ApplicationVersion}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">InvalidAppFile = {invalid_app_file, Application}</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Failure = <fo:block/>    MissingRuntimeDependencies |<fo:block/>    InvalidApplicationVersion |<fo:block/>    InvalidAppFile</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Failures = [Failure]</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Performs a sanity check on the system. If no issues
	were found, <fo:inline font-family="monospace">ok</fo:inline> is returned. If issues were
	found, <fo:inline font-family="monospace">{failed, Failures}</fo:inline> is
	returned. All failures found will be part of the
	<fo:inline font-family="monospace">Failures</fo:inline> list. Currently defined
	<fo:inline font-family="monospace">Failure</fo:inline> elements in the
	<fo:inline font-family="monospace">Failures</fo:inline> list:</fo:block>
	<fo:block space-after="0.25em" space-before="0.25em">
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">InvalidAppFile</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An application has an invalid <fo:inline font-family="monospace">.app</fo:inline> file. The
	  second element identifies the application which has the
	  invalid <fo:inline font-family="monospace">.app</fo:inline> file.</fo:block></fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">InvalidApplicationVersion</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An application has an invalid application version.
	  The second element identifies the application version that
	  is invalid.</fo:block></fo:block></fo:block-container>
	  <fo:block keep-with-next.within-page="always"><fo:inline font-family="monospace">MissingRuntimeDependencies</fo:inline></fo:block>
	  <fo:block-container><fo:block start-indent="2em"><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An application is missing
	  <fo:inline font-style="italic">runtime
	  dependencies</fo:inline>. The second element identifies the
	  application (with version) that has missing dependencies.
	  The third element contains the missing dependencies.</fo:block>
	  <fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Note that this check use application versions that
	  are loaded, or will be loaded when used. You might have
	  application versions that satisfies all dependencies
	  installed in the system, but if those are not loaded this
	  check will fail. The system will of course also fail when
	  used like this. This may happen when you have multiple 
	  <fo:inline font-style="italic">branched
	  versions</fo:inline> of the same application installed in the
	  system, but you do not use a
	  <fo:inline font-style="italic">boot
	  script</fo:inline> identifing the correct application version.</fo:block>
	  </fo:block></fo:block-container>
	</fo:block>
	<fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Currently the sanity check is limited to verifying
	runtime dependencies found in the <fo:inline font-family="monospace">.app</fo:inline> files of
	all applications. More checks will be introduced in the
	future. This implies that the return type <fo:inline font-weight="bold">will</fo:inline>
	change in the future.</fo:block>
	<fo:block background-color="#d0fed0" space-after="1em" space-before="2em" text-align="justify" padding-before="1em" padding-after="0.3em" padding-left="0.5em" padding-right="0.5em" margin-left="0.5em" margin-right="0.5em" keep-together.within-page="always"><fo:block font-size="1.33em">Note:</fo:block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">An <fo:inline font-family="monospace">ok</fo:inline> return value only means that
	<fo:inline font-family="monospace">sanity_check/0</fo:inline> did not find any issues, <fo:inline font-weight="bold">not</fo:inline>
	that no issues exist.</fo:block></fo:block>
      </fo:block>
    <fo:block space-before="1.5em"><fo:block id="idp2276480"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">to_file(FileName) -&gt; ok | {error, Reason}</fo:block></fo:block><fo:block>Types:</fo:block><fo:list-block provisional-distance-between-starts="1.8em" provisional-label-separation="1em" space-after="0.25em" space-before="0.25em"><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">FileName = <fo:inline font-style="italic">file:name_all()</fo:inline></fo:block></fo:list-item-body></fo:list-item><fo:list-item space-after="0.25em"><fo:list-item-label end-indent="label-end()"><fo:block/></fo:list-item-label><fo:list-item-body start-indent="body-start()" format="justify"><fo:block font-weight="bold" font-family="DejaVuSansMono, monospace" keep-with-next.within-page="always" space-after="0.25em">Reason = <fo:inline font-style="italic">file:posix()</fo:inline> | badarg | terminated | system_limit</fo:block></fo:list-item-body></fo:list-item></fo:list-block><fo:block font-size="1em" space-after="0.5em" space-before="0.5em" text-align="justify">Writes  miscellaneous system information to file. This
      information will typically be requested by the Erlang/OTP team
      at Ericsson AB when reporting an issue.</fo:block></fo:block>
  
 </fo:flow>
  </fo:page-sequence>
</fo:root>
