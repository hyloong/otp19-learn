<module name="application">
<type>
  <name>application_opt</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-application_opt">application_opt()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{description, Description :: string()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{vsn, Vsn :: string()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{id, Id :: string()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{modules, [Module :: module()]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{registered, Names :: [Name :: atom()]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{applications, [Application :: atom()]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{included_applications, [Application :: atom()]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{env, [{Par :: atom(), Val :: term()}]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{start_phases,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[{Phase :: atom(), PhaseArgs :: term()}] | undefined} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{maxT, MaxT :: timeout()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{maxP, MaxP :: integer() &gt;= 1 | infinity} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{mod, Start :: {Module :: module(), StartArgs :: term()}}</typehead></typedecl>
  <anno>Application</anno>
  <anno>Description</anno>
  <anno>Id</anno>
  <anno>MaxP</anno>
  <anno>MaxT</anno>
  <anno>Module</anno>
  <anno>Name</anno>
  <anno>Names</anno>
  <anno>Par</anno>
  <anno>Phase</anno>
  <anno>PhaseArgs</anno>
  <anno>Start</anno>
  <anno>StartArgs</anno>
  <anno>Val</anno>
  <anno>Vsn</anno>
</type>
<type>
  <name>application_spec</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-application_spec">application_spec()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{application,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Application :: atom(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>AppSpecKeys :: [<seealso marker="#type-application_opt">application_opt()</seealso>]}</typehead></typedecl>
  <anno>AppSpecKeys</anno>
  <anno>Application</anno>
</type>
<type>
  <name>restart_type</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-restart_type">restart_type()</marker> = permanent | transient | temporary</typehead></typedecl>
</type>
<type>
  <name>start_type</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-start_type">start_type()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>normal |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{takeover, Node :: node()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{failover, Node :: node()}</typehead></typedecl>
  <anno>Node</anno>
</type>
<type>
  <name>tuple_of</name>
  <n_vars>1</n_vars>
  <typedecl>
      <typehead><marker id="type-tuple_of">tuple_of(_T)</marker> = tuple()</typehead></typedecl>
  <anno>_T</anno>
</type>
<spec>
  <name>ensure_all_started</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>ensure_all_started(Application) -&gt; {ok, Started} | {error, Reason}</head>
      <guard>
        <subtype><typename>Application</typename><string>Application = atom()</string></subtype>
        <subtype><typename>Started</typename><string>Started = [atom()]</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Application</anno>
  <anno>Reason</anno>
  <anno>Started</anno>
</spec>
<spec>
  <name>ensure_all_started</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>ensure_all_started(Application, Type) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, Started} | {error, Reason}</head>
      <guard>
        <subtype><typename>Application</typename><string>Application = atom()</string></subtype>
        <subtype><typename>Type</typename><string>Type = <seealso marker="#type-restart_type">restart_type()</seealso></string></subtype>
        <subtype><typename>Started</typename><string>Started = [atom()]</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Application</anno>
  <anno>Reason</anno>
  <anno>Started</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>ensure_started</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>ensure_started(Application) -&gt; ok | {error, Reason}</head>
      <guard>
        <subtype><typename>Application</typename><string>Application = atom()</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Application</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>ensure_started</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>ensure_started(Application, Type) -&gt; ok | {error, Reason}</head>
      <guard>
        <subtype><typename>Application</typename><string>Application = atom()</string></subtype>
        <subtype><typename>Type</typename><string>Type = <seealso marker="#type-restart_type">restart_type()</seealso></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Application</anno>
  <anno>Reason</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>get_all_env</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>get_all_env() -&gt; Env</head>
      <guard>
        <subtype><typename>Env</typename><string>Env = [{Par :: atom(), Val :: term()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Env</anno>
  <anno>Par</anno>
  <anno>Val</anno>
</spec>
<spec>
  <name>get_all_env</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_all_env(Application) -&gt; Env</head>
      <guard>
        <subtype><typename>Application</typename><string>Application = atom()</string></subtype>
        <subtype><typename>Env</typename><string>Env = [{Par :: atom(), Val :: term()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Application</anno>
  <anno>Env</anno>
  <anno>Par</anno>
  <anno>Val</anno>
</spec>
<spec>
  <name>get_all_key</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>get_all_key() -&gt; [] | {ok, Keys}</head>
      <guard>
        <subtype><typename>Keys</typename><string>Keys = [{Key :: atom(), Val :: term()}, ...]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Keys</anno>
  <anno>Val</anno>
</spec>
<spec>
  <name>get_all_key</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_all_key(Application) -&gt; undefined | Keys</head>
      <guard>
        <subtype><typename>Application</typename><string>Application = atom()</string></subtype>
        <subtype><typename>Keys</typename><string>Keys = {ok, [{Key :: atom(), Val :: term()}, ...]}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Application</anno>
  <anno>Key</anno>
  <anno>Keys</anno>
  <anno>Val</anno>
</spec>
<spec>
  <name>get_application</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>get_application() -&gt; undefined | {ok, Application}</head>
      <guard>
        <subtype><typename>Application</typename><string>Application = atom()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Application</anno>
</spec>
<spec>
  <name>get_application</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_application(PidOrModule) -&gt; undefined | {ok, Application}</head>
      <guard>
        <subtype><typename>PidOrModule</typename><string>PidOrModule = (Pid :: pid()) | (Module :: module())</string></subtype>
        <subtype><typename>Application</typename><string>Application = atom()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Application</anno>
  <anno>Module</anno>
  <anno>Pid</anno>
  <anno>PidOrModule</anno>
</spec>
<spec>
  <name>get_env</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_env(Par) -&gt; undefined | {ok, Val}</head>
      <guard>
        <subtype><typename>Par</typename><string>Par = atom()</string></subtype>
        <subtype><typename>Val</typename><string>Val = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Par</anno>
  <anno>Val</anno>
</spec>
<spec>
  <name>get_env</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>get_env(Application, Par) -&gt; undefined | {ok, Val}</head>
      <guard>
        <subtype><typename>Application</typename><string>Application = Par = atom()</string></subtype>
        <subtype><typename>Par</typename><string/></subtype>
        <subtype><typename>Val</typename><string>Val = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Application</anno>
  <anno>Par</anno>
  <anno>Val</anno>
</spec>
<spec>
  <name>get_env</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>get_env(Application, Par, Def) -&gt; Val</head>
      <guard>
        <subtype><typename>Application</typename><string>Application = Par = atom()</string></subtype>
        <subtype><typename>Par</typename><string/></subtype>
        <subtype><typename>Def</typename><string>Def = Val = term()</string></subtype>
        <subtype><typename>Val</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Application</anno>
  <anno>Def</anno>
  <anno>Par</anno>
  <anno>Val</anno>
</spec>
<spec>
  <name>get_key</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>get_key(Key) -&gt; undefined | {ok, Val}</head>
      <guard>
        <subtype><typename>Key</typename><string>Key = atom()</string></subtype>
        <subtype><typename>Val</typename><string>Val = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Key</anno>
  <anno>Val</anno>
</spec>
<spec>
  <name>get_key</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>get_key(Application, Key) -&gt; undefined | {ok, Val}</head>
      <guard>
        <subtype><typename>Application</typename><string>Application = Key = atom()</string></subtype>
        <subtype><typename>Key</typename><string/></subtype>
        <subtype><typename>Val</typename><string>Val = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Application</anno>
  <anno>Key</anno>
  <anno>Val</anno>
</spec>
<spec>
  <name>info</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>info() -&gt; term()</head></clause>
  </contract>
</spec>
<spec>
  <name>load</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>load(AppDescr) -&gt; ok | {error, Reason}</head>
      <guard>
        <subtype><typename>AppDescr</typename><string>AppDescr = Application | (AppSpec :: <seealso marker="#type-application_spec">application_spec()</seealso>)</string></subtype>
        <subtype><typename>Application</typename><string>Application = atom()</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>AppDescr</anno>
  <anno>AppSpec</anno>
  <anno>Application</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>load</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>load(AppDescr, Distributed) -&gt; ok | {error, Reason}</head>
      <guard>
        <subtype><typename>AppDescr</typename><string>AppDescr = Application | (AppSpec :: <seealso marker="#type-application_spec">application_spec()</seealso>)</string></subtype>
        <subtype><typename>Application</typename><string>Application = atom()</string></subtype>
        <subtype><typename>Distributed</typename><string>Distributed = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{Application, Nodes} | {Application, Time, Nodes} | default</string></subtype>
        <subtype><typename>Nodes</typename><string>Nodes = [node() | <seealso marker="#type-tuple_of">tuple_of</seealso>(node())]</string></subtype>
        <subtype><typename>Time</typename><string>Time = integer() &gt;= 1</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>AppDescr</anno>
  <anno>AppSpec</anno>
  <anno>Application</anno>
  <anno>Distributed</anno>
  <anno>Nodes</anno>
  <anno>Reason</anno>
  <anno>Time</anno>
</spec>
<spec>
  <name>loaded_applications</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>loaded_applications() -&gt; [{Application, Description, Vsn}]</head>
      <guard>
        <subtype><typename>Application</typename><string>Application = atom()</string></subtype>
        <subtype><typename>Description</typename><string>Description = Vsn = string()</string></subtype>
        <subtype><typename>Vsn</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Application</anno>
  <anno>Description</anno>
  <anno>Vsn</anno>
</spec>
<spec>
  <name>permit</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>permit(Application, Permission) -&gt; ok | {error, Reason}</head>
      <guard>
        <subtype><typename>Application</typename><string>Application = atom()</string></subtype>
        <subtype><typename>Permission</typename><string>Permission = boolean()</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Application</anno>
  <anno>Permission</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>set_env</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>set_env(Application, Par, Val) -&gt; ok</head>
      <guard>
        <subtype><typename>Application</typename><string>Application = Par = atom()</string></subtype>
        <subtype><typename>Par</typename><string/></subtype>
        <subtype><typename>Val</typename><string>Val = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Application</anno>
  <anno>Par</anno>
  <anno>Val</anno>
</spec>
<spec>
  <name>set_env</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>set_env(Application, Par, Val, Opts) -&gt; ok</head>
      <guard>
        <subtype><typename>Application</typename><string>Application = Par = atom()</string></subtype>
        <subtype><typename>Par</typename><string/></subtype>
        <subtype><typename>Val</typename><string>Val = term()</string></subtype>
        <subtype><typename>Opts</typename><string>Opts = [{timeout, timeout()} | {persistent, boolean()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Application</anno>
  <anno>Opts</anno>
  <anno>Par</anno>
  <anno>Val</anno>
</spec>
<spec>
  <name>start</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>start(Application) -&gt; ok | {error, Reason}</head>
      <guard>
        <subtype><typename>Application</typename><string>Application = atom()</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Application</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>start</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>start(Application, Type) -&gt; ok | {error, Reason}</head>
      <guard>
        <subtype><typename>Application</typename><string>Application = atom()</string></subtype>
        <subtype><typename>Type</typename><string>Type = <seealso marker="#type-restart_type">restart_type()</seealso></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Application</anno>
  <anno>Reason</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>start_boot</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>start_boot(Application :: atom()) -&gt; ok | {error, term()}</head></clause>
  </contract>
  <anno>Application</anno>
</spec>
<spec>
  <name>start_boot</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>start_boot(Application :: atom(), RestartType :: <seealso marker="#type-restart_type">restart_type()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok | {error, term()}</head></clause>
  </contract>
  <anno>Application</anno>
  <anno>RestartType</anno>
</spec>
<spec>
  <name>start_type</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>start_type() -&gt; StartType | undefined | local</head>
      <guard>
        <subtype><typename>StartType</typename><string>StartType = <seealso marker="#type-start_type">start_type()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>StartType</anno>
</spec>
<spec>
  <name>stop</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>stop(Application) -&gt; ok | {error, Reason}</head>
      <guard>
        <subtype><typename>Application</typename><string>Application = atom()</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Application</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>takeover</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>takeover(Application, Type) -&gt; ok | {error, Reason}</head>
      <guard>
        <subtype><typename>Application</typename><string>Application = atom()</string></subtype>
        <subtype><typename>Type</typename><string>Type = <seealso marker="#type-restart_type">restart_type()</seealso></string></subtype>
        <subtype><typename>Reason</typename><string>Reason = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Application</anno>
  <anno>Reason</anno>
  <anno>Type</anno>
</spec>
<spec>
  <name>unload</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>unload(Application) -&gt; ok | {error, Reason}</head>
      <guard>
        <subtype><typename>Application</typename><string>Application = atom()</string></subtype>
        <subtype><typename>Reason</typename><string>Reason = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Application</anno>
  <anno>Reason</anno>
</spec>
<spec>
  <name>unset_env</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>unset_env(Application, Par) -&gt; ok</head>
      <guard>
        <subtype><typename>Application</typename><string>Application = Par = atom()</string></subtype>
        <subtype><typename>Par</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Application</anno>
  <anno>Par</anno>
</spec>
<spec>
  <name>unset_env</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>unset_env(Application, Par, Opts) -&gt; ok</head>
      <guard>
        <subtype><typename>Application</typename><string>Application = Par = atom()</string></subtype>
        <subtype><typename>Par</typename><string/></subtype>
        <subtype><typename>Opts</typename><string>Opts = [{timeout, timeout()} | {persistent, boolean()}]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Application</anno>
  <anno>Opts</anno>
  <anno>Par</anno>
</spec>
<spec>
  <name>which_applications</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>which_applications() -&gt; [{Application, Description, Vsn}]</head>
      <guard>
        <subtype><typename>Application</typename><string>Application = atom()</string></subtype>
        <subtype><typename>Description</typename><string>Description = Vsn = string()</string></subtype>
        <subtype><typename>Vsn</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Application</anno>
  <anno>Description</anno>
  <anno>Vsn</anno>
</spec>
<spec>
  <name>which_applications</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>which_applications(Timeout) -&gt; [{Application, Description, Vsn}]</head>
      <guard>
        <subtype><typename>Timeout</typename><string>Timeout = timeout()</string></subtype>
        <subtype><typename>Application</typename><string>Application = atom()</string></subtype>
        <subtype><typename>Description</typename><string>Description = Vsn = string()</string></subtype>
        <subtype><typename>Vsn</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Application</anno>
  <anno>Description</anno>
  <anno>Timeout</anno>
  <anno>Vsn</anno>
</spec>
<timestamp>Generated by EDoc, Jul 12 2017, 20:27:37.</timestamp>
</module>