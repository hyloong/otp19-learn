<module name="os">
<spec>
  <name>cmd</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>cmd(Command) -&gt; string()</head>
      <guard>
        <subtype><typename>Command</typename><string>Command = atom() | <seealso marker="io_lib#type-chars">io_lib:chars()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Command</anno>
</spec>
<spec>
  <name>find_executable</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>find_executable(Name) -&gt; Filename | false</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = Filename = string()</string></subtype>
        <subtype><typename>Filename</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Filename</anno>
  <anno>Name</anno>
</spec>
<spec>
  <name>find_executable</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>find_executable(Name, Path) -&gt; Filename | false</head>
      <guard>
        <subtype><typename>Name</typename><string>Name = Path = Filename = string()</string></subtype>
        <subtype><typename>Path</typename><string></string></subtype>
        <subtype><typename>Filename</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Filename</anno>
  <anno>Name</anno>
  <anno>Path</anno>
</spec>
<spec>
  <name>getenv</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>getenv() -&gt; [string()]</head></clause>
  </contract>
</spec>
<spec>
  <name>getenv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>getenv(VarName) -&gt; Value | false</head>
      <guard>
        <subtype><typename>VarName</typename><string>VarName = Value = string()</string></subtype>
        <subtype><typename>Value</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Value</anno>
  <anno>VarName</anno>
</spec>
<spec>
  <name>getenv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>getenv(VarName, DefaultValue) -&gt; Value</head>
      <guard>
        <subtype><typename>VarName</typename><string>VarName = DefaultValue = Value = string()</string></subtype>
        <subtype><typename>DefaultValue</typename><string></string></subtype>
        <subtype><typename>Value</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>DefaultValue</anno>
  <anno>Value</anno>
  <anno>VarName</anno>
</spec>
<spec>
  <name>getpid</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>getpid() -&gt; Value</head>
      <guard>
        <subtype><typename>Value</typename><string>Value = string()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Value</anno>
</spec>
<spec>
  <name>perf_counter</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>perf_counter() -&gt; Counter</head>
      <guard>
        <subtype><typename>Counter</typename><string>Counter = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Counter</anno>
</spec>
<spec>
  <name>perf_counter</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>perf_counter(Unit) -&gt; integer()</head>
      <guard>
        <subtype><typename>Unit</typename><string>Unit = <seealso marker="erlang#type-time_unit">erlang:time_unit()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Unit</anno>
</spec>
<spec>
  <name>putenv</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>putenv(VarName, Value) -&gt; true</head>
      <guard>
        <subtype><typename>VarName</typename><string>VarName = Value = string()</string></subtype>
        <subtype><typename>Value</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Value</anno>
  <anno>VarName</anno>
</spec>
<spec>
  <name>set_signal</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>set_signal(Signal, Option) -&gt; ok</head>
      <guard>
        <subtype><typename>Signal</typename><string>Signal = <br/><nbsp/><nbsp/><nbsp/><nbsp/>sighup |<br/><nbsp/><nbsp/><nbsp/><nbsp/>sigquit |<br/><nbsp/><nbsp/><nbsp/><nbsp/>sigabrt |<br/><nbsp/><nbsp/><nbsp/><nbsp/>sigalrm |<br/><nbsp/><nbsp/><nbsp/><nbsp/>sigterm |<br/><nbsp/><nbsp/><nbsp/><nbsp/>sigusr1 |<br/><nbsp/><nbsp/><nbsp/><nbsp/>sigusr2 |<br/><nbsp/><nbsp/><nbsp/><nbsp/>sigchld |<br/><nbsp/><nbsp/><nbsp/><nbsp/>sigstop |<br/><nbsp/><nbsp/><nbsp/><nbsp/>sigtstp</string></subtype>
        <subtype><typename>Option</typename><string>Option = default | handle | ignore</string></subtype>
      </guard></clause>
  </contract>
  <anno>Option</anno>
  <anno>Signal</anno>
</spec>
<spec>
  <name>system_time</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>system_time() -&gt; integer()</head></clause>
  </contract>
</spec>
<spec>
  <name>system_time</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>system_time(Unit) -&gt; integer()</head>
      <guard>
        <subtype><typename>Unit</typename><string>Unit = <seealso marker="erlang#type-time_unit">erlang:time_unit()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Unit</anno>
</spec>
<spec>
  <name>timestamp</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>timestamp() -&gt; Timestamp</head>
      <guard>
        <subtype><typename>Timestamp</typename><string>Timestamp = <seealso marker="erlang#type-timestamp">erlang:timestamp()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Timestamp</anno>
</spec>
<spec>
  <name>type</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>type() -&gt; {Osfamily, Osname}</head>
      <guard>
        <subtype><typename>Osfamily</typename><string>Osfamily = unix | win32</string></subtype>
        <subtype><typename>Osname</typename><string>Osname = atom()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Osfamily</anno>
  <anno>Osname</anno>
</spec>
<spec>
  <name>unsetenv</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>unsetenv(VarName) -&gt; true</head>
      <guard>
        <subtype><typename>VarName</typename><string>VarName = string()</string></subtype>
      </guard></clause>
  </contract>
  <anno>VarName</anno>
</spec>
<spec>
  <name>version</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>version() -&gt; VersionString | {Major, Minor, Release}</head>
      <guard>
        <subtype><typename>VersionString</typename><string>VersionString = string()</string></subtype>
        <subtype><typename>Major</typename><string>Major = Minor = Release = integer() &gt;= 0</string></subtype>
        <subtype><typename>Minor</typename><string></string></subtype>
        <subtype><typename>Release</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>Major</anno>
  <anno>Minor</anno>
  <anno>Release</anno>
  <anno>VersionString</anno>
</spec>
<timestamp>Generated by EDoc, Jul 12 2017, 20:27:44.</timestamp>
</module>