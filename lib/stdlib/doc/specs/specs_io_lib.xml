<module name="io_lib">
<type>
  <name>chars</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-chars">chars()</marker> = [char() | <seealso marker="#type-chars">chars()</seealso>]</typehead></typedecl>
</type>
<type>
  <name>continuation</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-continuation">continuation()</marker></typehead></typedecl>
</type>
<type>
  <name>depth</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-depth">depth()</marker> = -1 | integer() &gt;= 0</typehead></typedecl>
</type>
<type>
  <name>format_spec</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-format_spec">format_spec()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#{control_char := char(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>args := [any()],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>width := none | integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>adjust := left | right,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>precision := none | integer(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>pad_char := char(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>encoding := unicode | latin1,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>strings := boolean()}</typehead></typedecl>
</type>
<type>
  <name>fread_error</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-fread_error">fread_error()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>atom |<br/><nbsp/><nbsp/><nbsp/><nbsp/>based |<br/><nbsp/><nbsp/><nbsp/><nbsp/>character |<br/><nbsp/><nbsp/><nbsp/><nbsp/>float |<br/><nbsp/><nbsp/><nbsp/><nbsp/>format |<br/><nbsp/><nbsp/><nbsp/><nbsp/>input |<br/><nbsp/><nbsp/><nbsp/><nbsp/>integer |<br/><nbsp/><nbsp/><nbsp/><nbsp/>string |<br/><nbsp/><nbsp/><nbsp/><nbsp/>unsigned</typehead></typedecl>
</type>
<type>
  <name>fread_item</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-fread_item">fread_item()</marker> = string() | atom() | integer() | float()</typehead></typedecl>
</type>
<type>
  <name>latin1_string</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-latin1_string">latin1_string()</marker> = [<seealso marker="unicode#type-latin1_char">unicode:latin1_char()</seealso>]</typehead></typedecl>
</type>
<spec>
  <name>build_text</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>build_text(FormatList) -&gt; <seealso marker="#type-chars">chars()</seealso></head>
      <guard>
        <subtype><typename>FormatList</typename><string>FormatList = [char() | <seealso marker="#type-format_spec">format_spec()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>FormatList</anno>
</spec>
<spec>
  <name>char_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>char_list(Term) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>collect_chars</name>
  <arity>3</arity>
  <contract/>
</spec>
<spec>
  <name>collect_chars</name>
  <arity>4</arity>
  <contract/>
</spec>
<spec>
  <name>collect_line</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>collect_line</name>
  <arity>3</arity>
  <contract/>
</spec>
<spec>
  <name>collect_line</name>
  <arity>4</arity>
  <contract/>
</spec>
<spec>
  <name>deep_char_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>deep_char_list(Term) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>deep_latin1_char_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>deep_latin1_char_list(Term) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>deep_unicode_char_list</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>format</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>format(Format, Data) -&gt; <seealso marker="#type-chars">chars()</seealso></head>
      <guard>
        <subtype><typename>Format</typename><string>Format = <seealso marker="io#type-format">io:format()</seealso></string></subtype>
        <subtype><typename>Data</typename><string>Data = [term()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Format</anno>
</spec>
<spec>
  <name>format_prompt</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>format_prompt(Prompt :: term()) -&gt; <seealso marker="#type-chars">chars()</seealso></head></clause>
  </contract>
  <anno>Prompt</anno>
</spec>
<spec>
  <name>format_prompt</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>format_prompt(Prompt :: term(), Encoding :: atom()) -&gt; <seealso marker="#type-chars">chars()</seealso></head></clause>
  </contract>
  <anno>Encoding</anno>
  <anno>Prompt</anno>
</spec>
<spec>
  <name>fread</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>fread(Format, String) -&gt; Result</head>
      <guard>
        <subtype><typename>Format</typename><string>Format = String = string()</string></subtype>
        <subtype><typename>String</typename><string/></subtype>
        <subtype><typename>Result</typename><string>Result = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, InputList :: [<seealso marker="#type-fread_item">fread_item()</seealso>], LeftOverChars :: string()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{more,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>RestFormat :: string(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Nchars :: integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>InputStack :: <seealso marker="#type-chars">chars()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {fread, What :: <seealso marker="#type-fread_error">fread_error()</seealso>}}</string></subtype>
      </guard></clause>
  </contract>
  <anno>Format</anno>
  <anno>InputList</anno>
  <anno>InputStack</anno>
  <anno>LeftOverChars</anno>
  <anno>Nchars</anno>
  <anno>RestFormat</anno>
  <anno>Result</anno>
  <anno>String</anno>
  <anno>What</anno>
</spec>
<spec>
  <name>fread</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>fread(Continuation, CharSpec, Format) -&gt; Return</head>
      <guard>
        <subtype><typename>Continuation</typename><string>Continuation = <seealso marker="#type-continuation">continuation()</seealso> | []</string></subtype>
        <subtype><typename>CharSpec</typename><string>CharSpec = string() | eof</string></subtype>
        <subtype><typename>Format</typename><string>Format = string()</string></subtype>
        <subtype><typename>Return</typename><string>Return = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{more, Continuation1 :: <seealso marker="#type-continuation">continuation()</seealso>} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{done, Result, LeftOverChars :: string()}</string></subtype>
        <subtype><typename>Result</typename><string>Result = <br/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, InputList :: [<seealso marker="#type-fread_item">fread_item()</seealso>]} |<br/><nbsp/><nbsp/><nbsp/><nbsp/>eof |<br/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {fread, What :: <seealso marker="#type-fread_error">fread_error()</seealso>}}</string></subtype>
      </guard></clause>
  </contract>
  <anno>CharSpec</anno>
  <anno>Continuation</anno>
  <anno>Continuation1</anno>
  <anno>Format</anno>
  <anno>InputList</anno>
  <anno>LeftOverChars</anno>
  <anno>Result</anno>
  <anno>Return</anno>
  <anno>What</anno>
</spec>
<spec>
  <name>fwrite</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>fwrite(Format, Data) -&gt; <seealso marker="#type-chars">chars()</seealso></head>
      <guard>
        <subtype><typename>Format</typename><string>Format = <seealso marker="io#type-format">io:format()</seealso></string></subtype>
        <subtype><typename>Data</typename><string>Data = [term()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Format</anno>
</spec>
<spec>
  <name>get_until</name>
  <arity>3</arity>
  <contract/>
</spec>
<spec>
  <name>get_until</name>
  <arity>4</arity>
  <contract/>
</spec>
<spec>
  <name>indentation</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>indentation(String, StartIndent) -&gt; integer()</head>
      <guard>
        <subtype><typename>String</typename><string>String = string()</string></subtype>
        <subtype><typename>StartIndent</typename><string>StartIndent = integer()</string></subtype>
      </guard></clause>
  </contract>
  <anno>StartIndent</anno>
  <anno>String</anno>
</spec>
<spec>
  <name>latin1_char_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>latin1_char_list(Term) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>limit_term</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>limit_term(Term :: term(), Depth :: integer() &gt;= 0) -&gt; term()</head></clause>
  </contract>
  <anno>Depth</anno>
  <anno>Term</anno>
</spec>
<spec>
  <name>nl</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>nl() -&gt; string()</head></clause>
  </contract>
</spec>
<spec>
  <name>print</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>print(Term) -&gt; <seealso marker="#type-chars">chars()</seealso></head>
      <guard>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>print</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>print(Term, Column, LineLength, Depth) -&gt; <seealso marker="#type-chars">chars()</seealso></head>
      <guard>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
        <subtype><typename>Column</typename><string>Column = LineLength = integer() &gt;= 0</string></subtype>
        <subtype><typename>LineLength</typename><string/></subtype>
        <subtype><typename>Depth</typename><string>Depth = <seealso marker="#type-depth">depth()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Column</anno>
  <anno>Depth</anno>
  <anno>LineLength</anno>
  <anno>Term</anno>
</spec>
<spec>
  <name>printable_latin1_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>printable_latin1_list(Term) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>printable_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>printable_list(Term) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>printable_unicode_list</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>printable_unicode_list(Term) -&gt; boolean()</head>
      <guard>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>quote_atom</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>quote_atom(Atom :: atom(), Cs0 :: <seealso marker="#type-chars">chars()</seealso>) -&gt; boolean()</head></clause>
  </contract>
  <anno>Atom</anno>
  <anno>Cs0</anno>
</spec>
<spec>
  <name>scan_format</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>scan_format(Format, Data) -&gt; FormatList</head>
      <guard>
        <subtype><typename>Format</typename><string>Format = <seealso marker="io#type-format">io:format()</seealso></string></subtype>
        <subtype><typename>Data</typename><string>Data = [term()]</string></subtype>
        <subtype><typename>FormatList</typename><string>FormatList = [char() | <seealso marker="#type-format_spec">format_spec()</seealso>]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Format</anno>
  <anno>FormatList</anno>
</spec>
<spec>
  <name>unscan_format</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>unscan_format(FormatList) -&gt; {Format, Data}</head>
      <guard>
        <subtype><typename>FormatList</typename><string>FormatList = [char() | <seealso marker="#type-format_spec">format_spec()</seealso>]</string></subtype>
        <subtype><typename>Format</typename><string>Format = <seealso marker="io#type-format">io:format()</seealso></string></subtype>
        <subtype><typename>Data</typename><string>Data = [term()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Data</anno>
  <anno>Format</anno>
  <anno>FormatList</anno>
</spec>
<spec>
  <name>write</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>write(Term) -&gt; <seealso marker="#type-chars">chars()</seealso></head>
      <guard>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Term</anno>
</spec>
<spec>
  <name>write</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>write(Term, Depth) -&gt; <seealso marker="#type-chars">chars()</seealso></head>
      <guard>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
        <subtype><typename>Depth</typename><string>Depth = <seealso marker="#type-depth">depth()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Depth</anno>
  <anno>Term</anno>
</spec>
<spec>
  <name>write</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>write(Term, Options) -&gt; <seealso marker="#type-chars">chars()</seealso></head>
      <guard>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
        <subtype><typename>Options</typename><string>Options = [Option]</string></subtype>
        <subtype><typename>Option</typename><string>Option = {depth, Depth} | {encoding, latin1 | utf8 | unicode}</string></subtype>
        <subtype><typename>Depth</typename><string>Depth = <seealso marker="#type-depth">depth()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Depth</anno>
  <anno>Option</anno>
  <anno>Options</anno>
  <anno>Term</anno>
</spec>
<spec>
  <name>write</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>write(Term :: term(), D :: <seealso marker="#type-depth">depth()</seealso>, X3 :: boolean()) -&gt; <seealso marker="#type-chars">chars()</seealso></head></clause>
  </contract>
  <anno>D</anno>
  <anno>Term</anno>
  <anno>X3</anno>
</spec>
<spec>
  <name>write_atom</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>write_atom(Atom) -&gt; <seealso marker="#type-chars">chars()</seealso></head>
      <guard>
        <subtype><typename>Atom</typename><string>Atom = atom()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Atom</anno>
</spec>
<spec>
  <name>write_atom_as_latin1</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>write_atom_as_latin1(Atom) -&gt; <seealso marker="#type-latin1_string">latin1_string()</seealso></head>
      <guard>
        <subtype><typename>Atom</typename><string>Atom = atom()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Atom</anno>
</spec>
<spec>
  <name>write_char</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>write_char(Char) -&gt; <seealso marker="#type-chars">chars()</seealso></head>
      <guard>
        <subtype><typename>Char</typename><string>Char = char()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Char</anno>
</spec>
<spec>
  <name>write_char_as_latin1</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>write_char_as_latin1(Char) -&gt; <seealso marker="#type-latin1_string">latin1_string()</seealso></head>
      <guard>
        <subtype><typename>Char</typename><string>Char = char()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Char</anno>
</spec>
<spec>
  <name>write_latin1_char</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>write_latin1_char(Latin1Char) -&gt; <seealso marker="#type-latin1_string">latin1_string()</seealso></head>
      <guard>
        <subtype><typename>Latin1Char</typename><string>Latin1Char = <seealso marker="unicode#type-latin1_char">unicode:latin1_char()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Latin1Char</anno>
</spec>
<spec>
  <name>write_latin1_string</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>write_latin1_string(Latin1String) -&gt; <seealso marker="#type-latin1_string">latin1_string()</seealso></head>
      <guard>
        <subtype><typename>Latin1String</typename><string>Latin1String = <seealso marker="#type-latin1_string">latin1_string()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Latin1String</anno>
</spec>
<spec>
  <name>write_latin1_string</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>write_latin1_string(S :: <seealso marker="#type-latin1_string">latin1_string()</seealso>, Q :: char()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-latin1_string">latin1_string()</seealso></head></clause>
  </contract>
  <anno>Q</anno>
  <anno>S</anno>
</spec>
<spec>
  <name>write_string</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>write_string(String) -&gt; <seealso marker="#type-chars">chars()</seealso></head>
      <guard>
        <subtype><typename>String</typename><string>String = string()</string></subtype>
      </guard></clause>
  </contract>
  <anno>String</anno>
</spec>
<spec>
  <name>write_string</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>write_string(S :: string(), Q :: char()) -&gt; <seealso marker="#type-chars">chars()</seealso></head></clause>
  </contract>
  <anno>Q</anno>
  <anno>S</anno>
</spec>
<spec>
  <name>write_string_as_latin1</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>write_string_as_latin1(String) -&gt; <seealso marker="#type-latin1_string">latin1_string()</seealso></head>
      <guard>
        <subtype><typename>String</typename><string>String = string()</string></subtype>
      </guard></clause>
  </contract>
  <anno>String</anno>
</spec>
<spec>
  <name>write_string_as_latin1</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>write_string_as_latin1(S :: string(), Q :: char()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-latin1_string">latin1_string()</seealso></head></clause>
  </contract>
  <anno>Q</anno>
  <anno>S</anno>
</spec>
<spec>
  <name>write_unicode_char</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>write_unicode_string</name>
  <arity>1</arity>
  <contract/>
</spec>
<timestamp>Generated by EDoc, Jul 12 2017, 20:27:20.</timestamp>
</module>