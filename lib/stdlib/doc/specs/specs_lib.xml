<module name="lib">
<spec>
  <name>error_message</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>error_message(Format, Args) -&gt; ok</head>
      <guard>
        <subtype><typename>Format</typename><string>Format = <seealso marker="io#type-format">io:format()</seealso></string></subtype>
        <subtype><typename>Args</typename><string>Args = [term()]</string></subtype>
      </guard></clause>
  </contract>
  <anno>Args</anno>
  <anno>Format</anno>
</spec>
<spec>
  <name>eval_str</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>eval_str(Str :: string() | <seealso marker="unicode#type-latin1_binary">unicode:latin1_binary()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, string()} | {error, string()}</head></clause>
  </contract>
  <anno>Str</anno>
</spec>
<spec>
  <name>extended_parse_exprs</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>extended_parse_exprs(Tokens) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, ExprList, Bindings} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, ErrorInfo}</head>
      <guard>
        <subtype><typename>Tokens</typename><string>Tokens = [<seealso marker="erl_scan#type-token">erl_scan:token()</seealso>]</string></subtype>
        <subtype><typename>ExprList</typename><string>ExprList = [<seealso marker="erl_parse#type-abstract_expr">erl_parse:abstract_expr()</seealso>]</string></subtype>
        <subtype><typename>Bindings</typename><string>Bindings = <seealso marker="erl_eval#type-binding_struct">erl_eval:binding_struct()</seealso></string></subtype>
        <subtype><typename>ErrorInfo</typename><string>ErrorInfo = <seealso marker="erl_parse#type-error_info">erl_parse:error_info()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Bindings</anno>
  <anno>ErrorInfo</anno>
  <anno>ExprList</anno>
  <anno>Tokens</anno>
</spec>
<spec>
  <name>extended_parse_term</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>extended_parse_term(Tokens) -&gt; {ok, Term} | {error, ErrorInfo}</head>
      <guard>
        <subtype><typename>Tokens</typename><string>Tokens = [<seealso marker="erl_scan#type-token">erl_scan:token()</seealso>]</string></subtype>
        <subtype><typename>Term</typename><string>Term = term()</string></subtype>
        <subtype><typename>ErrorInfo</typename><string>ErrorInfo = <seealso marker="erl_parse#type-error_info">erl_parse:error_info()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>ErrorInfo</anno>
  <anno>Term</anno>
  <anno>Tokens</anno>
</spec>
<spec>
  <name>flush_receive</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>flush_receive() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>format_call</name>
  <arity>4</arity>
  <contract/>
</spec>
<spec>
  <name>format_call</name>
  <arity>5</arity>
  <contract/>
</spec>
<spec>
  <name>format_exception</name>
  <arity>6</arity>
  <contract/>
</spec>
<spec>
  <name>format_exception</name>
  <arity>7</arity>
  <contract/>
</spec>
<spec>
  <name>format_fun</name>
  <arity>1</arity>
  <contract/>
</spec>
<spec>
  <name>format_fun</name>
  <arity>2</arity>
  <contract/>
</spec>
<spec>
  <name>format_stacktrace</name>
  <arity>4</arity>
  <contract/>
</spec>
<spec>
  <name>format_stacktrace</name>
  <arity>5</arity>
  <contract/>
</spec>
<spec>
  <name>nonl</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>nonl(String1) -&gt; String2</head>
      <guard>
        <subtype><typename>String1</typename><string>String1 = String2 = string()</string></subtype>
        <subtype><typename>String2</typename><string></string></subtype>
      </guard></clause>
  </contract>
  <anno>String1</anno>
  <anno>String2</anno>
</spec>
<spec>
  <name>progname</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>progname() -&gt; atom()</head></clause>
  </contract>
</spec>
<spec>
  <name>send</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>send(To, Msg) -&gt; Msg</head>
      <guard>
        <subtype><typename>To</typename><string>To = pid() | atom() | {atom(), node()}</string></subtype>
        <subtype><typename>Msg</typename><string>Msg = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Msg</anno>
  <anno>To</anno>
</spec>
<spec>
  <name>sendw</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>sendw(To, Msg) -&gt; term()</head>
      <guard>
        <subtype><typename>To</typename><string>To = pid() | atom() | {atom(), node()}</string></subtype>
        <subtype><typename>Msg</typename><string>Msg = term()</string></subtype>
      </guard></clause>
  </contract>
  <anno>Msg</anno>
  <anno>To</anno>
</spec>
<spec>
  <name>subst_values_for_vars</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>subst_values_for_vars(ExprList, Bindings) -&gt; [term()]</head>
      <guard>
        <subtype><typename>ExprList</typename><string>ExprList = [<seealso marker="erl_parse#type-abstract_expr">erl_parse:abstract_expr()</seealso>]</string></subtype>
        <subtype><typename>Bindings</typename><string>Bindings = <seealso marker="erl_eval#type-binding_struct">erl_eval:binding_struct()</seealso></string></subtype>
      </guard></clause>
  </contract>
  <anno>Bindings</anno>
  <anno>ExprList</anno>
</spec>
<timestamp>Generated by EDoc, Jul 12 2017, 20:27:21.</timestamp>
</module>